void sub_223AA4B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;
  uint64_t v67;

  MEMORY[0x227684CE8](v67, 0x1000C4072FAA15ELL);
  MEMORY[0x227684CE8](v66, 0x1000C4072FAA15ELL);
  sub_2231874DC((uint64_t)&a46);
  if (a41 < 0)
    operator delete(__p);
  sub_22392AA18((uint64_t)&a57);
  sub_2231874DC((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_223AA4D40(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705218((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223AA4E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AA4E7C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2232A6F44((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223AA4F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AA4FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unsigned int *v5;
  unsigned int *i;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _OWORD *v16;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::mutex *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string::size_type size;
  std::string *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  int v35;
  BOOL v36;
  uint64_t v38;
  uint64_t *v39;
  void *__p[2];
  uint64_t v41;
  std::string v42;
  void *__dst[2];
  char v44;
  uint64_t v45[3];
  _QWORD v46[2];
  char v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  void *v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56[88];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v48 = 0u;
  v49 = 0u;
  v50 = 728321656;
  kdebug_trace();
  v4 = (char *)operator new(0x20uLL);
  v38 = a2;
  strcpy(v4, "PCMExtractChunkMeshesInt");
  sub_223197FA4(__dst, v4, 0x18uLL);
  strcpy((char *)v45, "PointCloudMapper");
  HIBYTE(v45[2]) = 16;
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v46[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v47 = 1;
  operator delete(v4);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 2112) + 16))(*(_QWORD *)(a1 + 2112), a1 + 2064, a1 + 40, *(_QWORD *)(a1 + 2088) + 16, 0);
  v5 = *(unsigned int **)(a1 + 2064);
  for (i = *(unsigned int **)(a1 + 2072); v5 != i; ++v5)
  {
    v7 = *(_QWORD **)(a1 + 2088);
    v8 = *v5;
    if (v7[13] <= v8
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
    {
LABEL_57:
      abort();
    }
    v9 = v7[12] + v8;
    v10 = *(_QWORD *)(v7[9] + 8 * (v9 / 0x1F));
    v11 = v9 % 0x1F;
    if (*(_BYTE *)(v10 + 132 * v11 + 20))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_57;
      }
      v12 = v7[12] + v8;
      v11 = v12 % 0x1F;
      v10 = *(_QWORD *)(v7[9] + 8 * (v12 / 0x1F));
    }
    v13 = v10 + 132 * v11;
    v14 = *(_DWORD *)(v13 + 8) & 0xFFFFFFE0;
    *(_QWORD *)&v54 = *(_QWORD *)v13 & 0xFFFFFFE0FFFFFFE0;
    DWORD2(v54) = v14;
    sub_22397FD34((uint64_t **)(a1 + 2128), (int *)&v54, (uint64_t)&v54);
  }
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_DWORD *)(v38 + 32) = 1065353216;
  v15 = *(_QWORD **)(a1 + 2128);
  v16 = (_OWORD *)(a1 + 2136);
  if (v15 != (_QWORD *)(a1 + 2136))
  {
    do
    {
      sub_223CF5E88((uint64_t *)(*(_QWORD *)(a1 + 2088) + 256), (_DWORD *)v15 + 7, 0, (uint64_t **)v52);
      sub_223AA0F30((uint64_t)v15 + 28, v52, (_QWORD *)(*(_QWORD *)(a1 + 2088) + 16), 1, (uint64_t)&v54);
      v18 = sub_223995A9C(v38, (int *)v15 + 7, (uint64_t)v15 + 28, (uint64_t)&v54);
      if (!v19)
        sub_2237C2E74(v18 + 4, (uint64_t)&v54);
      sub_22316F8F4((uint64_t *)&v54);
      sub_223198030((uint64_t)v52, (_QWORD *)v52[1]);
      v20 = (_QWORD *)v15[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v15[2];
          v36 = *v21 == (_QWORD)v15;
          v15 = v21;
        }
        while (!v36);
      }
      v15 = v21;
    }
    while (v21 != (_QWORD *)v16);
  }
  sub_223198030(a1 + 2128, *(_QWORD **)(a1 + 2136));
  *(_QWORD *)(a1 + 2128) = v16;
  *v16 = 0u;
  if (!*(_BYTE *)(a1 + 33))
  {
    v22 = *(_QWORD **)(v38 + 16);
    if (v22)
    {
      while (1)
      {
        *(_QWORD *)&v54 = "cv3d.recon.";
        *((_QWORD *)&v54 + 1) = 11;
        *(_QWORD *)&v55 = "JasperMeshing.Mesh.Chunks";
        *((_QWORD *)&v55 + 1) = 25;
        sub_2231A9820((uint64_t)&v54, (uint64_t)v56, 0, 0, &v42);
        sub_224569D7C();
        sub_224569A80();
        if (!os_variant_has_internal_diagnostics())
          goto LABEL_36;
        v23 = sub_2241471F8();
        v24 = v23[2];
        if (!v24)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v24 = v23[2];
        }
        v25 = *(_QWORD *)(v24 + 64);
        v26 = (std::mutex *)(v25 + 32);
        std::mutex::lock((std::mutex *)(v25 + 32));
        v28 = *(_QWORD *)(v25 + 96);
        v27 = *(_QWORD *)(v25 + 104);
        std::mutex::unlock(v26);
        if (v28 == v27)
          goto LABEL_36;
        sub_2241471F8();
        v29 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29))
          goto LABEL_36;
        v54 = 0u;
        v55 = 0u;
        v56[0] = 728325608;
        kdebug_trace();
        v39 = v22 + 2;
        sub_223A9DDAC(&v39);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29))
        {
          *(_OWORD *)v52 = *(_OWORD *)__p;
          v53 = v41;
          __p[0] = 0;
          __p[1] = 0;
          v41 = 0;
          *(_QWORD *)&v51 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v51 + 1) = 2;
          v30 = sub_2241471F8();
          sub_22393B200((uint64_t)v30, v29, (uint64_t)(v22 + 4), (uint64_t)v52, &v51);
          if (SHIBYTE(v53) < 0)
            break;
        }
        if (SHIBYTE(v41) < 0)
          goto LABEL_34;
LABEL_35:
        kdebug_trace();
LABEL_36:
        v54 = 0u;
        v55 = 0u;
        v56[0] = 728325624;
        kdebug_trace();
        size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v42.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          v32 = &v42;
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v32 = (std::string *)v42.__r_.__value_.__r.__words[0];
          v33 = v32->__r_.__value_.__r.__words[0];
          v34 = v32->__r_.__value_.__l.__size_;
          v35 = v32->__r_.__value_.__s.__data_[16];
          v36 = v33 == 0x6365722E64337663 && v34 == 0x73746174532E6E6FLL;
          if (v36 && v35 == 46)
          {
            sub_223187510();
            __p[0] = v22 + 2;
            sub_223A9DDAC((uint64_t **)__p);
            if (SHIBYTE(v53) < 0)
              operator delete(v52[0]);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v22 = (_QWORD *)*v22;
        if (!v22)
          goto LABEL_10;
      }
      operator delete(v52[0]);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_35;
LABEL_34:
      operator delete(__p[0]);
      goto LABEL_35;
    }
  }
LABEL_10:
  sub_22391CC34((uint64_t *)__dst, v45, (uint64_t)v46);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete((void *)v45[0]);
    if ((v44 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_56:
    operator delete(__dst[0]);
    return kdebug_trace();
  }
  if (v44 < 0)
    goto LABEL_56;
  return kdebug_trace();
}

void sub_223AA56A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AA57C4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string __p;
  __int128 v19;
  __int128 v20;
  int v21[90];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_223AA16CC((_QWORD *)(*(_QWORD *)(a1 + 2088) + 16), 1, (uint64_t *)&v19);
  sub_2237C2E74(a2, (uint64_t)&v19);
  sub_22316F8F4((uint64_t *)&v19);
  if (!*(_BYTE *)(a1 + 33))
  {
    *(_QWORD *)&v19 = "cv3d.recon.";
    *((_QWORD *)&v19 + 1) = 11;
    *(_QWORD *)&v20 = "JasperMeshing.Mesh";
    *((_QWORD *)&v20 + 1) = 18;
    sub_2231A9820((uint64_t)&v19, (uint64_t)v21, 0, 0, &__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v4 = sub_2241471F8();
      v5 = v4[2];
      if (!v5)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v5 = v4[2];
      }
      v6 = *(_QWORD *)(v5 + 64);
      v7 = (std::mutex *)(v6 + 32);
      std::mutex::lock((std::mutex *)(v6 + 32));
      v9 = *(_QWORD *)(v6 + 96);
      v8 = *(_QWORD *)(v6 + 104);
      std::mutex::unlock(v7);
      if (v9 != v8)
      {
        sub_2241471F8();
        v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          v19 = 0u;
          v20 = 0u;
          v21[0] = 728325608;
          kdebug_trace();
          sub_223A97F90((double *)&qword_255788F20, v10, (uint64_t)a2, "FullMesh");
          kdebug_trace();
        }
      }
    }
    v19 = 0u;
    v20 = 0u;
    v21[0] = 728325624;
    kdebug_trace();
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = p_p->__r_.__value_.__r.__words[0];
      v14 = p_p->__r_.__value_.__l.__size_;
      v15 = p_p->__r_.__value_.__s.__data_[16];
      if (v13 == 0x6365722E64337663 && v14 == 0x73746174532E6E6FLL && v15 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_223AA5AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223AA5AF8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC5ECE0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_223AA5B34(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC5ECE0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA5B80(uint64_t a1, unsigned int **a2, int8x8_t *a3, uint64_t a4, _QWORD *a5)
{
  char *v8;
  int8x16_t v9;
  float32x4_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unsigned int *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  int64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t *v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  uint64_t v66;
  int8x16_t v67;
  float32x2_t v68;
  int8x16_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t j;
  uint64_t v76;
  uint64_t i;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t k;
  uint64_t v82;
  float32x2_t *v83;
  float32x2_t v84;
  int8x16_t v85;
  float32x2_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  float32x2_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int8x16_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 v109;
  float32x2_t v110;
  float32x2_t *v111;
  unsigned int *v114;
  int v115;
  int v116;
  int8x8_t v117;
  unsigned int v118;
  unsigned int *v119;
  uint64_t v120;
  int **v122;
  int v123;
  int v124;
  uint64_t v125[3];
  void *__p[2];
  char v127;
  _QWORD v128[2];
  char v129;
  __int128 v130;
  __int128 v131;
  int v132;

  v130 = 0u;
  v131 = 0u;
  v132 = 728321624;
  kdebug_trace();
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "PointCloudMapper.UpdateWithFrame");
  strcpy((char *)v125, "PCMPointFiltering");
  HIBYTE(v125[2]) = 17;
  sub_223197FA4(__p, v8, 0x20uLL);
  v128[0] = 0;
  v128[1] = 0;
  v129 = 0;
  v128[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v129 = 1;
  operator delete(v8);
  v15 = *a2;
  v114 = a2[1];
  if (*a2 != v114)
  {
    v120 = a4;
    do
    {
      v16 = *v15;
      if (*(_QWORD *)&a3[11] <= v16
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&a3[7] + 8 * ((*(_QWORD *)&a3[10] + v16) / 0x1F))+ 132 * ((*(_QWORD *)&a3[10] + v16) % 0x1F)+ 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v118 = v16;
      v119 = v15;
      v117 = a3[16];
      v122 = (int **)(*(_QWORD *)&v117 + 168 * v16);
      v17 = *(_DWORD *)(a1 + 12);
      v19 = **v122;
      v18 = (*v122)[1];
      v20 = (*v122)[2];
      v21 = *(unsigned __int16 *)(a1 + 8);
      v22 = *(void **)(a1 + 40);
      v23 = *(_QWORD *)(a1 + 48) - (_QWORD)v22;
      if (v23 >= 1)
        bzero(v22, v23);
      v123 = v19 - v17;
      v124 = v18 - v17;
      v24 = v20 - v17;
      v115 = v19;
      v116 = v17;
      v25 = v17 + v21;
      v26 = v17 + v21 + v19;
      v27 = v25 + v18;
      v28 = v25 + v20;
      v29 = &dword_22465EBEC;
      do
      {
        v30 = *v29;
        v31 = v29[1];
        v32 = v29[2];
        if (a3[29].i8[2] == 2)
        {
          v33 = (*v122)[byte_22466F874[9 * (char)v32 + 13 + 3 * (char)v31 + (char)v30] + 6];
          if ((_DWORD)v33 != -1)
          {
            if (*(_QWORD *)&a3[11] <= v33)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
              v34 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v78 = qword_255795648;
                for (i = qword_255795650; v78 != i; v78 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v78)(*(_QWORD *)(v78 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
              }
              v35 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_127;
              qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&a3[7] + 8 * ((*(_QWORD *)&a3[10] + v33) / 0x1F))
                          + 132 * ((*(_QWORD *)&a3[10] + v33) % 0x1F)
                          + 20))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
              v36 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v76 = qword_255795648;
                for (j = qword_255795650; v76 != j; v76 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v76)(*(_QWORD *)(v76 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
              }
              v37 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_127;
              qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
            }
            goto LABEL_28;
          }
          goto LABEL_11;
        }
        v42 = a3[2];
        if (!*(_QWORD *)&v42)
          goto LABEL_11;
        v43 = **v122 + v30 * (unint64_t)a3[29].u16[0];
        v44 = (*v122)[1] + v31 * (unint64_t)a3[29].u16[0];
        v45 = (*v122)[2] + v32 * (unint64_t)a3[29].u16[0];
        v46 = (19349669 * v43) ^ (83492791 * v44) ^ (37783632 * v45);
        v47 = (uint8x8_t)vcnt_s8(v42);
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          v48 = (19349669 * v43) ^ (83492791 * v44) ^ (37783632 * v45);
          if (v46 >= *(_QWORD *)&v42)
            v48 = v46 % *(_QWORD *)&v42;
        }
        else
        {
          v48 = v46 & (*(_QWORD *)&v42 - 1);
        }
        v70 = *(uint64_t ***)(*(_QWORD *)&a3[1] + 8 * v48);
        if (!v70)
          goto LABEL_11;
        v71 = *v70;
        if (!*v70)
          goto LABEL_11;
        if (v47.u32[0] < 2uLL)
        {
          v72 = *(_QWORD *)&v42 - 1;
          while (1)
          {
            v74 = v71[1];
            if (v46 == v74)
            {
              if (!*((_DWORD *)v71 + 4)
                && *((_DWORD *)v71 + 5) == (_DWORD)v43
                && *((_DWORD *)v71 + 6) == (_DWORD)v44
                && *((_DWORD *)v71 + 7) == (_DWORD)v45)
              {
                goto LABEL_80;
              }
            }
            else if ((v74 & v72) != v48)
            {
              goto LABEL_11;
            }
            v71 = (uint64_t *)*v71;
            if (!v71)
              goto LABEL_11;
          }
        }
        while (1)
        {
          v73 = v71[1];
          if (v46 == v73)
            break;
          if (v73 >= *(_QWORD *)&v42)
            v73 %= *(_QWORD *)&v42;
          if (v73 != v48)
            goto LABEL_11;
LABEL_64:
          v71 = (uint64_t *)*v71;
          if (!v71)
            goto LABEL_11;
        }
        if (*((_DWORD *)v71 + 4)
          || *((_DWORD *)v71 + 5) != (_DWORD)v43
          || *((_DWORD *)v71 + 6) != (_DWORD)v44
          || *((_DWORD *)v71 + 7) != (_DWORD)v45)
        {
          goto LABEL_64;
        }
LABEL_80:
        v33 = *((unsigned int *)v71 + 8);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&a3[7] + 8 * ((*(_QWORD *)&a3[10] + v33) / 0x1F))
                       + 132 * ((*(_QWORD *)&a3[10] + v33) % 0x1F)
                       + 20))
          goto LABEL_83;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_127;
        }
        v33 = *((unsigned int *)v71 + 8);
LABEL_83:
        if (*(_QWORD *)&a3[11] <= v33
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&a3[7] + 8 * ((*(_QWORD *)&a3[10] + v33) / 0x1F))+ 132 * ((*(_QWORD *)&a3[10] + v33) % 0x1F)+ 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
        {
LABEL_127:
          abort();
        }
LABEL_28:
        v38 = a3[16];
        if (v38)
        {
          v39 = *(_QWORD *)&v38 + 168 * v33;
          v40 = *(_QWORD *)(v39 + 56);
          v41 = *(_QWORD *)(v39 + 64);
          while (v40 != v41)
          {
            if (*(_DWORD *)v40 != -1)
            {
              v50 = *(_DWORD *)(v40 + 4);
              v49 = *(_DWORD *)(v40 + 8);
              v51 = *(_DWORD *)(v40 + 12);
              if (v50 >= v123 && v50 < v26 && v49 >= v124 && v49 < v27 && v51 >= v24 && v51 < v28)
              {
                v57 = (v50
                                   - v123
                                   + *(_DWORD *)(a1 + 16) * (v49 - v124)
                                   + *(_DWORD *)(a1 + 20) * (v51 - v24));
                v58 = *(_QWORD *)(a1 + 40);
                v59 = *(_QWORD *)(v58 + 8 * v57);
                if (!v59)
                  goto LABEL_33;
                v9.i64[0] = *(_QWORD *)v120;
                v9.i32[2] = *(_DWORD *)(v120 + 8);
                v60 = *(_QWORD *)(v40 + 24);
                v61 = *(float32x2_t **)(v40 + 32);
                v10.i64[0] = *(_QWORD *)v60;
                v10.i32[2] = *(_DWORD *)(v60 + 8);
                v62 = (int8x16_t)vsubq_f32((float32x4_t)v9, v10);
                v11 = (float64x2_t)vextq_s8(v62, v62, 8uLL);
                v63 = (int8x16_t)vmulq_n_f32((float32x4_t)v62, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1), *(float32x2_t *)v62.i8, 1), *(float32x2_t *)&v11.f64[0], *(float32x2_t *)&v11.f64[0]).f32[0]));
                LODWORD(v11.f64[0]) = v61[1].i32[0];
                v64 = vmla_lane_f32(vmul_f32(*v61, *(float32x2_t *)v63.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1), *v61, 1);
                v10 = (float32x4_t)vextq_s8(v63, v63, 8uLL);
                v64.f32[0] = vmla_f32(v64, *(float32x2_t *)v10.f32, *(float32x2_t *)&v11.f64[0]).f32[0];
                v66 = *(_QWORD *)(v59 + 24);
                v65 = *(float32x2_t **)(v59 + 32);
                v10.i64[0] = *(_QWORD *)v66;
                v10.i32[2] = *(_DWORD *)(v66 + 8);
                v67 = (int8x16_t)vsubq_f32((float32x4_t)v9, v10);
                v68 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
                v69 = (int8x16_t)vmulq_n_f32((float32x4_t)v67, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1), *(float32x2_t *)v67.i8, 1), v68, v68).f32[0]));
                v68.i32[0] = v65[1].i32[0];
                *(float32x2_t *)&v11.f64[0] = vmla_lane_f32(vmul_f32(*v65, *(float32x2_t *)v69.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), *v65, 1);
                v9 = vextq_s8(v69, v69, 8uLL);
                if (v64.f32[0] > vmla_f32(*(float32x2_t *)&v11.f64[0], *(float32x2_t *)v9.i8, v68).f32[0])
LABEL_33:
                  *(_QWORD *)(v58 + 8 * v57) = v40;
              }
            }
            v40 += 224;
          }
        }
LABEL_11:
        v29 += 3;
      }
      while (v29 != (int *)&word_22465ED30);
      v79 = *(_QWORD *)&v117 + 168 * v118;
      v80 = *(_QWORD *)(v79 + 56);
      for (k = *(_QWORD *)(v79 + 64); v80 != k; v80 += 224)
      {
        if (*(_DWORD *)v80 != -1)
        {
          v9.i64[0] = *(_QWORD *)v120;
          v9.i32[2] = *(_DWORD *)(v120 + 8);
          v82 = *(_QWORD *)(v80 + 24);
          v83 = *(float32x2_t **)(v80 + 32);
          v10.i64[0] = *(_QWORD *)v82;
          v10.i32[2] = *(_DWORD *)(v82 + 8);
          v9 = (int8x16_t)vsubq_f32((float32x4_t)v9, v10);
          v84 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
          v85 = (int8x16_t)vmulq_n_f32((float32x4_t)v9, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), *(float32x2_t *)v9.i8, 1), v84, v84).f32[0]));
          v9.i32[0] = v83[1].i32[0];
          v86 = *v83;
          if (vmla_f32(vmla_lane_f32(vmul_f32(*v83, *(float32x2_t *)v85.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1), *v83, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(float32x2_t *)v9.i8).f32[0] >= 0.0&& !*(_BYTE *)(v80 + 168))
          {
            v87 = *(_DWORD *)(v80 + 12) - v24;
            v88 = *(_DWORD *)(a1 + 12);
            v89 = v87 - v88;
            v90 = v88 + v87 + 1;
            if (v89 != v90)
            {
              v91 = *(_DWORD *)(v80 + 8) - v124;
              v92 = v91 + v88;
              v93 = v91 - v88;
              v94 = v92 + 1;
              if (v93 != v94)
              {
                v95 = *(_DWORD *)(v80 + 4);
                if (v95 - v123 - v88 != v95 - v123 + v88 + 1)
                {
                  v96 = (float32x2_t)vdup_lane_s32((int32x2_t)v86, 1);
                  v98 = *(_DWORD *)(a1 + 16);
                  v97 = *(_DWORD *)(a1 + 20);
                  v99 = (2 * v88) | 1;
                  v100 = v116 - v115 + v95 + v97 * v89 + v98 * v93 - v88;
                  v11.f64[0] = 0.0;
                  v101.i64[0] = 0;
                  v102 = 0;
                  v12.f64[0] = 0.0;
                  do
                  {
                    v103 = v100;
                    v104 = v93;
                    do
                    {
                      v105 = v103;
                      v106 = v99;
                      do
                      {
                        v107 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v105);
                        if (v107)
                        {
                          v108 = *(float32x2_t **)(v107 + 32);
                          LODWORD(v14.f64[0]) = v108[1].i32[0];
                          if (vmla_f32(vmla_lane_f32(vmul_f32(v86, *v108), v96, *v108, 1), *(float32x2_t *)&v14.f64[0], *(float32x2_t *)v9.i8).f32[0] > 0.1)
                          {
                            v13.f64[0] = *(float64_t *)(v107 + 128);
                            v14 = *(float64x2_t *)(v107 + 112);
                            v12 = vaddq_f64(v12, v13);
                            v101.i64[1] = v102;
                            v101 = (int8x16_t)vaddq_f64((float64x2_t)v101, v14);
                            v102 = vextq_s8(v101, v101, 8uLL).u64[0];
                            v11.f64[0] = v11.f64[0] + *(double *)(v107 + 160);
                          }
                        }
                        ++v105;
                        --v106;
                      }
                      while (v106);
                      ++v104;
                      v103 += v98;
                    }
                    while (v104 != v94);
                    ++v89;
                    v100 += v97;
                  }
                  while (v89 != v90);
                  if (v11.f64[0] > 0.0)
                  {
                    v10 = (float32x4_t)vdivq_f64(v12, v11);
                    v101.i64[1] = v102;
                    v9 = (int8x16_t)vdivq_f64((float64x2_t)v101, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
                    v109 = v83[1].i32[0];
                    v110 = *v83;
                    *(_DWORD *)(v82 + 8) = vcvt_f32_f64((float64x2_t)v10).u32[0];
                    *(float32x2_t *)v82 = vcvt_f32_f64((float64x2_t)v9);
                    v111 = *(float32x2_t **)(v80 + 32);
                    *v111 = v110;
                    v111[1].i32[0] = v109;
                    *(_QWORD *)(v80 + 40) = *a5;
                  }
                }
              }
            }
          }
        }
      }
      v15 = v119 + 1;
    }
    while (v119 + 1 != v114);
  }
  sub_22391CC34(v125, (uint64_t *)__p, (uint64_t)v128);
  if (v127 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v125[2]) & 0x80000000) == 0)
      return kdebug_trace();
LABEL_126:
    operator delete((void *)v125[0]);
    return kdebug_trace();
  }
  if (SHIBYTE(v125[2]) < 0)
    goto LABEL_126;
  return kdebug_trace();
}

void sub_223AA6818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;

  if (a25 < 0)
    operator delete(__p);
  operator delete(v32);
  sub_2231874DC((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_223AA6844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2231874DC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_223AA685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22392AA18((uint64_t)&a20);
  sub_2231874DC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA688C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = off_24EC5ED38;
  *(_QWORD *)(a1 + 136) = &off_24EC5EDB0;
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)(a1 + 80) = &off_24EC21040;
    v5 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 80) = &off_24EC21040;
    v5 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 56);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 32);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 64;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v10);
  }
  sub_2231F823C(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

_QWORD *sub_223AA69DC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC5EDB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223AA6A58(_QWORD *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v3;
  _QWORD *v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;

  a2[1] = 0;
  v3 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v4 = (_QWORD *)a1[4];
  v29 = a1 + 5;
  if (v4 != a1 + 5)
  {
    do
    {
      v6 = *((unsigned __int16 *)v4 + 16);
      v7 = a1[3];
      v8 = v3;
      v9 = v3;
      if (*v3)
      {
        v10 = *v3;
        while (1)
        {
          while (1)
          {
            v9 = (uint64_t **)v10;
            v11 = v10[4];
            v12 = *((unsigned __int16 *)v9 + 20);
            v13 = v6 < v12;
            if (v7 != v11)
              v13 = v7 < v11;
            if (!v13)
              break;
            v10 = *v9;
            v8 = v9;
            if (!*v9)
              goto LABEL_16;
          }
          v14 = v12 < v6;
          v15 = v7 == v11 ? v14 : v11 < v7;
          if (v15 != 1)
            break;
          v10 = v9[1];
          if (!v10)
          {
            v8 = v9 + 1;
            goto LABEL_16;
          }
        }
        v16 = v9;
        v20 = v4[5];
        v19 = v4[6];
        if (v19)
        {
LABEL_21:
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
      }
      else
      {
LABEL_16:
        v16 = operator new(0x40uLL);
        *((_QWORD *)v16 + 4) = v7;
        *((_WORD *)v16 + 20) = v6;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 7) = 0;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v9;
        *v8 = (uint64_t *)v16;
        v17 = (uint64_t *)**a2;
        v18 = (uint64_t *)v16;
        if (v17)
        {
          *a2 = v17;
          v18 = *v8;
        }
        sub_2231A9A8C(a2[1], v18);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v20 = v4[5];
        v19 = v4[6];
        if (v19)
          goto LABEL_21;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)v16 + 7);
      *((_QWORD *)v16 + 6) = v20;
      *((_QWORD *)v16 + 7) = v19;
      if (!v23)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        v26 = (_QWORD *)v4[1];
        if (!v26)
        {
          do
          {
LABEL_31:
            v27 = (_QWORD *)v4[2];
            v28 = *v27 == (_QWORD)v4;
            v4 = v27;
          }
          while (!v28);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_27:
        v26 = (_QWORD *)v4[1];
        if (!v26)
          goto LABEL_31;
      }
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
LABEL_3:
      v4 = v27;
    }
    while (v27 != v29);
  }
}

void sub_223AA6C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_2231F5848(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA6C60(uint64_t a1, int a2, char a3, float a4)
{
  *(_QWORD *)a1 = off_24EC5ED38;
  *(float *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &off_24EC21040;
  sub_2231BF5DC((uint64_t *)(a1 + 88));
  *(_QWORD *)(a1 + 136) = &off_24EC5EDB0;
  sub_223AA8F80((uint64_t *)(a1 + 144));
  *(_QWORD *)a1 = &off_24EC5ED60;
  return a1;
}

void sub_223AA6D08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  void **v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v1[10] = v3;
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (char *)*v5;
  if (*v5)
  {
    v11 = (char *)v1[8];
    v12 = *v5;
    if (v11 != v10)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 4);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 64;
      }
      while (v11 != v10);
      v12 = *v5;
    }
    v1[8] = v10;
    operator delete(v12);
  }
  sub_2231F823C(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_223AA6DD8(uint64_t a1)
{
  sub_223AA688C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA6DFC(uint64_t a1, float32x2_t *a2)
{
  std::__shared_weak_count *v2;
  char *v5;
  char *v6;
  void **v7;
  _QWORD **v8;
  __int128 v9;
  uint64_t v10;
  uint64_t i;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  float32x2_t *v15;
  __int128 v16;
  int v17;
  float32x2_t v18;
  float32x4_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t v39;
  void **v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _WORD *v53;
  __int16 *v54;
  int v55;
  uint64_t (**v68)();
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  float32x4_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int16 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  __int16 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  _OWORD *v123;
  float32x4_t v124;
  float32x4_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  __int16 v130;
  unint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  __int16 v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __n128 v142;
  float32x4_t *v143;
  float32x4_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  float32x4_t *v147;
  float32x4_t v148;
  __int16 v149;
  uint64_t v150;
  char *v151;
  uint64_t **v152;
  uint64_t *v153;
  unsigned int v154;
  uint64_t **v155;
  unsigned int v156;
  void *v157;
  _QWORD *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  float32x4_t *v168;
  float32x4_t *v169;
  int v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  __int16 v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int8x16_t v194;
  float32x2_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x2_t v198;
  int8x16_t v199;
  float32x4_t v200;
  int j;
  int v202;
  uint64_t v203;
  uint64_t v204;
  float32x2_t *v207;
  unsigned int v208;
  float32x2_t *v209;
  float32x2_t *v210;
  float32x2_t *v211;
  unsigned int v212;
  float32x2_t *v213;
  float32x2_t *v214;
  float32x2_t v215;
  uint64_t *v218;
  int8x16_t v220;
  float32x4_t v221;
  float32x4_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  char *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  __int16 v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  int v248;
  float32x2_t v249;
  float32x4_t v250;
  float32x4_t *v251;
  int32x4_t v252;
  int32x4_t v253;
  void **v254;
  int v255;
  int v256;
  float32x4_t v257;
  int v258;
  float32x4_t v259;
  float32x2_t v260;
  float32x4_t v261;
  float32x2_t v262;
  float32x4_t v263;
  float32x4_t v264;
  _OWORD v265[2];
  int8x16_t v266;
  float32x2_t *v267;
  float32x4_t v268;
  uint64_t **v269;
  _BYTE v270[68];
  __int128 v271;
  _BYTE v272[24];
  uint64_t v273;
  __int16 v274;
  _QWORD **v275;
  _QWORD *v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  int v280;
  __int128 v281;
  uint64_t v282;
  _QWORD **v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t (**v286)();
  __int128 v287;
  _BYTE v288[26];
  uint64_t (**v289)();
  __int128 v290;
  _OWORD v291[3];
  unsigned int v292;
  unsigned int v293;
  char v294;
  char v295;
  uint64_t (**v296)();
  void **v297;
  std::__shared_weak_count *v298;
  _BYTE v299[26];
  uint64_t (**v300)();
  __int128 v301;
  _BYTE v302[26];
  uint64_t (**v303)();
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int16 v308;
  void *__dst[2];
  char v310;
  void *v311[2];
  char v312;
  _QWORD v313[2];
  char v314;
  __int128 v315;
  __int128 v316;
  int v317;
  _BYTE v318[56];
  uint64_t v319;
  __int128 v320;

  v315 = 0u;
  v316 = 0u;
  v317 = 728321608;
  kdebug_trace();
  v5 = (char *)operator new(0x20uLL);
  strcpy(v5, "PCMPlaneExtractorProcessFrame");
  v6 = (char *)operator new(0x28uLL);
  strcpy(v6, "PointCloudMapper.UpdateWithFrame");
  sub_223197FA4(__dst, v5, 0x1DuLL);
  v7 = v311;
  sub_223197FA4(v311, v6, 0x20uLL);
  v313[0] = 0;
  v313[1] = 0;
  v314 = 0;
  v313[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v314 = 1;
  operator delete(v6);
  operator delete(v5);
  v267 = a2;
  *(float32x2_t *)(a1 + 24) = a2[154];
  v8 = (_QWORD **)(a1 + 32);
  sub_2231F823C(a1 + 32, *(_QWORD **)(a1 + 40));
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v269 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  v254 = (void **)(a1 + 56);
  for (i = *(_QWORD *)(a1 + 64); i != v10; i -= 64)
  {
    v12 = *(std::__shared_weak_count **)(i - 32);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  *(_QWORD *)(a1 + 64) = v10;
  v15 = v267;
  if (v267[26].i8[0])
  {
    if ((!v267[23].i32[0] || !v267[23].i32[1])
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0((uint64_t)&v267[16], (uint64_t)&v289);
    v9 = v290;
    *(_OWORD *)v318 = v291[0];
    *(_OWORD *)&v318[16] = v291[1];
    *(_OWORD *)&v318[32] = v291[2];
    *(_WORD *)&v318[48] = v292;
  }
  v303 = &off_24EC25150;
  v304 = v9;
  v305 = *(_OWORD *)v318;
  v306 = *(_OWORD *)&v318[16];
  v16 = *(_OWORD *)&v318[32];
  v307 = *(_OWORD *)&v318[32];
  v308 = *(_WORD *)&v318[48];
  if (v267[7].i8[0])
  {
    if ((!v267[4].i32[0] || !v267[4].i32[1])
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78((uint64_t)v267, (uint64_t)&v289);
    v16 = v290;
    *(_OWORD *)v318 = v291[0];
    *(_OWORD *)&v318[10] = *(_OWORD *)((char *)v291 + 10);
  }
  v300 = &off_24EC200A8;
  v301 = v16;
  *(_OWORD *)v302 = *(_OWORD *)v318;
  *(_OWORD *)&v302[10] = *(_OWORD *)&v318[10];
  if (v267[15].i8[0])
  {
    if ((!v267[12].i32[0] || !v267[12].i32[1])
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78((uint64_t)&v267[8], (uint64_t)&v289);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    v7 = (void **)v290;
    *(_OWORD *)v318 = v291[0];
    *(_OWORD *)&v318[10] = *(_OWORD *)((char *)v291 + 10);
  }
  v296 = &off_24EC200A8;
  v297 = v7;
  v298 = v2;
  *(_OWORD *)v299 = *(_OWORD *)v318;
  *(_OWORD *)&v299[10] = *(_OWORD *)&v318[10];
  v248 = *(_DWORD *)&v302[8];
  v17 = *(_DWORD *)&v302[12];
  v289 = &off_24EC1FE80;
  sub_223218260((uint64_t)&v300, &v290);
  v255 = v17;
  if (!v7)
    goto LABEL_41;
  if (!v2)
    goto LABEL_37;
  v20 = (unint64_t *)&v2->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (v22)
  {
    v7 = v297;
    v23 = v298;
    if (!v298)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = v297;
    v23 = v298;
    if (!v298)
      goto LABEL_37;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_37:
    if (v299[25])
      goto LABEL_38;
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v299[25])
  {
LABEL_38:
    (*((void (**)(_BYTE *__return_ptr, void **, _QWORD))*v7 + 12))(v318, v7, 0);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    v27 = v290;
    if (!*((_QWORD *)&v290 + 1))
      goto LABEL_46;
    goto LABEL_42;
  }
LABEL_41:
  *(_QWORD *)v318 = 0;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  v27 = v290;
  if (!*((_QWORD *)&v290 + 1))
    goto LABEL_46;
LABEL_42:
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v27)
      goto LABEL_51;
    goto LABEL_47;
  }
LABEL_46:
  if (!v27)
    goto LABEL_51;
LABEL_47:
  if (v295)
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(*(_QWORD *)v290 + 96))(&v286, v290, 1);
    v32 = *(_DWORD *)&v299[8];
    if (!*(_DWORD *)&v299[8])
      goto LABEL_83;
    goto LABEL_52;
  }
LABEL_51:
  v286 = 0;
  v32 = *(_DWORD *)&v299[8];
  if (!*(_DWORD *)&v299[8])
    goto LABEL_83;
LABEL_52:
  v33 = *(_DWORD *)&v299[12];
  if (*(_DWORD *)&v299[12])
  {
    v34 = *(unsigned int *)&v299[16];
    v35 = *(unsigned int *)&v299[20];
    v36 = v292;
    v37 = v293;
    v38 = *(__int16 **)v299;
    if (v299[24] && *(_QWORD *)v299)
    {
      v39 = *(unsigned int *)&v299[20];
      v40 = v297;
      v41 = v298;
      if (v298)
      {
        v42 = (unint64_t *)&v298->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      (*((void (**)(void **, _QWORD, const char *))*v40 + 11))(v40, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v35 = v39;
      v38 = *(__int16 **)v299;
    }
    v45 = (_WORD *)*((_QWORD *)&v291[0] + 1);
    if (v294 && *((_QWORD *)&v291[0] + 1))
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v290 + 88))(v290, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v45 = (_WORD *)*((_QWORD *)&v291[0] + 1);
    }
    v46 = v32 - 1;
    v47 = 2 * v34;
    v48 = 2 * v36;
    v49 = v33 - 1;
    if (v33 == 1)
    {
      v15 = v267;
    }
    else
    {
      v50 = 2 * v35;
      v51 = 2 * v37;
      v15 = v267;
      if (v32 == 1)
      {
        do
        {
          _H1 = *v38;
          __asm { FCVT            S1, H1 }
          if (_S1 < 0.95)
            *v45 = -1025;
          v38 = (__int16 *)((char *)v38 + v50);
          v45 = (_WORD *)((char *)v45 + v51);
          --v49;
        }
        while (v49);
      }
      else
      {
        v52 = 0;
        do
        {
          v53 = v45;
          v54 = v38;
          v55 = v32 - 1;
          do
          {
            _H1 = *v54;
            __asm { FCVT            S1, H1 }
            if (_S1 < 0.95)
              *v53 = -1025;
            v54 = (__int16 *)((char *)v54 + v47);
            v53 = (_WORD *)((char *)v53 + v48);
            --v55;
          }
          while (v55);
          _H1 = *v54;
          __asm { FCVT            S1, H1 }
          if (_S1 < 0.95)
            *v53 = -1025;
          v38 = (__int16 *)((char *)v38 + v50);
          v45 = (_WORD *)((char *)v45 + v51);
          ++v52;
        }
        while (v52 != v49);
      }
    }
    if (v32 != 1)
    {
      do
      {
        _H1 = *v38;
        __asm { FCVT            S1, H1 }
        if (_S1 < 0.95)
          *v45 = -1025;
        v38 = (__int16 *)((char *)v38 + v47);
        v45 = (_WORD *)((char *)v45 + v48);
        --v46;
      }
      while (v46);
    }
    _H0 = *v38;
    __asm { FCVT            S0, H0 }
    if (_S0 < 0.95)
      *v45 = -1025;
  }
LABEL_83:
  v68 = v286;
  v286 = 0;
  if (v68)
    (*((void (**)(uint64_t (**)()))*v68 + 1))(v68);
  v69 = *(_QWORD *)v318;
  *(_QWORD *)v318 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v251 = (float32x4_t *)(a1 + 168);
  if (*(_DWORD *)(a1 + 168) && *(_DWORD *)(a1 + 172))
    goto LABEL_330;
  v286 = &off_24EC5EDB0;
  *(_QWORD *)&v278 = &off_24EC5ACE0;
  sub_224498A94(&v302[8], (uint64_t)v318);
  v70 = operator new();
  *(_QWORD *)v70 = &off_24EC5AB40;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)&v318[8];
  *(_OWORD *)(v70 + 20) = *(_OWORD *)&v318[20];
  *(_OWORD *)(v70 + 40) = *(_OWORD *)&v318[40];
  *(_QWORD *)(v70 + 56) = v319;
  *(_OWORD *)(v70 + 64) = v320;
  *(_QWORD *)&v271 = v70;
  v71 = (std::__shared_weak_count *)operator new();
  v71->__shared_owners_ = 0;
  v72 = (unint64_t *)&v71->__shared_owners_;
  v71->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AD18;
  v71->__shared_weak_owners_ = 0;
  v71[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  *((_QWORD *)&v271 + 1) = v71;
  v283 = 0;
  sub_223AA9148((uint64_t *)&v287, v70, v71);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  v74 = v287;
  v287 = 0uLL;
  v75 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v74;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)v288;
  *(_OWORD *)(a1 + 170) = *(_OWORD *)&v288[10];
  v286 = &off_24EC5EDB0;
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
  if (!*((_QWORD *)&v287 + 1))
    goto LABEL_330;
  v79 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (v80)
  {
LABEL_330:
    if (*(_DWORD *)(a1 + 112))
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    if (*(_DWORD *)(a1 + 112))
    {
LABEL_103:
      if (*(_DWORD *)(a1 + 116))
        goto LABEL_113;
    }
  }
  *(_QWORD *)v318 = &off_24EC21040;
  sub_2231C12FC(&v302[8], (uint64_t *)&v318[8]);
  v81 = *(_OWORD *)&v318[8];
  *(_QWORD *)&v318[8] = 0;
  *(_QWORD *)&v318[16] = 0;
  v82 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v81;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v318[24];
  *(_OWORD *)(a1 + 114) = *(_OWORD *)&v318[34];
  *(_QWORD *)v318 = &off_24EC21040;
  v85 = *(std::__shared_weak_count **)&v318[16];
  if (*(_QWORD *)&v318[16])
  {
    v86 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      v88 = (float32x4_t *)&v15[167];
      if (v15[218].i8[0])
        goto LABEL_114;
      goto LABEL_116;
    }
  }
LABEL_113:
  v88 = (float32x4_t *)&v15[167];
  if (v15[218].i8[0])
  {
LABEL_114:
    v89 = v15[202];
    v90.i32[0] = v15[203].i32[0];
    v91 = v15[204];
    v92 = v15[206];
    v18.i32[0] = v15[207].i32[0];
    *(float32x2_t *)v19.f32 = v15[208];
    v19.i32[2] = v15[209].i32[0];
    v93 = (int8x16_t)vnegq_f32(v19);
    v94 = v88[1];
    v95 = vmulq_n_f32(*v88, v90.f32[0]);
    v90.i32[1] = v15[205].i32[0];
    v96 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v89, (int32x2_t)v91), *(float *)v93.i32), (float32x2_t)vzip2_s32((int32x2_t)v89, (int32x2_t)v91), *(float32x2_t *)v19.f32, 1), v90, v19, 2);
    LODWORD(v97) = vmla_f32(vmls_lane_f32(vmul_f32(v92, *(float32x2_t *)v93.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v92, 1), *(float32x2_t *)v19.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), v18).u32[0];
    v98 = v88[2];
    v99 = v88[3];
    v100 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v88, v89.f32[0]), v94, v91.f32[0]), v98, v92.f32[0]), (float32x4_t)0, v99);
    v101 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v88, v89, 1), v94, v91, 1), v98, v92, 1), (float32x4_t)0, v99);
    v102 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v95, v94, v15[205].f32[0]), v98, v18.f32[0]), (float32x4_t)0, v99);
    v103 = vaddq_f32(v99, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v88, v96.f32[0]), v94, v96, 1), v98, v97));
    v252 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)v15[212].f32)), v101, v15[212], 1), v102, *(float32x4_t *)v15[212].f32, 2), v103, *(float32x4_t *)v15[212].f32, 3);
    v253 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)v15[210].f32)), v101, v15[210], 1), v102, *(float32x4_t *)v15[210].f32, 2), v103, *(float32x4_t *)v15[210].f32, 3);
    v266 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)v15[214].f32)), v101, v15[214], 1), v102, *(float32x4_t *)v15[214].f32, 2), v103, *(float32x4_t *)v15[214].f32, 3);
    v250 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)v15[216].f32)), v101, v15[216], 1), v102, *(float32x4_t *)v15[216].f32, 2), v103, *(float32x4_t *)v15[216].f32, 3);
    goto LABEL_117;
  }
LABEL_116:
  v252 = (int32x4_t)v88[1];
  v253 = *(int32x4_t *)v88;
  v266 = (int8x16_t)v88[2];
  v250 = v88[3];
LABEL_117:
  v284 = 0;
  v285 = 0;
  v282 = 0;
  v283 = &v284;
  *(_QWORD *)&v281 = (char *)&v281 + 8;
  *((_QWORD *)&v281 + 1) = 0;
  v279 = 0u;
  v278 = 0u;
  v280 = 728321680;
  kdebug_trace();
  v104 = (char *)operator new(0x28uLL);
  strcpy(v104, "PCMPlaneExtractorFindPlanarRegion");
  v105 = (char *)operator new(0x30uLL);
  v268 = *(float32x4_t *)"PointCloudMapper.UpdateWithFrame.PlaneExtractor";
  strcpy(v105, "PointCloudMapper.UpdateWithFrame.PlaneExtractor");
  qmemcpy(v265, "e.PlaneExtractor.UpdateWithFrame", sizeof(v265));
  sub_223197FA4(v318, v104, 0x21uLL);
  sub_223197FA4(&v318[24], v105, 0x2FuLL);
  *(_QWORD *)&v318[48] = 0;
  v319 = 0;
  LOBYTE(v320) = 0;
  *(std::chrono::steady_clock::time_point *)&v318[48] = std::chrono::steady_clock::now();
  LOBYTE(v320) = 1;
  operator delete(v105);
  operator delete(v104);
  v286 = &off_24EC200A8;
  sub_223AA92B0((uint64_t)&v289, (uint64_t *)&v287);
  *(_QWORD *)&v271 = &off_24EC22278;
  v106 = *(_QWORD *)(a1 + 144);
  v107 = *(std::__shared_weak_count **)(a1 + 152);
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
    v110 = *(_WORD *)(a1 + 184);
    do
      v111 = __ldxr(v108);
    while (__stxr(v111 + 1, v108));
    *(_OWORD *)&v272[8] = *(_OWORD *)(a1 + 160);
    v273 = *(_QWORD *)(a1 + 176);
    do
      v112 = __ldxr(v108);
    while (__stxr(v112 + 1, v108));
    *((_QWORD *)&v271 + 1) = v106;
    *(_QWORD *)v272 = v107;
    v274 = v110;
    do
      v113 = __ldaxr(v108);
    while (__stlxr(v113 - 1, v108));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
    do
      v114 = __ldaxr(v108);
    while (__stlxr(v114 - 1, v108));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  else
  {
    v115 = *(_WORD *)(a1 + 184);
    *((_QWORD *)&v271 + 1) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)v272 = 0;
    *(_OWORD *)&v272[8] = *(_OWORD *)(a1 + 160);
    v273 = *(_QWORD *)(a1 + 176);
    v274 = v115;
  }
  sub_223CD18F8((uint64_t)&v303, (uint64_t)&v286, (uint64_t)&v271, *(_DWORD *)(a1 + 12), &v275);
  sub_223198030((uint64_t)&v283, v284);
  v283 = v275;
  v284 = v276;
  v285 = v277;
  if (v277)
  {
    v276[2] = &v284;
    v275 = &v276;
    v276 = 0;
    v277 = 0;
    sub_223198030((uint64_t)&v275, 0);
    v116 = *(std::__shared_weak_count **)v272;
    if (!*(_QWORD *)v272)
      goto LABEL_140;
  }
  else
  {
    v283 = &v284;
    sub_223198030((uint64_t)&v275, v276);
    v116 = *(std::__shared_weak_count **)v272;
    if (!*(_QWORD *)v272)
      goto LABEL_140;
  }
  v117 = (unint64_t *)&v116->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
LABEL_140:
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
  if (*((_QWORD *)&v287 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  sub_22391CC34((uint64_t *)v318, (uint64_t *)&v318[24], (uint64_t)&v318[48]);
  if ((v318[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v318[24]);
    if ((v318[23] & 0x80000000) == 0)
      goto LABEL_147;
  }
  else if ((v318[23] & 0x80000000) == 0)
  {
    goto LABEL_147;
  }
  operator delete(*(void **)v318);
LABEL_147:
  kdebug_trace();
  v271 = 0u;
  *(_OWORD *)v272 = 0u;
  *(_DWORD *)&v272[16] = 728321688;
  kdebug_trace();
  v122 = (char *)operator new(0x28uLL);
  strcpy(v122, "PCMPlaneExtractorFitPlaneSegments");
  v123 = operator new(0x30uLL);
  *v123 = v268;
  v123[1] = v265[1];
  *(_OWORD *)((char *)v123 + 31) = v265[0];
  *((_BYTE *)v123 + 47) = 0;
  sub_223197FA4(v318, v122, 0x21uLL);
  sub_223197FA4(&v318[24], v123, 0x2FuLL);
  *(_QWORD *)&v318[48] = 0;
  v319 = 0;
  LOBYTE(v320) = 0;
  *(std::chrono::steady_clock::time_point *)&v318[48] = std::chrono::steady_clock::now();
  LOBYTE(v320) = 1;
  operator delete(v123);
  operator delete(v122);
  v286 = &off_24EC5EEF8;
  v126 = *(_QWORD *)(a1 + 144);
  v127 = *(std::__shared_weak_count **)(a1 + 152);
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
    v130 = *(_WORD *)(a1 + 184);
    do
      v131 = __ldxr(v128);
    while (__stxr(v131 + 1, v128));
    v132 = *(_QWORD *)(a1 + 160);
    v133 = *v251;
    *(float32x4_t *)&v288[8] = *v251;
    do
      v134 = __ldxr(v128);
    while (__stxr(v134 + 1, v128));
    *(_QWORD *)&v287 = v126;
    *((_QWORD *)&v287 + 1) = v127;
    *(_QWORD *)v288 = v132;
    *(_WORD *)&v288[24] = v130;
    do
      v135 = __ldaxr(v128);
    while (__stlxr(v135 - 1, v128));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
    do
      v136 = __ldaxr(v128);
    while (__stlxr(v136 - 1, v128));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  else
  {
    v137 = *(_WORD *)(a1 + 184);
    v138 = *(_QWORD *)(a1 + 160);
    v287 = *(unint64_t *)(a1 + 144);
    *(_QWORD *)v288 = v138;
    v133 = *v251;
    *(float32x4_t *)&v288[8] = *v251;
    *(_WORD *)&v288[24] = v137;
  }
  v270[0] = 0;
  v270[64] = 0;
  sub_223CD26B8((uint64_t)&v300, v267 + 155, (uint64_t)&v283, (uint64_t)&v286, (uint64_t)v270, (float32x2_t **)&v278, v133, v124, v125);
  sub_223198030((uint64_t)&v281, *((_QWORD **)&v281 + 1));
  v281 = v278;
  v282 = v279;
  if ((_QWORD)v279)
  {
    *(_QWORD *)(*((_QWORD *)&v278 + 1) + 16) = (char *)&v281 + 8;
    *(_QWORD *)&v278 = (char *)&v278 + 8;
    *((_QWORD *)&v278 + 1) = 0;
    *(_QWORD *)&v279 = 0;
    sub_223198030((uint64_t)&v278, 0);
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (!*((_QWORD *)&v287 + 1))
      goto LABEL_172;
  }
  else
  {
    *(_QWORD *)&v281 = (char *)&v281 + 8;
    sub_223198030((uint64_t)&v278, *((_QWORD **)&v278 + 1));
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (!*((_QWORD *)&v287 + 1))
      goto LABEL_172;
  }
  v140 = (unint64_t *)&v139->__shared_owners_;
  do
    v141 = __ldaxr(v140);
  while (__stlxr(v141 - 1, v140));
  if (!v141)
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
LABEL_172:
  sub_22391CC34((uint64_t *)v318, (uint64_t *)&v318[24], (uint64_t)&v318[48]);
  if ((v318[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v318[24]);
    if ((v318[23] & 0x80000000) == 0)
      goto LABEL_174;
LABEL_249:
    operator delete(*(void **)v318);
    goto LABEL_174;
  }
  if ((v318[23] & 0x80000000) != 0)
    goto LABEL_249;
LABEL_174:
  kdebug_trace();
  v249 = (float32x2_t)vtrn2q_s32(v253, v252).u64[0];
  v142 = (__n128)vzip1q_s32(v253, v252);
  v265[0] = v142;
  v265[1] = vzip2q_s32(v253, v252);
  v143 = (float32x4_t *)v281;
  if ((__int128 *)v281 != (__int128 *)((char *)&v281 + 8))
  {
    do
    {
      v142 = (__n128)vmvnq_s8((int8x16_t)vceqzq_f32(v143[2]));
      v142.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v142);
      v142.n128_u16[0] = vmaxv_u16((uint16x4_t)v142.n128_u64[0]);
      v144 = (float32x4_t *)v143->i64[1];
      if ((v142.n128_u8[0] & 1) != 0)
      {
        if (v144)
        {
          do
          {
            v145 = v144;
            v144 = (float32x4_t *)v144->i64[0];
          }
          while (v144);
        }
        else
        {
          do
          {
            v145 = (float32x4_t *)v143[1].i64[0];
            _ZF = v145->i64[0] == (_QWORD)v143;
            v143 = v145;
          }
          while (!_ZF);
        }
      }
      else
      {
        v146 = v143;
        if (v144)
        {
          do
          {
            v145 = v144;
            v144 = (float32x4_t *)v144->i64[0];
          }
          while (v144);
        }
        else
        {
          do
          {
            v145 = (float32x4_t *)v146[1].i64[0];
            _ZF = v145->i64[0] == (_QWORD)v146;
            v146 = v145;
          }
          while (!_ZF);
        }
        if ((float32x4_t *)v281 == v143)
          *(_QWORD *)&v281 = v145;
        --v282;
        sub_2231AFE60(*((uint64_t **)&v281 + 1), (uint64_t *)v143);
        operator delete(v143);
      }
      v143 = v145;
    }
    while (v145 != (float32x4_t *)((char *)&v281 + 8));
    v147 = (float32x4_t *)v281;
    if ((__int128 *)v281 != (__int128 *)((char *)&v281 + 8))
    {
      v148.i64[0] = *(_QWORD *)&v265[0];
      v148.i64[1] = __PAIR64__(v250.u32[0], v266.u32[0]);
      v263 = v148;
      *(float32x2_t *)v148.f32 = v249;
      v148.i64[1] = __PAIR64__(v250.u32[1], v266.u32[1]);
      v261 = v148;
      v148.i64[0] = *(_QWORD *)&v265[1];
      v148.i64[1] = __PAIR64__(v250.u32[2], v266.u32[2]);
      v259 = v148;
      v148.i64[0] = vuzp2q_s32(vuzp2q_s32(v253, v252), v253).u64[0];
      v148.i64[1] = __PAIR64__(v250.u32[3], v266.u32[3]);
      v257 = v148;
      do
      {
        v268 = v147[2];
        v149 = v147[1].i16[6];
        v150 = *(_QWORD *)(a1 + 24);
        v151 = (char *)operator new(0x38uLL);
        v142 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v263, v268.f32[0]), v261, *(float32x2_t *)v268.f32, 1), v259, v268, 2), v257, v268, 3);
        *((_QWORD *)v151 + 1) = 0;
        *((_QWORD *)v151 + 2) = 0;
        *(_QWORD *)v151 = &off_24EC5EEA8;
        *((_QWORD *)v151 + 3) = v150;
        *((_WORD *)v151 + 16) = v149;
        *(__n128 *)(v151 + 40) = v142;
        *(_QWORD *)v318 = v151 + 24;
        *(_QWORD *)&v318[8] = v151;
        v152 = v269;
        v153 = *v269;
        v154 = v147[1].u16[6];
LABEL_197:
        v155 = v152;
        if (v153)
        {
          while (1)
          {
            v152 = (uint64_t **)v153;
            v156 = *((unsigned __int16 *)v153 + 16);
            if (v154 < v156)
            {
              v153 = *v152;
              goto LABEL_197;
            }
            if (v156 >= v154)
              break;
            v153 = v152[1];
            if (!v153)
            {
              v155 = v152 + 1;
              goto LABEL_202;
            }
          }
          *(_QWORD *)v318 = 0;
          *(_QWORD *)&v318[8] = 0;
          v162 = (std::__shared_weak_count *)v152[6];
          v152[5] = (uint64_t *)(v151 + 24);
          v152[6] = (uint64_t *)v151;
          if (!v162)
          {
LABEL_210:
            v165 = *(std::__shared_weak_count **)&v318[8];
            if (*(_QWORD *)&v318[8])
              goto LABEL_211;
            goto LABEL_216;
          }
        }
        else
        {
LABEL_202:
          v157 = operator new(0x38uLL);
          *((_WORD *)v157 + 16) = v154;
          *((_QWORD *)v157 + 5) = 0;
          *((_QWORD *)v157 + 6) = 0;
          *(_QWORD *)v157 = 0;
          *((_QWORD *)v157 + 1) = 0;
          *((_QWORD *)v157 + 2) = v152;
          *v155 = (uint64_t *)v157;
          v158 = (_QWORD *)**v8;
          v159 = (uint64_t *)v157;
          if (v158)
          {
            *v8 = v158;
            v159 = *v155;
          }
          sub_2231A9A8C(*(uint64_t **)(a1 + 40), v159);
          ++*(_QWORD *)(a1 + 48);
          v161 = *(_QWORD *)v318;
          v160 = *(_QWORD *)&v318[8];
          *(_QWORD *)v318 = 0;
          *(_QWORD *)&v318[8] = 0;
          v162 = (std::__shared_weak_count *)*((_QWORD *)v157 + 6);
          *((_QWORD *)v157 + 5) = v161;
          *((_QWORD *)v157 + 6) = v160;
          if (!v162)
            goto LABEL_210;
        }
        v163 = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (v164)
          goto LABEL_210;
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
        v165 = *(std::__shared_weak_count **)&v318[8];
        if (*(_QWORD *)&v318[8])
        {
LABEL_211:
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
LABEL_216:
        v168 = (float32x4_t *)v147->i64[1];
        if (v168)
        {
          do
          {
            v169 = v168;
            v168 = (float32x4_t *)v168->i64[0];
          }
          while (v168);
        }
        else
        {
          do
          {
            v169 = (float32x4_t *)v147[1].i64[0];
            _ZF = v169->i64[0] == (_QWORD)v147;
            v147 = v169;
          }
          while (!_ZF);
        }
        v147 = v169;
      }
      while (v169 != (float32x4_t *)((char *)&v281 + 8));
    }
  }
  sub_2231BD69C((uint64_t)&v300, a1 + 80, v142);
  v170 = *(_DWORD *)(a1 + 12);
  v256 = v255 - v170;
  v258 = v170;
  if (v170 != v256 && v170 != v248 - v170)
  {
    v194 = (int8x16_t)vnegq_f32(v250);
    v195 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v266.i8, 1);
    v196 = (float32x2_t)vextq_s8(v266, v266, 8uLL).u64[0];
    *(float32x2_t *)v197.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v253.i8, *(int32x2_t *)v252.i8), *(float *)v194.i32), v249, *(float32x2_t *)v250.f32, 1), *(float32x2_t *)&v265[1], v250, 2);
    v198 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v266.i8, *(float32x2_t *)v194.i8), v195, *(float32x2_t *)v250.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v194, v194, 8uLL), v196);
    v199 = (int8x16_t)vdupq_lane_s32((int32x2_t)v249, 0);
    v200 = (float32x4_t)vextq_s8(v199, (int8x16_t)vdupq_lane_s32((int32x2_t)v249, 1), 0xCuLL);
    v260 = *(float32x2_t *)v200.f32;
    v262 = v196;
    *(float32x2_t *)&v197.u32[2] = v198;
    v264 = v197;
    for (j = *(_DWORD *)(a1 + 12); j != v256; ++j)
    {
      v200.f32[0] = (float)j;
      v268 = v200;
      v202 = v258;
      do
      {
        v203 = (*(_DWORD *)(a1 + 120) * v202 + *(_DWORD *)(a1 + 124) * j);
        v204 = *(_QWORD *)(a1 + 104);
        _H0 = *(_WORD *)(v204 + 2 * v203);
        __asm { FCVT            S0, H0 }
        if (_S0 > -65504.0 && *(float *)(a1 + 8) >= _S0)
        {
          v207 = (float32x2_t *)*((_QWORD *)&v281 + 1);
          if (*((_QWORD *)&v281 + 1))
          {
            v208 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 160)
                                       + 2 * (*(_DWORD *)(a1 + 176) * v202 + *(_DWORD *)(a1 + 180) * j));
            v209 = (float32x2_t *)&v281 + 1;
            do
            {
              v210 = v207;
              v211 = v209;
              v212 = v207[3].u16[2];
              v213 = v207 + 1;
              if (v212 >= v208)
              {
                v213 = v210;
                v209 = v210;
              }
              v207 = (float32x2_t *)*v213;
            }
            while (v207);
            if (v209 != (float32x2_t *)((char *)&v281 + 8))
            {
              v214 = v212 >= v208 ? v210 : v211;
              if (v208 >= v214[3].u16[2])
              {
                if (v212 < v208)
                  v210 = v211;
                v215.f32[0] = (float)v202;
                v215.i32[1] = v268.i32[0];
                *(float32x2_t *)v200.f32 = vadd_f32(vmul_f32(v267[159], v215), v267[160]);
                v199.i32[0] = v210[5].i32[0];
                _S1 = (float)-v210[5].f32[1]
                    / vadd_f32(*(float32x2_t *)v199.i8, vmla_lane_f32(vmul_f32(v210[4], *(float32x2_t *)v200.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v200.f32, 1), v210[4], 1)).f32[0];
                __asm { FCVT            H1, S1 }
                *(_WORD *)(v204 + 2 * v203) = _H1;
                v218 = *v269;
                if (!*v269)
LABEL_324:
                  sub_223198218("map::at:  key not found");
                v200.i32[2] = 1.0;
                __asm { FCVT            S1, H1 }
                v220 = (int8x16_t)vmulq_n_f32(v200, _S1);
                *(float32x2_t *)v221.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v265[0], *(float *)v220.i32), v260, *(float32x2_t *)v220.i8, 1), *(float32x2_t *)&v265[1], (float32x4_t)v220, 2);
                *(float32x2_t *)v199.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v266.i8, *(float32x2_t *)v220.i8), v195, *(float32x2_t *)v220.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL), v262);
                v221.i64[1] = v199.i64[0];
                v222 = vaddq_f32(v264, v221);
                while (1)
                {
                  while (1)
                  {
                    v223 = *((unsigned __int16 *)v218 + 16);
                    if (v208 >= v223)
                      break;
                    v218 = (uint64_t *)*v218;
                    if (!v218)
                      goto LABEL_324;
                  }
                  if (v223 >= v208)
                    break;
                  v218 = (uint64_t *)v218[1];
                  if (!v218)
                    goto LABEL_324;
                }
                v224 = v218[5];
                v225 = v218[6];
                v286 = (uint64_t (**)())v224;
                *(_QWORD *)&v287 = v225;
                if (v225)
                {
                  v226 = (unint64_t *)(v225 + 8);
                  do
                    v227 = __ldxr(v226);
                  while (__stxr(v227 + 1, v226));
                  *(_DWORD *)&v318[8] = v222.i32[2];
                  *(_QWORD *)v318 = v222.i64[0];
                  v228 = *(_QWORD *)(v224 + 16);
                  *(_DWORD *)&v318[20] = *(_DWORD *)(v224 + 24);
                  *(_QWORD *)&v318[12] = v228;
                  *(_QWORD *)&v318[24] = v224;
                  *(_QWORD *)&v318[32] = v225;
                  do
                    v229 = __ldxr(v226);
                  while (__stxr(v229 + 1, v226));
                }
                else
                {
                  *(_DWORD *)&v318[8] = v222.i32[2];
                  *(_QWORD *)v318 = v222.i64[0];
                  v230 = *(_QWORD *)(v224 + 16);
                  *(_DWORD *)&v318[20] = *(_DWORD *)(v224 + 24);
                  *(_QWORD *)&v318[12] = v230;
                  *(_QWORD *)&v318[24] = v224;
                  *(_QWORD *)&v318[32] = 0;
                }
                v318[40] = 0;
                *(_QWORD *)&v318[48] = *(_QWORD *)(a1 + 24);
                LODWORD(v319) = 1;
                v231 = *(_QWORD *)(a1 + 64);
                if (v231 >= *(_QWORD *)(a1 + 72))
                {
                  v235 = sub_223AA8DC0(v254, (uint64_t)v318);
                  v236 = *(std::__shared_weak_count **)&v318[32];
                  *(_QWORD *)(a1 + 64) = v235;
                  if (!v236)
                    goto LABEL_305;
                  v237 = (unint64_t *)&v236->__shared_owners_;
                  do
                    v238 = __ldaxr(v237);
                  while (__stlxr(v238 - 1, v237));
                  if (!v238)
                  {
                    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                    std::__shared_weak_count::__release_weak(v236);
                    v234 = (std::__shared_weak_count *)v287;
                    if (!(_QWORD)v287)
                      goto LABEL_269;
                  }
                  else
                  {
LABEL_305:
                    v234 = (std::__shared_weak_count *)v287;
                    if (!(_QWORD)v287)
                      goto LABEL_269;
                  }
                }
                else
                {
                  v232 = *(_QWORD *)v318;
                  *(_DWORD *)(v231 + 8) = *(_DWORD *)&v318[8];
                  *(_QWORD *)v231 = v232;
                  v233 = *(_QWORD *)((unint64_t)v318 | 0xC);
                  *(_DWORD *)(v231 + 20) = *(_DWORD *)(((unint64_t)v318 | 0xC) + 8);
                  *(_QWORD *)(v231 + 12) = v233;
                  *(_OWORD *)(v231 + 24) = *(_OWORD *)&v318[24];
                  *(_QWORD *)&v318[24] = 0;
                  *(_QWORD *)&v318[32] = 0;
                  LODWORD(v233) = v319;
                  v200 = *(float32x4_t *)&v318[40];
                  *(_OWORD *)(v231 + 40) = *(_OWORD *)&v318[40];
                  *(_DWORD *)(v231 + 56) = v233;
                  *(_QWORD *)(a1 + 64) = v231 + 64;
                  v234 = (std::__shared_weak_count *)v287;
                  if (!(_QWORD)v287)
                    goto LABEL_269;
                }
                v239 = (unint64_t *)&v234->__shared_owners_;
                do
                  v240 = __ldaxr(v239);
                while (__stlxr(v240 - 1, v239));
                if (!v240)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
            }
          }
        }
LABEL_269:
        ++v202;
      }
      while (v202 != v248 - v258);
    }
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_QWORD *)v318 = &off_24EC5EEF8;
    v184 = *(_QWORD *)(a1 + 144);
    v185 = *(std::__shared_weak_count **)(a1 + 152);
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldxr(v186);
      while (__stxr(v187 + 1, v186));
      v188 = *(_WORD *)(a1 + 184);
      do
        v189 = __ldxr(v186);
      while (__stxr(v189 + 1, v186));
      v190 = *(_QWORD *)(a1 + 160);
      *(float32x4_t *)&v318[32] = *v251;
      do
        v191 = __ldxr(v186);
      while (__stxr(v191 + 1, v186));
      *(_QWORD *)&v318[8] = v184;
      *(_QWORD *)&v318[16] = v185;
      *(_QWORD *)&v318[24] = v190;
      *(_WORD *)&v318[48] = v188;
      do
        v192 = __ldaxr(v186);
      while (__stlxr(v192 - 1, v186));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
      do
        v193 = __ldaxr(v186);
      while (__stlxr(v193 - 1, v186));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    else
    {
      v241 = *(_WORD *)(a1 + 184);
      v242 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)&v318[8] = *(_QWORD *)(a1 + 144);
      *(_QWORD *)&v318[16] = 0;
      *(_QWORD *)&v318[24] = v242;
      *(float32x4_t *)&v318[32] = *v251;
      *(_WORD *)&v318[48] = v241;
    }
    sub_223AA6A58((_QWORD *)a1, (uint64_t **)&v286);
    sub_223A9D040((uint64_t)v318, (uint64_t *)&v286, (uint64_t **)v254);
    sub_2231F5848((uint64_t)&v286, (_QWORD *)v287);
    v243 = *(std::__shared_weak_count **)&v318[16];
    if (*(_QWORD *)&v318[16])
    {
      v244 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v245 - 1, v244));
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
  }
  sub_223198030((uint64_t)&v281, *((_QWORD **)&v281 + 1));
  sub_223198030((uint64_t)&v283, v284);
  v171 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v172 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v298;
  if (v298)
  {
    v175 = (unint64_t *)&v298->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
  if (*((_QWORD *)&v301 + 1))
  {
    v178 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v304 + 1);
  if (*((_QWORD *)&v304 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v304 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  sub_22391CC34((uint64_t *)__dst, (uint64_t *)v311, (uint64_t)v313);
  if (v312 < 0)
  {
    operator delete(v311[0]);
    if ((v310 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_265:
    operator delete(__dst[0]);
    return kdebug_trace();
  }
  if (v310 < 0)
    goto LABEL_265;
  return kdebug_trace();
}

void sub_223AA8910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  _QWORD *a67;
  char a69;
  _QWORD *a70;
  char a72;
  uint64_t v72;
  uint64_t v73;

  sub_2231F5848((uint64_t)&a72, *(_QWORD **)(v72 + 120));
  sub_223AA8BF8(v73 - 192);
  sub_223198030((uint64_t)&a66, a67);
  sub_223198030((uint64_t)&a69, a70);
  sub_223167354(a9);
  sub_22319EF60((uint64_t)&STACK[0x288]);
  sub_22319EF60((uint64_t)&STACK[0x2C0]);
  sub_2231D4840((uint64_t)&STACK[0x2F8]);
  sub_22392AA18((uint64_t)&STACK[0x348]);
  sub_2231874DC(v73 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA8BF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223AA8C60(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC5EDB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA8CD4()
{
  return 2;
}

uint64_t sub_223AA8CDC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223AA8CE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223AA8CFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223AA8D78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5EEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223AA8D88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5EEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

char *sub_223AA8DC0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_223AA8F6C();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 58)
      sub_223174E94();
    v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[64 * v3];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  v10 = &v8[64 * v7];
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  v11 = v9 + 64;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      v17 = *(_QWORD *)&v13[v14 - 64];
      *((_DWORD *)v15 - 14) = *(_DWORD *)&v13[v14 - 56];
      *((_QWORD *)v15 - 8) = v17;
      v18 = *(_QWORD *)&v13[v14 - 52];
      *((_DWORD *)v15 - 11) = *(_DWORD *)&v13[v14 - 44];
      *(_QWORD *)(v15 - 52) = v18;
      *(_OWORD *)(v15 - 40) = *(_OWORD *)&v13[v14 - 40];
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v16 - 4) = 0;
      v19 = *(_OWORD *)&v13[v14 - 24];
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v13[v14 - 8];
      *(_OWORD *)(v15 - 24) = v19;
      v14 -= 64;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v20 != v13)
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)v20 - 4);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v20 -= 64;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_223AA8F6C()
{
  sub_22316DBD4("vector");
}

void sub_223AA8F80(uint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[28];
  unint64_t v12[3];
  __int128 v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;

  v14 = 0;
  v11[24] = 0;
  memset(v11, 0, 17);
  v15 = 0;
  v16 = 0;
  sub_223F79614(v12, &v15, &v16, 1, &v14, 1, 0);
  v10 = 0uLL;
  HIDWORD(v10) = (unsigned __int128)0 >> 96;
  v3 = v12[0];
  v2 = v12[1];
  v4 = v12[2];
  v9 = v13;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24EC5AB40;
  *(_OWORD *)(v5 + 8) = v10;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v11[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v9;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AD18;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  sub_223AA9148(a1, v5, v6);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_223AA9100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_22380AC98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223AA911C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22380AC98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223AA9130(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223AA9148(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  uint64_t v20;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = a2;
    a1[1] = (uint64_t)a3;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    *a1 = a2;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(&v20, a2, 2);
  v10 = *(_QWORD *)(v20 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v20;
  a1[4] = v10;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 20) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_223AA929C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223AA92B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231A3CC8(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223AA939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223AA93B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA9420()
{
  return 2;
}

uint64_t sub_223AA9428(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223AA9430@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223AA9448(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_223AA94CC(_BYTE *a1, float32x2_t **a2, float32x2_t a3, double a4, float32x2_t a5)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count **v9;
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  float32x2_t **v24;
  float32x2_t *v25;
  float32x2_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = (std::__shared_weak_count **)(a1 + 16);
    while (1)
    {
      v10 = (float32x2_t *)*(v9 - 1);
      v11 = *a2;
      if (v10 == *a2)
        break;
      v12 = v10[2];
      a3.i32[0] = v10[3].i32[0];
      v13 = v11[2];
      a5.i32[0] = v11[3].i32[0];
      v14 = (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1);
      v15 = vmul_f32(v12, v13);
      if (vmla_f32(vmla_lane_f32(v15, v14, v12, 1), a5, a3).f32[0] > 0.95)
      {
        v17 = (std::__shared_weak_count *)a2[1];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        v20 = *v9;
        *(v9 - 1) = (std::__shared_weak_count *)v11;
        *v9 = v17;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        return v8;
      }
      *(double *)&a3 = vmla_f32(vmla_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v14), a3, a5).f32[0];
      if (*(double *)&a3 <= -0.9
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 125, (uint64_t)"dot_product > -0.9", 18, (uint64_t)"A plane from an opposite direction was added to a vertex", 56, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_8;
      }
      ++v8;
      v9 += 2;
      if (v7 == v8)
      {
        v16 = *a1;
        if (v16 >= 3)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 128, (uint64_t)"plane_count_ < kMaxNumPlanes", 28, (uint64_t)"Exceeded maximum number of planes allowed.", 42, (void (*)(void **))sub_22457406C))
          {
LABEL_8:
            abort();
          }
          v16 = *a1;
        }
        goto LABEL_21;
      }
    }
  }
  else
  {
    v16 = 0;
LABEL_21:
    *a1 = v16 + 1;
    v23 = v16;
    v24 = (float32x2_t **)&a1[16 * v16 + 8];
    v26 = *a2;
    v25 = a2[1];
    if (v25)
    {
      v27 = (unint64_t *)&v25[1];
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *v24 = v26;
    v29 = (uint64_t)&a1[16 * v23 + 8];
    v30 = *(std::__shared_weak_count **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v25;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    return *a1 - 1;
  }
  return v8;
}

void sub_223AA9710(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int32x2_t *a5, simd_float3x3 a6, __n128 a7, float32x4_t a8, double a9, float32x2_t a10)
{
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v16;
  uint64_t v17;
  simd_float3 v18;
  __n128 v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  __n128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  simd_float3 v45;
  float v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x4_t v50;
  simd_float3 v51;
  _BYTE v52[20];
  __int32 v53;
  float32x2_t v54;
  __int32 v55;
  simd_float2x2 v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;

  if ((unint64_t)(a3 - 1) < 3)
  {
    if (a3 == 2)
    {
      v17 = a4[2];
      a6.columns[0].i64[0] = *(_QWORD *)(*a4 + 16);
      a6.columns[1].i32[0] = *(_DWORD *)(*a4 + 24);
      a6.columns[2].i32[0] = *(_DWORD *)(*a4 + 28);
      v18 = a6.columns[0];
      v18.i32[2] = a6.columns[1].i32[0];
      a7.n128_u64[0] = *(_QWORD *)(v17 + 16);
      v19 = a7;
      a8.i32[0] = *(_DWORD *)(v17 + 24);
      v20 = *(float *)(v17 + 28);
      v19.n128_u32[2] = a8.i32[0];
      v48 = (float32x4_t)v19;
      v50 = (float32x4_t)v18;
      *(int32x2_t *)((char *)v56.columns + 4) = vdup_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.columns[0].f32, (float32x2_t)a7.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 1), *(float32x2_t *)a6.columns[0].f32, 1), *(float32x2_t *)a8.f32, *(float32x2_t *)a6.columns[1].f32), 0);
      v21 = (float32x2_t)*a5;
      *(int32x2_t *)v18.f32 = vdup_lane_s32(*a5, 1);
      v22 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.columns[0].f32, (float32x2_t)*a5), *(float32x2_t *)v18.f32, *(float32x2_t *)a6.columns[0].f32, 1);
      a6.columns[0].i32[0] = a5[1].i32[0];
      v56.columns[0].i32[0] = 1065353216;
      v56.columns[1].i32[1] = 1065353216;
      a6.columns[1].f32[0] = (float)-vmla_f32(v22, *(float32x2_t *)a6.columns[0].f32, *(float32x2_t *)a6.columns[1].f32).f32[0]
                           - a6.columns[2].f32[0];
      v45 = a6.columns[1];
      v46 = (float)-vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a7.n128_u64[0], v21), *(float32x2_t *)v18.f32, (float32x2_t)a7.n128_u64[0], 1), *(float32x2_t *)a6.columns[0].f32, *(float32x2_t *)a8.f32).f32[0]- v20;
      v23 = sub_22322BB30(&v56, (__n128 *)v52);
      v24.i32[3] = v45.i32[3];
      *(int32x2_t *)v24.f32 = *a5;
      v24.i32[2] = a5[1].i32[0];
      v23.n128_u64[0] = (unint64_t)vmla_n_f32(vmul_n_f32(*(float32x2_t *)v52, v45.f32[0]), *(float32x2_t *)&v52[8], v46);
      v25.i32[3] = v48.i32[3];
      v26 = vmlaq_lane_f32(vmlaq_n_f32(v24, v50, v23.n128_f32[0]), v48, (float32x2_t)v23.n128_u64[0], 1);
      *(_DWORD *)(a1 + 8) = v26.i32[2];
      *(_QWORD *)a1 = v26.i64[0];
      v23.n128_u64[0] = *(_QWORD *)(*a4 + 16);
      v23.n128_u32[2] = *(_DWORD *)(*a4 + 24);
      v27 = a4[2];
      v25.i64[0] = *(_QWORD *)(v27 + 16);
      v25.i32[2] = *(_DWORD *)(v27 + 24);
      v28 = (int8x16_t)vaddq_f32((float32x4_t)v23, v25);
    }
    else
    {
      if (a3 == 1)
      {
        a6.columns[0].i64[0] = *(_QWORD *)(*a4 + 16);
        a6.columns[1] = a6.columns[0];
        a6.columns[2].i32[0] = *(_DWORD *)(*a4 + 24);
        a6.columns[1].i32[2] = a6.columns[2].i32[0];
        *(int32x2_t *)a8.f32 = *a5;
        a10.i32[0] = a5[1].i32[0];
        a8.i32[2] = a10.i32[0];
        v16 = vmlaq_n_f32(a8, (float32x4_t)a6.columns[1], (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.columns[0].f32, (float32x2_t)*a5), (float32x2_t)vdup_lane_s32(*a5, 1), *(float32x2_t *)a6.columns[0].f32, 1), a10, *(float32x2_t *)a6.columns[2].f32).f32[0]- *(float *)(*a4 + 28));
        *(_DWORD *)(a1 + 8) = v16.i32[2];
        *(_QWORD *)a1 = v16.i64[0];
        a6.columns[0].i64[0] = *(_QWORD *)(*a4 + 16);
        a6.columns[0].i32[2] = *(_DWORD *)(*a4 + 24);
LABEL_10:
        *(_DWORD *)(a2 + 8) = a6.columns[0].i32[2];
        *(_QWORD *)a2 = a6.columns[0].i64[0];
        return;
      }
      v29 = *a4;
      v30 = (_DWORD *)a4[2];
      v31 = (_DWORD *)a4[4];
      a6.columns[1].i32[0] = *(_DWORD *)(*a4 + 20);
      a6.columns[2].i32[0] = v30[4];
      v32 = v30[5];
      v33 = v31[4];
      v34 = v31[5];
      v35 = *(_DWORD *)(*a4 + 24);
      v36 = v30[6];
      v37 = v31[6];
      v56.columns[0].i32[0] = *(_DWORD *)(*a4 + 16);
      v56.columns[0].i32[1] = a6.columns[2].i32[0];
      v56.columns[1] = (simd_float2)__PAIR64__(a6.columns[1].u32[0], v33);
      v57 = v32;
      v58 = v34;
      v59 = v35;
      v60 = __PAIR64__(v37, v36);
      a6.columns[0].f32[0] = -*(float *)(v29 + 28);
      v47 = *(float32x2_t *)a6.columns[0].f32;
      a6.columns[0].i32[0] = v30[7];
      v49 = *(float32x2_t *)a6.columns[0].f32;
      v10.f32[0] = -a6.columns[0].f32[0];
      a6.columns[0].i32[0] = v31[7];
      v51 = a6.columns[0];
      v11.f32[0] = -a6.columns[0].f32[0];
      sub_22322BB84((uint64_t)&v56, (uint64_t)v52, a6);
      v38.i32[0] = v53;
      v39.i32[0] = v55;
      v40.i32[3] = v51.i32[3];
      v41 = (float32x4_t)vextq_s8(*(int8x16_t *)v52, *(int8x16_t *)v52, 8uLL);
      *(float32x2_t *)a1 = vmls_lane_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v52, v47.f32[0]), *(float32x2_t *)&v52[12], v49, 0), v54, *(float32x2_t *)v51.f32, 0);
      *(_DWORD *)(a1 + 8) = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v41.f32, v47), v10, v38), v11, v39).u32[0];
      v41.i64[0] = *(_QWORD *)(*a4 + 16);
      v41.i32[2] = *(_DWORD *)(*a4 + 24);
      v42 = a4[2];
      v40.i64[0] = *(_QWORD *)(v42 + 16);
      v40.i32[2] = *(_DWORD *)(v42 + 24);
      v43 = a4[4];
      v44.i64[0] = *(_QWORD *)(v43 + 16);
      v44.i32[2] = *(_DWORD *)(v43 + 24);
      v28 = (int8x16_t)vaddq_f32(vaddq_f32(v41, v40), v44);
    }
    a6.columns[2].i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
    a6.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)v28, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), *(float32x2_t *)a6.columns[2].f32, *(float32x2_t *)a6.columns[2].f32).f32[0]));
    goto LABEL_10;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 146, (uint64_t)"!planes.empty() && planes.size() <= 3", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
}

void sub_223AA9A14(uint64_t a1, uint64_t a2, simd_float3x3 _Q0, float32x4_t a4, float32x4_t a5, double a6, float32x2_t a7)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float32x2_t *v15;
  uint64_t v16;
  __int32 v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  simd_float3 v38;
  int32x2_t v39;
  __int32 v40;
  float32x2_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  __int32 v44;
  float32x2_t v45;
  __int32 v46;

  v38.i64[0] = _Q0.columns[0].i64[0];
  v9 = (uint64_t *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a2 + 56))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 88);
      if (v11)
      {
        v12 = *v9;
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 56);
        v11 = (*(_QWORD *)(a1 + 64) - v12) >> 6;
      }
      v14 = *(_DWORD *)(v12 + (v11 << 6) - 8);
      v15 = *(float32x2_t **)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = v15[1].i32[0];
      v45 = *v15;
      v46 = v17;
      LODWORD(v15) = *(_DWORD *)(v16 + 8);
      v43 = *(_QWORD *)v16;
      v44 = (int)v15;
      if (!v14)
        goto LABEL_25;
      goto LABEL_12;
    }
  }
  else if (v10)
  {
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      if (!*(_DWORD *)(*v9 + (v13 << 6) - 8))
        goto LABEL_9;
    }
    else if (!*(_DWORD *)(*(_QWORD *)(a1 + 56) + ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 6 << 6) - 8))
    {
      goto LABEL_9;
    }
    *(double *)_Q0.columns[0].i64 = sub_223AAEE14((uint64_t *)(a1 + 56));
    v10 = *(_QWORD *)(a1 + 96);
  }
LABEL_9:
  v12 = *v9;
LABEL_12:
  if (v10 == (*(_QWORD *)(a1 + 64) - v12) >> 6)
    sub_223AAEF54(v9, *(double *)_Q0.columns[0].i64, (float64x2_t)_Q0.columns[1], (float32x4_t)_Q0.columns[2]);
  if ((*(_DWORD *)(a2 + 56) - 1) >= 2)
  {
    if (*(_BYTE *)(a2 + 40))
    {
      _Q0.columns[0].i32[0] = 1115684864;
    }
    else
    {
      _Q0.columns[0].i32[0] = 8.0;
      if (!*(_QWORD *)(a2 + 24))
        _Q0.columns[0].f32[0] = 1.0;
    }
  }
  else
  {
    _Q0.columns[0].i32[0] = 1017370378;
  }
  _Q0.columns[1].i64[0] = *(_QWORD *)(a1 + 128);
  a4.i64[0] = *(_QWORD *)a2;
  a4.i32[2] = *(_DWORD *)(a2 + 8);
  v18 = (float64x2_t)vmulq_n_f32(a4, _Q0.columns[0].f32[0]);
  v19 = vcvtq_f64_f32(*(float32x2_t *)&v18.f64[0]);
  v18.f64[0] = *(float *)&v18.f64[1];
  _Q0.columns[1] = (simd_float3)vaddq_f64((float64x2_t)_Q0.columns[1], v18);
  _Q0.columns[2] = (simd_float3)vaddq_f64(*(float64x2_t *)(a1 + 112), v19);
  *(simd_float3 *)(a1 + 112) = _Q0.columns[2];
  *(_QWORD *)(a1 + 128) = _Q0.columns[1].i64[0];
  _Q0.columns[1].i64[0] = *(_QWORD *)(a2 + 12);
  _Q0.columns[1].i32[2] = *(_DWORD *)(a2 + 20);
  _Q0.columns[1] = (simd_float3)vmulq_n_f32((float32x4_t)_Q0.columns[1], _Q0.columns[0].f32[0]);
  *(double *)_Q0.columns[2].i64 = _Q0.columns[1].f32[2];
  v18.f64[0] = *(float64_t *)(a1 + 152);
  v19.f64[0] = *(float64_t *)(a1 + 160);
  *(float64x2_t *)(a1 + 136) = vaddq_f64(*(float64x2_t *)(a1 + 136), vcvtq_f64_f32(*(float32x2_t *)_Q0.columns[1].f32));
  *(_QWORD *)(a1 + 152) = *(_OWORD *)&vaddq_f64(v18, (float64x2_t)_Q0.columns[2]);
  *(double *)(a1 + 160) = v19.f64[0] + _Q0.columns[0].f32[0];
  if (*(_BYTE *)(a2 + 40))
  {
    ++*(_BYTE *)(a1 + 105);
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    ++*(_BYTE *)(a1 + 104);
  }
  sub_223AAF250(v9, (uint64_t *)a2);
  v20.f64[0] = *(float64_t *)(a1 + 128);
  a4.i64[0] = *(_QWORD *)(a1 + 152);
  v21.f64[0] = *(float64_t *)(a1 + 160);
  v45 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)(a1 + 112), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0)));
  *(float *)v20.f64 = vdivq_f64(v20, v21).f64[0];
  v46 = LODWORD(v20.f64[0]);
  _Q0 = *(float64x2_t *)(a1 + 136);
  _Q0.columns[1] = (simd_float3)vmulq_f64(_Q0, _Q0);
  _Q0.columns[2].i64[0] = *(_QWORD *)(a1 + 144);
  __asm { FMLA            D1, D2, V0.D[1] }
  *(double *)_Q0.columns[1].i64 = 1.0 / sqrt(*(double *)_Q0.columns[1].i64 + *(double *)a4.i64 * *(double *)a4.i64);
  _Q0.columns[2] = (simd_float3)vmulq_f64((float64x2_t)a4, (float64x2_t)_Q0.columns[1]);
  _Q0.columns[0] = (simd_float3)vmulq_n_f64(_Q0, *(double *)_Q0.columns[1].i64);
  *(float32x2_t *)_Q0.columns[0].f32 = vcvt_f32_f64((float64x2_t)_Q0.columns[0]);
  v43 = _Q0.columns[0].i64[0];
  _Q0.columns[0].f32[0] = *(double *)_Q0.columns[2].i64;
  v44 = _Q0.columns[0].i32[0];
LABEL_25:
  if (*(_QWORD *)(a2 + 24))
  {
    v27 = *(std::__shared_weak_count **)(a2 + 32);
    v41 = *(float32x2_t **)(a2 + 24);
    v42 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    sub_223AA94CC((_BYTE *)(a1 + 168), &v41, *(float32x2_t *)_Q0.columns[0].f32, *(double *)_Q0.columns[1].i64, *(float32x2_t *)_Q0.columns[2].f32);
    v30 = v42;
    if (v42)
    {
      v31 = (unint64_t *)&v42->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v33 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    *(float32x2_t *)_Q0.columns[0].f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 4));
    _Q0.columns[0].f32[2] = (float)*(int *)(a1 + 12);
    _Q0.columns[1] = v38;
    _Q0.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)_Q0.columns[0], v38.f32[0]);
    v40 = _Q0.columns[0].i32[2];
    v39 = *(int32x2_t *)_Q0.columns[0].f32;
    sub_223AA9710((uint64_t)&v45, (uint64_t)&v43, v33, (_QWORD *)(a1 + 176), &v39, _Q0, (__n128)a4, a5, a6, a7);
  }
  v34 = *(float32x2_t **)(a1 + 24);
  v35 = v45;
  v34[1].i32[0] = v46;
  *v34 = v35;
  v36 = *(_QWORD *)(a1 + 32);
  v37 = v43;
  *(_DWORD *)(v36 + 8) = v44;
  *(_QWORD *)v36 = v37;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 48);
}

void sub_223AA9D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA9D58(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  float32x4_t v10;
  float32x4_t *v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x2_t *v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  unint64_t v36;
  float32x2_t v37;
  float32_t v38;
  float32_t v40;
  BOOL v41;
  int32x2_t v42;
  float32x2_t *v46;
  int8x16_t v47;
  float32x2_t v48;
  int8x16_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v53;
  int v54;
  char *v55;
  float32x2_t v56;
  float32x2_t v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t *v68;
  uint64_t v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  float32x2_t **v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t *v95;
  uint64_t **v96;
  unint64_t v97;
  float32x2_t **v98;
  unint64_t *v99;
  unint64_t v100;
  float32x2_t **v101;
  _BYTE *v102;
  float32x2_t **v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  float32x2_t **v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  float32x2_t **v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  float32x2_t **v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  float32x2_t *v131;
  unint64_t *v132;
  unint64_t v133;
  _BYTE *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  float32x2_t **v138;
  float32x2_t **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  simd_float3x3 v143;
  __n128 v144;
  float32x4_t v145;
  double v146;
  float32x2_t v147;
  char v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  char *__p;
  int v170;
  int32x2_t v171;
  _BYTE v173[24];
  __int128 v174;
  simd_float3 v175;
  int8x16_t v176;
  float32x2_t **v177;
  float32x2_t **v178;
  unint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;

  v12 = (float32x4_t *)(a2 + 1336);
  if (*(_BYTE *)(a2 + 1744))
  {
    v13 = *(float32x2_t *)(a2 + 1616);
    v14.i32[0] = *(_DWORD *)(a2 + 1624);
    v15 = *(float32x2_t *)(a2 + 1632);
    v16 = *(float32x2_t *)(a2 + 1648);
    LODWORD(a6) = *(_DWORD *)(a2 + 1656);
    a9.i64[0] = *(_QWORD *)(a2 + 1664);
    a9.i32[2] = *(_DWORD *)(a2 + 1672);
    v17 = (int8x16_t)vnegq_f32(a9);
    v18 = *(float32x4_t *)(a2 + 1352);
    v19 = vmulq_n_f32(*v12, v14.f32[0]);
    v14.i32[1] = *(_DWORD *)(a2 + 1640);
    v20 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v13, (int32x2_t)v15), *(float *)v17.i32), (float32x2_t)vzip2_s32((int32x2_t)v13, (int32x2_t)v15), *(float32x2_t *)a9.f32, 1), v14, a9, 2);
    LODWORD(v21) = vmla_f32(vmls_lane_f32(vmul_f32(v16, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v16, 1), *(float32x2_t *)a9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)&a6).u32[0];
    v22 = *(float32x4_t *)(a2 + 1368);
    v23 = *(float32x4_t *)(a2 + 1384);
    a10 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v12, v13.f32[0]), v18, v15.f32[0]), v22, v16.f32[0]), (float32x4_t)0, v23);
    v24 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v12, v13, 1), v18, v15, 1), v22, v16, 1), (float32x4_t)0, v23);
    v10 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v19, v18, *(float *)(a2 + 1640)), v22, *(float *)&a6), (float32x4_t)0, v23);
    v25 = vaddq_f32(v23, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v12, v20.f32[0]), v18, v20, 1), v22, v21));
    v26 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, COERCE_FLOAT(*(_OWORD *)(a2 + 1680))), v24, *(float32x2_t *)(a2 + 1680), 1), v10, *(float32x4_t *)(a2 + 1680), 2), v25, *(float32x4_t *)(a2 + 1680), 3);
    v27 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, COERCE_FLOAT(*(_OWORD *)(a2 + 1696))), v24, *(float32x2_t *)(a2 + 1696), 1), v10, *(float32x4_t *)(a2 + 1696), 2), v25, *(float32x4_t *)(a2 + 1696), 3);
    v28 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, COERCE_FLOAT(*(_OWORD *)(a2 + 1712))), v24, *(float32x2_t *)(a2 + 1712), 1), v10, *(float32x4_t *)(a2 + 1712), 2), v25, *(float32x4_t *)(a2 + 1712), 3);
    v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, COERCE_FLOAT(*(_OWORD *)(a2 + 1728))), v24, *(float32x2_t *)(a2 + 1728), 1), v10, *(float32x4_t *)(a2 + 1728), 2), v25, *(float32x4_t *)(a2 + 1728), 3);
  }
  else
  {
    v26 = *(int8x16_t *)v12;
    v27 = *(int8x16_t *)(a2 + 1352);
    v28 = *(int8x16_t *)(a2 + 1368);
    v29 = *(float32x4_t *)(a2 + 1384);
  }
  v30 = *(float32x2_t **)(a1 + 24);
  a10.i32[0] = v30[1].i32[0];
  *(float32x2_t *)v31.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v26.i8, COERCE_FLOAT(*v30)), *(float32x2_t *)v27.i8, *v30, 1), *(float32x2_t *)v28.i8, a10.f32[0]);
  v32 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
  v33 = (float32x2_t)vextq_s8(v27, v27, 8uLL).u64[0];
  v34 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
  *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v32, *v30), v33, *v30, 1), *(float32x2_t *)a10.f32, v34);
  v35 = vaddq_f32(v31, v29);
  if (v35.f32[2] > 0.000001)
  {
    v36 = *(_QWORD *)(a2 + 1264);
    v37 = vadd_f32((float32x2_t)v36, vdiv_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)(a2 + 1256)), (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2)));
    if (v37.f32[0] >= -0.5)
    {
      LODWORD(v36) = *(_DWORD *)(a2 + 1328);
      v38 = (double)v36 + -0.5;
      _NF = v37.f32[0] < v38;
    }
    else
    {
      _NF = 0;
    }
    if (_NF)
    {
      if (v37.f32[1] >= -0.5)
      {
        v10.i32[0] = *(_DWORD *)(a2 + 1332);
        v40 = (double)v10.u64[0] + -0.5;
        v41 = v37.f32[1] < v40;
      }
      else
      {
        v41 = 0;
      }
      if (v41)
      {
        v42 = vcvt_s32_f32(vrndm_f32(vadd_f32(v37, (float32x2_t)0x3F0000003F000000)));
        _D16 = vmul_s32(*(int32x2_t *)(a2 + 1920), v42);
        _D16.i16[0] = *(_WORD *)(*(_QWORD *)(a2 + 1904) + 2 * vadd_s32(vdup_lane_s32(_D16, 1), _D16).u32[0]);
        __asm { FCVT            S16, H16 }
        if ((float)(*(float *)_D16.i32 - v35.f32[2]) > (float)(*(float *)&a3 * 4.0))
        {
          v46 = *(float32x2_t **)(a1 + 32);
          *(float32x2_t *)a10.f32 = *v46;
          a10.i32[2] = v46[1].i32[0];
          v47 = (int8x16_t)vsubq_f32((float32x4_t)0, v35);
          v48 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
          v49 = (int8x16_t)vmulq_n_f32((float32x4_t)v47, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)v47.i8, 1), v48, v48).f32[0]));
          v50 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v26.i8, COERCE_FLOAT(*v46)), *(float32x2_t *)v27.i8, *v46, 1), *(float32x2_t *)v28.i8, a10, 2);
          v51 = vmla_lane_f32(vmul_f32(v50, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), v50, 1);
          v26 = vextq_s8(v49, v49, 8uLL);
          if (vmla_f32(v51, *(float32x2_t *)v26.i8, vmla_f32(vmla_lane_f32(vmul_f32(v32, *v46), v33, *v46, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), v34)).f32[0] > 0.35)return 1;
        }
        if (*(_BYTE *)(a1 + 168))
        {
          *(float32x2_t *)v26.i8 = vcvt_f32_s32(*(int32x2_t *)(a1 + 4));
          *(float *)&v26.i32[2] = (float)*(int *)(a1 + 12);
          v53 = vmulq_n_f32((float32x4_t)v26, *(float *)&a3);
          v176.i32[2] = v53.i32[2];
          v176.i64[0] = v53.i64[0];
          v170 = *(_DWORD *)(a2 + 1916);
          v54 = *(_DWORD *)(a2 + 1912);
          v171 = v42;
          v55 = (char *)operator new(0x28uLL);
          v57.i32[1] = -6;
          *(_OWORD *)v55 = xmmword_22465F310;
          *((_OWORD *)v55 + 1) = xmmword_22465F320;
          *((_QWORD *)v55 + 4) = 0x600000006;
          v58 = v55 + 40;
          v181 = 0;
          v182 = 0;
          v180 = &v181;
          __p = v55;
          do
          {
            v59 = *(_DWORD *)v55 + v171.i32[0];
            if (v59 >= 0 && v59 < v54)
            {
              v60 = *((_DWORD *)v55 + 1) + v171.i32[1];
              if (v60 >= 0 && v60 < v170)
              {
                v61 = *(_QWORD *)(a2 + 1944);
                if (v61)
                {
                  v62 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 1848)
                                            + 2
                                            * (*(_DWORD *)(a2 + 1864) * v59 + *(_DWORD *)(a2 + 1868) * v60));
                  v63 = *(_QWORD *)(a2 + 1232);
                  v64 = a2 + 1944;
                  do
                  {
                    v65 = *(_QWORD *)(v61 + 32);
                    _ZF = v65 == v63;
                    v66 = v65 < v63;
                    if (_ZF)
                      v66 = *(unsigned __int16 *)(v61 + 40) < v62;
                    _ZF = !v66;
                    if (v66)
                      v68 = (uint64_t *)(v61 + 8);
                    else
                      v68 = (uint64_t *)v61;
                    if (_ZF)
                      v64 = v61;
                    v61 = *v68;
                  }
                  while (*v68);
                  if (v64 != a2 + 1944)
                  {
                    v69 = *(_QWORD *)(v64 + 32);
                    v70 = v62 >= *(unsigned __int16 *)(v64 + 40);
                    _ZF = v63 == v69;
                    v71 = v63 >= v69;
                    if (_ZF)
                      v71 = v70;
                    if (v71)
                    {
                      v72 = *(_QWORD *)(v64 + 48);
                      v73 = &v181;
                      v74 = &v181;
                      if (v181)
                      {
                        v75 = v181;
                        while (1)
                        {
                          while (1)
                          {
                            v74 = (uint64_t **)v75;
                            v76 = v75[4];
                            if (v72 >= v76)
                              break;
                            v75 = *v74;
                            v73 = v74;
                            if (!*v74)
                              goto LABEL_48;
                          }
                          if (v76 >= v72)
                            break;
                          v75 = v74[1];
                          if (!v75)
                          {
                            v73 = v74 + 1;
                            goto LABEL_48;
                          }
                        }
                      }
                      else
                      {
LABEL_48:
                        v77 = (uint64_t *)operator new(0x30uLL);
                        v78 = v77;
                        v77[4] = v72;
                        v79 = *(_QWORD *)(v64 + 56);
                        v77[5] = v79;
                        if (v79)
                        {
                          v80 = (unint64_t *)(v79 + 8);
                          do
                            v81 = __ldxr(v80);
                          while (__stxr(v81 + 1, v80));
                        }
                        *v77 = 0;
                        v77[1] = 0;
                        v77[2] = (uint64_t)v74;
                        *v73 = v77;
                        if (*v180)
                        {
                          v180 = (uint64_t **)*v180;
                          v78 = *v73;
                        }
                        sub_2231A9A8C(v181, v78);
                        ++v182;
                      }
                    }
                  }
                }
              }
            }
            v55 += 8;
          }
          while (v55 != v58);
          v177 = 0;
          v178 = 0;
          v179 = 0;
          v82 = a1;
          v83 = (float32x2_t **)*(unsigned __int8 *)(a1 + 168);
          if (*(_BYTE *)(a1 + 168))
          {
            v84 = 0;
            v85 = a1 + 176;
            while (1)
            {
              if (v84 >= *(unsigned __int8 *)(v82 + 168)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v86 = *(_OWORD *)(v85 + 16 * v84);
              *(_OWORD *)v173 = v86;
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
              if (*((_QWORD *)&v86 + 1))
              {
                v88 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
                do
                  v89 = __ldxr(v88);
                while (__stxr(v89 + 1, v88));
              }
              v90 = (uint64_t *)v180;
              if (v180 == &v181)
              {
LABEL_71:
                v98 = v178;
                v97 = v179;
                if ((unint64_t)v178 >= v179)
                {
                  v93 = (float32x2_t *)v86;
                  v102 = v173;
                  v103 = v177;
                  v104 = ((char *)v178 - (char *)v177) >> 4;
                  v105 = v104 + 1;
                  if ((unint64_t)(v104 + 1) >> 60)
                    goto LABEL_112;
LABEL_77:
                  v106 = v97 - (_QWORD)v103;
                  if (v106 >> 3 > v105)
                    v105 = v106 >> 3;
                  if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
                    v107 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v107 = v105;
                  if (v107 >> 60)
                    sub_223174E94();
                  v108 = v83;
                  v109 = v85;
                  v110 = *((_QWORD *)v102 + 1);
                  v111 = (char *)operator new(16 * v107);
                  v112 = (float32x2_t **)&v111[16 * v104];
                  *v112 = v93;
                  v112[1] = (float32x2_t *)v110;
                  if (v110)
                  {
                    v113 = (unint64_t *)(v110 + 8);
                    do
                      v114 = __ldxr(v113);
                    while (__stxr(v114 + 1, v113));
                  }
                  v115 = &v111[16 * v107];
                  v101 = v112 + 2;
                  v82 = a1;
                  if (v98 == v103)
                  {
                    v177 = v112;
                    v179 = (unint64_t)v115;
                    v85 = v109;
                    v83 = v108;
                  }
                  else
                  {
                    v116 = v98;
                    v85 = v109;
                    do
                    {
                      v117 = *((_OWORD *)v116 - 1);
                      v116 -= 2;
                      *((_OWORD *)v112 - 1) = v117;
                      v112 -= 2;
                      *v116 = 0;
                      v116[1] = 0;
                    }
                    while (v116 != v103);
                    v177 = v112;
                    v178 = v101;
                    v179 = (unint64_t)v115;
                    v83 = v108;
                    do
                    {
                      v118 = (std::__shared_weak_count *)*(v98 - 1);
                      if (v118)
                      {
                        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(p_shared_owners);
                        while (__stlxr(v120 - 1, p_shared_owners));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v98 -= 2;
                    }
                    while (v98 != v103);
                  }
                  if (v103)
                    operator delete(v103);
                  goto LABEL_105;
                }
                *(_OWORD *)v178 = v86;
                if (*((_QWORD *)&v86 + 1))
                {
                  v99 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
              }
              else
              {
                v91 = *(float32x2_t *)(v86 + 16);
                v92 = (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1);
                while (1)
                {
                  v93 = (float32x2_t *)v90[4];
                  v56.i32[0] = v93[3].i32[0];
                  v94 = v93[2];
                  v57.i32[0] = *(_DWORD *)(v86 + 24);
                  if (vmla_f32(vmla_lane_f32(vmul_f32(v91, v94), v92, v94, 1), v56, v57).f32[0] > 0.95)
                    break;
                  v95 = (uint64_t *)v90[1];
                  if (v95)
                  {
                    do
                    {
                      v96 = (uint64_t **)v95;
                      v95 = (uint64_t *)*v95;
                    }
                    while (v95);
                  }
                  else
                  {
                    do
                    {
                      v96 = (uint64_t **)v90[2];
                      _ZF = *v96 == v90;
                      v90 = (uint64_t *)v96;
                    }
                    while (!_ZF);
                  }
                  v90 = (uint64_t *)v96;
                  if (v96 == &v181)
                    goto LABEL_71;
                }
                v57.i32[1] = HIDWORD(a3);
                if (fabsf(v93[3].f32[1]+ vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, v94), (float32x2_t)vdup_lane_s32((int32x2_t)v94, 1), *(float32x2_t *)v176.i8, 1), v56, (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)).f32[0]) >= *(float *)&a3)goto LABEL_106;
                v98 = v178;
                v97 = v179;
                if ((unint64_t)v178 >= v179)
                {
                  v102 = v90 + 4;
                  v103 = v177;
                  v104 = ((char *)v178 - (char *)v177) >> 4;
                  v105 = v104 + 1;
                  if ((unint64_t)(v104 + 1) >> 60)
LABEL_112:
                    sub_22316E078();
                  goto LABEL_77;
                }
                *v178 = v93;
                v121 = v90[5];
                v98[1] = (float32x2_t *)v121;
                if (v121)
                {
                  v122 = (unint64_t *)(v121 + 8);
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                }
              }
              v101 = v98 + 2;
LABEL_105:
              v178 = v101;
              v87 = *(std::__shared_weak_count **)&v173[8];
LABEL_106:
              if (v87)
              {
                v124 = (unint64_t *)&v87->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              if ((float32x2_t **)++v84 == v83)
              {
                v83 = v177;
                v126 = (char *)v178;
                goto LABEL_115;
              }
            }
          }
          v126 = 0;
LABEL_115:
          v127 = (unint64_t)(v126 - (char *)v83) >> 4;
          v128 = v127;
          v173[0] = v127;
          *(_OWORD *)&v173[8] = 0u;
          v174 = 0u;
          v175 = 0u;
          if ((_BYTE)v127)
          {
            v129 = 0;
            do
            {
              v130 = *(_OWORD *)&v177[2 * v129];
              v131 = v177[2 * v129 + 1];
              if (v131)
              {
                v132 = (unint64_t *)&v131[1];
                do
                  v133 = __ldxr(v132);
                while (__stxr(v133 + 1, v132));
              }
              v134 = &v173[16 * v129 + 8];
              v135 = (std::__shared_weak_count *)*((_QWORD *)v134 + 1);
              *(_OWORD *)v134 = v130;
              if (v135)
              {
                v136 = (unint64_t *)&v135->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              ++v129;
            }
            while (v129 != v128);
            v83 = v177;
          }
          if (v83)
          {
            v138 = v178;
            v139 = v83;
            if (v178 != v83)
            {
              do
              {
                v140 = (std::__shared_weak_count *)*(v138 - 1);
                if (v140)
                {
                  v141 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v142 = __ldaxr(v141);
                  while (__stlxr(v142 - 1, v141));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
                v138 -= 2;
              }
              while (v138 != v83);
              v139 = v177;
            }
            v178 = v83;
            operator delete(v139);
          }
          sub_223AAABE8(v181);
          operator delete(__p);
          v148 = v173[0];
          v149 = *(std::__shared_weak_count **)(v82 + 184);
          *(_OWORD *)(v82 + 176) = *(_OWORD *)&v173[8];
          *(_BYTE *)(v82 + 168) = v148;
          *(_QWORD *)&v173[8] = 0;
          *(_QWORD *)&v173[16] = 0;
          if (v149)
          {
            v150 = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v152 = v174;
          v174 = 0uLL;
          v153 = *(std::__shared_weak_count **)(v82 + 200);
          *(_OWORD *)(v82 + 192) = v152;
          if (v153)
          {
            v154 = (unint64_t *)&v153->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          v143.columns[0] = v175;
          v175 = 0uLL;
          v156 = *(std::__shared_weak_count **)(v82 + 216);
          *(simd_float3 *)(v82 + 208) = v143.columns[0];
          if (v156)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          v159 = (std::__shared_weak_count *)v175.i64[1];
          if (v175.i64[1])
          {
            v160 = (unint64_t *)(v175.i64[1] + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
          if (*((_QWORD *)&v174 + 1))
          {
            v163 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = *(std::__shared_weak_count **)&v173[16];
          if (*(_QWORD *)&v173[16])
          {
            v166 = (unint64_t *)(*(_QWORD *)&v173[16] + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          if (*(_BYTE *)(v82 + 168))
            sub_223AA9710(*(_QWORD *)(v82 + 24), *(_QWORD *)(v82 + 32), *(unsigned __int8 *)(v82 + 168), (_QWORD *)(v82 + 176), (int32x2_t *)&v176, v143, v144, v145, v146, v147);
        }
      }
    }
  }
  return 0;
}

void sub_223AAA870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, _QWORD *a11)
{
  sub_223AAABE8(a11);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223AAA88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_223167354((uint64_t)&a19);
  sub_2231B888C((void **)(v19 - 136));
  sub_223AAABE8(*(_QWORD **)(v19 - 104));
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223AAA8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    v5 = 0;
    v6 = a1 + 176;
    while (1)
    {
      if (v5 >= *(unsigned __int8 *)(a1 + 168)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = (uint64_t **)(v6 + 16 * v5);
      v9 = *v8;
      v10 = (std::__shared_weak_count *)v8[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = *(uint64_t ***)(a2 + 8);
      if (!v13)
      {
LABEL_23:
        v21 = 0;
        if (v10)
          goto LABEL_26;
        goto LABEL_3;
      }
      v14 = (uint64_t *)*v9;
      v15 = *((unsigned __int16 *)v9 + 4);
      while (1)
      {
        v16 = v13[4];
        v17 = *((unsigned __int16 *)v13 + 20);
        v18 = v15 < v17;
        if (v14 != v16)
          v18 = (uint64_t)v14 < (uint64_t)v16;
        if (v18)
          goto LABEL_14;
        v19 = v17 < v15;
        v20 = v14 == v16 ? v19 : (uint64_t)v16 < (uint64_t)v14;
        if (v20 != 1)
          break;
        ++v13;
LABEL_14:
        v13 = (uint64_t **)*v13;
        if (!v13)
          goto LABEL_23;
      }
      v21 = 1;
      if (v10)
      {
LABEL_26:
        v22 = (unint64_t *)&v10->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
LABEL_3:
      if (++v5 == v2)
        v7 = 1;
      else
        v7 = v21;
      if (v7 == 1)
        return v21;
    }
  }
  return 0;
}

void sub_223AAAA60(uint64_t a1, uint64_t a2, simd_float3x3 a3, __n128 a4, float32x4_t a5, double a6, float32x2_t a7)
{
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  simd_float3 v22;
  float32x2_t *v23;
  std::__shared_weak_count *v24;
  float32x2_t *v25;
  std::__shared_weak_count *v26;

  v22.i64[0] = a3.columns[0].i64[0];
  if (*(_BYTE *)(a2 + 168))
  {
    v8 = a2 + 176;
    v9 = a2 + 176 + 16 * *(unsigned __int8 *)(a2 + 168);
    do
    {
      v10 = *(float32x2_t **)v8;
      v11 = *(std::__shared_weak_count **)(v8 + 8);
      v25 = *(float32x2_t **)v8;
      v26 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v24 = v11;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      else
      {
        v24 = 0;
      }
      v23 = v10;
      sub_223AA94CC((_BYTE *)(a1 + 168), &v23, *(float32x2_t *)a3.columns[0].f32, *(double *)a3.columns[1].i64, *(float32x2_t *)a3.columns[2].f32);
      v15 = v24;
      if (!v24)
        goto LABEL_15;
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v18 = v26;
        if (v26)
        {
LABEL_16:
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      else
      {
LABEL_15:
        v18 = v26;
        if (v26)
          goto LABEL_16;
      }
      v8 += 16;
    }
    while (v8 != v9);
  }
  v21 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    *(float32x2_t *)a3.columns[0].f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 4));
    a3.columns[0].f32[2] = (float)*(int *)(a1 + 12);
    a3.columns[1] = v22;
    a3.columns[0] = (simd_float3)vmulq_n_f32((float32x4_t)a3.columns[0], v22.f32[0]);
    LODWORD(v26) = a3.columns[0].i32[2];
    v25 = (float32x2_t *)a3.columns[0].i64[0];
    sub_223AA9710(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v21, (_QWORD *)(a1 + 176), (int32x2_t *)&v25, a3, a4, a5, a6, a7);
  }
}

void sub_223AAABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223AAABE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_223AAABE8(*a1);
    sub_223AAABE8(a1[1]);
    v2 = (std::__shared_weak_count *)a1[5];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

uint64_t sub_223AAAC68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(_WORD *)(a2 + 18) * *(_WORD *)(a2 + 16))
  {
    v3 = (unsigned __int16)(*(_WORD *)(a2 + 18) * *(_WORD *)(a2 + 16));
    v4 = (char *)operator new(448 * v3);
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = &v4[224 * (2 * v3)];
    v5 = (char *)operator new(24 * v3);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a1 + 96) = &v5[12 * (2 * v3)];
    v6 = (char *)operator new(24 * v3);
    *(_QWORD *)(a1 + 104) = v6;
    *(_QWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 120) = &v6[12 * (2 * v3)];
  }
  return a1;
}

void sub_223AAAD68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;

  v8 = v5;
  *(_QWORD *)(v3 + 88) = v8;
  operator delete(v8);
  sub_223AAADAC(v4);
  sub_223198030(v2, *v7);
  sub_223198030(v1, *v6);
  _Unwind_Resume(a1);
}

void **sub_223AAADAC(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223A92044(v3 - 28);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223AAAE04(uint64_t a1, _DWORD *a2, int32x2_t *a3, uint64_t a4, unsigned __int8 a5, int8x16_t a6, float32x2_t a7, __n128 a8, float32x2_t a9, double a10, __n128 a11)
{
  int v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t **v18;
  uint64_t **v19;
  char **v20;
  unsigned int v21;
  BOOL v22;
  char **v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int16 *v29;
  int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  _BOOL4 v42;
  float32x2_t **v43;
  std::__shared_weak_count *v44;
  float32x2_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float32x2_t **v53;
  float32x2_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  float v65;
  _BOOL4 v66;
  float32x2_t **v67;
  std::__shared_weak_count *v68;
  float32x2_t *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  float32x2_t *v73;
  int v74;
  int v75;
  unsigned __int16 v76;
  uint64_t **i;
  uint64_t **v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  int32x2_t **v88;
  int32x2_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int32x2_t *v94;
  char *v95;
  int32x2_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  float32x2_t *v102;
  uint64_t v103;
  unsigned int v104;
  float32x2_t *v105;
  int32x2_t *v106;
  char *v107;
  int32x2_t v108;
  __int32 v109;
  int32x2_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  int32x2_t *v115;
  int32x2_t v116;
  __int32 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char *v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  int v154;
  uint64_t v155;
  uint64_t v156;
  __int16 *v157;
  __int16 v158;
  _DWORD *v160;
  int v161;
  __int16 v162;
  __n128 v163;
  __n128 v164;
  int v165;
  __n128 v166;
  __n128 v167;
  int8x16_t v168;
  float v169;
  uint64_t v170;
  __int128 v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _QWORD v177[6];
  __int16 v178;
  __int128 v179;
  __int128 v180;
  _BYTE v181[87];

  v15 = *(unsigned __int16 *)(*(_QWORD *)a1 + 16);
  v162 = *(_WORD *)(*(_QWORD *)a1 + 18);
  v16 = *a2
      - **(_DWORD **)a1
      + (a2[1] - *(_DWORD *)(*(_QWORD *)a1 + 4) + (a2[2] - *(_DWORD *)(*(_QWORD *)a1 + 8)) * v15) * v15;
  v161 = *(_DWORD *)(*(_QWORD *)a1 + 24);
  v18 = (uint64_t **)(a1 + 40);
  v17 = *(unsigned __int16 **)(a1 + 40);
  if (v17)
  {
    v19 = (uint64_t **)(a1 + 40);
    v20 = *(char ***)(a1 + 40);
    do
    {
      v21 = *((unsigned __int16 *)v20 + 13);
      v22 = v21 >= (unsigned __int16)v16;
      if (v21 >= (unsigned __int16)v16)
        v23 = v20;
      else
        v23 = v20 + 1;
      if (v22)
        v19 = (uint64_t **)v20;
      v20 = (char **)*v23;
    }
    while (*v23);
    if (v19 == v18 || *((unsigned __int16 *)v19 + 13) > (unsigned __int16)v16)
    {
      while (1)
      {
        while (1)
        {
          v19 = (uint64_t **)v17;
          v24 = v17[13];
          if (v24 <= (unsigned __int16)v16)
            break;
          v17 = (unsigned __int16 *)*v19;
          v18 = v19;
          if (!*v19)
            goto LABEL_19;
        }
        if (v24 >= (unsigned __int16)v16)
          break;
        v17 = (unsigned __int16 *)v19[1];
        if (!v17)
        {
          v18 = v19 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    v19 = (uint64_t **)(a1 + 40);
LABEL_19:
    v25 = (char *)v19;
    v19 = (uint64_t **)operator new(0x20uLL);
    *((_WORD *)v19 + 13) = v16;
    *((_DWORD *)v19 + 7) = -1;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t *)v25;
    *v18 = (uint64_t *)v19;
    v26 = **(_QWORD **)(a1 + 32);
    v27 = (uint64_t *)v19;
    if (v26)
    {
      *(_QWORD *)(a1 + 32) = v26;
      v27 = *v18;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 40), v27);
    ++*(_QWORD *)(a1 + 48);
  }
  v29 = (__int16 *)v19 + 14;
  v28 = *((unsigned __int16 *)v19 + 14);
  if (v28 == 0xFFFF)
  {
    v37 = -1;
    goto LABEL_78;
  }
  v158 = v15;
  v30 = a5;
  v31 = *(_QWORD *)(a1 + 56);
  v32 = (int *)(v31 + 224 * *((unsigned __int16 *)v19 + 14));
  v33 = *((unsigned __int16 *)v19 + 15);
  if (v33 != 0xFFFF)
  {
    if (v31)
    {
      v34 = v31 + 224 * *((unsigned __int16 *)v19 + 15);
      if (v30)
      {
        v35 = sub_223AAA8D4(v31 + 224 * *((unsigned __int16 *)v19 + 14), a4);
        v36 = sub_223AAA8D4(v31 + 224 * v33, a4);
        if (v35)
        {
          if (v36)
          {
            v34 = v31 + 224 * v28;
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 140, (uint64_t)"!vt1->IsOnAnyPlanes(*visible_planes)", 36, (uint64_t)"vt0 and vt1 should have been merged", 35, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_175;
            }
            return v34;
          }
          return (uint64_t)v32;
        }
        if ((v36 & 1) != 0)
          return v34;
      }
      v156 = v31 + 224 * v28;
      v49 = *(unsigned __int8 *)(v156 + 168);
      if (*(_BYTE *)(v156 + 168))
      {
        v50 = 0;
        v51 = v31 + 224 * v28 + 176;
        a6.i32[0] = -1.0;
        v168 = a6;
        do
        {
          if (v50 >= *(unsigned __int8 *)(v156 + 168)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_175;
          }
          v53 = (float32x2_t **)(v51 + 16 * v50);
          v54 = *v53;
          v55 = (std::__shared_weak_count *)v53[1];
          if (v55)
          {
            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(p_shared_owners);
            while (__stxr(v57 + 1, p_shared_owners));
            do
              v58 = __ldaxr(p_shared_owners);
            while (__stlxr(v58 - 1, p_shared_owners));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          a9.i32[0] = v54[3].i32[0];
          a7.i32[0] = a3[1].i32[0];
          *(int32x2_t *)a6.i8 = *a3;
          a11.n128_u64[0] = (unint64_t)vdup_lane_s32(*a3, 1);
          v52 = vmla_f32(vmla_lane_f32(vmul_f32(v54[2], (float32x2_t)*a3), (float32x2_t)a11.n128_u64[0], v54[2], 1), a7, a9).f32[0];
          a8 = (__n128)v168;
          if (*(float *)v168.i32 < v52)
            a8.n128_f32[0] = v52;
          v168 = (int8x16_t)a8;
          ++v50;
        }
        while (v50 != v49);
        a6.i32[2] = a3[1].i32[0];
        v59 = v31 + 224 * v33;
        v62 = *(unsigned __int8 *)(v59 + 168);
        v61 = (unsigned __int8 *)(v59 + 168);
        v60 = v62;
        if (v62)
          goto LABEL_61;
      }
      else
      {
        v102 = *(float32x2_t **)(v31 + 224 * v28 + 32);
        a7 = *v102;
        a8.n128_u32[0] = v102[1].u32[0];
        a9.i32[0] = a3[1].i32[0];
        *(int32x2_t *)a6.i8 = *a3;
        a6.i32[2] = a9.i32[0];
        a11.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*v102, (float32x2_t)*a3), (float32x2_t)vdup_lane_s32(*a3, 1), *v102, 1), a9, (float32x2_t)a8.n128_u64[0]);
        v168.i32[0] = a11.n128_u32[0];
        v103 = v31 + 224 * v33;
        v104 = *(unsigned __int8 *)(v103 + 168);
        v61 = (unsigned __int8 *)(v103 + 168);
        v60 = v104;
        if (v104)
        {
LABEL_61:
          v63 = 0;
          v64 = v31 + 224 * v33 + 176;
          a11.n128_u32[0] = -1.0;
          while (1)
          {
            if (v63 >= *v61)
            {
              v163 = a11;
              v66 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C);
              a11 = v163;
              if (v66)
                goto LABEL_175;
            }
            v67 = (float32x2_t **)(v64 + 16 * v63);
            v69 = *v67;
            v68 = (std::__shared_weak_count *)v67[1];
            if (v68)
            {
              v70 = (unint64_t *)&v68->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
              do
                v72 = __ldaxr(v70);
              while (__stlxr(v72 - 1, v70));
              if (!v72)
              {
                v164 = a11;
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
                a11 = v164;
              }
            }
            a7.i32[0] = v69[3].i32[0];
            a9.i32[0] = a3[1].i32[0];
            v65 = vmla_f32(vmla_lane_f32(vmul_f32(v69[2], (float32x2_t)*a3), (float32x2_t)vdup_lane_s32(*a3, 1), v69[2], 1), a9, a7).f32[0];
            if (a11.n128_f32[0] < v65)
              a11.n128_f32[0] = v65;
            if (++v63 == v60)
              goto LABEL_112;
          }
        }
      }
      v105 = *(float32x2_t **)(v31 + 224 * v33 + 32);
      a8.n128_u32[0] = v105[1].u32[0];
      a11.n128_u32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*v105, *(float32x2_t *)a6.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.i8, 1), *v105, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a6, a6, 8uLL), (float32x2_t)a8.n128_u64[0]).u32[0];
LABEL_112:
      if (*(float *)v168.i32 > a11.n128_f32[0])
        return v156;
      return v34;
    }
    goto LABEL_45;
  }
  if (!v31)
  {
LABEL_45:
    v37 = -1;
    LOWORD(v15) = v158;
    goto LABEL_78;
  }
  v154 = v30;
  v155 = v31 + 224 * *((unsigned __int16 *)v19 + 14);
  v38 = *(unsigned __int8 *)(v155 + 168);
  if (*(_BYTE *)(v155 + 168))
  {
    v39 = 0;
    v40 = v31 + 224 * *((unsigned __int16 *)v19 + 14) + 176;
    a11.n128_u32[0] = -1.0;
    do
    {
      if (v39 >= *(unsigned __int8 *)(v155 + 168))
      {
        v166 = a11;
        v42 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C);
        a11 = v166;
        if (v42)
          goto LABEL_175;
      }
      v43 = (float32x2_t **)(v40 + 16 * v39);
      v45 = *v43;
      v44 = (std::__shared_weak_count *)v43[1];
      if (v44)
      {
        v46 = (unint64_t *)&v44->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          v167 = a11;
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
          a11 = v167;
        }
      }
      a7.i32[0] = v45[3].i32[0];
      a9.i32[0] = a3[1].i32[0];
      v41 = vmla_f32(vmla_lane_f32(vmul_f32(v45[2], (float32x2_t)*a3), (float32x2_t)vdup_lane_s32(*a3, 1), v45[2], 1), a9, a7).f32[0];
      if (a11.n128_f32[0] < v41)
        a11.n128_f32[0] = v41;
      ++v39;
    }
    while (v39 != v38);
  }
  else
  {
    v73 = *(float32x2_t **)(v31 + 224 * *((unsigned __int16 *)v19 + 14) + 32);
    a7.i32[0] = v73[1].i32[0];
    a9.i32[0] = a3[1].i32[0];
    a11.n128_u32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*v73, (float32x2_t)*a3), (float32x2_t)vdup_lane_s32(*a3, 1), *v73, 1), a9, a7).u32[0];
  }
  v29 = (__int16 *)v19 + 14;
  LOWORD(v15) = v158;
  if (v154)
  {
    v169 = a11.n128_f32[0];
    v32 = (int *)v155;
    if ((sub_223AAA8D4(v155, a4) & 1) != 0 || v169 > -0.5)
      return (uint64_t)v32;
  }
  else
  {
    v32 = (int *)v155;
    if (a11.n128_f32[0] > -0.5)
      return (uint64_t)v32;
  }
  v37 = *v32;
LABEL_78:
  v160 = a2;
  v74 = (v161 << 12) + (unsigned __int16)v16;
  if (v37 == v74)
    v75 = (unsigned __int16)(v162 * v15);
  else
    v75 = 0;
  v76 = v75 + v16;
  if (v76 >= 2 * (unsigned __int16)(*(_WORD *)(*(_QWORD *)a1 + 18) * *(_WORD *)(*(_QWORD *)a1 + 16))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 220, (uint64_t)"luid < 2u * BlockSizeCube()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_175;
  }
  v78 = (uint64_t **)(a1 + 16);
  for (i = *(uint64_t ***)(a1 + 16); i; i = (uint64_t **)*i)
  {
    v79 = *((unsigned __int16 *)i + 13);
    if (v79 <= v76)
    {
      if (v79 >= v76)
      {
        if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 221, (uint64_t)"table_.count(luid) == 0", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))break;
LABEL_175:
        abort();
      }
      ++i;
    }
  }
  v80 = v75 + v74;
  v81 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 128) != v81)
  {
    LODWORD(v82) = *(unsigned __int16 *)(v81 - 2);
    *(_QWORD *)(a1 + 136) = v81 - 2;
    v83 = 12 * v82;
    v84 = *(_QWORD *)(a1 + 80) + v83;
    v85 = *(_QWORD *)(a1 + 104) + v83;
    LODWORD(v171) = v80;
    *(_QWORD *)((char *)&v171 + 4) = *(_QWORD *)v160;
    HIDWORD(v171) = v160[2];
    LOWORD(v172) = v82;
    v173 = (char *)v84;
    v174 = v85;
    v175 = 0;
    v176 = 1065353216;
    sub_223AAF154(v177, 8uLL);
    memset(&v177[3], 0, 24);
    v178 = 0;
    v179 = 0u;
    v180 = 0u;
    memset(&v181[32], 0, 48);
    memset(v181, 0, 25);
    sub_223AAC050(*(_QWORD *)(a1 + 56) + 224 * v82, (uint64_t)&v171);
    sub_223A92044(&v171);
    v86 = *v78;
    v87 = (uint64_t **)(a1 + 16);
    if (*v78)
      goto LABEL_161;
    goto LABEL_165;
  }
  v89 = *(int32x2_t **)(a1 + 88);
  v88 = (int32x2_t **)(a1 + 80);
  v90 = *(_QWORD *)(a1 + 96);
  v157 = v29;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v89 - *(_QWORD *)(a1 + 80)) >> 2) >= 0xAAAAAAAAAAAAAAABLL
                                                                            * ((uint64_t)(v90 - *(_QWORD *)(a1 + 80)) >> 2))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 227, (uint64_t)"points_.size() < points_.capacity()", 35, (uint64_t)"Capacity not big enough.", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_175;
    }
    v89 = *(int32x2_t **)(a1 + 88);
    v90 = *(_QWORD *)(a1 + 96);
  }
  v165 = v80;
  v91 = *(_QWORD *)(a1 + 56);
  v92 = *(_QWORD *)(a1 + 64);
  v170 = v91;
  if ((unint64_t)v89 >= v90)
  {
    v96 = *v88;
    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)*v88) >> 2);
    v98 = v97 + 1;
    if (v97 + 1 > 0x1555555555555555)
      sub_22316E078();
    v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (_QWORD)v96) >> 2);
    if (2 * v99 > v98)
      v98 = 2 * v99;
    if (v99 >= 0xAAAAAAAAAAAAAAALL)
      v100 = 0x1555555555555555;
    else
      v100 = v98;
    if (v100)
    {
      if (v100 > 0x1555555555555555)
        goto LABEL_176;
      v101 = (char *)operator new(12 * v100);
    }
    else
    {
      v101 = 0;
    }
    v106 = (int32x2_t *)&v101[12 * v97];
    *v106 = vdup_n_s32(0x7F7FFFFFu);
    v106[1].i32[0] = 2139095039;
    v107 = (char *)&v106[1] + 4;
    if (v89 != v96)
    {
      do
      {
        v108 = *(int32x2_t *)((char *)v89 - 12);
        v89 = (int32x2_t *)((char *)v89 - 12);
        v109 = v89[1].i32[0];
        *(int32x2_t *)((char *)v106 - 12) = v108;
        v106 = (int32x2_t *)((char *)v106 - 12);
        v106[1].i32[0] = v109;
      }
      while (v89 != v96);
      v89 = *v88;
    }
    *(_QWORD *)(a1 + 80) = v106;
    *(_QWORD *)(a1 + 88) = v107;
    *(_QWORD *)(a1 + 96) = &v101[12 * v100];
    if (v89)
      operator delete(v89);
    v91 = v170;
    *(_QWORD *)(a1 + 88) = v107;
    v94 = *(int32x2_t **)(a1 + 112);
    v93 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v94 < v93)
      goto LABEL_98;
LABEL_122:
    v110 = *(int32x2_t **)(a1 + 104);
    v111 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v110) >> 2) + 1;
    if (v111 > 0x1555555555555555)
      sub_22316E078();
    v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - (_QWORD)v110) >> 2);
    if (2 * v112 > v111)
      v111 = 2 * v112;
    if (v112 >= 0xAAAAAAAAAAAAAAALL)
      v113 = 0x1555555555555555;
    else
      v113 = v111;
    if (v113)
    {
      if (v113 > 0x1555555555555555)
        goto LABEL_176;
      v114 = (char *)operator new(12 * v113);
    }
    else
    {
      v114 = 0;
    }
    v115 = (int32x2_t *)&v114[4 * (((char *)v94 - (char *)v110) >> 2)];
    *v115 = vdup_n_s32(0x7F7FFFFFu);
    v115[1].i32[0] = 2139095039;
    v95 = (char *)&v115[1] + 4;
    if (v94 != v110)
    {
      do
      {
        v116 = *(int32x2_t *)((char *)v94 - 12);
        v94 = (int32x2_t *)((char *)v94 - 12);
        v117 = v94[1].i32[0];
        *(int32x2_t *)((char *)v115 - 12) = v116;
        v115 = (int32x2_t *)((char *)v115 - 12);
        v115[1].i32[0] = v117;
      }
      while (v94 != v110);
      v94 = *(int32x2_t **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v115;
    *(_QWORD *)(a1 + 112) = v95;
    *(_QWORD *)(a1 + 120) = &v114[12 * v113];
    if (v94)
      operator delete(v94);
    v91 = v170;
    goto LABEL_138;
  }
  *v89 = vdup_n_s32(0x7F7FFFFFu);
  v89[1].i32[0] = 2139095039;
  *(_QWORD *)(a1 + 88) = (char *)v89 + 12;
  v94 = *(int32x2_t **)(a1 + 112);
  v93 = *(_QWORD *)(a1 + 120);
  if ((unint64_t)v94 >= v93)
    goto LABEL_122;
LABEL_98:
  *v94 = vdup_n_s32(0x7F7FFFFFu);
  v94[1].i32[0] = 2139095039;
  v95 = (char *)&v94[1] + 4;
LABEL_138:
  v82 = 0x6DB6DB6DB6DB6DB7 * ((v92 - v91) >> 5);
  v118 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = v95;
  v119 = 12 * (unsigned __int16)(28087 * ((v92 - v91) >> 5));
  v120 = *(_QWORD *)(a1 + 80) + v119;
  v121 = *(_QWORD *)(a1 + 104) + v119;
  v122 = *(_QWORD *)(a1 + 64);
  if (v122 < v118)
  {
    *(_DWORD *)v122 = v165;
    v123 = *(_QWORD *)v160;
    *(_DWORD *)(v122 + 12) = v160[2];
    *(_QWORD *)(v122 + 4) = v123;
    *(_WORD *)(v122 + 16) = v82;
    *(_QWORD *)(v122 + 24) = v120;
    *(_QWORD *)(v122 + 32) = v121;
    *(_QWORD *)(v122 + 40) = 0;
    *(_DWORD *)(v122 + 48) = 1065353216;
    sub_223AAF154((_QWORD *)(v122 + 56), 8uLL);
    *(_QWORD *)(v122 + 80) = 0;
    *(_QWORD *)(v122 + 88) = 0;
    *(_QWORD *)(v122 + 96) = 0;
    *(_WORD *)(v122 + 104) = 0;
    *(_OWORD *)(v122 + 176) = 0u;
    *(_OWORD *)(v122 + 192) = 0u;
    *(_OWORD *)(v122 + 208) = 0u;
    *(_OWORD *)(v122 + 112) = 0u;
    *(_OWORD *)(v122 + 128) = 0u;
    *(_OWORD *)(v122 + 144) = 0u;
    *(_OWORD *)(v122 + 153) = 0u;
    *(_QWORD *)(a1 + 64) = v122 + 224;
    *(_QWORD *)(a1 + 64) = v122 + 224;
    v29 = v157;
    v86 = *v78;
    v87 = (uint64_t **)(a1 + 16);
    if (*v78)
      goto LABEL_161;
    goto LABEL_165;
  }
  v124 = *(_QWORD *)(a1 + 56);
  v125 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v122 - v124) >> 5);
  if ((unint64_t)(v125 + 1) > 0x124924924924924)
    sub_22316E078();
  v126 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v118 - v124) >> 5);
  v127 = 2 * v126;
  if (2 * v126 <= v125 + 1)
    v127 = v125 + 1;
  if (v126 >= 0x92492492492492)
    v128 = 0x124924924924924;
  else
    v128 = v127;
  v174 = a1 + 72;
  if (v128)
  {
    if (v128 <= 0x124924924924924)
    {
      v129 = (char *)operator new(224 * v128);
      goto LABEL_151;
    }
LABEL_176:
    sub_223174E94();
  }
  v129 = 0;
LABEL_151:
  v130 = &v129[224 * v125];
  *(_QWORD *)&v171 = v129;
  *((_QWORD *)&v171 + 1) = v130;
  v172 = v130;
  v173 = &v129[224 * v128];
  *(_DWORD *)v130 = v165;
  *(_QWORD *)(v130 + 4) = *(_QWORD *)v160;
  *((_DWORD *)v130 + 3) = v160[2];
  *((_WORD *)v130 + 8) = v82;
  *((_QWORD *)v130 + 3) = v120;
  *((_QWORD *)v130 + 4) = v121;
  *((_QWORD *)v130 + 5) = 0;
  *((_DWORD *)v130 + 12) = 1065353216;
  sub_223AAF154((_QWORD *)v130 + 7, 8uLL);
  v131 = &v129[224 * v125];
  *((_QWORD *)v131 + 10) = 0;
  *((_QWORD *)v131 + 11) = 0;
  *((_QWORD *)v131 + 12) = 0;
  *((_WORD *)v131 + 52) = 0;
  *((_OWORD *)v131 + 11) = 0u;
  *((_OWORD *)v131 + 12) = 0u;
  *((_OWORD *)v131 + 13) = 0u;
  *((_OWORD *)v131 + 7) = 0u;
  *((_OWORD *)v131 + 8) = 0u;
  *((_OWORD *)v131 + 9) = 0u;
  *(_OWORD *)(v131 + 153) = 0u;
  v132 = *((_QWORD *)&v171 + 1);
  v133 = v172 + 224;
  v134 = *(char **)(a1 + 56);
  v135 = *(char **)(a1 + 64);
  v29 = v157;
  if (v135 == v134)
  {
    *(_QWORD *)(a1 + 56) = *((_QWORD *)&v171 + 1);
    *(_QWORD *)(a1 + 64) = v133;
    *(_QWORD *)(a1 + 72) = v173;
    if (v135)
LABEL_157:
      operator delete(v135);
  }
  else
  {
    v136 = 0;
    do
    {
      v137 = &v135[v136];
      v138 = v132 + v136;
      *(_DWORD *)(v138 - 224) = *(_DWORD *)&v135[v136 - 224];
      v139 = *(_QWORD *)&v135[v136 - 220];
      *(_DWORD *)(v138 - 212) = *(_DWORD *)&v135[v136 - 212];
      *(_QWORD *)(v138 - 220) = v139;
      v140 = *(_OWORD *)&v135[v136 - 208];
      v141 = *(_OWORD *)&v135[v136 - 192];
      *(_DWORD *)(v138 - 176) = *(_DWORD *)&v135[v136 - 176];
      *(_OWORD *)(v138 - 208) = v140;
      *(_OWORD *)(v138 - 192) = v141;
      *(_QWORD *)(v138 - 160) = 0;
      *(_QWORD *)(v138 - 152) = 0;
      *(_QWORD *)(v138 - 168) = 0;
      *(_OWORD *)(v138 - 168) = *(_OWORD *)&v135[v136 - 168];
      *(_QWORD *)(v138 - 152) = *(_QWORD *)&v135[v136 - 152];
      *((_QWORD *)v137 - 21) = 0;
      *((_QWORD *)v137 - 20) = 0;
      v142 = *(_QWORD *)&v135[v136 - 144];
      *((_QWORD *)v137 - 19) = 0;
      *((_QWORD *)v137 - 18) = 0;
      *(_QWORD *)(v138 - 144) = v142;
      v143 = *(_QWORD *)&v135[v136 - 136];
      *((_QWORD *)v137 - 17) = 0;
      *(_QWORD *)(v138 - 136) = v143;
      v144 = *(_QWORD *)&v135[v136 - 128];
      *((_QWORD *)v137 - 16) = 0;
      *(_QWORD *)(v138 - 128) = v144;
      *(_WORD *)(v138 - 120) = *(_WORD *)&v135[v136 - 120];
      v145 = *(_OWORD *)&v135[v136 - 112];
      *(_QWORD *)(v138 - 96) = *(_QWORD *)&v135[v136 - 96];
      *(_OWORD *)(v138 - 112) = v145;
      v146 = *(_OWORD *)&v135[v136 - 88];
      *(_QWORD *)(v138 - 72) = *(_QWORD *)&v135[v136 - 72];
      *(_OWORD *)(v138 - 88) = v146;
      *(_QWORD *)(v138 - 64) = *(_QWORD *)&v135[v136 - 64];
      *(_BYTE *)(v138 - 56) = v135[v136 - 56];
      *(_OWORD *)(v138 - 48) = *(_OWORD *)&v135[v136 - 48];
      *((_QWORD *)v137 - 6) = 0;
      *((_QWORD *)v137 - 5) = 0;
      *(_OWORD *)(v138 - 32) = *(_OWORD *)&v135[v136 - 32];
      v147 = *(_OWORD *)&v135[v136 - 16];
      *((_QWORD *)v137 - 4) = 0;
      *((_QWORD *)v137 - 3) = 0;
      *(_OWORD *)(v138 - 16) = v147;
      *((_QWORD *)v137 - 2) = 0;
      *((_QWORD *)v137 - 1) = 0;
      v136 -= 224;
    }
    while (&v135[v136] != v134);
    v135 = *(char **)(a1 + 56);
    v148 = *(char **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v132 + v136;
    *(_QWORD *)(a1 + 64) = v133;
    for (*(_QWORD *)(a1 + 72) = v173; v148 != v135; v148 = (char *)sub_223A92044((_QWORD *)v148 - 28))
      ;
    if (v135)
      goto LABEL_157;
  }
  *(_QWORD *)(a1 + 64) = v133;
  v86 = *v78;
  v87 = (uint64_t **)(a1 + 16);
  if (*v78)
  {
    while (1)
    {
LABEL_161:
      while (1)
      {
        v87 = (uint64_t **)v86;
        v149 = *((unsigned __int16 *)v86 + 13);
        if (v149 <= v76)
          break;
        v86 = *v87;
        v78 = v87;
        if (!*v87)
          goto LABEL_165;
      }
      if (v149 >= v76)
        goto LABEL_168;
      v86 = v87[1];
      if (!v86)
      {
        v78 = v87 + 1;
        break;
      }
    }
  }
LABEL_165:
  v150 = (uint64_t *)v87;
  v87 = (uint64_t **)operator new(0x20uLL);
  *((_WORD *)v87 + 13) = v76;
  *((_WORD *)v87 + 14) = 0;
  *v87 = 0;
  v87[1] = 0;
  v87[2] = v150;
  *v78 = (uint64_t *)v87;
  v151 = **(_QWORD **)(a1 + 8);
  v152 = (uint64_t *)v87;
  if (v151)
  {
    *(_QWORD *)(a1 + 8) = v151;
    v152 = *v78;
  }
  sub_2231A9A8C(*(uint64_t **)(a1 + 16), v152);
  ++*(_QWORD *)(a1 + 24);
LABEL_168:
  *((_WORD *)v87 + 14) = v82;
  if (*v29 != -1)
  {
    v29 = (__int16 *)v19 + 15;
    if (*((__int16 *)v19 + 15) != -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 248, (uint64_t)"vertex_indices[1] == kInvalidVecIndex", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_175;
    }
  }
  *v29 = v82;
  return *(_QWORD *)(a1 + 56) + 224 * (unsigned __int16)v82;
}

void sub_223AABC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223AAC684((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AABCA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_223AABCAC(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _WORD *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  __int16 v43;
  __int128 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v50[6];
  __int16 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[95];

  v4 = a1[2];
  if (!v4)
    goto LABEL_60;
  v5 = a1 + 2;
  do
  {
    v6 = *(unsigned __int16 *)(v4 + 26);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = (_QWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 2 || *((unsigned __int16 *)v5 + 13) > a2)
  {
LABEL_60:
    v5 = a1 + 2;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 188, (uint64_t)"iter != table_.end()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_55;
    }
  }
  v9 = (uint64_t *)a1[5];
  if (!v9)
LABEL_19:
    sub_223198218("map::at:  key not found");
  v10 = *((unsigned __int16 *)v5 + 14);
  v11 = a1[7] + 224 * v10;
  v12 = a2 % (unsigned __int16)(*(_WORD *)(*a1 + 18) * *(_WORD *)(*a1 + 16));
  while (1)
  {
    while (1)
    {
      v13 = *((unsigned __int16 *)v9 + 13);
      if (v13 <= (unsigned __int16)v12)
        break;
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_19;
    }
    if (v13 >= (unsigned __int16)v12)
      break;
    v9 = (uint64_t *)v9[1];
    if (!v9)
      goto LABEL_19;
  }
  v14 = *((unsigned __int16 *)v9 + 15);
  if (*((unsigned __int16 *)v9 + 14) != (_DWORD)v10)
  {
    if (v14 == (_DWORD)v10
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCell.cpp", 34, (uint64_t)"vertex_indices[1] == idx_vt", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_24;
    }
LABEL_55:
    abort();
  }
  *((_WORD *)v9 + 14) = v14;
LABEL_24:
  *((_WORD *)v9 + 15) = -1;
  v15 = (_QWORD *)v5[1];
  if (v15)
  {
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    v17 = v5;
    do
    {
      v16 = (_QWORD *)v17[2];
      v18 = *v16 == (_QWORD)v17;
      v17 = v16;
    }
    while (!v18);
  }
  if ((_QWORD *)a1[1] == v5)
    a1[1] = v16;
  v19 = (uint64_t *)a1[2];
  --a1[3];
  sub_2231AFE60(v19, v5);
  operator delete(v5);
  v20 = a1[10] + 12 * v10;
  *(_QWORD *)v20 = 0;
  *(_DWORD *)(v20 + 8) = 0;
  v21 = a1[13] + 12 * v10;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(v21 + 8) = 0;
  v44 = xmmword_22465F330;
  v45 = v10;
  v46 = v20;
  v47 = v21;
  v48 = 0;
  v49 = 1065353216;
  sub_223AAF154(v50, 8uLL);
  memset(&v50[3], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  memset(&v54[32], 0, 48);
  memset(v54, 0, 25);
  sub_223AAC050(v11, (uint64_t)&v44);
  sub_223A92044(&v44);
  v23 = (char *)a1[17];
  v22 = a1[18];
  if ((unint64_t)v23 < v22)
  {
    *(_WORD *)v23 = v10;
    v24 = (uint64_t)(v23 + 2);
    goto LABEL_54;
  }
  v25 = (char *)a1[16];
  v26 = v23 - v25;
  if (v23 - v25 <= -3)
    sub_223257BE4();
  v27 = v26 >> 1;
  v28 = v22 - (_QWORD)v25;
  if (v28 <= (v26 >> 1) + 1)
    v29 = v27 + 1;
  else
    v29 = v28;
  if (v28 >= 0x7FFFFFFFFFFFFFFELL)
    v30 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v30)
  {
    if (v30 < 0)
      sub_223174E94();
    v31 = operator new(2 * v30);
    v32 = &v31[2 * v27];
    v33 = &v31[2 * v30];
    *v32 = v10;
    v24 = (uint64_t)(v32 + 1);
    v34 = v23 - v25;
    if (v23 == v25)
      goto LABEL_52;
    goto LABEL_46;
  }
  v31 = 0;
  v32 = (_WORD *)(2 * v27);
  v33 = 0;
  *(_WORD *)(2 * v27) = v10;
  v24 = 2 * v27 + 2;
  v34 = v23 - v25;
  if (v23 != v25)
  {
LABEL_46:
    v35 = v34 - 2;
    if (v35 < 0x1E)
      goto LABEL_61;
    if (v23 - v31 - (v26 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_61;
    v36 = (v35 >> 1) + 1;
    v37 = 2 * (v36 & 0xFFFFFFFFFFFFFFF0);
    v38 = &v23[-v37];
    v32 = (_WORD *)((char *)v32 - v37);
    v39 = &v31[2 * v27 - 16];
    v40 = v23 - 16;
    v41 = v36 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v42 = *(_OWORD *)v40;
      *(v39 - 1) = *((_OWORD *)v40 - 1);
      *v39 = v42;
      v39 -= 2;
      v40 -= 32;
      v41 -= 16;
    }
    while (v41);
    v23 = v38;
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_61:
      do
      {
        v43 = *((_WORD *)v23 - 1);
        v23 -= 2;
        *--v32 = v43;
      }
      while (v23 != v25);
    }
  }
LABEL_52:
  a1[16] = v32;
  a1[17] = v24;
  a1[18] = v33;
  if (v25)
    operator delete(v25);
LABEL_54:
  a1[17] = v24;
}

uint64_t sub_223AAC050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  v7 = a1 + 56;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = (_QWORD *)(a2 + 56);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(void **)(a1 + 56);
    if (v10 != v8)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 32);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 64;
      }
      while (v10 != v8);
      v11 = *(void **)v7;
    }
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v11);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v15;
  v16 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v16;
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v17;
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v18;
  v19 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v20 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v21 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v20;
  if (!v21)
    goto LABEL_16;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v28 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    v25 = *(std::__shared_weak_count **)(a1 + 200);
    *(_OWORD *)(a1 + 192) = v28;
    if (!v25)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    v24 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    v25 = *(std::__shared_weak_count **)(a1 + 200);
    *(_OWORD *)(a1 + 192) = v24;
    if (!v25)
      goto LABEL_22;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_22:
  v29 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v30 = *(std::__shared_weak_count **)(a1 + 216);
  *(_OWORD *)(a1 + 208) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return a1;
}

void sub_223AAC288(_QWORD *a1, uint64_t a2, simd_float3x3 a3, __n128 a4, float32x4_t a5, double a6, float32x4_t a7, float32x4_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  __int32 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int32x2_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  int32x2_t *v52;
  uint64_t v53;
  _QWORD *v54;
  int v57;
  _DWORD *v58;
  int v59;

  v8 = (_QWORD *)a1[4];
  v9 = a1 + 5;
  if (v8 != a1 + 5)
  {
    v10 = a3.columns[0].i32[0];
    v11 = a2;
    v12 = a1;
    v53 = a2 + 1936;
    v54 = a1 + 5;
    do
    {
      v13 = *((unsigned __int16 *)v8 + 14);
      if (v13 == 0xFFFF)
        goto LABEL_17;
      v14 = v12[7];
      v15 = (_DWORD *)(v14 + 224 * *((unsigned __int16 *)v8 + 14));
      a3.columns[0].i32[0] = v10;
      v59 = sub_223AA9D58((uint64_t)v15, v11, *(double *)a3.columns[0].i64, *(double *)a3.columns[1].i64, *(double *)a3.columns[2].i64, a4.n128_f64[0], *(double *)a5.i64, a6, a7, a8);
      v16 = *((unsigned __int16 *)v8 + 15);
      if (v16 != 0xFFFF)
      {
        v17 = v12[7];
        v58 = (_DWORD *)(v17 + 224 * *((unsigned __int16 *)v8 + 15));
        a3.columns[0].i32[0] = v10;
        v18 = sub_223AA9D58((uint64_t)v58, v11, *(double *)a3.columns[0].i64, *(double *)a3.columns[1].i64, *(double *)a3.columns[2].i64, a4.n128_f64[0], *(double *)a5.i64, a6, a7, a8);
        v19 = v18;
        v20 = v59;
        if (!v17)
          v20 = 1;
        if ((v20 & 1) == 0 && (v18 & 1) == 0)
        {
          v57 = v18;
          v21 = v14 + 224 * v13;
          v24 = *(unsigned __int8 *)(v21 + 168);
          v23 = (unsigned __int8 *)(v21 + 168);
          v22 = v24;
          v25 = v17 + 224 * v16;
          v28 = *(unsigned __int8 *)(v25 + 168);
          v27 = (unsigned __int8 *)(v25 + 168);
          v26 = v28;
          if (v22)
          {
            if (!(_DWORD)v26)
            {
              v43 = 0;
              v44 = *(int32x2_t **)(v17 + 224 * v16 + 32);
              v45 = v14 + 224 * v13 + 176;
              v36 = -1.0;
              while (v43 < *v23
                   || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C))
              {
                v46 = (uint64_t *)(v45 + 16 * v43);
                v47 = *v46;
                v48 = (std::__shared_weak_count *)v46[1];
                if (v48)
                {
                  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldxr(p_shared_owners);
                  while (__stxr(v50 + 1, p_shared_owners));
                  do
                    v51 = __ldaxr(p_shared_owners);
                  while (__stlxr(v51 - 1, p_shared_owners));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                a3.columns[0].i64[0] = *(_QWORD *)(v47 + 16);
                a3.columns[1].i32[0] = *(_DWORD *)(v47 + 24);
                a4.n128_u32[0] = v44[1].u32[0];
                *(int32x2_t *)a3.columns[2].f32 = vdup_lane_s32(*v44, 1);
                *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.columns[0].f32, (float32x2_t)*v44), *(float32x2_t *)a3.columns[2].f32, *(float32x2_t *)a3.columns[0].f32, 1), (float32x2_t)a4.n128_u64[0], *(float32x2_t *)a3.columns[1].f32);
                if (v36 < a5.f32[0])
                  v36 = a5.f32[0];
                if (++v43 == v22)
                  goto LABEL_48;
              }
LABEL_55:
              abort();
            }
            v12 = a1;
            v11 = a2;
            v9 = v54;
            if ((sub_223AAA8D4((uint64_t)v15, v53) & 1) == 0)
              goto LABEL_15;
            v29 = sub_223AAA8D4((uint64_t)v58, v53);
            v19 = v57;
            if (v29)
              goto LABEL_51;
          }
          else
          {
            v33 = *(int32x2_t **)(v14 + 224 * v13 + 32);
            if ((_DWORD)v26)
            {
              v34 = 0;
              v35 = v17 + 224 * v16 + 176;
              v36 = -1.0;
              do
              {
                if (v34 >= *v27
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_55;
                }
                v37 = (uint64_t *)(v35 + 16 * v34);
                v38 = *v37;
                v39 = (std::__shared_weak_count *)v37[1];
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldxr(v40);
                  while (__stxr(v41 + 1, v40));
                  do
                    v42 = __ldaxr(v40);
                  while (__stlxr(v42 - 1, v40));
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                a3.columns[0].i64[0] = *(_QWORD *)(v38 + 16);
                a3.columns[1].i32[0] = *(_DWORD *)(v38 + 24);
                a4.n128_u32[0] = v33[1].u32[0];
                *(int32x2_t *)a3.columns[2].f32 = vdup_lane_s32(*v33, 1);
                *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.columns[0].f32, (float32x2_t)*v33), *(float32x2_t *)a3.columns[2].f32, *(float32x2_t *)a3.columns[0].f32, 1), (float32x2_t)a4.n128_u64[0], *(float32x2_t *)a3.columns[1].f32);
                if (v36 < a5.f32[0])
                  v36 = a5.f32[0];
                ++v34;
              }
              while (v34 != v26);
LABEL_48:
              v12 = a1;
              v11 = a2;
              v9 = v54;
              v19 = v57;
              if (v36 > 0.0)
              {
LABEL_51:
                a3.columns[0].i32[0] = v10;
                sub_223AAAA60((uint64_t)v15, (uint64_t)v58, a3, a4, a5, a6, *(float32x2_t *)a7.f32);
LABEL_52:
                sub_223AABCAC(v12, *v58 & 0xFFF);
                if (!v59)
                  goto LABEL_17;
LABEL_16:
                sub_223AABCAC(v12, *v15 & 0xFFF);
                goto LABEL_17;
              }
            }
            else
            {
              v52 = *(int32x2_t **)(v17 + 224 * v16 + 32);
              *(int32x2_t *)a3.columns[0].f32 = *v33;
              a3.columns[1].i32[0] = v33[1].i32[0];
              a3.columns[2].i32[0] = v52[1].i32[0];
              a4.n128_u64[0] = (unint64_t)vdup_lane_s32(*v52, 1);
              *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*v33, (float32x2_t)*v52), (float32x2_t)a4.n128_u64[0], (float32x2_t)*v33, 1), *(float32x2_t *)a3.columns[2].f32, *(float32x2_t *)a3.columns[1].f32);
              v12 = a1;
              v11 = a2;
              v9 = v54;
              v19 = v18;
              if (a5.f32[0] > 0.0)
                goto LABEL_51;
            }
          }
        }
        if (v19)
          goto LABEL_52;
      }
LABEL_15:
      if (v59)
        goto LABEL_16;
LABEL_17:
      v30 = (_QWORD *)v8[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v8[2];
          v32 = *v31 == (_QWORD)v8;
          v8 = v31;
        }
        while (!v32);
      }
      v8 = v31;
    }
    while (v31 != v9);
  }
}

uint64_t sub_223AAC684(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    sub_223A92044((_QWORD *)(i - 224));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223AAC6D4(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void ***v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v53;
  _OWORD v54[157];
  std::__shared_weak_count *v55;

  *(_QWORD *)a1 = &off_24EC5EFF0;
  v6 = *a2;
  v7 = a2[1];
  *(_BYTE *)(a1 + 48) = 0;
  v8 = a1 + 48;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_DWORD *)(a1 + 1912) = 1065353216;
  v9 = (void ***)(a1 + 1920);
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_QWORD *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 1976) = 1065353216;
  LODWORD(v53) = 29091992;
  sub_223524FBC((int *)&v53, (uint64_t)v54);
  v10.n128_f64[0] = sub_223524E3C();
  v11 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (uint64_t *)(a1 + 2024);
  *(_QWORD *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  sub_223227930((uint64_t *)&v53);
  sub_2232279C4(v54);
  v15 = (_DWORD *)(v8 - 40);
  v16 = v54[0];
  v54[0] = 0uLL;
  v17 = *(std::__shared_weak_count **)(a1 + 1928);
  *(_OWORD *)(a1 + 1920) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v54[0] + 1);
  if (!*((_QWORD *)&v54[0] + 1))
    goto LABEL_15;
  v21 = (unint64_t *)(*((_QWORD *)&v54[0] + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (*v15 == 1)
    {
LABEL_16:
      v23 = operator new();
      v24 = v23;
      v25 = *(_QWORD *)(a1 + 1928);
      *(_QWORD *)&v54[0] = *(_QWORD *)(a1 + 1920);
      *((_QWORD *)&v54[0] + 1) = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      sub_223AA2CF0(v23, a2, (uint64_t)v54);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v54[0] + 1);
      if (*((_QWORD *)&v54[0] + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v54[0] + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v24;
      if (!v31)
        goto LABEL_32;
LABEL_31:
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      goto LABEL_32;
    }
  }
  else
  {
LABEL_15:
    if (*v15 == 1)
      goto LABEL_16;
  }
  v32 = *a3;
  if (!*a3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCloudMapper.cpp", 54, (uint64_t)"mesher_impl", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v32 = *a3;
  }
  *a3 = 0;
  v31 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v32;
  if (v31)
    goto LABEL_31;
LABEL_32:
  nullsub_30(v9);
  sub_223226DFC(v54, v9, v33, v34, v35, v36);
  v37 = v54[0];
  v54[0] = 0uLL;
  v38 = *(std::__shared_weak_count **)(a1 + 2016);
  *(_OWORD *)(a1 + 2008) = v37;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v54[0] + 1);
  if (*((_QWORD *)&v54[0] + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v54[0] + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (_QWORD *)operator new();
  *v44 = 0;
  v44[1] = 0;
  v44[2] = 0;
  v44[3] = 0x200000001;
  v44[4] = 0x412000003C23D70ALL;
  sub_2232291A8(v44 + 5);
  v44[7] = 0;
  v44[8] = 0;
  v44[9] = 0;
  v44[10] = sub_223CDB7D4;
  v44[11] = 0;
  v44[12] = sub_223CDB800;
  v44[13] = 0;
  v44[14] = sub_223CDB82C;
  v44[15] = 0;
  v44[16] = sub_223CDB858;
  v44[17] = 0;
  v44[18] = sub_223CDB884;
  v44[19] = 0;
  v44[20] = sub_223CDB8B0;
  v50 = *v14;
  *v14 = (uint64_t)v44;
  if (v50)
  {
    v51 = sub_223CDB2E8(v50);
    MEMORY[0x227684CE8](v51, 0x10A0C40E83E74EALL);
  }
  sub_22322797C(&v53, v45, v46, v47, v48, v49);
  return a1;
}

void sub_223AACAE0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a7);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  sub_223AACC64(v11);
  sub_223167354(v12);
  sub_223515074(a7);
  sub_223167354(v10);
  sub_223AACCA8(v9);
  if (*(_BYTE *)(v7 + 1872))
  {
    sub_2232555B8(v8);
    v13 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    if (v13)
    {
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v13 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    if (v13)
      goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_223AACC64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223CDB2E8(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C40E83E74EALL);
  }
  return a1;
}

uint64_t sub_223AACCA8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_223AAE620(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_223AACD04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_24EC5EFF0;
  v2 = *(_QWORD *)(a1 + 2024);
  *(_QWORD *)(a1 + 2024) = 0;
  if (v2)
  {
    v3 = sub_223CDB2E8(v2);
    MEMORY[0x227684CE8](v3, 0x10A0C40E83E74EALL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 2016);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 1992);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = *(std::__shared_weak_count **)(a1 + 1992);
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  v10 = *(_QWORD **)(a1 + 1960);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)(a1 + 1944);
  *(_QWORD *)(a1 + 1944) = 0;
  if (v12)
    operator delete(v12);
  v13 = *(std::__shared_weak_count **)(a1 + 1928);
  if (!v13)
    goto LABEL_21;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = *(_QWORD **)(a1 + 1896);
    if (!v16)
      goto LABEL_23;
  }
  else
  {
LABEL_21:
    v16 = *(_QWORD **)(a1 + 1896);
    if (!v16)
      goto LABEL_23;
  }
  do
  {
    v17 = (_QWORD *)*v16;
    sub_223AAE620(v16 + 2);
    operator delete(v16);
    v16 = v17;
  }
  while (v17);
LABEL_23:
  v18 = *(void **)(a1 + 1880);
  *(_QWORD *)(a1 + 1880) = 0;
  if (v18)
    operator delete(v18);
  if (*(_BYTE *)(a1 + 1872))
    sub_2232555B8(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return a1;
}

void sub_223AACEA4(uint64_t a1)
{
  sub_223AACD04(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AACEC8(uint64_t a1, uint64_t a2)
{
  int32x4_t v4;
  int32x4_t v5;
  float32x4_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (***v18)();
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD v61[2];
  std::__shared_weak_count *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  char **v68[2];
  std::__shared_weak_count *v69;
  _QWORD v70[2];
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  void *__p[2];
  uint64_t v77;
  void *v78;
  uint64_t (***v79)();
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  uint64_t (**v84)();
  _OWORD v85[4];
  uint64_t v86;
  __int16 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t (**v91)();
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v88 = 0u;
  v89 = 0u;
  v90 = 728321584;
  kdebug_trace();
  if (*(_BYTE *)(a1 + 1872))
  {
    sub_223481BB8(a1 + 48, a2);
  }
  else
  {
    sub_223257000(a1 + 48, a2);
    *(_BYTE *)(a1 + 1872) = 1;
  }
  v84 = &off_24EC1FE80;
  sub_2231DC6C8(v85);
  kdebug_trace();
  if (*(_BYTE *)(a1 + 104))
  {
    if ((!*(_DWORD *)(a1 + 80) || !*(_DWORD *)(a1 + 84))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1 + 48, (uint64_t)&v91);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    v83 = *((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = *(_QWORD *)(a1 + 2024);
  if ((_DWORD)v83 != *(_DWORD *)(v10 + 16) || HIDWORD(v83) != *(_DWORD *)(v10 + 20))
  {
    v12 = *(std::__shared_weak_count **)(a1 + 2016);
    v81 = *(_QWORD *)(a1 + 2008);
    v82 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    sub_223CDB450(v10, (unsigned int *)&v83, &v81);
    v15 = v82;
    if (v82)
    {
      v16 = (unint64_t *)&v82->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v4.i32[1] = 1090519040;
  v80 = 0x410000003C23D70ALL;
  v4.i32[0] = *(_DWORD *)(a1 + 20);
  sub_223A978C8((_QWORD *)(a1 + 1880), 0, (__int32 *)&v80, a1 + 1384, a1 + 1288, 0x20u, &v78, v4, v5, v6);
  v18 = (uint64_t (***)())v78;
  v19 = v79;
  v98 = 0uLL;
  v99 = 0;
  v20 = (char *)v79 - (_BYTE *)v78;
  if (v79 == v78)
  {
    v22 = 0uLL;
  }
  else
  {
    if ((unint64_t)v20 >= 0x1C71C71C71C71C71)
      sub_22352449C();
    v21 = v20 >> 3;
    *(_QWORD *)&v98 = operator new(72 * (v20 >> 3));
    *((_QWORD *)&v98 + 1) = v98;
    v99 = v98 + 72 * v21;
    v68[0] = (char **)&v98;
    do
    {
      v91 = *v18;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      LODWORD(v92) = 1065353216;
      DWORD1(v93) = 1065353216;
      DWORD2(v94) = 1065353216;
      HIDWORD(v95) = 1065353216;
      sub_223A9DF08(v68, (uint64_t)&v91);
      ++v18;
    }
    while (v18 != v19);
    v22 = v98;
    v20 = v99;
  }
  *(_OWORD *)__p = v22;
  v77 = v20;
  v23 = *(_QWORD *)(a1 + 2024);
  sub_223CDAB6C(v23);
  sub_223CDCDE8(*(_QWORD *)(v23 + 72), (uint64_t *)__p, (float32x4_t *)(a1 + 1384), (float32x2_t *)(a1 + 1288), 1u, 0, v70);
  v61[0] = &off_24EC1F8C8;
  v24 = v70[1];
  v25 = v71;
  if (v71)
  {
    v26 = (unint64_t *)&v71->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = v74;
    v30 = v72;
    v29 = v73;
    v31 = v75;
    do
      v32 = __ldxr(v26);
    while (__stxr(v32 + 1, v26));
    do
      v33 = __ldxr(v26);
    while (__stxr(v33 + 1, v26));
  }
  else
  {
    v28 = v74;
    v30 = v72;
    v29 = v73;
    v31 = v75;
  }
  v61[1] = v24;
  v62 = v25;
  v63 = v29;
  v64 = 4 * v28;
  v65 = v30;
  v66 = 4;
  v67 = v31;
  if (v25)
  {
    v34 = (unint64_t *)&v25->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  BYTE8(v98) = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 1;
  v104 = 0;
  sub_22432B21C((uint64_t)v61, 3u, (uint64_t)v68);
  v91 = &off_24EC1FE80;
  sub_223AAE704((uint64_t)v68, (uint64_t)&v92);
  v37 = v92;
  v92 = 0uLL;
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v85[0] + 1);
  v85[0] = v37;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v85[1] = v93;
  v85[2] = v94;
  v85[3] = v95;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  v86 = v96;
  v87 = v97;
  if (*((_QWORD *)&v92 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v69;
  if (v69)
  {
    v45 = (unint64_t *)&v69->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v62;
  if (v62)
  {
    v48 = (unint64_t *)&v62->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v71;
  if (v71)
  {
    v51 = (unint64_t *)&v71->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v78)
  {
    v79 = (uint64_t (***)())v78;
    operator delete(v78);
  }
  v53 = *(_QWORD *)(a1 + 40);
  v91 = &off_24EC200A8;
  sub_223AA92B0((uint64_t)&v84, (uint64_t *)&v92);
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v53 + 16))(v53, a2, &v91);
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v85[0] + 1);
  if (*((_QWORD *)&v85[0] + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v85[0] + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return kdebug_trace();
}

void sub_223AAD570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_223167354((uint64_t)&a39);
  sub_223167354(v58);
  sub_2231874DC((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_223AAD658()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointCloudMapper.cpp", 123, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_223AAD694@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t v91;
  int32x4_t v92;
  double v93;
  double v94;
  double v95;
  float32x4_t v96;
  _BOOL4 v97;
  _QWORD *v98;
  _QWORD *v99;
  void *v100;
  void *__p[2];
  __int128 v105;
  int v106;
  uint64_t v107[3];
  uint64_t v108[3];
  _QWORD v109[2];
  char v110;
  __int128 v111;
  __int128 v112;
  int v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  int v117[8];
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  std::string v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v111 = 0u;
  v112 = 0u;
  v113 = 728321648;
  kdebug_trace();
  strcpy((char *)v107, "PCMExtractChunkMeshes");
  HIBYTE(v107[2]) = 21;
  strcpy((char *)v108, "PointCloudMapper");
  HIBYTE(v108[2]) = 16;
  v109[1] = 0;
  v109[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v110 = 1;
  *(_OWORD *)__p = 0u;
  v105 = 0u;
  v106 = 1065353216;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 24))(&v115);
  v5 = *((_QWORD *)&v115 + 1);
  __p[0] = (void *)v115;
  v6 = (_QWORD *)v116;
  v115 = 0uLL;
  v105 = v116;
  v106 = v117[0];
  __p[1] = (void *)v5;
  if (*((_QWORD *)&v116 + 1))
  {
    v7 = *(_QWORD *)(v116 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v7 >= v5)
        v7 %= v5;
    }
    else
    {
      v7 &= v5 - 1;
    }
    *((_QWORD *)__p[0] + v7) = &v105;
    v116 = 0uLL;
  }
  else if ((_QWORD)v116)
  {
    do
    {
      v8 = (_QWORD *)*v6;
      sub_22316F8F4(v6 + 4);
      operator delete(v6);
      v6 = v8;
    }
    while (v8);
  }
  v9 = (void *)v115;
  *(_QWORD *)&v115 = 0;
  if (v9)
    operator delete(v9);
  sub_223227930((uint64_t *)&v114);
  v10 = (uint64_t *)v105;
  if ((_QWORD)v105)
  {
    v11 = (_QWORD *)(a1 + 1896);
    do
    {
      v12 = *((_DWORD *)v10 + 4);
      v13 = *((_DWORD *)v10 + 5);
      v14 = *((_DWORD *)v10 + 6);
      if (v10[4] == v10[5])
      {
        v18 = *(int8x8_t *)(a1 + 1888);
        if (!*(_QWORD *)&v18)
          goto LABEL_15;
        v19 = (83492791 * v13) ^ (19349669 * v12) ^ (37783632 * v14);
        v20 = (uint8x8_t)vcnt_s8(v18);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v21 = (83492791 * v13) ^ (19349669 * v12) ^ (37783632 * v14);
          if (v19 >= *(_QWORD *)&v18)
            v21 = v19 % *(_QWORD *)&v18;
        }
        else
        {
          v21 = (*(_QWORD *)&v18 - 1) & v19;
        }
        v52 = *(_QWORD *)(a1 + 1880);
        v53 = *(_DWORD ***)(v52 + 8 * v21);
        if (!v53)
          goto LABEL_15;
        v54 = *v53;
        if (!*v53)
          goto LABEL_15;
        v55 = *(_QWORD *)&v18 - 1;
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v56 = *((_QWORD *)v54 + 1);
            if (v56 == v19)
            {
              if (!v54[4] && v54[5] == v12 && v54[6] == v13 && v54[7] == v14)
                goto LABEL_96;
            }
            else if ((v56 & v55) != v21)
            {
              goto LABEL_15;
            }
            v54 = *(_DWORD **)v54;
            if (!v54)
              goto LABEL_15;
          }
        }
        while (1)
        {
          v57 = *((_QWORD *)v54 + 1);
          if (v57 == v19)
          {
            if (!v54[4] && v54[5] == v12 && v54[6] == v13 && v54[7] == v14)
            {
LABEL_96:
              if (v20.u32[0] > 1uLL)
              {
                if (v19 >= *(_QWORD *)&v18)
                  v19 %= *(_QWORD *)&v18;
              }
              else
              {
                v19 &= v55;
              }
              v73 = *(_QWORD **)(v52 + 8 * v19);
              do
              {
                v74 = v73;
                v73 = (_QWORD *)*v73;
              }
              while (v73 != (_QWORD *)v54);
              if (v74 == v11)
                goto LABEL_175;
              v75 = v74[1];
              if (v20.u32[0] > 1uLL)
              {
                if (v75 >= *(_QWORD *)&v18)
                  v75 %= *(_QWORD *)&v18;
              }
              else
              {
                v75 &= v55;
              }
              if (v75 != v19)
              {
LABEL_175:
                if (!*(_QWORD *)v54)
                  goto LABEL_176;
                v76 = *(_QWORD *)(*(_QWORD *)v54 + 8);
                if (v20.u32[0] > 1uLL)
                {
                  if (v76 >= *(_QWORD *)&v18)
                    v76 %= *(_QWORD *)&v18;
                }
                else
                {
                  v76 &= v55;
                }
                if (v76 != v19)
LABEL_176:
                  *(_QWORD *)(v52 + 8 * v19) = 0;
              }
              v77 = *(_QWORD *)v54;
              if (*(_QWORD *)v54)
              {
                v78 = *(_QWORD *)(v77 + 8);
                if (v20.u32[0] > 1uLL)
                {
                  if (v78 >= *(_QWORD *)&v18)
                    v78 %= *(_QWORD *)&v18;
                }
                else
                {
                  v78 &= v55;
                }
                if (v78 != v19)
                {
                  *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v78) = v74;
                  v77 = *(_QWORD *)v54;
                }
              }
              *v74 = v77;
              *(_QWORD *)v54 = 0;
              --*(_QWORD *)(a1 + 1904);
              sub_223AAE620((uint64_t *)v54 + 2);
              operator delete(v54);
              goto LABEL_15;
            }
          }
          else
          {
            if (v57 >= *(_QWORD *)&v18)
              v57 %= *(_QWORD *)&v18;
            if (v57 != v21)
              goto LABEL_15;
          }
          v54 = *(_DWORD **)v54;
          if (!v54)
            goto LABEL_15;
        }
      }
      sub_223CDB1E8((uint64_t)&v115, (uint64_t)(v10 + 4), (void ***)(a1 + 1920));
      v15 = (83492791 * v13) ^ (19349669 * v12) ^ (37783632 * v14);
      v16 = *(_QWORD *)(a1 + 1888);
      if (!v16)
        goto LABEL_48;
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v3 = (83492791 * v13) ^ (19349669 * v12) ^ (37783632 * v14);
        if (v15 >= v16)
          v3 = v15 % v16;
      }
      else
      {
        v3 = (v16 - 1) & v15;
      }
      v22 = *(uint64_t ***)(*(_QWORD *)(a1 + 1880) + 8 * v3);
      if (!v22 || (v23 = *v22) == 0)
      {
LABEL_48:
        v27 = operator new(0x1D0uLL);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        v122.__r_.__value_.__l.__size_ = a1 + 1896;
        *v27 = 0;
        v27[1] = v15;
        *((_DWORD *)v27 + 4) = 0;
        *((_DWORD *)v27 + 5) = v12;
        *((_DWORD *)v27 + 6) = v13;
        *((_DWORD *)v27 + 7) = v14;
        sub_22317FD80((uint64_t)(v27 + 4), (uint64_t)&v115);
        v28 = v119;
        v29 = v120;
        v119 = 0uLL;
        *((_OWORD *)v27 + 26) = v28;
        *((_OWORD *)v27 + 27) = v29;
        v120 = 0uLL;
        *((_OWORD *)v27 + 28) = v121;
        v121 = 0uLL;
        v122.__r_.__value_.__s.__data_[16] = 1;
        v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 1904) + 1);
        v31 = *(float *)(a1 + 1912);
        if (v16 && (float)(v31 * (float)v16) >= v30)
        {
          v32 = *(_QWORD *)(a1 + 1880);
          v33 = *(_QWORD **)(v32 + 8 * v3);
          if (v33)
            goto LABEL_51;
LABEL_125:
          *v27 = *v11;
          *v11 = v27;
          *(_QWORD *)(v32 + 8 * v3) = v11;
          if (*v27)
          {
            v61 = *(_QWORD *)(*v27 + 8);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v61 >= v16)
                v61 %= v16;
            }
            else
            {
              v61 &= v16 - 1;
            }
            v33 = (_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v61);
LABEL_144:
            *v33 = v27;
          }
          ++*(_QWORD *)(a1 + 1904);
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
          if (!*((_QWORD *)&v121 + 1))
            goto LABEL_149;
          goto LABEL_146;
        }
        v34 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3)
          v34 = 1;
        v35 = v34 | (2 * v16);
        v36 = vcvtps_u32_f32(v30 / v31);
        if (v35 <= v36)
          prime = v36;
        else
          prime = v35;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v16 = *(_QWORD *)(a1 + 1888);
        if (prime <= v16)
        {
          if (prime >= v16)
            goto LABEL_123;
          v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1904) / *(float *)(a1 + 1912));
          if (v16 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
          {
            v49 = std::__next_prime(v49);
          }
          else
          {
            v51 = 1 << -(char)__clz(v49 - 1);
            if (v49 >= 2)
              v49 = v51;
          }
          if (prime <= v49)
            prime = v49;
          if (prime < v16)
          {
            if (prime)
              goto LABEL_62;
            v59 = *(void **)(a1 + 1880);
            *(_QWORD *)(a1 + 1880) = 0;
            if (v59)
              operator delete(v59);
            v16 = 0;
            *(_QWORD *)(a1 + 1888) = 0;
            v60 = -1;
            goto LABEL_124;
          }
          v16 = *(_QWORD *)(a1 + 1888);
          v60 = v16 - 1;
          if ((v16 & (v16 - 1)) == 0)
            goto LABEL_124;
          goto LABEL_136;
        }
LABEL_62:
        if (prime >> 61)
          sub_223174E94();
        v38 = operator new(8 * prime);
        v39 = *(void **)(a1 + 1880);
        *(_QWORD *)(a1 + 1880) = v38;
        if (v39)
          operator delete(v39);
        v40 = 0;
        *(_QWORD *)(a1 + 1888) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v40++) = 0;
        while (prime != v40);
        v41 = (_QWORD *)*v11;
        if (!*v11)
        {
LABEL_135:
          v16 = prime;
          v60 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_124;
          goto LABEL_136;
        }
        v42 = v41[1];
        v43 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v44 = v42 & v43;
          *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v44) = v11;
          for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
          {
            v46 = i[1] & v43;
            if (v46 == v44)
            {
              v41 = i;
            }
            else
            {
              v47 = *(_QWORD *)(a1 + 1880);
              if (*(_QWORD *)(v47 + 8 * v46))
              {
                *v41 = *i;
                v48 = 8 * v46;
                *i = **(_QWORD **)(*(_QWORD *)(a1 + 1880) + v48);
                **(_QWORD **)(*(_QWORD *)(a1 + 1880) + v48) = i;
              }
              else
              {
                *(_QWORD *)(v47 + 8 * v46) = v41;
                v41 = i;
                v44 = v46;
              }
            }
          }
          goto LABEL_135;
        }
        if (v42 < prime)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v42) = v11;
          v58 = (_QWORD *)*v41;
          if (*v41)
            goto LABEL_130;
LABEL_122:
          v16 = prime;
LABEL_123:
          v60 = v16 - 1;
          if ((v16 & (v16 - 1)) == 0)
          {
LABEL_124:
            v3 = v60 & v15;
            v32 = *(_QWORD *)(a1 + 1880);
            v33 = *(_QWORD **)(v32 + 8 * (v60 & v15));
            if (!v33)
              goto LABEL_125;
LABEL_51:
            *v27 = *v33;
            goto LABEL_144;
          }
LABEL_136:
          if (v15 >= v16)
          {
            v3 = v15 % v16;
            v32 = *(_QWORD *)(a1 + 1880);
            v33 = *(_QWORD **)(v32 + 8 * (v15 % v16));
            if (!v33)
              goto LABEL_125;
          }
          else
          {
            v3 = v15;
            v32 = *(_QWORD *)(a1 + 1880);
            v33 = *(_QWORD **)(v32 + 8 * v15);
            if (!v33)
              goto LABEL_125;
          }
          goto LABEL_51;
        }
        v42 %= prime;
        *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 8 * v42) = v11;
        v58 = (_QWORD *)*v41;
        if (!*v41)
          goto LABEL_122;
        while (1)
        {
LABEL_130:
          v63 = v58[1];
          if (v63 >= prime)
            v63 %= prime;
          if (v63 == v42)
            goto LABEL_129;
          v64 = *(_QWORD *)(a1 + 1880);
          if (*(_QWORD *)(v64 + 8 * v63))
            break;
          *(_QWORD *)(v64 + 8 * v63) = v41;
          v41 = v58;
          v58 = (_QWORD *)*v58;
          v42 = v63;
          if (!v58)
            goto LABEL_135;
        }
        *v41 = *v58;
        v62 = 8 * v63;
        *v58 = **(_QWORD **)(*(_QWORD *)(a1 + 1880) + v62);
        **(_QWORD **)(*(_QWORD *)(a1 + 1880) + v62) = v58;
        v58 = v41;
LABEL_129:
        v41 = v58;
        v58 = (_QWORD *)*v58;
        if (!v58)
          goto LABEL_135;
        goto LABEL_130;
      }
      if (v17.u32[0] < 2uLL)
      {
        while (1)
        {
          v25 = v23[1];
          if (v25 == v15)
          {
            if (!*((_DWORD *)v23 + 4)
              && *((_DWORD *)v23 + 5) == v12
              && *((_DWORD *)v23 + 6) == v13
              && *((_DWORD *)v23 + 7) == v14)
            {
              goto LABEL_46;
            }
          }
          else if ((v25 & (v16 - 1)) != v3)
          {
            goto LABEL_48;
          }
          v23 = (uint64_t *)*v23;
          if (!v23)
            goto LABEL_48;
        }
      }
      while (1)
      {
        v24 = v23[1];
        if (v24 == v15)
          break;
        if (v24 >= v16)
          v24 %= v16;
        if (v24 != v3)
          goto LABEL_48;
LABEL_30:
        v23 = (uint64_t *)*v23;
        if (!v23)
          goto LABEL_48;
      }
      if (*((_DWORD *)v23 + 4)
        || *((_DWORD *)v23 + 5) != v12
        || *((_DWORD *)v23 + 6) != v13
        || *((_DWORD *)v23 + 7) != v14)
      {
        goto LABEL_30;
      }
LABEL_46:
      sub_223A327F8((uint64_t)(v23 + 4), (uint64_t)&v115);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (!*((_QWORD *)&v121 + 1))
        goto LABEL_149;
LABEL_146:
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (v66)
      {
LABEL_149:
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
        if (*((_QWORD *)&v120 + 1))
          goto LABEL_150;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
        if (*((_QWORD *)&v120 + 1))
        {
LABEL_150:
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
      if (*((_QWORD *)&v119 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      sub_22316F8F4((uint64_t *)&v115);
LABEL_15:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v84 = sub_2241471F8();
    v85 = v84[2];
    if (!v85)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v85 = v84[2];
    }
    v86 = *(_QWORD *)(v85 + 64);
    v87 = (std::mutex *)(v86 + 32);
    std::mutex::lock((std::mutex *)(v86 + 32));
    v89 = *(_QWORD *)(v86 + 96);
    v88 = *(_QWORD *)(v86 + 104);
    std::mutex::unlock(v87);
    if (v89 != v88)
    {
      *(_QWORD *)&v115 = "cv3d.recon.";
      *((_QWORD *)&v115 + 1) = 11;
      *(_QWORD *)&v116 = "JasperMeshing";
      *((_QWORD *)&v116 + 1) = 13;
      sub_2231A9820((uint64_t)&v115, (uint64_t)v117, 0, 0, &v122);
      sub_2241471F8();
      v90 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90))
      {
        v97 = *(_BYTE *)(a1 + 33) == 0;
        if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_192;
      }
      else
      {
        v97 = 0;
        if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_192:
          if (!v97)
            goto LABEL_197;
LABEL_196:
          v91.i32[0] = *(_DWORD *)(a1 + 20);
          sub_223A96F40((_QWORD *)(a1 + 1880), a1 + 48, *(_QWORD *)(a1 + 2024), v91, v92, v93, v94, v95, v96);
          goto LABEL_197;
        }
      }
      operator delete(v122.__r_.__value_.__l.__data_);
      if (!v97)
        goto LABEL_197;
      goto LABEL_196;
    }
  }
LABEL_197:
  sub_22322797C(&v114, v79, v80, v81, v82, v83);
  *(_QWORD *)(a1 + 1936) = *a2;
  LOBYTE(v115) = 0;
  v118 = 0;
  v122.__r_.__value_.__s.__data_[0] = 0;
  v122.__r_.__value_.__s.__data_[16] = 0;
  sub_223AC9D84((uint64_t)__p, (_QWORD *)(a1 + 1944), 0, &v115, (__int128 *)&v122, a3);
  v98 = (_QWORD *)v105;
  if ((_QWORD)v105)
  {
    do
    {
      v99 = (_QWORD *)*v98;
      sub_22316F8F4(v98 + 4);
      operator delete(v98);
      v98 = v99;
    }
    while (v99);
  }
  v100 = __p[0];
  __p[0] = 0;
  if (v100)
    operator delete(v100);
  sub_22391CC34(v107, v108, (uint64_t)v109);
  if (SHIBYTE(v108[2]) < 0)
  {
    operator delete((void *)v108[0]);
    if ((SHIBYTE(v107[2]) & 0x80000000) == 0)
      return kdebug_trace();
LABEL_205:
    operator delete((void *)v107[0]);
    return kdebug_trace();
  }
  if (SHIBYTE(v107[2]) < 0)
    goto LABEL_205;
  return kdebug_trace();
}

void sub_223AAE3D0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  sub_22322797C(&a35, a2, a3, a4, a5, a6);
  sub_223530D14((uint64_t)&a15);
  sub_22392AA18((uint64_t)&a20);
  sub_2231874DC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223AAE464@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v5[4];
  char v6;
  uint64_t v7[48];
  uint64_t v8[3];
  uint64_t v9[3];
  _QWORD v10[2];
  char v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v13 = 0u;
  v12 = 0u;
  v14 = 728321672;
  kdebug_trace();
  strcpy((char *)v8, "PCMExtractFullMesh");
  HIBYTE(v8[2]) = 18;
  strcpy((char *)v9, "PointCloudMapper");
  HIBYTE(v9[2]) = 16;
  v10[1] = 0;
  v10[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v11 = 1;
  sub_2241498F4((uint64_t)v7, 0);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), v7);
  LOBYTE(v5[0]) = 0;
  v6 = 0;
  sub_223AC9BDC((uint64_t)v7, (_QWORD *)(a1 + 1944), v5, a2);
  sub_22316F8F4(v7);
  sub_22391CC34(v8, v9, (uint64_t)v10);
  if (SHIBYTE(v9[2]) < 0)
  {
    operator delete((void *)v9[0]);
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
      return kdebug_trace();
LABEL_5:
    operator delete((void *)v8[0]);
    return kdebug_trace();
  }
  if (SHIBYTE(v8[2]) < 0)
    goto LABEL_5;
  return kdebug_trace();
}

void sub_223AAE5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_22316F8F4((uint64_t *)va);
  sub_22392AA18(v10 - 152);
  sub_2231874DC(v10 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_223AAE620(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[55];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[53];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[53];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[51];
  if (!v8)
    return sub_22316F8F4(a1 + 2);
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return sub_22316F8F4(a1 + 2);
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return sub_22316F8F4(a1 + 2);
}

void sub_223AAE704(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::string v16;

  sub_223AAE874(a1, &v16);
  v4 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = 0uLL;
  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 0xFF00000000) != 0)
    v6 = (v5 >> 1) | 0x100000000;
  else
    v6 = 0;
  v7 = *(_WORD *)(a1 + 60);
  *(_OWORD *)a2 = v4;
  if (*((_QWORD *)&v4 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a2 + 16) = v6;
  (*(void (**)(std::string::size_type *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v4 + 64))(&v16.__r_.__value_.__r.__words[2], v4, 3);
  v10 = *(_QWORD *)(v16.__r_.__value_.__r.__words[2] + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v16.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a2 + 40) = v10;
  v16.__r_.__value_.__r.__words[2] = 0;
  MEMORY[0x227684CE8]();
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a2 + 72) = v7;
  if (*((_QWORD *)&v4 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
  size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223AAE850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223AAE874(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string::size_type v15;
  _QWORD *v16;
  std::string::size_type v17;
  std::logic_error *exception;
  std::string v19;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223AAEA9C(a1);
    std::logic_error::logic_error(exception, &v19);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v19.__r_.__value_.__r.__words[0] = v4;
  v19.__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2;
  if (v4)
  {
    a2->__r_.__value_.__r.__words[0] = v4;
    a2->__r_.__value_.__l.__size_ = v5;
    v8 = &v19;
  }
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  size = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
  if (!v19.__r_.__value_.__l.__size_)
    goto LABEL_25;
  v10 = (unint64_t *)(v19.__r_.__value_.__l.__size_ + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (a2->__r_.__value_.__r.__words[0])
      return;
  }
  else
  {
LABEL_25:
    if (a2->__r_.__value_.__r.__words[0])
      return;
  }
  v12 = (std::__shared_weak_count *)a2->__r_.__value_.__l.__size_;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v19);
  v15 = v19.__r_.__value_.__r.__words[0];
  a2->__r_.__value_.__r.__words[0] = v19.__r_.__value_.__r.__words[0];
  if (v15)
  {
    v16 = (_QWORD *)operator new();
    v17 = v19.__r_.__value_.__r.__words[0];
    *v16 = &off_24EC20DE8;
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = v17;
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v16;
  }
  else
  {
    a2->__r_.__value_.__l.__size_ = 0;
  }
}

void sub_223AAEA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AAEA9C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223AAEB14();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_223AAEB14()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578E980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E980))
  {
    sub_223174DE4(v7, "Image");
    v2 = sub_2231A36D0();
    sub_223AAED18((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223AAED18((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578E968, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E968, &dword_22314D000);
          __cxa_guard_release(&qword_25578E980);
          return &stru_25578E968;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578E968;
}

void sub_223AAEC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578E980);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578E980);
  _Unwind_Resume(a1);
}

void sub_223AAED18(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223AAEDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AAEDD0(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_223AAE620(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

double sub_223AAEE14(uint64_t *a1)
{
  __int128 v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;

  sub_223AAF154(&v12, (a1[1] - *a1) >> 6);
  v15 = 0;
  v2 = 0uLL;
  v14 = 0u;
  v16 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = (char *)*a1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 64;
      }
      while (v4 != v3);
      v5 = (char *)*a1;
    }
    a1[1] = (uint64_t)v3;
    operator delete(v5);
    v2 = v14;
    v9 = v15;
    v10 = v19;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_OWORD *)a1 = v12;
  a1[2] = v13;
  *(_OWORD *)(a1 + 3) = v2;
  a1[5] = v9;
  *((_WORD *)a1 + 24) = v16;
  *(_OWORD *)(a1 + 7) = v17;
  a1[9] = *(_QWORD *)&v18[0];
  result = *((double *)v18 + 1);
  *((_OWORD *)a1 + 5) = *(_OWORD *)((char *)v18 + 8);
  a1[12] = *((_QWORD *)&v18[1] + 1);
  a1[13] = v10;
  return result;
}

void sub_223AAEF54(uint64_t *a1, double a2, float64x2_t a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  float v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  float64x2_t v14;
  float32x4_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[7];

  if (!a1[5]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PointObservationQueue.cpp", 81, (uint64_t)"!observations_.empty()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v5 = a1[3];
  v6 = *a1;
  v7 = *a1 + (v5 << 6);
  v8 = (_OWORD *)v7;
  if ((*(_DWORD *)(v7 + 56) - 1) >= 2)
  {
    if (*(_BYTE *)(v7 + 40))
    {
      v9 = 64.0;
    }
    else
    {
      v9 = 8.0;
      if (!*(_QWORD *)(v6 + (v5 << 6) + 24))
        v9 = 1.0;
    }
  }
  else
  {
    v9 = 0.02;
  }
  *(_QWORD *)&a3.f64[0] = a1[9];
  a4.i64[0] = *(_QWORD *)v7;
  a4.i32[2] = *(_DWORD *)(v7 + 8);
  v10 = *(float64x2_t *)(a1 + 7);
  v11 = (float64x2_t)vmulq_n_f32(a4, v9);
  v12 = vcvtq_f64_f32(*(float32x2_t *)&v11.f64[0]);
  v11.f64[0] = *(float *)&v11.f64[1];
  v13 = (float32x4_t)vsubq_f64(a3, v11);
  v14 = vsubq_f64(v10, v12);
  *(float64x2_t *)(a1 + 7) = v14;
  a1[9] = v13.i64[0];
  v13.i64[0] = *(_QWORD *)(v7 + 12);
  v13.i32[2] = *(_DWORD *)(v7 + 20);
  v15 = vmulq_n_f32(v13, v9);
  v14.f64[0] = v15.f32[2];
  *(_QWORD *)&v10.f64[0] = a1[12];
  *(_QWORD *)&v12.f64[0] = a1[13];
  *((float64x2_t *)a1 + 5) = vsubq_f64(*((float64x2_t *)a1 + 5), vcvtq_f64_f32(*(float32x2_t *)v15.f32));
  a1[12] = *(_OWORD *)&vsubq_f64(v10, v14);
  *((double *)a1 + 13) = v12.f64[0] - v9;
  v17 = *(unsigned __int8 *)(v7 + 40);
  v16 = v7 + 40;
  if (v17)
  {
    --*((_BYTE *)a1 + 49);
  }
  else if (*(_QWORD *)(v6 + (v5 << 6) + 24))
  {
    --*((_BYTE *)a1 + 48);
  }
  v18 = v6 + (v5 << 6);
  *v8 = 0u;
  v8[1] = 0u;
  v19 = *(std::__shared_weak_count **)(v18 + 32);
  *(_QWORD *)(v18 + 32) = 0;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_BYTE *)v16 = 0;
  *(_DWORD *)(v16 + 1) = *(_DWORD *)v24;
  *(_DWORD *)(v16 + 4) = *(_DWORD *)&v24[3];
  *(_QWORD *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 16) = 0;
  v22 = (a1[1] - *a1) >> 6;
  v23 = a1[3] + 1;
  if (v23 < v22)
    v22 = 0;
  a1[3] = v23 - v22;
  --a1[5];
}

_QWORD *sub_223AAF154(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 58)
      sub_223AA8F6C();
    v4 = a2 << 6;
    v5 = (char *)operator new(a2 << 6);
    *a1 = v5;
    a1[2] = &v5[64 * a2];
    bzero(v5, a2 << 6);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_223AAF1D4(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 64;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223AAF250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v3 = a1[4];
  v4 = *a1;
  v5 = *a1 + (v3 << 6);
  v21 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v23 = *(uint64_t *)((char *)a2 + 12);
  v24 = *((_DWORD *)a2 + 5);
  v6 = a2[3];
  v7 = a2[4];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v19 = *(_OWORD *)(a2 + 5);
  v20 = *((_DWORD *)a2 + 14);
  *(_QWORD *)v5 = v21;
  *(_DWORD *)(v5 + 8) = v22;
  *(_QWORD *)(v5 + 12) = v23;
  *(_DWORD *)(v5 + 20) = v24;
  v10 = *(std::__shared_weak_count **)(v5 + 32);
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 32) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v4 + (v3 << 6);
  *(_OWORD *)(v13 + 40) = v19;
  *(_DWORD *)(v13 + 56) = v20;
  v14 = (a1[1] - *a1) >> 6;
  v15 = a1[5];
  v16 = a1[4] + 1;
  if (v16 >= v14)
    v17 = (a1[1] - *a1) >> 6;
  else
    v17 = 0;
  a1[4] = v16 - v17;
  if (v15 == v14)
  {
    v18 = a1[3] + 1;
    if (v18 < v14)
      v14 = 0;
    a1[3] = v18 - v14;
  }
  else
  {
    a1[5] = v15 + 1;
  }
}

void sub_223AAF3AC(float32x2_t *a1, int a2, void **a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  int v5;
  int32x2_t v6;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  int8x16_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *i;
  unint64_t *p_shared_owners;
  unint64_t v23;
  float32x2_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  int8x16_t v29;
  float32x2_t v30;
  int v31;
  __int32 v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t v43;
  int8x16_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int32x2_t v55;
  __int32 v56;
  __int32 v57;
  BOOL v58;
  BOOL v59;
  int32x2_t v61;
  __int16 *v62;
  unsigned __int8 v69;
  char v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x2_t v147;
  int8x16_t v148;
  float32x4_t v149;
  char *v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  float32x4_t v160;
  __int128 v161;
  int8x16_t v162;
  __int16 v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  float32x4_t *v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int v174;
  int v175;
  uint64_t v176;
  void **v177;
  uint64_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  int8x16_t v182;
  int8x16_t v183;
  float32x2_t v184;
  float32x4_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  uint64_t v188;
  __int32 v189;
  _BYTE v190[12];
  __int128 v191;
  __int128 v192;
  int v193;
  int32x2_t v194;

  if (a1[7].i8[0])
  {
    if (a1[4].i32[0])
      _ZF = a1[4].i32[1] == 0;
    else
      _ZF = 1;
    if (_ZF
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_102;
    }
    sub_223C3BF78((uint64_t)a1, (uint64_t)&v188);
    v11 = *(std::__shared_weak_count **)&v190[4];
    if (*(_QWORD *)&v190[4])
    {
      v12 = (unint64_t *)(*(_QWORD *)&v190[4] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/VertexManager.cpp", 65, (uint64_t)"frame_bundle.Depth()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_102;
  }
  if (a1[26].i8[0])
  {
    if ((!a1[23].i32[0] || !a1[23].i32[1])
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_102;
    }
    sub_223C3D9D0((uint64_t)&a1[16], (uint64_t)&v188);
    v3 = *(std::__shared_weak_count **)&v190[4];
    if (*(_QWORD *)&v190[4])
    {
      v18 = (unint64_t *)(*(_QWORD *)&v190[4] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/VertexManager.cpp", 66, (uint64_t)"frame_bundle.Normals()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_102;
  }
  v20 = (char *)*a3;
  for (i = (char *)a3[1]; i != v20; i -= 64)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)i - 4);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  a3[1] = v20;
  if (a1[26].i8[0])
  {
    if (a1[23].i32[0] && a1[23].i32[1]
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      sub_223C3D9D0((uint64_t)&a1[16], (uint64_t)&v188);
      v165 = *(std::__shared_weak_count **)&v190[4];
      v178 = v191;
      v6 = v194;
      if (a1[7].i8[0])
        goto LABEL_37;
LABEL_43:
      v24 = a1[222];
      v167 = a1[223];
      if (*(_QWORD *)&v24 == *(_QWORD *)&v167)
        goto LABEL_91;
      goto LABEL_44;
    }
LABEL_102:
    abort();
  }
  if (!a1[7].i8[0])
    goto LABEL_43;
LABEL_37:
  if ((!a1[4].i32[0] || !a1[4].i32[1])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78((uint64_t)a1, (uint64_t)&v188);
  v4 = v191;
  v164 = *(std::__shared_weak_count **)&v190[4];
  v5 = v192;
  LODWORD(v3) = DWORD1(v192);
  v24 = a1[222];
  v167 = a1[223];
  if (*(_QWORD *)&v24 != *(_QWORD *)&v167)
  {
LABEL_44:
    *(float32x2_t *)v14.i8 = a1[167];
    v25 = v14;
    v25.i32[2] = a1[168].i32[0];
    *(float32x2_t *)v15.f32 = a1[169];
    v173 = (float32x2_t)vzip1q_s32(v14, (int32x4_t)v15).u64[0];
    v26 = (int32x4_t)v15;
    v26.i32[2] = a1[170].i32[0];
    v16.i32[0] = a1[172].i32[0];
    *(float32x2_t *)v17.i8 = a1[171];
    v27 = v17;
    v27.i32[2] = v16.i32[0];
    v28 = (float32x2_t)vzip1_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v15.f32);
    *(float32x2_t *)v15.f32 = a1[173];
    v166 = (float32x4_t *)&a1[167];
    v15.i32[2] = a1[174].i32[0];
    v29 = (int8x16_t)vnegq_f32(v15);
    v30 = (float32x2_t)vtrn2q_s32(v25, v26).u64[0];
    v25.i64[0] = vzip2q_s32(v25, v26).u64[0];
    *(float32x2_t *)v26.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v28, *(float *)v29.i32), v30, *(float32x2_t *)v15.f32, 1), *(float32x2_t *)v25.i8, v15, 2);
    v31 = a1[166].i32[0] - a2;
    v32 = a1[166].i32[1] - a2;
    v26.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), v16);
    v170 = (float32x4_t)v26;
    v171 = *(float32x2_t *)v25.i8;
    v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1);
    v172 = *(float32x2_t *)v17.i8;
    v168 = (float32x2_t)vextq_s8(v27, v27, 8uLL).u64[0];
    v169 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v30, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v30, 1), 0xCuLL).u64[0];
    v177 = a3;
    v176 = v4;
    v174 = (int)v3;
    v175 = v5;
    do
    {
      sub_224006DC4(*(uint64_t **)(*(_QWORD *)&v24 + 72), 0, 0, (void **)&v186, 0.949999988, 5.0);
      v42 = v186;
      v41 = v187;
      if (v186 != v187)
      {
        v43.i32[0] = *(_DWORD *)(*(_QWORD *)&v24 + 16);
        v34.i64[0] = *(_QWORD *)(*(_QWORD *)&v24 + 8);
        v35.i64[0] = *(_QWORD *)(*(_QWORD *)&v24 + 24);
        v34.i32[2] = v43.i32[0];
        v35.i32[2] = *(_DWORD *)(*(_QWORD *)&v24 + 32);
        v36.i32[0] = *(_DWORD *)(*(_QWORD *)&v24 + 48);
        v37.i64[0] = *(_QWORD *)(*(_QWORD *)&v24 + 40);
        v38.i64[0] = *(_QWORD *)(*(_QWORD *)&v24 + 56);
        v38.i32[2] = *(_DWORD *)(*(_QWORD *)&v24 + 64);
        v44 = (int8x16_t)vnegq_f32(v38);
        *(int32x2_t *)_Q19.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
        v37.i32[2] = v36.i32[0];
        v43.i32[1] = v35.i32[2];
        v45 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v34.f32, *(int32x2_t *)v35.f32), *(float *)v44.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v34.f32, *(int32x2_t *)v35.f32), *(float32x2_t *)v38.f32, 1), v43, v38, 2);
        *(float32x2_t *)&_Q18 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v44.i8), *(float32x2_t *)_Q19.f32, *(float32x2_t *)v38.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), v36);
        v46 = *(float32x4_t *)a1[169].f32;
        v47 = *(float32x4_t *)a1[171].f32;
        v48 = *(float32x4_t *)a1[173].f32;
        v185 = vaddq_f32(v48, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v166, v45.f32[0]), v46, v45, 1), v47, *(float *)&_Q18));
        v49 = (int8x16_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*v166, v34, 2), v46, v35, 2), v47, v37, 2), (float32x4_t)0, v48);
        v182 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v166, v34.f32[0]), v46, v35.f32[0]), v47, v37.f32[0]), (float32x4_t)0, v48);
        v183 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v166, *(float32x2_t *)v34.f32, 1), v46, *(float32x2_t *)v35.f32, 1), v47, *(float32x2_t *)v37.f32, 1), (float32x4_t)0, v48);
        _D1 = (float32x2_t)vextq_s8(v182, v182, 8uLL).u64[0];
        v180 = (float32x2_t)vextq_s8(v183, v183, 8uLL).u64[0];
        v181 = _D1;
        v184 = *(float32x2_t *)v49.i8;
        v179 = (float32x2_t)vextq_s8(v49, v49, 8uLL).u64[0];
        do
        {
          _D1.i32[0] = v42[1].i32[0];
          *(float32x2_t *)v53.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v182.i8, COERCE_FLOAT(*v42)), *(float32x2_t *)v183.i8, *v42, 1), v184, _D1.f32[0]);
          *(float32x2_t *)&v53.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v181, *v42), v180, *v42, 1), _D1, v179);
          v54 = (int8x16_t)vaddq_f32(v53, v185);
          if (*(float *)&v54.i32[2] > 0.000001)
          {
            _D1 = a1[158];
            v55 = vcvt_s32_f32(vrndm_f32(vadd_f32(vadd_f32(_D1, vdiv_f32(vmul_f32(*(float32x2_t *)v54.i8, a1[157]), (float32x2_t)vdup_laneq_s32((int32x4_t)v54, 2))), (float32x2_t)0x3F0000003F000000)));
            v56 = v55.i32[0];
            v57 = v55.i32[1];
            v58 = v55.i32[0] < a2 || v31 <= v55.i32[0];
            v59 = v58 || v55.i32[1] < a2;
            if (!v59 && v32 > v55.i32[1])
            {
              v61 = vmul_s32(v6, v55);
              _D1 = (float32x2_t)vdup_lane_s32(v61, 1);
              _D0 = (float32x2_t)vadd_s32((int32x2_t)_D1, v61);
              v62 = (__int16 *)(v178 + 2 * _D0.u32[0]);
              _D1.i16[0] = *v62;
              _H2 = v62[1];
              _D0.i16[0] = v62[2];
              __asm
              {
                FCVT            S19, H1
                FCVT            S18, H2
              }
              if (!_ZF)
                goto LABEL_65;
              if (*(float *)&_Q18 != 0.0)
                goto LABEL_65;
              __asm { FCVT            S1, H0 }
              if (_S1 != 0.0)
              {
LABEL_65:
                v69 = atomic_load((unsigned __int8 *)qword_2540CCCF0);
                if ((v69 & 1) == 0)
                {
                  v163 = _D0.i16[0];
                  v161 = _Q18;
                  v162 = v54;
                  v160 = _Q19;
                  v155 = __cxa_guard_acquire(qword_2540CCCF0);
                  _Q19 = v160;
                  _Q18 = v161;
                  v54 = v162;
                  _D0.i16[0] = v163;
                  if (v155)
                  {
                    xmmword_2540CCD00 = xmmword_22465F3A0;
                    *(_OWORD *)&dword_2540CCD10 = xmmword_22465F3B0;
                    xmmword_2540CCD20 = xmmword_22465F3C0;
                    *(_OWORD *)&dword_2540CCD30 = xmmword_22465F3D0;
                    xmmword_2540CCD40 = xmmword_22465F3E0;
                    *(_OWORD *)&dword_2540CCD50 = xmmword_22465F3F0;
                    __cxa_guard_release(qword_2540CCCF0);
                    _Q19 = v160;
                    _Q18 = v161;
                    v54 = v162;
                    _D0.i16[0] = v163;
                  }
                }
                _H1 = *(_WORD *)(v176 + 2 * (v175 * v56 + v174 * v57));
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((xmmword_2540CCD00 + v56) * v175
                                              + (DWORD1(xmmword_2540CCD00) + v57) * v174));
                __asm
                {
                  FCVT            S2, H2
                  FCVT            S1, H1
                }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((DWORD2(xmmword_2540CCD00) + v56) * v175
                                              + (HIDWORD(xmmword_2540CCD00) + v57) * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD10 + v56) * v175 + (*(_DWORD *)algn_2540CCD14 + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD18 + v56) * v175 + (*(_DWORD *)algn_2540CCD1C + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((xmmword_2540CCD20 + v56) * v175
                                              + (DWORD1(xmmword_2540CCD20) + v57) * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((DWORD2(xmmword_2540CCD20) + v56) * v175
                                              + (HIDWORD(xmmword_2540CCD20) + v57) * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD30 + v56) * v175 + (*(_DWORD *)algn_2540CCD34 + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD38 + v56) * v175 + (*(_DWORD *)algn_2540CCD3C + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((xmmword_2540CCD40 + v56) * v175
                                              + (DWORD1(xmmword_2540CCD40) + v57) * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((DWORD2(xmmword_2540CCD40) + v56) * v175
                                              + (HIDWORD(xmmword_2540CCD40) + v57) * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD50 + v56) * v175 + (*(_DWORD *)algn_2540CCD54 + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S2 = _S2 / _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (_S2 > 0.2)
                  goto LABEL_78;
                _H2 = *(_WORD *)(v176
                               + 2
                               * ((dword_2540CCD58 + v56) * v175 + (*(_DWORD *)algn_2540CCD5C + v57)
                                                                               * v174));
                __asm { FCVT            S2, H2 }
                _S2 = _S2 - _S1;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                _S1 = _S2 / _S1;
                __asm
                {
                  FCVT            H1, S1
                  FCVT            S1, H1
                }
                if (_S1 <= 0.2)
                  v144 = 0;
                else
LABEL_78:
                  v144 = 1;
                __asm { FCVT            S0, H0 }
                v145 = _Q19;
                v145.i32[1] = _Q18;
                v145.i32[2] = _D0.i32[0];
                *(float32x2_t *)v146.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v173, *(float *)v54.i32), v169, *(float32x2_t *)v54.i8, 1), v171, (float32x4_t)v54, 2);
                v147 = vmla_f32(vmla_lane_f32(vmul_f32(v172, *(float32x2_t *)v54.i8), v33, *(float32x2_t *)v54.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), v168);
                *(float32x2_t *)&v146.u32[2] = v147;
                v147.f32[0] = _Q19.f32[0] * _Q19.f32[0];
                v148 = (int8x16_t)vmulq_n_f32(v145, 1.0/ sqrtf(vmla_f32(vmla_f32(v147, *(float32x2_t *)&_Q18, *(float32x2_t *)&_Q18), _D0, _D0).f32[0]));
                _D1 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v173, *(float *)v148.i32), v169, *(float32x2_t *)v148.i8, 1), v171, (float32x4_t)v148, 2);
                v145.i32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v172, *(float32x2_t *)v148.i8), v33, *(float32x2_t *)v148.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), v168).u32[0];
                v149 = vaddq_f32(v146, v170);
                v189 = v149.i32[2];
                v188 = v149.i64[0];
                *(_DWORD *)&v190[8] = v145.i32[2];
                *(float32x2_t *)v190 = _D1;
                v191 = 0uLL;
                LOBYTE(v192) = v144;
                *((float32x2_t *)&v192 + 1) = a1[154];
                v193 = 0;
                v150 = (char *)v177[1];
                if (v150 < v177[2])
                {
                  v51 = v188;
                  *((_DWORD *)v150 + 2) = v189;
                  *(_QWORD *)v150 = v51;
                  v52 = *(_QWORD *)((unint64_t)&v188 | 0xC);
                  *((_DWORD *)v150 + 5) = *(_DWORD *)(((unint64_t)&v188 | 0xC) + 8);
                  *(_QWORD *)(v150 + 12) = v52;
                  *(_OWORD *)(v150 + 24) = v191;
                  v191 = 0uLL;
                  LODWORD(v52) = v193;
                  *(_OWORD *)(v150 + 40) = v192;
                  *((_DWORD *)v150 + 14) = v52;
                  v177[1] = v150 + 64;
                }
                else
                {
                  v151 = sub_223AA8DC0(v177, (uint64_t)&v188);
                  v152 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
                  v177[1] = v151;
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldaxr(v153);
                    while (__stlxr(v154 - 1, v153));
                    if (!v154)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                }
              }
            }
          }
          v42 = (float32x2_t *)((char *)v42 + 12);
        }
        while (v42 != v41);
        v42 = v186;
      }
      if (v42)
      {
        v187 = v42;
        operator delete(v42);
      }
      *(_QWORD *)&v24 += 224;
    }
    while (*(_QWORD *)&v24 != *(_QWORD *)&v167);
  }
LABEL_91:
  if (v164)
  {
    v156 = (unint64_t *)&v164->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  if (v165)
  {
    v158 = (unint64_t *)&v165->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
}

void sub_223AAFFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223AB00C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = &off_24EC5F058;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)a1[4];
  if (v8 == a1 + 1)
  {
    v9 = 4;
    v8 = a1 + 1;
    goto LABEL_16;
  }
  if (v8)
  {
    v9 = 5;
LABEL_16:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_223AB0194(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = &off_24EC5F058;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)a1[4];
  if (v8 == a1 + 1)
  {
    v9 = 4;
    v8 = a1 + 1;
  }
  else
  {
    if (!v8)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AB0278(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  __int32 v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _QWORD **v15;
  int v16;
  uint64_t *v17;
  simd_float3x3 v18;
  __n128 v19;
  float32x4_t v20;
  double v21;
  float32x4_t v22;
  float32x4_t v23;
  unsigned int v24;
  _QWORD *v25;
  __n128 v26;
  float32x4_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int32 v30;
  const float *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x2_t v35;
  double v36;
  uint64_t v37;
  BOOL v38;
  float32x4_t v39;
  float32x4_t v40;
  BOOL v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  double v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float v58;
  float v59;
  __int32 v60;
  __int32 v61;
  BOOL v62;
  int8x16_t v63;
  int v64;
  int v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t i;
  unsigned __int8 v82;
  uint64_t v83;
  simd_float3x3 v84;
  float32x4_t v85;
  float32x4_t v86;
  double v87;
  float32x2_t v88;
  float32x2_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x2_t v93;
  float32x2_t v94;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t **v107;
  _QWORD **v108;
  unsigned int v109;
  uint64_t *v110;
  int v111;
  uint64_t v112;
  int8x8_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t j;
  unsigned __int8 v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t k;
  unsigned __int8 v133;
  unsigned __int8 v134;
  uint64_t m;
  unsigned __int8 v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t **v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  _BYTE *v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD **v156;
  char *v157;
  uint64_t *v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t **v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  float32x4_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  int8x16_t v175;
  float v176;
  uint64_t v177;
  float32x2_t v178;
  float32x4_t v179;
  char *v180;
  uint64_t v181;
  uint64_t *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _BYTE *v189;
  _DWORD *v190;
  int64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  _OWORD *v196;
  char *v197;
  uint64_t v198;
  __int128 v199;
  int v200;
  uint64_t **v201;
  unsigned int v204;
  _QWORD **v205;
  float32x4_t v206;
  _QWORD *v207;
  __n128 v208;
  unint64_t v209;
  _QWORD *v211;
  _QWORD *v212;
  simd_float3 v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  unint64_t v218;
  _QWORD v219[3];
  _QWORD **v220;
  _QWORD *v221[2];
  int v222;
  void *__dst[2];
  char v224;
  void *__p[2];
  char v226;
  _QWORD v227[2];
  char v228;
  __int128 v229;
  __int128 v230;
  int v231;
  int32x2_t v232;
  int v233;
  int32x2_t v234;
  __int32 v235;
  _BYTE v236[12];
  uint64_t v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  char v241;
  uint64_t v242;
  int v243;
  _DWORD v244[3];
  float32x4_t v245;
  int32x2_t v246;
  int v247;
  uint64_t v248;
  __int32 v249;
  simd_float3x3 v250;

  v229 = 0u;
  v230 = 0u;
  v231 = 728321616;
  kdebug_trace();
  v215 = a4;
  v8 = (char *)operator new(0x20uLL);
  strcpy(v8, "PCMVertexManagerProcessFrame");
  v9 = (char *)operator new(0x28uLL);
  strcpy(v9, "PointCloudMapper.UpdateWithFrame");
  sub_223197FA4(__dst, v8, 0x1CuLL);
  sub_223197FA4(__p, v9, 0x20uLL);
  v227[0] = 0;
  v227[1] = 0;
  v228 = 0;
  v227[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v228 = 1;
  operator delete(v9);
  operator delete(v8);
  v10 = a4;
  v11 = *(_DWORD *)(a4 + 224);
  v222 = *(_DWORD *)(a4 + 228);
  *(_DWORD *)v236 = *(_DWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    sub_223198474();
  *(double *)v13.i64 = (*(double (**)(uint64_t, uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v12 + 48))(v12, a2, v236, a1 + 40);
  v221[0] = 0;
  v221[1] = 0;
  v219[2] = &v220;
  v220 = v221;
  v219[0] = &v222;
  v219[1] = a4;
  sub_223AB1C70((uint64_t)v219, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v13);
  sub_223AB1C70((uint64_t)v219, *a3, a3[1], v14);
  v217 = 0;
  v218 = 0;
  v216 = &v217;
  v15 = v220;
  if (v220 == v221)
  {
    a5[1] = *a5;
    v158 = a5 + 1;
    v212 = a5 + 2;
    goto LABEL_239;
  }
  v211 = (_QWORD *)(v215 + 8);
  while (2)
  {
    *(_QWORD *)&v236[4] = v15[4];
    v16 = *((_DWORD *)v15 + 10);
    *(_DWORD *)v236 = 0;
    LODWORD(v237) = v16;
    v17 = sub_22351A45C(v211, (int *)v236);
    v205 = v15;
    if (v17)
    {
      v24 = *((_DWORD *)v17 + 8);
LABEL_10:
      v25 = (_QWORD *)(*(_QWORD *)(v215 + 128) + 168 * v24);
      goto LABEL_11;
    }
    if (*(_QWORD *)(v215 + 32) != *(_DWORD *)(v215 + 120))
    {
      v24 = sub_223A95018(v215, (uint64_t)(v15 + 4), 0);
      goto LABEL_10;
    }
    v25 = 0;
    v24 = -1;
LABEL_11:
    v18.columns[0].i32[0] = v11;
    sub_223AAC288(v25, a2, v18, v19, v20, v21, v22, v23);
    v204 = v24;
    v29 = (uint64_t)v205[6];
    v28 = v205[7];
    if ((_QWORD *)v29 != v28)
    {
      v30 = *(_DWORD *)(v215 + 224);
      v27.i64[0] = *(_QWORD *)(a2 + 2008);
      v27.i32[2] = *(_DWORD *)(a2 + 2016);
      v31 = (const float *)(v215 + 228);
      v32 = (int8x16_t)vld1q_dup_f32(v31);
      v208 = (__n128)v32;
      v207 = v205[7];
      v206 = v27;
      do
      {
        v32.i64[0] = *(_QWORD *)v29;
        v32.i32[2] = *(_DWORD *)(v29 + 8);
        v33 = (int8x16_t)vsubq_f32(v27, (float32x4_t)v32);
        v35 = (float32x2_t)vextq_s8(v33, v33, 8uLL).u64[0];
        v34 = (int8x16_t)vmulq_n_f32((float32x4_t)v33, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1), *(float32x2_t *)v33.i8, 1), v35, v35).f32[0]));
        v235 = v34.i32[2];
        v234 = *(int32x2_t *)v34.i8;
        v35.i32[0] = *(_DWORD *)(v29 + 20);
        v26.n128_u64[0] = (unint64_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1);
        v36 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v29 + 12), *(float32x2_t *)v34.i8), (float32x2_t)v26.n128_u64[0], *(float32x2_t *)(v29 + 12), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), v35));
        v37 = *(_QWORD *)(v29 + 24);
        v38 = *(float *)&v36 < 0.1 && v37 == 0;
        if (!v38)
        {
          v39.i64[0] = 0x3F0000003F000000;
          v39.i64[1] = 0x3F0000003F000000;
          v40 = vmlaq_f32(v39, (float32x4_t)v208, (float32x4_t)v32);
          *(int32x2_t *)v32.i8 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v40.f32));
          v232 = *(int32x2_t *)v32.i8;
          v32.i32[0] = v40.i32[2];
          v233 = vcvtms_s32_f32(v40.f32[2]);
          v41 = v37 == 0;
          v42 = v37 != 0;
          if (v37)
            a1 = (unint64_t)(a2 + 1936) >> 8;
          v43 = (a2 + 1936) & 0xF8;
          if (v41)
            v43 = 0;
          v44 = sub_223AAAE04((uint64_t)v25, &v232, &v234, v43 | (a1 << 8), v42, v32, *(float32x2_t *)v40.f32, v208, v35, v36, v26);
          v250.columns[0].i32[0] = v30;
          sub_223AA9A14(v44, v29, v250, v45, v46, v47, v48);
          v209 = a1;
          v52 = 0;
          v53 = *(unsigned __int16 *)(v215 + 232);
          v54.n128_u32[0] = *(_DWORD *)(v215 + 224);
          *(float32x2_t *)v55.f32 = vcvt_f32_s32(v232);
          v55.f32[2] = (float)v233;
          v56 = vmulq_n_f32(v55, v54.n128_f32[0]);
          v249 = v56.i32[2];
          v248 = v56.i64[0];
          v57 = -v53;
          v213 = (simd_float3)v54;
          v58 = -v54.n128_f32[0];
          do
          {
            v246 = v232;
            v247 = v233;
            v245.i64[0] = v248;
            v59 = *(float *)(v29 + 4 * v52);
            v49.i32[0] = *((_DWORD *)&v248 + v52);
            v60 = v246.i32[v52];
            v245.i32[2] = v249;
            v54.n128_u32[0] = v245.u32[v52];
            v61 = v60 - 1;
            v62 = v59 <= v49.f32[0];
            if (v59 > v49.f32[0])
              v61 = v60 + 1;
            v63 = (int8x16_t)v213;
            if (v62)
              *(float *)v63.i32 = v58;
            *(float *)v63.i32 = v54.n128_f32[0] + *(float *)v63.i32;
            v246.i32[v52] = v61;
            v245.i32[v52] = v63.i32[0];
            v64 = v246.i32[0] & v57;
            v65 = v246.i32[1] & v57;
            v66 = v247 & v57;
            v244[0] = v246.i32[0] & v57;
            v244[1] = v246.i32[1] & v57;
            v244[2] = v247 & v57;
            v67 = (_DWORD *)*v25;
            if ((v246.i32[0] & v57) != *(_DWORD *)*v25
              || v65 != v67[1]
              || (v68 = (uint64_t)v25, v66 != v67[2]))
            {
              v69 = *(int8x8_t *)(v215 + 16);
              if (v69)
              {
                v70 = (83492791 * v65) ^ (19349669 * v64) ^ (37783632 * v66);
                *(int8x8_t *)v63.i8 = vcnt_s8(v69);
                v63.i16[0] = vaddlv_u8(*(uint8x8_t *)v63.i8);
                if (v63.u32[0] > 1uLL)
                {
                  v71 = (83492791 * v65) ^ (19349669 * v64) ^ (37783632 * v66);
                  if (v70 >= *(_QWORD *)&v69)
                    v71 = v70 % *(_QWORD *)&v69;
                }
                else
                {
                  v71 = (*(_QWORD *)&v69 - 1) & v70;
                }
                v72 = *(uint64_t ***)(*v211 + 8 * v71);
                if (v72)
                {
                  v73 = *v72;
                  if (v73)
                  {
                    if (v63.u32[0] < 2uLL)
                    {
                      v74 = *(_QWORD *)&v69 - 1;
                      while (1)
                      {
                        v76 = v73[1];
                        if (v76 == v70)
                        {
                          if (!*((_DWORD *)v73 + 4)
                            && *((_DWORD *)v73 + 5) == v64
                            && *((_DWORD *)v73 + 6) == v65
                            && *((_DWORD *)v73 + 7) == v66)
                          {
                            goto LABEL_60;
                          }
                        }
                        else if ((v76 & v74) != v71)
                        {
                          goto LABEL_61;
                        }
                        v73 = (uint64_t *)*v73;
                        if (!v73)
                          goto LABEL_61;
                      }
                    }
                    do
                    {
                      v75 = v73[1];
                      if (v75 == v70)
                      {
                        if (!*((_DWORD *)v73 + 4)
                          && *((_DWORD *)v73 + 5) == v64
                          && *((_DWORD *)v73 + 6) == v65
                          && *((_DWORD *)v73 + 7) == v66)
                        {
LABEL_60:
                          v77 = *((_DWORD *)v73 + 8);
                          goto LABEL_63;
                        }
                      }
                      else
                      {
                        if (v75 >= *(_QWORD *)&v69)
                          v75 %= *(_QWORD *)&v69;
                        if (v75 != v71)
                          break;
                      }
                      v73 = (uint64_t *)*v73;
                    }
                    while (v73);
                  }
                }
              }
LABEL_61:
              if (*(_QWORD *)(v215 + 32) == *(_DWORD *)(v215 + 120))
                goto LABEL_65;
              v77 = sub_223A95018(v215, (uint64_t)v244, 0);
LABEL_63:
              v78 = *(_QWORD *)(v215 + 128);
              if (!v78)
              {
LABEL_65:
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/VertexManager.cpp", 175, (uint64_t)"cell_n != nullptr", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v79 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v80 = qword_255795648;
                  for (i = qword_255795650; v80 != i; v80 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v80)(*(_QWORD *)(v80 + 8), "cell_n != nullptr", 17, "", 0);
                }
                v82 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "cell_n != nullptr", 17, "", 0);
                v68 = 0;
              }
              else
              {
                v68 = v78 + 168 * v77;
              }
            }
            v83 = sub_223AAAE04(v68, &v246, &v234, a2 + 1936, 1u, v63, v49, v54, v50, v51, v26);
            v90 = *(_QWORD *)v29;
            *(_DWORD *)&v236[8] = *(_DWORD *)(v29 + 8);
            *(_QWORD *)v236 = v90;
            v91 = *(_QWORD *)(v29 + 12);
            v238 = *(_DWORD *)(v29 + 20);
            v237 = v91;
            v239 = 0;
            v240 = 0;
            v241 = 0;
            v242 = *(_QWORD *)(v29 + 48);
            v243 = 2;
            v92 = *(_QWORD *)(v29 + 24);
            if (v92)
            {
              v84.columns[1] = (simd_float3)v245;
              v84.columns[0] = (simd_float3)vextq_s8((int8x16_t)v84.columns[1], (int8x16_t)v84.columns[1], 8uLL);
              v84.columns[2].i64[0] = *(_QWORD *)(v92 + 16);
              v93 = vmul_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v84.columns[2].f32);
              *(int32x2_t *)v84.columns[2].f32 = vdup_lane_s32(*(int32x2_t *)v84.columns[2].f32, 1);
              v94 = vmla_lane_f32(v93, *(float32x2_t *)v84.columns[2].f32, *(float32x2_t *)v245.f32, 1);
              v84.columns[2].i32[0] = *(_DWORD *)(v92 + 24);
              v86.i32[0] = *(_DWORD *)(v92 + 28);
              v84.columns[2].f32[0] = v86.f32[0]
                                    + vmla_f32(v94, *(float32x2_t *)v84.columns[2].f32, *(float32x2_t *)v84.columns[0].f32).f32[0];
              v85 = (float32x4_t)v213;
              if (v84.columns[2].f32[0] < v213.f32[0])
              {
                *(int32x2_t *)v84.columns[2].f32 = vdup_lane_s32(*(int32x2_t *)v245.f32, 1);
                v86.i32[0] = *(_DWORD *)(a2 + 1344);
                v87 = *(double *)(a2 + 1352);
                v88.i32[0] = *(_DWORD *)(a2 + 1360);
                v89.i32[0] = *(_DWORD *)(a2 + 1376);
                *(float32x2_t *)v85.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a2 + 1336), v245.f32[0]), *(float32x2_t *)&v87, *(float32x2_t *)v245.f32, 1), *(float32x2_t *)(a2 + 1368), v245, 2);
                *(float32x2_t *)v84.columns[1].f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v245.f32), *(float32x2_t *)v84.columns[2].f32, v88), *(float32x2_t *)v84.columns[0].f32, v89);
                v85.i64[1] = v84.columns[1].i64[0];
                v84.columns[0].i64[0] = *(_QWORD *)(a2 + 1384);
                v84.columns[0].i32[2] = *(_DWORD *)(a2 + 1392);
                v84.columns[0] = (simd_float3)vaddq_f32(v85, (float32x4_t)v84.columns[0]);
                v84.columns[1].i32[0] = v84.columns[0].i32[2];
                v84.columns[2].i32[0] = 897988541;
                if (v84.columns[0].f32[2] > 0.000001)
                {
                  v84.columns[1].i64[0] = *(_QWORD *)(a2 + 1264);
                  *(float32x2_t *)v84.columns[0].f32 = vadd_f32(*(float32x2_t *)v84.columns[1].f32, vdiv_f32(vmul_f32(*(float32x2_t *)v84.columns[0].f32, *(float32x2_t *)(a2 + 1256)), (float32x2_t)vdup_laneq_s32((int32x4_t)v84.columns[0], 2)));
                  v84.columns[1].i32[0] = *(_DWORD *)(a2 + 1328);
                  *(double *)v84.columns[1].i64 = (double)v84.columns[1].u64[0] + -0.5;
                  v84.columns[1].f32[0] = *(double *)v84.columns[1].i64;
                  if (v84.columns[0].f32[0] >= -0.5 && v84.columns[0].f32[0] < v84.columns[1].f32[0])
                  {
                    v84.columns[1].i32[0] = *(_DWORD *)(a2 + 1332);
                    *(double *)v84.columns[1].i64 = (double)v84.columns[1].u64[0] + -0.5;
                    v84.columns[1].f32[0] = *(double *)v84.columns[1].i64;
                    v84.columns[2].i32[0] = v84.columns[0].i32[1];
                    if (v84.columns[0].f32[1] >= -0.5 && v84.columns[0].f32[1] < v84.columns[1].f32[0])
                    {
                      *(int32x2_t *)v84.columns[0].f32 = vmul_s32(*(int32x2_t *)(a2 + 1864), vcvt_s32_f32(vrndm_f32(vadd_f32(*(float32x2_t *)v84.columns[0].f32, (float32x2_t)0x3F0000003F000000))));
                      *(int32x2_t *)v84.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)v84.columns[0].f32, 1);
                      if (*(unsigned __int16 *)(v92 + 8) == *(unsigned __int16 *)(*(_QWORD *)(a2 + 1848)
                                                                                 + 2
                                                                                 * vadd_s32(*(int32x2_t *)v84.columns[1].f32, *(int32x2_t *)v84.columns[0].f32).u32[0]))
                      {
                        v97 = *(std::__shared_weak_count **)(v29 + 32);
                        if (v97)
                        {
                          p_shared_owners = (unint64_t *)&v97->__shared_owners_;
                          do
                            v99 = __ldxr(p_shared_owners);
                          while (__stxr(v99 + 1, p_shared_owners));
                          v100 = v240;
                          v239 = v92;
                          v240 = v97;
                          if (v100)
                          {
                            v101 = (unint64_t *)&v100->__shared_owners_;
                            do
                              v102 = __ldaxr(v101);
                            while (__stlxr(v102 - 1, v101));
                            if (!v102)
                            {
                              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                              std::__shared_weak_count::__release_weak(v100);
                            }
                          }
                        }
                        else
                        {
                          v239 = *(_QWORD *)(v29 + 24);
                          v240 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
            v84.columns[0] = v213;
            sub_223AA9A14(v83, (uint64_t)v236, v84, v85, v86, v87, v88);
            v103 = v240;
            if (v240)
            {
              v104 = (unint64_t *)&v240->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            ++v52;
          }
          while (v52 != 3);
          v28 = v207;
          v27 = v206;
          a1 = v209;
        }
        v29 += 64;
      }
      while ((_QWORD *)v29 != v28);
    }
    v106 = v217;
    v107 = &v217;
    v108 = v205;
    a1 = (unint64_t)&v217;
    if (v217)
    {
      while (1)
      {
        while (1)
        {
          v107 = (uint64_t **)v106;
          v109 = *((_DWORD *)v106 + 7);
          if (v204 >= v109)
            break;
          v106 = *v107;
          a1 = (unint64_t)v107;
          if (!*v107)
            goto LABEL_112;
        }
        if (v109 >= v204)
          break;
        v106 = v107[1];
        if (!v106)
        {
          a1 = (unint64_t)(v107 + 1);
          goto LABEL_112;
        }
      }
    }
    else
    {
LABEL_112:
      v110 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v110 + 7) = v204;
      *v110 = 0;
      v110[1] = 0;
      v110[2] = (uint64_t)v107;
      *(_QWORD *)a1 = v110;
      if (*v216)
      {
        v216 = (uint64_t **)*v216;
        v110 = *(uint64_t **)a1;
      }
      sub_2231A9A8C(v217, v110);
      ++v218;
      v108 = v205;
    }
    v111 = *(unsigned __int16 *)(v215 + 232);
    v112 = 1;
    while (2)
    {
      v113 = *(int8x8_t *)(v215 + 16);
      if (!*(_QWORD *)&v113)
        goto LABEL_120;
      v114 = (int *)((char *)&unk_22465F400 + 12 * v112);
      v115 = *((int *)v108 + 8) + *v114 * (uint64_t)v111;
      v116 = *((int *)v108 + 9) + v114[1] * (uint64_t)v111;
      v117 = *((int *)v108 + 10) + v114[2] * (uint64_t)v111;
      v118 = (83492791 * v116) ^ (19349669 * v115) ^ (37783632 * v117);
      v119 = (uint8x8_t)vcnt_s8(v113);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        v120 = (83492791 * v116) ^ (19349669 * v115) ^ (37783632 * v117);
        if (v118 >= *(_QWORD *)&v113)
          v120 = v118 % *(_QWORD *)&v113;
      }
      else
      {
        v120 = v118 & (*(_QWORD *)&v113 - 1);
      }
      v121 = *(uint64_t ***)(*v211 + 8 * v120);
      if (!v121)
        goto LABEL_120;
      v122 = *v121;
      if (!*v121)
        goto LABEL_120;
      if (v119.u32[0] < 2uLL)
      {
        v123 = *(_QWORD *)&v113 - 1;
        while (1)
        {
          v125 = v122[1];
          if (v118 == v125)
          {
            if (!*((_DWORD *)v122 + 4)
              && *((_DWORD *)v122 + 5) == (_DWORD)v115
              && *((_DWORD *)v122 + 6) == (_DWORD)v116
              && *((_DWORD *)v122 + 7) == (_DWORD)v117)
            {
              goto LABEL_147;
            }
          }
          else if ((v125 & v123) != v120)
          {
            goto LABEL_120;
          }
          v122 = (uint64_t *)*v122;
          if (!v122)
            goto LABEL_120;
        }
      }
      while (1)
      {
        v124 = v122[1];
        if (v118 == v124)
          break;
        if (v124 >= *(_QWORD *)&v113)
          v124 %= *(_QWORD *)&v113;
        if (v124 != v120)
          goto LABEL_120;
LABEL_131:
        v122 = (uint64_t *)*v122;
        if (!v122)
          goto LABEL_120;
      }
      if (*((_DWORD *)v122 + 4)
        || *((_DWORD *)v122 + 5) != (_DWORD)v115
        || *((_DWORD *)v122 + 6) != (_DWORD)v116
        || *((_DWORD *)v122 + 7) != (_DWORD)v117)
      {
        goto LABEL_131;
      }
LABEL_147:
      a1 = *((unsigned int *)v122 + 8);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v215 + 56) + 8 * ((*(_QWORD *)(v215 + 80) + a1) / 0x1F))
                     + 132 * ((*(_QWORD *)(v215 + 80) + a1) % 0x1F)
                     + 20))
        goto LABEL_156;
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      v126 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v127 = qword_255795648;
        for (j = qword_255795650; v127 != j; v127 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v127)(*(_QWORD *)(v127 + 8), "!metadata_blocks_[iter->second].IsErased()", 42, "The block is erased", 19);
      }
      v129 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        goto LABEL_299;
      qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[iter->second].IsErased()", 42, "The block is erased", 19);
      a1 = *((unsigned int *)v122 + 8);
LABEL_156:
      if (*(_QWORD *)(v215 + 88) <= a1)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
        v130 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v131 = qword_255795648;
          for (k = qword_255795650; v131 != k; v131 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v131)(*(_QWORD *)(v131 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
        }
        v133 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (byte_255795670)
        {
          qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
          goto LABEL_165;
        }
LABEL_299:
        abort();
      }
LABEL_165:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v215 + 56) + 8 * ((*(_QWORD *)(v215 + 80) + a1) / 0x1F))
                    + 132 * ((*(_QWORD *)(v215 + 80) + a1) % 0x1F)
                    + 20))
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
        v134 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          a1 = qword_255795648;
          for (m = qword_255795650; a1 != m; a1 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))a1)(*(_QWORD *)(a1 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
        }
        v136 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_299;
        qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
      }
      v137 = *((_DWORD *)v122 + 8);
      if (v137 != -1)
      {
        v138 = v217;
        a1 = (unint64_t)&v217;
LABEL_177:
        v139 = (uint64_t **)a1;
        if (v138)
        {
          do
          {
            a1 = (unint64_t)v138;
            v140 = *((_DWORD *)v138 + 7);
            if (v140 > v137)
            {
              v138 = *(uint64_t **)a1;
              goto LABEL_177;
            }
            if (v140 >= v137)
              goto LABEL_120;
            v138 = *(uint64_t **)(a1 + 8);
          }
          while (v138);
          v139 = (uint64_t **)(a1 + 8);
        }
        v141 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v141 + 7) = v137;
        *v141 = 0;
        v141[1] = 0;
        v141[2] = a1;
        *v139 = v141;
        if (*v216)
        {
          v216 = (uint64_t **)*v216;
          v141 = *v139;
        }
        v142 = v217;
        v38 = v141 == v217;
        *((_BYTE *)v141 + 24) = v141 == v217;
        if (!v38)
        {
          do
          {
            v143 = v141[2];
            if (*(_BYTE *)(v143 + 24))
              break;
            v144 = *(uint64_t **)(v143 + 16);
            v145 = *v144;
            if (*v144 == v143)
            {
              v148 = v144[1];
              if (!v148 || (v149 = *(unsigned __int8 *)(v148 + 24), v146 = (_BYTE *)(v148 + 24), v149))
              {
                if (*(uint64_t **)v143 == v141)
                {
                  *(_BYTE *)(v143 + 24) = 1;
                  *((_BYTE *)v144 + 24) = 0;
                  v152 = *(_QWORD *)(v143 + 8);
                  *v144 = v152;
                  if (v152)
                    goto LABEL_199;
                }
                else
                {
                  v150 = *(uint64_t **)(v143 + 8);
                  v151 = *v150;
                  *(_QWORD *)(v143 + 8) = *v150;
                  if (v151)
                  {
                    *(_QWORD *)(v151 + 16) = v143;
                    v144 = *(uint64_t **)(v143 + 16);
                  }
                  v150[2] = (uint64_t)v144;
                  *(_QWORD *)(*(_QWORD *)(v143 + 16) + 8 * (**(_QWORD **)(v143 + 16) != v143)) = v150;
                  *v150 = v143;
                  *(_QWORD *)(v143 + 16) = v150;
                  v144 = (uint64_t *)v150[2];
                  v143 = *v144;
                  *((_BYTE *)v150 + 24) = 1;
                  *((_BYTE *)v144 + 24) = 0;
                  v152 = *(_QWORD *)(v143 + 8);
                  *v144 = v152;
                  if (v152)
LABEL_199:
                    *(_QWORD *)(v152 + 16) = v144;
                }
                *(_QWORD *)(v143 + 16) = v144[2];
                *(_QWORD *)(v144[2] + 8 * (*(_QWORD *)v144[2] != (_QWORD)v144)) = v143;
                *(_QWORD *)(v143 + 8) = v144;
LABEL_118:
                v144[2] = v143;
                break;
              }
            }
            else if (!v145 || (v147 = *(unsigned __int8 *)(v145 + 24), v146 = (_BYTE *)(v145 + 24), v147))
            {
              if (*(uint64_t **)v143 == v141)
              {
                v154 = v141[1];
                *(_QWORD *)v143 = v154;
                if (v154)
                {
                  *(_QWORD *)(v154 + 16) = v143;
                  v144 = *(uint64_t **)(v143 + 16);
                }
                v141[2] = (uint64_t)v144;
                *(_QWORD *)(*(_QWORD *)(v143 + 16) + 8 * (**(_QWORD **)(v143 + 16) != v143)) = v141;
                v141[1] = v143;
                *(_QWORD *)(v143 + 16) = v141;
                v144 = (uint64_t *)v141[2];
                *((_BYTE *)v141 + 24) = 1;
                *((_BYTE *)v144 + 24) = 0;
                v143 = v144[1];
                v153 = *(uint64_t **)v143;
                v144[1] = *(_QWORD *)v143;
                if (!v153)
                  goto LABEL_117;
              }
              else
              {
                *(_BYTE *)(v143 + 24) = 1;
                *((_BYTE *)v144 + 24) = 0;
                v143 = v144[1];
                v153 = *(uint64_t **)v143;
                v144[1] = *(_QWORD *)v143;
                if (!v153)
                  goto LABEL_117;
              }
              v153[2] = (uint64_t)v144;
LABEL_117:
              *(_QWORD *)(v143 + 16) = v144[2];
              *(_QWORD *)(v144[2] + 8 * (*(_QWORD *)v144[2] != (_QWORD)v144)) = v143;
              *(_QWORD *)v143 = v144;
              goto LABEL_118;
            }
            *(_BYTE *)(v143 + 24) = 1;
            v141 = v144;
            *((_BYTE *)v144 + 24) = v144 == v142;
            *v146 = 1;
          }
          while (v144 != v142);
        }
        ++v218;
      }
LABEL_120:
      if (++v112 != 27)
        continue;
      break;
    }
    v155 = v108[1];
    if (v155)
    {
      do
      {
        v156 = (_QWORD **)v155;
        v155 = (_QWORD *)*v155;
      }
      while (v155);
    }
    else
    {
      do
      {
        v156 = (_QWORD **)v108[2];
        v38 = *v156 == v108;
        v108 = v156;
      }
      while (!v38);
    }
    v15 = v156;
    if (v156 != v221)
      continue;
    break;
  }
  v157 = (char *)*a5;
  a5[1] = *a5;
  v158 = a5 + 1;
  v159 = v218;
  v212 = a5 + 2;
  if (v218 <= (uint64_t)(a5[2] - (_QWORD)v157) >> 2)
  {
    v160 = v157;
    v10 = v215;
    *v158 = (uint64_t)v157;
    if (v159 <= (uint64_t)(*v212 - (_QWORD)v157) >> 2)
      goto LABEL_239;
    goto LABEL_236;
  }
  v10 = v215;
  if (v218 >> 62)
    goto LABEL_300;
  v160 = (char *)operator new(4 * v218);
  *a5 = v160;
  a5[1] = v160;
  a5[2] = &v160[4 * v159];
  if (v157)
  {
    operator delete(v157);
    v160 = (char *)*a5;
    v159 = v218;
  }
  *v158 = (uint64_t)v160;
  if (v159 > (uint64_t)(*v212 - (_QWORD)v160) >> 2)
  {
LABEL_236:
    if (!(v159 >> 62))
    {
      v161 = (char *)operator new(4 * v159);
      *a5 = v161;
      a5[1] = v161;
      a5[2] = &v161[4 * v159];
      if (v160)
        operator delete(v160);
      goto LABEL_239;
    }
LABEL_300:
    sub_22316E078();
  }
LABEL_239:
  v162 = v216;
  if (v216 != &v217)
  {
    v214 = (_QWORD *)(v10 + 8);
    do
    {
      v163 = *((unsigned int *)v162 + 7);
      if (*(_QWORD *)(v10 + 88) <= v163
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
      {
LABEL_298:
        abort();
      }
      v164 = *(_QWORD *)(v10 + 80) + v163;
      v165 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * (v164 / 0x1F));
      v166 = v164 % 0x1F;
      if (*(_BYTE *)(v165 + 132 * v166 + 20))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_298;
        }
        v167 = *(_QWORD *)(v10 + 80) + v163;
        v166 = v167 % 0x1F;
        v165 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * (v167 / 0x1F));
      }
      v168 = v165 + 132 * v166;
      v169 = *(_QWORD *)v168;
      v249 = *(_DWORD *)(v168 + 8);
      v248 = v169;
      *(_QWORD *)&v236[4] = v169;
      *(_DWORD *)v236 = 0;
      LODWORD(v237) = v249;
      v170 = sub_22351A45C(v214, (int *)v236);
      if (v170)
      {
        v172 = *((_DWORD *)v170 + 8);
      }
      else
      {
        if (*(_QWORD *)(v10 + 32) == *(_DWORD *)(v10 + 120))
        {
          v173 = 0;
          if ((_DWORD)v163 == -1)
            goto LABEL_255;
          goto LABEL_254;
        }
        v172 = sub_223A95018(v10, (uint64_t)&v248, 0);
      }
      v173 = *(_QWORD *)(v10 + 128) + 168 * v172;
      if ((_DWORD)v163 == v172)
        goto LABEL_255;
LABEL_254:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/VertexManager.cpp", 241, (uint64_t)"index == cell_index", 19, (uint64_t)"Cell index does not match.", 26, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_298;
      }
LABEL_255:
      if (!*(_DWORD *)(v173 + 24))
      {
        sub_223A94280(v10, (uint64_t)&v248, 0);
        v182 = v162[1];
        if (!v182)
          goto LABEL_289;
        goto LABEL_287;
      }
      v174 = *(_QWORD *)(v173 + 56);
      v175 = 0uLL;
      while (v174 != *(_QWORD *)(v173 + 64))
      {
        if (*(_DWORD *)v174 != -1)
        {
          v176 = (float)*(unsigned __int8 *)(v174 + 168);
          if (!*(_BYTE *)(v174 + 168))
            v176 = 0.1;
          v177 = *(_QWORD *)(v174 + 32);
          v171.i64[0] = *(_QWORD *)v177;
          v171.i32[2] = *(_DWORD *)(v177 + 8);
          v175 = (int8x16_t)vaddq_f32((float32x4_t)v175, vmulq_n_f32(v171, v176));
        }
        v174 += 224;
      }
      v178 = (float32x2_t)vextq_s8(v175, v175, 8uLL).u64[0];
      v179 = vmulq_n_f32((float32x4_t)v175, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v175.i8, *(float32x2_t *)v175.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v175.i8, 1), *(float32x2_t *)v175.i8, 1), v178, v178).f32[0]));
      *(_DWORD *)(v173 + 160) = v179.i32[2];
      *(_QWORD *)(v173 + 152) = v179.i64[0];
      v180 = (char *)*v158;
      if ((unint64_t)*v158 < *v212)
      {
        *(_DWORD *)v180 = v163;
        v181 = (uint64_t)(v180 + 4);
        goto LABEL_286;
      }
      v183 = (char *)*a5;
      v184 = (uint64_t)&v180[-*a5];
      v185 = v184 >> 2;
      v186 = (v184 >> 2) + 1;
      if (v186 >> 62)
        goto LABEL_300;
      v187 = *v212 - (_QWORD)v183;
      if (v187 >> 1 > v186)
        v186 = v187 >> 1;
      if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
        v188 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v188 = v186;
      if (v188)
      {
        if (v188 >> 62)
          sub_223174E94();
        v189 = operator new(4 * v188);
        v190 = &v189[4 * v185];
        *v190 = v163;
        v181 = (uint64_t)(v190 + 1);
        v191 = v180 - v183;
        if (v180 == v183)
          goto LABEL_284;
LABEL_278:
        v192 = v191 - 4;
        if (v192 < 0x2C)
          goto LABEL_305;
        if ((unint64_t)(v180 - v189 - v184) < 0x20)
          goto LABEL_305;
        v193 = (v192 >> 2) + 1;
        v194 = 4 * (v193 & 0x7FFFFFFFFFFFFFF8);
        v195 = &v180[-v194];
        v190 = (_DWORD *)((char *)v190 - v194);
        v196 = &v189[4 * v185 - 16];
        v197 = v180 - 16;
        v198 = v193 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v199 = *(_OWORD *)v197;
          *(v196 - 1) = *((_OWORD *)v197 - 1);
          *v196 = v199;
          v196 -= 2;
          v197 -= 32;
          v198 -= 8;
        }
        while (v198);
        v180 = v195;
        if (v193 != (v193 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_305:
          do
          {
            v200 = *((_DWORD *)v180 - 1);
            v180 -= 4;
            *--v190 = v200;
          }
          while (v180 != v183);
        }
        goto LABEL_284;
      }
      v189 = 0;
      v190 = (_DWORD *)(4 * v185);
      *(_DWORD *)(4 * v185) = v163;
      v181 = 4 * v185 + 4;
      v191 = v180 - v183;
      if (v180 != v183)
        goto LABEL_278;
LABEL_284:
      *a5 = v190;
      a5[1] = v181;
      a5[2] = &v189[4 * v188];
      if (v183)
        operator delete(v183);
LABEL_286:
      *v158 = v181;
      v10 = v215;
      v182 = v162[1];
      if (!v182)
      {
        do
        {
LABEL_289:
          v201 = (uint64_t **)v162[2];
          v38 = *v201 == (uint64_t *)v162;
          v162 = v201;
        }
        while (!v38);
        goto LABEL_241;
      }
      do
      {
LABEL_287:
        v201 = (uint64_t **)v182;
        v182 = (uint64_t *)*v182;
      }
      while (v182);
LABEL_241:
      v162 = v201;
    }
    while (v201 != &v217);
  }
  sub_223198030((uint64_t)&v216, v217);
  sub_223AB20F8(v221[0]);
  sub_22391CC34((uint64_t *)__dst, (uint64_t *)__p, (uint64_t)v227);
  if (v226 < 0)
  {
    operator delete(__p[0]);
    if ((v224 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_296:
    operator delete(__dst[0]);
    return kdebug_trace();
  }
  if (v224 < 0)
    goto LABEL_296;
  return kdebug_trace();
}

void sub_223AB1B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;
  void *v59;

  if (a51 < 0)
    operator delete(__p);
  operator delete(v59);
  operator delete(v58);
  sub_2231874DC((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_223AB1BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  operator delete(v55);
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_223AB1BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_223AB1BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_QWORD *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_223AB20F8(a43);
  sub_22392AA18((uint64_t)&a46);
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_223AB1C70(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4)
{
  uint64_t v5;
  char *v7;
  float32x4_t v8;
  float32x4_t v9;
  unsigned int v10;
  int8x8_t v11;
  signed int v12;
  uint64_t **v13;
  int *v14;
  uint64_t **v15;
  int8x8_t *v16;
  int v17;
  int v18;
  signed int v19;
  int8x8_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  int8x8_t v50;

  if (a2 == a3)
    return;
  v5 = a2;
  while (2)
  {
    a4.i64[0] = *(_QWORD *)v5;
    a4.i32[2] = *(_DWORD *)(v5 + 8);
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v9 = vaddq_f32(vmulq_n_f32(a4, **(float **)a1), v8);
    v10 = -*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 232);
    v11 = vand_s8((int8x8_t)vdup_n_s32(v10), (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v9.f32)));
    v12 = vcvtms_s32_f32(v9.f32[2]) & v10;
    v13 = *(uint64_t ***)(a1 + 16);
    v15 = v13 + 1;
    v14 = (int *)v13[1];
    if (!v14)
    {
      v16 = (int8x8_t *)(v13 + 1);
      goto LABEL_21;
    }
    do
    {
      while (1)
      {
        v16 = (int8x8_t *)v14;
        v17 = v14[8];
        if (v11.i32[0] != v17)
          break;
        v18 = v16[4].i32[1];
        if (v11.i32[1] != v18)
        {
          if (v11.i32[1] < v18)
            goto LABEL_7;
          if (v18 >= v11.i32[1])
            goto LABEL_24;
          goto LABEL_18;
        }
        v19 = v16[5].i32[0];
        if (v12 >= v19)
        {
          if (v19 >= v12)
            goto LABEL_24;
          goto LABEL_18;
        }
LABEL_7:
        v14 = (int *)*v16;
        v15 = (uint64_t **)v16;
        if (!*(_QWORD *)v16)
          goto LABEL_21;
      }
      if (v11.i32[0] < v17)
        goto LABEL_7;
      if (v17 >= v11.i32[0])
        goto LABEL_24;
LABEL_18:
      v14 = (int *)v16[1];
    }
    while (v14);
    v15 = (uint64_t **)&v16[1];
LABEL_21:
    v20 = v16;
    v50 = v11;
    v16 = (int8x8_t *)operator new(0x48uLL);
    v16[4] = v50;
    v16[5].i32[0] = v12;
    v16[7] = 0;
    v16[8] = 0;
    v16[6] = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (int8x8_t)v20;
    *v15 = (uint64_t *)v16;
    v21 = (uint64_t *)**v13;
    v22 = (uint64_t *)v16;
    if (v21)
    {
      *v13 = v21;
      v22 = *v15;
    }
    sub_2231A9A8C(v13[1], v22);
    v13[2] = (uint64_t *)((char *)v13[2] + 1);
LABEL_24:
    v24 = (unint64_t *)v16[7];
    v23 = (unint64_t)v16[8];
    if ((unint64_t)v24 >= v23)
    {
      v30 = (unint64_t *)v16[6];
      v31 = ((char *)v24 - (char *)v30) >> 6;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 58)
        sub_223AA8F6C();
      v33 = v23 - (_QWORD)v30;
      if (v33 >> 5 > v32)
        v32 = v33 >> 5;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFC0)
        v34 = 0x3FFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 58)
          sub_223174E94();
        v35 = (char *)operator new(v34 << 6);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[64 * v31];
      *(_QWORD *)v36 = *(_QWORD *)v5;
      *((_DWORD *)v36 + 2) = *(_DWORD *)(v5 + 8);
      *(_QWORD *)(v36 + 12) = *(_QWORD *)(v5 + 12);
      *((_DWORD *)v36 + 5) = *(_DWORD *)(v5 + 20);
      v37 = *(_QWORD *)(v5 + 32);
      *((_QWORD *)v36 + 3) = *(_QWORD *)(v5 + 24);
      *((_QWORD *)v36 + 4) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v30 = (unint64_t *)v16[6];
        v24 = (unint64_t *)v16[7];
      }
      v40 = &v35[64 * v34];
      a4 = *(float32x4_t *)(v5 + 40);
      *(float32x4_t *)(v36 + 40) = a4;
      *((_DWORD *)v36 + 14) = *(_DWORD *)(v5 + 56);
      v7 = v36 + 64;
      if (v24 == v30)
      {
        v16[6] = (int8x8_t)v36;
        v16[7] = (int8x8_t)v7;
        v16[8] = (int8x8_t)v40;
      }
      else
      {
        v41 = 0;
        do
        {
          v42 = &v36[v41 * 8];
          v43 = &v24[v41];
          v44 = v24[v41 - 8];
          *((_DWORD *)v42 - 14) = v24[v41 - 7];
          *((_QWORD *)v42 - 8) = v44;
          v45 = *(unint64_t *)((char *)&v24[v41 - 6] - 4);
          *((_DWORD *)v42 - 11) = *((_DWORD *)&v24[v41 - 5] - 1);
          *(_QWORD *)(v42 - 52) = v45;
          *(_OWORD *)(v42 - 40) = *(_OWORD *)&v24[v41 - 5];
          *(v43 - 5) = 0;
          *(v43 - 4) = 0;
          a4 = *(float32x4_t *)&v24[v41 - 3];
          *((_DWORD *)v42 - 2) = v24[v41 - 1];
          *(float32x4_t *)(v42 - 24) = a4;
          v41 -= 8;
        }
        while (&v24[v41] != v30);
        v30 = (unint64_t *)v16[6];
        v46 = (unint64_t *)v16[7];
        v16[6] = (int8x8_t)&v36[v41 * 8];
        v16[7] = (int8x8_t)v7;
        v16[8] = (int8x8_t)v40;
        while (v46 != v30)
        {
          v47 = (std::__shared_weak_count *)*(v46 - 4);
          if (v47)
          {
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v46 -= 8;
        }
      }
      if (v30)
        operator delete(v30);
    }
    else
    {
      v25 = *(_QWORD *)v5;
      *((_DWORD *)v24 + 2) = *(_DWORD *)(v5 + 8);
      *v24 = v25;
      v26 = *(_QWORD *)(v5 + 12);
      *((_DWORD *)v24 + 5) = *(_DWORD *)(v5 + 20);
      *(unint64_t *)((char *)v24 + 12) = v26;
      v27 = *(_QWORD *)(v5 + 32);
      v24[3] = *(_QWORD *)(v5 + 24);
      v24[4] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      a4 = *(float32x4_t *)(v5 + 40);
      *((_DWORD *)v24 + 14) = *(_DWORD *)(v5 + 56);
      *(float32x4_t *)(v24 + 5) = a4;
      v7 = (char *)(v24 + 8);
    }
    v16[7] = (int8x8_t)v7;
    v5 += 64;
    if (v5 != a3)
      continue;
    break;
  }
}

void sub_223AB2004()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223AB2018(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5F0A8;
  result[1] = v3;
  return result;
}

uint64_t sub_223AB204C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5F0A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_223AB2068(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a1 + 8))(a2, *a3, a4);
}

uint64_t sub_223AB2080(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d5recon3pcm11FrameBundleEiRNSt3__16vectorINS1_16PointObservationENS5_9allocatorIS7_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d5recon3pcm11FrameBundleEiRNSt3__16vectorINS1_16PointObservationENS5_9allocatorIS7_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d5recon3pcm11FrameBundleEiRNSt3__16vectorINS1_16PointObservationENS5_9allocatorIS7_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d5recon3pcm11FrameBundleEiRNSt3__16vectorINS1_16PointObservationENS5_9allocatorIS7_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223AB20EC()
{
  return &unk_24EC5F128;
}

void sub_223AB20F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    sub_223AB20F8(*a1);
    sub_223AB20F8(a1[1]);
    v2 = a1[6];
    if (v2)
    {
      v3 = a1[7];
      v4 = (void *)a1[6];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 32);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 64;
        }
        while (v3 != v2);
        v4 = (void *)a1[6];
      }
      a1[7] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

_QWORD *sub_223AB21A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v10;
  uint64_t (***v11)();
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  __n128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float v70;
  BOOL v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned int i;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int128 v87;
  __int128 v88;
  _QWORD *result;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  int v93;
  unsigned int j;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  int v104;
  unint64_t v105;
  _BYTE v106[24];
  _BYTE *v107;
  _BYTE v108[24];
  _BYTE *v109;
  _BYTE v110[24];
  _BYTE *v111;
  _QWORD v112[3];
  _QWORD *v113;
  uint64_t (**v114)();
  std::__shared_weak_count *v115;
  const void **v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  v113 = 0;
  switch(a4)
  {
    case 1:
      v10 = (std::__shared_weak_count *)sub_223AB2D24;
      goto LABEL_6;
    case 2:
      v10 = (std::__shared_weak_count *)sub_223AB2D88;
      goto LABEL_6;
    case 3:
      v10 = (std::__shared_weak_count *)sub_223AB2EB0;
      goto LABEL_6;
    case 4:
      v10 = (std::__shared_weak_count *)sub_223AB2EB8;
LABEL_6:
      v114 = &off_24EC5F158;
      v115 = v10;
      v116 = (const void **)&v114;
      sub_223AB638C(&v114, v112);
      v11 = (uint64_t (***)())v116;
      if (v116 == (const void **)&v114)
      {
        v12 = 4;
        v11 = &v114;
      }
      else
      {
        if (!v116)
          goto LABEL_11;
        v12 = 5;
      }
      (*v11)[v12]();
LABEL_11:
      v13 = *(_DWORD *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 36);
      v16 = *(_DWORD *)(a3 + 32) == v13 && *(_DWORD *)(a3 + 36) == v14;
      v17 = *(_DWORD *)(a2 + 36) == v14 && *(_DWORD *)(a2 + 32) == v13;
      if (!v17 && !v16)
      {
        if ((a4 - 3) >= 2
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/ComputeMask.cpp", 82, (uint64_t)"mode == SamplingMode::AllPass || mode == SamplingMode::SubsamplingPass", 70, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v18 = (uint64_t)v113;
        if (v113)
        {
          if (v113 == v112)
          {
            v111 = v110;
            (*(void (**)(_QWORD *, _BYTE *))(v112[0] + 24))(v112, v110);
            goto LABEL_38;
          }
          v18 = (*(uint64_t (**)(void))(*v113 + 16))();
        }
        v111 = (_BYTE *)v18;
LABEL_38:
        sub_2231F761C(*(NSObject **)(a1 + 32), (const void **)&v114);
        sub_2231F8060((uint64_t)v114, &v102);
        v21 = v115;
        if (!v115)
          goto LABEL_42;
        p_shared_owners = (unint64_t *)&v115->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          v24 = v102;
          v26 = *(_QWORD *)(v102 + 8);
          v25 = *(std::__shared_weak_count **)(v102 + 16);
          if (!v25)
            goto LABEL_47;
        }
        else
        {
LABEL_42:
          v24 = v102;
          v26 = *(_QWORD *)(v102 + 8);
          v25 = *(std::__shared_weak_count **)(v102 + 16);
          if (!v25)
            goto LABEL_47;
        }
        v27 = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          if (!v26)
            goto LABEL_54;
          goto LABEL_48;
        }
LABEL_47:
        if (!v26)
          goto LABEL_54;
LABEL_48:
        if (*(_BYTE *)(v24 + 81))
        {
          (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(**(_QWORD **)(v24 + 8) + 96))(&v114, *(_QWORD *)(v24 + 8), 1);
          v30 = *(_QWORD *)(v24 + 64);
          v31 = *(_QWORD *)(v24 + 32);
          v32 = HIDWORD(v30);
          if (!*(_BYTE *)(v24 + 80))
            goto LABEL_57;
          goto LABEL_55;
        }
LABEL_54:
        v114 = 0;
        v30 = *(_QWORD *)(v24 + 64);
        v31 = *(_QWORD *)(v24 + 32);
        v32 = HIDWORD(v30);
        if (!*(_BYTE *)(v24 + 80))
          goto LABEL_57;
LABEL_55:
        if (v31)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v24 + 8) + 88))(*(_QWORD *)(v24 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v31 = *(_QWORD *)(v24 + 32);
          LODWORD(v32) = *(_DWORD *)(v24 + 68);
        }
LABEL_57:
        v33 = *(unsigned int *)(v24 + 76);
        v34 = (v33 * v32);
        if ((_DWORD)v34)
          v35 = v30 == 0;
        else
          v35 = 1;
        if (!v35)
        {
          v36 = 0;
          v37 = v31 + v34;
          do
          {
            v38 = 0;
            do
            {
              v105 = 0;
              v103 = v36;
              v104 = v38;
              if (!v111)
                sub_223198474();
              *(_BYTE *)(v31 + v38++) = (*(uint64_t (**)(_BYTE *, char *, unint64_t *, int *, int *))(*(_QWORD *)v111 + 48))(v111, (char *)&v105 + 4, &v105, &v104, &v103);
            }
            while (v30 != v38);
            v31 += v33;
            ++v36;
          }
          while (v31 != v37);
        }
        v39 = v114;
        v114 = 0;
        if (v39)
          (*((void (**)(uint64_t (**)()))*v39 + 1))(v39);
        v40 = v102;
        v102 = 0uLL;
        v41 = (std::__shared_weak_count *)a6[1];
        *(_OWORD *)a6 = v40;
        if (!v41)
          goto LABEL_72;
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
            goto LABEL_73;
        }
        else
        {
LABEL_72:
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
LABEL_73:
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
              v47 = v111;
              if (v111 == v110)
                goto LABEL_77;
              goto LABEL_136;
            }
          }
        }
        v47 = v111;
        if (v111 == v110)
        {
LABEL_77:
          v48 = 4;
          v47 = v110;
          goto LABEL_138;
        }
        goto LABEL_136;
      }
      v91 = a6;
      if (!v16)
      {
        v20 = (uint64_t)v113;
        if (v113)
        {
          if (v113 == v112)
          {
            v107 = v106;
            (*(void (**)(_QWORD *, _BYTE *))(v112[0] + 24))(v112, v106);
            goto LABEL_118;
          }
          v20 = (*(uint64_t (**)(void))(*v113 + 16))();
        }
        v107 = (_BYTE *)v20;
LABEL_118:
        sub_2231F761C(*(NSObject **)(a1 + 32), (const void **)&v114);
        sub_2231F8060((uint64_t)v114, &v102);
        v72 = v115;
        if (!v115)
          goto LABEL_122;
        v73 = (unint64_t *)&v115->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
          v97 = *(_DWORD *)(a1 + 36);
          if (!v97)
            goto LABEL_132;
        }
        else
        {
LABEL_122:
          v97 = *(_DWORD *)(a1 + 36);
          if (!v97)
            goto LABEL_132;
        }
        if (*(_DWORD *)(a1 + 32))
        {
          for (i = 0; i != v97; ++i)
          {
            v101 = *(unsigned int *)(a1 + 32);
            if ((_DWORD)v101)
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              v79 = 0;
              v99 = *(_DWORD *)(a2 + 40);
              v80 = *(_QWORD *)(a2 + 24) + 4 * *(_DWORD *)(a2 + 44) * i;
              v81 = *(_DWORD *)(a1 + 40);
              v82 = *(_QWORD *)(a1 + 24) + 2 * *(_DWORD *)(a1 + 44) * i;
              v83 = *(_DWORD *)(v102 + 72);
              v84 = *(_QWORD *)(v102 + 32) + *(_DWORD *)(v102 + 76) * i;
              do
              {
                _H1 = *(_WORD *)(v82 + 2 * v77);
                __asm { FCVT            S1, H1 }
                LODWORD(v114) = *(_DWORD *)(v80 + 4 * v76);
                v104 = v79;
                v105 = __PAIR64__(_S1, i);
                if (!v107)
                  sub_223198474();
                *(_BYTE *)(v84 + v78) = (*(uint64_t (**)(_BYTE *, uint64_t (***)(), char *, unint64_t *, int *))(*(_QWORD *)v107 + 48))(v107, &v114, (char *)&v105 + 4, &v105, &v104);
                ++v79;
                v78 += v83;
                v77 += v81;
                v76 += v99;
              }
              while (v101 != v79);
            }
          }
        }
LABEL_132:
        v87 = v102;
        v102 = 0uLL;
        *v91 = v87;
        v47 = v107;
        if (v107 == v106)
        {
          v48 = 4;
          v47 = v106;
          goto LABEL_138;
        }
        goto LABEL_136;
      }
      v19 = (uint64_t)v113;
      if (!v113)
      {
LABEL_32:
        v109 = (_BYTE *)v19;
        goto LABEL_83;
      }
      if (v113 != v112)
      {
        v19 = (*(uint64_t (**)(void))(*v113 + 16))();
        goto LABEL_32;
      }
      v109 = v108;
      (*(void (**)(_QWORD *, _BYTE *))(v112[0] + 24))(v112, v108);
LABEL_83:
      if ((*(_DWORD *)(a3 + 32) != *(_DWORD *)(a1 + 32) || *(_DWORD *)(a3 + 36) != *(_DWORD *)(a1 + 36))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/include/Reconstruction/Mapper/ComputeMask.h", 205, (uint64_t)"active_depth_dt.Size() == size", 30, (uint64_t)"active_depth_dt size mismatch", 29, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_2231F761C(*(NSObject **)(a1 + 32), (const void **)&v114);
      sub_2231F8060((uint64_t)v114, &v102);
      v50 = v115;
      if (!v115)
        goto LABEL_90;
      v51 = (unint64_t *)&v115->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v92 = a3;
        v93 = *(_DWORD *)(a1 + 36);
        if (!v93)
          goto LABEL_135;
      }
      else
      {
LABEL_90:
        v92 = a3;
        v93 = *(_DWORD *)(a1 + 36);
        if (!v93)
          goto LABEL_135;
      }
      if (a5)
        v53 = 0.8;
      else
        v53 = 0.4;
      if (*(_DWORD *)(a1 + 32))
      {
        for (j = 0; j != v93; ++j)
        {
          v100 = *(unsigned int *)(a1 + 32);
          if ((_DWORD)v100)
          {
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v98 = *(_DWORD *)(a2 + 40);
            v58 = *(_QWORD *)(a2 + 24) + 4 * *(_DWORD *)(a2 + 44) * j;
            v59 = *(_DWORD *)(a1 + 40);
            v60 = *(_QWORD *)(a1 + 24) + 2 * *(_DWORD *)(a1 + 44) * j;
            v61 = *(_DWORD *)(v102 + 72);
            v62 = *(_QWORD *)(v102 + 32) + *(_DWORD *)(v102 + 76) * j;
            v63 = *(_QWORD *)(v92 + 24) + 4 * *(_DWORD *)(v92 + 44) * j;
            do
            {
              v49.n128_u32[0] = *(_DWORD *)(v58 + 4 * v55);
              _H1 = *(_WORD *)(v60 + 2 * v54);
              __asm { FCVT            S1, H1 }
              _NF = *(float *)(v63 + 4 * v57) > 7.0 && _S1 < 6.0;
              if (_NF
                && (_S1 <= 3.5
                  ? (v70 = 0.16)
                  : _S1 <= 4.5
                  ? (v70 = (float)((float)(_S1 + -3.5) * (float)((float)(v53 * 0.5) * (float)(_S1 + -3.5))) + 0.16)
                  : (v70 = (float)((float)((float)(v53 * 0.5) + (float)(v53 * -4.5)) + 0.16) + (float)(v53 * _S1)),
                    v49.n128_f32[0] > -65504.0 ? (v71 = (float)(_S1 - v49.n128_f32[0]) < v70) : (v71 = 1),
                    v71))
              {
                v64 = 0;
              }
              else
              {
                LODWORD(v114) = *(_DWORD *)(v58 + 4 * v55);
                v104 = v57;
                v105 = __PAIR64__(LODWORD(_S1), j);
                if (!v109)
                  sub_223198474();
                v64 = (*(uint64_t (**)(_BYTE *, uint64_t (***)(), char *, unint64_t *, int *, __n128))(*(_QWORD *)v109 + 48))(v109, &v114, (char *)&v105 + 4, &v105, &v104, v49);
              }
              *(_BYTE *)(v62 + v56) = v64;
              ++v57;
              v56 += v61;
              v55 += v98;
              v54 += v59;
            }
            while (v100 != v57);
          }
        }
      }
LABEL_135:
      v88 = v102;
      v102 = 0uLL;
      *v91 = v88;
      v47 = v109;
      if (v109 == v108)
      {
        v48 = 4;
        v47 = v108;
        goto LABEL_138;
      }
LABEL_136:
      if (!v47)
      {
        result = v113;
        if (v113 == v112)
          goto LABEL_139;
        goto LABEL_141;
      }
      v48 = 5;
LABEL_138:
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
      result = v113;
      if (v113 == v112)
      {
LABEL_139:
        v90 = 4;
        result = v112;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v90))();
      }
LABEL_141:
      if (!result)
        return result;
      v90 = 5;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v90))();
    default:
      goto LABEL_11;
  }
}

void sub_223AB2BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  char *v37;
  uint64_t v38;

  v37 = a36;
  if (a36 == &a33)
  {
    v38 = 4;
    v37 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  sub_223167354(a10);
  _Unwind_Resume(a1);
}

BOOL sub_223AB2D24(unsigned __int8 a1, unsigned __int8 a2, float a3, float a4)
{
  if (a4 <= -65504.0)
    return 0;
  if (a3 <= -65504.0 || ((a2 | a1) & 7) == 0)
    return 1;
  return vabds_f32(a3, a4) > 0.06;
}

BOOL sub_223AB2D88(unsigned int a1, int a2, float a3, float a4)
{
  float v5;
  uint64_t v6;
  unint64_t v7;

  if (a4 <= -65504.0)
    return 0;
  if (a4 <= 4.5)
  {
    v5 = vabds_f32(a3, a4);
    if (v5 <= 0.8)
    {
      if (v5 <= 0.4)
      {
        if (v5 <= 0.2)
        {
          if (v5 <= 0.08)
          {
            v6 = 0;
            if (v5 > 0.015 && !(a1 % 0xC))
            {
              HIDWORD(v7) = -1431655765 * a2;
              LODWORD(v7) = -1431655765 * a2;
              return (v7 >> 2) < 0x15555556;
            }
            return v6;
          }
          else
          {
            return ((a2 | a1) & 7) == 0;
          }
        }
        else
        {
          return ((a2 | a1) & 3) == 0;
        }
      }
      else
      {
        return ((a2 | a1) & 1) == 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return a3 <= 4.5 && a3 > -65504.0;
  }
}

uint64_t sub_223AB2EB0()
{
  return 1;
}

BOOL sub_223AB2EB8(int a1, int a2)
{
  return ((a2 | a1) & 3) == 0;
}

float sub_223AB2EC8(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t i;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  int v50;
  unsigned int v51;
  const void *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  int v84;
  const void *v85;
  uint64_t (**v86)();
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t (**v101)();
  uint64_t v102;
  std::__shared_weak_count *v103;
  NSObject *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  uint64_t v110;

  v6 = a1;
  v7 = *(_DWORD *)(a2 + 32);
  if (v7 != *(_DWORD *)(a1 + 56) || *(_DWORD *)(a2 + 36) != *(_DWORD *)(a1 + 60))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/ComputeMask.cpp", 110, (uint64_t)"semantics_baseline.Size() == size", 33, (uint64_t)"semantics_baseline size mismatch", 32, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_187;
    }
    v7 = *(_DWORD *)(v6 + 56);
  }
  if ((*(_DWORD *)(a3 + 64) != v7 || *(_DWORD *)(a3 + 68) != *(_DWORD *)(v6 + 60))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/ComputeMask.cpp", 111, (uint64_t)"novelty_mask.Size() == size", 27, (uint64_t)"novelty mask size mismatch", 26, (void (*)(void **))sub_22457406C))
  {
LABEL_187:
    abort();
  }
  v101 = &off_24EC21420;
  sub_2231F9830(a3, &v102);
  if ((_DWORD)v104 && HIDWORD(v104))
  {
    sub_2231F761C(v104, (const void **)&v107);
    sub_2231F8060(v107, &v105);
    v8 = v108;
    if (v108)
    {
      p_shared_owners = (unint64_t *)&v108->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_223A4A0CC((uint64_t)&v101, v105);
    v11 = v103;
    if (!v103)
    {
LABEL_21:
      v14 = *(_DWORD *)(v6 + 56);
      v15 = *(_DWORD *)(v6 + 60);
      if (!v15)
        goto LABEL_56;
      goto LABEL_22;
    }
  }
  else
  {
    v105 = 0;
    v106 = 0;
    v11 = v103;
    if (!v103)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    goto LABEL_21;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = *(_DWORD *)(v6 + 56);
  v15 = *(_DWORD *)(v6 + 60);
  if (!v15)
  {
LABEL_56:
    v33 = (float)0 / (float)(v14 * v15);
    if (v33 < a4)
      goto LABEL_180;
LABEL_57:
    v34 = v105;
    v35 = *(_QWORD *)(v105 + 8);
    v36 = *(std::__shared_weak_count **)(v105 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (v39)
      {
        if (!v35)
          goto LABEL_76;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (!v35)
          goto LABEL_76;
      }
      v35 = *(_QWORD *)(v34 + 8);
      v40 = *(std::__shared_weak_count **)(v34 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        do
          v43 = __ldaxr(v41);
        while (__stlxr(v43 - 1, v41));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else if (!v35)
    {
      goto LABEL_76;
    }
    if (*(_BYTE *)(v34 + 81))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v35 + 96))(&v110, v35, 0);
      v44 = *(_QWORD *)(a3 + 8);
      v45 = *(std::__shared_weak_count **)(a3 + 16);
      if (!v45)
        goto LABEL_81;
      goto LABEL_77;
    }
LABEL_76:
    v110 = 0;
    v44 = *(_QWORD *)(a3 + 8);
    v45 = *(std::__shared_weak_count **)(a3 + 16);
    if (!v45)
      goto LABEL_81;
LABEL_77:
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (!v44)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_81:
    if (!v44)
      goto LABEL_86;
LABEL_82:
    if (*(_BYTE *)(a3 + 81))
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a3 + 8) + 96))(&v109, *(_QWORD *)(a3 + 8), 1);
      v49 = *(unsigned int *)(v34 + 64);
      v50 = *(_DWORD *)(v34 + 76);
      if (v50 != (_DWORD)v49)
      {
LABEL_107:
        v60 = *(_QWORD *)(v34 + 8);
        v61 = *(std::__shared_weak_count **)(v34 + 16);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
          do
            v64 = __ldaxr(v62);
          while (__stlxr(v64 - 1, v62));
          if (v64)
          {
            if (!v60)
              goto LABEL_128;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            if (!v60)
              goto LABEL_128;
          }
          v60 = *(_QWORD *)(v34 + 8);
          v65 = *(std::__shared_weak_count **)(v34 + 16);
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
            do
              v68 = __ldaxr(v66);
            while (__stlxr(v68 - 1, v66));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
        }
        else if (!v60)
        {
          goto LABEL_128;
        }
        if (*(_BYTE *)(v34 + 81))
        {
          (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)v60 + 96))(&v101, v60, 0);
          v69 = *(_QWORD *)(a3 + 8);
          v70 = *(std::__shared_weak_count **)(a3 + 16);
          if (!v70)
            goto LABEL_133;
          goto LABEL_129;
        }
LABEL_128:
        v101 = 0;
        v69 = *(_QWORD *)(a3 + 8);
        v70 = *(std::__shared_weak_count **)(a3 + 16);
        if (!v70)
          goto LABEL_133;
LABEL_129:
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
        do
          v73 = __ldaxr(v71);
        while (__stlxr(v73 - 1, v71));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          if (!v69)
            goto LABEL_138;
          goto LABEL_134;
        }
LABEL_133:
        if (!v69)
          goto LABEL_138;
LABEL_134:
        if (*(_BYTE *)(a3 + 81))
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a3 + 8) + 96))(&v107, *(_QWORD *)(a3 + 8), 1);
          if (!*(_DWORD *)(v34 + 64))
            goto LABEL_172;
          goto LABEL_139;
        }
LABEL_138:
        v107 = 0;
        if (!*(_DWORD *)(v34 + 64))
          goto LABEL_172;
LABEL_139:
        v74 = *(_DWORD *)(v34 + 68);
        if (!v74)
          goto LABEL_172;
        v75 = *(unsigned int *)(v34 + 76);
        v76 = *(unsigned int *)(a3 + 76);
        v77 = *(char **)(v34 + 56);
        if (*(_BYTE *)(v34 + 80) && v77)
        {
          v78 = *(_QWORD *)(v34 + 8);
          v79 = *(std::__shared_weak_count **)(v34 + 16);
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
            do
              v82 = __ldaxr(v80);
            while (__stlxr(v82 - 1, v80));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v78 + 88))(v78, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
          v77 = *(char **)(v34 + 56);
        }
        v83 = *(char **)(a3 + 32);
        if (*(_BYTE *)(a3 + 80) && v83)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v83 = *(char **)(a3 + 32);
        }
        v84 = v74 - 1;
        if (v74 != 1)
        {
          if ((_DWORD)v49)
          {
            while ((v77
                  || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))&& (v83|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
            {
              memmove(v83, v77, v49);
              v77 += v75;
              v83 += v76;
              if (!--v84)
                goto LABEL_161;
            }
LABEL_160:
            abort();
          }
LABEL_172:
          v85 = (const void *)v107;
          v107 = 0;
          if (v85)
            (*(void (**)(const void *))(*(_QWORD *)v85 + 8))(v85);
          v86 = v101;
          v101 = 0;
          if (v86)
            (*((void (**)(uint64_t (**)()))*v86 + 1))(v86);
          goto LABEL_176;
        }
LABEL_161:
        if (!(_DWORD)v49 || v77)
        {
          if ((_DWORD)v49 && !v83)
          {
LABEL_168:
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_160;
            }
            v83 = 0;
            goto LABEL_171;
          }
          if (!(_DWORD)v49)
            goto LABEL_172;
        }
        else
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_160;
          }
          if (!v83)
            goto LABEL_168;
        }
LABEL_171:
        memmove(v83, v77, v49);
        goto LABEL_172;
      }
LABEL_87:
      if (v50 != *(_DWORD *)(a3 + 76))
        goto LABEL_107;
      v51 = *(_DWORD *)(v34 + 68);
      v52 = *(const void **)(v34 + 56);
      if (*(_BYTE *)(v34 + 80) && v52)
      {
        v53 = *(_QWORD *)(v34 + 8);
        v54 = *(std::__shared_weak_count **)(v34 + 16);
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          do
            v57 = __ldaxr(v55);
          while (__stlxr(v57 - 1, v55));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v53 + 88))(v53, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
        v52 = *(const void **)(v34 + 56);
      }
      v58 = v51 * (unint64_t)v49;
      if (v58
        && !v52
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_106:
        abort();
      }
      v59 = *(void **)(a3 + 32);
      if (*(_BYTE *)(a3 + 80) && v59)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v59 = *(void **)(a3 + 32);
      }
      if (!v58 || v59)
      {
        if (!v58)
        {
LABEL_176:
          v87 = v109;
          v109 = 0;
          if (v87)
            (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
          v88 = v110;
          v110 = 0;
          if (v88)
            (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
          goto LABEL_180;
        }
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_106;
      }
      memmove(v59, v52, v58);
      goto LABEL_176;
    }
LABEL_86:
    v109 = 0;
    v49 = *(unsigned int *)(v34 + 64);
    v50 = *(_DWORD *)(v34 + 76);
    if (v50 != (_DWORD)v49)
      goto LABEL_107;
    goto LABEL_87;
  }
LABEL_22:
  if (!v14)
    goto LABEL_56;
  v94 = v15;
  v98 = 0;
  v96 = 0;
  v16 = (unsigned __int8 *)&qword_255795680;
  v95 = v6;
  do
  {
    v17 = *(unsigned int *)(v6 + 56);
    if ((_DWORD)v17)
    {
      v18 = *(_DWORD *)(a2 + 40);
      v99 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v96);
      v19 = *(_DWORD *)(v6 + 48);
      v20 = *(_QWORD *)(v6 + 24);
      v21 = v20 + 2 * (*(_DWORD *)(v6 + 68) * v96);
      v100 = *(_DWORD *)(v105 + 72);
      v97 = *(_QWORD *)(v105 + 32) + (*(_DWORD *)(v105 + 76) * v96);
      if (v20)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = *(_QWORD *)(v21 + 2 * v24);
          if (v25 <= BYTE6(v25))
            v25 >>= 48;
          if ((v25 & 0xFF00) != 0xFE00 && *(unsigned __int8 *)(v99 + v22) == 255)
          {
            *(_BYTE *)(v97 + v23) |= 2u;
            ++v98;
          }
          v24 += v19;
          v23 += v100;
          v22 += v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        for (i = 0; i != v17; ++i)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v27 = atomic_load(v16);
          if ((v27 & 1) == 0 && __cxa_guard_acquire((__guard *)v16))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release((__guard *)v16);
          }
          v28 = v16;
          if (!byte_255795670 || byte_255795678)
          {
            v30 = qword_255795648;
            v29 = qword_255795650;
            while (v30 != v29)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v30)(*(_QWORD *)(v30 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              v30 += 16;
            }
          }
          v16 = v28;
          v31 = atomic_load(v28);
          if ((v31 & 1) == 0 && __cxa_guard_acquire((__guard *)v28))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release((__guard *)v28);
          }
          if (!byte_255795670)
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          v32 = *(_QWORD *)(v21 + 2 * (i * v19));
          if (v32 <= BYTE6(v32))
            v32 >>= 48;
          if ((v32 & 0xFF00) != 0xFE00 && *(unsigned __int8 *)(v99 + (v18 * i)) == 255)
          {
            *(_BYTE *)(v97 + (v100 * i)) |= 2u;
            ++v98;
          }
        }
      }
    }
    ++v96;
    v6 = v95;
  }
  while (v96 != v94);
  v33 = (float)v98 / (float)(*(_DWORD *)(v95 + 56) * *(_DWORD *)(v95 + 60));
  if (v33 >= a4)
    goto LABEL_57;
LABEL_180:
  v89 = v106;
  if (v106)
  {
    v90 = (unint64_t *)&v106->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  return v33;
}

void sub_223AB3A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  if (a19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
    v28 = *(_QWORD *)(v26 - 120);
    *(_QWORD *)(v26 - 120) = 0;
    if (!v28)
    {
LABEL_3:
      v29 = *(_QWORD *)(v26 - 112);
      *(_QWORD *)(v26 - 112) = 0;
      if (!v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = *(_QWORD *)(v26 - 120);
    *(_QWORD *)(v26 - 120) = 0;
    if (!v28)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v26 - 112);
  *(_QWORD *)(v26 - 112) = 0;
  if (!v29)
  {
LABEL_4:
    sub_223167354((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223AB3BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223AB3BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223AB3BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223AB3C10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  int32x4_t v18;
  float v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  std::__shared_weak_count *v26;

  kdebug_trace();
  sub_223AB21A8(a1, a2, a3, a6, a7, a8);
  v18.i64[0] = *(_QWORD *)(a5 + 32);
  v18.i64[1] = *(_QWORD *)(a4 + 56);
  v19 = 0.0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v18))) & 1) == 0)
    v19 = sub_223AB2EC8(a4, a5, *a8, a9);
  kdebug_trace();
  v20 = *a8;
  v24 = &off_24EC21420;
  sub_2231FBAA0(v20, &v25);
  sub_223AB3DC8(a1, a2, a4, a5, (uint64_t)&v24, a3, v19, a9);
  v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_223AB3D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223AB3D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231BEEB4((uint64_t)va);
  sub_223167354(v2);
  _Unwind_Resume(a1);
}

void sub_223AB3DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223AB3DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int32x4_t v38;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v57;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  std::mutex *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void **v69;
  void *v70;
  void **v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  void **v75;
  void *v76;
  void *v77;
  int v78;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::mutex *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void **v88;
  void *v89;
  void **v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  void **v94;
  void *v95;
  void *v96;
  int v97;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  std::mutex *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void **v107;
  void *v108;
  void **v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  void **v113;
  void *v114;
  void *v115;
  int v116;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  std::mutex *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void **v126;
  void *v127;
  void **v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  void **v132;
  void *v133;
  void *v134;
  int v135;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  std::mutex *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void **v145;
  void *v146;
  void **v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  void **v151;
  void *v152;
  void *v153;
  int v154;
  __n128 *v157;
  void **v158;
  size_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  std::mutex *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void **v167;
  void *v168;
  void **v169;
  void *v170;
  uint64_t v171;
  unint64_t v172;
  void **v173;
  void *v174;
  void *v175;
  int v176;
  __n128 *v179;
  void **v180;
  size_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  std::mutex *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void **v189;
  void *v190;
  void **v191;
  void *v192;
  uint64_t v193;
  unint64_t v194;
  void **v195;
  void *v196;
  void *v197;
  int v198;
  __n128 *v201;
  void **v202;
  size_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  std::mutex *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void **v211;
  void *v212;
  void **v213;
  void *v214;
  uint64_t v215;
  unint64_t v216;
  void **v217;
  void *v218;
  void *v219;
  int v220;
  __n128 *v223;
  void **v224;
  size_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::string *v230;
  uint64_t v231;
  uint64_t v232;
  std::string::size_type size;
  std::string *v234;
  std::string::size_type v235;
  std::string::size_type v236;
  int v237;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  std::string *v244;
  uint64_t v245;
  uint64_t v246;
  std::string::size_type v247;
  std::string *v248;
  std::string::size_type v249;
  std::string::size_type v250;
  int v251;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  void *v278[2];
  __int128 v279;
  int v280;
  std::string v281;
  std::string v282;
  uint64_t v283;
  int v284;
  int v285;
  int v286;
  int v287;
  float v288;
  float v289;
  char v290;
  void *__p[2];
  __int128 v292;
  _DWORD v293[26];
  const char *v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  _QWORD v298[9];
  int v299;
  int v300;
  uint64_t v301;

  v301 = *MEMORY[0x24BDAC8D0];
  v289 = a7;
  v288 = a8;
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    return;
  v13 = sub_2241471F8();
  v14 = v13[2];
  if (!v14)
  {
    v15 = v13;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = v15[2];
  }
  v16 = *(_QWORD *)(v14 + 64);
  v17 = (std::mutex *)(v16 + 32);
  std::mutex::lock((std::mutex *)(v16 + 32));
  v19 = *(_QWORD *)(v16 + 96);
  v18 = *(_QWORD *)(v16 + 104);
  std::mutex::unlock(v17);
  if (v19 == v18)
    return;
  v294 = "cv3d.recon.";
  v295 = 11;
  v296 = "Volumetric.NoveltyMask";
  v297 = 22;
  sub_2231A9820((uint64_t)&v294, (uint64_t)v298, 0, 0, (std::string *)__p);
  v20 = (void *)BYTE7(v292);
  v21 = (void **)__p[0];
  v22 = __p[1];
  sub_2241471F8();
  if ((char)v20 >= 0)
    v23 = __p;
  else
    v23 = v21;
  if ((char)v20 >= 0)
    v24 = v20;
  else
    v24 = v22;
  v25 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v23, v24);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
    goto LABEL_28;
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_28;
  v26 = sub_2241471F8();
  v27 = v26[2];
  if (!v27)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v27 = v26[2];
  }
  v28 = *(_QWORD *)(v27 + 64);
  v29 = (std::mutex *)(v28 + 32);
  std::mutex::lock((std::mutex *)(v28 + 32));
  v31 = *(_QWORD *)(v28 + 96);
  v30 = *(_QWORD *)(v28 + 104);
  std::mutex::unlock(v29);
  if (v31 != v30)
  {
    v294 = "cv3d.recon.";
    v295 = 11;
    v296 = "Stats.Volumetric.NoveltyMask";
    v297 = 28;
    sub_2231A9820((uint64_t)&v294, (uint64_t)v298, 0, 0, &v282);
    v32 = HIBYTE(v282.__r_.__value_.__r.__words[2]);
    v33 = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
    sub_2241471F8();
    if ((v32 & 0x80u) == 0)
      v34 = &v282;
    else
      v34 = (std::string *)v33;
    if ((v32 & 0x80u) == 0)
      v35 = v32;
    else
      v35 = *((_QWORD *)&v33 + 1);
    v36 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v34, v35);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) ^ 1;
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SBYTE7(v292) & 0x80000000) == 0)
        goto LABEL_26;
LABEL_29:
      operator delete(__p[0]);
      if ((v37 & 1) != 0)
        return;
      goto LABEL_30;
    }
    operator delete(v282.__r_.__value_.__l.__data_);
    if (SBYTE7(v292) < 0)
      goto LABEL_29;
  }
  else
  {
LABEL_28:
    v37 = 1;
    if (SBYTE7(v292) < 0)
      goto LABEL_29;
  }
LABEL_26:
  if ((v37 & 1) != 0)
    return;
LABEL_30:
  v38.i64[0] = *(_QWORD *)(a2 + 32);
  v38.i64[1] = *(_QWORD *)(a5 + 32);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v38))) & 1) != 0)
    return;
  v287 = 0;
  v286 = 0;
  if (*(_DWORD *)(a6 + 32))
    _ZF = *(_DWORD *)(a6 + 36) == 0;
  else
    _ZF = 1;
  v40 = _ZF;
  v266 = v40;
  LODWORD(v294) = 1065353216;
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC216B8;
  sub_22321B00C((_DWORD *)(a2 + 32), &v294, &v282.__r_.__value_.__r.__words[1]);
  v262 = a5;
  v263 = a1;
  v260 = a3;
  v261 = a4;
  LOBYTE(__p[0]) = 0;
  v294 = (const char *)&off_24EC21B18;
  sub_2233B32D0((_DWORD *)(a2 + 32), __p, &v295);
  v265 = *(_DWORD *)(a2 + 36);
  if (v265 && *(_DWORD *)(a2 + 32))
  {
    v41 = 0;
    v264 = a6;
    while (1)
    {
      v267 = v41;
      v42 = *(_QWORD *)(a6 + 24) + 4 * (*(_DWORD *)(a6 + 44) * v41);
      if (v266)
        v42 = 0;
      v277 = v42;
      v43 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v43)
        break;
LABEL_41:
      v41 = v267 + 1;
      a6 = v264;
      if (v267 + 1 == v265)
        goto LABEL_66;
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v270 = *(_QWORD *)(v263 + 24) + 2 * (*(_DWORD *)(v263 + 44) * v41);
    v275 = *(_DWORD *)(a2 + 40);
    v276 = *(_DWORD *)(v263 + 40);
    v269 = *(_QWORD *)(a2 + 24) + 4 * (*(_DWORD *)(a2 + 44) * v41);
    v274 = v284;
    v273 = v283 + 4 * (v285 * v41);
    v272 = *(_DWORD *)(v262 + 40);
    v271 = *(_QWORD *)(v262 + 24) + (*(_DWORD *)(v262 + 44) * v41);
    v49 = v299;
    v50 = v298[0];
    v51 = v298[0] + (v300 * v41);
    v52 = (float *)v42;
    while (1)
    {
      if ((*(_BYTE *)(v271 + v44) & 1) != 0)
      {
        if (!v50
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v55 = v51 + v48;
        *(_WORD *)v55 = -256;
        *(_BYTE *)(v55 + 2) = 0;
        ++v286;
        if (v277)
        {
LABEL_61:
          v53 = -2.0;
          if (*v52 > 7.0)
            goto LABEL_49;
        }
      }
      else
      {
        if ((*(_BYTE *)(v271 + v44) & 2) != 0)
        {
          if (!v50
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v54 = v51 + v48;
          *(_WORD *)v54 = 255;
          *(_BYTE *)(v54 + 2) = 0;
          ++v287;
        }
        if (v277)
          goto LABEL_61;
      }
      _H1 = *(_WORD *)(v270 + 2 * v45);
      v57 = *(float *)(v269 + 4 * v46);
      __asm { FCVT            S1, H1 }
      if (_NF ^ _VF | _ZF)
      {
        v53 = -2.0;
        if (_S1 > -65504.0)
          goto LABEL_50;
      }
      else if (vabds_f32(_S1, v57) > 0.03)
      {
        v53 = _S1 - v57;
      }
      else
      {
        v53 = -1.0;
      }
LABEL_49:
      *(float *)(v273 + 4 * v47) = v53;
LABEL_50:
      ++v52;
      v48 += v49;
      v47 += v274;
      v46 += v275;
      v45 += v276;
      v44 += v272;
      if (!--v43)
        goto LABEL_41;
    }
  }
LABEL_66:
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
  *((_QWORD *)&v292 + 1) = 22;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v62 = sub_2241471F8();
    v63 = v62[2];
    if (!v63)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v63 = v62[2];
    }
    v64 = *(_QWORD *)(v63 + 64);
    v65 = (std::mutex *)(v64 + 32);
    std::mutex::lock((std::mutex *)(v64 + 32));
    v67 = *(_QWORD *)(v64 + 96);
    v66 = *(_QWORD *)(v64 + 104);
    std::mutex::unlock(v65);
    if (v67 != v66)
    {
      v68 = (void *)BYTE7(v279);
      v69 = (void **)v278[0];
      v70 = v278[1];
      sub_2241471F8();
      v71 = (char)v68 >= 0 ? v278 : v69;
      v72 = (char)v68 >= 0 ? v68 : v70;
      v73 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v71, v72);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_223AB5B80(v73, (uint64_t)&v282);
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v74 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v74 = (unint64_t)v278[1];
  if (v74 >= 0x11)
  {
    v75 = v278;
    if (SBYTE7(v279) < 0)
      v75 = (void **)v278[0];
    v76 = *v75;
    v77 = v75[1];
    v78 = *((unsigned __int8 *)v75 + 16);
    if (v76 == (void *)0x6365722E64337663 && v77 == (void *)0x73746174532E6E6FLL && v78 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
  *((_QWORD *)&v292 + 1) = 22;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v81 = sub_2241471F8();
    v82 = v81[2];
    if (!v82)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v82 = v81[2];
    }
    v83 = *(_QWORD *)(v82 + 64);
    v84 = (std::mutex *)(v83 + 32);
    std::mutex::lock((std::mutex *)(v83 + 32));
    v86 = *(_QWORD *)(v83 + 96);
    v85 = *(_QWORD *)(v83 + 104);
    std::mutex::unlock(v84);
    if (v86 != v85)
    {
      v87 = (void *)BYTE7(v279);
      v88 = (void **)v278[0];
      v89 = v278[1];
      sub_2241471F8();
      v90 = (char)v87 >= 0 ? v278 : v88;
      v91 = (char)v87 >= 0 ? v87 : v89;
      v92 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v90, v91);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_223AB5C4C((double *)&qword_255788F20, v92, a2, "depth_baseline");
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v93 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v93 = (unint64_t)v278[1];
  if (v93 >= 0x11)
  {
    v94 = v278;
    if (SBYTE7(v279) < 0)
      v94 = (void **)v278[0];
    v95 = *v94;
    v96 = v94[1];
    v97 = *((unsigned __int8 *)v94 + 16);
    if (v95 == (void *)0x6365722E64337663 && v96 == (void *)0x73746174532E6E6FLL && v97 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
  *((_QWORD *)&v292 + 1) = 22;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v100 = sub_2241471F8();
    v101 = v100[2];
    if (!v101)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v101 = v100[2];
    }
    v102 = *(_QWORD *)(v101 + 64);
    v103 = (std::mutex *)(v102 + 32);
    std::mutex::lock((std::mutex *)(v102 + 32));
    v105 = *(_QWORD *)(v102 + 96);
    v104 = *(_QWORD *)(v102 + 104);
    std::mutex::unlock(v103);
    if (v105 != v104)
    {
      v106 = (void *)BYTE7(v279);
      v107 = (void **)v278[0];
      v108 = v278[1];
      sub_2241471F8();
      v109 = (char)v106 >= 0 ? v278 : v107;
      v110 = (char)v106 >= 0 ? v106 : v108;
      v111 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v109, v110);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_223AB5D88(v111, v263);
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v112 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v112 = (unint64_t)v278[1];
  if (v112 >= 0x11)
  {
    v113 = v278;
    if (SBYTE7(v279) < 0)
      v113 = (void **)v278[0];
    v114 = *v113;
    v115 = v113[1];
    v116 = *((unsigned __int8 *)v113 + 16);
    if (v114 == (void *)0x6365722E64337663 && v115 == (void *)0x73746174532E6E6FLL && v116 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
  *((_QWORD *)&v292 + 1) = 22;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v119 = sub_2241471F8();
    v120 = v119[2];
    if (!v120)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v120 = v119[2];
    }
    v121 = *(_QWORD *)(v120 + 64);
    v122 = (std::mutex *)(v121 + 32);
    std::mutex::lock((std::mutex *)(v121 + 32));
    v124 = *(_QWORD *)(v121 + 96);
    v123 = *(_QWORD *)(v121 + 104);
    std::mutex::unlock(v122);
    if (v124 != v123)
    {
      v125 = (void *)BYTE7(v279);
      v126 = (void **)v278[0];
      v127 = v278[1];
      sub_2241471F8();
      v128 = (char)v125 >= 0 ? v278 : v126;
      v129 = (char)v125 >= 0 ? v125 : v127;
      v130 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v128, v129);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_223AB5E58(v130, (uint64_t)&v294);
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v131 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v131 = (unint64_t)v278[1];
  if (v131 >= 0x11)
  {
    v132 = v278;
    if (SBYTE7(v279) < 0)
      v132 = (void **)v278[0];
    v133 = *v132;
    v134 = v132[1];
    v135 = *((unsigned __int8 *)v132 + 16);
    if (v133 == (void *)0x6365722E64337663 && v134 == (void *)0x73746174532E6E6FLL && v135 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Stats.Volumetric.NoveltyMask.count";
  *((_QWORD *)&v292 + 1) = 34;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v138 = sub_2241471F8();
    v139 = v138[2];
    if (!v139)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v139 = v138[2];
    }
    v140 = *(_QWORD *)(v139 + 64);
    v141 = (std::mutex *)(v140 + 32);
    std::mutex::lock((std::mutex *)(v140 + 32));
    v143 = *(_QWORD *)(v140 + 96);
    v142 = *(_QWORD *)(v140 + 104);
    std::mutex::unlock(v141);
    if (v143 != v142)
    {
      v144 = (void *)BYTE7(v279);
      v145 = (void **)v278[0];
      v146 = v278[1];
      sub_2241471F8();
      v147 = (char)v144 >= 0 ? v278 : v145;
      v148 = (char)v144 >= 0 ? v144 : v146;
      v149 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v147, v148);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_22392AA84((double *)&qword_255788F20, v149, &v286, "depth_novelty");
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v150 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v150 = (unint64_t)v278[1];
  if (v150 >= 0x11)
  {
    v151 = v278;
    if (SBYTE7(v279) < 0)
      v151 = (void **)v278[0];
    v152 = *v151;
    v153 = v151[1];
    v154 = *((unsigned __int8 *)v151 + 16);
    if (v152 == (void *)0x6365722E64337663 && v153 == (void *)0x73746174532E6E6FLL && v154 == 46)
    {
      v157 = sub_223187510();
      if ((SBYTE7(v279) & 0x80u) == 0)
        v158 = v278;
      else
        v158 = (void **)v278[0];
      if ((SBYTE7(v279) & 0x80u) == 0)
        v159 = BYTE7(v279);
      else
        v159 = (size_t)v278[1];
      sub_223532E4C(v157, v158, v159, (unsigned int *)&v286, (uint64_t)"depth_novelty", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Stats.Volumetric.NoveltyMask.count";
  *((_QWORD *)&v292 + 1) = 34;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v160 = sub_2241471F8();
    v161 = v160[2];
    if (!v161)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v161 = v160[2];
    }
    v162 = *(_QWORD *)(v161 + 64);
    v163 = (std::mutex *)(v162 + 32);
    std::mutex::lock((std::mutex *)(v162 + 32));
    v165 = *(_QWORD *)(v162 + 96);
    v164 = *(_QWORD *)(v162 + 104);
    std::mutex::unlock(v163);
    if (v165 != v164)
    {
      v166 = (void *)BYTE7(v279);
      v167 = (void **)v278[0];
      v168 = v278[1];
      sub_2241471F8();
      v169 = (char)v166 >= 0 ? v278 : v167;
      v170 = (char)v166 >= 0 ? v166 : v168;
      v171 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v169, v170);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v171 + 24))(v171))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_22399076C((double *)&qword_255788F20, v171, &v287, "semantics_novelty");
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v172 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v172 = (unint64_t)v278[1];
  if (v172 >= 0x11)
  {
    v173 = v278;
    if (SBYTE7(v279) < 0)
      v173 = (void **)v278[0];
    v174 = *v173;
    v175 = v173[1];
    v176 = *((unsigned __int8 *)v173 + 16);
    if (v174 == (void *)0x6365722E64337663 && v175 == (void *)0x73746174532E6E6FLL && v176 == 46)
    {
      v179 = sub_223187510();
      if ((SBYTE7(v279) & 0x80u) == 0)
        v180 = v278;
      else
        v180 = (void **)v278[0];
      if ((SBYTE7(v279) & 0x80u) == 0)
        v181 = BYTE7(v279);
      else
        v181 = (size_t)v278[1];
      sub_223532E4C(v179, v180, v181, (unsigned int *)&v287, (uint64_t)"semantics_novelty", 17);
    }
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Stats.Volumetric.NoveltyMask.ratio";
  *((_QWORD *)&v292 + 1) = 34;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v182 = sub_2241471F8();
    v183 = v182[2];
    if (!v183)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v183 = v182[2];
    }
    v184 = *(_QWORD *)(v183 + 64);
    v185 = (std::mutex *)(v184 + 32);
    std::mutex::lock((std::mutex *)(v184 + 32));
    v187 = *(_QWORD *)(v184 + 96);
    v186 = *(_QWORD *)(v184 + 104);
    std::mutex::unlock(v185);
    if (v187 != v186)
    {
      v188 = (void *)BYTE7(v279);
      v189 = (void **)v278[0];
      v190 = v278[1];
      sub_2241471F8();
      v191 = (char)v188 >= 0 ? v278 : v189;
      v192 = (char)v188 >= 0 ? v188 : v190;
      v193 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v191, v192);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v193 + 24))(v193))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_223AB5F2C(v193, (int *)&v289);
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v194 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v194 = (unint64_t)v278[1];
  if (v194 >= 0x11)
  {
    v195 = v278;
    if (SBYTE7(v279) < 0)
      v195 = (void **)v278[0];
    v196 = *v195;
    v197 = v195[1];
    v198 = *((unsigned __int8 *)v195 + 16);
    if (v196 == (void *)0x6365722E64337663 && v197 == (void *)0x73746174532E6E6FLL && v198 == 46)
    {
      v201 = sub_223187510();
      if ((SBYTE7(v279) & 0x80u) == 0)
        v202 = v278;
      else
        v202 = (void **)v278[0];
      if ((SBYTE7(v279) & 0x80u) == 0)
        v203 = BYTE7(v279);
      else
        v203 = (size_t)v278[1];
      sub_2231897A8((uint64_t *)v201, v202, v203, &v289, (uint64_t)"novelty_ratio", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v292 = "Stats.Volumetric.NoveltyMask.ratio";
  *((_QWORD *)&v292 + 1) = 34;
  sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, (std::string *)v278);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v204 = sub_2241471F8();
    v205 = v204[2];
    if (!v205)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v205 = v204[2];
    }
    v206 = *(_QWORD *)(v205 + 64);
    v207 = (std::mutex *)(v206 + 32);
    std::mutex::lock((std::mutex *)(v206 + 32));
    v209 = *(_QWORD *)(v206 + 96);
    v208 = *(_QWORD *)(v206 + 104);
    std::mutex::unlock(v207);
    if (v209 != v208)
    {
      v210 = (void *)BYTE7(v279);
      v211 = (void **)v278[0];
      v212 = v278[1];
      sub_2241471F8();
      v213 = (char)v210 >= 0 ? v278 : v211;
      v214 = (char)v210 >= 0 ? v210 : v212;
      v215 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v213, v214);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
      {
        *(_OWORD *)__p = 0u;
        v292 = 0u;
        v293[0] = 728325608;
        kdebug_trace();
        sub_22361F758((double *)&qword_255788F20, v215, (int *)&v288, "novelty_threshold");
        sub_2231874DC((uint64_t)__p);
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v292 = 0u;
  v293[0] = 728325624;
  kdebug_trace();
  v216 = BYTE7(v279);
  if (SBYTE7(v279) < 0)
    v216 = (unint64_t)v278[1];
  if (v216 >= 0x11)
  {
    v217 = v278;
    if (SBYTE7(v279) < 0)
      v217 = (void **)v278[0];
    v218 = *v217;
    v219 = v217[1];
    v220 = *((unsigned __int8 *)v217 + 16);
    if (v218 == (void *)0x6365722E64337663 && v219 == (void *)0x73746174532E6E6FLL && v220 == 46)
    {
      v223 = sub_223187510();
      if ((SBYTE7(v279) & 0x80u) == 0)
        v224 = v278;
      else
        v224 = (void **)v278[0];
      if ((SBYTE7(v279) & 0x80u) == 0)
        v225 = BYTE7(v279);
      else
        v225 = (size_t)v278[1];
      sub_2231897A8((uint64_t *)v223, v224, v225, &v288, (uint64_t)"novelty_threshold", 17);
    }
  }
  kdebug_trace();
  if (SBYTE7(v279) < 0)
    operator delete(v278[0]);
  if (*(_DWORD *)(v261 + 32) && *(_DWORD *)(v261 + 36))
  {
    __p[0] = "cv3d.recon.";
    __p[1] = (void *)11;
    *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
    *((_QWORD *)&v292 + 1) = 22;
    sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, &v281);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v226 = sub_2241471F8();
      v227 = sub_2241486EC((uint64_t)v226);
      if (!sub_2241053B4(v227))
      {
        v228 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
        v229 = *(_OWORD *)&v281.__r_.__value_.__l.__data_;
        sub_2241471F8();
        v230 = (v228 & 0x80u) == 0 ? &v281 : (std::string *)v229;
        v231 = (v228 & 0x80u) == 0 ? v228 : *((_QWORD *)&v229 + 1);
        v232 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v230, v231);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v232 + 24))(v232))
        {
          *(_OWORD *)v278 = 0u;
          v279 = 0u;
          v280 = 728325608;
          kdebug_trace();
          sub_223AB60D0((uint64_t)__p, v261);
          sub_223AB6000(v232, __p);
          sub_223167354((uint64_t)&__p[1]);
          sub_2231874DC((uint64_t)v278);
        }
      }
    }
    *(_OWORD *)v278 = 0u;
    v279 = 0u;
    v280 = 728325624;
    kdebug_trace();
    size = HIBYTE(v281.__r_.__value_.__r.__words[2]);
    if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v281.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      v234 = &v281;
      if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v234 = (std::string *)v281.__r_.__value_.__r.__words[0];
      v235 = v234->__r_.__value_.__r.__words[0];
      v236 = v234->__r_.__value_.__l.__size_;
      v237 = v234->__r_.__value_.__s.__data_[16];
      if (v235 == 0x6365722E64337663 && v236 == 0x73746174532E6E6FLL && v237 == 46)
      {
        sub_223187510();
        __p[0] = &off_24EC21B18;
        sub_2231C5C38((_DWORD *)(v261 + 32), &__p[1]);
        sub_223AB6A28(v261, (uint64_t)__p);
        sub_223167354((uint64_t)&__p[1]);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v281.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(v260 + 56) && *(_DWORD *)(v260 + 60))
  {
    __p[0] = "cv3d.recon.";
    __p[1] = (void *)11;
    *(_QWORD *)&v292 = "Volumetric.NoveltyMask";
    *((_QWORD *)&v292 + 1) = 22;
    sub_2231A9820((uint64_t)__p, (uint64_t)v293, 0, 0, &v281);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v240 = sub_2241471F8();
      v241 = sub_2241486EC((uint64_t)v240);
      if (!sub_2241053B4(v241))
      {
        v242 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
        v243 = *(_OWORD *)&v281.__r_.__value_.__l.__data_;
        sub_2241471F8();
        v244 = (v242 & 0x80u) == 0 ? &v281 : (std::string *)v243;
        v245 = (v242 & 0x80u) == 0 ? v242 : *((_QWORD *)&v243 + 1);
        v246 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v244, v245);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v246 + 24))(v246))
        {
          *(_OWORD *)v278 = 0u;
          v279 = 0u;
          v280 = 728325608;
          kdebug_trace();
          sub_223AB6210((uint64_t)__p, v260);
          sub_223AB6140(v246, __p);
          sub_223167354((uint64_t)&__p[1]);
          sub_2231874DC((uint64_t)v278);
        }
      }
    }
    *(_OWORD *)v278 = 0u;
    v279 = 0u;
    v280 = 728325624;
    kdebug_trace();
    v247 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
    if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v247 = v281.__r_.__value_.__l.__size_;
    if (v247 >= 0x11)
    {
      v248 = &v281;
      if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v248 = (std::string *)v281.__r_.__value_.__r.__words[0];
      v249 = v248->__r_.__value_.__r.__words[0];
      v250 = v248->__r_.__value_.__l.__size_;
      v251 = v248->__r_.__value_.__s.__data_[16];
      if (v249 == 0x6365722E64337663 && v250 == 0x73746174532E6E6FLL && v251 == 46)
      {
        sub_223187510();
        __p[0] = &off_24EC21B18;
        sub_2231C5C38((_DWORD *)(v260 + 56), &__p[1]);
        sub_2231C59E4(v260, (uint64_t)__p, (_BOOL8)&v290);
        sub_223167354((uint64_t)&__p[1]);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v281.__r_.__value_.__l.__data_);
  }
  v254 = (std::__shared_weak_count *)v296;
  if (v296)
  {
    v255 = (unint64_t *)(v296 + 8);
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = (std::__shared_weak_count *)v282.__r_.__value_.__r.__words[2];
  if (v282.__r_.__value_.__r.__words[2])
  {
    v258 = (unint64_t *)(v282.__r_.__value_.__r.__words[2] + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
}

void sub_223AB5930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  sub_223167354(v63 + 8);
  sub_2231874DC((uint64_t)&a27);
  if (a40 < 0)
  {
    operator delete(__p);
    sub_223167354(a9);
    sub_223167354(a10);
    _Unwind_Resume(a1);
  }
  sub_223167354(a9);
  sub_223167354(a10);
  _Unwind_Resume(a1);
}

void sub_223AB5B80(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[17];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 16;
    strcpy(__p, "depth_difference");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_223AB652C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223AB5C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB5C4C(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22390B564((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223AB5D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB5D88(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 9;
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    strcpy((char *)__p, "depth_new");
    v4 = sub_2241471F8();
    sub_22390BF54((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223AB5E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB5E58(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 7;
    strcpy((char *)__p, "novelty");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_223A9F3A8((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223AB5F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB5F2C(uint64_t a1, int *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 13;
    strcpy((char *)__p, "novelty_ratio");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22361FE58((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223AB5FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB6000(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[23];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    strcpy(__p, "semantics_baseline_rgb");
    v7 = 22;
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231C6B28((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223AB60B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AB60D0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24EC21B18;
  sub_2231C5C38((_DWORD *)(a2 + 32), (_WORD *)(a1 + 8));
  return sub_223AB6A28(a2, a1);
}

void sub_223AB612C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223AB6140(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[18];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 17;
    strcpy(__p, "semantics_new_rgb");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231C6B28((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223AB61F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AB6210(uint64_t a1, uint64_t a2)
{
  char v5;

  *(_QWORD *)a1 = &off_24EC21B18;
  sub_2231C5C38((_DWORD *)(a2 + 56), (_WORD *)(a1 + 8));
  return sub_2231C59E4(a2, a1, (_BOOL8)&v5);
}

void sub_223AB6270(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223AB6288()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223AB629C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5F158;
  result[1] = v3;
  return result;
}

uint64_t sub_223AB62D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5F158;
  a2[1] = v2;
  return result;
}

uint64_t sub_223AB62EC(uint64_t a1, float *a2, float *a3, unsigned int *a4, unsigned int *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float, float))(a1 + 8))(*a4, *a5, *a2, *a3);
}

uint64_t sub_223AB6304(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000022465F7B3)
    return a1 + 8;
  if (((v3 & 0x800000022465F7B3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000022465F7B3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000022465F7B3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_223AB6380()
{
  return &unk_24EC5F1D8;
}

_QWORD *sub_223AB638C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_223AB6520(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

uint64_t sub_223AB652C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_223AB6664(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223AB6630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223AB6664@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_223AB6894(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_223AB6810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223AB6828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223AB6854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AB6880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AB6894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  _OWORD v15[2];
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v16 = &off_24EC1F958;
  sub_22390C94C(a2, (uint64_t)&v17);
  sub_2231F9F68((uint64_t)&v16, (uint64_t)&v14);
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v8 = v14;
  v9 = v15[0];
  v14 = 0uLL;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v15 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_223AB69C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223AB6A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AB6A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  _QWORD v41[3];

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(_BYTE *)(a1 + 49))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v35, v4, 0);
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v35 = 0;
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v14)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v14)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v34, *(_QWORD *)(a2 + 8), 1);
    v18 = *(_DWORD *)(a1 + 32);
    if (!v18)
      goto LABEL_46;
    goto LABEL_29;
  }
LABEL_28:
  v34 = 0;
  v18 = *(_DWORD *)(a1 + 32);
  if (!v18)
    goto LABEL_46;
LABEL_29:
  v19 = *(_DWORD *)(a1 + 36);
  if (v19)
  {
    v20 = *(unsigned int *)(a2 + 104);
    v36 = (unint64_t)*(unsigned int *)(a2 + 100) << 32;
    v37 = v18 - 1;
    v21 = *(unsigned int *)(a1 + 44);
    v38 = *(unsigned int *)(a1 + 40) | (unint64_t)(v20 << 32);
    v39 = v19 - 1;
    v40 = v21 | ((unint64_t)*(unsigned int *)(a2 + 108) << 32);
    v22 = *(unsigned __int8 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v22)
    {
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *(std::__shared_weak_count **)(a1 + 16);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v23 + 88))(v23, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v22 = *(unsigned __int8 **)(a1 + 24);
    }
    v28 = *(char **)(a2 + 32);
    if (*(_BYTE *)(a2 + 128) && v28)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v28 = *(char **)(a2 + 32);
    }
    memset(v41, 0, sizeof(v41));
    v29 = v39;
    if (v39)
    {
      v30 = v40;
      v31 = HIDWORD(v40);
      do
      {
        sub_223A4E694((_BOOL8)&v36, v41, v22, v28);
        v22 += v30;
        v28 += v31;
        --v29;
      }
      while (v29);
    }
    sub_223A4E694((_BOOL8)&v36, v41, v22, v28);
  }
LABEL_46:
  v32 = v34;
  v34 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223AB6D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223AB6D8C(uint64_t *a1)
{
  _OWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  v2 = (_OWORD *)operator new();
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  v3 = *a1;
  *a1 = (uint64_t)v2;
  if (v3)
  {
    v4 = *(void **)(v3 + 24);
    if (v4)
    {
      *(_QWORD *)(v3 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x227684CE8](v3, 0xA0C40054C61C9);
  }
  return a1;
}

void sub_223AB6E24(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = *(void **)(v3 + 24);
    if (v4)
    {
      *(_QWORD *)(v3 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x227684CE8](v3, 0xA0C40054C61C9);
  }
  _Unwind_Resume(exception_object);
}

void sub_223AB6E74(_DWORD *a1, uint64_t *a2, int a3)
{
  char **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;

  v6 = *(char ***)a1;
  v8 = *(char **)(*(_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v11 = *v6;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *v6) >> 2);
    v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555)
      sub_22316E078();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v11) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x1555555555555555)
        goto LABEL_46;
      v16 = (char *)operator new(12 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[12 * v12];
    *(_QWORD *)v17 = *a2;
    *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
    v10 = v17 + 12;
    if (v8 != v11)
    {
      do
      {
        v18 = *(_QWORD *)(v8 - 12);
        v8 -= 12;
        v19 = *((_DWORD *)v8 + 2);
        *(_QWORD *)(v17 - 12) = v18;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v19;
      }
      while (v8 != v11);
      v8 = *v6;
    }
    *v6 = v17;
    v6[1] = v10;
    v6[2] = &v16[12 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    v9 = *a2;
    *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v8 = v9;
    v10 = v8 + 12;
  }
  v6[1] = v10;
  v20 = *(_QWORD **)a1;
  v22 = *(char **)(*(_QWORD *)a1 + 32);
  v21 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((unint64_t)v22 < v21)
  {
    *(_DWORD *)v22 = a3;
    v23 = (uint64_t)(v22 + 4);
    goto LABEL_39;
  }
  v24 = (char *)v20[3];
  v25 = (v22 - v24) >> 2;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 62)
    sub_22316E078();
  v27 = v21 - (_QWORD)v24;
  if (v27 >> 1 > v26)
    v26 = v27 >> 1;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
    v28 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (!v28)
  {
    v29 = 0;
    v30 = (_DWORD *)(4 * v25);
    v31 = 0;
    *(_DWORD *)(4 * v25) = a3;
    v23 = 4 * v25 + 4;
    v32 = v22 - v24;
    if (v22 == v24)
      goto LABEL_37;
LABEL_31:
    v33 = v32 - 4;
    if (v33 < 0x2C)
      goto LABEL_51;
    if ((unint64_t)(v24 - v29) < 0x20)
      goto LABEL_51;
    v34 = (v33 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v36 = &v22[-v35];
    v30 = (_DWORD *)((char *)v30 - v35);
    v37 = &v29[4 * v25 - 16];
    v38 = v22 - 16;
    v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    v22 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_51:
      do
      {
        v41 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v30 = v41;
      }
      while (v22 != v24);
    }
    goto LABEL_37;
  }
  if (v28 >> 62)
LABEL_46:
    sub_223174E94();
  v29 = operator new(4 * v28);
  v30 = &v29[4 * v25];
  v31 = &v29[4 * v28];
  *v30 = a3;
  v23 = (uint64_t)(v30 + 1);
  v32 = v22 - v24;
  if (v22 != v24)
    goto LABEL_31;
LABEL_37:
  v20[3] = v30;
  v20[4] = v23;
  v20[5] = v31;
  if (v24)
    operator delete(v24);
LABEL_39:
  v20[4] = v23;
  switch(a3)
  {
    case 2:
      ++a1[4];
      break;
    case 1:
      ++a1[3];
      break;
    case 0:
      ++a1[2];
      break;
  }
}

uint64_t *sub_223AB7154@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *a1;
  *a1 = 0;
  *a2 = v4;
  result = sub_223AB6D8C(&v13);
  v6 = v13;
  v13 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    v8 = *(void **)(v7 + 24);
    if (v8)
    {
      *(_QWORD *)(v7 + 32) = v8;
      operator delete(v8);
    }
    v9 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v9);
    }
    result = (uint64_t *)MEMORY[0x227684CE8](v7, 0xA0C40054C61C9);
    v10 = v13;
    a1[1] = v14;
    *((_DWORD *)a1 + 4) = v15;
    v13 = 0;
    if (v10)
    {
      v11 = *(void **)(v10 + 24);
      if (v11)
      {
        *(_QWORD *)(v10 + 32) = v11;
        operator delete(v11);
      }
      v12 = *(void **)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(v10 + 8) = v12;
        operator delete(v12);
      }
      return (uint64_t *)MEMORY[0x227684CE8](v10, 0xA0C40054C61C9);
    }
  }
  else
  {
    a1[1] = v14;
    *((_DWORD *)a1 + 4) = v15;
  }
  return result;
}

void sub_223AB724C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223A508C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AB7260(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_OWORD *)(a1 + 52) = unk_22465F7F4;
  *(_OWORD *)(a1 + 36) = xmmword_22465F7E4;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)algn_22465F7D4;
  *(_OWORD *)(a1 + 4) = xmmword_22465F7C4;
  *(_BYTE *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  if (!*(_BYTE *)(a2 + 560)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyVolConfig.cpp", 30, (uint64_t)"ss_config.meshing.has_value()", 29, (uint64_t)"No meshing config!", 18, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_12;
  }
  v6 = 0;
  if (*(_BYTE *)(a2 + 272) && *(_BYTE *)(a2 + 976))
    v6 = *(_BYTE *)(a2 + 497) != 0;
  v8 = *(_OWORD *)(a2 + 176);
  v7 = *(_OWORD *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)a1 = v6;
  *(_OWORD *)(a1 + 4) = v10;
  *(_OWORD *)(a1 + 20) = v9;
  *(_OWORD *)(a1 + 36) = v8;
  *(_OWORD *)(a1 + 52) = v7;
  if (a3)
  {
    if (*(_BYTE *)(a2 + 328)
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyVolConfig.cpp", 41, (uint64_t)"ss_config.meshing->HasMapper(MeshingMapperType::Volumetric)", 59, (uint64_t)"Do not support volumetric mapper", 32, (void (*)(void **))sub_22457406C))
    {
      v11 = *(_BYTE *)(a2 + 504);
      v12 = *(_BYTE *)(a2 + 320);
      v13 = *(_DWORD *)(a2 + 500);
      v14 = *(_DWORD *)(a2 + 288);
      v15 = *(_DWORD *)(a2 + 368);
      v16 = *(unsigned __int8 *)(a1 + 84);
      *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 498);
      *(_BYTE *)(a1 + 70) = v11;
      *(_BYTE *)(a1 + 71) = v12;
      *(_DWORD *)(a1 + 72) = v13;
      *(_DWORD *)(a1 + 76) = v14;
      *(_DWORD *)(a1 + 80) = v15;
      if (!v16)
        *(_BYTE *)(a1 + 84) = 1;
      return a1;
    }
LABEL_12:
    abort();
  }
  return a1;
}

void sub_223AB73E8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_223C8EF84((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5F210[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223AB7638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223AB765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AB7678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223AB768C(_DWORD ***a1)
{
  return sub_223208A48(**a1, (char *)(*a1)[1]);
}

void sub_223AB7698(uint64_t a1, uint64_t a2)
{
  sub_223AB76A8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223AB76A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5F1F8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223AB785C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223AB78A0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223AB7998((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223AB7990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223AB7998(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223AB7B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AB7BA8(uint64_t a1, char *a2)
{
  _BOOL4 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  size_t v13;
  const char *v14;
  uint64_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *__src;
  char *__s;
  uint64_t *v101[3];
  int v102;
  const char *v103;
  int v104;
  const char *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  char *v111;
  std::__shared_weak_count *v112;
  _QWORD *__dst;
  __int128 v114;
  _BYTE v115[40];
  char *v116;
  _BYTE v117[20];
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  _BOOL4 v121;
  __int16 v122;
  uint64_t v123;
  _QWORD v124[5];

  v124[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 152)
    && !*(_QWORD *)(a1 + 176)
    && !*(_QWORD *)(a1 + 200)
    && !*(_QWORD *)(a1 + 224)
    && !*(_QWORD *)(a1 + 248)
    && !*(_QWORD *)(a1 + 272))
  {
    return;
  }
  if (*(_BYTE *)(a1 + 496))
  {
    v4 = *(_BYTE *)(a1 + 368) != 0;
    v5 = atomic_load((unsigned __int8 *)&qword_2540CCD68);
    if ((v5 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    v6 = atomic_load((unsigned __int8 *)&qword_2540CCD68);
    if ((v6 & 1) != 0)
      goto LABEL_11;
  }
  if (__cxa_guard_acquire(&qword_2540CCD68))
  {
    sub_22455F53C(v101);
    sub_223174DE4(v115, "cv3d.recon.mapper");
    sub_2232300E0(v101, (uint64_t)v115, &qword_2540CCD60);
    if ((v115[23] & 0x80000000) != 0)
      operator delete(*(void **)v115);
    __cxa_guard_release(&qword_2540CCD68);
  }
LABEL_11:
  v108 = qword_2540CCD60;
  if (**(int **)(qword_2540CCD60 + 56) > 3)
    return;
  v7 = *(unsigned __int8 *)(qword_2540CCD60 + 72);
  v8 = sub_22322F254(qword_2540CCD60, "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  if (!v7 && v8 == 0)
    return;
  v101[0] = &v108;
  v101[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
  v101[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
  v102 = 3;
  v103 = "unknown file";
  v104 = 49;
  v106 = 0;
  v107 = 0;
  v105 = "unknown function";
  if (a2[23] >= 0)
    v11 = a2;
  else
    v11 = *(char **)a2;
  __s = v11;
  v12 = *v101[0];
  v89 = *v101[0];
  if (*(char *)(*v101[0] + 39) < 0)
  {
    v14 = *(const char **)(v12 + 16);
    v13 = *(_QWORD *)(v12 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*v101[0] + 39);
    v14 = (const char *)(*v101[0] + 16);
  }
  v90 = *v101[0] + 16;
  v93 = *(_QWORD *)(a1 + 152);
  v94 = *(_QWORD *)(a1 + 176);
  v95 = *(char **)(a1 + 200);
  v96 = *(_QWORD *)(a1 + 224);
  v97 = *(_QWORD *)(a1 + 248);
  v98 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 320);
  v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v115);
    sub_223199C58("com.apple.cv3d", (unint64_t)v115, byte_255788F40);
    if (v115[24] && (v115[23] & 0x80000000) != 0)
      operator delete(*(void **)v115);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v17 = byte_255788F40;
  else
    v17 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v18 = byte_255788F40[23];
  else
    v18 = *(_QWORD *)&byte_255788F40[8];
  __src = v14;
  *(_QWORD *)v115 = os_log_create(v17, v14);
  v19 = &v115[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v91 = v15;
    v20 = v9;
    v21 = a2;
    v22 = v7;
    v23 = v4;
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v19 = operator new(v24 + 1);
    *(_QWORD *)&v115[16] = v18;
    *(_QWORD *)&v115[24] = v25 | 0x8000000000000000;
    *(_QWORD *)&v115[8] = v19;
    v4 = v23;
    v7 = v22;
    a2 = v21;
    v9 = v20;
    v15 = v91;
    goto LABEL_36;
  }
  v115[31] = v18;
  if (v18)
LABEL_36:
    memmove(v19, v17, v18);
  v19[v18] = 0;
  v115[32] = 1;
  v26 = (char *)&v116;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (char *)operator new(v28 + 1);
    *(_QWORD *)v117 = v13;
    *(_QWORD *)&v117[8] = v29 | 0x8000000000000000;
    v116 = v26;
  }
  else
  {
    v117[15] = v13;
    if (!v13)
    {
      LOBYTE(v116) = 0;
      v117[16] = 1;
      v27 = *(NSObject **)v115;
      if ((v117[15] & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_47;
    }
  }
  memmove(v26, __src, v13);
  v26[v13] = 0;
  v117[16] = 1;
  v27 = *(NSObject **)v115;
  if ((v117[15] & 0x80000000) == 0)
  {
LABEL_41:
    if (!v115[32])
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v116);
  if (!v115[32])
    goto LABEL_50;
LABEL_48:
  if ((v115[31] & 0x80000000) != 0)
    operator delete(*(void **)&v115[8]);
LABEL_50:
  if (*(_QWORD *)v115)
    os_release(*(void **)v115);
  if (!v9 || !*(_QWORD *)(v9 + 24))
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_QWORD *)v115 = 0x404100A02;
    *(_WORD *)&v115[8] = 2080;
    *(_QWORD *)&v115[10] = __s;
    *(_WORD *)&v115[18] = 2048;
    *(_QWORD *)&v115[20] = v93;
    *(_WORD *)&v115[28] = 2048;
    *(_QWORD *)&v115[30] = v94;
    *(_WORD *)&v115[38] = 2048;
    v116 = v95;
    *(_WORD *)v117 = 2048;
    *(_QWORD *)&v117[2] = v96;
    *(_WORD *)&v117[10] = 2048;
    *(_QWORD *)&v117[12] = v97;
    v118 = 2048;
    v119 = v98;
    v120 = 1024;
    v121 = v4;
    v122 = 2048;
    v123 = v15;
    v37 = (void *)_os_log_send_and_compose_impl();
    if (v37)
      free(v37);
    goto LABEL_124;
  }
  v92 = v15;
  v30 = _os_log_pack_size();
  v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
  v32 = (std::__shared_weak_count *)operator new();
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = v31;
  *(_QWORD *)&v109 = v31;
  *((_QWORD *)&v109 + 1) = v31;
  v111 = 0;
  v112 = 0;
  v110 = v32;
  v33 = strlen(__s);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    p_dst = operator new(v38 + 1);
    *(_QWORD *)&v114 = v34;
    *((_QWORD *)&v114 + 1) = v39 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v114) = v33;
    p_dst = &__dst;
    if (!v33)
    {
      v36 = v7;
      goto LABEL_64;
    }
  }
  v36 = v7;
  memcpy(p_dst, __s, v34);
LABEL_64:
  *((_BYTE *)p_dst + v34) = 0;
  v40 = __dst;
  v124[0] = v114;
  *(_QWORD *)((char *)v124 + 7) = *(_QWORD *)((char *)&v114 + 7);
  v41 = HIBYTE(v114);
  v42 = operator new(0x40uLL);
  v42[1] = 0;
  v42[2] = 0;
  v42[3] = off_24EC5F288;
  *v42 = &off_24EC5F238;
  v43 = v124[0];
  v42[4] = v40;
  v42[5] = v43;
  *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)((char *)v124 + 7);
  *((_BYTE *)v42 + 55) = v41;
  v124[0] = 0;
  *(_QWORD *)((char *)v124 + 7) = 0;
  v44 = v112;
  v111 = (char *)(v42 + 3);
  v112 = (std::__shared_weak_count *)v42;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_OWORD *)v115 = v109;
  v47 = v111;
  *(_QWORD *)&v115[16] = v110;
  if (v110)
  {
    v48 = (unint64_t *)&v110->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = v112;
  *(_QWORD *)&v115[24] = v47;
  *(_QWORD *)&v115[32] = v112;
  if (v112)
  {
    v51 = (unint64_t *)&v112->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    v116 = v47;
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  else
  {
    v116 = v47;
  }
  v54 = v110;
  if (v110)
  {
    v55 = (unint64_t *)&v110->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(_QWORD *)v115;
  if (v116[31] >= 0)
    v58 = v116 + 8;
  else
    v58 = (char *)*((_QWORD *)v116 + 1);
  v59 = _os_log_pack_fill();
  *(_DWORD *)v59 = 68160002;
  *(_DWORD *)(v59 + 4) = 4;
  *(_WORD *)(v59 + 8) = 2080;
  *(_QWORD *)(v59 + 10) = v58;
  *(_WORD *)(v59 + 18) = 2048;
  *(_QWORD *)(v59 + 20) = v93;
  *(_WORD *)(v59 + 28) = 2048;
  *(_QWORD *)(v59 + 30) = v94;
  *(_WORD *)(v59 + 38) = 2048;
  *(_QWORD *)(v59 + 40) = v95;
  *(_WORD *)(v59 + 48) = 2048;
  *(_QWORD *)(v59 + 50) = v96;
  *(_WORD *)(v59 + 58) = 2048;
  *(_QWORD *)(v59 + 60) = v97;
  *(_WORD *)(v59 + 68) = 2048;
  *(_QWORD *)(v59 + 70) = v98;
  *(_WORD *)(v59 + 78) = 1024;
  *(_DWORD *)(v59 + 80) = v4;
  *(_WORD *)(v59 + 84) = 2048;
  *(_QWORD *)(v59 + 86) = v92;
  v60 = operator new();
  v61 = *(unsigned __int8 *)(v89 + 39);
  v62 = *(_QWORD *)(v89 + 16);
  v63 = *(_QWORD *)(v89 + 24);
  v64 = *(_OWORD *)&v115[24];
  *(_OWORD *)(v60 + 8) = *(_OWORD *)&v115[8];
  if ((v61 & 0x80u) != 0)
    v61 = v63;
  else
    v62 = v90;
  *(_QWORD *)v60 = v57;
  *(_QWORD *)&v115[8] = 0;
  *(_QWORD *)&v115[16] = 0;
  *(_OWORD *)(v60 + 24) = v64;
  *(_QWORD *)&v115[24] = 0;
  *(_QWORD *)&v115[32] = 0;
  *(_QWORD *)(v60 + 40) = v62;
  *(_QWORD *)(v60 + 48) = v61;
  *(_BYTE *)(v60 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v109 = v60;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v109);
  v65 = v109;
  *(_QWORD *)&v109 = 0;
  if (v65)
  {
    v66 = *(std::__shared_weak_count **)(v65 + 32);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = *(std::__shared_weak_count **)(v65 + 16);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
    v72 = __dst;
    __dst = 0;
    if (v72)
    {
      v73 = (std::__shared_weak_count *)v72[4];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (std::__shared_weak_count *)v72[2];
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      MEMORY[0x227684CE8](v72, 0x10F0C40B62ED6C6);
    }
  }
  v79 = *(std::__shared_weak_count **)&v115[32];
  v7 = v36;
  if (*(_QWORD *)&v115[32])
  {
    v80 = (unint64_t *)(*(_QWORD *)&v115[32] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v115[16];
  if (*(_QWORD *)&v115[16])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v115[16] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_124:
  if (v7)
  {
    if (a2[23] >= 0)
      v85 = a2;
    else
      v85 = *(const char **)a2;
    sub_22322C138((uint64_t)v101, "VLM:GRS:KVA:[%.4s] NC:%zu CU:%zu P:%zu LC:%zu EX:%zu D:%zu R:%d TP:%zu", v85, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 272), v4, *(_QWORD *)(a1 + 320));
    sub_223182C08((uint64_t)v101);
  }
  sub_223182C08((uint64_t)v101);
  v86 = v107;
  if (v107)
  {
    v87 = (unint64_t *)&v107->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_223AB86B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 200))
  {
    if (*(char *)(v29 - 201) < 0)
      operator delete(*(void **)(v29 - 224));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_223AB86F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    __cxa_guard_abort(&qword_2540CCD68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCD68);
  _Unwind_Resume(a1);
}

void sub_223AB874C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  sub_22319A054(&a39);
  sub_22319A054((uint64_t *)(v39 - 248));
  sub_223199DE8(v39 - 224);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_223AB8780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  int v40;

  if (v40 < 0)
    operator delete(v39);
  sub_223199DE8((uint64_t)&a39);
  sub_223182DAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_223AB87F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223AB8868@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  result = sub_223475C18(a2, *(unsigned __int8 **)(a1 + 136), (unsigned __int8 *)(a1 + 144));
  if (!*(_BYTE *)(a1 + 496))
  {
    result = (_QWORD *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 62, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  if (*(_BYTE *)(a1 + 369))
    return sub_223475C18(a2, *(unsigned __int8 **)(a1 + 160), (unsigned __int8 *)(a1 + 168));
  return result;
}

void sub_223AB8900(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223AB8918(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223AB8930(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  __int128 *v16;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v16 = (__int128 *)((char *)v3 + 25);
      v5 = sub_223A53C24(a1, (unsigned __int8 *)v3 + 25, &v16);
      v6 = (std::__shared_weak_count *)v5[7];
      *((_OWORD *)v5 + 3) = 0uLL;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v16 = (__int128 *)((char *)v3 + 25);
      v9 = sub_223A53C24(a1, (unsigned __int8 *)v3 + 25, &v16);
      v10 = (std::__shared_weak_count *)v9[9];
      *((_OWORD *)v9 + 4) = 0uLL;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != v2);
  }
}

void sub_223AB8AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223AB8B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223AB8B20(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;
  uint64_t result;
  _BOOL4 v7;
  unsigned __int8 *j;
  int v9;

  for (i = *(unsigned __int8 **)(a1 + 144); i; i = *(unsigned __int8 **)i)
  {
    if ((sub_22319835C((unsigned __int8 *)a2, i + 25) & 0x80) == 0)
    {
      if ((sub_22319835C(i + 25, (unsigned __int8 *)a2) & 0x80) == 0)
        return 1;
      i += 8;
    }
  }
  if (*(_BYTE *)(a1 + 496))
    result = *(_BYTE *)(a1 + 368) != 0;
  else
    result = 0;
  if (*(_QWORD *)a2 != 0x580F634E2C70C937 || *(_QWORD *)(a2 + 8) != 0xEEF6525C0A449C8)
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v7 = *(_BYTE *)(a1 + 369) != 0;
      j = *(unsigned __int8 **)(a1 + 168);
      if (j)
        goto LABEL_21;
    }
    else
    {
      v7 = 0;
      for (j = *(unsigned __int8 **)(a1 + 168); j; j = *(unsigned __int8 **)j)
      {
LABEL_21:
        if ((sub_22319835C((unsigned __int8 *)a2, j + 25) & 0x80) == 0)
        {
          if ((sub_22319835C(j + 25, (unsigned __int8 *)a2) & 0x80) == 0)
          {
            v9 = 1;
            return v7 & v9;
          }
          j += 8;
        }
      }
    }
    v9 = 0;
    return v7 & v9;
  }
  return result;
}

_QWORD *sub_223AB8C64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  sub_223475C18(a2, *(unsigned __int8 **)(a1 + 136), (unsigned __int8 *)(a1 + 144));
  sub_223475C18(a2, *(unsigned __int8 **)(a1 + 160), (unsigned __int8 *)(a1 + 168));
  sub_223475C18(a2, *(unsigned __int8 **)(a1 + 328), (unsigned __int8 *)(a1 + 336));
  sub_223475C18(a2, *(unsigned __int8 **)(a1 + 208), (unsigned __int8 *)(a1 + 216));
  return sub_223475C18(a2, *(unsigned __int8 **)(a1 + 184), (unsigned __int8 *)(a1 + 192));
}

void sub_223AB8CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223AB8CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223AB8D10(uint64_t a1)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE v36[136];
  __int128 *v37;
  __int128 v38;
  _QWORD **v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  _QWORD **v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  _QWORD **v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;

  v59 = 0u;
  memset(&v36[48], 0, 20);
  memset(v36, 0, 48);
  *(_DWORD *)&v36[8] = 1065353216;
  *(_DWORD *)&v36[28] = 1065353216;
  *(_DWORD *)&v36[48] = 1065353216;
  memset(&v36[92], 0, 40);
  *(_OWORD *)&v36[76] = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v36[68] = _D0;
  *(_DWORD *)&v36[92] = 1065353216;
  *(_DWORD *)&v36[112] = 1065353216;
  *(_DWORD *)&v36[132] = 1065353216;
  v38 = 0uLL;
  v37 = &v38;
  v39 = &v40;
  v40 = 0;
  v43 = 0uLL;
  v41 = 0;
  v42 = &v43;
  v44 = &v45;
  v45 = 0;
  v48 = 0uLL;
  v46 = 0;
  v47 = &v48;
  v49 = &v50;
  v50 = 0;
  v53 = 0uLL;
  v51 = 0;
  v52 = &v53;
  v54 = &v55;
  v55 = 0;
  v58 = 0uLL;
  v56 = 0;
  v57 = &v58;
  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v36[56];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v36[40];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v36[24];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v36[8];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v36[120];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v36[104];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v36[88];
  v8 = (_QWORD *)(a1 + 144);
  v7 = *(_QWORD **)(a1 + 144);
  v9 = (_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v36[72];
  sub_223198030(a1 + 136, v7);
  v10 = v38;
  *(v8 - 1) = v37;
  *v8 = v10;
  v11 = *((_QWORD *)&v38 + 1);
  v8[1] = *((_QWORD *)&v38 + 1);
  if (v11)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v37 = &v38;
    v38 = 0uLL;
  }
  else
  {
    *v9 = v8;
  }
  v12 = a1 + 168;
  sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
  v13 = v40;
  *(_QWORD *)(a1 + 160) = v39;
  *(_QWORD *)(a1 + 168) = v13;
  v14 = v41;
  *(_QWORD *)(a1 + 176) = v41;
  if (v14)
  {
    v13[2] = v12;
    v39 = &v40;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v12;
  }
  v15 = a1 + 192;
  sub_223198030(a1 + 184, *(_QWORD **)(a1 + 192));
  v16 = v43;
  *(_QWORD *)(a1 + 184) = v42;
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *((_QWORD *)&v43 + 1);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)&v43 + 1);
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v15;
    v42 = &v43;
    v43 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 184) = v15;
  }
  v18 = a1 + 216;
  sub_223198030(a1 + 208, *(_QWORD **)(a1 + 216));
  v19 = v45;
  *(_QWORD *)(a1 + 208) = v44;
  *(_QWORD *)(a1 + 216) = v19;
  v20 = v46;
  *(_QWORD *)(a1 + 224) = v46;
  if (v20)
  {
    v19[2] = v18;
    v44 = &v45;
    v45 = 0;
    v46 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v18;
  }
  v21 = a1 + 240;
  sub_223198030(a1 + 232, *(_QWORD **)(a1 + 240));
  v22 = v48;
  *(_QWORD *)(a1 + 232) = v47;
  *(_QWORD *)(a1 + 240) = v22;
  v23 = *((_QWORD *)&v48 + 1);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)&v48 + 1);
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v21;
    v47 = &v48;
    v48 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v21;
  }
  v24 = a1 + 264;
  sub_223198030(a1 + 256, *(_QWORD **)(a1 + 264));
  v25 = v50;
  *(_QWORD *)(a1 + 256) = v49;
  *(_QWORD *)(a1 + 264) = v25;
  v26 = v51;
  *(_QWORD *)(a1 + 272) = v51;
  if (v26)
  {
    v25[2] = v24;
    v49 = &v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v24;
  }
  v27 = a1 + 288;
  sub_223198030(a1 + 280, *(_QWORD **)(a1 + 288));
  v28 = v53;
  *(_QWORD *)(a1 + 280) = v52;
  *(_QWORD *)(a1 + 288) = v28;
  v29 = *((_QWORD *)&v53 + 1);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)&v53 + 1);
  if (v29)
  {
    *(_QWORD *)(v28 + 16) = v27;
    v52 = &v53;
    v53 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v27;
  }
  v30 = a1 + 312;
  sub_223198030(a1 + 304, *(_QWORD **)(a1 + 312));
  v31 = v55;
  *(_QWORD *)(a1 + 304) = v54;
  *(_QWORD *)(a1 + 312) = v31;
  v32 = v56;
  *(_QWORD *)(a1 + 320) = v56;
  if (v32)
  {
    v31[2] = v30;
    v54 = &v55;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v30;
  }
  v33 = a1 + 336;
  sub_223198030(a1 + 328, *(_QWORD **)(a1 + 336));
  v34 = (_QWORD *)v58;
  *(_QWORD *)(a1 + 328) = v57;
  *(_QWORD *)(a1 + 336) = v34;
  v35 = *((_QWORD *)&v58 + 1);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)&v58 + 1);
  if (v35)
  {
    v34[2] = v33;
    v34 = 0;
    v57 = &v58;
    v58 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 328) = v33;
  }
  *(_QWORD *)(a1 + 352) = v59;
  *(_DWORD *)(a1 + 360) = DWORD2(v59);
  sub_223198030((uint64_t)&v57, v34);
  sub_223198030((uint64_t)&v54, v55);
  sub_223198030((uint64_t)&v52, (_QWORD *)v53);
  sub_223198030((uint64_t)&v49, v50);
  sub_223198030((uint64_t)&v47, (_QWORD *)v48);
  sub_223198030((uint64_t)&v44, v45);
  sub_223198030((uint64_t)&v42, (_QWORD *)v43);
  sub_223198030((uint64_t)&v39, v40);
  sub_223198030((uint64_t)&v37, (_QWORD *)v38);
}

void sub_223AB9138(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v22 = 0u;
  v17 = 0u;
  *((_QWORD *)&v16 + 1) = &v17;
  v18 = (unint64_t)&v18 + 8;
  v21 = 0uLL;
  v19 = 0;
  v20 = &v21;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = &v25;
  *(_WORD *)a1 = 0;
  v2 = (_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  sub_223198030(a1 + 8, *(_QWORD **)(a1 + 16));
  v4 = v17;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)&v16 + 1);
  *v3 = v4;
  v5 = *((_QWORD *)&v17 + 1);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&v17 + 1);
  if (v5)
  {
    *(_QWORD *)(v4 + 16) = v3;
    *((_QWORD *)&v16 + 1) = &v17;
    v17 = 0uLL;
  }
  else
  {
    *v2 = v3;
  }
  v6 = a1 + 40;
  sub_2231F5848(a1 + 32, *(_QWORD **)(a1 + 40));
  v7 = *((_QWORD *)&v18 + 1);
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)&v18 = (char *)&v18 + 8;
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  v9 = a1 + 64;
  sub_223475E64(a1 + 56, *(_QWORD **)(a1 + 64));
  v10 = v21;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *((_QWORD *)&v21 + 1);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)&v21 + 1);
  if (v11)
  {
    *(_QWORD *)(v10 + 16) = v9;
    v20 = &v21;
    v21 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v9;
  }
  v13 = *(_QWORD **)(a1 + 112);
  v12 = (_QWORD *)(a1 + 112);
  *((_OWORD *)v12 - 2) = v22;
  *((_BYTE *)v12 - 16) = v23;
  sub_223AB932C((uint64_t)(v12 - 1), v13);
  v14 = v25;
  *(v12 - 1) = v24;
  *v12 = v14;
  v15 = v26;
  v12[1] = v26;
  if (v15)
  {
    v14[2] = v12;
    v14 = 0;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    *(v12 - 1) = v12;
  }
  sub_223AB932C((uint64_t)&v24, v14);
  sub_223475E64((uint64_t)&v20, (_QWORD *)v21);
  sub_2231F5848((uint64_t)&v18, *((_QWORD **)&v18 + 1));
  sub_223198030((uint64_t)&v16 + 8, (_QWORD *)v17);
}

void sub_223AB932C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  if (a2)
  {
    sub_223AB932C(a1, *a2);
    sub_223AB932C(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[11];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)a2[9];
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)a2[7];
    if (!v10)
      goto LABEL_16;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      operator delete(a2);
    }
    else
    {
LABEL_16:
      operator delete(a2);
    }
  }
}

uint64_t sub_223AB9424(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223AB9464(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5F238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223AB9474(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5F238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223AB94A4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223AB94BC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AB94FC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC5F2C0;
  sub_223ABDFA4(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_223AB9530(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC5F2C0;
  sub_223ABDFA4(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

void sub_223AB9574(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 16);
  sub_223ABDFA4(*(_QWORD **)(a1 + 16));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

void sub_223AB95A0(_QWORD *a1, float32x2_t **a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t **v16;
  char v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  float32x2_t *v28;
  float32x2_t *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned __int8 *v38;
  BOOL v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t **v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  _QWORD *v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x2_t v60;
  float32x4_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76[2];
  unsigned __int8 *v77;
  _QWORD *v78[2];
  void *__p;
  _QWORD *v80;
  char v81;

  v78[0] = 0;
  v78[1] = 0;
  v77 = (unsigned __int8 *)v78;
  sub_223475C18(&v77, *(unsigned __int8 **)(a3 + 256), (unsigned __int8 *)(a3 + 264));
  sub_223475C18(&v77, *(unsigned __int8 **)(a3 + 232), (unsigned __int8 *)(a3 + 240));
  sub_223475C18(&v77, *(unsigned __int8 **)(a3 + 304), (unsigned __int8 *)(a3 + 312));
  sub_223AB8C64(a3, &v75);
  v6 = v77;
  if (v77 == (unsigned __int8 *)v78)
    goto LABEL_72;
  v7 = (uint64_t **)(a1 + 2);
  v8 = (uint64_t *)a1[2];
  if (!v8)
  {
    do
    {
      v26 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(unsigned __int8 **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v22 = *(_QWORD *)v27 == (_QWORD)v6;
          v6 = v27;
        }
        while (!v22);
      }
      v6 = v27;
    }
    while (v27 != (unsigned __int8 *)v78);
    goto LABEL_72;
  }
LABEL_3:
  v9 = v6[25];
  v10 = (uint64_t **)v8;
  while (1)
  {
    v11 = *((unsigned __int8 *)v10 + 32);
    v12 = v9 >= v11;
    if (v9 != v11)
    {
      v13 = v6[25];
LABEL_36:
      if (!v12)
        goto LABEL_4;
      goto LABEL_38;
    }
    v13 = v6[26];
    v11 = *((unsigned __int8 *)v10 + 33);
    v12 = v13 >= v11;
    if (v13 != v11)
      goto LABEL_36;
    v13 = v6[27];
    v11 = *((unsigned __int8 *)v10 + 34);
    v12 = v13 >= v11;
    if (v13 != v11)
      goto LABEL_36;
    v13 = v6[28];
    v11 = *((unsigned __int8 *)v10 + 35);
    v12 = v13 >= v11;
    if (v13 != v11)
      goto LABEL_36;
    v14 = v6[29];
    v15 = *((unsigned __int8 *)v10 + 36);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[30];
    v15 = *((unsigned __int8 *)v10 + 37);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[31];
    v15 = *((unsigned __int8 *)v10 + 38);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[32];
    v15 = *((unsigned __int8 *)v10 + 39);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[33];
    v15 = *((unsigned __int8 *)v10 + 40);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[34];
    v15 = *((unsigned __int8 *)v10 + 41);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[35];
    v15 = *((unsigned __int8 *)v10 + 42);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[36];
    v15 = *((unsigned __int8 *)v10 + 43);
    if (v14 != v15)
      goto LABEL_21;
    v14 = v6[37];
    v15 = *((unsigned __int8 *)v10 + 44);
    if (v14 != v15
      || (v14 = v6[38], v15 = *((unsigned __int8 *)v10 + 45), v14 != v15)
      || (v14 = v6[39], v15 = *((unsigned __int8 *)v10 + 46), v14 != v15)
      || (v14 = v6[40], v15 = *((unsigned __int8 *)v10 + 47), v14 != v15))
    {
LABEL_21:
      if (v14 < v15)
        goto LABEL_4;
    }
    v11 = *((unsigned __int8 *)v10 + 36);
    v13 = v6[29];
    if (v11 == v13)
    {
      v11 = *((unsigned __int8 *)v10 + 37);
      v13 = v6[30];
      if (v11 == v13)
      {
        v11 = *((unsigned __int8 *)v10 + 38);
        v13 = v6[31];
        if (v11 == v13)
        {
          v11 = *((unsigned __int8 *)v10 + 39);
          v13 = v6[32];
          if (v11 == v13)
          {
            v11 = *((unsigned __int8 *)v10 + 40);
            v13 = v6[33];
            if (v11 == v13)
            {
              v11 = *((unsigned __int8 *)v10 + 41);
              v13 = v6[34];
              if (v11 == v13)
              {
                v11 = *((unsigned __int8 *)v10 + 42);
                v13 = v6[35];
                if (v11 == v13)
                {
                  v11 = *((unsigned __int8 *)v10 + 43);
                  v13 = v6[36];
                  if (v11 == v13)
                  {
                    v11 = *((unsigned __int8 *)v10 + 44);
                    v13 = v6[37];
                    if (v11 == v13)
                    {
                      v11 = *((unsigned __int8 *)v10 + 45);
                      v13 = v6[38];
                      if (v11 == v13)
                      {
                        v11 = *((unsigned __int8 *)v10 + 46);
                        v13 = v6[39];
                        if (v11 == v13)
                        {
                          v11 = *((unsigned __int8 *)v10 + 47);
                          v13 = v6[40];
                          if (v11 == v13)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_38:
    if (v11 >= v13)
      break;
    ++v10;
LABEL_4:
    v10 = (uint64_t **)*v10;
    if (!v10)
      goto LABEL_57;
  }
  v16 = (uint64_t **)(a1 + 2);
  do
  {
    v17 = sub_22319835C((unsigned __int8 *)v8 + 32, v6 + 25);
    if (v17 >= 0)
      v18 = (uint64_t **)v8;
    else
      v18 = (uint64_t **)(v8 + 1);
    if (v17 >= 0)
      v16 = (uint64_t **)v8;
    v8 = *v18;
  }
  while (*v18);
  if (v16 != v7 && ((char)sub_22319835C(v6 + 25, (unsigned __int8 *)v16 + 32) & 0x80000000) == 0)
  {
    v19 = v16[1];
    v20 = v16;
    if (v19)
    {
      do
      {
        v21 = v19;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v21 = v20[2];
        v22 = *v21 == (_QWORD)v20;
        v20 = (uint64_t **)v21;
      }
      while (!v22);
    }
    if ((uint64_t **)a1[1] == v16)
      a1[1] = v21;
    v23 = (uint64_t *)a1[2];
    --a1[3];
    sub_2231AFE60(v23, (uint64_t *)v16);
    sub_2233FADDC(v16[7]);
    operator delete(v16);
  }
  while (1)
  {
LABEL_57:
    v24 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = *(unsigned __int8 **)v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v22 = *(_QWORD *)v25 == (_QWORD)v6;
        v6 = v25;
      }
      while (!v22);
    }
    if (v25 == (unsigned __int8 *)v78)
      break;
    v8 = *v7;
    v6 = v25;
    if (*v7)
      goto LABEL_3;
  }
LABEL_72:
  v28 = *a2;
  v29 = a2[1];
  if (*a2 != v29)
  {
    v30 = (unsigned __int8 *)v76[0];
    if (v76[0])
    {
      v31 = a1 + 2;
LABEL_76:
      v32 = (unsigned __int8 *)v76;
      do
      {
        v33 = v30;
        v34 = v32;
        v35 = v30[25];
        v36 = v28->u8[0];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[26];
        v36 = v28->u8[1];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[27];
        v36 = v28->u8[2];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[28];
        v36 = v28->u8[3];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[29];
        v36 = v28->u8[4];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[30];
        v36 = v28->u8[5];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[31];
        v36 = v28->u8[6];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[32];
        v36 = v28->u8[7];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[33];
        v36 = v28[1].u8[0];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[34];
        v36 = v28[1].u8[1];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[35];
        v36 = v28[1].u8[2];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[36];
        v36 = v28[1].u8[3];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[37];
        v36 = v28[1].u8[4];
        if (v35 != v36)
          goto LABEL_94;
        v35 = v33[38];
        v36 = v28[1].u8[5];
        if (v35 == v36
          && (v35 = v33[39], v36 = v28[1].u8[6], v35 == v36)
          && (v35 = v33[40], v36 = v28[1].u8[7], v35 == v36))
        {
          v37 = 0;
          v38 = v33;
          v32 = v33;
        }
        else
        {
LABEL_94:
          v39 = v35 >= v36;
          v38 = v33 + 8;
          if (v39)
          {
            v38 = v33;
            v37 = 0;
          }
          else
          {
            v37 = 1;
          }
          if (v39)
            v32 = v33;
        }
        v30 = *(unsigned __int8 **)v38;
      }
      while (v30);
      if (v32 != (unsigned __int8 *)v76)
      {
        v40 = v33 + 25;
        v41 = v34 + 25;
        v42 = v37 ? v41 : v40;
        if (((char)sub_22319835C((unsigned __int8 *)v28, v42) & 0x80000000) == 0)
        {
          v43 = *v31;
          if (!*v31)
          {
LABEL_143:
            v51 = (char *)operator new(0x90uLL);
            v52 = v51;
            __p = v51;
            v80 = a1 + 2;
            *((_OWORD *)v51 + 2) = *(_OWORD *)v28->f32;
            *((_QWORD *)v51 + 8) = 0;
            *((_QWORD *)v51 + 7) = 0;
            *((_QWORD *)v51 + 6) = v51 + 56;
            *(float32x2_t *)v53.i8 = v28[22];
            v53.i32[2] = v28[23].i32[0];
            *(float32x2_t *)v54.i8 = v28[24];
            v54.i32[2] = v28[25].i32[0];
            v55 = (float32x4_t)vzip1q_s32(v53, v54);
            v56 = (int8x16_t)v55;
            v56.i32[2] = (__int32)v28[26];
            *(float32x2_t *)v57.f32 = v28[28];
            v57.i32[2] = v28[29].i32[0];
            v58 = (int8x16_t)vnegq_f32(v57);
            v59 = (int8x16_t)vtrn2q_s32(v53, v54);
            v59.i32[2] = HIDWORD(*(_QWORD *)&v28[26]);
            v60.i32[0] = v28[27].i32[0];
            v61 = (float32x4_t)vzip2q_s32(v53, v54);
            *(float32x2_t *)v55.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v55.f32, *(float *)v58.i32), *(float32x2_t *)v59.i8, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)v61.f32, v57, 2);
            v61.i32[2] = v60.i32[0];
            v55.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v28[26], *(float32x2_t *)v58.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v28[26], 1), *(float32x2_t *)v57.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), v60).u32[0]);
            v62 = vextq_s8(v59, v56, 4uLL).u64[0];
            v56.i32[3] = 0;
            v57.i32[3] = 0;
            v57.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v59, 0).i32[3];
            *(uint64_t *)((char *)v57.i64 + 4) = v62;
            v61.i64[1] = vdupq_laneq_s32((int32x4_t)v61, 2).u32[0];
            v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v56, COERCE_FLOAT(*(_OWORD *)v28[14].f32)), v57, v28[14], 1), v61, *(float32x4_t *)v28[14].f32, 2), v55, *(float32x4_t *)v28[14].f32, 3);
            v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v56, COERCE_FLOAT(*(_OWORD *)v28[16].f32)), v57, v28[16], 1), v61, *(float32x4_t *)v28[16].f32, 2), v55, *(float32x4_t *)v28[16].f32, 3);
            v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v56, COERCE_FLOAT(*(_OWORD *)v28[18].f32)), v57, v28[18], 1), v61, *(float32x4_t *)v28[18].f32, 2), v55, *(float32x4_t *)v28[18].f32, 3);
            v66 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v56, COERCE_FLOAT(*(_OWORD *)v28[20].f32)), v57, v28[20], 1), v61, *(float32x4_t *)v28[20].f32, 2), v55, *(float32x4_t *)v28[20].f32, 3);
            v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(_OWORD *)v28[6].f32)), v64, v28[6], 1), v65, *(float32x4_t *)v28[6].f32, 2), v66, *(float32x4_t *)v28[6].f32, 3);
            v68 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(_OWORD *)v28[8].f32)), v64, v28[8], 1), v65, *(float32x4_t *)v28[8].f32, 2), v66, *(float32x4_t *)v28[8].f32, 3);
            v69 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(_OWORD *)v28[10].f32)), v64, v28[10], 1), v65, *(float32x4_t *)v28[10].f32, 2), v66, *(float32x4_t *)v28[10].f32, 3);
            *(float32x4_t *)(v51 + 72) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(_OWORD *)v28[4].f32)), v64, v28[4], 1), v65, *(float32x4_t *)v28[4].f32, 2), v66, *(float32x4_t *)v28[4].f32, 3);
            *(float32x4_t *)(v51 + 88) = v67;
            *(float32x4_t *)(v51 + 104) = v68;
            *(float32x4_t *)(v51 + 120) = v69;
            *((float32x2_t *)v51 + 17) = v28[12];
            v81 = 1;
            v70 = a1 + 2;
            v71 = a1 + 2;
            if (!v43)
              goto LABEL_157;
            v72 = (unsigned __int8 *)(v51 + 32);
            v70 = a1 + 2;
            while (1)
            {
              while (1)
              {
                v71 = (_QWORD *)v43;
                v73 = (unsigned __int8 *)(v43 + 32);
                if ((char)sub_22319835C(v72, v73) < 0)
                  break;
                if (((char)sub_22319835C(v73, v72) & 0x80000000) == 0)
                {
                  v52 = __p;
                  if (*v70)
                  {
                    if (__p)
                    {
                      if (v81)
                        sub_2233FADDC(*((_QWORD **)__p + 7));
                      operator delete(v52);
                    }
                    goto LABEL_160;
                  }
                  goto LABEL_157;
                }
                v70 = v71 + 1;
                v43 = v71[1];
                if (!v43)
                  goto LABEL_156;
              }
              v43 = *v71;
              v70 = v71;
              if (!*v71)
              {
                v70 = v71;
LABEL_156:
                v52 = __p;
LABEL_157:
                *v52 = 0;
                v52[1] = 0;
                v52[2] = v71;
                *v70 = v52;
                v74 = *(_QWORD *)a1[1];
                if (v74)
                {
                  a1[1] = v74;
                  v52 = (_QWORD *)*v70;
                }
                sub_2231A9A8C((uint64_t *)a1[2], v52);
                ++a1[3];
                goto LABEL_160;
              }
            }
          }
          v44 = v28->u8[0];
          v45 = (uint64_t **)*v31;
          while (2)
          {
            v46 = *((unsigned __int8 *)v45 + 32);
            v47 = v44 >= v46;
            if (v44 == v46)
            {
              v48 = v28->u8[1];
              v46 = *((unsigned __int8 *)v45 + 33);
              v47 = v48 >= v46;
              if (v48 == v46)
              {
                v48 = v28->u8[2];
                v46 = *((unsigned __int8 *)v45 + 34);
                v47 = v48 >= v46;
                if (v48 == v46)
                {
                  v48 = v28->u8[3];
                  v46 = *((unsigned __int8 *)v45 + 35);
                  v47 = v48 >= v46;
                  if (v48 == v46)
                  {
                    v49 = v28->u8[4];
                    v50 = *((unsigned __int8 *)v45 + 36);
                    if (v49 == v50)
                    {
                      v49 = v28->u8[5];
                      v50 = *((unsigned __int8 *)v45 + 37);
                      if (v49 == v50)
                      {
                        v49 = v28->u8[6];
                        v50 = *((unsigned __int8 *)v45 + 38);
                        if (v49 == v50)
                        {
                          v49 = v28->u8[7];
                          v50 = *((unsigned __int8 *)v45 + 39);
                          if (v49 == v50)
                          {
                            v49 = v28[1].u8[0];
                            v50 = *((unsigned __int8 *)v45 + 40);
                            if (v49 == v50)
                            {
                              v49 = v28[1].u8[1];
                              v50 = *((unsigned __int8 *)v45 + 41);
                              if (v49 == v50)
                              {
                                v49 = v28[1].u8[2];
                                v50 = *((unsigned __int8 *)v45 + 42);
                                if (v49 == v50)
                                {
                                  v49 = v28[1].u8[3];
                                  v50 = *((unsigned __int8 *)v45 + 43);
                                  if (v49 == v50)
                                  {
                                    v49 = v28[1].u8[4];
                                    v50 = *((unsigned __int8 *)v45 + 44);
                                    if (v49 == v50)
                                    {
                                      v49 = v28[1].u8[5];
                                      v50 = *((unsigned __int8 *)v45 + 45);
                                      if (v49 == v50)
                                      {
                                        v49 = v28[1].u8[6];
                                        v50 = *((unsigned __int8 *)v45 + 46);
                                        if (v49 == v50)
                                        {
                                          v49 = v28[1].u8[7];
                                          v50 = *((unsigned __int8 *)v45 + 47);
                                          if (v49 == v50)
                                            goto LABEL_125;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    if (v49 >= v50)
                    {
LABEL_125:
                      v46 = *((unsigned __int8 *)v45 + 36);
                      v48 = v28->u8[4];
                      if (v46 == v48)
                      {
                        v46 = *((unsigned __int8 *)v45 + 37);
                        v48 = v28->u8[5];
                        if (v46 == v48)
                        {
                          v46 = *((unsigned __int8 *)v45 + 38);
                          v48 = v28->u8[6];
                          if (v46 == v48)
                          {
                            v46 = *((unsigned __int8 *)v45 + 39);
                            v48 = v28->u8[7];
                            if (v46 == v48)
                            {
                              v46 = *((unsigned __int8 *)v45 + 40);
                              v48 = v28[1].u8[0];
                              if (v46 == v48)
                              {
                                v46 = *((unsigned __int8 *)v45 + 41);
                                v48 = v28[1].u8[1];
                                if (v46 == v48)
                                {
                                  v46 = *((unsigned __int8 *)v45 + 42);
                                  v48 = v28[1].u8[2];
                                  if (v46 == v48)
                                  {
                                    v46 = *((unsigned __int8 *)v45 + 43);
                                    v48 = v28[1].u8[3];
                                    if (v46 == v48)
                                    {
                                      v46 = *((unsigned __int8 *)v45 + 44);
                                      v48 = v28[1].u8[4];
                                      if (v46 == v48)
                                      {
                                        v46 = *((unsigned __int8 *)v45 + 45);
                                        v48 = v28[1].u8[5];
                                        if (v46 == v48)
                                        {
                                          v46 = *((unsigned __int8 *)v45 + 46);
                                          v48 = v28[1].u8[6];
                                          if (v46 == v48)
                                          {
                                            v46 = *((unsigned __int8 *)v45 + 47);
                                            v48 = v28[1].u8[7];
                                            if (v46 == v48)
                                              goto LABEL_160;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_141:
                      if (v46 >= v48)
                        goto LABEL_160;
                      ++v45;
                    }
LABEL_107:
                    v45 = (uint64_t **)*v45;
                    if (!v45)
                      goto LABEL_143;
                    continue;
                  }
                }
              }
            }
            else
            {
              v48 = v28->u8[0];
            }
            break;
          }
          if (v47)
            goto LABEL_141;
          goto LABEL_107;
        }
      }
LABEL_160:
      while (1)
      {
        v28 += 31;
        if (v28 == v29)
          break;
        v30 = (unsigned __int8 *)v76[0];
        if (v76[0])
          goto LABEL_76;
      }
    }
  }
  sub_223198030((uint64_t)&v75, v76[0]);
  sub_223198030((uint64_t)&v77, v78[0]);
}

void sub_223AB9F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  sub_223198030((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_223AB9F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  sub_223198030((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_223AB9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  sub_223198030((uint64_t)&a10, a11);
  sub_223198030((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_223AB9FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  void **v7;
  size_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD *v13[2];
  void *__p[2];
  char v15;

  v6 = (unsigned __int8 *)(a1 + 128);
  sub_223A62A3C((unsigned __int8 *)(a1 + 128), (uint64_t)__p);
  if (v15 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v12 = 0;
  v8 = strnlen((const char *)v7, 8uLL);
  memcpy(&v12, v7, v8);
  kdebug_trace();
  if (v15 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a2 + 1848))
    v9 = *(_QWORD *)(a2 + 1256);
  else
    v9 = 0;
  if ((*(_QWORD *)(a3 + 352) != v9 || *(_BYTE *)(a3 + 496))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 74, (uint64_t)"batch_metadata.TimeMatch(keyframe_list) && !batch_metadata.volumetric.has_value()", 81, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223AB95A0((_QWORD *)a1, (float32x2_t **)a2, a3);
  *(_DWORD *)(a3 + 360) = *(_QWORD *)(a1 + 24);
  kdebug_trace();
  sub_223A62A3C(v6, (uint64_t)__p);
  v10 = *(_QWORD **)(a1 + 8);
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  sub_223ABDE68(&v12, v10, v11, (_QWORD *)(a1 + 16));
  sub_223AC4554((unsigned __int8 **)a2, (const void **)__p, &v12, a3);
  sub_223198030((uint64_t)&v12, v13[0]);
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_223ABA1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_223198030((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223ABA1F4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  float v11;
  size_t prime;
  int8x8_t v13;
  BOOL v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  const char *p_p;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char v31;
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24EC5F2C0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)a2;
  v3 = *(_OWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 20);
  v5 = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  *(_OWORD *)(a1 + 36) = v3;
  v6 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 109) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 100) = v6;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &off_24EC5F2F0;
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = a1 + 152;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  v8 = (void **)(a1 + 192);
  *(_QWORD *)(a1 + 216) = 0;
  v9 = (void **)(a1 + 224);
  *(_QWORD *)(a1 + 248) = 0;
  v10 = (void **)(a1 + 256);
  *(_QWORD *)(a1 + 280) = 0;
  v11 = (float)*(unsigned int *)(a2 + 80) * 0.8125;
  prime = (unint64_t)v11;
  v27 = 0x100000;
  v28 = (unint64_t)v11;
  if ((unint64_t)v11 > 0x100000)
  {
    p_p = (const char *)&__p;
    sub_223ABA740((uint64_t)&__p, &v28, &v27);
    if (v31 < 0)
      p_p = (const char *)__p;
    v26 = strlen(p_p);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 156, (uint64_t)"", 0, (uint64_t)p_p, v26, (void (*)(void **))sub_22457406C);
    if (v31 < 0)
      operator delete(__p);
    abort();
  }
  if (prime == 1)
  {
    prime = 2;
LABEL_18:
    sub_2231B0668(v7, prime);
    goto LABEL_19;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v11);
    v13 = *(int8x8_t *)(a1 + 160);
    v14 = prime >= *(_QWORD *)&v13;
    if (prime > *(_QWORD *)&v13)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    if (prime)
      goto LABEL_18;
  }
  if (!v14)
  {
    v15 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
    if (*(_QWORD *)&v13 < 3uLL || (v16 = (uint8x8_t)vcnt_s8(v13), v16.i16[0] = vaddlv_u8(v16), v16.u32[0] > 1uLL))
    {
      v15 = std::__next_prime(v15);
    }
    else
    {
      v17 = 1 << -(char)__clz(v15 - 1);
      if (v15 >= 2)
        v15 = v17;
    }
    if (prime <= v15)
      prime = v15;
    if (prime < *(_QWORD *)&v13)
      goto LABEL_18;
  }
LABEL_19:
  __p = &off_24EC5F3A8;
  v30 = sub_223ABA940;
  v18 = &__p;
  v32 = &__p;
  if (v8 == &__p)
  {
    v19 = 4;
  }
  else
  {
    v18 = *(void ***)(a1 + 216);
    if (v18 == v8)
    {
      v32 = 0;
      v18 = &__p;
      (*((void (**)(void **, void **))*v8 + 3))(v8, &__p);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 32))(*(_QWORD *)(a1 + 216));
      v32 = &__p;
      *(_QWORD *)(a1 + 192) = &off_24EC5F3A8;
      *(_QWORD *)(a1 + 200) = sub_223ABA940;
      v19 = 4;
      *(_QWORD *)(a1 + 216) = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 192) = &off_24EC5F3A8;
      *(_QWORD *)(a1 + 200) = sub_223ABA940;
      v32 = v18;
      *(_QWORD *)(a1 + 216) = v8;
      if (v18 == &__p)
      {
        v19 = 4;
        v18 = &__p;
      }
      else
      {
        if (!v18)
          goto LABEL_28;
        v19 = 5;
      }
    }
  }
  (*((void (**)(void **))*v18 + v19))(v18);
LABEL_28:
  __p = &off_24EC5F458;
  v30 = sub_223ABABF8;
  v20 = &__p;
  v32 = &__p;
  if (v10 == &__p)
  {
    v21 = 4;
  }
  else
  {
    v20 = *(void ***)(a1 + 280);
    if (v20 == v10)
    {
      v32 = 0;
      v20 = &__p;
      (*((void (**)(void **, void **))*v10 + 3))(v10, &__p);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 280) + 32))(*(_QWORD *)(a1 + 280));
      v32 = &__p;
      *(_QWORD *)(a1 + 256) = &off_24EC5F458;
      *(_QWORD *)(a1 + 264) = sub_223ABABF8;
      v21 = 4;
      *(_QWORD *)(a1 + 280) = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 256) = &off_24EC5F458;
      *(_QWORD *)(a1 + 264) = sub_223ABABF8;
      v32 = v20;
      *(_QWORD *)(a1 + 280) = v10;
      if (v20 == &__p)
      {
        v21 = 4;
        v20 = &__p;
      }
      else
      {
        if (!v20)
          goto LABEL_37;
        v21 = 5;
      }
    }
  }
  (*((void (**)(void **))*v20 + v21))(v20);
LABEL_37:
  __p = &off_24EC5F508;
  v30 = sub_223ABB400;
  v22 = &__p;
  v32 = &__p;
  if (v9 == &__p)
  {
    v23 = 4;
    goto LABEL_45;
  }
  v22 = *(void ***)(a1 + 248);
  if (v22 == v9)
  {
    v32 = 0;
    v22 = &__p;
    (*((void (**)(void **, void **))*v9 + 3))(v9, &__p);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 32))(*(_QWORD *)(a1 + 248));
    v32 = &__p;
    *(_QWORD *)(a1 + 224) = &off_24EC5F508;
    *(_QWORD *)(a1 + 232) = sub_223ABB400;
    v23 = 4;
    *(_QWORD *)(a1 + 248) = v9;
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 224) = &off_24EC5F508;
  *(_QWORD *)(a1 + 232) = sub_223ABB400;
  v32 = v22;
  *(_QWORD *)(a1 + 248) = v9;
  if (v22 == &__p)
  {
    v23 = 4;
    v22 = &__p;
    goto LABEL_45;
  }
  if (v22)
  {
    v23 = 5;
LABEL_45:
    (*((void (**)(void **))*v22 + v23))(v22);
  }
  return a1;
}

void sub_223ABA65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223ABA740(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string *v9;
  std::string *v10;
  _DWORD *v11;
  std::string *v12;
  std::string *v13;
  std::string **v14;

  v7 = 0;
  sub_223A6B558(v6, "Reserve size ");
  std::to_string(&v8, *a2);
  v9 = (std::string *)v6;
  v10 = &v8;
  v11 = v6;
  v12 = &v8;
  v13 = &v8;
  if (v7 == -1)
    sub_22316DD70();
  v14 = &v9;
  ((void (*)(std::string ***, _DWORD *))off_24EC5F338[v7])(&v14, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v9 = (std::string *)v6;
  v10 = (std::string *)" over reserve size limit ";
  v11 = v6;
  v12 = (std::string *)" over reserve size limit ";
  v13 = (std::string *)" over reserve size limit ";
  if (v7 == -1)
    sub_22316DD70();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  ((void (*)(std::string *, _DWORD *))off_24EC5F380[v7])(&v8, v6);
  std::to_string(&v8, *a3);
  v9 = (std::string *)v6;
  v10 = &v8;
  v11 = v6;
  v12 = &v8;
  v13 = &v8;
  if (v7 == -1)
    sub_22316DD70();
  v14 = &v9;
  ((void (*)(std::string ***, _DWORD *))off_24EC5F338[v7])(&v14, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 == -1)
    sub_22316DD70();
  v9 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC5F368[v7])(&v9, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC5F350[v7])(&v9, v6);
  return result;
}

void sub_223ABA8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_223ABA940(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  int *v5;
  int *v6;
  int *v7;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  int *v29;
  int *v30;
  char *v31;
  char *v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v33 = &v34;
  v5 = (int *)(a2 + 1);
  v6 = (int *)*a2;
  v7 = (int *)&v34;
  if (v6 != v5)
  {
    while (1)
    {
      v10 = sub_22393835C(a3, v6 + 7);
      if (!v10)
        goto LABEL_40;
      v12 = v10 + 6;
      v11 = (uint64_t *)v10[6];
      if (v11 != v10 + 7)
      {
        while (1)
        {
          v13 = *(uint64_t *)((char *)v11 + 28) == *a1 && *(uint64_t *)((char *)v11 + 36) == a1[1];
          if (v13)
            break;
          v14 = (uint64_t *)v11[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (uint64_t *)v11[2];
              v13 = *v15 == (_QWORD)v11;
              v11 = v15;
            }
            while (!v13);
          }
          v11 = v15;
          if (v15 == v10 + 7)
            goto LABEL_19;
        }
        sub_223ABEFE8(v12, (uint64_t)v11 + 28);
      }
LABEL_19:
      sub_223ABE980((uint64_t)(v12 - 2), 0, &v31);
      v16 = v31;
      v17 = v32;
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v16 != v17)
        goto LABEL_40;
      v18 = v34;
      v19 = &v34;
      v20 = &v34;
      if (!v34)
        goto LABEL_37;
      v21 = v6[7];
      v22 = v6[8];
      v23 = v6[9];
      do
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v24 = *((_DWORD *)v18 + 7);
          if (v21 != v24)
            break;
          v25 = *((_DWORD *)v20 + 8);
          if (v22 != v25)
          {
            if (v22 < v25)
              goto LABEL_24;
            if (v25 >= v22)
              goto LABEL_40;
            goto LABEL_35;
          }
          v26 = *((_DWORD *)v20 + 9);
          if (v23 >= v26)
          {
            if (v26 >= v23)
              goto LABEL_40;
            goto LABEL_35;
          }
LABEL_24:
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_37;
        }
        if (v21 < v24)
          goto LABEL_24;
        if (v24 >= v21)
          goto LABEL_40;
LABEL_35:
        v18 = v20[1];
      }
      while (v18);
      v19 = v20 + 1;
LABEL_37:
      v27 = (char *)operator new(0x28uLL);
      v28 = *(_QWORD *)(v6 + 7);
      *((_DWORD *)v27 + 9) = v6[9];
      *(_QWORD *)(v27 + 28) = v28;
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = v20;
      *v19 = (uint64_t *)v27;
      if (*v33)
      {
        v33 = (uint64_t **)*v33;
        v27 = (char *)*v19;
      }
      sub_2231A9A8C(v34, (uint64_t *)v27);
      ++v35;
LABEL_40:
      v29 = (int *)*((_QWORD *)v6 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(int **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (int *)*((_QWORD *)v6 + 2);
          v13 = *(_QWORD *)v30 == (_QWORD)v6;
          v6 = v30;
        }
        while (!v13);
      }
      v6 = v30;
      if (v30 == v5)
      {
        v7 = (int *)v33;
        break;
      }
    }
  }
  sub_2235246CC((uint64_t *)(a4 + 376), v7, (int *)&v34);
  sub_223198030((uint64_t)&v33, v34);
}

void sub_223ABAB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223ABABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223ABABC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223ABABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223ABABF8(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  unsigned __int8 *i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t (**v79)();
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t (**v87)();
  __int128 v88;
  _BYTE v89[26];
  uint64_t (**v90)();
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  __int128 v94;
  __int16 v95;
  __int128 v96;
  uint64_t (**v97)();
  uint64_t v98[6];
  uint64_t (**v99)();
  uint64_t v100[6];
  _BYTE v101[8];
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int16 v108;
  _BYTE v109[8];
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  __int128 v113;
  __int16 v114;
  _OWORD *v115;

  for (i = *(unsigned __int8 **)(a4 + 480); i; i = *(unsigned __int8 **)i)
  {
    if ((sub_22319835C((unsigned __int8 *)a1, i + 32) & 0x80) == 0)
    {
      if ((sub_22319835C(i + 32, (unsigned __int8 *)a1) & 0x80) == 0)
        goto LABEL_8;
      i += 8;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 320, (uint64_t)"kf_to_mesh_rendering.count(uuid)", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_8:
  sub_2231CC34C(*(_QWORD *)(a1 + 16), (uint64_t)v109);
  sub_2231CDAE0(*(_QWORD *)(a1 + 16), (uint64_t)v101);
  v11 = (_QWORD *)(a4 + 480);
  v12 = *(_QWORD *)(a4 + 480);
  if (!v12)
    goto LABEL_14;
  v13 = (uint64_t **)(a4 + 400);
  v14 = v11;
  while (1)
  {
    while (1)
    {
      v15 = (_QWORD *)v12;
      v16 = (unsigned __int8 *)(v12 + 32);
      if (((char)sub_22319835C((unsigned __int8 *)a1, (unsigned __int8 *)(v12 + 32)) & 0x80000000) == 0)
        break;
      v12 = *v15;
      v14 = v15;
      if (!*v15)
        goto LABEL_14;
    }
    if (((char)sub_22319835C(v16, (unsigned __int8 *)a1) & 0x80000000) == 0)
      break;
    v12 = v15[1];
    v14 = v15 + 1;
    if (!v12)
      goto LABEL_14;
  }
  if (!*v14)
LABEL_14:
    sub_223198218("map::at:  key not found");
  if (*(_QWORD *)(*v14 + 48))
  {
    v17 = *v11;
    if (!*v11)
      goto LABEL_23;
    v18 = v11;
    while (1)
    {
      while (1)
      {
        v19 = (_QWORD *)v17;
        v20 = (unsigned __int8 *)(v17 + 32);
        if (((char)sub_22319835C((unsigned __int8 *)a1, (unsigned __int8 *)(v17 + 32)) & 0x80000000) == 0)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_23;
      }
      if (((char)sub_22319835C(v20, (unsigned __int8 *)a1) & 0x80000000) == 0)
        break;
      v17 = v19[1];
      v18 = v19 + 1;
      if (!v17)
        goto LABEL_23;
    }
    if (!*v18)
LABEL_23:
      sub_223198218("map::at:  key not found");
    v21 = *(_QWORD *)(*v18 + 48);
    v99 = &off_24EC21230;
    sub_2231BE6D4(v21, v100);
    v22 = *v11;
    if (!*v11)
LABEL_33:
      sub_223198218("map::at:  key not found");
  }
  else
  {
    v99 = &off_24EC21230;
    memset(v100, 0, 42);
    v22 = *v11;
    if (!*v11)
      goto LABEL_33;
  }
  v23 = v11;
  while (1)
  {
    while (1)
    {
      v24 = (_QWORD *)v22;
      v25 = (unsigned __int8 *)(v22 + 32);
      if (((char)sub_22319835C((unsigned __int8 *)a1, (unsigned __int8 *)(v22 + 32)) & 0x80000000) == 0)
        break;
      v22 = *v24;
      v23 = v24;
      if (!*v24)
        goto LABEL_33;
    }
    if (((char)sub_22319835C(v25, (unsigned __int8 *)a1) & 0x80000000) == 0)
      break;
    v22 = v24[1];
    v23 = v24 + 1;
    if (!v22)
      goto LABEL_33;
  }
  if (!*v23)
    goto LABEL_33;
  if (*(_QWORD *)(*v23 + 64))
  {
    v26 = *v11;
    if (!*v11)
      goto LABEL_42;
    while (1)
    {
      while (1)
      {
        v27 = (_QWORD *)v26;
        v28 = (unsigned __int8 *)(v26 + 32);
        if (((char)sub_22319835C((unsigned __int8 *)a1, (unsigned __int8 *)(v26 + 32)) & 0x80000000) == 0)
          break;
        v26 = *v27;
        v11 = v27;
        if (!*v27)
          goto LABEL_42;
      }
      if (((char)sub_22319835C(v28, (unsigned __int8 *)a1) & 0x80000000) == 0)
        break;
      v26 = v27[1];
      v11 = v27 + 1;
      if (!v26)
        goto LABEL_42;
    }
    if (!*v11)
LABEL_42:
      sub_223198218("map::at:  key not found");
    v29 = *(_QWORD *)(*v11 + 64);
    v97 = &off_24EC21420;
    sub_2231F9830(v29, v98);
    v90 = &off_24EC200A8;
    v30 = v110;
    v31 = v111;
    if (v111)
      goto LABEL_45;
LABEL_59:
    v91 = v30;
    v92 = 0;
    v93 = v112;
    v94 = v113;
    v95 = v114;
    goto LABEL_60;
  }
  v97 = &off_24EC21420;
  memset(v98, 0, 42);
  v90 = &off_24EC200A8;
  v30 = v110;
  v31 = v111;
  if (!v111)
    goto LABEL_59;
LABEL_45:
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  v34 = v114;
  do
    v35 = __ldxr(p_shared_owners);
  while (__stxr(v35 + 1, p_shared_owners));
  v36 = v112;
  v94 = v113;
  do
    v37 = __ldxr(p_shared_owners);
  while (__stxr(v37 + 1, p_shared_owners));
  v91 = v30;
  v92 = v31;
  v93 = v36;
  v95 = v34;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_60:
  v87 = &off_24EC21230;
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  v79 = &off_24EC204C0;
  v40 = v102;
  v41 = v103;
  if (v103)
  {
    v42 = (unint64_t *)&v103->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v44 = v108;
    do
      v45 = __ldxr(v42);
    while (__stxr(v45 + 1, v42));
    v46 = v104;
    v83 = v105;
    v84 = v106;
    v85 = v107;
    do
      v47 = __ldxr(v42);
    while (__stxr(v47 + 1, v42));
    v80 = v40;
    v81 = v41;
    v82 = v46;
    v86 = v44;
    do
      v48 = __ldaxr(v42);
    while (__stlxr(v48 - 1, v42));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    do
      v49 = __ldaxr(v42);
    while (__stlxr(v49 - 1, v42));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  else
  {
    v80 = v102;
    v81 = 0;
    v82 = v104;
    v83 = v105;
    v84 = v106;
    v85 = v107;
    v86 = v108;
  }
  sub_223AB3C10((uint64_t)&v90, (uint64_t)&v99, (uint64_t)&v87, (uint64_t)&v79, (uint64_t)&v97, a2, a3, (uint64_t *)&v96, a5);
  v115 = (_OWORD *)a1;
  v50 = sub_223ABE324(v13, (unsigned __int8 *)a1, &v115);
  v51 = v96;
  v96 = 0uLL;
  v52 = (std::__shared_weak_count *)v50[7];
  *((_OWORD *)v50 + 3) = v51;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v81;
  if (v81)
  {
    v59 = (unint64_t *)&v81->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v92;
  if (v92)
  {
    v65 = (unint64_t *)&v92->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)v98[1];
  if (v98[1])
  {
    v68 = (unint64_t *)(v98[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v100[1];
  if (v100[1])
  {
    v71 = (unint64_t *)(v100[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v103;
  if (v103)
  {
    v74 = (unint64_t *)&v103->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v111;
  if (v111)
  {
    v77 = (unint64_t *)&v111->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_223ABB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  sub_2231BD9DC((uint64_t)&a42);
  sub_2231CDC3C(v42 - 256);
  sub_2231BD974(v42 - 176);
  _Unwind_Resume(a1);
}

void sub_223ABB400(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, float a6)
{
  __n128 v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t **v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t (**v112)();
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115[3];
  uint64_t (**v116)();
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int16 v121;
  uint64_t (**v122)();
  __int128 v123;
  _OWORD v124[2];
  _BYTE v125[40];
  __int128 v126;
  __int128 v127;
  __int16 v128;
  unsigned __int8 v129;
  uint64_t (**v130)();
  __int128 v131;
  _BYTE v132[56];
  __int16 v133;
  __int128 *v134;
  __int128 v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  sub_223C40588(a1, (uint64_t)&v130);
  if ((_BYTE)v133)
  {
    v12 = sub_223C40588(a1, (uint64_t)v125);
    v13 = v129;
    if (v129)
    {
      v14 = *(std::__shared_weak_count **)&v125[16];
      if (!*(_QWORD *)&v125[16])
        goto LABEL_7;
      v15 = (unint64_t *)(*(_QWORD *)&v125[16] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v12);
        std::__shared_weak_count::__release_weak(v14);
        if (!(_BYTE)v133)
          goto LABEL_14;
      }
      else
      {
LABEL_7:
        if (!(_BYTE)v133)
          goto LABEL_14;
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (!*((_QWORD *)&v131 + 1))
      goto LABEL_12;
    v18 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v12);
      std::__shared_weak_count::__release_weak(v17);
      if (v13)
        goto LABEL_14;
    }
    else
    {
LABEL_12:
      if (v13)
        goto LABEL_14;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 346, (uint64_t)"frame.ProcessedSemantic().has_value() && frame.ProcessedSemantic().has_value()", 78, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_281;
  }
LABEL_14:
  v20 = xmmword_2246597A0;
  v135 = xmmword_2246597A0;
  v21 = *(uint64_t ***)(a4 + 480);
  if (v21)
  {
    while (1)
    {
      v104 = *((unsigned __int8 *)v21 + 32);
      v105 = v104 > 0x37;
      if (v104 != 55
        || (v106 = *((unsigned __int8 *)v21 + 33), v105 = v106 > 0xC9, v106 != 201)
        || (v107 = *((unsigned __int8 *)v21 + 34), v105 = v107 > 0x70, v107 != 112)
        || (v108 = *((unsigned __int8 *)v21 + 35), v105 = v108 > 0x2C, v108 != 44))
      {
        if (v105)
          goto LABEL_220;
        goto LABEL_219;
      }
      v109 = *((unsigned __int8 *)v21 + 36);
      if (v109 != 78)
      {
        v110 = 78;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 37);
      if (v109 != 99)
      {
        v110 = 99;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 38);
      if (v109 != 15)
      {
        v110 = 15;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 39);
      if (v109 != 88)
      {
        v110 = 88;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 40);
      if (v109 != 200)
      {
        v110 = 200;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 41);
      if (v109 != 73)
      {
        v110 = 73;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 42);
      if (v109 != 164)
      {
        v110 = 164;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 43);
      if (v109 != 192)
      {
        v110 = 192;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 44);
      if (v109 != 37)
      {
        v110 = 37;
        goto LABEL_252;
      }
      v109 = *((unsigned __int8 *)v21 + 45);
      if (v109 != 101)
        break;
      v109 = *((unsigned __int8 *)v21 + 46);
      if (v109 != 239)
      {
        v110 = 239;
LABEL_252:
        if (v110 < v109)
          goto LABEL_220;
        goto LABEL_253;
      }
      v109 = *((unsigned __int8 *)v21 + 47);
      if (v109 != 14)
      {
        v110 = 14;
        goto LABEL_252;
      }
LABEL_253:
      v111 = *((unsigned __int8 *)v21 + 36);
      if (v111 == 78)
      {
        v111 = *((unsigned __int8 *)v21 + 37);
        if (v111 == 99)
        {
          v111 = *((unsigned __int8 *)v21 + 38);
          if (v111 == 15)
          {
            v111 = *((unsigned __int8 *)v21 + 39);
            if (v111 == 88)
            {
              v111 = *((unsigned __int8 *)v21 + 40);
              if (v111 == 200)
              {
                v111 = *((unsigned __int8 *)v21 + 41);
                if (v111 == 73)
                {
                  v111 = *((unsigned __int8 *)v21 + 42);
                  if (v111 == 164)
                  {
                    v111 = *((unsigned __int8 *)v21 + 43);
                    if (v111 == 192)
                    {
                      v111 = *((unsigned __int8 *)v21 + 44);
                      if (v111 == 37)
                      {
                        v111 = *((unsigned __int8 *)v21 + 45);
                        if (v111 == 101)
                        {
                          v111 = *((unsigned __int8 *)v21 + 46);
                          if (v111 == 239)
                          {
                            v111 = *((unsigned __int8 *)v21 + 47);
                            if (v111 == 14)
                              goto LABEL_16;
                            v103 = 14;
                          }
                          else
                          {
                            v103 = 239;
                          }
                        }
                        else
                        {
                          v103 = 101;
                        }
                      }
                      else
                      {
                        v103 = 37;
                      }
                    }
                    else
                    {
                      v103 = 192;
                    }
                  }
                  else
                  {
                    v103 = 164;
                  }
                }
                else
                {
                  v103 = 73;
                }
              }
              else
              {
                v103 = 200;
              }
            }
            else
            {
              v103 = 88;
            }
          }
          else
          {
            v103 = 15;
          }
        }
        else
        {
          v103 = 99;
        }
      }
      else
      {
        v103 = 78;
      }
      if (v111 >= v103)
        goto LABEL_16;
LABEL_219:
      ++v21;
LABEL_220:
      v21 = (uint64_t **)*v21;
      if (!v21)
        goto LABEL_15;
    }
    v110 = 101;
    goto LABEL_252;
  }
LABEL_15:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 350, (uint64_t)"kf_to_mesh_rendering.count(uuid)", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_281;
  }
LABEL_16:
  if (!*(_BYTE *)(a1 + 624))
    goto LABEL_21;
  if ((!*(_DWORD *)(a1 + 600) || !*(_DWORD *)(a1 + 604))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1163, (uint64_t)"!derived.processed_depth->Empty()", 33, (uint64_t)"Processed depth buffer not valid", 32, (void (*)(void **))sub_22457406C))
  {
LABEL_281:
    abort();
  }
  sub_223C3BF78(a1 + 568, (uint64_t)&v130);
  v20 = v131;
  *(_OWORD *)v125 = *(_OWORD *)v132;
  *(_OWORD *)&v125[10] = *(_OWORD *)&v132[10];
LABEL_21:
  v122 = &off_24EC200A8;
  v123 = v20;
  v124[0] = *(_OWORD *)v125;
  *(_OWORD *)((char *)v124 + 10) = *(_OWORD *)&v125[10];
  v22 = *(uint64_t ***)(a4 + 480);
  if (!v22)
LABEL_280:
    sub_223198218("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v23 = *((unsigned __int8 *)v22 + 32);
      if (v23 != 55)
      {
        if (v23 < 0x38)
          goto LABEL_44;
        goto LABEL_23;
      }
      v24 = *((unsigned __int8 *)v22 + 33);
      v25 = v24 > 0xC9;
      if (v24 != 201
        || (v26 = *((unsigned __int8 *)v22 + 34), v25 = v26 > 0x70, v26 != 112)
        || (v27 = *((unsigned __int8 *)v22 + 35), v25 = v27 > 0x2C, v27 != 44))
      {
        if (!v25)
          goto LABEL_44;
        goto LABEL_23;
      }
      v28 = *((unsigned __int8 *)v22 + 36);
      if (v28 != 78)
        break;
      v29 = *((unsigned __int8 *)v22 + 37);
      if (v29 != 99)
      {
        if (v29 > 0x63)
          goto LABEL_23;
        goto LABEL_67;
      }
      v30 = *((unsigned __int8 *)v22 + 38);
      if (v30 != 15)
      {
        if (v30 > 0xF)
          goto LABEL_23;
        goto LABEL_67;
      }
      v31 = *((unsigned __int8 *)v22 + 39);
      if (v31 != 88)
      {
        if (v31 > 0x58)
          goto LABEL_23;
        goto LABEL_67;
      }
      v32 = *((unsigned __int8 *)v22 + 40);
      if (v32 != 200)
      {
        if (v32 > 0xC8)
          goto LABEL_23;
        goto LABEL_67;
      }
      v33 = *((unsigned __int8 *)v22 + 41);
      if (v33 != 73)
      {
        if (v33 > 0x49)
          goto LABEL_23;
        goto LABEL_67;
      }
      v34 = *((unsigned __int8 *)v22 + 42);
      if (v34 != 164)
      {
        if (v34 > 0xA4)
          goto LABEL_23;
        goto LABEL_67;
      }
      v35 = *((unsigned __int8 *)v22 + 43);
      if (v35 != 192)
      {
        if (v35 > 0xC0)
          goto LABEL_23;
        goto LABEL_67;
      }
      v36 = *((unsigned __int8 *)v22 + 44);
      if (v36 != 37)
      {
        if (v36 > 0x25)
          goto LABEL_23;
        goto LABEL_67;
      }
      v37 = *((unsigned __int8 *)v22 + 45);
      if (v37 != 101)
      {
        if (v37 > 0x65)
          goto LABEL_23;
        goto LABEL_67;
      }
      v38 = *((unsigned __int8 *)v22 + 46);
      if (v38 == 239)
      {
        if (*((unsigned __int8 *)v22 + 47) <= 0xEu)
          goto LABEL_67;
      }
      else if (v38 <= 0xEF)
      {
        goto LABEL_67;
      }
LABEL_23:
      v22 = (uint64_t **)*v22;
      if (!v22)
        goto LABEL_280;
    }
    if (v28 > 0x4E)
      goto LABEL_23;
LABEL_67:
    v39 = *((unsigned __int8 *)v22 + 36);
    if (v39 != 78)
    {
      if (v39 >= 0x4E)
        goto LABEL_101;
      goto LABEL_44;
    }
    v40 = *((unsigned __int8 *)v22 + 37);
    if (v40 != 99)
    {
      if (v40 >= 0x63)
        goto LABEL_101;
      goto LABEL_44;
    }
    v41 = *((unsigned __int8 *)v22 + 38);
    if (v41 != 15)
    {
      if (v41 >= 0xF)
        goto LABEL_101;
      goto LABEL_44;
    }
    v42 = *((unsigned __int8 *)v22 + 39);
    if (v42 != 88)
    {
      if (v42 >= 0x58)
        goto LABEL_101;
      goto LABEL_44;
    }
    v43 = *((unsigned __int8 *)v22 + 40);
    if (v43 != 200)
    {
      if (v43 >= 0xC8)
        goto LABEL_101;
      goto LABEL_44;
    }
    v44 = *((unsigned __int8 *)v22 + 41);
    if (v44 != 73)
    {
      if (v44 >= 0x49)
        goto LABEL_101;
      goto LABEL_44;
    }
    v45 = *((unsigned __int8 *)v22 + 42);
    if (v45 != 164)
    {
      if (v45 >= 0xA4)
        goto LABEL_101;
      goto LABEL_44;
    }
    v46 = *((unsigned __int8 *)v22 + 43);
    if (v46 != 192)
    {
      if (v46 >= 0xC0)
        goto LABEL_101;
      goto LABEL_44;
    }
    v47 = *((unsigned __int8 *)v22 + 44);
    if (v47 != 37)
    {
      if (v47 >= 0x25)
        goto LABEL_101;
      goto LABEL_44;
    }
    v48 = *((unsigned __int8 *)v22 + 45);
    if (v48 == 101)
      break;
    if (v48 >= 0x65)
      goto LABEL_101;
LABEL_44:
    v22 = (uint64_t **)v22[1];
    if (!v22)
      goto LABEL_280;
  }
  v49 = *((unsigned __int8 *)v22 + 46);
  if (v49 == 239)
  {
    if (*((unsigned __int8 *)v22 + 47) >= 0xEu)
      goto LABEL_101;
    goto LABEL_44;
  }
  if (v49 < 0xEF)
    goto LABEL_44;
LABEL_101:
  v50 = v22[6];
  v132[4] = 0;
  v131 = 0uLL;
  v130 = &off_24EC216B8;
  v132[0] = 0;
  memset(&v132[8], 0, 48);
  sub_22449BC84(&v131, (uint64_t)(v50 + 1));
  v133 = *((_WORD *)v50 + 40);
  sub_223C40588(a1, (uint64_t)v125);
  v116 = &off_24EC204C0;
  v117 = *(_OWORD *)&v125[8];
  v118 = *(_OWORD *)&v125[24];
  v119 = v126;
  v120 = v127;
  v121 = v128;
  v51 = *(uint64_t ***)(a4 + 480);
  if (!v51)
LABEL_102:
    sub_223198218("map::at:  key not found");
  while (2)
  {
    while (2)
    {
      v52 = *((unsigned __int8 *)v51 + 32);
      if (v52 != 55)
      {
        if (v52 >= 0x38)
          goto LABEL_103;
        goto LABEL_124;
      }
      v53 = *((unsigned __int8 *)v51 + 33);
      v54 = v53 > 0xC9;
      if (v53 != 201
        || (v55 = *((unsigned __int8 *)v51 + 34), v54 = v55 > 0x70, v55 != 112)
        || (v56 = *((unsigned __int8 *)v51 + 35), v54 = v56 > 0x2C, v56 != 44))
      {
        if (v54)
          goto LABEL_103;
        goto LABEL_124;
      }
      v57 = *((unsigned __int8 *)v51 + 36);
      if (v57 == 78)
      {
        v58 = *((unsigned __int8 *)v51 + 37);
        if (v58 == 99)
        {
          v59 = *((unsigned __int8 *)v51 + 38);
          if (v59 == 15)
          {
            v60 = *((unsigned __int8 *)v51 + 39);
            if (v60 == 88)
            {
              v61 = *((unsigned __int8 *)v51 + 40);
              if (v61 == 200)
              {
                v62 = *((unsigned __int8 *)v51 + 41);
                if (v62 == 73)
                {
                  v63 = *((unsigned __int8 *)v51 + 42);
                  if (v63 == 164)
                  {
                    v64 = *((unsigned __int8 *)v51 + 43);
                    if (v64 == 192)
                    {
                      v65 = *((unsigned __int8 *)v51 + 44);
                      if (v65 == 37)
                      {
                        v66 = *((unsigned __int8 *)v51 + 45);
                        if (v66 == 101)
                        {
                          v67 = *((unsigned __int8 *)v51 + 46);
                          if (v67 == 239)
                          {
                            if (*((unsigned __int8 *)v51 + 47) > 0xEu)
                              goto LABEL_103;
                          }
                          else if (v67 > 0xEF)
                          {
LABEL_103:
                            v51 = (uint64_t **)*v51;
                            if (!v51)
                              goto LABEL_102;
                            continue;
                          }
                        }
                        else if (v66 > 0x65)
                        {
                          goto LABEL_103;
                        }
                      }
                      else if (v65 > 0x25)
                      {
                        goto LABEL_103;
                      }
                    }
                    else if (v64 > 0xC0)
                    {
                      goto LABEL_103;
                    }
                  }
                  else if (v63 > 0xA4)
                  {
                    goto LABEL_103;
                  }
                }
                else if (v62 > 0x49)
                {
                  goto LABEL_103;
                }
              }
              else if (v61 > 0xC8)
              {
                goto LABEL_103;
              }
            }
            else if (v60 > 0x58)
            {
              goto LABEL_103;
            }
          }
          else if (v59 > 0xF)
          {
            goto LABEL_103;
          }
        }
        else if (v58 > 0x63)
        {
          goto LABEL_103;
        }
      }
      else if (v57 > 0x4E)
      {
        goto LABEL_103;
      }
      break;
    }
    v68 = *((unsigned __int8 *)v51 + 36);
    if (v68 != 78)
    {
      if (v68 >= 0x4E)
        break;
      goto LABEL_124;
    }
    v69 = *((unsigned __int8 *)v51 + 37);
    if (v69 != 99)
    {
      if (v69 >= 0x63)
        break;
      goto LABEL_124;
    }
    v70 = *((unsigned __int8 *)v51 + 38);
    if (v70 != 15)
    {
      if (v70 >= 0xF)
        break;
      goto LABEL_124;
    }
    v71 = *((unsigned __int8 *)v51 + 39);
    if (v71 != 88)
    {
      if (v71 >= 0x58)
        break;
      goto LABEL_124;
    }
    v72 = *((unsigned __int8 *)v51 + 40);
    if (v72 != 200)
    {
      if (v72 >= 0xC8)
        break;
      goto LABEL_124;
    }
    v73 = *((unsigned __int8 *)v51 + 41);
    if (v73 != 73)
    {
      if (v73 >= 0x49)
        break;
      goto LABEL_124;
    }
    v74 = *((unsigned __int8 *)v51 + 42);
    if (v74 != 164)
    {
      if (v74 >= 0xA4)
        break;
      goto LABEL_124;
    }
    v75 = *((unsigned __int8 *)v51 + 43);
    if (v75 != 192)
    {
      if (v75 >= 0xC0)
        break;
      goto LABEL_124;
    }
    v76 = *((unsigned __int8 *)v51 + 44);
    if (v76 != 37)
    {
      if (v76 >= 0x25)
        break;
      goto LABEL_124;
    }
    v77 = *((unsigned __int8 *)v51 + 45);
    if (v77 != 101)
    {
      if (v77 >= 0x65)
        break;
      goto LABEL_124;
    }
    v78 = *((unsigned __int8 *)v51 + 46);
    if (v78 == 239)
    {
      if (*((unsigned __int8 *)v51 + 47) >= 0xEu)
        break;
      goto LABEL_124;
    }
    if (v78 < 0xEF)
    {
LABEL_124:
      v51 = (uint64_t **)v51[1];
      if (!v51)
        goto LABEL_102;
      continue;
    }
    break;
  }
  v79 = (uint64_t)v51[8];
  *(_QWORD *)v125 = &off_24EC21420;
  sub_2231F9830(v79, (uint64_t *)&v125[8]);
  v112 = &off_24EC21230;
  sub_2231BE6D4((uint64_t)&v130, &v113);
  sub_223AB3C10((uint64_t)&v122, (uint64_t)&v112, a5, (uint64_t)&v116, (uint64_t)v125, a2, a3, v115, a6);
  v134 = &v135;
  v80 = sub_223ABE324((uint64_t **)(a4 + 400), (unsigned __int8 *)&v135, &v134);
  v81 = *(_OWORD *)v115;
  *(_OWORD *)v115 = 0uLL;
  v82 = (std::__shared_weak_count *)v80[7];
  *((_OWORD *)v80 + 3) = v81;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)v115[1];
  if (v115[1])
  {
    v86 = (unint64_t *)(v115[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v114;
  if (v114)
  {
    v89 = (unint64_t *)&v114->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(std::__shared_weak_count **)&v125[16];
  if (*(_QWORD *)&v125[16])
  {
    v92 = (unint64_t *)(*(_QWORD *)&v125[16] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_223ABC118(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231BD3DC(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_223ABC12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_223167354((uint64_t)&a17);
  sub_2231BD9DC((uint64_t)&a10);
  sub_2231BEEB4((uint64_t)&a37);
  sub_22319F500((uint64_t)&a20);
  sub_223167354(v37);
  sub_22319EF60((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_223ABC1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_22319EF60((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_223ABC1D4(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      sub_223198030((uint64_t)(v2 + 6), v2[7]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_223ABC234(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  void *v11;

  *(_QWORD *)a1 = &off_24EC5F2F0;
  v2 = (_QWORD *)(a1 + 256);
  v3 = *(_QWORD **)(a1 + 280);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 248);
  if (v5 == (_QWORD *)(a1 + 224))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 224);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 216);
  if (v7 == (_QWORD *)(a1 + 192))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 192);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD ***)(a1 + 168);
  if (v9)
  {
    do
    {
      v10 = *v9;
      sub_223198030((uint64_t)(v9 + 6), v9[7]);
      operator delete(v9);
      v9 = (_QWORD **)v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v11)
    operator delete(v11);
  *(_QWORD *)a1 = &off_24EC5F2C0;
  sub_223ABDFA4(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_223ABC348(uint64_t a1)
{
  sub_223ABC234(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223ABC36C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;

  v2 = a1 + 2;
  sub_223ABDFA4((_QWORD *)a1[2]);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  if (v2[20])
  {
    v3 = (_QWORD **)a1[21];
    if (v3)
    {
      do
      {
        v4 = *v3;
        sub_223198030((uint64_t)(v3 + 6), v3[7]);
        operator delete(v3);
        v3 = (_QWORD **)v4;
      }
      while (v4);
    }
    a1[21] = 0;
    v5 = a1[20];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(a1[19] + 8 * i) = 0;
    }
    a1[22] = 0;
  }
}

void sub_223ABC3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *p_p;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t **v37;
  unsigned __int8 *v38;
  _OWORD *v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t **v57;
  uint64_t ***v58;
  uint64_t **v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  char *v67;
  std::string::size_type v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  std::mutex *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  std::string::size_type size;
  std::string *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  int v82;
  BOOL v83;
  __n128 *v85;
  std::string *v86;
  size_t v87;
  char v88;
  int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  std::string::value_type v96;
  char v97;
  void **v98;
  __int128 *v99;
  BOOL v100;
  void *v101;
  uint64_t v102;
  _OWORD *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t **v122;
  unsigned int v123;
  unsigned int v124;
  BOOL v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t **v129;
  unsigned int v130;
  unsigned int v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  uint64_t v137;
  int v138;
  unsigned __int8 *v139;
  uint64_t v140;
  std::string v142;
  uint64_t v143;
  __int128 v144;
  _BYTE v145[24];
  _WORD v146[16];
  void *__p;
  __int128 v148;
  _BYTE v149[26];
  char v150;
  __int128 v151;
  __int128 v152;
  int v153;
  _BYTE __dst[50];
  char v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  v139 = (unsigned __int8 *)(a1 + 128);
  sub_223A62A3C((unsigned __int8 *)(a1 + 128), (uint64_t)&__p);
  if (v148 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  *(_QWORD *)__dst = 0;
  v6 = strnlen(p_p, 8uLL);
  memcpy(__dst, p_p, v6);
  kdebug_trace();
  if (SHIBYTE(v148) < 0)
    operator delete(__p);
  if (*(_BYTE *)(a2 + 1848))
    v7 = *(_QWORD *)(a2 + 1256);
  else
    v7 = 0;
  if (*(_QWORD *)(a3 + 352) != v7)
    goto LABEL_393;
  v8 = *(unsigned __int8 *)(a1 + 116);
  if ((*(_BYTE *)(a3 + 496) != 0) != (*(_BYTE *)(a1 + 116) != 0))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 185, (uint64_t)"batch_metadata->SupportsVolumetric() == keyvol_config.SupportsVolumetric()", 74, (uint64_t)"Batch metadata does not match keyframing adaptor internal config.", 65, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = *(unsigned __int8 *)(a1 + 116);
  }
  if (!v8)
  {
LABEL_393:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 219, (uint64_t)"batch_metadata.TimeMatch(keyframe_list) && SupportsVolumetric(config_, batch_metadata)", 86, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v9 = *(_QWORD *)(a3 + 272);
  v10 = *(_QWORD *)(a3 + 320);
  __p = *(void **)(a3 + 248);
  *(_QWORD *)&v148 = v9;
  *((_QWORD *)&v148 + 1) = v10;
  *(_QWORD *)v149 = 0;
  *(_DWORD *)&v149[8] = 728302440;
  kdebug_trace();
  v151 = 0uLL;
  *(_QWORD *)&v152 = 0;
  v12 = *(float32x2_t **)a2;
  v11 = *(float32x2_t **)(a2 + 8);
  if (*(float32x2_t **)a2 != v11)
  {
    v13 = (uint64_t *)(a3 + 240);
    v14 = (uint64_t *)(a3 + 264);
    while (1)
    {
      v16 = *v13;
      if (!*v13)
        goto LABEL_69;
      v17 = a3 + 240;
      do
      {
        v18 = *(unsigned __int8 *)(v16 + 25);
        v19 = v12->u8[0];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 26);
        v19 = v12->u8[1];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 27);
        v19 = v12->u8[2];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 28);
        v19 = v12->u8[3];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 29);
        v19 = v12->u8[4];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 30);
        v19 = v12->u8[5];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 31);
        v19 = v12->u8[6];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 32);
        v19 = v12->u8[7];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 33);
        v19 = v12[1].u8[0];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 34);
        v19 = v12[1].u8[1];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 35);
        v19 = v12[1].u8[2];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 36);
        v19 = v12[1].u8[3];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 37);
        v19 = v12[1].u8[4];
        if (v18 != v19)
          goto LABEL_39;
        v18 = *(unsigned __int8 *)(v16 + 38);
        v19 = v12[1].u8[5];
        if (v18 == v19
          && (v18 = *(unsigned __int8 *)(v16 + 39), v19 = v12[1].u8[6], v18 == v19)
          && (v18 = *(unsigned __int8 *)(v16 + 40), v19 = v12[1].u8[7], v18 == v19))
        {
          v17 = v16;
        }
        else
        {
LABEL_39:
          if (v18 < v19)
            v16 += 8;
          else
            v17 = v16;
        }
        v16 = *(_QWORD *)v16;
      }
      while (v16);
      if ((uint64_t *)v17 == v13 || (char)sub_22319835C((unsigned __int8 *)v12, (unsigned __int8 *)(v17 + 25)) < 0)
      {
LABEL_69:
        v20 = *v14;
        if (!*v14)
          goto LABEL_19;
        v21 = a3 + 264;
        do
        {
          v22 = *(unsigned __int8 *)(v20 + 25);
          v23 = v12->u8[0];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 26);
          v23 = v12->u8[1];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 27);
          v23 = v12->u8[2];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 28);
          v23 = v12->u8[3];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 29);
          v23 = v12->u8[4];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 30);
          v23 = v12->u8[5];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 31);
          v23 = v12->u8[6];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 32);
          v23 = v12->u8[7];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 33);
          v23 = v12[1].u8[0];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 34);
          v23 = v12[1].u8[1];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 35);
          v23 = v12[1].u8[2];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 36);
          v23 = v12[1].u8[3];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 37);
          v23 = v12[1].u8[4];
          if (v22 != v23)
            goto LABEL_64;
          v22 = *(unsigned __int8 *)(v20 + 38);
          v23 = v12[1].u8[5];
          if (v22 == v23
            && (v22 = *(unsigned __int8 *)(v20 + 39), v23 = v12[1].u8[6], v22 == v23)
            && (v22 = *(unsigned __int8 *)(v20 + 40), v23 = v12[1].u8[7], v22 == v23))
          {
            v21 = v20;
          }
          else
          {
LABEL_64:
            if (v22 < v23)
              v20 += 8;
            else
              v21 = v20;
          }
          v20 = *(_QWORD *)v20;
        }
        while (v20);
        if ((uint64_t *)v21 == v14 || (char)sub_22319835C((unsigned __int8 *)v12, (unsigned __int8 *)(v21 + 25)) < 0)
          goto LABEL_19;
      }
      v24 = (char *)*((_QWORD *)&v151 + 1);
      if (*((_QWORD *)&v151 + 1) < (unint64_t)v152)
      {
        **((_OWORD **)&v151 + 1) = *(_OWORD *)v12->f32;
        v15 = v24 + 16;
      }
      else
      {
        v25 = (char *)v151;
        v26 = (uint64_t)(*((_QWORD *)&v151 + 1) - v151) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          sub_22316E078();
        v28 = v152 - v151;
        if ((uint64_t)(v152 - v151) >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 60)
            sub_223174E94();
          v30 = (char *)operator new(16 * v29);
          v31 = &v30[16 * v26];
          *(_OWORD *)v31 = *(_OWORD *)v12->f32;
          v32 = (uint64_t)v31;
          if (v24 != v25)
          {
            do
            {
LABEL_82:
              *(_OWORD *)(v32 - 16) = *((_OWORD *)v24 - 1);
              v32 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = v25;
            v15 = v31 + 16;
            *(_QWORD *)&v151 = v32;
            *(_QWORD *)&v152 = &v30[16 * v29];
            if (!v24)
              goto LABEL_18;
LABEL_86:
            operator delete(v24);
            goto LABEL_18;
          }
        }
        else
        {
          v30 = 0;
          v31 = (char *)(16 * v26);
          *(_OWORD *)(16 * v26) = *(_OWORD *)v12->f32;
          v32 = 16 * v26;
          if (v24 != v25)
            goto LABEL_82;
        }
        v15 = v31 + 16;
        *(_QWORD *)&v151 = v32;
        *(_QWORD *)&v152 = &v30[16 * v29];
        if (v24)
          goto LABEL_86;
      }
LABEL_18:
      *((_QWORD *)&v151 + 1) = v15;
LABEL_19:
      v12 += 31;
      if (v12 == v11)
      {
        v33 = (unsigned __int8 *)v151;
        v34 = *(_QWORD **)(a3 + 304);
        v35 = (_QWORD *)(a3 + 312);
        if (v34 != (_QWORD *)(a3 + 312))
          goto LABEL_88;
LABEL_160:
        v36 = (unsigned __int8 *)*((_QWORD *)&v151 + 1);
        goto LABEL_161;
      }
    }
  }
  v33 = 0;
  v34 = *(_QWORD **)(a3 + 304);
  v35 = (_QWORD *)(a3 + 312);
  if (v34 == (_QWORD *)(a3 + 312))
    goto LABEL_160;
LABEL_88:
  v36 = (unsigned __int8 *)*((_QWORD *)&v151 + 1);
  v37 = *(uint64_t ***)(a1 + 16);
  if (!v37)
  {
    do
    {
      v55 = (_QWORD *)v34[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v34[2];
          v83 = *v56 == (_QWORD)v34;
          v34 = v56;
        }
        while (!v83);
      }
      v34 = v56;
    }
    while (v56 != v35);
    goto LABEL_161;
  }
  v38 = (unsigned __int8 *)v152;
LABEL_91:
  v39 = (_OWORD *)((char *)v34 + 25);
  v40 = *((unsigned __int8 *)v34 + 25);
  while (1)
  {
    v41 = *((unsigned __int8 *)v37 + 32);
    v42 = v40 >= v41;
    if (v40 != v41)
    {
      v43 = *((unsigned __int8 *)v34 + 25);
LABEL_122:
      if (!v42)
        goto LABEL_92;
      goto LABEL_124;
    }
    v43 = *((unsigned __int8 *)v34 + 26);
    v41 = *((unsigned __int8 *)v37 + 33);
    v42 = v43 >= v41;
    if (v43 != v41)
      goto LABEL_122;
    v43 = *((unsigned __int8 *)v34 + 27);
    v41 = *((unsigned __int8 *)v37 + 34);
    v42 = v43 >= v41;
    if (v43 != v41)
      goto LABEL_122;
    v43 = *((unsigned __int8 *)v34 + 28);
    v41 = *((unsigned __int8 *)v37 + 35);
    v42 = v43 >= v41;
    if (v43 != v41)
      goto LABEL_122;
    v43 = *((unsigned __int8 *)v34 + 29);
    v41 = *((unsigned __int8 *)v37 + 36);
    v42 = v43 >= v41;
    if (v43 != v41)
      goto LABEL_122;
    v43 = *((unsigned __int8 *)v34 + 30);
    v41 = *((unsigned __int8 *)v37 + 37);
    v42 = v43 >= v41;
    if (v43 != v41)
      goto LABEL_122;
    v44 = *((unsigned __int8 *)v34 + 31);
    v45 = *((unsigned __int8 *)v37 + 38);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 32);
    v45 = *((unsigned __int8 *)v37 + 39);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 33);
    v45 = *((unsigned __int8 *)v37 + 40);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 34);
    v45 = *((unsigned __int8 *)v37 + 41);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 35);
    v45 = *((unsigned __int8 *)v37 + 42);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 36);
    v45 = *((unsigned __int8 *)v37 + 43);
    if (v44 != v45)
      goto LABEL_109;
    v44 = *((unsigned __int8 *)v34 + 37);
    v45 = *((unsigned __int8 *)v37 + 44);
    if (v44 != v45
      || (v44 = *((unsigned __int8 *)v34 + 38), v45 = *((unsigned __int8 *)v37 + 45), v44 != v45)
      || (v44 = *((unsigned __int8 *)v34 + 39), v45 = *((unsigned __int8 *)v37 + 46), v44 != v45)
      || (v44 = *((unsigned __int8 *)v34 + 40), v45 = *((unsigned __int8 *)v37 + 47), v44 != v45))
    {
LABEL_109:
      if (v44 < v45)
        goto LABEL_92;
    }
    v41 = *((unsigned __int8 *)v37 + 38);
    v43 = *((unsigned __int8 *)v34 + 31);
    if (v41 == v43)
    {
      v41 = *((unsigned __int8 *)v37 + 39);
      v43 = *((unsigned __int8 *)v34 + 32);
      if (v41 == v43)
      {
        v41 = *((unsigned __int8 *)v37 + 40);
        v43 = *((unsigned __int8 *)v34 + 33);
        if (v41 == v43)
        {
          v41 = *((unsigned __int8 *)v37 + 41);
          v43 = *((unsigned __int8 *)v34 + 34);
          if (v41 == v43)
          {
            v41 = *((unsigned __int8 *)v37 + 42);
            v43 = *((unsigned __int8 *)v34 + 35);
            if (v41 == v43)
            {
              v41 = *((unsigned __int8 *)v37 + 43);
              v43 = *((unsigned __int8 *)v34 + 36);
              if (v41 == v43)
              {
                v41 = *((unsigned __int8 *)v37 + 44);
                v43 = *((unsigned __int8 *)v34 + 37);
                if (v41 == v43)
                {
                  v41 = *((unsigned __int8 *)v37 + 45);
                  v43 = *((unsigned __int8 *)v34 + 38);
                  if (v41 == v43)
                  {
                    v41 = *((unsigned __int8 *)v37 + 46);
                    v43 = *((unsigned __int8 *)v34 + 39);
                    if (v41 == v43)
                    {
                      v41 = *((unsigned __int8 *)v37 + 47);
                      v43 = *((unsigned __int8 *)v34 + 40);
                      if (v41 == v43)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_124:
    if (v41 >= v43)
      break;
    ++v37;
LABEL_92:
    v37 = (uint64_t **)*v37;
    if (!v37)
      goto LABEL_145;
  }
  if (v36 >= v38)
  {
    v47 = (v36 - v33) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      sub_22316E078();
    if ((v38 - v33) >> 3 > v48)
      v48 = (v38 - v33) >> 3;
    if ((unint64_t)(v38 - v33) >= 0x7FFFFFFFFFFFFFF0)
      v49 = 0xFFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
    {
      if (v49 >> 60)
        sub_223174E94();
      v50 = (char *)operator new(16 * v49);
      v51 = (unsigned __int8 *)&v50[16 * v47];
      *(_OWORD *)v51 = *v39;
      if (v36 != v33)
      {
LABEL_137:
        v52 = v51;
        do
        {
          *((_OWORD *)v52 - 1) = *((_OWORD *)v36 - 1);
          v52 -= 16;
          v36 -= 16;
        }
        while (v36 != v33);
        v36 = v33;
        v33 = v52;
        v38 = (unsigned __int8 *)&v50[16 * v49];
        v46 = v51 + 16;
        *(_QWORD *)&v151 = v52;
        *(_QWORD *)&v152 = v38;
        if (!v36)
          goto LABEL_141;
LABEL_140:
        operator delete(v36);
        goto LABEL_141;
      }
    }
    else
    {
      v50 = 0;
      v51 = (unsigned __int8 *)(16 * v47);
      *(_OWORD *)(16 * v47) = *v39;
      if (v36 != v33)
        goto LABEL_137;
    }
    v33 = v51;
    v38 = (unsigned __int8 *)&v50[16 * v49];
    v46 = v51 + 16;
    *(_QWORD *)&v151 = v51;
    *(_QWORD *)&v152 = v38;
    if (!v36)
      goto LABEL_141;
    goto LABEL_140;
  }
  *(_OWORD *)v36 = *v39;
  v46 = v36 + 16;
LABEL_141:
  *((_QWORD *)&v151 + 1) = v46;
  v36 = v46;
  while (1)
  {
LABEL_145:
    v53 = (_QWORD *)v34[1];
    if (v53)
    {
      do
      {
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        v54 = (_QWORD *)v34[2];
        v83 = *v54 == (_QWORD)v34;
        v34 = v54;
      }
      while (!v83);
    }
    if (v54 == v35)
      break;
    v37 = *(uint64_t ***)(a1 + 16);
    v34 = v54;
    if (v37)
      goto LABEL_91;
  }
LABEL_161:
  if (v33 != v36)
  {
    v58 = (uint64_t ***)(a1 + 16);
    v57 = *(uint64_t ***)(a1 + 16);
    if (v57)
    {
LABEL_165:
      v59 = (uint64_t **)(a1 + 16);
      do
      {
        v60 = *((unsigned __int8 *)v57 + 32);
        v61 = *v33;
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 33);
        v61 = v33[1];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 34);
        v61 = v33[2];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 35);
        v61 = v33[3];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 36);
        v61 = v33[4];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 37);
        v61 = v33[5];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 38);
        v61 = v33[6];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 39);
        v61 = v33[7];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 40);
        v61 = v33[8];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 41);
        v61 = v33[9];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 42);
        v61 = v33[10];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 43);
        v61 = v33[11];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 44);
        v61 = v33[12];
        if (v60 != v61)
          goto LABEL_183;
        v60 = *((unsigned __int8 *)v57 + 45);
        v61 = v33[13];
        if (v60 == v61
          && (v60 = *((unsigned __int8 *)v57 + 46), v61 = v33[14], v60 == v61)
          && (v60 = *((unsigned __int8 *)v57 + 47), v61 = v33[15], v60 == v61))
        {
          v59 = v57;
        }
        else
        {
LABEL_183:
          if (v60 < v61)
            ++v57;
          else
            v59 = v57;
        }
        v57 = (uint64_t **)*v57;
      }
      while (v57);
      if (v59 == (uint64_t **)v58 || (char)sub_22319835C(v33, (unsigned __int8 *)v59 + 32) < 0)
        goto LABEL_204;
      v62 = v59[6];
      v63 = (uint64_t *)(v59 + 7);
      *(_QWORD *)&__dst[8] = 0;
      *(_QWORD *)&__dst[16] = 0;
      *(_QWORD *)__dst = &__dst[8];
      if (v62 == (uint64_t *)(v59 + 7))
      {
LABEL_190:
        v64 = *(_QWORD *)(a1 + 216);
        if (!v64)
          sub_223198474();
        (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v33, __dst, a1 + 152, a3);
        sub_223198030((uint64_t)__dst, *(_QWORD **)&__dst[8]);
LABEL_204:
        while (1)
        {
          v33 += 16;
          if (v33 == v36)
            goto LABEL_205;
          v57 = *v58;
          if (*v58)
            goto LABEL_165;
        }
      }
      while (2)
      {
        *(_QWORD *)v145 = *(uint64_t *)((char *)v62 + 28);
        *(_DWORD *)&v145[8] = *((_DWORD *)v62 + 9);
        v65 = sub_2235247E0((uint64_t **)__dst, (uint64_t *)&__dst[8], (uint64_t **)&v142, (uint64_t **)&v144, (int *)v145);
        if (*v65)
        {
          v66 = (uint64_t *)v62[1];
          if (!v66)
            goto LABEL_201;
          do
          {
LABEL_199:
            v69 = v66;
            v66 = (uint64_t *)*v66;
          }
          while (v66);
        }
        else
        {
          v67 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v67 + 28) = *(_QWORD *)v145;
          *((_DWORD *)v67 + 9) = *(_DWORD *)&v145[8];
          v68 = v142.__r_.__value_.__r.__words[0];
          *(_QWORD *)v67 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = v68;
          *v65 = (uint64_t)v67;
          if (**(_QWORD **)__dst)
          {
            *(_QWORD *)__dst = **(_QWORD **)__dst;
            v67 = (char *)*v65;
          }
          sub_2231A9A8C(*(uint64_t **)&__dst[8], (uint64_t *)v67);
          ++*(_QWORD *)&__dst[16];
          v66 = (uint64_t *)v62[1];
          if (v66)
            goto LABEL_199;
          do
          {
LABEL_201:
            v69 = (uint64_t *)v62[2];
            v83 = *v69 == (_QWORD)v62;
            v62 = v69;
          }
          while (!v83);
        }
        v62 = v69;
        if (v69 == v63)
          goto LABEL_190;
        continue;
      }
    }
  }
LABEL_205:
  v143 = *(_QWORD *)(a3 + 392);
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  *(_QWORD *)&__dst[16] = "Stats.Mapper.PruneBlocks";
  *(_QWORD *)&__dst[24] = 24;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v142);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v70 = sub_2241471F8();
    v71 = v70[2];
    if (!v71)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v71 = v70[2];
    }
    v72 = *(_QWORD *)(v71 + 64);
    v73 = (std::mutex *)(v72 + 32);
    std::mutex::lock((std::mutex *)(v72 + 32));
    v75 = *(_QWORD *)(v72 + 96);
    v74 = *(_QWORD *)(v72 + 104);
    std::mutex::unlock(v73);
    if (v75 != v74)
    {
      sub_2241471F8();
      v76 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76))
      {
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76))
        {
          v145[23] = 10;
          *(_QWORD *)&v144 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v144 + 1) = 2;
          strcpy(v145, "hard_erase");
          v77 = sub_2241471F8();
          sub_223663E94((uint64_t)v77, v76, &v143, (uint64_t)v145, &v144);
          if ((v145[23] & 0x80000000) != 0)
            operator delete(*(void **)v145);
        }
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v142.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v79 = &v142;
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v79 = (std::string *)v142.__r_.__value_.__r.__words[0];
    v80 = v79->__r_.__value_.__r.__words[0];
    v81 = v79->__r_.__value_.__l.__size_;
    v82 = v79->__r_.__value_.__s.__data_[16];
    v83 = v80 == 0x6365722E64337663 && v81 == 0x73746174532E6E6FLL;
    if (v83 && v82 == 46)
    {
      v85 = sub_223187510();
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &v142;
      else
        v86 = (std::string *)v142.__r_.__value_.__r.__words[0];
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      else
        v87 = v142.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v85, v86, v87, &v143, (uint64_t)"hard_erase", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  kdebug_trace();
  if ((_QWORD)v151)
  {
    *((_QWORD *)&v151 + 1) = v151;
    operator delete((void *)v151);
  }
  kdebug_trace();
  v88 = *(_BYTE *)(a1 + 102);
  v89 = *(unsigned __int8 *)(a3 + 6);
  kdebug_trace();
  LOBYTE(__p) = 0;
  v150 = 0;
  v140 = a2 + 24;
  if (!*(_BYTE *)(a2 + 1848) || !*(_BYTE *)(a1 + 100) || (sub_223C3BCBC(v140, (uint64_t)__dst), !v155))
  {
    v138 = 0;
    v91 = *(unsigned __int8 **)a2;
    v90 = *(unsigned __int8 **)(a2 + 8);
    if (*(unsigned __int8 **)a2 == v90)
      goto LABEL_243;
    goto LABEL_285;
  }
  __p = &off_24EC21230;
  v148 = *(_OWORD *)&__dst[8];
  *(_QWORD *)&__dst[8] = 0;
  *(_QWORD *)&__dst[16] = 0;
  *(_OWORD *)v149 = *(_OWORD *)&__dst[24];
  *(_OWORD *)&v149[10] = *(_OWORD *)&__dst[34];
  v138 = 1;
  v150 = 1;
  v91 = *(unsigned __int8 **)a2;
  v90 = *(unsigned __int8 **)(a2 + 8);
  if (*(unsigned __int8 **)a2 != v90)
  {
LABEL_285:
    v116 = 0;
    v117 = 0;
    v118 = *(_DWORD *)(a1 + 104);
    v119 = *(_BYTE *)(a1 + 103);
    if (v89)
      v88 = 1;
    do
    {
      if (sub_223AB8B20(a3, (uint64_t)v91))
      {
        if ((sub_223C8F01C(v91[240]) & 0xFE) == 2)
          v120 = 4;
        else
          v120 = v88;
        v145[0] = v120;
        *(_DWORD *)__dst = v118;
        LOBYTE(v151) = v119;
        v121 = *(_QWORD *)(a1 + 280);
        if (!v121)
LABEL_378:
          sub_223198474();
        (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, _BYTE *, __int128 *, uint64_t))(*(_QWORD *)v121
                                                                                                  + 48))(v121, v91, v145, __dst, &v151, a3);
        ++v116;
      }
      v122 = *(uint64_t ***)(a3 + 192);
      if (!v122)
      {
LABEL_333:
        v129 = *(uint64_t ***)(a3 + 216);
        if (!v129)
          goto LABEL_288;
        v130 = *v91;
        while (2)
        {
          v131 = *((unsigned __int8 *)v129 + 25);
          v132 = v130 >= v131;
          if (v130 == v131)
          {
            v133 = v91[1];
            v131 = *((unsigned __int8 *)v129 + 26);
            v132 = v133 >= v131;
            if (v133 == v131)
            {
              v133 = v91[2];
              v131 = *((unsigned __int8 *)v129 + 27);
              v132 = v133 >= v131;
              if (v133 == v131)
              {
                v133 = v91[3];
                v131 = *((unsigned __int8 *)v129 + 28);
                v132 = v133 >= v131;
                if (v133 == v131)
                {
                  v134 = v91[4];
                  v135 = *((unsigned __int8 *)v129 + 29);
                  if (v134 == v135)
                  {
                    v134 = v91[5];
                    v135 = *((unsigned __int8 *)v129 + 30);
                    if (v134 == v135)
                    {
                      v134 = v91[6];
                      v135 = *((unsigned __int8 *)v129 + 31);
                      if (v134 == v135)
                      {
                        v134 = v91[7];
                        v135 = *((unsigned __int8 *)v129 + 32);
                        if (v134 == v135)
                        {
                          v134 = v91[8];
                          v135 = *((unsigned __int8 *)v129 + 33);
                          if (v134 == v135)
                          {
                            v134 = v91[9];
                            v135 = *((unsigned __int8 *)v129 + 34);
                            if (v134 == v135)
                            {
                              v134 = v91[10];
                              v135 = *((unsigned __int8 *)v129 + 35);
                              if (v134 == v135)
                              {
                                v134 = v91[11];
                                v135 = *((unsigned __int8 *)v129 + 36);
                                if (v134 == v135)
                                {
                                  v134 = v91[12];
                                  v135 = *((unsigned __int8 *)v129 + 37);
                                  if (v134 == v135)
                                  {
                                    v134 = v91[13];
                                    v135 = *((unsigned __int8 *)v129 + 38);
                                    if (v134 == v135)
                                    {
                                      v134 = v91[14];
                                      v135 = *((unsigned __int8 *)v129 + 39);
                                      if (v134 == v135)
                                      {
                                        v134 = v91[15];
                                        v135 = *((unsigned __int8 *)v129 + 40);
                                        if (v134 == v135)
                                          goto LABEL_355;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v134 >= v135)
                  {
LABEL_355:
                    v131 = *((unsigned __int8 *)v129 + 29);
                    v133 = v91[4];
                    if (v131 == v133)
                    {
                      v131 = *((unsigned __int8 *)v129 + 30);
                      v133 = v91[5];
                      if (v131 == v133)
                      {
                        v131 = *((unsigned __int8 *)v129 + 31);
                        v133 = v91[6];
                        if (v131 == v133)
                        {
                          v131 = *((unsigned __int8 *)v129 + 32);
                          v133 = v91[7];
                          if (v131 == v133)
                          {
                            v131 = *((unsigned __int8 *)v129 + 33);
                            v133 = v91[8];
                            if (v131 == v133)
                            {
                              v131 = *((unsigned __int8 *)v129 + 34);
                              v133 = v91[9];
                              if (v131 == v133)
                              {
                                v131 = *((unsigned __int8 *)v129 + 35);
                                v133 = v91[10];
                                if (v131 == v133)
                                {
                                  v131 = *((unsigned __int8 *)v129 + 36);
                                  v133 = v91[11];
                                  if (v131 == v133)
                                  {
                                    v131 = *((unsigned __int8 *)v129 + 37);
                                    v133 = v91[12];
                                    if (v131 == v133)
                                    {
                                      v131 = *((unsigned __int8 *)v129 + 38);
                                      v133 = v91[13];
                                      if (v131 == v133)
                                      {
                                        v131 = *((unsigned __int8 *)v129 + 39);
                                        v133 = v91[14];
                                        if (v131 == v133)
                                        {
                                          v131 = *((unsigned __int8 *)v129 + 40);
                                          v133 = v91[15];
                                          if (v131 == v133)
                                            goto LABEL_371;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_335:
                    if (v131 >= v133)
                      goto LABEL_371;
                    ++v129;
                  }
LABEL_337:
                  v129 = (uint64_t **)*v129;
                  if (!v129)
                    goto LABEL_288;
                  continue;
                }
              }
            }
          }
          else
          {
            v133 = *v91;
          }
          break;
        }
        if (v132)
          goto LABEL_335;
        goto LABEL_337;
      }
      v123 = *v91;
      while (1)
      {
        v124 = *((unsigned __int8 *)v122 + 25);
        v125 = v123 >= v124;
        if (v123 != v124)
        {
          v126 = *v91;
          goto LABEL_331;
        }
        v126 = v91[1];
        v124 = *((unsigned __int8 *)v122 + 26);
        v125 = v126 >= v124;
        if (v126 == v124)
        {
          v126 = v91[2];
          v124 = *((unsigned __int8 *)v122 + 27);
          v125 = v126 >= v124;
          if (v126 == v124)
          {
            v126 = v91[3];
            v124 = *((unsigned __int8 *)v122 + 28);
            v125 = v126 >= v124;
            if (v126 == v124)
              break;
          }
        }
LABEL_331:
        if (v125)
          goto LABEL_297;
LABEL_299:
        v122 = (uint64_t **)*v122;
        if (!v122)
          goto LABEL_333;
      }
      v127 = v91[4];
      v128 = *((unsigned __int8 *)v122 + 29);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[5];
      v128 = *((unsigned __int8 *)v122 + 30);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[6];
      v128 = *((unsigned __int8 *)v122 + 31);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[7];
      v128 = *((unsigned __int8 *)v122 + 32);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[8];
      v128 = *((unsigned __int8 *)v122 + 33);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[9];
      v128 = *((unsigned __int8 *)v122 + 34);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[10];
      v128 = *((unsigned __int8 *)v122 + 35);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[11];
      v128 = *((unsigned __int8 *)v122 + 36);
      if (v127 != v128)
        goto LABEL_316;
      v127 = v91[12];
      v128 = *((unsigned __int8 *)v122 + 37);
      if (v127 != v128
        || (v127 = v91[13], v128 = *((unsigned __int8 *)v122 + 38), v127 != v128)
        || (v127 = v91[14], v128 = *((unsigned __int8 *)v122 + 39), v127 != v128)
        || (v127 = v91[15], v128 = *((unsigned __int8 *)v122 + 40), v127 != v128))
      {
LABEL_316:
        if (v127 < v128)
          goto LABEL_299;
      }
      v124 = *((unsigned __int8 *)v122 + 29);
      v126 = v91[4];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 30);
      v126 = v91[5];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 31);
      v126 = v91[6];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 32);
      v126 = v91[7];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 33);
      v126 = v91[8];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 34);
      v126 = v91[9];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 35);
      v126 = v91[10];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 36);
      v126 = v91[11];
      if (v124 != v126)
        goto LABEL_297;
      v124 = *((unsigned __int8 *)v122 + 37);
      v126 = v91[12];
      if (v124 != v126
        || (v124 = *((unsigned __int8 *)v122 + 38), v126 = v91[13], v124 != v126)
        || (v124 = *((unsigned __int8 *)v122 + 39), v126 = v91[14], v124 != v126)
        || (v124 = *((unsigned __int8 *)v122 + 40), v126 = v91[15], v124 != v126))
      {
LABEL_297:
        if (v124 >= v126)
          goto LABEL_371;
        ++v122;
        goto LABEL_299;
      }
LABEL_371:
      if ((sub_223C8F01C(v91[240]) & 0xFE) == 2)
        v136 = 4;
      else
        v136 = v88;
      v145[0] = v136;
      *(_DWORD *)__dst = v118;
      LOBYTE(v151) = v119;
      v137 = *(_QWORD *)(a1 + 280);
      if (!v137)
        goto LABEL_378;
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, _BYTE *, __int128 *, uint64_t))(*(_QWORD *)v137 + 48))(v137, v91, v145, __dst, &v151, a3);
      ++v117;
LABEL_288:
      v91 += 248;
    }
    while (v91 != v90);
  }
LABEL_243:
  kdebug_trace();
  if (!v138)
    goto LABEL_394;
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (!*((_QWORD *)&v148 + 1))
    goto LABEL_394;
  v93 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    if (!*(_BYTE *)(a3 + 496))
      goto LABEL_249;
  }
  else
  {
LABEL_394:
    if (!*(_BYTE *)(a3 + 496))
    {
LABEL_249:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
  }
  if (*(_BYTE *)(a3 + 368))
  {
    v151 = 0u;
    v152 = 0u;
    v153 = 728302424;
    kdebug_trace();
    if (!*(_BYTE *)(a2 + 1848)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeDataManager.cpp", 259, (uint64_t)"keyframe_list.input_frame.has_value()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v95 = *(_DWORD *)(a1 + 104);
    v96 = *(_BYTE *)(a1 + 103);
    if (*(_BYTE *)(a3 + 6))
      v97 = 1;
    else
      v97 = *(_BYTE *)(a1 + 102);
    sub_223C3BCBC(v140, (uint64_t)&__p);
    *(_QWORD *)v145 = &off_24EC21230;
    v98 = (void **)v145;
    v99 = (__int128 *)&v145[8];
    *(_OWORD *)&v145[8] = 0u;
    memset(v146, 0, 26);
    v100 = v150 == 0;
    if (v150)
    {
      v98 = &__p;
      v99 = &v148;
    }
    v101 = v98[1];
    v102 = *((_QWORD *)&v148 + 1);
    if (!v150)
      v102 = 0;
    *(_QWORD *)v99 = 0;
    *((_QWORD *)v99 + 1) = 0;
    v103 = v149;
    if (v100)
      v103 = v146;
    *(_OWORD *)&__dst[24] = *v103;
    *(_OWORD *)&__dst[34] = *(_OWORD *)((char *)v103 + 10);
    *(_QWORD *)__dst = &off_24EC21230;
    *(_QWORD *)&__dst[8] = v101;
    *(_QWORD *)&__dst[16] = v102;
    v104 = *(std::__shared_weak_count **)&v145[16];
    if (*(_QWORD *)&v145[16])
    {
      v105 = (unint64_t *)(*(_QWORD *)&v145[16] + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if (v150)
    {
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
    }
    if (!*(_BYTE *)(a2 + 1848))
      sub_22324A974();
    v145[0] = v97;
    LODWORD(__p) = v95;
    v142.__r_.__value_.__s.__data_[0] = v96;
    v110 = *(_QWORD *)(a1 + 248);
    if (!v110)
      sub_223198474();
    (*(void (**)(uint64_t, uint64_t, _BYTE *, void **, std::string *, uint64_t, _BYTE *))(*(_QWORD *)v110 + 48))(v110, v140, v145, &__p, &v142, a3, __dst);
    v111 = *(std::__shared_weak_count **)&__dst[16];
    if (*(_QWORD *)&__dst[16])
    {
      v112 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    kdebug_trace();
  }
  sub_223AB95A0((_QWORD *)a1, (float32x2_t **)a2, a3);
  *(_DWORD *)(a3 + 360) = *(_QWORD *)(a1 + 24);
  kdebug_trace();
  sub_223A62A3C(v139, (uint64_t)&__p);
  v114 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)&__dst[8] = 0;
  *(_QWORD *)&__dst[16] = 0;
  *(_QWORD *)__dst = &__dst[8];
  sub_223ABDE68(__dst, v114, v115, (_QWORD *)(a1 + 16));
  sub_223AC4554((unsigned __int8 **)a2, (const void **)&__p, __dst, a3);
  sub_223198030((uint64_t)__dst, *(_QWORD **)&__dst[8]);
  if (SHIBYTE(v148) < 0)
    operator delete(__p);
}

void sub_223ABDC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223ABDDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
    JUMPOUT(0x223ABDE50);
  JUMPOUT(0x223ABDDC4);
}

void sub_223ABDE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
    JUMPOUT(0x223ABDE50);
  JUMPOUT(0x223ABDDC4);
}

void sub_223ABDE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231BD90C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223ABDE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231BD90C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_223ABDE68(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t *v7;
  char **v8;
  _QWORD *v9;
  char *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 != a4)
  {
    v5 = a2;
    v6 = (_QWORD **)result;
    v7 = result + 1;
    do
    {
      v17 = *((_OWORD *)v5 + 2);
      result = sub_223426D4C(v6, v7, &v16, &v15, (unsigned __int8 *)&v17);
      v8 = (char **)result;
      if (*result)
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 25) = v17;
        v11 = v16;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v8 = v10;
        v12 = (_QWORD *)**v6;
        if (v12)
        {
          *v6 = v12;
          v10 = *v8;
        }
        result = sub_2231A9A8C(v6[1], (uint64_t *)v10);
        v6[2] = (_QWORD *)((char *)v6[2] + 1);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v13 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v13 = (_QWORD *)v5[2];
        v14 = *v13 == (_QWORD)v5;
        v5 = v13;
      }
      while (!v14);
LABEL_3:
      v5 = v13;
    }
    while (v13 != a4);
  }
  return result;
}

void sub_223ABDFA4(_QWORD *a1)
{
  if (a1)
  {
    sub_223ABDFA4(*a1);
    sub_223ABDFA4(a1[1]);
    sub_2233FADDC((_QWORD *)a1[7]);
    operator delete(a1);
  }
}

uint64_t sub_223ABDFE4(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_2233FADDC(v2[7]);
    operator delete(v2);
  }
  return a1;
}

void sub_223ABE02C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ABE040(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5F3A8;
  result[1] = v3;
  return result;
}

uint64_t sub_223ABE074(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5F3A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_223ABE090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

uint64_t sub_223ABE0A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d3esn6random4UUIDERKNSt3__13setIN3cva6MatrixIiLj3ELj1ELb0EEENS_5recon8geometry6detail11Ve"
                     "ctor3LessILNSB_4AxisE0EiEENS5_9allocatorIS9_EEEERNS5_13unordered_mapIS9_NSA_6mapper13KeyframeRanksE"
                     "NSA_6Hash3DENS5_8equal_toIS9_EENSG_INS5_4pairIKS9_SN_EEEEEERNSM_13BatchMetadataEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d3esn6random4UUIDERKNSt3__13setIN3cva6MatrixIiLj3ELj1ELb0EEENS_5recon8geometry"
                                "6detail11Vector3LessILNSB_4AxisE0EiEENS5_9allocatorIS9_EEEERNS5_13unordered_mapIS9_NSA_6"
                                "mapper13KeyframeRanksENSA_6Hash3DENS5_8equal_toIS9_EENSG_INS5_4pairIKS9_SN_EEEEEERNSM_13BatchMetadataEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d3esn6random4UUIDERKNSt3__13setIN3cva6MatrixIiLj3ELj1ELb0EEENS_5recon8geometry6detail11Vector3LessILNSB_4AxisE0EiEENS5_9allocatorIS9_EEEERNS5_13unordered_mapIS9_NSA_6mapper13KeyframeRanksENSA_6Hash3DENS5_8equal_toIS9_EENSG_INS5_4pairIKS9_SN_EEEEEERNSM_13BatchMetadataEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d3esn6random4UUIDERKNSt3__13setIN3cva6MatrixIiLj3ELj1ELb0EEENS_5recon8geometry6detail11Vector3LessILNSB_4AxisE0EiEENS5_9allocatorIS9_EEEERNS5_13unordered_mapIS9_NSA_6mapper13KeyframeRanksENSA_6Hash3DENS5_8equal_toIS9_EENSG_INS5_4pairIKS9_SN_EEEEEERNSM_13BatchMetadataEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ABE114()
{
  return &unk_24EC5F428;
}

void sub_223ABE124()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ABE138(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5F458;
  result[1] = v3;
  return result;
}

uint64_t sub_223ABE16C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5F458;
  a2[1] = v2;
  return result;
}

uint64_t sub_223ABE188(uint64_t a1, uint64_t a2, unsigned __int8 *a3, float *a4, unsigned __int8 *a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, float))(a1 + 8))(a2, *a3, *a5, a6, *a4);
}

uint64_t sub_223ABE1A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d5recon5frame12KeyframeDataENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d5recon5frame12KeyframeDataENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d5recon5frame12KeyframeDataENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d5recon5frame12KeyframeDataENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ABE214()
{
  return &unk_24EC5F4D8;
}

void sub_223ABE224()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ABE238(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5F508;
  result[1] = v3;
  return result;
}

uint64_t sub_223ABE26C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5F508;
  a2[1] = v2;
  return result;
}

uint64_t sub_223ABE288(uint64_t a1, uint64_t a2, unsigned __int8 *a3, float *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, float))(a1 + 8))(a2, *a3, *a5, a6, a7, *a4);
}

uint64_t sub_223ABE2AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d5recon5frame11FrameBundleENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataERKNS_3kit3img"
                     "9ImageViewILNSA_6FormatE4ENSA_13DynamicBufferELNSA_10MutabilityE0EEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d5recon5frame11FrameBundleENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataERK"
                                "NS_3kit3img9ImageViewILNSA_6FormatE4ENSA_13DynamicBufferELNSA_10MutabilityE0EEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d5recon5frame11FrameBundleENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataERKNS_3kit3img9ImageViewILNSA_6FormatE4ENSA_13DynamicBufferELNSA_10MutabilityE0EEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d5recon5frame11FrameBundleENS0_12SamplingModeEfbRNS0_6mapper13BatchMetadataERKNS_3kit3img9ImageViewILNSA_6FormatE4ENSA_13DynamicBufferELNSA_10MutabilityE0EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ABE318()
{
  return &unk_24EC5F588;
}

uint64_t *sub_223ABE324(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x40uLL);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = 0;
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_2231A9A8C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_22319835C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_223ABE414(uint64_t a1, __int128 *a2, float32x2_t *a3, float a4, float32x4_t a5, double a6, double a7, float32x2_t a8, double a9, double a10, float32x2_t a11)
{
  float32x2_t v11;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  char *v24;
  char **v25;
  char **v26;
  _QWORD *v27;
  BOOL v28;
  char *v29;
  char **v30;
  char **v32;
  char *v33;
  char *v34;
  float v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  _BOOL8 v43;
  char *v44;
  char *v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  char *v53;
  float v54;
  BOOL v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v63;
  __int128 v64;
  _BYTE v65[20];
  __int32 v66;
  float v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  *(float32x2_t *)a5.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)a1, (int32x2_t)0x400000004));
  a5.f32[2] = (float)(*(_DWORD *)(a1 + 8) + 4);
  v64 = *a2;
  v13.i32[3] = HIDWORD(v64);
  *(float32x2_t *)v13.f32 = a3[6];
  v13.i32[2] = a3[7].i32[0];
  v14 = (int8x16_t)vmlaq_n_f32(vnegq_f32(v13), a5, a4);
  v15 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
  *(float *)&a9 = 1.0
                / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), *(float32x2_t *)v14.i8, 1), v15, v15).f32[0]);
  v16 = vmulq_n_f32((float32x4_t)v14, *(float *)&a9);
  v66 = v16.i32[2];
  *(_QWORD *)&v65[12] = v16.i64[0];
  a8.i32[0] = a3[1].i32[0];
  a11.i32[0] = a3[3].i32[0];
  v17 = a3[4];
  v11.i32[0] = a3[5].i32[0];
  v18 = vadd_f32(v17, vmla_f32(vmul_f32(*a3, 0), 0, a3[2]));
  v19 = vadd_f32(v11, vmla_f32(vmul_f32(a8, 0), 0, a11));
  *(_DWORD *)&v65[8] = v19.i32[0];
  *(float32x2_t *)v65 = v18;
  v20 = vmul_lane_f32(*(float32x2_t *)&a9, *(float32x2_t *)v14.i8, 1);
  v21 = vmul_f32(v15, *(float32x2_t *)&a9);
  v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.f32, v18), v20, v18, 1), v19, v21);
  if (v22.f32[0] >= 0.1)
    v23 = v22.f32[0];
  else
    v23 = 0.1;
  v67 = v23;
  v25 = (char **)(a1 + 16);
  v24 = *(char **)(a1 + 16);
  v26 = (char **)(a1 + 24);
  if (v24 != (char *)(a1 + 24))
  {
    v22 = (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1);
    while (1)
    {
      v27 = v24 + 28;
      v28 = *(_QWORD *)a2 == *(_QWORD *)(v24 + 28) && *((_QWORD *)a2 + 1) == *(_QWORD *)(v24 + 36);
      if (v28)
        break;
      v29 = (char *)*((_QWORD *)v24 + 1);
      if (v29)
      {
        do
        {
          v30 = (char **)v29;
          v29 = *(char **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (char **)*((_QWORD *)v24 + 2);
          v28 = *v30 == v24;
          v24 = (char *)v30;
        }
        while (!v28);
      }
      v24 = (char *)v30;
      if (v30 == v26)
        goto LABEL_22;
    }
    if ((_QWORD)v64 == *v27 && *((_QWORD *)&v64 + 1) == *(_QWORD *)(v24 + 36))
    {
      v54 = *((float *)v24 + 17);
      v55 = v23 < v54;
      if (v23 == v54)
        goto LABEL_75;
      v56 = v23 - v54;
      v57 = v54 - v23;
      if (!v55)
        v57 = v56;
      if (v57 <= 0.000001)
      {
LABEL_75:
        v17.i32[0] = *((_DWORD *)v24 + 13);
        v58 = vmla_f32(vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)(v24 + 44)), v22, *(float32x2_t *)(v24 + 44), 1), v17, v19).f32[0];
        if (v58 == 1.0)
          goto LABEL_83;
        v59 = v58 + -1.0;
        if (v58 < 1.0)
          v59 = 1.0 - v58;
        if (v59 <= 0.000001)
        {
LABEL_83:
          v22.i32[0] = *((_DWORD *)v24 + 16);
          v60 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)(v24 + 56)), v20, *(float32x2_t *)(v24 + 56), 1), v22, v21).f32[0];
          if (v60 == 1.0)
            return 1;
          v61 = v60 >= 1.0 ? v60 + -1.0 : 1.0 - v60;
          if (v61 <= 0.000001)
            return 1;
        }
      }
    }
    sub_223ABEFE8((_QWORD *)(a1 + 16), (uint64_t)v27);
  }
LABEL_22:
  v32 = v26;
  v33 = (char *)v26;
  if (!*v26)
    goto LABEL_38;
  v33 = *v26;
  v32 = v26;
  while (1)
  {
    v35 = *((float *)v33 + 17);
    if (v23 > v35)
    {
LABEL_24:
      v34 = *(char **)v33;
      v32 = (char **)v33;
      if (!*(_QWORD *)v33)
        goto LABEL_38;
      goto LABEL_25;
    }
    if (v23 >= v35)
    {
      if ((char)sub_22319835C((unsigned __int8 *)&v64, (unsigned __int8 *)v33 + 28) < 0)
        goto LABEL_24;
      v35 = *((float *)v33 + 17);
      v23 = v67;
    }
    if (v35 <= v23
      && (v35 < v23 || ((char)sub_22319835C((unsigned __int8 *)v33 + 28, (unsigned __int8 *)&v64) & 0x80000000) == 0))
    {
      break;
    }
    v32 = (char **)(v33 + 8);
    v34 = (char *)*((_QWORD *)v33 + 1);
    if (!v34)
      goto LABEL_38;
LABEL_25:
    v23 = v67;
    v33 = v34;
  }
  if (!*v32)
  {
LABEL_38:
    v37 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v37 + 28) = v64;
    *(_QWORD *)(v37 + 44) = *(_QWORD *)v65;
    *((_DWORD *)v37 + 13) = *(_DWORD *)&v65[8];
    *((_QWORD *)v37 + 7) = *(_QWORD *)&v65[12];
    *((_DWORD *)v37 + 16) = v66;
    *((float *)v37 + 17) = v67;
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = v33;
    *v32 = v37;
    v38 = *(char **)*v25;
    if (v38)
    {
      *v25 = v38;
      v37 = *v32;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 24), (uint64_t *)v37);
    v36 = *(_QWORD *)(a1 + 32) + 1;
    *(_QWORD *)(a1 + 32) = v36;
    if (v36 <= *(unsigned int *)(a1 + 12))
      return 1;
LABEL_41:
    v39 = (uint64_t *)*v26;
    if (*v26)
    {
      v40 = *v26;
      do
      {
        v41 = v40;
        v40 = (char *)*((_QWORD *)v40 + 1);
      }
      while (v40);
    }
    else
    {
      do
      {
        v41 = v26[2];
        v28 = *(_QWORD *)v41 == (_QWORD)v26;
        v26 = (char **)v41;
      }
      while (v28);
    }
    if (*(_QWORD *)(v41 + 28) != (_QWORD)v64 || *(_QWORD *)(v41 + 36) != *((_QWORD *)&v64 + 1))
      goto LABEL_50;
    v46 = *((float *)v41 + 17);
    v47 = v46 < v67;
    if (v46 != v67)
    {
      v48 = v46 - v67;
      v49 = v67 - v46;
      if (!v47)
        v49 = v48;
      if (v49 > 0.000001)
        goto LABEL_50;
    }
    v18.i32[0] = *((_DWORD *)v41 + 13);
    v50 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v41 + 44), *(float32x2_t *)v65), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65, 1), *(float32x2_t *)(v41 + 44), 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v65, *(int8x16_t *)v65, 8uLL), v18).f32[0];
    if (v50 == 1.0 || (v50 >= 1.0 ? (v51 = v50 + -1.0) : (v51 = 1.0 - v50), v51 <= 0.000001))
    {
      v18.i32[0] = v66;
      v22.i32[0] = *((_DWORD *)v41 + 16);
      v52 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v41 + 56), *(float32x2_t *)&v65[12]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v65[12], 1), *(float32x2_t *)(v41 + 56), 1), v18, v22).f32[0];
      if (v52 == 1.0)
      {
        v43 = 0;
      }
      else
      {
        v63 = v52 + -1.0;
        if (v52 < 1.0)
          v63 = 1.0 - v52;
        v43 = v63 > 0.000001;
      }
    }
    else
    {
LABEL_50:
      v43 = 1;
    }
    v44 = (char *)*((_QWORD *)v41 + 1);
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = *(char **)v44;
      }
      while (v44);
    }
    else
    {
      v53 = v41;
      do
      {
        v45 = (char *)*((_QWORD *)v53 + 2);
        v28 = *(_QWORD *)v45 == (_QWORD)v53;
        v53 = v45;
      }
      while (!v28);
    }
    if (*v25 == v41)
      *v25 = v45;
    *(_QWORD *)(a1 + 32) = v36 - 1;
    sub_2231AFE60(v39, (uint64_t *)v41);
    operator delete(v41);
    return v43;
  }
  v36 = *(_QWORD *)(a1 + 32);
  if (v36 > *(unsigned int *)(a1 + 12))
    goto LABEL_41;
  return 1;
}

void sub_223ABE980(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;

  if ((a2 & 0xFF00000000) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    v5 = a2;
    a3[2] = 0;
    if ((_DWORD)a2)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 12);
    *a3 = 0;
    a3[1] = 0;
    v5 = v9;
    a3[2] = 0;
    if (v9)
    {
LABEL_3:
      v6 = (char *)operator new(16 * v5);
      *a3 = v6;
      a3[1] = v6;
      a3[2] = &v6[16 * v5];
      v7 = *(_QWORD **)(a1 + 16);
      v8 = (_QWORD *)(a1 + 24);
      if (v7 == (_QWORD *)(a1 + 24))
        return;
      goto LABEL_7;
    }
  }
  v6 = 0;
  v7 = *(_QWORD **)(a1 + 16);
  v8 = (_QWORD *)(a1 + 24);
  if (v7 != (_QWORD *)(a1 + 24))
  {
LABEL_7:
    v10 = 0;
    do
    {
      if (v10 == v5)
        return;
      v11 = (_OWORD *)((char *)v7 + 28);
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v12)
      {
        v13 = *a3;
        v14 = (v6 - *a3) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          sub_22316E078();
        v16 = v12 - (_QWORD)v13;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 60)
            sub_223174E94();
          v18 = (char *)operator new(16 * v17);
          v19 = &v18[16 * v14];
          *(_OWORD *)v19 = *v11;
          if (v6 == v13)
          {
LABEL_32:
            v21 = v6;
            v6 = v19 + 16;
            *a3 = v19;
            a3[1] = v19 + 16;
            a3[2] = &v18[16 * v17];
            if (!v21)
              goto LABEL_25;
LABEL_24:
            operator delete(v21);
            goto LABEL_25;
          }
        }
        else
        {
          v18 = 0;
          v19 = (char *)(16 * v14);
          *(_OWORD *)(16 * v14) = *v11;
          if (v6 == v13)
            goto LABEL_32;
        }
        v20 = v19;
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v6 - 1);
          v20 -= 16;
          v6 -= 16;
        }
        while (v6 != v13);
        v21 = *a3;
        v6 = v19 + 16;
        *a3 = v20;
        a3[1] = v19 + 16;
        a3[2] = &v18[16 * v17];
        if (v21)
          goto LABEL_24;
      }
      else
      {
        *(_OWORD *)v6 = *v11;
        v6 += 16;
      }
LABEL_25:
      a3[1] = v6;
      v22 = (_QWORD *)v7[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v7[2];
          v24 = *v23 == (_QWORD)v7;
          v7 = v23;
        }
        while (!v24);
      }
      ++v10;
      v7 = v23;
    }
    while (v23 != v8);
  }
}

void sub_223ABEB8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223ABEBB4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  float v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  char **v26;
  char *v27;
  int v28;
  int v29;
  float v30;
  char *v31;
  char **v32;
  char **v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *i;
  uint64_t *v39;
  uint64_t *v41;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_45;
  v6 = *(uint64_t **)a1;
  v8 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  if (!v9)
    goto LABEL_45;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v39 = (uint64_t *)v10[1];
        if (!v39)
          break;
        do
        {
          v10 = v39;
          v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v41 = v10;
  if (a2 == a3)
  {
    v25 = a1;
    sub_223198030(a1, v9);
    if (v10)
      goto LABEL_66;
LABEL_45:
    if (v4 == a3)
      return;
    goto LABEL_46;
  }
  v12 = a2;
  do
  {
    *(_OWORD *)((char *)v9 + 28) = *(_OWORD *)((char *)v12 + 28);
    v13 = *(_QWORD *)((char *)v12 + 44);
    *((_DWORD *)v9 + 13) = *((_DWORD *)v12 + 13);
    *(uint64_t *)((char *)v9 + 44) = v13;
    v14 = v12[7];
    *((_DWORD *)v9 + 16) = *((_DWORD *)v12 + 16);
    v9[7] = v14;
    v15 = *((float *)v12 + 17);
    *((float *)v9 + 17) = v15;
    v16 = (uint64_t *)*v8;
    v17 = (uint64_t **)(a1 + 8);
    v18 = (uint64_t **)(a1 + 8);
    if (!*v8)
      goto LABEL_22;
    while (1)
    {
      v17 = (uint64_t **)v16;
      v19 = *((float *)v16 + 17);
      if (v15 <= v19
        && (v15 < v19 || ((char)sub_22319835C((unsigned __int8 *)v9 + 28, (unsigned __int8 *)v16 + 28) & 0x80000000) == 0))
      {
        break;
      }
      v16 = *v17;
      v18 = v17;
      if (!*v17)
        goto LABEL_22;
LABEL_16:
      v15 = *((float *)v9 + 17);
    }
    v16 = v17[1];
    if (v16)
      goto LABEL_16;
    v18 = v17 + 1;
LABEL_22:
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v17;
    *v18 = v9;
    v20 = **(_QWORD **)a1;
    if (v20)
    {
      *(_QWORD *)a1 = v20;
      v9 = *v18;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 8), v9);
    ++*(_QWORD *)(a1 + 16);
    v9 = v41;
    if (v41)
    {
      v10 = (uint64_t *)v41[2];
      if (v10)
      {
        v21 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v41)
        {
          *v10 = 0;
          while (1)
          {
            v24 = (uint64_t *)v10[1];
            if (!v24)
              break;
            do
            {
              v10 = v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
        else
        {
          for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v21;
              v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
        }
      }
      v41 = v10;
      v22 = (_QWORD *)v12[1];
      if (!v22)
      {
        do
        {
LABEL_35:
          v4 = (_QWORD *)v12[2];
          v23 = *v4 == (_QWORD)v12;
          v12 = v4;
        }
        while (!v23);
        goto LABEL_37;
      }
    }
    else
    {
      v10 = 0;
      v22 = (_QWORD *)v12[1];
      if (!v22)
        goto LABEL_35;
    }
    do
    {
      v4 = v22;
      v22 = (_QWORD *)*v22;
    }
    while (v22);
LABEL_37:
    if (!v9)
      break;
    v12 = v4;
  }
  while (v4 != a3);
  v25 = a1;
  sub_223198030(a1, v9);
  if (!v10)
    goto LABEL_45;
LABEL_66:
  for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
    v10 = i;
  sub_223198030(v25, v10);
  if (v4 != a3)
  {
LABEL_46:
    v26 = (char **)(a1 + 8);
    do
    {
      v27 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v27 + 28) = *(_OWORD *)((char *)v4 + 28);
      v28 = *((_DWORD *)v4 + 13);
      *(_QWORD *)(v27 + 44) = *(_QWORD *)((char *)v4 + 44);
      *((_DWORD *)v27 + 13) = v28;
      v29 = *((_DWORD *)v4 + 16);
      *((_QWORD *)v27 + 7) = v4[7];
      *((_DWORD *)v27 + 16) = v29;
      v30 = *((float *)v4 + 17);
      *((float *)v27 + 17) = v30;
      v31 = *v26;
      v32 = (char **)(a1 + 8);
      v33 = (char **)(a1 + 8);
      if (!*v26)
        goto LABEL_57;
      while (1)
      {
        v32 = (char **)v31;
        v34 = *((float *)v31 + 17);
        if (v30 <= v34
          && (v30 < v34
           || ((char)sub_22319835C((unsigned __int8 *)v27 + 28, (unsigned __int8 *)v31 + 28) & 0x80000000) == 0))
        {
          break;
        }
        v31 = *v32;
        v33 = v32;
        if (!*v32)
          goto LABEL_57;
LABEL_51:
        v30 = *((float *)v27 + 17);
      }
      v31 = v32[1];
      if (v31)
        goto LABEL_51;
      v33 = v32 + 1;
LABEL_57:
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = v32;
      *v33 = v27;
      v35 = **(_QWORD **)a1;
      if (v35)
      {
        *(_QWORD *)a1 = v35;
        v27 = *v33;
      }
      sub_2231A9A8C(*(uint64_t **)(a1 + 8), (uint64_t *)v27);
      ++*(_QWORD *)(a1 + 16);
      v36 = (_QWORD *)v4[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v4[2];
          v23 = *v37 == (_QWORD)v4;
          v4 = v37;
        }
        while (!v23);
      }
      v4 = v37;
    }
    while (v37 != a3);
  }
}

void sub_223ABEF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223ABEF94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ABEF80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223ABEF94(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_223198030(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_223198030(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t sub_223ABEFE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v6;
  float v7;
  float v8;
  char v9;
  float v10;
  float v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;

  v2 = a1 + 1;
  v3 = (uint64_t *)a1[1];
  if (!v3)
    return 0;
  v6 = a1 + 1;
  do
  {
    v7 = *((float *)v3 + 17);
    v8 = *(float *)(a2 + 40);
    if (v7 > v8)
    {
      ++v3;
    }
    else if (v7 < v8)
    {
      v6 = v3;
    }
    else
    {
      v9 = sub_22319835C((unsigned __int8 *)v3 + 28, (unsigned __int8 *)a2);
      if (v9 < 0)
        ++v3;
      else
        v6 = v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v6 == v2)
    return 0;
  v10 = *(float *)(a2 + 40);
  v11 = *((float *)v6 + 17);
  if (v10 > v11 || v10 >= v11 && (sub_22319835C((unsigned __int8 *)a2, (unsigned __int8 *)v6 + 28) & 0x80) != 0)
    return 0;
  v13 = (_QWORD *)v6[1];
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  else
  {
    v15 = v6;
    do
    {
      v14 = (_QWORD *)v15[2];
      v16 = *v14 == (_QWORD)v15;
      v15 = v14;
    }
    while (!v16);
  }
  if ((_QWORD *)*a1 == v6)
    *a1 = v14;
  v17 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v17, v6);
  operator delete(v6);
  return 1;
}

uint64_t sub_223ABF11C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24EC5F5B8;
  v5 = a1 + 8;
  sub_223AB7260(a1 + 8, a2, 0);
  v6 = *a3;
  if (*a3)
  {
    *a3 = 0;
  }
  else
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = &off_24EC5F2C0;
    *(_QWORD *)(v6 + 8) = v6 + 16;
    *(_BYTE *)(v6 + 32) = *(_BYTE *)(a1 + 8);
    *(_OWORD *)(v6 + 36) = *(_OWORD *)(a1 + 12);
    *(_OWORD *)(v6 + 52) = *(_OWORD *)(a1 + 28);
    *(_OWORD *)(v6 + 68) = *(_OWORD *)(a1 + 44);
    *(_OWORD *)(v6 + 84) = *(_OWORD *)(a1 + 60);
    *(_OWORD *)(v6 + 109) = *(_OWORD *)(a1 + 85);
    *(_OWORD *)(v6 + 100) = *(_OWORD *)(a1 + 76);
    *(_BYTE *)(v6 + 128) = 0;
    *(_BYTE *)(v6 + 144) = 0;
  }
  *(_QWORD *)(a1 + 104) = v6;
  v7 = operator new();
  sub_223AC1E40(v7, v5);
  *(_QWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_223ABF218(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x227684CE8](v2, 0x1020C40CC9A989DLL);
  v4 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_223ABF25C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24EC5F5B8;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  v4 = a1[13];
  a1[13] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_223ABF2C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24EC5F5B8;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  v4 = a1[13];
  a1[13] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223ABF33C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *__p[2];
  char v25;
  _QWORD **v26;
  _QWORD *v27[2];
  _QWORD **v28;
  _QWORD *v29[6];
  int v30;

  v29[2] = (_QWORD *)0x42726F7470616441;
  memset(&v29[3], 0, 24);
  v30 = 728302384;
  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 112);
  v5 = a2[1];
  v6 = *a2;
  sub_223AB8D10(v4);
  if (*(_BYTE *)(v4 + 496))
    sub_223AB9138(v4 + 368);
  *(_BYTE *)v4 = (v5 & 2) != 0;
  *(_BYTE *)(v4 + 1) = v6 == 17;
  *(_BYTE *)(v4 + 2) = v6 == 18;
  *(_BYTE *)(v4 + 3) = (v6 & 2) != 0;
  *(_WORD *)(v4 + 4) = 0;
  *(_BYTE *)(v4 + 6) = 0;
  v7 = *(_OWORD *)(a2 + 52);
  v8 = *(_OWORD *)(a2 + 36);
  v9 = *(_OWORD *)(a2 + 20);
  v10 = *(_OWORD *)(a2 + 4);
  v11 = *(_OWORD *)(a1 + 28);
  v12 = *(_OWORD *)(a1 + 44);
  v13 = *(_OWORD *)(a1 + 60);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 12);
  *(_OWORD *)(v4 + 56) = v13;
  *(_OWORD *)(v4 + 40) = v12;
  *(_OWORD *)(v4 + 24) = v11;
  *(_OWORD *)(v4 + 72) = v10;
  *(_OWORD *)(v4 + 88) = v9;
  *(_OWORD *)(v4 + 104) = v8;
  *(_OWORD *)(v4 + 120) = v7;
  v14 = *(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(v14 + 496))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 113, (uint64_t)"!latest_batch_metadata_->SupportsVolumetric()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = *(_QWORD *)(a1 + 112);
  }
  v15 = a2[2016];
  v16 = v15 != 0;
  v17 = *((_QWORD *)a2 + 178);
  if (!v15)
    v17 = 0;
  if (a2[1592] != 1)
    v16 = 0;
  *(_QWORD *)(v14 + 352) = v17;
  *(_BYTE *)(v14 + 4) = v15;
  *(_BYTE *)(v14 + 6) = v16;
  if (*((_QWORD *)a2 + 21) == *((_QWORD *)a2 + 22) && *((_QWORD *)a2 + 262) == *((_QWORD *)a2 + 263))
  {
    *(_BYTE *)(v14 + 5) = 0;
  }
  else
  {
    *(_BYTE *)(v14 + 5) = 1;
    sub_223AC3D74((unsigned __int8 **)a2 + 21, v14);
  }
  (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), a2 + 168, *(_QWORD *)(a1 + 112));
  if (*(_BYTE *)(a1 + 8) && (a2[1] & 0x40) == 0)
  {
    kdebug_trace();
    v18 = *(_QWORD *)(a1 + 104);
    v19 = *(_QWORD **)(v18 + 8);
    v29[0] = 0;
    v29[1] = 0;
    v28 = v29;
    sub_223ABDE68(&v28, v19, v20, (_QWORD *)(v18 + 16));
    v21 = (_QWORD *)*((_QWORD *)a2 + 15);
    v27[0] = 0;
    v27[1] = 0;
    v26 = v27;
    sub_223AC2284(&v26, v21, v22, (_QWORD *)a2 + 16);
    sub_223A62A3C((unsigned __int8 *)(a1 + 120), (uint64_t)__p);
    sub_223AC40E8(&v26, &v28, (uint64_t *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
    kdebug_trace();
    sub_223198030((uint64_t)&v26, v27[0]);
    sub_223198030((uint64_t)&v28, v29[0]);
  }
  return kdebug_trace();
}

void sub_223ABF614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  sub_223198030((uint64_t)&a15, a16);
  sub_223198030((uint64_t)&a18, a19);
  sub_2231874DC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_223ABF670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223ABF684(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 112);
  sub_223AB8D10(v2);
  if (*(_BYTE *)(v2 + 496))
    sub_223AB9138(v2 + 368);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_223ABF6D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_223ABF6DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24EC5F5F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC5F648;
  v5 = a1 + 16;
  sub_223AB7260(a1 + 16, a2, 1);
  v6 = *a3;
  if (*a3)
  {
    *a3 = 0;
  }
  else
  {
    v6 = operator new();
    sub_223ABA1F4(v6, v5);
  }
  *(_QWORD *)(a1 + 112) = v6;
  v7 = operator new();
  sub_223AC1E40(v7, v5);
  *(_QWORD *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

void sub_223ABF798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C409372538BLL);
  _Unwind_Resume(a1);
}

void sub_223ABF7BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x227684CE8](v2, 0x1020C40CC9A989DLL);
  v4 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_223ABF800(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24EC5F5F0;
  a1[1] = &unk_24EC5F648;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  v4 = a1[14];
  a1[14] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sub_223ABF86C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *(a1 - 1) = &off_24EC5F5F0;
  *a1 = &unk_24EC5F648;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  result = a1[13];
  a1[13] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223ABF8D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24EC5F5F0;
  a1[1] = &unk_24EC5F648;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  v4 = a1[14];
  a1[14] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x227684CE8);
}

void sub_223ABF954(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(a1 - 1) = &off_24EC5F5F0;
  *a1 = &unk_24EC5F648;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
  {
    v3 = sub_223AC23C0(v2);
    MEMORY[0x227684CE8](v3, 0x1020C40CC9A989DLL);
  }
  v4 = a1[13];
  a1[13] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223ABF9D8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  float32x2_t v24;
  float32x4_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  __int8 *v45;
  unsigned int v46;
  __int8 *v47;
  unsigned int v48;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  float32x4_t *v61;
  uint64_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x2_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  uint64_t v80;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  __int128 v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  double v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x2_t *v114;
  __int128 v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  unsigned __int32 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t *v127;
  int32x4_t v128;
  int32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t **v160;
  unsigned int v161;
  unsigned int v162;
  BOOL v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  __int128 v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  double v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x2_t v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  int32x2_t *v196;
  unint64_t v197;
  int v199;
  void *__p;
  _QWORD *v201;
  uint64_t v202;
  _BYTE v203[60];
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  int v210;
  _QWORD *v211;
  _QWORD v212[3];
  _QWORD v213[3];
  _QWORD v214[3];
  _QWORD v215[3];
  _QWORD v216[3];
  _QWORD v217[3];
  _QWORD v218[3];
  _QWORD v219[3];
  _QWORD v220[3];
  int v221;
  char v222[112];
  uint64_t **v223;
  char v224;
  _BYTE v225[24];
  _BYTE *v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  _QWORD *v231[2];
  __int128 v232;
  uint64_t v233;
  _QWORD **v234;
  _QWORD *v235[6];

  v235[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v5 = *(_QWORD *)(a1 + 120);
  v6 = a2[1];
  v7 = *a2;
  sub_223AB8D10(v5);
  if (*(_BYTE *)(v5 + 496))
    sub_223AB9138(v5 + 368);
  *(_BYTE *)v5 = (v6 & 2) != 0;
  *(_BYTE *)(v5 + 1) = v7 == 17;
  *(_BYTE *)(v5 + 2) = v7 == 18;
  *(_BYTE *)(v5 + 3) = (v7 & 2) != 0;
  *(_WORD *)(v5 + 4) = 0;
  *(_BYTE *)(v5 + 6) = 0;
  v8 = *(_OWORD *)(a2 + 52);
  v9 = *(_OWORD *)(a2 + 36);
  v10 = *(_OWORD *)(a2 + 20);
  v11 = *(_OWORD *)(a2 + 4);
  v12 = *(_OWORD *)(a1 + 36);
  v13 = *(_OWORD *)(a1 + 52);
  v14 = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 20);
  *(_OWORD *)(v5 + 56) = v14;
  *(_OWORD *)(v5 + 40) = v13;
  *(_OWORD *)(v5 + 24) = v12;
  *(_OWORD *)(v5 + 72) = v11;
  *(_OWORD *)(v5 + 88) = v10;
  *(_OWORD *)(v5 + 104) = v9;
  *(_OWORD *)(v5 + 120) = v8;
  v15 = *(_QWORD *)(a1 + 120);
  v16 = a2[2016];
  v17 = v16 != 0;
  v18 = *((_QWORD *)a2 + 178);
  if (!v16)
    v18 = 0;
  if (a2[1592] != 1)
    v17 = 0;
  *(_QWORD *)(v15 + 352) = v18;
  *(_BYTE *)(v15 + 4) = v16;
  *(_BYTE *)(v15 + 6) = v17;
  if (*((_QWORD *)a2 + 21) == *((_QWORD *)a2 + 22) && *((_QWORD *)a2 + 262) == *((_QWORD *)a2 + 263))
  {
    *(_BYTE *)(v15 + 5) = 0;
  }
  else
  {
    *(_BYTE *)(v15 + 5) = 1;
    sub_223AC3D74((unsigned __int8 **)a2 + 21, v15);
  }
  v196 = (int32x2_t *)(a2 + 1808);
  v19 = (unint64_t)*(unsigned __int16 *)(a2 + 2329) << 8;
  v199 = a2[2331];
  if (!a2[2331])
    v19 = 0;
  v197 = v19;
  v20 = *(_QWORD *)(a1 + 120);
  *(_WORD *)(v20 + 368) = 0;
  v21 = *(_QWORD *)(a1 + 112);
  v227.i64[1] = 0;
  v228.i64[0] = 0;
  v227.i64[0] = (uint64_t)&v227.i64[1];
  v22 = *(_QWORD **)(v21 + 8);
  v23 = (_QWORD *)(v21 + 16);
  if (v22 != (_QWORD *)(v21 + 16))
  {
    while (1)
    {
      v44 = &v227.i64[1];
      v45 = &v227.i8[8];
      if (v227.i64[1])
        break;
LABEL_102:
      v53 = (char *)operator new(0x70uLL);
      *(_OWORD *)(v53 + 28) = *((_OWORD *)v22 + 2);
      v54 = *(_OWORD *)(v22 + 9);
      v55 = *(_OWORD *)(v22 + 11);
      v56 = *(_OWORD *)(v22 + 13);
      *(_OWORD *)(v53 + 92) = *(_OWORD *)(v22 + 15);
      *(_OWORD *)(v53 + 76) = v56;
      *(_OWORD *)(v53 + 60) = v55;
      *(_OWORD *)(v53 + 44) = v54;
      *(_QWORD *)v53 = 0;
      *((_QWORD *)v53 + 1) = 0;
      *((_QWORD *)v53 + 2) = v45;
      *v44 = (uint64_t)v53;
      if (*(_QWORD *)v227.i64[0])
      {
        v227.i64[0] = *(_QWORD *)v227.i64[0];
        v53 = (char *)*v44;
      }
      sub_2231A9A8C((uint64_t *)v227.i64[1], (uint64_t *)v53);
      ++v228.i64[0];
LABEL_105:
      v57 = (_QWORD *)v22[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v22[2];
          _ZF = *v58 == (_QWORD)v22;
          v22 = v58;
        }
        while (!_ZF);
      }
      v22 = v58;
      if (v58 == v23)
        goto LABEL_13;
    }
    v46 = *((unsigned __int8 *)v22 + 32);
    v47 = (__int8 *)v227.i64[1];
    while (1)
    {
      v45 = v47;
      v48 = v47[28];
      _CF = v46 >= v48;
      if (v46 != v48)
        break;
      v50 = *((unsigned __int8 *)v22 + 33);
      v48 = v45[29];
      _CF = v50 >= v48;
      if (v50 == v48
        && (v50 = *((unsigned __int8 *)v22 + 34), v48 = v45[30], _CF = v50 >= v48, v50 == v48)
        && (v50 = *((unsigned __int8 *)v22 + 35), v48 = v45[31], _CF = v50 >= v48, v50 == v48))
      {
        v51 = *((unsigned __int8 *)v22 + 36);
        v52 = v45[32];
        if (v51 == v52)
        {
          v51 = *((unsigned __int8 *)v22 + 37);
          v52 = v45[33];
          if (v51 == v52)
          {
            v51 = *((unsigned __int8 *)v22 + 38);
            v52 = v45[34];
            if (v51 == v52)
            {
              v51 = *((unsigned __int8 *)v22 + 39);
              v52 = v45[35];
              if (v51 == v52)
              {
                v51 = *((unsigned __int8 *)v22 + 40);
                v52 = v45[36];
                if (v51 == v52)
                {
                  v51 = *((unsigned __int8 *)v22 + 41);
                  v52 = v45[37];
                  if (v51 == v52)
                  {
                    v51 = *((unsigned __int8 *)v22 + 42);
                    v52 = v45[38];
                    if (v51 == v52)
                    {
                      v51 = *((unsigned __int8 *)v22 + 43);
                      v52 = v45[39];
                      if (v51 == v52)
                      {
                        v51 = *((unsigned __int8 *)v22 + 44);
                        v52 = v45[40];
                        if (v51 == v52)
                        {
                          v51 = *((unsigned __int8 *)v22 + 45);
                          v52 = v45[41];
                          if (v51 == v52)
                          {
                            v51 = *((unsigned __int8 *)v22 + 46);
                            v52 = v45[42];
                            if (v51 == v52)
                            {
                              v51 = *((unsigned __int8 *)v22 + 47);
                              v52 = v45[43];
                              if (v51 == v52)
                                goto LABEL_83;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v51 >= v52)
        {
LABEL_83:
          v48 = v45[32];
          v50 = *((unsigned __int8 *)v22 + 36);
          if (v48 == v50)
          {
            v48 = v45[33];
            v50 = *((unsigned __int8 *)v22 + 37);
            if (v48 == v50)
            {
              v48 = v45[34];
              v50 = *((unsigned __int8 *)v22 + 38);
              if (v48 == v50)
              {
                v48 = v45[35];
                v50 = *((unsigned __int8 *)v22 + 39);
                if (v48 == v50)
                {
                  v48 = v45[36];
                  v50 = *((unsigned __int8 *)v22 + 40);
                  if (v48 == v50)
                  {
                    v48 = v45[37];
                    v50 = *((unsigned __int8 *)v22 + 41);
                    if (v48 == v50)
                    {
                      v48 = v45[38];
                      v50 = *((unsigned __int8 *)v22 + 42);
                      if (v48 == v50)
                      {
                        v48 = v45[39];
                        v50 = *((unsigned __int8 *)v22 + 43);
                        if (v48 == v50)
                        {
                          v48 = v45[40];
                          v50 = *((unsigned __int8 *)v22 + 44);
                          if (v48 == v50)
                          {
                            v48 = v45[41];
                            v50 = *((unsigned __int8 *)v22 + 45);
                            if (v48 == v50)
                            {
                              v48 = v45[42];
                              v50 = *((unsigned __int8 *)v22 + 46);
                              if (v48 == v50)
                              {
                                v48 = v45[43];
                                v50 = *((unsigned __int8 *)v22 + 47);
                                if (v48 == v50)
                                  goto LABEL_105;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_99;
        }
LABEL_65:
        v47 = *(__int8 **)v45;
        v44 = (uint64_t *)v45;
        if (!*(_QWORD *)v45)
          goto LABEL_102;
      }
      else
      {
LABEL_97:
        if (!_CF)
          goto LABEL_65;
LABEL_99:
        if (v48 >= v50)
          goto LABEL_105;
        v47 = (__int8 *)*((_QWORD *)v45 + 1);
        if (!v47)
        {
          v44 = (uint64_t *)(v45 + 8);
          goto LABEL_102;
        }
      }
    }
    v50 = *((unsigned __int8 *)v22 + 32);
    goto LABEL_97;
  }
LABEL_13:
  v201 = 0;
  v202 = 0;
  __p = &v201;
  sub_223475C18(&__p, *(unsigned __int8 **)(v20 + 256), (unsigned __int8 *)(v20 + 264));
  sub_223475C18(&__p, *(unsigned __int8 **)(v20 + 232), (unsigned __int8 *)(v20 + 240));
  sub_223475C18(&__p, *(unsigned __int8 **)(v20 + 304), (unsigned __int8 *)(v20 + 312));
  v26 = (unsigned __int8 *)__p;
  if (__p != &v201)
  {
    v27 = (unsigned __int8 *)v227.i64[1];
    if (v227.i64[1])
    {
LABEL_15:
      v28 = &v227.i64[1];
      do
      {
        v29 = v27;
        v30 = v28;
        v31 = v27[28];
        v32 = v26[25];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[29];
        v32 = v26[26];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[30];
        v32 = v26[27];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[31];
        v32 = v26[28];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[32];
        v32 = v26[29];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[33];
        v32 = v26[30];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[34];
        v32 = v26[31];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[35];
        v32 = v26[32];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[36];
        v32 = v26[33];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[37];
        v32 = v26[34];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[38];
        v32 = v26[35];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[39];
        v32 = v26[36];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[40];
        v32 = v26[37];
        if (v31 != v32)
          goto LABEL_33;
        v31 = v29[41];
        v32 = v26[38];
        if (v31 == v32 && (v31 = v29[42], v32 = v26[39], v31 == v32) && (v31 = v29[43], v32 = v26[40], v31 == v32))
        {
          v33 = 0;
          v34 = v29 + 8;
          v35 = v29;
          v28 = (uint64_t *)v29;
        }
        else
        {
LABEL_33:
          v33 = v31 < v32;
          v34 = v29 + 8;
          if (v31 >= v32)
            v35 = v29;
          else
            v35 = v29 + 8;
          if (!v33)
            v28 = (uint64_t *)v29;
        }
        v27 = *(unsigned __int8 **)v35;
      }
      while (v27);
      if (v28 != (uint64_t *)&v227.u32[2])
      {
        v36 = v29 + 28;
        v37 = v33 ? (unsigned __int8 *)v30 + 28 : v36;
        if (((char)sub_22319835C(v26 + 25, v37) & 0x80000000) == 0)
        {
          v38 = (unsigned __int8 *)(v30 + 1);
          if (!v33)
            v38 = v34;
          v39 = *(uint64_t **)v38;
          v40 = v28;
          if (*(_QWORD *)v38)
          {
            do
            {
              v41 = v39;
              v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v41 = (uint64_t *)v40[2];
              _ZF = *v41 == (_QWORD)v40;
              v40 = v41;
            }
            while (!_ZF);
          }
          if ((uint64_t *)v227.i64[0] == v28)
            v227.i64[0] = (uint64_t)v41;
          --v228.i64[0];
          sub_2231AFE60((uint64_t *)v227.i64[1], v28);
          operator delete(v28);
        }
      }
      while (1)
      {
        v42 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = *(unsigned __int8 **)v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (unsigned __int8 *)*((_QWORD *)v26 + 2);
            _ZF = *(_QWORD *)v43 == (_QWORD)v26;
            v26 = v43;
          }
          while (!_ZF);
        }
        if (v43 == (unsigned __int8 *)&v201)
          break;
        v27 = (unsigned __int8 *)v227.i64[1];
        v26 = v43;
        if (v227.i64[1])
          goto LABEL_15;
      }
    }
    else
    {
      do
      {
        v59 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = *(unsigned __int8 **)v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (unsigned __int8 *)*((_QWORD *)v26 + 2);
            _ZF = *(_QWORD *)v60 == (_QWORD)v26;
            v26 = v60;
          }
          while (!_ZF);
        }
        v26 = v60;
      }
      while (v60 != (unsigned __int8 *)&v201);
    }
  }
  v61 = (float32x4_t *)(a2 + 1528);
  if (v199 && v228.i64[0] && (v197 & 0xFF00) != 0 && *(_BYTE *)(a1 + 84))
  {
    *(_BYTE *)(v20 + 368) = 1;
    v62 = (uint64_t *)(a2 + 168);
    if (a2[1936])
    {
      v63.i32[0] = *((_DWORD *)a2 + 454);
      v64 = *(float32x2_t *)(a2 + 1824);
      v65 = *(float32x2_t *)(a2 + 1840);
      v24.i32[0] = *((_DWORD *)a2 + 462);
      v25.i64[0] = *((_QWORD *)a2 + 232);
      v25.i32[2] = *((_DWORD *)a2 + 466);
      v66 = (int8x16_t)vnegq_f32(v25);
      v67 = *(float32x4_t *)(a2 + 1544);
      v68 = vmulq_n_f32(*v61, v63.f32[0]);
      v63.i32[1] = *((_DWORD *)a2 + 458);
      v69 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v196, (int32x2_t)v64), *(float *)v66.i32), (float32x2_t)vzip2_s32(*v196, (int32x2_t)v64), *(float32x2_t *)v25.f32, 1), v63, v25, 2);
      LODWORD(v70) = vmla_f32(vmls_lane_f32(vmul_f32(v65, *(float32x2_t *)v66.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v65, 1), *(float32x2_t *)v25.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), v24).u32[0];
      v71 = *(float32x4_t *)(a2 + 1560);
      v25 = *(float32x4_t *)(a2 + 1576);
      v72 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v61, COERCE_FLOAT(*v196)), v67, v64.f32[0]), v71, v65.f32[0]), (float32x4_t)0, v25);
      v73 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v61, (float32x2_t)*v196, 1), v67, v64, 1), v71, v65, 1), (float32x4_t)0, v25);
      v74 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v68, v67, *((float *)a2 + 458)), v71, v24.f32[0]), (float32x4_t)0, v25);
      v75 = vaddq_f32(v25, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v61, v69.f32[0]), v67, v69, 1), v71, v70));
      v76 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)a2 + 117))), v73, *(float32x2_t *)(a2 + 1872), 1), v74, *((float32x4_t *)a2 + 117), 2), v75, *((float32x4_t *)a2 + 117), 3);
      v77 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)a2 + 118))), v73, *(float32x2_t *)(a2 + 1888), 1), v74, *((float32x4_t *)a2 + 118), 2), v75, *((float32x4_t *)a2 + 118), 3);
      v78 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)a2 + 119))), v73, *(float32x2_t *)(a2 + 1904), 1), v74, *((float32x4_t *)a2 + 119), 2), v75, *((float32x4_t *)a2 + 119), 3);
      v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)a2 + 120))), v73, *(float32x2_t *)(a2 + 1920), 1), v74, *((float32x4_t *)a2 + 120), 2), v75, *((float32x4_t *)a2 + 120), 3);
    }
    else
    {
      v76 = *(int32x4_t *)v61;
      v77 = *(int32x4_t *)(a2 + 1544);
      v78 = *(int8x16_t *)(a2 + 1560);
      v79 = *(float32x4_t *)(a2 + 1576);
    }
    *(_QWORD *)&v99 = vzip1q_s32(v76, v77).u64[0];
    v100 = (int8x16_t)vnegq_f32(v79);
    *((_QWORD *)&v99 + 1) = v78.u32[0];
    v101 = (int8x16_t)vtrn2q_s32(v76, v77);
    v101.i32[2] = v78.i32[1];
    v102 = (int8x16_t)vzip2q_s32(v76, v77);
    *(float32x2_t *)v25.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v99, *(float *)v100.i32), *(float32x2_t *)v101.i8, *(float32x2_t *)v79.f32, 1), *(float32x2_t *)v102.i8, v79, 2);
    v102.i32[2] = v78.i32[2];
    *(_QWORD *)&v103 = vdupq_laneq_s32((int32x4_t)v102, 2).u64[0];
    v104 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v100.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), *(float32x2_t *)v79.f32, 1);
    v105 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
    v106 = (float32x2_t)vextq_s8(v100, v100, 8uLL).u64[0];
    v100.i32[3] = 0;
    v100.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v101, 0).i32[3];
    *(uint64_t *)((char *)v100.i64 + 4) = vextq_s8(v101, v102, 4uLL).u64[0];
    v102.i64[1] = LODWORD(v103);
    *(int8x16_t *)&v203[32] = v102;
    *(_OWORD *)v203 = v99;
    *(int8x16_t *)&v203[16] = v100;
    *(_QWORD *)&v203[48] = v25.i64[0];
    *(_DWORD *)&v203[56] = vmla_f32(v104, v106, *(float32x2_t *)v105.f32).u32[0];
    LODWORD(v204) = 1065353216;
    v107 = sub_223AC8034(&v227, (float32x2_t *)v203, *(double *)v102.i64, v103, v105, *(double *)&v106, *(float32x2_t *)&v99, *(double *)v100.i64, v25);
    v108 = *(unsigned __int8 *)(v20 + 464);
    *(_QWORD *)(v20 + 448) = v107;
    *(_QWORD *)(v20 + 456) = v109;
    if (!v108)
      *(_BYTE *)(v20 + 464) = 1;
  }
  else
  {
    v62 = (uint64_t *)(a2 + 168);
    if (*((_QWORD *)a2 + 21) != *((_QWORD *)a2 + 22) && !*(_QWORD *)(v20 + 152) && !*(_QWORD *)(v20 + 200))
    {
      v80 = *(_QWORD *)(v20 + 176);
      if (*(_BYTE *)(a1 + 84))
      {
        if (v80 && *(_BYTE *)(v20 + 4))
        {
          _ZF = v197 >= 0x10000 || v199 == 0;
          if (_ZF && v228.i64[0])
          {
            if (a2[1936])
            {
              v82.i32[0] = *((_DWORD *)a2 + 454);
              v83 = *(float32x2_t *)(a2 + 1824);
              v84 = *(float32x2_t *)(a2 + 1840);
              v24.i32[0] = *((_DWORD *)a2 + 462);
              v25.i64[0] = *((_QWORD *)a2 + 232);
              v25.i32[2] = *((_DWORD *)a2 + 466);
              v85 = (int8x16_t)vnegq_f32(v25);
              v86 = *(float32x4_t *)(a2 + 1544);
              v87 = vmulq_n_f32(*v61, v82.f32[0]);
              v82.i32[1] = *((_DWORD *)a2 + 458);
              v88 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v196, (int32x2_t)v83), *(float *)v85.i32), (float32x2_t)vzip2_s32(*v196, (int32x2_t)v83), *(float32x2_t *)v25.f32, 1), v82, v25, 2);
              LODWORD(v89) = vmla_f32(vmls_lane_f32(vmul_f32(v84, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v84, 1), *(float32x2_t *)v25.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), v24).u32[0];
              v90 = *(float32x4_t *)(a2 + 1560);
              v25 = *(float32x4_t *)(a2 + 1576);
              v91 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v61, COERCE_FLOAT(*v196)), v86, v83.f32[0]), v90, v84.f32[0]), (float32x4_t)0, v25);
              v92 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v61, (float32x2_t)*v196, 1), v86, v83, 1), v90, v84, 1), (float32x4_t)0, v25);
              v93 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v87, v86, *((float *)a2 + 458)), v90, v24.f32[0]), (float32x4_t)0, v25);
              v94 = vaddq_f32(v25, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v61, v88.f32[0]), v86, v88, 1), v90, v89));
              v95 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*((_OWORD *)a2 + 117))), v92, *(float32x2_t *)(a2 + 1872), 1), v93, *((float32x4_t *)a2 + 117), 2), v94, *((float32x4_t *)a2 + 117), 3);
              v96 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*((_OWORD *)a2 + 118))), v92, *(float32x2_t *)(a2 + 1888), 1), v93, *((float32x4_t *)a2 + 118), 2), v94, *((float32x4_t *)a2 + 118), 3);
              v97 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*((_OWORD *)a2 + 119))), v92, *(float32x2_t *)(a2 + 1904), 1), v93, *((float32x4_t *)a2 + 119), 2), v94, *((float32x4_t *)a2 + 119), 3);
              v98 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*((_OWORD *)a2 + 120))), v92, *(float32x2_t *)(a2 + 1920), 1), v93, *((float32x4_t *)a2 + 120), 2), v94, *((float32x4_t *)a2 + 120), 3);
            }
            else
            {
              v95 = *(int32x4_t *)v61;
              v96 = *(int32x4_t *)(a2 + 1544);
              v97 = *(int8x16_t *)(a2 + 1560);
              v98 = *(float32x4_t *)(a2 + 1576);
            }
            *(_QWORD *)&v185 = vzip1q_s32(v95, v96).u64[0];
            v186 = (int8x16_t)vnegq_f32(v98);
            *((_QWORD *)&v185 + 1) = v97.u32[0];
            v187 = (int8x16_t)vtrn2q_s32(v95, v96);
            v187.i32[2] = v97.i32[1];
            v188 = (int8x16_t)vzip2q_s32(v95, v96);
            *(float32x2_t *)v25.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v185, *(float *)v186.i32), *(float32x2_t *)v187.i8, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v188.i8, v98, 2);
            v188.i32[2] = v97.i32[2];
            *(_QWORD *)&v189 = vdupq_laneq_s32((int32x4_t)v188, 2).u64[0];
            v190 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v186.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), *(float32x2_t *)v98.f32, 1);
            v191 = (float32x4_t)vextq_s8(v97, v97, 8uLL);
            v192 = (float32x2_t)vextq_s8(v186, v186, 8uLL).u64[0];
            v186.i32[3] = 0;
            v186.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v187, 0).i32[3];
            *(uint64_t *)((char *)v186.i64 + 4) = vextq_s8(v187, v188, 4uLL).u64[0];
            v188.i64[1] = LODWORD(v189);
            *(int8x16_t *)&v203[32] = v188;
            *(_OWORD *)v203 = v185;
            *(int8x16_t *)&v203[16] = v186;
            *(_QWORD *)&v203[48] = v25.i64[0];
            *(_DWORD *)&v203[56] = vmla_f32(v190, v192, *(float32x2_t *)v191.f32).u32[0];
            LODWORD(v204) = 1065353216;
            v193 = sub_223AC8034(&v227, (float32x2_t *)v203, *(double *)v188.i64, v189, v191, *(double *)&v192, *(float32x2_t *)&v185, *(double *)v186.i64, v25);
            v194 = *(unsigned __int8 *)(v20 + 464);
            *(_QWORD *)(v20 + 448) = v193;
            *(_QWORD *)(v20 + 456) = v195;
            if (!v194)
              *(_BYTE *)(v20 + 464) = 1;
            *(_BYTE *)(v20 + 368) = 1;
          }
        }
      }
      else if (*(_BYTE *)(a1 + 85) && v80)
      {
        *(_BYTE *)(v20 + 369) = 1;
      }
    }
  }
  sub_223198030((uint64_t)&__p, v201);
  sub_223198030((uint64_t)&v227, (_QWORD *)v227.i64[1]);
  if (!a2[2016] || (v114 = *(float32x2_t **)(a1 + 120)) == 0)
  {
    sub_223AC827C(0, 0, 0, 0);
    goto LABEL_161;
  }
  v110.i64[0] = v61->i64[0];
  v110.i32[2] = *((_DWORD *)a2 + 384);
  v111.i64[0] = *((_QWORD *)a2 + 193);
  v111.i32[2] = *((_DWORD *)a2 + 388);
  v112.i32[0] = *((_DWORD *)a2 + 392);
  v113.i64[0] = *((_QWORD *)a2 + 197);
  v113.i32[2] = *((_DWORD *)a2 + 396);
  *(_QWORD *)&v115 = vzip1q_s32(v110, v111).u64[0];
  v116 = (int8x16_t)vnegq_f32(v113);
  v117 = (int8x16_t)vtrn2q_s32(v110, v111);
  v117.i32[2] = HIDWORD(*((_QWORD *)a2 + 195));
  v118 = (int8x16_t)vzip2q_s32(v110, v111);
  v118.i32[2] = v112.i32[0];
  v119 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 1560), *(float32x2_t *)v116.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 1560), 1), *(float32x2_t *)v113.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL), v112).u32[0];
  *((_QWORD *)&v115 + 1) = *((_QWORD *)a2 + 195);
  HIDWORD(v120) = 0;
  LODWORD(v120) = vdupq_lane_s32(*(int32x2_t *)&v117, 0).i32[3];
  *(_QWORD *)((char *)&v120 + 4) = vextq_s8(v117, v118, 4uLL).u64[0];
  v118.i64[1] = vdupq_laneq_s32((int32x4_t)v118, 2).u32[0];
  *(int8x16_t *)&v203[32] = v118;
  *(_OWORD *)v203 = v115;
  *(_OWORD *)&v203[16] = v120;
  *(float32x2_t *)&v203[48] = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v115, *(float *)v116.i32), *(float32x2_t *)v117.i8, *(float32x2_t *)v113.f32, 1), *(float32x2_t *)v118.i8, v113, 2);
  *(_DWORD *)&v203[56] = v119;
  LODWORD(v204) = 1065353216;
  if (!v114[46].i8[0])
  {
    sub_223AC827C(v203, 1, 0, 0);
    goto LABEL_161;
  }
  if (!v114[58].i8[0])
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 167, (uint64_t)"batch_metadata.volumetric->closest_keyframe_to_raw_frame.has_value()", 68, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_269;
    }
    if (!v114[58].i8[0])
      sub_22324A974();
  }
  v121 = *(_QWORD *)(a1 + 112);
  v124 = *(_QWORD *)(v121 + 16);
  v122 = v121 + 16;
  v123 = v124;
  if (!v124)
    goto LABEL_273;
  v125 = v122;
  do
  {
    v126 = sub_22319835C((unsigned __int8 *)(v123 + 32), (unsigned __int8 *)&v114[56]);
    if (v126 >= 0)
      v127 = (uint64_t *)v123;
    else
      v127 = (uint64_t *)(v123 + 8);
    if (v126 >= 0)
      v125 = v123;
    v123 = *v127;
  }
  while (*v127);
  if (v125 == v122 || (char)sub_22319835C((unsigned __int8 *)&v114[56], (unsigned __int8 *)(v125 + 32)) < 0)
  {
LABEL_273:
    v125 = v122;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 170, (uint64_t)"in_track && \"Expect closest keyframe in track\"", 46, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_269:
      abort();
    }
  }
  *(float32x2_t *)v128.i8 = v114[1];
  v128.i32[2] = v114[2].i32[0];
  *(float32x2_t *)v129.i8 = v114[3];
  v129.i32[2] = v114[4].i32[0];
  v130.i32[0] = v114[6].i32[0];
  *(float32x2_t *)v131.f32 = v114[7];
  v131.i32[2] = v114[8].i32[0];
  v132.i64[0] = vzip1q_s32(v128, v129).u64[0];
  v133 = (int8x16_t)vnegq_f32(v131);
  v134 = (int8x16_t)vtrn2q_s32(v128, v129);
  v134.i32[2] = HIDWORD(*(_QWORD *)&v114[5]);
  v135 = (float32x4_t)vzip2q_s32(v128, v129);
  *(float32x2_t *)v136.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v132.f32, *(float *)v133.i32), *(float32x2_t *)v134.i8, *(float32x2_t *)v131.f32, 1), *(float32x2_t *)v135.f32, v131, 2);
  v135.i32[2] = v130.i32[0];
  v136.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(v114[5], *(float32x2_t *)v133.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v114[5], 1), *(float32x2_t *)v131.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL), v130);
  v132.i64[1] = *(_QWORD *)&v114[5];
  v137.i32[3] = 0;
  v137.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v134, 0).i32[3];
  *(uint64_t *)((char *)v137.i64 + 4) = vextq_s8(v134, v136, 4uLL).u64[0];
  v135.i64[1] = vdupq_laneq_s32((int32x4_t)v135, 2).u32[0];
  v136.i32[3] = 1.0;
  v138 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, COERCE_FLOAT(*(_OWORD *)v114[9].f32)), v137, v114[9], 1), v135, *(float32x4_t *)v114[9].f32, 2), (float32x4_t)v136, *(float32x4_t *)v114[9].f32, 3);
  v139 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, COERCE_FLOAT(*(_OWORD *)v114[11].f32)), v137, v114[11], 1), v135, *(float32x4_t *)v114[11].f32, 2), (float32x4_t)v136, *(float32x4_t *)v114[11].f32, 3);
  v140 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, COERCE_FLOAT(*(_OWORD *)v114[13].f32)), v137, v114[13], 1), v135, *(float32x4_t *)v114[13].f32, 2), (float32x4_t)v136, *(float32x4_t *)v114[13].f32, 3);
  v141 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, COERCE_FLOAT(*(_OWORD *)v114[15].f32)), v137, v114[15], 1), v135, *(float32x4_t *)v114[15].f32, 2), (float32x4_t)v136, *(float32x4_t *)v114[15].f32, 3);
  v142 = *(float32x4_t *)(v125 + 120);
  v143 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, COERCE_FLOAT(*(_OWORD *)(v125 + 88))), v139, *(float32x2_t *)(v125 + 88), 1), v140, *(float32x4_t *)(v125 + 88), 2), v141, *(float32x4_t *)(v125 + 88), 3);
  v144 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, COERCE_FLOAT(*(_OWORD *)(v125 + 104))), v139, *(float32x2_t *)(v125 + 104), 1), v140, *(float32x4_t *)(v125 + 104), 2), v141, *(float32x4_t *)(v125 + 104), 3);
  v227 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, COERCE_FLOAT(*(_OWORD *)(v125 + 72))), v139, *(float32x2_t *)(v125 + 72), 1), v140, *(float32x4_t *)(v125 + 72), 2), v141, *(float32x4_t *)(v125 + 72), 3);
  v228 = v143;
  v229 = v144;
  v230 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v142.f32[0]), v139, *(float32x2_t *)v142.f32, 1), v140, v142, 2), v141, v142, 3);
  sub_223AC827C(v203, 1, &v227, 1);
LABEL_161:
  sub_223AB8868(*(_QWORD *)(a1 + 120), v203);
  v145 = *(_QWORD *)(a1 + 120);
  if (!*(_BYTE *)(v145 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v146 = *(unsigned __int8 *)(v145 + 368);
  kdebug_trace();
  v147 = *(_QWORD *)(a1 + 120);
  v148 = a3[3];
  if (v148)
  {
    if ((_QWORD *)v148 == a3)
    {
      v226 = v225;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v225);
      goto LABEL_168;
    }
    v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148);
  }
  v226 = (_BYTE *)v148;
LABEL_168:
  sub_223AC2A94(v62, (uint64_t)v203, v146 != 0, (uint64_t)v225, (uint64_t **)&v227);
  if (!*(_BYTE *)(v147 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 99, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v149 = v147 + 480;
  sub_223AB932C(v147 + 472, *(_QWORD **)(v147 + 480));
  v150 = v227.i64[1];
  *(_QWORD *)(v147 + 472) = v227.i64[0];
  *(_QWORD *)(v147 + 480) = v150;
  v151 = v228.i64[0];
  *(_QWORD *)(v147 + 488) = v228.i64[0];
  if (v151)
  {
    *(_QWORD *)(v150 + 16) = v149;
    v227.i64[0] = (uint64_t)&v227.i64[1];
    v227.i64[1] = 0;
    v228.i64[0] = 0;
  }
  else
  {
    *(_QWORD *)(v147 + 472) = v149;
  }
  sub_223AB8930((uint64_t **)(v147 + 472), (_QWORD *)(v147 + 208));
  sub_223AB8930((uint64_t **)(v147 + 472), (_QWORD *)(v147 + 184));
  sub_223AB932C((uint64_t)&v227, (_QWORD *)v227.i64[1]);
  v152 = v226;
  if (v226 == v225)
  {
    v153 = 4;
    v152 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_178;
    v153 = 5;
  }
  (*(void (**)(void))(*v152 + 8 * v153))();
LABEL_178:
  kdebug_trace();
  sub_223198030((uint64_t)v203, *(_QWORD **)&v203[8]);
  if (*(_BYTE *)(a1 + 84))
  {
    memset(&v203[28], 0, 32);
    v204 = 0;
    *(_OWORD *)&v203[12] = 0u;
    *(_DWORD *)v203 = 0;
    *(_DWORD *)&v203[3] = 0;
    *(_DWORD *)&v203[8] = 1065353216;
    *(_DWORD *)&v203[28] = 1065353216;
    *(_DWORD *)&v203[48] = 1065353216;
    v207 = 0u;
    v208 = 0u;
    v206 = 0u;
    v209 = 0;
    __asm { FMOV            V1.2S, #1.0 }
    v205 = _D1;
    LODWORD(v207) = 1065353216;
    DWORD1(v208) = 1065353216;
    v210 = 1065353216;
    v211 = v212;
    v212[0] = 0;
    v213[0] = 0;
    v213[1] = 0;
    v212[1] = 0;
    v212[2] = v213;
    v213[2] = v214;
    v214[0] = 0;
    v215[0] = 0;
    v215[1] = 0;
    v214[1] = 0;
    v214[2] = v215;
    v215[2] = v216;
    v216[0] = 0;
    v217[0] = 0;
    v217[1] = 0;
    v216[1] = 0;
    v216[2] = v217;
    v218[0] = 0;
    v217[2] = v218;
    v219[1] = 0;
    v219[0] = 0;
    v218[1] = 0;
    v218[2] = v219;
    memset(v220, 0, sizeof(v220));
    v219[2] = v220;
    v221 = 0;
    v222[0] = 0;
    v224 = 0;
    v232 = 0u;
    v227.i64[0] = 0;
    v228 = 0u;
    v229.i64[1] = 0;
    v230.i64[0] = 0;
    v227.i64[1] = (uint64_t)&v228;
    v229.i64[0] = (uint64_t)&v229.i64[1];
    v231[0] = 0;
    v231[1] = 0;
    v230.i64[1] = (uint64_t)v231;
    v235[0] = 0;
    v235[1] = 0;
    v233 = 0;
    v234 = v235;
    sub_223AC1FFC((uint64_t)v222, (uint64_t)&v227);
    sub_223AB932C((uint64_t)&v234, v235[0]);
    sub_223475E64((uint64_t)&v230.i64[1], v231[0]);
    sub_2231F5848((uint64_t)&v229, (_QWORD *)v229.i64[1]);
    sub_223198030((uint64_t)&v227.i64[1], v228.i64[0]);
    if (v224 && v222[0])
    {
      if (a2[2016])
      {
        v157 = "Should not process a raw frame when SLAM is bad";
        v158 = 78;
        v159 = 47;
        if (a2[1600] && a2[1601] && !a2[1602] && *((_DWORD *)a2 + 401))
        {
          v160 = v223;
          if (v223)
          {
            v157 = "No render depth for rawframe";
            v159 = 28;
            while (1)
            {
              v162 = *((unsigned __int8 *)v160 + 32);
              v163 = v162 > 0x37;
              if (v162 != 55)
                goto LABEL_209;
              v164 = *((unsigned __int8 *)v160 + 33);
              v163 = v164 > 0xC9;
              if (v164 != 201)
                goto LABEL_209;
              v165 = *((unsigned __int8 *)v160 + 34);
              v163 = v165 > 0x70;
              if (v165 != 112)
                goto LABEL_209;
              v166 = *((unsigned __int8 *)v160 + 35);
              v163 = v166 > 0x2C;
              if (v166 == 44
                && (v167 = *((unsigned __int8 *)v160 + 36), v163 = v167 > 0x4E, v167 == 78)
                && (v168 = *((unsigned __int8 *)v160 + 37), v163 = v168 > 0x63, v168 == 99))
              {
                v169 = *((unsigned __int8 *)v160 + 38);
                if (v169 == 15)
                {
                  v170 = *((unsigned __int8 *)v160 + 39);
                  if (v170 == 88)
                  {
                    v171 = *((unsigned __int8 *)v160 + 40);
                    if (v171 == 200)
                    {
                      v172 = *((unsigned __int8 *)v160 + 41);
                      if (v172 == 73)
                      {
                        v173 = *((unsigned __int8 *)v160 + 42);
                        if (v173 == 164)
                        {
                          v174 = *((unsigned __int8 *)v160 + 43);
                          if (v174 == 192)
                          {
                            v175 = *((unsigned __int8 *)v160 + 44);
                            if (v175 == 37)
                            {
                              v176 = *((unsigned __int8 *)v160 + 45);
                              if (v176 == 101)
                              {
                                v177 = *((unsigned __int8 *)v160 + 46);
                                if (v177 == 239)
                                {
                                  if (*((unsigned __int8 *)v160 + 47) > 0xEu)
                                    goto LABEL_191;
                                }
                                else if (v177 > 0xEF)
                                {
                                  goto LABEL_191;
                                }
                              }
                              else if (v176 > 0x65)
                              {
                                goto LABEL_191;
                              }
                            }
                            else if (v175 > 0x25)
                            {
                              goto LABEL_191;
                            }
                          }
                          else if (v174 > 0xC0)
                          {
                            goto LABEL_191;
                          }
                        }
                        else if (v173 > 0xA4)
                        {
                          goto LABEL_191;
                        }
                      }
                      else if (v172 > 0x49)
                      {
                        goto LABEL_191;
                      }
                    }
                    else if (v171 > 0xC8)
                    {
                      goto LABEL_191;
                    }
                  }
                  else if (v170 > 0x58)
                  {
                    goto LABEL_191;
                  }
                }
                else if (v169 > 0xF)
                {
                  goto LABEL_191;
                }
                v178 = *((unsigned __int8 *)v160 + 38);
                if (v178 == 15)
                {
                  v178 = *((unsigned __int8 *)v160 + 39);
                  if (v178 == 88)
                  {
                    v178 = *((unsigned __int8 *)v160 + 40);
                    if (v178 == 200)
                    {
                      v178 = *((unsigned __int8 *)v160 + 41);
                      if (v178 == 73)
                      {
                        v178 = *((unsigned __int8 *)v160 + 42);
                        if (v178 == 164)
                        {
                          v178 = *((unsigned __int8 *)v160 + 43);
                          if (v178 == 192)
                          {
                            v178 = *((unsigned __int8 *)v160 + 44);
                            if (v178 == 37)
                            {
                              v178 = *((unsigned __int8 *)v160 + 45);
                              if (v178 == 101)
                              {
                                v178 = *((unsigned __int8 *)v160 + 46);
                                if (v178 == 239)
                                {
                                  v178 = *((unsigned __int8 *)v160 + 47);
                                  if (v178 == 14)
                                    goto LABEL_248;
                                  v161 = 14;
                                }
                                else
                                {
                                  v161 = 239;
                                }
                              }
                              else
                              {
                                v161 = 101;
                              }
                            }
                            else
                            {
                              v161 = 37;
                            }
                          }
                          else
                          {
                            v161 = 192;
                          }
                        }
                        else
                        {
                          v161 = 164;
                        }
                      }
                      else
                      {
                        v161 = 73;
                      }
                    }
                    else
                    {
                      v161 = 200;
                    }
                  }
                  else
                  {
                    v161 = 88;
                  }
                }
                else
                {
                  v161 = 15;
                }
                if (v178 >= v161)
                  goto LABEL_248;
              }
              else
              {
LABEL_209:
                if (v163)
                  goto LABEL_191;
              }
              ++v160;
LABEL_191:
              v160 = (uint64_t **)*v160;
              if (!v160)
              {
                v158 = 82;
                goto LABEL_264;
              }
            }
          }
          v157 = "No render depth for rawframe";
          v158 = 82;
          v159 = 28;
        }
      }
      else
      {
        v157 = "Cannot fuse rawframe";
        v158 = 74;
        v159 = 20;
      }
LABEL_264:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", v158, (uint64_t)"", 0, (uint64_t)v157, v159, (void (*)(void **))sub_22457406C);
      abort();
    }
LABEL_248:
    sub_223AC23C0((uint64_t)v203);
  }
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 112) + 24))(*(_QWORD *)(a1 + 112), v62, *(_QWORD *)(a1 + 120));
  if (*(_BYTE *)(a1 + 16) && (a2[1] & 0x40) == 0)
  {
    kdebug_trace();
    v179 = *(_QWORD *)(a1 + 112);
    v180 = *(_QWORD **)(v179 + 8);
    *(_QWORD *)&v203[8] = 0;
    *(_QWORD *)&v203[16] = 0;
    *(_QWORD *)v203 = &v203[8];
    sub_223ABDE68(v203, v180, v181, (_QWORD *)(v179 + 16));
    v182 = (_QWORD *)*((_QWORD *)a2 + 15);
    v227.i64[1] = 0;
    v228.i64[0] = 0;
    v227.i64[0] = (uint64_t)&v227.i64[1];
    sub_223AC2284(&v227, v182, v183, (_QWORD *)a2 + 16);
    sub_223A62A3C((unsigned __int8 *)(a1 + 128), (uint64_t)&__p);
    sub_223AC40E8(&v227, v203, (uint64_t *)&__p);
    if (SHIBYTE(v202) < 0)
      operator delete(__p);
    kdebug_trace();
    sub_223198030((uint64_t)&v227, (_QWORD *)v227.i64[1]);
    sub_223198030((uint64_t)v203, *(_QWORD **)&v203[8]);
  }
  return kdebug_trace();
}

void sub_223AC0FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;

  sub_223198030((uint64_t)&__p, (_QWORD *)a36);
  sub_223198030(v36 - 240, *(_QWORD **)(v36 - 232));
  sub_2231874DC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_223AC1128(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  return sub_223ABF9D8(a1 - 8, a2, a3);
}

uint64_t sub_223AC1130(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 120);
  sub_223AB8D10(v2);
  if (*(_BYTE *)(v2 + 496))
    sub_223AB9138(v2 + 368);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112));
  if (*(_BYTE *)(a1 + 144))
    *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a1 + 152))
    *(_BYTE *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_223AC1190(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 112);
  sub_223AB8D10(v2);
  if (*(_BYTE *)(v2 + 496))
    sub_223AB9138(v2 + 368);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
  if (*(_BYTE *)(a1 + 136))
    *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a1 + 144))
    *(_BYTE *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_223AC11F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_223AC11F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void sub_223AC1200(uint64_t a1, int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD *v39;
  uint64_t v40;
  char v41;

  v4 = *(_QWORD *)(a1 + 148);
  if ((v4 & 0xFF00000000) == 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 317, (uint64_t)"bid_local.has_value()", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22324A974();
  }
  if ((_DWORD)v4 != a3)
    return;
  v6 = *(_QWORD *)(a1 + 112);
  v7 = (_QWORD *)(v6 + 152);
  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = (19349669 * v9) ^ (73856093 * *a2) ^ (83492791 * v10);
  v12 = *(_QWORD *)(v6 + 160);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v3 = (19349669 * v9) ^ (73856093 * v8) ^ (83492791 * v10);
      if (v11 >= v12)
        v3 = v11 % v12;
    }
    else
    {
      v3 = v11 & (v12 - 1);
    }
    v14 = *(uint64_t ***)(*v7 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == v9 && *((_DWORD *)v15 + 6) == v10)
                goto LABEL_28;
            }
            else if ((v17 & (v12 - 1)) != v3)
            {
              goto LABEL_29;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_29;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == v9 && *((_DWORD *)v15 + 6) == v10)
            {
LABEL_28:
              v18 = 0;
              goto LABEL_68;
            }
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_29:
  v19 = operator new(0x48uLL);
  v20 = (_QWORD *)(v6 + 168);
  v39 = v19;
  v40 = v6 + 168;
  v41 = 0;
  *v19 = 0;
  v19[1] = v11;
  v21 = *(_QWORD *)a2;
  v19[2] = *(_QWORD *)a2;
  v22 = a2[2];
  *((_DWORD *)v19 + 6) = v22;
  v19[4] = v21;
  *((_DWORD *)v19 + 10) = v22;
  *((_DWORD *)v19 + 11) = 5;
  v19[7] = 0;
  v19[6] = v19 + 7;
  v19[8] = 0;
  sub_223ABEBB4((uint64_t)(v19 + 6), v38, v38);
  v41 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(v6 + 176) + 1);
  v24 = *(float *)(v6 + 184);
  if (v12 && (float)(v24 * (float)v12) >= v23)
  {
    v25 = *(_QWORD **)(*v7 + 8 * v3);
    v26 = v39;
    if (v25)
    {
LABEL_32:
      *v26 = *v25;
      *v25 = v39;
      goto LABEL_67;
    }
  }
  else
  {
    v27 = 1;
    if (v12 >= 3)
      v27 = (v12 & (v12 - 1)) != 0;
    v28 = v27 | (2 * v12);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(v6 + 160);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 176) / *(float *)(v6 + 184));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_43:
        sub_2231B0668(v6 + 152, prime);
    }
    v12 = *(_QWORD *)(v6 + 160);
    v35 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v3 = v11 % v12;
        v25 = *(_QWORD **)(*v7 + 8 * (v11 % v12));
        v26 = v39;
        if (v25)
          goto LABEL_32;
      }
      else
      {
        v3 = v11;
        v25 = *(_QWORD **)(*v7 + 8 * v11);
        v26 = v39;
        if (v25)
          goto LABEL_32;
      }
    }
    else
    {
      v3 = v35 & v11;
      v25 = *(_QWORD **)(*v7 + 8 * (v35 & v11));
      v26 = v39;
      if (v25)
        goto LABEL_32;
    }
  }
  *v26 = *v20;
  *v20 = v39;
  *(_QWORD *)(*v7 + 8 * v3) = v20;
  if (*v39)
  {
    v36 = *(_QWORD *)(*v39 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v36 >= v12)
        v36 %= v12;
    }
    else
    {
      v36 &= v12 - 1;
    }
    *(_QWORD *)(*v7 + 8 * v36) = v39;
  }
LABEL_67:
  ++*(_QWORD *)(v6 + 176);
  v18 = (_QWORD *)v38[0];
LABEL_68:
  sub_223198030((uint64_t)&v37, v18);
}

void sub_223AC1654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223475E1C((uint64_t)va);
  sub_223198030(v6, a5);
  _Unwind_Resume(a1);
}

void sub_223AC1688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;

  sub_223198030(v12, a12);
  _Unwind_Resume(a1);
}

void sub_223AC16A0(uint64_t a1, int *a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a1 + 148);
  if ((v3 & 0xFF00000000) == 0)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 327, (uint64_t)"bid_local.has_value()", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))sub_22324A974();
    goto LABEL_34;
  }
  if ((_DWORD)v3 != a3)
    return;
  v4 = *(_QWORD **)(a1 + 112);
  v5 = v4 + 19;
  v6 = sub_22393835C(v4 + 19, a2);
  if (!v6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 333, (uint64_t)"iter != rankings.end()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_34:
    abort();
  }
  v7 = (int8x8_t)v4[20];
  v8 = v6[1];
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  v10 = *(uint64_t **)(*v5 + 8 * v8);
  do
  {
    v11 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10 != v6);
  if (v11 == v4 + 21)
    goto LABEL_23;
  v12 = v11[1];
  if (v9.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v7)
      v12 %= *(_QWORD *)&v7;
  }
  else
  {
    v12 &= *(_QWORD *)&v7 - 1;
  }
  if (v12 != v8)
  {
LABEL_23:
    if (!*v6)
      goto LABEL_24;
    v13 = *(_QWORD *)(*v6 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v7)
        v13 %= *(_QWORD *)&v7;
    }
    else
    {
      v13 &= *(_QWORD *)&v7 - 1;
    }
    if (v13 != v8)
LABEL_24:
      *(_QWORD *)(*v5 + 8 * v8) = 0;
  }
  v14 = *v6;
  if (*v6)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v7)
        v15 %= *(_QWORD *)&v7;
    }
    else
    {
      v15 &= *(_QWORD *)&v7 - 1;
    }
    if (v15 != v8)
    {
      *(_QWORD *)(*v5 + 8 * v15) = v11;
      v14 = *v6;
    }
  }
  *v11 = v14;
  *v6 = 0;
  --v4[22];
  sub_223198030((uint64_t)(v6 + 6), (_QWORD *)v6[7]);
  operator delete(v6);
}

uint64_t sub_223AC18A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t *v9;

  v2 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = v2 + 16;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = v3;
  do
  {
    v8 = sub_22319835C((unsigned __int8 *)(v4 + 32), a2);
    if (v8 >= 0)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8 >= 0)
      v7 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v7 == v3 || (sub_22319835C(a2, (unsigned __int8 *)(v7 + 32)) & 0x80) != 0)
    return 0;
  else
    return (v7 + 48);
}

uint64_t sub_223AC1948(uint64_t a1, unsigned __int8 *a2, int **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int *v16;
  int *v17;
  float32x2_t v18;
  float32x2_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x4_t v24;
  _QWORD *v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x2_t v28;
  uint64_t **v29;
  int8x16_t v30;
  float32x4_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  float32x4_t v37;
  double v38;
  double v39;
  float32x2_t v40;
  double v41;
  double v42;
  float32x2_t v43;
  float32x4_t v44;
  int v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  int v50;
  int v51;
  std::string *v53;
  std::string::size_type size;
  float32x2_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float v62;
  std::string v63;

  kdebug_trace();
  v6 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(v6 + 16);
  v7 = v6 + 16;
  v8 = v9;
  if (!v9)
    goto LABEL_36;
  v10 = v7;
  do
  {
    v11 = sub_22319835C((unsigned __int8 *)(v8 + 32), a2);
    if (v11 >= 0)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v11 >= 0)
      v10 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v10 == v7 || (sub_22319835C(a2, (unsigned __int8 *)(v10 + 32)) & 0x80) != 0)
  {
LABEL_36:
    sub_223AC1CF0((uint64_t)&v63, a2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v63;
    else
      v53 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptor.cpp", 353, (uint64_t)"", 0, (uint64_t)v53, size, (void (*)(void **))sub_22457406C);
    std::string::~string(&v63);
    abort();
  }
  v16 = *a3;
  v17 = a3[1];
  if (*a3 != v17)
  {
    v13.i64[0] = *(_QWORD *)(v10 + 72);
    v18.i32[0] = *(_DWORD *)(v10 + 80);
    v14.i64[0] = *(_QWORD *)(v10 + 88);
    v19 = (float32x2_t)vzip1q_s32(v13, v14).u64[0];
    v20 = v13;
    v20.i32[2] = v18.i32[0];
    v21 = v14;
    v21.i32[2] = *(_DWORD *)(v10 + 96);
    v22 = (float32x2_t)vtrn2q_s32(v13, v14).u64[0];
    v15.i64[0] = *(_QWORD *)(v10 + 104);
    v15.i32[2] = *(_DWORD *)(v10 + 112);
    v23 = (int32x2_t)vtrn2q_s32(v20, v21).u64[0];
    v18.i32[1] = v21.i32[2];
    v58 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(v23, 0), (int8x16_t)vdupq_lane_s32(v23, 1), 0xCuLL).u64[0];
    v59 = *(float32x2_t *)v15.i8;
    v24 = (float32x4_t)vzip2q_s32(v20, v21);
    v57 = *(float32x2_t *)v24.f32;
    v62 = *(float *)(a1 + 92);
    v25 = (_QWORD *)(*(_QWORD *)(a1 + 112) + 152);
    v24.i64[0] = *(_QWORD *)(v10 + 120);
    v24.i32[2] = *(_DWORD *)(v10 + 128);
    v26 = (int8x16_t)vnegq_f32(v24);
    v60 = v19;
    *(float32x2_t *)v27.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v19, *(float *)v26.i32), v22, *(float32x2_t *)v24.f32, 1), v18, v24, 2);
    v21.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1);
    *(float32x2_t *)&v27.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v26.i8), v28, *(float32x2_t *)v24.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v21.i8);
    v55 = *(float32x2_t *)v21.i8;
    v56 = v27;
    v29 = (uint64_t **)(v10 + 56);
    do
    {
      v36 = sub_22393835C(v25, v16);
      if (!v36)
        sub_223198218("unordered_map::at: key not found");
      sub_223ABE414((uint64_t)(v36 + 4), (__int128 *)a2, (float32x2_t *)(v10 + 72), v62, v37, v38, v39, v40, v41, v42, v43);
      v44.i64[0] = *(_QWORD *)v16;
      v45 = v16[2];
      v46 = (uint64_t **)(v10 + 56);
      v47 = (uint64_t *)(v10 + 56);
      v48 = *v29;
      if (!*v29)
        goto LABEL_13;
      do
      {
        while (1)
        {
          v47 = v48;
          v49 = *((_DWORD *)v48 + 7);
          if (v44.i32[0] != v49)
            break;
          v50 = *((_DWORD *)v47 + 8);
          if (v44.i32[1] != v50)
          {
            if (v44.i32[1] < v50)
              goto LABEL_20;
            if (v50 >= v44.i32[1])
              goto LABEL_16;
            goto LABEL_31;
          }
          v51 = *((_DWORD *)v47 + 9);
          if (v45 >= v51)
          {
            if (v51 >= v45)
              goto LABEL_16;
            goto LABEL_31;
          }
LABEL_20:
          v48 = (uint64_t *)*v47;
          v46 = (uint64_t **)v47;
          if (!*v47)
            goto LABEL_13;
        }
        if (v44.i32[0] < v49)
          goto LABEL_20;
        if (v49 >= v44.i32[0])
          goto LABEL_16;
LABEL_31:
        v48 = (uint64_t *)v47[1];
      }
      while (v48);
      v46 = (uint64_t **)(v47 + 1);
LABEL_13:
      *(float32x2_t *)v44.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)v44.f32, (int32x2_t)0x400000004));
      v44.f32[2] = (float)(v45 + 4);
      v30 = (int8x16_t)vmulq_n_f32(v44, v62);
      *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v60, *(float *)v30.i32), v58, *(float32x2_t *)v30.i8, 1), v57, (float32x4_t)v30, 2);
      *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v59, *(float32x2_t *)v30.i8), v28, *(float32x2_t *)v30.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), v55);
      v61 = vaddq_f32(v56, v31);
      v32 = (char *)operator new(0x38uLL);
      v33 = v16[2];
      *(_QWORD *)(v32 + 28) = *(_QWORD *)v16;
      *((_DWORD *)v32 + 9) = v33;
      *((_DWORD *)v32 + 12) = v61.i32[2];
      *((_QWORD *)v32 + 5) = v61.i64[0];
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v47;
      *v46 = (uint64_t *)v32;
      v34 = **(_QWORD **)(v10 + 48);
      if (v34)
      {
        *(_QWORD *)(v10 + 48) = v34;
        v35 = *v46;
      }
      else
      {
        v35 = (uint64_t *)v32;
      }
      sub_2231A9A8C(*(uint64_t **)(v10 + 56), v35);
      ++*(_QWORD *)(v10 + 64);
LABEL_16:
      v16 += 3;
    }
    while (v16 != v17);
  }
  return kdebug_trace();
}

void sub_223AC1CD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AC1CF0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  char v4;
  _DWORD v5[6];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_223AC24A4(v5, "Keyframe with uuid: ");
  sub_22319B83C((uint64_t)&v4, (uint64_t)v5, a2);
  v7[0] = v5;
  v7[1] = "is not being tracked";
  v7[2] = v5;
  v7[3] = "is not being tracked";
  v7[4] = "is not being tracked";
  if (v6 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5F700[v6])(&v8, v5);
  if (v6 == -1)
    sub_22316DD70();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5F6E8[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5F6D0[v6])(v7, v5);
  return result;
}

void sub_223AC1DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC1E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC1E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC1E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AC1E40(uint64_t a1, uint64_t a2)
{
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD v15[2];
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18[4];

  v18[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_QWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_QWORD *)(a1 + 124) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 68) = _D1;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_DWORD *)(a1 + 132) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (*(_BYTE *)(a2 + 84))
  {
    v9 = 0;
    v11 = 0uLL;
    v10 = &v11;
    v12 = (unint64_t)&v12 + 8;
    memset(v15, 0, sizeof(v15));
    v13 = 0;
    v14 = v15;
    v18[0] = 0;
    v18[1] = 0;
    v16 = 0;
    v17 = v18;
    sub_223AC1FFC(a1 + 368, (uint64_t)&v9);
    sub_223AB932C((uint64_t)&v17, v18[0]);
    sub_223475E64((uint64_t)&v14, *(_QWORD **)&v15[0]);
    sub_2231F5848((uint64_t)&v12, *((_QWORD **)&v12 + 1));
    sub_223198030((uint64_t)&v10, (_QWORD *)v11);
  }
  return a1;
}

uint64_t sub_223AC1FFC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = result;
  v4 = *(unsigned __int8 *)(result + 128);
  *(_WORD *)result = *(_WORD *)a2;
  v5 = (_QWORD *)(result + 8);
  if (v4)
  {
    v6 = (_QWORD *)(result + 16);
    sub_223198030(result + 8, *(_QWORD **)(result + 16));
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    v7 = (_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    *v6 = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v3 + 24) = v9;
    if (v9)
    {
      *(_QWORD *)(v8 + 16) = v6;
      *(_QWORD *)(a2 + 8) = v7;
      *v7 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    else
    {
      *v5 = v6;
    }
    v14 = v3 + 40;
    sub_2231F5848(v3 + 32, *(_QWORD **)(v3 + 40));
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
    v15 = (_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 40) = v16;
    v17 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 48) = v17;
    if (v17)
    {
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(a2 + 32) = v15;
      *v15 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      *(_QWORD *)(v3 + 32) = v14;
    }
    v18 = v3 + 64;
    sub_223475E64(v3 + 56, *(_QWORD **)(v3 + 64));
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
    v19 = (_QWORD *)(a2 + 64);
    v20 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v3 + 64) = v20;
    v21 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(v3 + 72) = v21;
    if (v21)
    {
      *(_QWORD *)(v20 + 16) = v18;
      *(_QWORD *)(a2 + 56) = v19;
      *v19 = 0;
      *(_QWORD *)(a2 + 72) = 0;
    }
    else
    {
      *(_QWORD *)(v3 + 56) = v18;
    }
    v22 = *(_OWORD *)(a2 + 80);
    v24 = v3 + 112;
    v23 = *(_QWORD **)(v3 + 112);
    *(_BYTE *)(v3 + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(v3 + 80) = v22;
    sub_223AB932C(v3 + 104, v23);
    *(_QWORD *)(v3 + 104) = *(_QWORD *)(a2 + 104);
    v25 = (_QWORD *)(a2 + 112);
    v26 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(v3 + 112) = v26;
    v27 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(v3 + 120) = v27;
    if (v27)
    {
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(a2 + 104) = v25;
      *v25 = 0;
      *(_QWORD *)(a2 + 120) = 0;
    }
    else
    {
      *(_QWORD *)(v3 + 104) = v24;
    }
    return v3;
  }
  else
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(result + 16) = v11;
    v12 = result + 16;
    v13 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(result + 24) = v13;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(a2 + 8) = v10;
      *v10 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    else
    {
      *v5 = v12;
    }
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    v28 = (_QWORD *)(a2 + 40);
    v29 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 40) = v29;
    v30 = result + 40;
    v31 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(result + 48) = v31;
    if (v31)
    {
      *(_QWORD *)(v29 + 16) = v30;
      *(_QWORD *)(a2 + 32) = v28;
      *v28 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      *(_QWORD *)(result + 32) = v30;
    }
    *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
    v32 = (_QWORD *)(a2 + 64);
    v33 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(result + 64) = v33;
    v34 = result + 64;
    v35 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(result + 72) = v35;
    if (v35)
    {
      *(_QWORD *)(v33 + 16) = v34;
      *(_QWORD *)(a2 + 56) = v32;
      *v32 = 0;
      *(_QWORD *)(a2 + 72) = 0;
    }
    else
    {
      *(_QWORD *)(result + 56) = v34;
    }
    v36 = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(result + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(result + 80) = v36;
    *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
    v37 = (_QWORD *)(a2 + 112);
    v38 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(result + 112) = v38;
    v39 = result + 112;
    v40 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(result + 120) = v40;
    if (v40)
    {
      *(_QWORD *)(v38 + 16) = v39;
      *(_QWORD *)(a2 + 104) = v37;
      *v37 = 0;
      *(_QWORD *)(a2 + 120) = 0;
    }
    else
    {
      *(_QWORD *)(result + 104) = v39;
    }
    *(_BYTE *)(result + 128) = 1;
  }
  return result;
}

_QWORD *sub_223AC2284(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t *v7;
  char **v8;
  _QWORD *v9;
  char *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 != a4)
  {
    v5 = a2;
    v6 = (_QWORD **)result;
    v7 = result + 1;
    do
    {
      v17 = *(_OWORD *)((char *)v5 + 28);
      result = sub_223426D4C(v6, v7, &v16, &v15, (unsigned __int8 *)&v17);
      v8 = (char **)result;
      if (*result)
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 25) = v17;
        v11 = v16;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v8 = v10;
        v12 = (_QWORD *)**v6;
        if (v12)
        {
          *v6 = v12;
          v10 = *v8;
        }
        result = sub_2231A9A8C(v6[1], (uint64_t *)v10);
        v6[2] = (_QWORD *)((char *)v6[2] + 1);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v13 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v13 = (_QWORD *)v5[2];
        v14 = *v13 == (_QWORD)v5;
        v5 = v13;
      }
      while (!v14);
LABEL_3:
      v5 = v13;
    }
    while (v13 != a4);
  }
  return result;
}

uint64_t sub_223AC23C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 496))
  {
    sub_223AB932C(a1 + 472, *(_QWORD **)(a1 + 480));
    sub_223475E64(a1 + 424, *(_QWORD **)(a1 + 432));
    sub_2231F5848(a1 + 400, *(_QWORD **)(a1 + 408));
    sub_223198030(a1 + 376, *(_QWORD **)(a1 + 384));
  }
  sub_223198030(a1 + 328, *(_QWORD **)(a1 + 336));
  sub_223198030(a1 + 304, *(_QWORD **)(a1 + 312));
  sub_223198030(a1 + 280, *(_QWORD **)(a1 + 288));
  sub_223198030(a1 + 256, *(_QWORD **)(a1 + 264));
  sub_223198030(a1 + 232, *(_QWORD **)(a1 + 240));
  sub_223198030(a1 + 208, *(_QWORD **)(a1 + 216));
  sub_223198030(a1 + 184, *(_QWORD **)(a1 + 192));
  sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_223198030(a1 + 136, *(_QWORD **)(a1 + 144));
  return a1;
}

_DWORD *sub_223AC2488(_DWORD ***a1)
{
  return sub_223AC24A4(**a1, (char *)(*a1)[1]);
}

void sub_223AC2494(uint64_t a1, uint64_t a2)
{
  sub_223AC2594((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223AC24A4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5F6D0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223AC2594(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5F6D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223AC2748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223AC278C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223AC2884((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223AC287C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223AC2884(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223AC2A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC2A94(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t **i;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _OWORD *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int32x4_t v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned __int8 *v69;
  uint64_t **v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v104;
  char **v105[3];
  _BYTE v106[104];
  void *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *__p[2];
  __int128 v115;
  int32x4_t v116;
  float32x2_t v117;
  unsigned __int32 v118;
  int v119;
  _BYTE v120[24];
  std::__shared_weak_count *v121;
  int32x4_t v122;
  int32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int16 v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 1848))
    v9 = a1[157];
  else
    v9 = 0;
  v113 = v9;
  kdebug_trace();
  v10 = *a1;
  v104 = a1[1];
  if (*a1 == v104 && (a3 & 1) == 0)
  {
    kdebug_trace();
    a5[2] = 0;
    a5[1] = 0;
    *a5 = (uint64_t *)(a5 + 1);
    return;
  }
  v101 = a1;
  v102 = a4;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v106[0] = 0;
  v106[96] = 0;
  v105[0] = (char **)&v107;
  v105[1] = (char **)&v110;
  v105[2] = (char **)v106;
  a5[1] = 0;
  v11 = a5 + 1;
  a5[2] = 0;
  *a5 = (uint64_t *)(a5 + 1);
  if (v10 == v104)
    goto LABEL_124;
  while (2)
  {
    *(_OWORD *)v120 = *(_OWORD *)v10;
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(std::__shared_weak_count **)(v10 + 24);
    *(_QWORD *)&v120[16] = v12;
    v121 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = *(int32x4_t *)(v10 + 32);
    v17 = *(int32x4_t *)(v10 + 48);
    v18 = *(float32x4_t *)(v10 + 80);
    v124 = *(int8x16_t *)(v10 + 64);
    v125 = v18;
    v122 = v16;
    v123 = v17;
    v19 = *(_OWORD *)(v10 + 112);
    v126 = *(_OWORD *)(v10 + 96);
    v20 = *(_OWORD *)(v10 + 128);
    v21 = *(_OWORD *)(v10 + 160);
    v22 = *(_OWORD *)(v10 + 176);
    v129 = *(_OWORD *)(v10 + 144);
    v130 = v21;
    v127 = v19;
    v128 = v20;
    v23 = *(_OWORD *)(v10 + 192);
    v24 = *(_OWORD *)(v10 + 224);
    v133 = *(_OWORD *)(v10 + 208);
    v134 = v24;
    v131 = v22;
    v132 = v23;
    v135 = *(_WORD *)(v10 + 240);
    v25 = sub_223C8F01C(v135);
    __p[0] = (void *)0x1010101010101;
    v26 = v25;
    if (!*((_BYTE *)__p + v25)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 55, (uint64_t)"IsValidEvent(event)", 19, (uint64_t)"Not a legitimate event", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    __p[0] = (void *)16843009;
    if (!*((_BYTE *)__p + v26))
      goto LABEL_119;
    for (i = *(uint64_t ***)(a2 + 8); i; i = (uint64_t **)*i)
    {
      v28 = *((unsigned __int8 *)i + 25);
      if (v120[0] == v28)
      {
        v28 = *((unsigned __int8 *)i + 26);
        if (v120[1] == v28)
        {
          v28 = *((unsigned __int8 *)i + 27);
          if (v120[2] == v28)
          {
            v28 = *((unsigned __int8 *)i + 28);
            if (v120[3] == v28)
            {
              v29 = *((unsigned __int8 *)i + 29);
              v30 = v120[4];
              if (v120[4] == v29)
              {
                v29 = *((unsigned __int8 *)i + 30);
                v30 = v120[5];
                if (v120[5] == v29)
                {
                  v29 = *((unsigned __int8 *)i + 31);
                  v30 = v120[6];
                  if (v120[6] == v29)
                  {
                    v29 = *((unsigned __int8 *)i + 32);
                    v30 = v120[7];
                    if (v120[7] == v29)
                    {
                      v29 = *((unsigned __int8 *)i + 33);
                      v30 = v120[8];
                      if (v120[8] == v29)
                      {
                        v29 = *((unsigned __int8 *)i + 34);
                        v30 = v120[9];
                        if (v120[9] == v29)
                        {
                          v29 = *((unsigned __int8 *)i + 35);
                          v30 = v120[10];
                          if (v120[10] == v29)
                          {
                            v29 = *((unsigned __int8 *)i + 36);
                            v30 = v120[11];
                            if (v120[11] == v29)
                            {
                              v29 = *((unsigned __int8 *)i + 37);
                              v30 = v120[12];
                              if (v120[12] == v29)
                              {
                                v29 = *((unsigned __int8 *)i + 38);
                                v30 = v120[13];
                                if (v120[13] == v29)
                                {
                                  v29 = *((unsigned __int8 *)i + 39);
                                  v30 = v120[14];
                                  if (v120[14] == v29)
                                  {
                                    v29 = *((unsigned __int8 *)i + 40);
                                    v30 = v120[15];
                                    if (v120[15] == v29)
                                      goto LABEL_38;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v30 >= v29)
              {
LABEL_38:
                v28 = *((unsigned __int8 *)i + 29);
                v31 = v120[4];
                if (v28 == v120[4])
                {
                  v28 = *((unsigned __int8 *)i + 30);
                  v31 = v120[5];
                  if (v28 == v120[5])
                  {
                    v28 = *((unsigned __int8 *)i + 31);
                    v31 = v120[6];
                    if (v28 == v120[6])
                    {
                      v28 = *((unsigned __int8 *)i + 32);
                      v31 = v120[7];
                      if (v28 == v120[7])
                      {
                        v28 = *((unsigned __int8 *)i + 33);
                        v31 = v120[8];
                        if (v28 == v120[8])
                        {
                          v28 = *((unsigned __int8 *)i + 34);
                          v31 = v120[9];
                          if (v28 == v120[9])
                          {
                            v28 = *((unsigned __int8 *)i + 35);
                            v31 = v120[10];
                            if (v28 == v120[10])
                            {
                              v28 = *((unsigned __int8 *)i + 36);
                              v31 = v120[11];
                              if (v28 == v120[11])
                              {
                                v28 = *((unsigned __int8 *)i + 37);
                                v31 = v120[12];
                                if (v28 == v120[12])
                                {
                                  v28 = *((unsigned __int8 *)i + 38);
                                  v31 = v120[13];
                                  if (v28 == v120[13])
                                  {
                                    v28 = *((unsigned __int8 *)i + 39);
                                    v31 = v120[14];
                                    if (v28 == v120[14])
                                    {
                                      v28 = *((unsigned __int8 *)i + 40);
                                      v31 = v120[15];
                                      if (v28 == v120[15])
                                      {
LABEL_111:
                                        *(_QWORD *)&v52 = vzip1q_s32(v122, v123).u64[0];
                                        v53 = (int8x16_t)vnegq_f32(v125);
                                        v54 = (int8x16_t)vtrn2q_s32(v122, v123);
                                        v54.i32[2] = v124.i32[1];
                                        v55 = (int8x16_t)vzip2q_s32(v122, v123);
                                        v56 = (int32x4_t)v55;
                                        v56.i32[2] = v124.i32[2];
                                        *((_QWORD *)&v52 + 1) = v124.u32[0];
                                        HIDWORD(v57) = 0;
                                        LODWORD(v57) = vdupq_lane_s32(*(int32x2_t *)&v54, 0).i32[3];
                                        *(_QWORD *)((char *)&v57 + 4) = vextq_s8(v54, v55, 4uLL).u64[0];
                                        v56.i64[1] = vdupq_laneq_s32(v56, 2).u32[0];
                                        v115 = v57;
                                        v116 = v56;
                                        *(_OWORD *)__p = v52;
                                        v117 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v52, *(float *)v53.i32), *(float32x2_t *)v54.i8, *(float32x2_t *)v125.f32, 1), *(float32x2_t *)v55.i8, v125, 2);
                                        v118 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v53.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1), *(float32x2_t *)v125.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL)).u32[0];
                                        v119 = 1065353216;
                                        v58 = sub_2231D0224(v12);
                                        sub_223AC3AB8(v105, v120, (uint64_t)__p, v58);
                                        goto LABEL_119;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_18:
                if (v28 >= v31)
                  goto LABEL_111;
                ++i;
              }
            }
            else
            {
              v31 = v120[3];
              if (v120[3] >= v28)
                goto LABEL_18;
            }
          }
          else
          {
            v31 = v120[2];
            if (v120[2] >= v28)
              goto LABEL_18;
          }
        }
        else
        {
          v31 = v120[1];
          if (v120[1] >= v28)
            goto LABEL_18;
        }
      }
      else
      {
        v31 = v120[0];
        if (v120[0] >= v28)
          goto LABEL_18;
      }
    }
    v115 = 0u;
    v116 = 0u;
    *(_OWORD *)__p = 0u;
    v32 = a5 + 1;
    v33 = (uint64_t *)(a5 + 1);
    v34 = *v11;
    if (!*v11)
      goto LABEL_100;
    v35 = v120[11];
    v36 = v120[12];
    v37 = v120[13];
    v38 = v120[14];
    v39 = v120[15];
    do
    {
      while (1)
      {
        v33 = v34;
        v40 = *((unsigned __int8 *)v34 + 32);
        if (v120[0] == v40)
          break;
        v43 = v120[0];
        if (v120[0] >= v40)
          goto LABEL_97;
LABEL_61:
        v34 = (uint64_t *)*v33;
        v32 = v33;
        if (!*v33)
          goto LABEL_100;
      }
      v40 = *((unsigned __int8 *)v33 + 33);
      if (v120[1] != v40)
      {
        v43 = v120[1];
        if (v120[1] >= v40)
          goto LABEL_97;
        goto LABEL_61;
      }
      v41 = *((unsigned __int8 *)v33 + 34);
      v42 = v120[2];
      if (v120[2] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 35);
      v42 = v120[3];
      if (v120[3] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 36);
      v42 = v120[4];
      if (v120[4] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 37);
      v42 = v120[5];
      if (v120[5] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 38);
      v42 = v120[6];
      if (v120[6] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 39);
      v42 = v120[7];
      if (v120[7] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 40);
      v42 = v120[8];
      if (v120[8] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 41);
      v42 = v120[9];
      if (v120[9] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 42);
      v42 = v120[10];
      if (v120[10] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 43);
      v42 = v120[11];
      if (v120[11] != v41)
        goto LABEL_78;
      v41 = *((unsigned __int8 *)v33 + 44);
      v42 = v120[12];
      if (v120[12] != v41
        || (v41 = *((unsigned __int8 *)v33 + 45), v42 = v120[13], v120[13] != v41)
        || (v41 = *((unsigned __int8 *)v33 + 46), v42 = v120[14], v120[14] != v41)
        || (v41 = *((unsigned __int8 *)v33 + 47), v42 = v120[15], v120[15] != v41))
      {
LABEL_78:
        if (v42 < v41)
          goto LABEL_61;
      }
      v40 = *((unsigned __int8 *)v33 + 34);
      v43 = v120[2];
      if (v40 == v120[2])
      {
        v40 = *((unsigned __int8 *)v33 + 35);
        v43 = v120[3];
        if (v40 == v120[3])
        {
          v40 = *((unsigned __int8 *)v33 + 36);
          v43 = v120[4];
          if (v40 == v120[4])
          {
            v40 = *((unsigned __int8 *)v33 + 37);
            v43 = v120[5];
            if (v40 == v120[5])
            {
              v40 = *((unsigned __int8 *)v33 + 38);
              v43 = v120[6];
              if (v40 == v120[6])
              {
                v40 = *((unsigned __int8 *)v33 + 39);
                v43 = v120[7];
                if (v40 == v120[7])
                {
                  v40 = *((unsigned __int8 *)v33 + 40);
                  v43 = v120[8];
                  if (v40 == v120[8])
                  {
                    v40 = *((unsigned __int8 *)v33 + 41);
                    v43 = v120[9];
                    if (v40 == v120[9])
                    {
                      v40 = *((unsigned __int8 *)v33 + 42);
                      v43 = v120[10];
                      if (v40 == v120[10])
                      {
                        v40 = *((unsigned __int8 *)v33 + 43);
                        v43 = v120[11];
                        if (v40 == v120[11])
                        {
                          v40 = *((unsigned __int8 *)v33 + 44);
                          v43 = v120[12];
                          if (v40 == v120[12])
                          {
                            v40 = *((unsigned __int8 *)v33 + 45);
                            v43 = v120[13];
                            if (v40 == v120[13])
                            {
                              v40 = *((unsigned __int8 *)v33 + 46);
                              v43 = v120[14];
                              if (v40 == v120[14])
                              {
                                v40 = *((unsigned __int8 *)v33 + 47);
                                v43 = v120[15];
                                if (v40 == v120[15])
                                  goto LABEL_106;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_97:
      if (v40 >= v43)
        goto LABEL_106;
      v34 = (uint64_t *)v33[1];
    }
    while (v34);
    v32 = v33 + 1;
LABEL_100:
    v44 = operator new(0x60uLL);
    v44[2] = *(_OWORD *)v120;
    *((_QWORD *)v44 + 6) = 0;
    *((_QWORD *)v44 + 7) = 0;
    __p[0] = 0;
    __p[1] = 0;
    *((_QWORD *)v44 + 8) = 0;
    *((_QWORD *)v44 + 9) = 0;
    v115 = 0uLL;
    *((_QWORD *)v44 + 10) = 0;
    *((_QWORD *)v44 + 11) = 0;
    v116 = 0uLL;
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 2) = v33;
    *v32 = v44;
    v45 = (uint64_t *)**a5;
    if (v45)
    {
      *a5 = v45;
      v44 = (_OWORD *)*v32;
    }
    sub_2231A9A8C(a5[1], (uint64_t *)v44);
    a5[2] = (uint64_t *)((char *)a5[2] + 1);
    v46 = (std::__shared_weak_count *)v116.i64[1];
    if (!v116.i64[1])
      goto LABEL_106;
    v47 = (unint64_t *)(v116.i64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
      {
LABEL_107:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v49->__on_zero_shared)(v49, v35, v36, v37, v38, v39);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    else
    {
LABEL_106:
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
        goto LABEL_107;
    }
    v59 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v60 = (unint64_t *)((char *)__p[1] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v59->__on_zero_shared)(v59, v35, v36, v37, v38, v39);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v13 = v121;
LABEL_119:
    if (v13)
    {
      v62 = (unint64_t *)&v13->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v10 += 248;
    if (v10 != v104)
      continue;
    break;
  }
LABEL_124:
  if ((a3 & 1) != 0)
  {
    *(_OWORD *)v120 = xmmword_2246597A0;
    sub_223AC3AB8(v105, v120, (uint64_t)(v101 + 170), (uint64_t)(v101 + 158));
  }
  kdebug_trace();
  *(_QWORD *)v120 = operator new(0x20uLL);
  *(_OWORD *)&v120[8] = xmmword_2245C6420;
  strcpy(*(char **)v120, "Volumetric.KeyVol.MappedDepths");
  if (v110 != v111)
  {
    v64 = *(_QWORD *)(v102 + 24);
    if (!v64)
      sub_223198474();
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, void **, _BYTE *, _BYTE *))(*(_QWORD *)v64 + 48))(__p, v64, &v113, &v110, v106, v120);
    v65 = (unsigned __int8 *)v107;
    v66 = v108;
    v67 = (uint64_t *)__p[0];
    v68 = (uint64_t *)__p[1];
    if (v107 != v108 || __p[0] != __p[1])
    {
      while (1)
      {
        v69 = (unsigned __int8 *)*v11;
        v70 = a5 + 1;
        v71 = (uint64_t)(a5 + 1);
        if (!*v11)
          goto LABEL_177;
        while (1)
        {
          v72 = v69[32];
          v73 = *v65;
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[1];
          v72 = v69[33];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[2];
          v72 = v69[34];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[3];
          v72 = v69[35];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[4];
          v72 = v69[36];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[5];
          v72 = v69[37];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[6];
          v72 = v69[38];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[7];
          v72 = v69[39];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[8];
          v72 = v69[40];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[9];
          v72 = v69[41];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[10];
          v72 = v69[42];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[11];
          v72 = v69[43];
          if (v73 != v72)
            goto LABEL_149;
          v73 = v65[12];
          v72 = v69[44];
          if (v73 != v72
            || (v73 = v65[13], v72 = v69[45], v73 != v72)
            || (v73 = v65[14], v72 = v69[46], v73 != v72)
            || (v73 = v65[15], v72 = v69[47], v73 != v72))
          {
LABEL_149:
            if (v73 < v72)
              goto LABEL_132;
          }
          if (((char)sub_22319835C(v69 + 32, v65) & 0x80000000) == 0)
            break;
          v69 += 8;
LABEL_132:
          v69 = *(unsigned __int8 **)v69;
          if (!v69)
            goto LABEL_153;
        }
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 101, (uint64_t)"kf_to_mesh_rendering.count(uuid) == 0", 37, (uint64_t)"Impossible.", 11, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
LABEL_153:
        v74 = *v11;
        v70 = a5 + 1;
        v71 = (uint64_t)(a5 + 1);
        if (!*v11)
          goto LABEL_177;
        v70 = a5 + 1;
        while (1)
        {
          while (1)
          {
            v71 = (uint64_t)v74;
            v75 = (unsigned __int8 *)(v74 + 4);
            v76 = *((unsigned __int8 *)v74 + 32);
            v77 = *v65;
            if (v77 == v76)
            {
              v77 = v65[1];
              v76 = *(unsigned __int8 *)(v71 + 33);
              if (v77 == v76)
              {
                v77 = v65[2];
                v76 = *(unsigned __int8 *)(v71 + 34);
                if (v77 == v76)
                {
                  v77 = v65[3];
                  v76 = *(unsigned __int8 *)(v71 + 35);
                  if (v77 == v76)
                  {
                    v77 = v65[4];
                    v76 = *(unsigned __int8 *)(v71 + 36);
                    if (v77 == v76)
                    {
                      v77 = v65[5];
                      v76 = *(unsigned __int8 *)(v71 + 37);
                      if (v77 == v76)
                      {
                        v77 = v65[6];
                        v76 = *(unsigned __int8 *)(v71 + 38);
                        if (v77 == v76)
                        {
                          v77 = v65[7];
                          v76 = *(unsigned __int8 *)(v71 + 39);
                          if (v77 == v76)
                          {
                            v77 = v65[8];
                            v76 = *(unsigned __int8 *)(v71 + 40);
                            if (v77 == v76)
                            {
                              v77 = v65[9];
                              v76 = *(unsigned __int8 *)(v71 + 41);
                              if (v77 == v76)
                              {
                                v77 = v65[10];
                                v76 = *(unsigned __int8 *)(v71 + 42);
                                if (v77 == v76)
                                {
                                  v77 = v65[11];
                                  v76 = *(unsigned __int8 *)(v71 + 43);
                                  if (v77 == v76)
                                  {
                                    v77 = v65[12];
                                    v76 = *(unsigned __int8 *)(v71 + 44);
                                    if (v77 == v76)
                                    {
                                      v77 = v65[13];
                                      v76 = *(unsigned __int8 *)(v71 + 45);
                                      if (v77 == v76)
                                      {
                                        v77 = v65[14];
                                        v76 = *(unsigned __int8 *)(v71 + 46);
                                        if (v77 == v76)
                                        {
                                          v77 = v65[15];
                                          v76 = *(unsigned __int8 *)(v71 + 47);
                                          if (v77 == v76)
                                            break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v77 >= v76)
              break;
            v74 = *(uint64_t **)v71;
            v70 = (uint64_t **)v71;
            if (!*(_QWORD *)v71)
              goto LABEL_177;
          }
          if (((char)sub_22319835C(v75, v65) & 0x80000000) == 0)
            break;
          v70 = (uint64_t **)(v71 + 8);
          v74 = *(uint64_t **)(v71 + 8);
          if (!v74)
            goto LABEL_177;
        }
        if (!*v70)
        {
LABEL_177:
          v78 = (uint64_t *)operator new(0x60uLL);
          v79 = v78;
          *((_OWORD *)v78 + 2) = *(_OWORD *)v65;
          v78[6] = *v67;
          v80 = v67[1];
          v78[7] = v80;
          if (v80)
          {
            v81 = (unint64_t *)(v80 + 8);
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          v78[8] = v67[2];
          v83 = v67[3];
          v78[9] = v83;
          if (v83)
          {
            v84 = (unint64_t *)(v83 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v78[10] = v67[4];
          v86 = v67[5];
          v78[11] = v86;
          if (v86)
          {
            v87 = (unint64_t *)(v86 + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          *v78 = 0;
          v78[1] = 0;
          v78[2] = v71;
          *v70 = v78;
          v89 = (uint64_t *)**a5;
          if (v89)
          {
            *a5 = v89;
            v79 = *v70;
          }
          sub_2231A9A8C(a5[1], v79);
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
        }
        v65 += 16;
        v67 += 6;
        if (v65 == v66 && v67 == v68)
        {
          v67 = (uint64_t *)__p[0];
          break;
        }
      }
    }
    if (v67)
    {
      v90 = (uint64_t *)__p[1];
      v91 = v67;
      if (__p[1] == v67)
      {
LABEL_212:
        __p[1] = v67;
        operator delete(v91);
        goto LABEL_213;
      }
      while (2)
      {
        v92 = (std::__shared_weak_count *)*(v90 - 1);
        if (!v92)
          goto LABEL_200;
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
          v95 = (std::__shared_weak_count *)*(v90 - 3);
          if (v95)
          {
LABEL_201:
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        else
        {
LABEL_200:
          v95 = (std::__shared_weak_count *)*(v90 - 3);
          if (v95)
            goto LABEL_201;
        }
        v98 = (std::__shared_weak_count *)*(v90 - 5);
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v90 -= 6;
        if (v90 == v67)
        {
          v91 = (uint64_t *)__p[0];
          goto LABEL_212;
        }
        continue;
      }
    }
  }
LABEL_213:
  kdebug_trace();
  kdebug_trace();
  if ((v120[23] & 0x80000000) != 0)
    operator delete(*(void **)v120);
  if (v107)
  {
    v108 = (unsigned __int8 *)v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
}

void sub_223AC39B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void *v56;

  sub_223AB932C(v54, *(_QWORD **)(v54 + 8));
  if (a34)
  {
    operator delete(a34);
    v56 = __p;
    if (!__p)
LABEL_4:
      _Unwind_Resume(a1);
  }
  else
  {
    v56 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v56);
  goto LABEL_4;
}

__n128 sub_223AC3AB8(char ***a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  char **v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  unint64_t v20;
  char *v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char **v37;
  __int128 v38;
  char *v39;

  v8 = *a1;
  v10 = (*a1)[1];
  v9 = (unint64_t)(*a1)[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = *v8;
    v13 = (v10 - *v8) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_22316E078();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 60)
        goto LABEL_42;
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[16 * v13];
    *(_OWORD *)v18 = *a2;
    v11 = v18 + 16;
    if (v10 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
        v18 -= 16;
        v10 -= 16;
      }
      while (v10 != v12);
      v10 = *v8;
    }
    *v8 = v18;
    v8[1] = v11;
    v8[2] = &v17[16 * v16];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_OWORD *)v10 = *a2;
    v11 = v10 + 16;
  }
  v8[1] = v11;
  v19 = (void **)a1[1];
  v21 = (char *)v19[1];
  v20 = (unint64_t)v19[2];
  if ((unint64_t)v21 < v20)
  {
    result = *(__n128 *)a3;
    v23 = *(_OWORD *)(a3 + 16);
    v24 = *(_OWORD *)(a3 + 48);
    *((_OWORD *)v21 + 2) = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v21 + 3) = v24;
    *(__n128 *)v21 = result;
    *((_OWORD *)v21 + 1) = v23;
    v25 = v21 + 64;
    goto LABEL_35;
  }
  v26 = (char *)*v19;
  v27 = (v21 - (_BYTE *)*v19) >> 6;
  v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 58)
    sub_223257BE4();
  v29 = v20 - (_QWORD)v26;
  if (v29 >> 5 > v28)
    v28 = v29 >> 5;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0)
    v30 = 0x3FFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (!v30)
  {
    v31 = 0;
    goto LABEL_30;
  }
  if (v30 >> 58)
LABEL_42:
    sub_223174E94();
  v31 = (char *)operator new(v30 << 6);
LABEL_30:
  v32 = &v31[64 * v27];
  v33 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v32 = *(_OWORD *)a3;
  *((_OWORD *)v32 + 1) = v33;
  result = *(__n128 *)(a3 + 32);
  v34 = *(_OWORD *)(a3 + 48);
  *((__n128 *)v32 + 2) = result;
  *((_OWORD *)v32 + 3) = v34;
  v25 = v32 + 64;
  if (v21 != v26)
  {
    do
    {
      result = *((__n128 *)v21 - 4);
      v35 = *((_OWORD *)v21 - 3);
      v36 = *((_OWORD *)v21 - 1);
      *((_OWORD *)v32 - 2) = *((_OWORD *)v21 - 2);
      *((_OWORD *)v32 - 1) = v36;
      *((__n128 *)v32 - 4) = result;
      *((_OWORD *)v32 - 3) = v35;
      v32 -= 64;
      v21 -= 64;
    }
    while (v21 != v26);
    v21 = (char *)*v19;
  }
  *v19 = v32;
  v19[1] = v25;
  v19[2] = &v31[64 * v30];
  if (v21)
    operator delete(v21);
LABEL_35:
  v19[1] = v25;
  v37 = a1[2];
  if (*((_BYTE *)v37 + 96))
  {
    if ((*((_DWORD *)v37 + 22) != *(_DWORD *)(a4 + 88) || *((_DWORD *)v37 + 23) != *(_DWORD *)(a4 + 92))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 67, (uint64_t)"camera->ImageSize() == camera_in.ImageSize()", 44, (uint64_t)"Camera size should be identical for all keyframes", 49, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  else
  {
    *v37 = (char *)&off_24EC20828;
    v37[1] = (char *)&off_24EC20868;
    v37[2] = *(char **)(a4 + 16);
    v37[3] = *(char **)(a4 + 24);
    *((_OWORD *)v37 + 2) = *(_OWORD *)(a4 + 32);
    result = *(__n128 *)(a4 + 48);
    v38 = *(_OWORD *)(a4 + 64);
    *((_DWORD *)v37 + 20) = *(_DWORD *)(a4 + 80);
    *((__n128 *)v37 + 3) = result;
    *((_OWORD *)v37 + 4) = v38;
    v39 = *(char **)(a4 + 88);
    *v37 = (char *)&off_24EC207B8;
    *((_BYTE *)v37 + 96) = 1;
    v37[11] = v39;
  }
  return result;
}

void sub_223AC3D74(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t **v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 *v17;
  std::string *v18;
  std::string::size_type size;
  uint64_t v21;
  unsigned __int8 *v22;
  __int128 v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_25;
  do
  {
    v5 = sub_223C8F01C(v3[240]);
    LOBYTE(v23) = v5;
    if (v5 == 6)
      goto LABEL_4;
    LODWORD(v6) = v5;
    v7 = *((_QWORD *)v3 + 2);
    if (v7)
    {
      v8 = sub_2231D01EC(v7);
      v24.__r_.__value_.__r.__words[0] = 0x1010101010101;
      v6 = v6;
      if (!v24.__r_.__value_.__s.__data_[v6])
        goto LABEL_10;
    }
    else
    {
      v8 = 0;
      v24.__r_.__value_.__r.__words[0] = 0x1010101010101;
      v6 = v6;
      if (!v24.__r_.__value_.__s.__data_[v6])
      {
LABEL_10:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 55, (uint64_t)"IsValidEvent(event)", 19, (uint64_t)"Not a legitimate event", 22, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
    }
    v24.__r_.__value_.__r.__words[0] = 16843009;
    if (v8 != v24.__r_.__value_.__s.__data_[v6])
    {
      sub_223AC8950((uint64_t)&v24, &v23);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v24;
      else
        v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 120, (uint64_t)&unk_2245A023A, 0, (uint64_t)v18, size, (void (*)(void **))sub_22457406C);
      std::string::~string(&v24);
      abort();
    }
LABEL_4:
    v3 += 248;
  }
  while (v3 != v4);
  v10 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    do
    {
      v12 = sub_223C8F01C(v10[240]);
      v11 = (uint64_t **)(a2 + 136);
      switch(v12)
      {
        case 0:
          goto LABEL_15;
        case 1:
          if (v10[241] == 1)
            v11 = (uint64_t **)(a2 + 328);
          else
            v11 = (uint64_t **)(a2 + 160);
          goto LABEL_15;
        case 2:
          v11 = (uint64_t **)(a2 + 184);
          goto LABEL_15;
        case 3:
          v11 = (uint64_t **)(a2 + 208);
          goto LABEL_15;
        case 4:
          v11 = (uint64_t **)(a2 + 232);
          goto LABEL_15;
        case 5:
          v11 = (uint64_t **)(a2 + 256);
          goto LABEL_15;
        case 6:
          v11 = (uint64_t **)(a2 + 280);
LABEL_15:
          sub_2231A9984(v11, v10, v10);
          break;
        default:
          break;
      }
      v10 += 248;
    }
    while (v10 != v9);
  }
LABEL_25:
  v13 = a1[241];
  v14 = a1[242];
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24.__r_.__value_.__l.__size_;
  while (v13 != v14)
  {
    v23 = *(_OWORD *)v13;
    v15 = sub_223426D4C(&v24, (uint64_t *)&v24.__r_.__value_.__l.__size_, &v22, &v21, (unsigned __int8 *)&v23);
    if (!*(_QWORD *)v15)
    {
      v16 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v16 + 25) = v23;
      v17 = v22;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v17;
      *(_QWORD *)v15 = v16;
      if (*(_QWORD *)v24.__r_.__value_.__l.__data_)
      {
        v24.__r_.__value_.__r.__words[0] = *(_QWORD *)v24.__r_.__value_.__l.__data_;
        v16 = *(char **)v15;
      }
      sub_2231A9A8C((uint64_t *)v24.__r_.__value_.__l.__size_, (uint64_t *)v16);
      ++v24.__r_.__value_.__r.__words[2];
    }
    v13 += 84;
  }
  if ((std::string *)(a2 + 304) != &v24)
    sub_223475EB0(a2 + 304, v24.__r_.__value_.__l.__data_, &v24.__r_.__value_.__l.__size_);
  sub_223198030((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
}

void sub_223AC4090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_223198030((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_223AC40A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223AC40D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_223198030((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t sub_223AC40E8(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v14;
  std::string *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  std::string v20;

  v3 = a2[2];
  if (v3 != a1[2])
    goto LABEL_22;
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = (_QWORD *)*a1;
    while (1)
    {
      v8 = *(_QWORD *)((char *)v5 + 25) == *(_QWORD *)((char *)v7 + 25)
        && *(_QWORD *)((char *)v5 + 33) == *(_QWORD *)((char *)v7 + 33);
      if (!v8)
        break;
      v9 = (_QWORD *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v5 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v10[2];
          v8 = *v5 == (_QWORD)v10;
          v10 = v5;
        }
        while (!v8);
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v8 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v8);
      }
      v7 = v12;
      if (v5 == v4)
        return 1;
    }
LABEL_22:
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = (uint64_t *)*a3;
    v18 = a1[2];
    v19 = v14;
    v17 = v3;
    v15 = &v20;
    sub_223AC426C("GRS:KVA:[", (std::string *)&v19, (std::string *)"] Adaptor keyframes are inconsistent with the CoordSystem/Adaptor: ", &v18, (std::string *)"/", &v17);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v16 = strlen((const char *)v15);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 198, (uint64_t)&unk_2245A023A, 0, (uint64_t)v15, v16, (void (*)(void **))sub_22457406C);
    std::string::~string(&v20);
    abort();
  }
  return 1;
}

void sub_223AC4250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AC426C(char *__s, std::string *a2, std::string *a3, unint64_t *a4, std::string *a5, unint64_t *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  std::string v14;
  std::string *v15;
  std::string *v16;
  _DWORD *v17;
  std::string *v18;
  std::string *v19;
  std::string **v20;

  v13 = 0;
  sub_2231A17D8(v12, __s);
  if (a2->__r_.__value_.__r.__words[0])
  {
    v15 = (std::string *)v12;
    v16 = a2;
    v17 = v12;
    v18 = a2;
    v19 = a2;
    if (v13 != -1)
    {
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      ((void (*)(std::string *, _DWORD *))off_24EC5F790[v13])(&v14, v12);
      goto LABEL_6;
    }
LABEL_18:
    sub_22316DD70();
  }
  v15 = (std::string *)v12;
  v16 = (std::string *)"nullptr";
  v17 = v12;
  v18 = (std::string *)"nullptr";
  v19 = (std::string *)"nullptr";
  if (v13 == -1)
    goto LABEL_18;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC5F730[v13])(&v14, v12);
LABEL_6:
  v15 = (std::string *)v12;
  v16 = a3;
  v17 = v12;
  v18 = a3;
  v19 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC5F7A8[v13])(&v14, v12);
  std::to_string(&v14, *a4);
  v15 = (std::string *)v12;
  v16 = &v14;
  v17 = v12;
  v18 = &v14;
  v19 = &v14;
  if (v13 == -1)
    sub_22316DD70();
  v20 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_24EC5F748[v13])(&v20, v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v15 = (std::string *)v12;
  v16 = a5;
  v17 = v12;
  v18 = a5;
  v19 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC5F7C0[v13])(&v14, v12);
  std::to_string(&v14, *a6);
  v15 = (std::string *)v12;
  v16 = &v14;
  v17 = v12;
  v18 = &v14;
  v19 = &v14;
  if (v13 == -1)
    sub_22316DD70();
  v20 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_24EC5F748[v13])(&v20, v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 == -1)
    sub_22316DD70();
  v15 = &v14;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC5F778[v13])(&v15, v12);
  if (v13 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC5F718[v13])(&v15, v12);
  return result;
}

void sub_223AC4500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_223AC4554(unsigned __int8 **a1, const void **a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  size_t v5;
  unint64_t v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  void *v22;
  void **v23;
  void *v24;
  void **v25;
  void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::mutex *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void **v39;
  void *v40;
  void **v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  void *v46;
  void *v47;
  int v48;
  __n128 *v51;
  void **v52;
  size_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  std::mutex *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void **v63;
  void *v64;
  void **v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  void **v69;
  void *v70;
  void *v71;
  int v72;
  __n128 *v75;
  void **v76;
  size_t v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void **v87;
  void *v88;
  void **v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  void **v93;
  void *v94;
  void *v95;
  int v96;
  __n128 *v99;
  void **v100;
  size_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  std::mutex *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void **v111;
  void *v112;
  void **v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  void **v117;
  void *v118;
  void *v119;
  int v120;
  __n128 *v123;
  void **v124;
  size_t v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  std::mutex *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void **v135;
  void *v136;
  void **v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  void **v141;
  void *v142;
  void *v143;
  int v144;
  __n128 *v147;
  void **v148;
  size_t v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  std::mutex *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void **v159;
  void *v160;
  void **v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  void **v165;
  void *v166;
  void *v167;
  int v168;
  __n128 *v171;
  void **v172;
  size_t v173;
  uint64_t v174;
  __int128 *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  std::mutex *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void **v183;
  void *v184;
  void **v185;
  void *v186;
  uint64_t v187;
  unint64_t v188;
  void **v189;
  void *v190;
  void *v191;
  int v192;
  __n128 *v195;
  void **v196;
  size_t v197;
  uint64_t v198;
  __int128 *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  std::mutex *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  void **v207;
  void *v208;
  void **v209;
  void *v210;
  uint64_t v211;
  unint64_t v212;
  void **v213;
  void *v214;
  void *v215;
  int v216;
  __n128 *v219;
  void **v220;
  size_t v221;
  uint64_t v222;
  __int128 *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  std::mutex *v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  void **v231;
  void *v232;
  void **v233;
  void *v234;
  uint64_t v235;
  unint64_t v236;
  void **v237;
  void *v238;
  void *v239;
  int v240;
  __n128 *v243;
  void **v244;
  size_t v245;
  int v246;
  size_t v247;
  unint64_t v248;
  int *v249;
  uint64_t v250;
  uint64_t v251;
  int *v252;
  const void *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  std::mutex *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  uint64_t v262;
  uint64_t *v263;
  std::__shared_weak_count *size;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *p_shared_owners;
  unint64_t v283;
  __int128 v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  int v303;
  size_t v304;
  unint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  const void *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  std::mutex *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unsigned __int8 v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unsigned __int8 v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  __int128 v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::string v382;
  void *__p[2];
  __int128 v384;
  int v385;
  _BYTE v386[29];
  _BYTE v387[3];
  _BYTE v388[28];
  int v389;
  __int128 v390;
  int64_t v391;
  __int128 v392;
  uint64_t (**v393)();
  __int128 v394;
  std::string key;
  char v396;
  __int128 v397;
  std::string v398;
  _BYTE v399[40];
  uint64_t v400;

  v400 = *MEMORY[0x24BDAC8D0];
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 20;
  if (v5 + 20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = (char *)operator new(v10 + 1);
    *((_QWORD *)&v390 + 1) = v5 + 20;
    v391 = v11 | 0x8000000000000000;
    *(_QWORD *)&v390 = v12;
    v9 = v12 + 20;
    *((_DWORD *)v12 + 4) = 776033867;
    *(_OWORD *)v12 = *(_OWORD *)"Stats.KFCluster.KVA.";
    goto LABEL_11;
  }
  v391 = 776033867;
  HIBYTE(v391) = v5 + 20;
  v9 = (char *)&v391 + 4;
  v390 = *(_OWORD *)"Stats.KFCluster.KVA.";
  if (v5)
  {
LABEL_11:
    if (v4 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v9, v13, v5);
  }
  v9[v5] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v14[2];
    }
    v16 = *(_QWORD *)(v15 + 64);
    v17 = (std::mutex *)(v16 + 32);
    std::mutex::lock((std::mutex *)(v16 + 32));
    v19 = *(_QWORD *)(v16 + 96);
    v18 = *(_QWORD *)(v16 + 104);
    std::mutex::unlock(v17);
    if (v19 != v18)
    {
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v20 = HIBYTE(v391);
      v21 = &v390;
      if (v391 < 0)
      {
        v20 = *((_QWORD *)&v390 + 1);
        v21 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v21;
      *(_QWORD *)&v399[24] = v20;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      v22 = (void *)BYTE7(v384);
      v23 = (void **)__p[0];
      v24 = __p[1];
      sub_2241471F8();
      if ((char)v22 >= 0)
        v25 = __p;
      else
        v25 = v23;
      if ((char)v22 >= 0)
        v26 = v22;
      else
        v26 = v24;
      v27 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v25, v26);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v29 = v28;
      if (SBYTE7(v384) < 0)
      {
        operator delete(__p[0]);
        if (!v29)
          goto LABEL_367;
      }
      else if (!v28)
      {
        goto LABEL_367;
      }
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v30 = HIBYTE(v391);
      v31 = &v390;
      if (v391 < 0)
      {
        v30 = *((_QWORD *)&v390 + 1);
        v31 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v31;
      *(_QWORD *)&v399[24] = v30;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v32 = sub_2241471F8();
        v33 = v32[2];
        if (!v33)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v33 = v32[2];
        }
        v34 = *(_QWORD *)(v33 + 64);
        v35 = (std::mutex *)(v34 + 32);
        std::mutex::lock((std::mutex *)(v34 + 32));
        v37 = *(_QWORD *)(v34 + 96);
        v36 = *(_QWORD *)(v34 + 104);
        std::mutex::unlock(v35);
        if (v37 != v36)
        {
          v38 = (void *)BYTE7(v384);
          v39 = (void **)__p[0];
          v40 = __p[1];
          sub_2241471F8();
          v41 = (char)v38 >= 0 ? __p : v39;
          v42 = (char)v38 >= 0 ? v38 : v40;
          v43 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v41, v42);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 152);
            sub_223AC7A18(v43, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v44 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v44 = (unint64_t)__p[1];
      if (v44 >= 0x11)
      {
        v45 = __p;
        if (SBYTE7(v384) < 0)
          v45 = (void **)__p[0];
        v46 = *v45;
        v47 = v45[1];
        v48 = *((unsigned __int8 *)v45 + 16);
        if (v46 == (void *)0x6365722E64337663 && v47 == (void *)0x73746174532E6E6FLL && v48 == 46)
        {
          v51 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v52 = __p;
          else
            v52 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v53 = BYTE7(v384);
          else
            v53 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 152);
          sub_22318760C((uint64_t *)v51, v52, v53, (uint64_t *)&key, (uint64_t)"Newly created keyframes", 23);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v54 = HIBYTE(v391);
      v55 = &v390;
      if (v391 < 0)
      {
        v54 = *((_QWORD *)&v390 + 1);
        v55 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v55;
      *(_QWORD *)&v399[24] = v54;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v56 = sub_2241471F8();
        v57 = v56[2];
        if (!v57)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v57 = v56[2];
        }
        v58 = *(_QWORD *)(v57 + 64);
        v59 = (std::mutex *)(v58 + 32);
        std::mutex::lock((std::mutex *)(v58 + 32));
        v61 = *(_QWORD *)(v58 + 96);
        v60 = *(_QWORD *)(v58 + 104);
        std::mutex::unlock(v59);
        if (v61 != v60)
        {
          v62 = (void *)BYTE7(v384);
          v63 = (void **)__p[0];
          v64 = __p[1];
          sub_2241471F8();
          v65 = (char)v62 >= 0 ? __p : v63;
          v66 = (char)v62 >= 0 ? v62 : v64;
          v67 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v65, v66);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 176);
            sub_223AC7AFC(v67, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v68 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v68 = (unint64_t)__p[1];
      if (v68 >= 0x11)
      {
        v69 = __p;
        if (SBYTE7(v384) < 0)
          v69 = (void **)__p[0];
        v70 = *v69;
        v71 = v69[1];
        v72 = *((unsigned __int8 *)v69 + 16);
        if (v70 == (void *)0x6365722E64337663 && v71 == (void *)0x73746174532E6E6FLL && v72 == 46)
        {
          v75 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v76 = __p;
          else
            v76 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v77 = BYTE7(v384);
          else
            v77 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 176);
          sub_22318760C((uint64_t *)v75, v76, v77, (uint64_t *)&key, (uint64_t)"Content update keyframes", 24);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v78 = HIBYTE(v391);
      v79 = &v390;
      if (v391 < 0)
      {
        v78 = *((_QWORD *)&v390 + 1);
        v79 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v79;
      *(_QWORD *)&v399[24] = v78;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v80 = sub_2241471F8();
        v81 = v80[2];
        if (!v81)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v81 = v80[2];
        }
        v82 = *(_QWORD *)(v81 + 64);
        v83 = (std::mutex *)(v82 + 32);
        std::mutex::lock((std::mutex *)(v82 + 32));
        v85 = *(_QWORD *)(v82 + 96);
        v84 = *(_QWORD *)(v82 + 104);
        std::mutex::unlock(v83);
        if (v85 != v84)
        {
          v86 = (void *)BYTE7(v384);
          v87 = (void **)__p[0];
          v88 = __p[1];
          sub_2241471F8();
          v89 = (char)v86 >= 0 ? __p : v87;
          v90 = (char)v86 >= 0 ? v86 : v88;
          v91 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v89, v90);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v91 + 24))(v91))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 344);
            sub_223AC7BE0(v91, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v92 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v92 = (unint64_t)__p[1];
      if (v92 >= 0x11)
      {
        v93 = __p;
        if (SBYTE7(v384) < 0)
          v93 = (void **)__p[0];
        v94 = *v93;
        v95 = v93[1];
        v96 = *((unsigned __int8 *)v93 + 16);
        if (v94 == (void *)0x6365722E64337663 && v95 == (void *)0x73746174532E6E6FLL && v96 == 46)
        {
          v99 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v100 = __p;
          else
            v100 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v101 = BYTE7(v384);
          else
            v101 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 344);
          sub_22318760C((uint64_t *)v99, v100, v101, (uint64_t *)&key, (uint64_t)"Insignificant content update keyframes", 38);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v102 = HIBYTE(v391);
      v103 = &v390;
      if (v391 < 0)
      {
        v102 = *((_QWORD *)&v390 + 1);
        v103 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v103;
      *(_QWORD *)&v399[24] = v102;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v104 = sub_2241471F8();
        v105 = v104[2];
        if (!v105)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v105 = v104[2];
        }
        v106 = *(_QWORD *)(v105 + 64);
        v107 = (std::mutex *)(v106 + 32);
        std::mutex::lock((std::mutex *)(v106 + 32));
        v109 = *(_QWORD *)(v106 + 96);
        v108 = *(_QWORD *)(v106 + 104);
        std::mutex::unlock(v107);
        if (v109 != v108)
        {
          v110 = (void *)BYTE7(v384);
          v111 = (void **)__p[0];
          v112 = __p[1];
          sub_2241471F8();
          v113 = (char)v110 >= 0 ? __p : v111;
          v114 = (char)v110 >= 0 ? v110 : v112;
          v115 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v113, v114);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 200);
            sub_22346BDB0((double *)&qword_255788F20, v115, (uint64_t *)&key, "Persistence keyframes");
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v116 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v116 = (unint64_t)__p[1];
      if (v116 >= 0x11)
      {
        v117 = __p;
        if (SBYTE7(v384) < 0)
          v117 = (void **)__p[0];
        v118 = *v117;
        v119 = v117[1];
        v120 = *((unsigned __int8 *)v117 + 16);
        if (v118 == (void *)0x6365722E64337663 && v119 == (void *)0x73746174532E6E6FLL && v120 == 46)
        {
          v123 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v124 = __p;
          else
            v124 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v125 = BYTE7(v384);
          else
            v125 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 200);
          sub_22318760C((uint64_t *)v123, v124, v125, (uint64_t *)&key, (uint64_t)"Persistence keyframes", 21);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v126 = HIBYTE(v391);
      v127 = &v390;
      if (v391 < 0)
      {
        v126 = *((_QWORD *)&v390 + 1);
        v127 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v127;
      *(_QWORD *)&v399[24] = v126;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v128 = sub_2241471F8();
        v129 = v128[2];
        if (!v129)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v129 = v128[2];
        }
        v130 = *(_QWORD *)(v129 + 64);
        v131 = (std::mutex *)(v130 + 32);
        std::mutex::lock((std::mutex *)(v130 + 32));
        v133 = *(_QWORD *)(v130 + 96);
        v132 = *(_QWORD *)(v130 + 104);
        std::mutex::unlock(v131);
        if (v133 != v132)
        {
          v134 = (void *)BYTE7(v384);
          v135 = (void **)__p[0];
          v136 = __p[1];
          sub_2241471F8();
          v137 = (char)v134 >= 0 ? __p : v135;
          v138 = (char)v134 >= 0 ? v134 : v136;
          v139 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v137, v138);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 224);
            sub_223AC7CC4(v139, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v140 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v140 = (unint64_t)__p[1];
      if (v140 >= 0x11)
      {
        v141 = __p;
        if (SBYTE7(v384) < 0)
          v141 = (void **)__p[0];
        v142 = *v141;
        v143 = v141[1];
        v144 = *((unsigned __int8 *)v141 + 16);
        if (v142 == (void *)0x6365722E64337663 && v143 == (void *)0x73746174532E6E6FLL && v144 == 46)
        {
          v147 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v148 = __p;
          else
            v148 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v149 = BYTE7(v384);
          else
            v149 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 224);
          sub_22318760C((uint64_t *)v147, v148, v149, (uint64_t *)&key, (uint64_t)"Loop closure keyframes", 22);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v150 = HIBYTE(v391);
      v151 = &v390;
      if (v391 < 0)
      {
        v150 = *((_QWORD *)&v390 + 1);
        v151 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v151;
      *(_QWORD *)&v399[24] = v150;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v152 = sub_2241471F8();
        v153 = v152[2];
        if (!v153)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v153 = v152[2];
        }
        v154 = *(_QWORD *)(v153 + 64);
        v155 = (std::mutex *)(v154 + 32);
        std::mutex::lock((std::mutex *)(v154 + 32));
        v157 = *(_QWORD *)(v154 + 96);
        v156 = *(_QWORD *)(v154 + 104);
        std::mutex::unlock(v155);
        if (v157 != v156)
        {
          v158 = (void *)BYTE7(v384);
          v159 = (void **)__p[0];
          v160 = __p[1];
          sub_2241471F8();
          v161 = (char)v158 >= 0 ? __p : v159;
          v162 = (char)v158 >= 0 ? v158 : v160;
          v163 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v161, v162);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 24))(v163))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 248);
            sub_223AC7D94(v163, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v164 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v164 = (unint64_t)__p[1];
      if (v164 >= 0x11)
      {
        v165 = __p;
        if (SBYTE7(v384) < 0)
          v165 = (void **)__p[0];
        v166 = *v165;
        v167 = v165[1];
        v168 = *((unsigned __int8 *)v165 + 16);
        if (v166 == (void *)0x6365722E64337663 && v167 == (void *)0x73746174532E6E6FLL && v168 == 46)
        {
          v171 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v172 = __p;
          else
            v172 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v173 = BYTE7(v384);
          else
            v173 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 248);
          sub_22318760C((uint64_t *)v171, v172, v173, (uint64_t *)&key, (uint64_t)"Anchor external keyframes", 25);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v174 = HIBYTE(v391);
      v175 = &v390;
      if (v391 < 0)
      {
        v174 = *((_QWORD *)&v390 + 1);
        v175 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v175;
      *(_QWORD *)&v399[24] = v174;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v176 = sub_2241471F8();
        v177 = v176[2];
        if (!v177)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v177 = v176[2];
        }
        v178 = *(_QWORD *)(v177 + 64);
        v179 = (std::mutex *)(v178 + 32);
        std::mutex::lock((std::mutex *)(v178 + 32));
        v181 = *(_QWORD *)(v178 + 96);
        v180 = *(_QWORD *)(v178 + 104);
        std::mutex::unlock(v179);
        if (v181 != v180)
        {
          v182 = (void *)BYTE7(v384);
          v183 = (void **)__p[0];
          v184 = __p[1];
          sub_2241471F8();
          v185 = (char)v182 >= 0 ? __p : v183;
          v186 = (char)v182 >= 0 ? v182 : v184;
          v187 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v185, v186);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 272);
            sub_22346BEEC((double *)&qword_255788F20, v187, (uint64_t *)&key, "Deleted keyframes");
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v188 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v188 = (unint64_t)__p[1];
      if (v188 >= 0x11)
      {
        v189 = __p;
        if (SBYTE7(v384) < 0)
          v189 = (void **)__p[0];
        v190 = *v189;
        v191 = v189[1];
        v192 = *((unsigned __int8 *)v189 + 16);
        if (v190 == (void *)0x6365722E64337663 && v191 == (void *)0x73746174532E6E6FLL && v192 == 46)
        {
          v195 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v196 = __p;
          else
            v196 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v197 = BYTE7(v384);
          else
            v197 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 272);
          sub_22318760C((uint64_t *)v195, v196, v197, (uint64_t *)&key, (uint64_t)"Deleted keyframes", 17);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v198 = HIBYTE(v391);
      v199 = &v390;
      if (v391 < 0)
      {
        v198 = *((_QWORD *)&v390 + 1);
        v199 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v199;
      *(_QWORD *)&v399[24] = v198;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v200 = sub_2241471F8();
        v201 = v200[2];
        if (!v201)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v201 = v200[2];
        }
        v202 = *(_QWORD *)(v201 + 64);
        v203 = (std::mutex *)(v202 + 32);
        std::mutex::lock((std::mutex *)(v202 + 32));
        v205 = *(_QWORD *)(v202 + 96);
        v204 = *(_QWORD *)(v202 + 104);
        std::mutex::unlock(v203);
        if (v205 != v204)
        {
          v206 = (void *)BYTE7(v384);
          v207 = (void **)__p[0];
          v208 = __p[1];
          sub_2241471F8();
          v209 = (char)v206 >= 0 ? __p : v207;
          v210 = (char)v206 >= 0 ? v206 : v208;
          v211 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v209, v210);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v211 + 24))(v211))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 320);
            sub_223AC7E78(v211, (uint64_t *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v212 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v212 = (unint64_t)__p[1];
      if (v212 >= 0x11)
      {
        v213 = __p;
        if (SBYTE7(v384) < 0)
          v213 = (void **)__p[0];
        v214 = *v213;
        v215 = v213[1];
        v216 = *((unsigned __int8 *)v213 + 16);
        if (v214 == (void *)0x6365722E64337663 && v215 == (void *)0x73746174532E6E6FLL && v216 == 46)
        {
          v219 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v220 = __p;
          else
            v220 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v221 = BYTE7(v384);
          else
            v221 = (size_t)__p[1];
          key.__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 320);
          sub_22318760C((uint64_t *)v219, v220, v221, (uint64_t *)&key, (uint64_t)"Unreceived remesh keyframes", 27);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
      {
        operator delete(__p[0]);
        if (!*(_BYTE *)(a4 + 496))
          goto LABEL_367;
      }
      else if (!*(_BYTE *)(a4 + 496))
      {
        goto LABEL_367;
      }
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v222 = HIBYTE(v391);
      v223 = &v390;
      if (v391 < 0)
      {
        v222 = *((_QWORD *)&v390 + 1);
        v223 = (__int128 *)v390;
      }
      *(_QWORD *)&v399[16] = v223;
      *(_QWORD *)&v399[24] = v222;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v224 = sub_2241471F8();
        v225 = v224[2];
        if (!v225)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v225 = v224[2];
        }
        v226 = *(_QWORD *)(v225 + 64);
        v227 = (std::mutex *)(v226 + 32);
        std::mutex::lock((std::mutex *)(v226 + 32));
        v229 = *(_QWORD *)(v226 + 96);
        v228 = *(_QWORD *)(v226 + 104);
        std::mutex::unlock(v227);
        if (v229 != v228)
        {
          v230 = (void *)BYTE7(v384);
          v231 = (void **)__p[0];
          v232 = __p[1];
          sub_2241471F8();
          v233 = (char)v230 >= 0 ? __p : v231;
          v234 = (char)v230 >= 0 ? v230 : v232;
          v235 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v233, v234);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v235 + 24))(v235))
          {
            memset(v399, 0, 32);
            *(_DWORD *)&v399[32] = 728325608;
            kdebug_trace();
            LODWORD(key.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(a4 + 368);
            sub_223AC7F5C(v235, (int *)&key);
            kdebug_trace();
          }
        }
      }
      memset(v399, 0, 32);
      *(_DWORD *)&v399[32] = 728325624;
      kdebug_trace();
      v236 = BYTE7(v384);
      if (SBYTE7(v384) < 0)
        v236 = (unint64_t)__p[1];
      if (v236 >= 0x11)
      {
        v237 = __p;
        if (SBYTE7(v384) < 0)
          v237 = (void **)__p[0];
        v238 = *v237;
        v239 = v237[1];
        v240 = *((unsigned __int8 *)v237 + 16);
        if (v238 == (void *)0x6365722E64337663 && v239 == (void *)0x73746174532E6E6FLL && v240 == 46)
        {
          v243 = sub_223187510();
          if ((SBYTE7(v384) & 0x80u) == 0)
            v244 = __p;
          else
            v244 = (void **)__p[0];
          if ((SBYTE7(v384) & 0x80u) == 0)
            v245 = BYTE7(v384);
          else
            v245 = (size_t)__p[1];
          LODWORD(key.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(a4 + 368);
          sub_22361F5C4(v243, v244, v245, (int *)&key, (uint64_t)"Integrate raw frame", 19);
        }
      }
      kdebug_trace();
      if (SBYTE7(v384) < 0)
        operator delete(__p[0]);
    }
  }
LABEL_367:
  v246 = *((char *)a2 + 23);
  if (v246 >= 0)
    v247 = *((unsigned __int8 *)a2 + 23);
  else
    v247 = (size_t)a2[1];
  v248 = v247 + 28;
  if (v247 + 28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v248 <= 0x16)
  {
    qmemcpy(v388, "Stats.KFCluster.KVA.tracked.", sizeof(v388));
    v249 = &v389;
LABEL_376:
    if (v246 >= 0)
      v253 = a2;
    else
      v253 = *a2;
    memmove(v249, v253, v247);
    goto LABEL_380;
  }
  v250 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v248 | 7) != 0x17)
    v250 = v248 | 7;
  v251 = v250 + 1;
  v252 = (int *)operator new(v250 + 1);
  *(_QWORD *)&v388[8] = v247 + 28;
  *(_QWORD *)&v388[16] = v251 | 0x8000000000000000;
  *(_QWORD *)v388 = v252;
  qmemcpy(v252, "Stats.KFCluster.KVA.tracked.", 28);
  v249 = v252 + 7;
  if (v247)
    goto LABEL_376;
LABEL_380:
  *((_BYTE *)v249 + v247) = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v254 = sub_2241471F8();
    v255 = v254[2];
    if (!v255)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v255 = v254[2];
    }
    v256 = *(_QWORD *)(v255 + 64);
    v257 = (std::mutex *)(v256 + 32);
    std::mutex::lock((std::mutex *)(v256 + 32));
    v259 = *(_QWORD *)(v256 + 96);
    v258 = *(_QWORD *)(v256 + 104);
    std::mutex::unlock(v257);
    if (v259 != v258)
    {
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v260 = v388[23];
      v261 = v388;
      if (v388[23] < 0)
      {
        v261 = *(_BYTE **)v388;
        v260 = *(_QWORD *)&v388[8];
      }
      *(_QWORD *)&v399[16] = v261;
      *(_QWORD *)&v399[24] = v260;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, (std::string *)v386);
      sub_2241471F8();
      v262 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v262 + 24))(v262))
        goto LABEL_464;
      *(_OWORD *)__p = 0u;
      v384 = 0u;
      v385 = 728325616;
      kdebug_trace();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v262 + 24))(v262)
        || (*(_QWORD *)&v392 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0),
            *((_QWORD *)&v392 + 1) = 2,
            v263 = sub_2241471F8(),
            !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v262 + 24))(v262)))
      {
LABEL_463:
        kdebug_trace();
LABEL_464:
        if ((v386[23] & 0x80000000) != 0)
          operator delete(*(void **)v386);
        goto LABEL_466;
      }
      *(_QWORD *)&v399[8] = 0;
      *(_QWORD *)&v399[16] = 0;
      *(_QWORD *)v399 = &v399[8];
      sub_2245314F4(v399, &key);
      v397 = *(_OWORD *)&key.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)v399, *(char **)&v399[8]);
      sub_2240043CC(v399);
      *((_BYTE *)&key.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&key, "system time");
      sub_224527BAC((uint64_t)&key, (CFStringRef *)&v398);
      sub_2231AEDB8((uint64_t)&v397, v398.__r_.__value_.__l.__data_, (uint64_t)v399);
      size = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
      if (v398.__r_.__value_.__l.__size_)
      {
        v265 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
        operator delete(key.__r_.__value_.__l.__data_);
      *((_BYTE *)&key.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&key, "tracked");
      sub_223C1DBA4(a3, &v398);
      sub_224527BAC((uint64_t)&key, (CFStringRef *)&v382);
      sub_2231AEDB8((uint64_t)&v397, v382.__r_.__value_.__l.__data_, (uint64_t)&v398);
      v267 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
      if (v382.__r_.__value_.__l.__size_)
      {
        v268 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
      if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v398.__r_.__value_.__l.__data_);
      if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
        operator delete(key.__r_.__value_.__l.__data_);
      *((_BYTE *)&key.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&key, "#tracked");
      v382.__r_.__value_.__r.__words[0] = a3[2];
      sub_224527BAC((uint64_t)&key, (CFStringRef *)&v398);
      sub_223AC95C8((uint64_t)&v397, v398.__r_.__value_.__l.__data_, (uint64_t *)&v382);
      v270 = (std::__shared_weak_count *)v398.__r_.__value_.__l.__size_;
      if (v398.__r_.__value_.__l.__size_)
      {
        v271 = (unint64_t *)(v398.__r_.__value_.__l.__size_ + 8);
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
        }
      }
      if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
        operator delete(key.__r_.__value_.__l.__data_);
      *((_BYTE *)&key.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&key, "updated_kfs");
      sub_223C1DAA8(a1, &v398);
      sub_224527BAC((uint64_t)&key, (CFStringRef *)&v382);
      sub_2231AEDB8((uint64_t)&v397, v382.__r_.__value_.__l.__data_, (uint64_t)&v398);
      v273 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
      if (v382.__r_.__value_.__l.__size_)
      {
        v274 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v398.__r_.__value_.__l.__data_);
        if ((SHIBYTE(key.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_420:
          if ((v399[23] & 0x80000000) == 0)
            goto LABEL_421;
LABEL_635:
          operator delete(*(void **)v399);
LABEL_421:
          key.__r_.__value_.__s.__data_[0] = 0;
          v396 = 0;
          sub_2231AD9F0((uint64_t)&v397, (__int128 *)&key, &v392, &v393);
          if (v396 && SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
            operator delete(key.__r_.__value_.__l.__data_);
          v276 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
          if (*((_QWORD *)&v397 + 1))
          {
            v277 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
            do
              v278 = __ldaxr(v277);
            while (__stlxr(v278 - 1, v277));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          v279 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v262 + 56))(v262);
          v280 = *v279;
          v281 = (std::__shared_weak_count *)v279[1];
          if (v281)
          {
            p_shared_owners = (unint64_t *)&v281->__shared_owners_;
            do
              v283 = __ldxr(p_shared_owners);
            while (__stxr(v283 + 1, p_shared_owners));
          }
          v284 = v394;
          v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
          *(_OWORD *)&v398.__r_.__value_.__r.__words[1] = v394;
          *(_QWORD *)v399 = v280;
          v394 = 0uLL;
          *(_QWORD *)&v399[8] = v281;
          if (v281)
          {
            v285 = (unint64_t *)&v281->__shared_owners_;
            do
              v286 = __ldxr(v285);
            while (__stxr(v286 + 1, v285));
          }
          *(_QWORD *)&v399[16] = &off_24EC6A3B8;
          *(_OWORD *)&v399[24] = v284;
          if (*((_QWORD *)&v284 + 1))
          {
            v287 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
            do
              v288 = __ldxr(v287);
            while (__stxr(v288 + 1, v287));
          }
          (*(void (**)(uint64_t *, _BYTE *))(*v263 + 16))(v263, v399);
          v289 = *(std::__shared_weak_count **)&v399[32];
          if (*(_QWORD *)&v399[32])
          {
            v290 = (unint64_t *)(*(_QWORD *)&v399[32] + 8);
            do
              v291 = __ldaxr(v290);
            while (__stlxr(v291 - 1, v290));
            if (!v291)
            {
              ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
              std::__shared_weak_count::__release_weak(v289);
            }
          }
          v292 = *(std::__shared_weak_count **)&v399[8];
          if (*(_QWORD *)&v399[8])
          {
            v293 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
            do
              v294 = __ldaxr(v293);
            while (__stlxr(v294 - 1, v293));
            if (!v294)
            {
              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
              std::__shared_weak_count::__release_weak(v292);
            }
          }
          v295 = (std::__shared_weak_count *)v398.__r_.__value_.__r.__words[2];
          if (v398.__r_.__value_.__r.__words[2])
          {
            v296 = (unint64_t *)(v398.__r_.__value_.__r.__words[2] + 8);
            do
              v297 = __ldaxr(v296);
            while (__stlxr(v297 - 1, v296));
            if (!v297)
            {
              ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
              std::__shared_weak_count::__release_weak(v295);
            }
          }
          if (v281)
          {
            v298 = (unint64_t *)&v281->__shared_owners_;
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
              std::__shared_weak_count::__release_weak(v281);
            }
          }
          v300 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
          if (*((_QWORD *)&v394 + 1))
          {
            v301 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
          }
          goto LABEL_463;
        }
      }
      else if ((SHIBYTE(key.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_420;
      }
      operator delete(key.__r_.__value_.__l.__data_);
      if ((v399[23] & 0x80000000) == 0)
        goto LABEL_421;
      goto LABEL_635;
    }
  }
LABEL_466:
  v303 = *((char *)a2 + 23);
  if (v303 >= 0)
    v304 = *((unsigned __int8 *)a2 + 23);
  else
    v304 = (size_t)a2[1];
  v305 = v304 + 29;
  if (v304 + 29 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v305 <= 0x16)
  {
    qmemcpy(v386, "Stats.KFCluster.KVA.metadata.", sizeof(v386));
    v306 = v387;
LABEL_475:
    if (v303 >= 0)
      v310 = a2;
    else
      v310 = *a2;
    memmove(v306, v310, v304);
    goto LABEL_479;
  }
  v307 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v305 | 7) != 0x17)
    v307 = v305 | 7;
  v308 = v307 + 1;
  v309 = (char *)operator new(v307 + 1);
  *(_QWORD *)&v386[8] = v304 + 29;
  *(_QWORD *)&v386[16] = v308 | 0x8000000000000000;
  *(_QWORD *)v386 = v309;
  qmemcpy(v309, "Stats.KFCluster.KVA.metadata.", 29);
  v306 = v309 + 29;
  if (v304)
    goto LABEL_475;
LABEL_479:
  v306[v304] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v311 = sub_2241471F8();
    v312 = v311[2];
    if (!v312)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v312 = v311[2];
    }
    v313 = *(_QWORD *)(v312 + 64);
    v314 = (std::mutex *)(v313 + 32);
    std::mutex::lock((std::mutex *)(v313 + 32));
    v316 = *(_QWORD *)(v313 + 96);
    v315 = *(_QWORD *)(v313 + 104);
    std::mutex::unlock(v314);
    if (v316 != v315)
    {
      *(_QWORD *)v399 = "cv3d.recon.";
      *(_QWORD *)&v399[8] = 11;
      v317 = v386[23];
      v318 = v386;
      if (v386[23] < 0)
      {
        v318 = *(_BYTE **)v386;
        v317 = *(_QWORD *)&v386[8];
      }
      *(_QWORD *)&v399[16] = v318;
      *(_QWORD *)&v399[24] = v317;
      sub_2231A9820((uint64_t)v399, (uint64_t)&v399[32], 0, 0, &v382);
      sub_2241471F8();
      v319 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v319 + 24))(v319))
      {
        *(_OWORD *)__p = 0u;
        v384 = 0u;
        v385 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v319 + 24))(v319))
        {
          *(_QWORD *)&v392 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v392 + 1) = 2;
          v320 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v319 + 24))(v319))
          {
            *(_QWORD *)&v399[8] = 0;
            *(_QWORD *)&v399[16] = 0;
            *(_QWORD *)v399 = &v399[8];
            sub_2245314F4(v399, &key);
            v397 = *(_OWORD *)&key.__r_.__value_.__l.__data_;
            sub_22323DF84((uint64_t)v399, *(char **)&v399[8]);
            v399[23] = 3;
            strcpy(v399, "new");
            sub_223C1DE40((_QWORD *)(a4 + 136), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v321 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v322 = (unint64_t *)(v394 + 8);
              do
                v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                std::__shared_weak_count::__release_weak(v321);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 7;
            strcpy(v399, "content");
            sub_223C1DE40((_QWORD *)(a4 + 160), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v324 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v325 = (unint64_t *)(v394 + 8);
              do
                v326 = __ldaxr(v325);
              while (__stlxr(v326 - 1, v325));
              if (!v326)
              {
                ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                std::__shared_weak_count::__release_weak(v324);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 11;
            strcpy(v399, "persistence");
            sub_223C1DE40((_QWORD *)(a4 + 184), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v327 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v328 = (unint64_t *)(v394 + 8);
              do
                v329 = __ldaxr(v328);
              while (__stlxr(v329 - 1, v328));
              if (!v329)
              {
                ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                std::__shared_weak_count::__release_weak(v327);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 12;
            strcpy(v399, "loop closure");
            sub_223C1DE40((_QWORD *)(a4 + 208), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v330 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v331 = (unint64_t *)(v394 + 8);
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                std::__shared_weak_count::__release_weak(v330);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 7;
            strcpy(v399, "deleted");
            sub_223C1DE40((_QWORD *)(a4 + 256), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v333 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v334 = (unint64_t *)(v394 + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 8;
            strcpy(v399, "external");
            sub_223C1DE40((_QWORD *)(a4 + 232), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v336 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v337 = (unint64_t *)(v394 + 8);
              do
                v338 = __ldaxr(v337);
              while (__stlxr(v338 - 1, v337));
              if (!v338)
              {
                ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                std::__shared_weak_count::__release_weak(v336);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 21;
            strcpy(v399, "insignificant content");
            sub_223C1DE40((_QWORD *)(a4 + 328), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v339 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v340 = (unint64_t *)(v394 + 8);
              do
                v341 = __ldaxr(v340);
              while (__stlxr(v341 - 1, v340));
              if (!v341)
              {
                ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                std::__shared_weak_count::__release_weak(v339);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 7;
            strcpy(v399, "pending");
            sub_223C1DE40((_QWORD *)(a4 + 304), &key);
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&v393);
            sub_2231AEDB8((uint64_t)&v397, v393, (uint64_t)&key);
            v342 = (std::__shared_weak_count *)v394;
            if ((_QWORD)v394)
            {
              v343 = (unint64_t *)(v394 + 8);
              do
                v344 = __ldaxr(v343);
              while (__stlxr(v344 - 1, v343));
              if (!v344)
              {
                ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                std::__shared_weak_count::__release_weak(v342);
              }
            }
            if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 20;
            strcpy(v399, "should_fuse_rawframe");
            if (*(_BYTE *)(a4 + 496))
              v345 = *(_BYTE *)(a4 + 368);
            else
              v345 = 0;
            LODWORD(v393) = v345;
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&key);
            sub_223AC9740((uint64_t)&v397, key.__r_.__value_.__l.__data_, (int *)&v393);
            v346 = (std::__shared_weak_count *)key.__r_.__value_.__l.__size_;
            if (key.__r_.__value_.__l.__size_)
            {
              v347 = (unint64_t *)(key.__r_.__value_.__l.__size_ + 8);
              do
                v348 = __ldaxr(v347);
              while (__stlxr(v348 - 1, v347));
              if (!v348)
              {
                ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                std::__shared_weak_count::__release_weak(v346);
              }
            }
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            v399[23] = 19;
            strcpy(v399, "should_fuse_content");
            if (*(_BYTE *)(a4 + 496))
              v349 = *(_BYTE *)(a4 + 369);
            else
              v349 = 0;
            LODWORD(v393) = v349;
            sub_224527BAC((uint64_t)v399, (CFStringRef *)&key);
            sub_223AC9740((uint64_t)&v397, key.__r_.__value_.__l.__data_, (int *)&v393);
            v350 = (std::__shared_weak_count *)key.__r_.__value_.__l.__size_;
            if (key.__r_.__value_.__l.__size_)
            {
              v351 = (unint64_t *)(key.__r_.__value_.__l.__size_ + 8);
              do
                v352 = __ldaxr(v351);
              while (__stlxr(v352 - 1, v351));
              if (!v352)
              {
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v350);
              }
            }
            if ((v399[23] & 0x80000000) != 0)
              operator delete(*(void **)v399);
            key.__r_.__value_.__s.__data_[0] = 0;
            v396 = 0;
            sub_2231AD9F0((uint64_t)&v397, (__int128 *)&key, &v392, &v398);
            if (v396 && SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
              operator delete(key.__r_.__value_.__l.__data_);
            v353 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
            if (*((_QWORD *)&v397 + 1))
            {
              v354 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
              do
                v355 = __ldaxr(v354);
              while (__stlxr(v355 - 1, v354));
              if (!v355)
              {
                ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                std::__shared_weak_count::__release_weak(v353);
              }
            }
            v356 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v319 + 56))(v319);
            v357 = *v356;
            v358 = (std::__shared_weak_count *)v356[1];
            if (v358)
            {
              v359 = (unint64_t *)&v358->__shared_owners_;
              do
                v360 = __ldxr(v359);
              while (__stxr(v360 + 1, v359));
            }
            v361 = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
            v393 = &off_24EC6A3B8;
            v394 = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v398.__r_.__value_.__r.__words[1] = 0uLL;
            *(_QWORD *)v399 = v357;
            *(_QWORD *)&v399[8] = v358;
            if (v358)
            {
              v362 = (unint64_t *)&v358->__shared_owners_;
              do
                v363 = __ldxr(v362);
              while (__stxr(v363 + 1, v362));
            }
            *(_QWORD *)&v399[16] = &off_24EC6A3B8;
            *(_OWORD *)&v399[24] = v361;
            if (*((_QWORD *)&v361 + 1))
            {
              v364 = (unint64_t *)(*((_QWORD *)&v361 + 1) + 8);
              do
                v365 = __ldxr(v364);
              while (__stxr(v365 + 1, v364));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v320 + 16))(v320, v399);
            v366 = *(std::__shared_weak_count **)&v399[32];
            if (*(_QWORD *)&v399[32])
            {
              v367 = (unint64_t *)(*(_QWORD *)&v399[32] + 8);
              do
                v368 = __ldaxr(v367);
              while (__stlxr(v368 - 1, v367));
              if (!v368)
              {
                ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                std::__shared_weak_count::__release_weak(v366);
              }
            }
            v369 = *(std::__shared_weak_count **)&v399[8];
            if (*(_QWORD *)&v399[8])
            {
              v370 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
              do
                v371 = __ldaxr(v370);
              while (__stlxr(v371 - 1, v370));
              if (!v371)
              {
                ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                std::__shared_weak_count::__release_weak(v369);
              }
            }
            v372 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
            if (*((_QWORD *)&v394 + 1))
            {
              v373 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            if (v358)
            {
              v375 = (unint64_t *)&v358->__shared_owners_;
              do
                v376 = __ldaxr(v375);
              while (__stlxr(v376 - 1, v375));
              if (!v376)
              {
                ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                std::__shared_weak_count::__release_weak(v358);
              }
            }
            v377 = (std::__shared_weak_count *)v398.__r_.__value_.__r.__words[2];
            if (v398.__r_.__value_.__r.__words[2])
            {
              v378 = (unint64_t *)(v398.__r_.__value_.__r.__words[2] + 8);
              do
                v379 = __ldaxr(v378);
              while (__stlxr(v379 - 1, v378));
              if (!v379)
              {
                ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                std::__shared_weak_count::__release_weak(v377);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v382.__r_.__value_.__l.__data_);
    }
  }
  sub_223AB7BA8(a4, (char *)a2);
  if ((v386[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v386);
    if ((v388[23] & 0x80000000) == 0)
    {
LABEL_628:
      if ((SHIBYTE(v391) & 0x80000000) == 0)
        return;
LABEL_632:
      operator delete((void *)v390);
      return;
    }
  }
  else if ((v388[23] & 0x80000000) == 0)
  {
    goto LABEL_628;
  }
  operator delete(*(void **)v388);
  if (SHIBYTE(v391) < 0)
    goto LABEL_632;
}

void sub_223AC71E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AC7A18(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x19uLL);
    v8 = xmmword_2245B9430;
    strcpy(v4, "Newly created keyframes");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_2231AD778((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_223AC7AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7AFC(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x20uLL);
    v8 = xmmword_2245B9420;
    strcpy(v4, "Content update keyframes");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_2231AD778((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_223AC7BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7BE0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p;
  __int128 v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    __p = operator new(0x28uLL);
    v7 = xmmword_2245B8E00;
    strcpy((char *)__p, "Insignificant content update keyframes");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231AD778((uint64_t)v4, a1, a2, (uint64_t)&__p, &v5);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
  }
}

void sub_223AC7CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[23];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    strcpy(__p, "Loop closure keyframes");
    v7 = 22;
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231AD778((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223AC7D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7D94(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x20uLL);
    v8 = xmmword_2245B8D00;
    strcpy(v4, "Anchor external keyframes");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_2231AD778((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_223AC7E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7E78(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x20uLL);
    v8 = xmmword_2245B8D50;
    strcpy(v4, "Unreceived remesh keyframes");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_2231AD778((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_223AC7F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223AC7F5C(uint64_t a1, int *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[20];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 19;
    strcpy(__p, "Integrate raw frame");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2238E825C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223AC8018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_223AC8034(_QWORD *a1, float32x2_t *a2, double a3, double a4, float32x4_t a5, double a6, float32x2_t a7, double a8, float32x4_t a9)
{
  unint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  int v18;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;

  if (!a1[2]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 277, (uint64_t)"!map_keyframes_to_pose.empty()", 30, (uint64_t)&unk_2245A023A, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_19;
  }
  v16 = (_QWORD *)*a1;
  v15 = a1 + 1;
  v14 = v16;
  if (v16 == v15)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 301, (uint64_t)"closest_keyframe_id.has_value() && closest_pose.has_value()", 59, (uint64_t)&unk_2245A023A, 0, (void (*)(void **))sub_22457406C))goto LABEL_20;
    goto LABEL_19;
  }
  LOBYTE(v17) = 0;
  v18 = 0;
  a5.i32[0] = a2[1].i32[0];
  a7.i32[0] = a2[3].i32[0];
  a9.i32[0] = a2[5].i32[0];
  __asm { FMOV            V1.2S, #5.0 }
  *(float32x2_t *)v24.f32 = vmla_f32(vmla_f32(vmul_f32(*a2, 0), 0, a2[2]), _D1, a2[4]);
  *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a5.f32, 0), 0, a7), _D1, *(float32x2_t *)a9.f32);
  *(float32x2_t *)a5.f32 = a2[6];
  a5.i32[2] = a2[7].i32[0];
  v25 = vaddq_f32(v24, a5);
  v26 = 3.4028e38;
  do
  {
    a9.i32[0] = *((_DWORD *)v14 + 13);
    v10.i32[0] = *((_DWORD *)v14 + 17);
    v11.i32[0] = *((_DWORD *)v14 + 21);
    *(float32x2_t *)v27.f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)((char *)v14 + 44), 0), 0, *(float32x2_t *)((char *)v14 + 60)), _D1, *(float32x2_t *)((char *)v14 + 76));
    *(float32x2_t *)&v27.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a9.f32, 0), 0, v10), _D1, v11);
    a9.i64[0] = *(_QWORD *)((char *)v14 + 92);
    a9.i32[2] = *((_DWORD *)v14 + 25);
    v28 = (int8x16_t)vsubq_f32(v25, vaddq_f32(v27, a9));
    v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
    *(float *)v28.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), v29, v29).f32[0]);
    a9 = vsubq_f32(a5, a9);
    v10 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL).u64[0];
    v30 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)a9.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.f32, 1), *(float32x2_t *)a9.f32, 1), v10, v10).f32[0])+ *(float *)v28.i32;
    if (v30 < v26)
    {
      v17 = *(_QWORD *)((char *)v14 + 28);
      v9 = v17 >> 8;
      v18 = 1;
      v26 = v30;
    }
    v31 = (_QWORD *)v14[1];
    if (v31)
    {
      do
      {
        v32 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = (_QWORD *)v14[2];
        _ZF = *v32 == (_QWORD)v14;
        v14 = v32;
      }
      while (!_ZF);
    }
    v14 = v32;
  }
  while (v32 != v15);
  if (!v18)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframingAdaptorUtil.cpp", 301, (uint64_t)"closest_keyframe_id.has_value() && closest_pose.has_value()", 59, (uint64_t)&unk_2245A023A, 0, (void (*)(void **))sub_22457406C))LABEL_20:sub_22324A974();
LABEL_19:
    abort();
  }
  return v17 | (v9 << 8);
}

void sub_223AC827C(_OWORD *a1, char a2, _OWORD *a3, char a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  float32x2_t *v17;
  __int128 v18;
  __int128 v19;
  float32x2_t *v20;
  __int128 v21;
  __int128 v22;
  const char **v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string v48;
  __int128 v49;
  uint64_t v50[2];
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  int v56;
  float32x2_t *v57;
  float32x2_t *v58;
  float32x2_t *v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  _QWORD v68[45];

  v68[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      v10 = v8;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v10[2];
    }
    v11 = *(_QWORD *)(v9 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      v64 = "cv3d.recon.";
      v65 = 11;
      v66 = "MeshingEngine.KFCluster.Rawframe";
      v67 = 32;
      sub_2231A9820((uint64_t)&v64, (uint64_t)v68, 0, 0, &v48);
      sub_2241471F8();
      v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        {
          *(_QWORD *)&v49 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v49 + 1) = 2;
          v16 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            sub_2241498F4((uint64_t)v50, 0);
            if (a2)
            {
              *(_OWORD *)__p = *a1;
              v61 = a1[1];
              v62 = a1[2];
              v63 = a1[3];
              v17 = (float32x2_t *)operator new(0x40uLL);
              v59 = v17 + 8;
              v18 = v61;
              *(_OWORD *)v17->f32 = *(_OWORD *)__p;
              *(_OWORD *)v17[2].f32 = v18;
              v19 = v63;
              *(_OWORD *)v17[4].f32 = v62;
              *(_OWORD *)v17[6].f32 = v19;
              v57 = v17;
              v58 = v17 + 8;
              v55 = 1065353216;
              v56 = 0;
              sub_223C07E8C(&v57, &v55, (uint64_t)&v64, 0.4);
              sub_2237C2E74(v50, (uint64_t)&v64);
              sub_22316F8F4((uint64_t *)&v64);
              operator delete(v17);
            }
            if (a4)
            {
              *(_OWORD *)__p = *a3;
              v61 = a3[1];
              v62 = a3[2];
              v63 = a3[3];
              v20 = (float32x2_t *)operator new(0x40uLL);
              v59 = v20 + 8;
              v21 = v61;
              *(_OWORD *)v20->f32 = *(_OWORD *)__p;
              *(_OWORD *)v20[2].f32 = v21;
              v22 = v63;
              *(_OWORD *)v20[4].f32 = v62;
              *(_OWORD *)v20[6].f32 = v22;
              v57 = v20;
              v58 = v20 + 8;
              v55 = 0;
              v56 = 1065353216;
              sub_223C07E8C(&v57, &v55, (uint64_t)&v64, 0.3);
              operator delete(v20);
              sub_22414E9E0((uint64_t)v50, (uint64_t)&v64);
              sub_22316F8F4((uint64_t *)&v64);
            }
            strcpy((char *)__p, "Rawframe");
            *(_WORD *)((char *)&v61 + 7) = 264;
            sub_22329F414((uint64_t)v50, (__int128 *)__p, &v49, &v52);
            if (BYTE8(v61) && SBYTE7(v61) < 0)
              operator delete(__p[0]);
            sub_22316F8F4(v50);
            v23 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
            v24 = *v23;
            v25 = (std::__shared_weak_count *)v23[1];
            if (v25)
            {
              p_shared_owners = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldxr(p_shared_owners);
              while (__stxr(v27 + 1, p_shared_owners));
            }
            v29 = v53;
            v28 = v54;
            v50[0] = (uint64_t)&off_24EC6A3B8;
            v50[1] = v53;
            v51 = v54;
            v53 = 0;
            v54 = 0;
            v64 = v24;
            v65 = (uint64_t)v25;
            if (v25)
            {
              v30 = (unint64_t *)&v25->__shared_owners_;
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            v66 = (const char *)&off_24EC6A3B8;
            v67 = v29;
            v68[0] = v28;
            if (v28)
            {
              v32 = (unint64_t *)&v28->__shared_owners_;
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }
            (*(void (**)(uint64_t *, const char **))(*v16 + 16))(v16, &v64);
            v34 = (std::__shared_weak_count *)v68[0];
            if (v68[0])
            {
              v35 = (unint64_t *)(v68[0] + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v37 = (std::__shared_weak_count *)v65;
            if (v65)
            {
              v38 = (unint64_t *)(v65 + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = v51;
            if (v51)
            {
              v41 = (unint64_t *)&v51->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            if (v25)
            {
              v43 = (unint64_t *)&v25->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v45 = v54;
            if (v54)
            {
              v46 = (unint64_t *)&v54->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223AC8818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_22316F8F4((uint64_t *)&STACK[0x258]);
  sub_22316F8F4(&a22);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223AC8950(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  char v4;
  _DWORD v5[6];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_223A6B558(v5, "KeyVol Event ");
  sub_223AB73E8((uint64_t)&v4, (uint64_t)v5, a2);
  v7[0] = v5;
  v7[1] = " data validation check fails";
  v7[2] = v5;
  v7[3] = " data validation check fails";
  v7[4] = " data validation check fails";
  if (v6 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5F760[v6])(&v8, v5);
  if (v6 == -1)
    sub_22316DD70();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5F778[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5F718[v6])(v7, v5);
  return result;
}

void sub_223AC8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC8A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AC8A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223AC8AA0(_DWORD ***a1)
{
  return sub_2231BA8E8(**a1, (char *)(*a1)[1]);
}

void sub_223AC8AAC(uint64_t a1, uint64_t a2)
{
  sub_223AC8ABC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223AC8ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5F718[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223AC8C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223AC8CB4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223AC8DAC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223AC8DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223AC8DAC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223AC8FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223AC8FBC(_DWORD ***a1)
{
  return sub_223AC8FD8(**a1, (char *)(*a1)[1]);
}

void sub_223AC8FC8(uint64_t a1, uint64_t a2)
{
  sub_223AC90C8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223AC8FD8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5F718[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223AC90C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5F718[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223AC927C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223AC92C0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223AC93B8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223AC93B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223AC93B8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223AC95B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_223AC95C8(uint64_t a1, void *key, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_224527578(a3, (CFNumberRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_223AC972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223AC9740(uint64_t a1, void *key, int *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_224527160(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_16;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_16:
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_17:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_18:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223AC98A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223AC98B4(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  LODWORD(v22) = 0;
  v7 = sub_223919C2C(a2, (int *)&v21);
  v9 = v8;
  v10 = (std::__shared_weak_count *)operator new(0x198uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  v20 = sub_22317FD80((uint64_t)&v10[1], a1);
  v21 = v7;
  v22 = v9;
  v23 = v20;
  v24 = v10;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  LOBYTE(v25) = 0;
  v29 = 0;
  if (*((_BYTE *)a3 + 64))
  {
    v13 = a3[1];
    v25 = *a3;
    v26 = v13;
    v14 = a3[3];
    v27 = a3[2];
    v28 = v14;
    v29 = 1;
  }
  v30 = 0;
  v31 = 0;
  sub_223AC9A60(a4, (uint64_t)&v21, 1uLL);
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_223AC9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223198118((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223AC9A60(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x222222222222223)
      sub_22316E078();
    v5 = 120 * a3;
    v6 = (char *)operator new(120 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = a2 + v5;
    do
    {
      *(_OWORD *)v6 = *(_OWORD *)a2;
      v9 = *(_QWORD *)(a2 + 24);
      *((_QWORD *)v6 + 2) = *(_QWORD *)(a2 + 16);
      *((_QWORD *)v6 + 3) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6[32] = 0;
      v6[96] = 0;
      if (*(_BYTE *)(a2 + 96))
      {
        v12 = *(_OWORD *)(a2 + 32);
        v13 = *(_OWORD *)(a2 + 48);
        v14 = *(_OWORD *)(a2 + 80);
        *((_OWORD *)v6 + 4) = *(_OWORD *)(a2 + 64);
        *((_OWORD *)v6 + 5) = v14;
        *((_OWORD *)v6 + 2) = v12;
        *((_OWORD *)v6 + 3) = v13;
        v6[96] = 1;
      }
      v8 = *(_OWORD *)(a2 + 100);
      v6[116] = *(_BYTE *)(a2 + 116);
      *(_OWORD *)(v6 + 100) = v8;
      a2 += 120;
      v6 += 120;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_223AC9B60(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 12);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223AC9BDC(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v7 = sub_22352C238(a2, (int *)&v21);
  v9 = v8;
  v10 = (std::__shared_weak_count *)operator new(0x198uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  v20 = sub_22317FD80((uint64_t)&v10[1], a1);
  v21 = v7;
  v22 = v9;
  v23 = v20;
  v24 = v10;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  LOBYTE(v25) = 0;
  v29 = 0;
  if (*((_BYTE *)a3 + 64))
  {
    v13 = a3[1];
    v25 = *a3;
    v26 = v13;
    v14 = a3[3];
    v27 = a3[2];
    v28 = v14;
    v29 = 1;
  }
  v30 = 0;
  v31 = 0;
  sub_223AC9A60(a4, (uint64_t)&v21, 1uLL);
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_223AC9D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223198118((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223AC9D84(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, __int128 *a4@<X3>, __int128 *a5@<X4>, unint64_t **a6@<X8>)
{
  unint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  __int128 *v55;
  unint64_t **v56;
  uint64_t *v58;
  __int128 v59;
  char v60;
  uint64_t v61;

  v10 = a6;
  v61 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_22392C904((uint64_t)a6, *(_QWORD *)(a1 + 24));
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v55 = a5;
    v56 = v10;
    v54 = a3;
    do
    {
      LODWORD(v59) = a3;
      *(_QWORD *)((char *)&v59 + 4) = *(_QWORD *)(v11 + 16);
      HIDWORD(v59) = *(_DWORD *)(v11 + 24);
      v12 = sub_22352C238(a2, (int *)&v59);
      v14 = v13;
      v15 = (std::__shared_weak_count *)operator new(0x198uLL);
      v15->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      v58 = (uint64_t *)v11;
      v17 = v11 + 32;
      v15->__shared_weak_owners_ = 0;
      v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
      v18 = v15 + 1;
      sub_22317FD80((uint64_t)&v15[1], v17);
      v20 = v10[1];
      v19 = (unint64_t)v10[2];
      if ((unint64_t)v20 >= v19)
      {
        v27 = *v10;
        v28 = 0xEEEEEEEEEEEEEEEFLL * (v20 - *v10);
        v29 = v28 + 1;
        if (v28 + 1 > 0x222222222222222)
          sub_22316E078();
        v30 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v19 - (_QWORD)v27) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x111111111111111)
          v31 = 0x222222222222222;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 > 0x222222222222222)
            sub_223174E94();
          v32 = (char *)operator new(120 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = (unint64_t *)&v32[120 * v28];
        *v33 = v12;
        v33[1] = v14;
        v34 = &v32[120 * v31];
        v33[2] = (unint64_t)v18;
        v33[3] = (unint64_t)v15;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
        v36 = &v32[120 * v28];
        v36[32] = 0;
        v37 = v36 + 32;
        v37[64] = 0;
        v10 = v56;
        v22 = v58;
        if (*((_BYTE *)a4 + 64))
        {
          v38 = a4[1];
          *(_OWORD *)v37 = *a4;
          *((_OWORD *)v37 + 1) = v38;
          v39 = a4[3];
          *((_OWORD *)v37 + 2) = a4[2];
          *((_OWORD *)v37 + 3) = v39;
          v37[64] = 1;
        }
        v40 = &v32[120 * v28];
        a5 = v55;
        *(_OWORD *)(v40 + 100) = *v55;
        v40[116] = *((_BYTE *)v55 + 16);
        v26 = v33 + 15;
        if (v20 == v27)
        {
          *v56 = v33;
          v56[1] = v26;
          v56[2] = (unint64_t *)v34;
        }
        else
        {
          v41 = 0;
          do
          {
            v43 = &v33[v41];
            v44 = &v20[v41];
            *(_OWORD *)(v43 - 15) = *(_OWORD *)&v20[v41 - 15];
            *(_OWORD *)(v43 - 13) = *(_OWORD *)&v20[v41 - 13];
            *(v44 - 13) = 0;
            *(v44 - 12) = 0;
            LOBYTE(v33[v41 - 11]) = 0;
            *((_BYTE *)v43 - 24) = 0;
            if (LOBYTE(v20[v41 - 3]))
            {
              v45 = *(_OWORD *)(v44 - 11);
              v46 = *(_OWORD *)(v44 - 9);
              v47 = *(_OWORD *)(v44 - 5);
              *(_OWORD *)&v33[v41 - 7] = *(_OWORD *)(v44 - 7);
              *(_OWORD *)&v33[v41 - 5] = v47;
              *(_OWORD *)&v33[v41 - 11] = v45;
              *(_OWORD *)&v33[v41 - 9] = v46;
              *((_BYTE *)v43 - 24) = 1;
            }
            v42 = *(_OWORD *)((char *)v44 - 20);
            *((_BYTE *)v43 - 4) = *((_BYTE *)v44 - 4);
            *(_OWORD *)((char *)v43 - 20) = v42;
            v41 -= 15;
          }
          while (&v20[v41] != v27);
          v20 = *v56;
          v48 = v56[1];
          *v56 = &v33[v41];
          v56[1] = v26;
          v56[2] = (unint64_t *)v34;
          while (v48 != v20)
          {
            v49 = (std::__shared_weak_count *)*(v48 - 12);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v48 -= 15;
          }
        }
        a3 = v54;
        if (v20)
          operator delete(v20);
      }
      else
      {
        v59 = *a5;
        v60 = *((_BYTE *)a5 + 16);
        *v20 = v12;
        v20[1] = v14;
        v20[2] = (unint64_t)v18;
        v20[3] = (unint64_t)v15;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        *((_BYTE *)v20 + 32) = 0;
        *((_BYTE *)v20 + 96) = 0;
        v22 = v58;
        if (*((_BYTE *)a4 + 64))
        {
          v23 = *a4;
          v24 = a4[1];
          v25 = a4[3];
          *((_OWORD *)v20 + 4) = a4[2];
          *((_OWORD *)v20 + 5) = v25;
          *((_OWORD *)v20 + 2) = v23;
          *((_OWORD *)v20 + 3) = v24;
          *((_BYTE *)v20 + 96) = 1;
        }
        *(_OWORD *)((char *)v20 + 100) = v59;
        *((_BYTE *)v20 + 116) = v60;
        v26 = v20 + 15;
      }
      v10[1] = v26;
      if (v15)
      {
        v52 = (unint64_t *)&v15->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v11 = *v22;
    }
    while (v11);
  }
}

void sub_223ACA160(_Unwind_Exception *a1)
{
  void **v1;

  sub_223295868(v1);
  _Unwind_Resume(a1);
}

void sub_223ACA178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  sub_223295868(a5);
  _Unwind_Resume(a1);
}

void sub_223ACA198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_223295868(a12);
  _Unwind_Resume(a1);
}

void sub_223ACA1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_223295868(a12);
  _Unwind_Resume(a1);
}

BOOL sub_223ACA1C0@<W0>(_BOOL8 result@<X0>, uint64_t a2@<X1>, int32x4_t *a3@<X8>, float a4@<S0>, int32x4_t a5@<Q1>, double a6@<D2>)
{
  uint64_t v8;
  int v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v8 = result;
  if (a4 <= 0.0)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/Utils.cpp", 68, (uint64_t)"box_size > 0.0 && \"Bad vmap config\"", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
      abort();
  }
  v10 = *(unsigned __int8 *)(a2 + 8);
  v11 = 1.0 / a4;
  if ((v10 - 1) < 3)
  {
    LODWORD(a6) = *(_DWORD *)(a2 + 4);
    a5.i64[0] = *(_QWORD *)v8;
    v12 = (float32x4_t)vzip1q_s32(a5, a5);
    v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    *a3 = vcvtq_s32_f32(vrndmq_f32(vmulq_n_f32((float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)vsubq_f32(v12, v13)), (int32x4_t)vaddq_f32(v12, v13)), v11)));
    v13.i32[0] = *(_DWORD *)(v8 + 8);
    v14 = floorf(v11 * (float)(v13.f32[0] - *(float *)&a6));
    v15 = floorf(v11 * (float)(*(float *)&a6 + v13.f32[0]));
LABEL_8:
    a3[1].i32[0] = (int)v14;
    a3[1].i32[1] = (int)v15;
    return result;
  }
  if (v10 == 4 || !*(_BYTE *)(a2 + 8))
  {
    v16 = *(float *)(a2 + 4);
    v17 = *(float *)(v8 + 4);
    v18 = floorf(v11 * (float)(v16 + *(float *)v8));
    a3->i32[0] = vcvtps_s32_f32(v11 * (float)(*(float *)v8 - v16));
    a3->i32[1] = (int)(float)(v18 + -1.0);
    a3->i32[2] = vcvtps_s32_f32(v11 * (float)(v17 - v16));
    a3->i32[3] = (int)(float)(floorf(v11 * (float)(v16 + v17)) + -1.0);
    v19 = *(float *)(v8 + 8);
    v14 = ceilf(v11 * (float)(v19 - v16));
    v15 = floorf(v11 * (float)(v16 + v19)) + -1.0;
    goto LABEL_8;
  }
  return result;
}

void sub_223ACA32C(int a1@<W0>, uint64_t (***a2)()@<X8>)
{
  uint64_t (**v3)();
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62[3];
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *object;
  void *v71[2];
  __int128 v72;
  void *__p[2];
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  switch(a1)
  {
    case 1:
      v3 = &off_24EC5F888;
      goto LABEL_97;
    case 2:
      v3 = &off_24EC5F988;
      goto LABEL_97;
    case 3:
      v3 = &off_24EC5F908;
      goto LABEL_97;
    case 4:
      v4 = atomic_load((unsigned __int8 *)&qword_2540CCD78);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCD78))
      {
        sub_22455F53C(v62);
        sub_223174DE4(&object, "cv3dapi.recon3d");
        sub_2232300E0(v62, (uint64_t)&object, &qword_2540CCD70);
        if (SHIBYTE(v71[1]) < 0)
          operator delete(object);
        __cxa_guard_release(&qword_2540CCD78);
      }
      v69 = qword_2540CCD70;
      if (**(int **)(qword_2540CCD70 + 56) > 4)
        goto LABEL_96;
      v5 = *(unsigned __int8 *)(qword_2540CCD70 + 72);
      v6 = sub_22322F254(qword_2540CCD70, "OSLogSurrogateAppender", 1, 0);
      v7 = v6;
      if (!v5 && v6 == 0)
        goto LABEL_96;
      v62[0] = &v69;
      v62[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v62[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v63 = 4;
      v64 = "unknown file";
      v65 = 155;
      v67 = 0;
      v68 = 0;
      v66 = "unknown function";
      v9 = *v62[0];
      if (*(char *)(*v62[0] + 39) < 0)
      {
        v11 = *(const char **)(v9 + 16);
        v10 = *(_QWORD *)(v9 + 24);
      }
      else
      {
        v10 = *(unsigned __int8 *)(*v62[0] + 39);
        v11 = (const char *)(*v62[0] + 16);
      }
      v61 = *v62[0] + 16;
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v72 && SHIBYTE(v71[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v13 = (const char *)&xmmword_255788F40;
      else
        v13 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v14 = byte_255788F57;
      else
        v14 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v13, v11);
      v15 = v71;
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v14 >= 0x17)
      {
        v16 = v7;
        v17 = v11;
        v18 = v9;
        v19 = v5;
        v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v20 = v14 | 7;
        v21 = v20 + 1;
        v15 = operator new(v20 + 1);
        v71[1] = (void *)v14;
        *(_QWORD *)&v72 = v21 | 0x8000000000000000;
        v71[0] = v15;
        v5 = v19;
        v9 = v18;
        v11 = v17;
        v7 = v16;
      }
      else
      {
        BYTE7(v72) = v14;
        if (!v14)
        {
LABEL_29:
          *((_BYTE *)v15 + v14) = 0;
          BYTE8(v72) = 1;
          v22 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v10 >= 0x17)
          {
            v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v23 = v10 | 7;
            v24 = v23 + 1;
            v22 = operator new(v23 + 1);
            __p[1] = (void *)v10;
            v74 = v24 | 0x8000000000000000;
            __p[0] = v22;
          }
          else
          {
            HIBYTE(v74) = v10;
            if (!v10)
              goto LABEL_37;
          }
          memmove(v22, v11, v10);
LABEL_37:
          *((_BYTE *)v22 + v10) = 0;
          v75 = 1;
          v25 = object;
          if (SHIBYTE(v74) < 0)
            operator delete(__p[0]);
          if (BYTE8(v72) && SBYTE7(v72) < 0)
            operator delete(v71[0]);
          if (object)
            os_release(object);
          if (v7 && *(_QWORD *)(v7 + 24))
          {
            v26 = _os_log_pack_size();
            v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
            v28 = (std::__shared_weak_count *)operator new();
            v29 = v28;
            v28->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = v27;
            object = v27;
            v71[0] = v27;
            v71[1] = v28;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            v72 = 0uLL;
            __p[0] = 0;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v29);
            }
            v33 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v34 = operator new();
            v35 = *(unsigned __int8 *)(v9 + 39);
            v36 = v61;
            if ((v35 & 0x80u) != 0)
            {
              v36 = *(_QWORD *)(v9 + 16);
              v35 = *(_QWORD *)(v9 + 24);
            }
            *(_QWORD *)v34 = v33;
            *(_OWORD *)(v34 + 8) = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            *(_OWORD *)(v34 + 24) = v72;
            v72 = 0uLL;
            *(_QWORD *)(v34 + 40) = v36;
            *(_QWORD *)(v34 + 48) = v35;
            *(_BYTE *)(v34 + 56) = 16;
            v76 = 0;
            v77 = v34;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v77);
            v37 = v77;
            v77 = 0;
            if (v37)
            {
              v38 = *(std::__shared_weak_count **)(v37 + 32);
              if (v38)
              {
                v39 = (unint64_t *)&v38->__shared_owners_;
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              v41 = *(std::__shared_weak_count **)(v37 + 16);
              if (v41)
              {
                v42 = (unint64_t *)&v41->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
              v44 = v76;
              v76 = 0;
              if (v44)
              {
                v45 = *(std::__shared_weak_count **)(v44 + 32);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                v48 = *(std::__shared_weak_count **)(v44 + 16);
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
              }
            }
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = (std::__shared_weak_count *)v71[1];
            if (v71[1])
            {
              v55 = (unint64_t *)((char *)v71[1] + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
          }
          else
          {
            os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v57 = (void *)_os_log_send_and_compose_impl();
            if (v57)
              free(v57);
          }
          if (v5)
          {
            sub_22322C138((uint64_t)v62, "Unknown VMap filter type, falling back to full containment");
            sub_223182C08((uint64_t)v62);
          }
          sub_223182C08((uint64_t)v62);
          v58 = v68;
          if (v68)
          {
            v59 = (unint64_t *)&v68->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          goto LABEL_96;
        }
      }
      memmove(v15, v13, v14);
      goto LABEL_29;
    default:
LABEL_96:
      v3 = &off_24EC5F7F8;
LABEL_97:
      *a2 = v3;
      a2[3] = (uint64_t (**)())a2;
      return;
  }
}

void sub_223ACAAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223ACAAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCD78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCD78);
  _Unwind_Resume(a1);
}

void sub_223ACAB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACAB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACAB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACAB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

__n128 sub_223ACAC14@<Q0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v12;
  char *v13;
  uint64_t *v14;
  char v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  uint64_t v29;
  int v32;
  uint64_t v33;
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  v29 = a6 + 48;
  *(_DWORD *)(a6 + 48) = 1065353216;
  *(_DWORD *)(a6 + 68) = 1065353216;
  *(_DWORD *)(a6 + 88) = 1065353216;
  *(_DWORD *)(a6 + 108) = 1065353216;
  v8 = *a1;
  v7 = a1[1];
  if (v7 != *a1)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)*a1) >> 2);
    if (v9 >> 60)
      sub_22316E078();
    v12 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * (((char *)v7 - (char *)*a1) >> 2));
    *(_QWORD *)a6 = v12;
    *(_QWORD *)(a6 + 8) = v12;
    *(_QWORD *)(a6 + 16) = &v12[16 * v9];
    do
    {
      v32 = a3;
      v33 = *v8;
      v34 = *((_DWORD *)v8 + 2);
      v14 = sub_22353408C(a2, &v32);
      if (v14)
      {
        v15 = *((_BYTE *)v14 + 32);
        v35[0] = *(uint64_t *)((char *)v14 + 33);
        *(_QWORD *)((char *)v35 + 7) = v14[5];
        v17 = *(_QWORD **)(a6 + 8);
        v16 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v17 < v16)
        {
          *(_BYTE *)v17 = v15;
          *(_QWORD *)((char *)v17 + 1) = v35[0];
          v17[1] = *(_QWORD *)((char *)v35 + 7);
          v13 = (char *)(v17 + 2);
        }
        else
        {
          v18 = *(_QWORD **)a6;
          v19 = ((uint64_t)v17 - *(_QWORD *)a6) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            sub_22316E078();
          v21 = v16 - (_QWORD)v18;
          if (v21 >> 3 > v20)
            v20 = v21 >> 3;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 60)
              sub_223174E94();
            v23 = (char *)operator new(16 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[16 * v19];
          *v24 = v15;
          *(_QWORD *)(v24 + 1) = v35[0];
          *((_QWORD *)v24 + 1) = *(_QWORD *)((char *)v35 + 7);
          v25 = v24;
          if (v17 != v18)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
              v25 -= 16;
              v17 -= 2;
            }
            while (v17 != v18);
            v17 = *(_QWORD **)a6;
          }
          v13 = v24 + 16;
          *(_QWORD *)a6 = v25;
          *(_QWORD *)(a6 + 8) = v24 + 16;
          *(_QWORD *)(a6 + 16) = &v23[16 * v22];
          if (v17)
            operator delete(v17);
        }
        *(_QWORD *)(a6 + 8) = v13;
      }
      v8 = (uint64_t *)((char *)v8 + 12);
    }
    while (v8 != v7);
  }
  if ((uint64_t **)(a6 + 24) != a4)
    sub_2236204B0((char **)(a6 + 24), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4));
  v26 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v29 = *(_OWORD *)a5;
  *(_OWORD *)(v29 + 16) = v26;
  result = *(__n128 *)(a5 + 32);
  v28 = *(_OWORD *)(a5 + 48);
  *(__n128 *)(v29 + 32) = result;
  *(_OWORD *)(v29 + 48) = v28;
  return result;
}

void sub_223ACAE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2233400F8(v1);
  _Unwind_Resume(a1);
}

void sub_223ACAE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2233400F8(v1);
  _Unwind_Resume(a1);
}

void sub_223ACAEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2233400F8(v1);
  _Unwind_Resume(a1);
}

void sub_223ACAEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2233400F8(v1);
  _Unwind_Resume(a1);
}

void sub_223ACAEDC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ACAEF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5F7F8;
  return result;
}

void sub_223ACAF14(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5F7F8;
}

BOOL sub_223ACAF2C(float32x4_t a1, double a2, float32x4_t a3, double a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float *a9)
{
  float v9;
  int8x16_t v10;
  float32x2_t v11;
  float v12;
  _BOOL8 result;
  int8x16_t v14;
  float32x2_t v15;
  float v16;
  int8x16_t v17;
  float32x2_t v18;
  float v19;
  int8x16_t v20;
  float32x2_t v21;
  float v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  int8x16_t v26;
  float32x2_t v27;
  float v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  int8x16_t v32;
  float32x2_t v33;

  a1.i64[0] = *(_QWORD *)a6;
  a1.i32[2] = *(_DWORD *)(a6 + 8);
  *(float *)&a4 = *a7;
  a3.i64[0] = *(_QWORD *)a8;
  a3.i32[2] = *(_DWORD *)(a8 + 8);
  v9 = *a9 * *a9;
  v10 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)0, *a7), a3);
  v11 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), v11, v11).f32[0];
  result = v9 >= v12;
  if (v9 >= v12)
  {
    v14 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CE0, *(float *)&a4), a3);
    v15 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
    v16 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), *(float32x2_t *)v14.i8, 1), v15, v15).f32[0];
    result = v9 >= v16;
    if (v9 >= v16)
    {
      v17 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660820, *(float *)&a4), a3);
      v18 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
      v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v18, v18).f32[0];
      result = v9 >= v19;
      if (v9 >= v19)
      {
        v20 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CF0, *(float *)&a4), a3);
        v21 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
        v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v20.i8, 1), v21, v21).f32[0];
        result = v9 >= v22;
        if (v9 >= v22)
        {
          v23 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245C76E0, *(float *)&a4), a3);
          v24 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
          v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), v24, v24).f32[0];
          result = v9 >= v25;
          if (v9 >= v25)
          {
            v26 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660830, *(float *)&a4), a3);
            v27 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
            v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), v27, v27).f32[0];
            result = v9 >= v28;
            if (v9 >= v28)
            {
              v29 = (int8x16_t)vsubq_f32(vaddq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), a3);
              v30 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
              v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1), v30, v30).f32[0];
              result = v9 >= v31;
              if (v9 >= v31)
              {
                v32 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224657E50, *(float *)&a4), a3);
                v33 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
                return v9 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), *(float32x2_t *)v32.i8, 1), v33, v33).f32[0];
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223ACB0E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ACB14C()
{
  return &unk_24EC5F868;
}

void sub_223ACB15C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ACB170()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5F888;
  return result;
}

void sub_223ACB194(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5F888;
}

BOOL sub_223ACB1AC(float32x4_t a1, double a2, float32x4_t a3, double a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float *a9)
{
  float v9;
  int8x16_t v10;
  float32x2_t v11;
  float v12;
  _BOOL8 result;
  int8x16_t v14;
  float32x2_t v15;
  float v16;
  int8x16_t v17;
  float32x2_t v18;
  float v19;
  int8x16_t v20;
  float32x2_t v21;
  float v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  int8x16_t v26;
  float32x2_t v27;
  float v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  int8x16_t v32;
  float32x2_t v33;

  a1.i64[0] = *(_QWORD *)a6;
  a1.i32[2] = *(_DWORD *)(a6 + 8);
  *(float *)&a4 = *a7;
  a3.i64[0] = *(_QWORD *)a8;
  a3.i32[2] = *(_DWORD *)(a8 + 8);
  v9 = (float)((float)(*a7 * 0.86603) + *a9) * (float)((float)(*a7 * 0.86603) + *a9);
  v10 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)0, *a7), a3);
  v11 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), v11, v11).f32[0];
  result = v9 >= v12;
  if (v9 >= v12)
  {
    v14 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CE0, *(float *)&a4), a3);
    v15 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
    v16 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), *(float32x2_t *)v14.i8, 1), v15, v15).f32[0];
    result = v9 >= v16;
    if (v9 >= v16)
    {
      v17 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660820, *(float *)&a4), a3);
      v18 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
      v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v18, v18).f32[0];
      result = v9 >= v19;
      if (v9 >= v19)
      {
        v20 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CF0, *(float *)&a4), a3);
        v21 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
        v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v20.i8, 1), v21, v21).f32[0];
        result = v9 >= v22;
        if (v9 >= v22)
        {
          v23 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245C76E0, *(float *)&a4), a3);
          v24 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
          v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), v24, v24).f32[0];
          result = v9 >= v25;
          if (v9 >= v25)
          {
            v26 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660830, *(float *)&a4), a3);
            v27 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
            v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), v27, v27).f32[0];
            result = v9 >= v28;
            if (v9 >= v28)
            {
              v29 = (int8x16_t)vsubq_f32(vaddq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), a3);
              v30 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
              v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1), v30, v30).f32[0];
              result = v9 >= v31;
              if (v9 >= v31)
              {
                v32 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224657E50, *(float *)&a4), a3);
                v33 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
                return v9 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), *(float32x2_t *)v32.i8, 1), v33, v33).f32[0];
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223ACB374(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ACB3E0()
{
  return &unk_24EC5F8E8;
}

void sub_223ACB3F0()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ACB404()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5F908;
  return result;
}

void sub_223ACB428(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5F908;
}

BOOL sub_223ACB440(float32x4_t a1, double a2, float32x4_t a3, double a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float *a9)
{
  float v9;
  int8x16_t v10;
  float32x2_t v11;
  float v12;
  _BOOL8 result;
  int8x16_t v14;
  float32x2_t v15;
  float v16;
  int8x16_t v17;
  float32x2_t v18;
  float v19;
  int8x16_t v20;
  float32x2_t v21;
  float v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  int8x16_t v26;
  float32x2_t v27;
  float v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  int8x16_t v32;
  float32x2_t v33;

  a1.i64[0] = *(_QWORD *)a6;
  a1.i32[2] = *(_DWORD *)(a6 + 8);
  *(float *)&a4 = *a7;
  a3.i64[0] = *(_QWORD *)a8;
  a3.i32[2] = *(_DWORD *)(a8 + 8);
  v9 = *a9 * *a9;
  v10 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)0, *a7), a3);
  v11 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), v11, v11).f32[0];
  result = v9 > v12;
  if (v9 <= v12)
  {
    v14 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CE0, *(float *)&a4), a3);
    v15 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
    v16 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), *(float32x2_t *)v14.i8, 1), v15, v15).f32[0];
    result = v9 > v16;
    if (v9 <= v16)
    {
      v17 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660820, *(float *)&a4), a3);
      v18 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
      v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v18, v18).f32[0];
      result = v9 > v19;
      if (v9 <= v19)
      {
        v20 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245F4CF0, *(float *)&a4), a3);
        v21 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
        v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v20.i8, 1), v21, v21).f32[0];
        result = v9 > v22;
        if (v9 <= v22)
        {
          v23 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_2245C76E0, *(float *)&a4), a3);
          v24 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
          v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v23.i8, 1), v24, v24).f32[0];
          result = v9 > v25;
          if (v9 <= v25)
          {
            v26 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224660830, *(float *)&a4), a3);
            v27 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
            v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), v27, v27).f32[0];
            result = v9 > v28;
            if (v9 <= v28)
            {
              v29 = (int8x16_t)vsubq_f32(vaddq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), a3);
              v30 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
              v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1), v30, v30).f32[0];
              result = v9 > v31;
              if (v9 <= v31)
              {
                v32 = (int8x16_t)vsubq_f32(vmlaq_n_f32(a1, (float32x4_t)xmmword_224657E50, *(float *)&a4), a3);
                v33 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
                return v9 > vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), *(float32x2_t *)v32.i8, 1), v33, v33).f32[0];
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223ACB5F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ACB660()
{
  return &unk_24EC5F968;
}

void sub_223ACB670()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223ACB684()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5F988;
  return result;
}

void sub_223ACB6A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5F988;
}

BOOL sub_223ACB6C0(float32x4_t a1, float32x4_t a2, double a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float *a8)
{
  int8x16_t v8;
  float32x2_t v9;

  a1.i64[0] = *(_QWORD *)a5;
  a1.i32[2] = *(_DWORD *)(a5 + 8);
  a2.i64[0] = *(_QWORD *)a7;
  a2.i32[2] = *(_DWORD *)(a7 + 8);
  *(float *)&a3 = *a6 * 0.5;
  v8 = (int8x16_t)vsubq_f32(vaddq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0)), a2);
  v9 = (float32x2_t)vextq_s8(v8, v8, 8uLL).u64[0];
  return (float)(*a8 * *a8) > vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v8.i8, 1), v9, v9).f32[0];
}

uint64_t sub_223ACB718(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon6mapper32SetupVisibilityMapFilterCallbackENS0_23VisibilityMapFilterTypeEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223ACB784()
{
  return &unk_24EC5F9E8;
}

uint64_t sub_223ACB790(uint64_t a1, signed int a2, signed int a3, float a4)
{
  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 4) = xmmword_2246609A0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (a3 < a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterArea.cpp", 118, (uint64_t)"ceiling_height_in_voxels >= floor_height_in_voxels", 50, (uint64_t)&unk_2245A0659, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(float32x2_t *)(a1 + 216) = vmul_n_f32(vadd_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)0x3F0000003F000000), a4);
  return a1;
}

void sub_223ACB8E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  sub_22322E828(v4);
  sub_22322E828(v6);
  sub_22322E828(v5);
  v8 = (void *)v1[35];
  if (v8)
  {
    v1[36] = v8;
    operator delete(v8);
    sub_2238EFB04(v3);
    v9 = (void *)v1[24];
    if (!v9)
    {
LABEL_3:
      v10 = (void *)v1[21];
      if (!v10)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    sub_2238EFB04(v3);
    v9 = (void *)v1[24];
    if (!v9)
      goto LABEL_3;
  }
  v1[25] = v9;
  operator delete(v9);
  v10 = (void *)v1[21];
  if (!v10)
  {
LABEL_4:
    sub_223295A74(v2);
    v11 = (void *)v1[12];
    if (!v11)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v1[22] = v10;
  operator delete(v10);
  sub_223295A74(v2);
  v11 = (void *)v1[12];
  if (!v11)
  {
LABEL_5:
    v12 = (void *)v1[9];
    if (!v12)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[13] = v11;
  operator delete(v11);
  v12 = (void *)v1[9];
  if (!v12)
  {
LABEL_6:
    sub_223295A74((uint64_t)(v1 + 3));
    _Unwind_Resume(a1);
  }
LABEL_11:
  v1[10] = v12;
  operator delete(v12);
  sub_223295A74((uint64_t)(v1 + 3));
  _Unwind_Resume(a1);
}

void sub_223ACB9B0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0.0;
    v31 = 0.0;
    v32 = 0.0;
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    do
    {
      v22 += *((_DWORD *)v2 + 8);
      v42 = v42 + *((float *)v2 + 7);
      v21 += *((_DWORD *)v2 + 10);
      v41 = v41 + *((float *)v2 + 9);
      v20 += *((_DWORD *)v2 + 12);
      v40 = v40 + *((float *)v2 + 11);
      v19 += *((_DWORD *)v2 + 14);
      v39 = v39 + *((float *)v2 + 13);
      v18 += *((_DWORD *)v2 + 16);
      v38 = v38 + *((float *)v2 + 15);
      v17 += *((_DWORD *)v2 + 18);
      v37 = v37 + *((float *)v2 + 17);
      v16 += *((_DWORD *)v2 + 20);
      v36 = v36 + *((float *)v2 + 19);
      v15 += *((_DWORD *)v2 + 22);
      v35 = v35 + *((float *)v2 + 21);
      v14 += *((_DWORD *)v2 + 24);
      v34 = v34 + *((float *)v2 + 23);
      v13 += *((_DWORD *)v2 + 26);
      v33 = v33 + *((float *)v2 + 25);
      v12 += *((_DWORD *)v2 + 28);
      v32 = v32 + *((float *)v2 + 27);
      v11 += *((_DWORD *)v2 + 30);
      v31 = v31 + *((float *)v2 + 29);
      v10 += *((_DWORD *)v2 + 32);
      v30 = v30 + *((float *)v2 + 31);
      v9 += *((_DWORD *)v2 + 34);
      v29 = v29 + *((float *)v2 + 33);
      v8 += *((_DWORD *)v2 + 36);
      v28 = v28 + *((float *)v2 + 35);
      v7 += *((_DWORD *)v2 + 38);
      v27 = v27 + *((float *)v2 + 37);
      v6 += *((_DWORD *)v2 + 40);
      v26 = v26 + *((float *)v2 + 39);
      v5 += *((_DWORD *)v2 + 42);
      v25 = v25 + *((float *)v2 + 41);
      v4 += *((_DWORD *)v2 + 44);
      v24 = v24 + *((float *)v2 + 43);
      v3 += *((_DWORD *)v2 + 46);
      v23 = v23 + *((float *)v2 + 45);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    *(_DWORD *)(a2 + 4) = v22;
    *(float *)a2 = v42;
    *(_DWORD *)(a2 + 12) = v21;
    *(float *)(a2 + 8) = v41;
    *(_DWORD *)(a2 + 20) = v20;
    *(float *)(a2 + 16) = v40;
    *(_DWORD *)(a2 + 28) = v19;
    *(float *)(a2 + 24) = v39;
    *(_DWORD *)(a2 + 36) = v18;
    *(float *)(a2 + 32) = v38;
    *(_DWORD *)(a2 + 44) = v17;
    *(float *)(a2 + 40) = v37;
    *(_DWORD *)(a2 + 52) = v16;
    *(float *)(a2 + 48) = v36;
    *(_DWORD *)(a2 + 60) = v15;
    *(float *)(a2 + 56) = v35;
    *(_DWORD *)(a2 + 68) = v14;
    *(float *)(a2 + 64) = v34;
    *(_DWORD *)(a2 + 76) = v13;
    *(float *)(a2 + 72) = v33;
    *(_DWORD *)(a2 + 84) = v12;
    *(float *)(a2 + 80) = v32;
    *(_DWORD *)(a2 + 92) = v11;
    *(float *)(a2 + 88) = v31;
    *(_DWORD *)(a2 + 100) = v10;
    *(float *)(a2 + 96) = v30;
    *(_DWORD *)(a2 + 108) = v9;
    *(float *)(a2 + 104) = v29;
    *(_DWORD *)(a2 + 116) = v8;
    *(float *)(a2 + 112) = v28;
    *(_DWORD *)(a2 + 124) = v7;
    *(float *)(a2 + 120) = v27;
    *(_DWORD *)(a2 + 132) = v6;
    *(float *)(a2 + 128) = v26;
    *(_DWORD *)(a2 + 140) = v5;
    *(float *)(a2 + 136) = v25;
    *(_DWORD *)(a2 + 148) = v4;
    *(float *)(a2 + 144) = v24;
    *(_DWORD *)(a2 + 156) = v3;
    *(float *)(a2 + 152) = v23;
  }
}

uint64_t sub_223ACBC74(uint64_t a1, _DWORD *a2, float *a3, float *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float *v11;
  int v12;

  v4 = a2[3]
     + a2[1]
     + a2[5]
     + a2[7]
     + a2[9]
     + a2[11]
     + a2[13]
     + a2[15]
     + a2[17]
     + a2[19]
     + a2[21]
     + a2[23]
     + a2[25]
     + a2[27]
     + a2[29]
     + a2[31]
     + a2[33]
     + a2[35]
     + a2[37]
     + a2[39];
  if (!v4)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = (float)v4 * 0.15;
  v10 = (float)v4 * 0.85;
  while (1)
  {
    v11 = (float *)&a2[v5];
    v12 = a2[v5 + 1];
    if (v12 < 1)
      goto LABEL_4;
    v8 += v12;
    if ((v7 & 1) == 0)
    {
      if (v9 > (float)v8)
      {
        v7 = 0;
        if ((v6 & 1) != 0)
          goto LABEL_14;
        goto LABEL_12;
      }
      *a3 = *v11 / (float)v12;
    }
    v7 = 1;
    if ((v6 & 1) != 0)
      goto LABEL_14;
LABEL_12:
    if (v10 <= (float)v8)
      break;
    v6 = 0;
LABEL_4:
    v5 += 2;
    if (v5 == 40)
      return v7 & v6 & 1;
  }
  *a4 = *v11 / (float)v12;
LABEL_14:
  v6 = 1;
  if ((v7 & 1) == 0)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v7 = 1;
  return v7 & v6 & 1;
}

void sub_223ACBDE8(uint64_t a1, int32x2_t *a2)
{
  __int32 v4;
  __int32 v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  int32x2_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t **v19;
  _QWORD *v20;
  int32x2_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int32x2_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int32x2_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t *v35;

  *(_DWORD *)(a1 + 264) += a2[33].i32[0];
  *(_DWORD *)(a1 + 268) += a2[33].i32[1];
  *(_DWORD *)(a1 + 272) += a2[34].i32[0];
  v4 = a2->i32[1];
  v5 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 4))
    v4 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = v4;
  v6 = a2->i32[1];
  v7 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 12) > v6)
    v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v6;
  if (a2[1].i32[0] < v5)
    v5 = a2[1].i32[0];
  *(_DWORD *)(a1 + 8) = v5;
  v8 = a2[1].i32[0];
  if (v7 > v8)
    v8 = v7;
  *(_DWORD *)(a1 + 16) = v8;
  if (a2[1].i32[1] < v4)
    v4 = a2[1].i32[1];
  *(_DWORD *)(a1 + 4) = v4;
  v9 = a2[1].i32[1];
  if (v6 > v9)
    v9 = v6;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = a2[2].i32[0];
  if (v10 >= v5)
    v10 = v5;
  *(_DWORD *)(a1 + 8) = v10;
  v11 = a2[2].i32[0];
  if (v8 > v11)
    v11 = v8;
  *(_DWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 276) += a2[34].i32[1];
  *(_DWORD *)(a1 + 20) += a2[2].i32[1];
  *(int32x2_t *)(a1 + 432) = vadd_s32(*(int32x2_t *)(a1 + 432), a2[54]);
  v12 = a2 + 44;
  sub_223ACC0DC(*(uint64_t **)(a1 + 368), (uint64_t)&a2[44]);
  sub_223ACC0DC(*(uint64_t **)(a1 + 408), (uint64_t)&a2[49]);
  a2->i8[0] = 0;
  *(_OWORD *)&a2->u8[4] = xmmword_2246609A0;
  a2[33] = 0;
  a2[34] = 0;
  a2[2].i32[1] = 0;
  v13 = (_QWORD *)a2[30];
  if (v13)
  {
    v14 = (uint64_t *)(a1 + 224);
    do
    {
      v35 = v13 + 2;
      v15 = sub_223ACC774(v14, (int *)v13 + 4, (uint64_t)&unk_2245BA939, &v35);
      v16 = (_QWORD *)v13[6];
      if (v16)
      {
        v17 = (uint64_t)(v15 + 4);
        do
        {
          v35 = v16 + 2;
          v18 = *(int32x2_t *)((char *)v16 + 20);
          v19 = sub_223AEF740(v17, (unsigned __int16 *)v16 + 8, (uint64_t)&unk_2245BA939, (_WORD **)&v35);
          *(uint64_t **)((char *)v19 + 20) = (uint64_t *)vadd_s32(*(int32x2_t *)((char *)v19 + 20), v18);
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  if (a2[31])
  {
    v20 = (_QWORD *)a2[30];
    if (v20)
    {
      do
      {
        v31 = (_QWORD *)*v20;
        v32 = (_QWORD *)v20[6];
        if (v32)
        {
          do
          {
            v33 = (_QWORD *)*v32;
            operator delete(v32);
            v32 = v33;
          }
          while (v33);
        }
        v34 = (void *)v20[4];
        v20[4] = 0;
        if (v34)
          operator delete(v34);
        operator delete(v20);
        v20 = v31;
      }
      while (v31);
    }
    a2[30] = 0;
    v21 = a2[29];
    if (v21)
    {
      v22 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&a2[28] + 8 * v22++) = 0;
      while (*(_QWORD *)&v21 != v22);
    }
    a2[31] = 0;
  }
  if (a2[52])
  {
    v23 = (_QWORD *)a2[51];
    if (v23)
    {
      do
      {
        v24 = (_QWORD *)*v23;
        operator delete(v23);
        v23 = v24;
      }
      while (v24);
    }
    a2[51] = 0;
    v25 = a2[50];
    if (v25)
    {
      v26 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&a2[49] + 8 * v26++) = 0;
      while (*(_QWORD *)&v25 != v26);
    }
    a2[52] = 0;
  }
  if (a2[47])
  {
    v27 = (_QWORD *)a2[46];
    if (v27)
    {
      do
      {
        v28 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v28;
      }
      while (v28);
    }
    a2[46] = 0;
    v29 = a2[45];
    if (v29)
    {
      v30 = 0;
      do
        *(_QWORD *)(*(_QWORD *)v12 + 8 * v30++) = 0;
      while (*(_QWORD *)&v29 != v30);
    }
    a2[47] = 0;
  }
  a2[54] = 0;
}

float sub_223ACC0DC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  char *v4;
  float result;
  uint64_t *v6;

  if (a1)
  {
    v3 = a1;
    do
    {
      v6 = v3 + 2;
      v4 = sub_223ACC3BC(a2, (int *)v3 + 4, (uint64_t)&unk_2245BA939, &v6);
      *((_DWORD *)v4 + 8) += *((_DWORD *)v3 + 8);
      *((float *)v4 + 7) = *((float *)v3 + 7) + *((float *)v4 + 7);
      *((_DWORD *)v4 + 10) += *((_DWORD *)v3 + 10);
      *((float *)v4 + 9) = *((float *)v3 + 9) + *((float *)v4 + 9);
      *((_DWORD *)v4 + 12) += *((_DWORD *)v3 + 12);
      *((float *)v4 + 11) = *((float *)v3 + 11) + *((float *)v4 + 11);
      *((_DWORD *)v4 + 14) += *((_DWORD *)v3 + 14);
      *((float *)v4 + 13) = *((float *)v3 + 13) + *((float *)v4 + 13);
      *((_DWORD *)v4 + 16) += *((_DWORD *)v3 + 16);
      *((float *)v4 + 15) = *((float *)v3 + 15) + *((float *)v4 + 15);
      *((_DWORD *)v4 + 18) += *((_DWORD *)v3 + 18);
      *((float *)v4 + 17) = *((float *)v3 + 17) + *((float *)v4 + 17);
      *((_DWORD *)v4 + 20) += *((_DWORD *)v3 + 20);
      *((float *)v4 + 19) = *((float *)v3 + 19) + *((float *)v4 + 19);
      *((_DWORD *)v4 + 22) += *((_DWORD *)v3 + 22);
      *((float *)v4 + 21) = *((float *)v3 + 21) + *((float *)v4 + 21);
      *((_DWORD *)v4 + 24) += *((_DWORD *)v3 + 24);
      *((float *)v4 + 23) = *((float *)v3 + 23) + *((float *)v4 + 23);
      *((_DWORD *)v4 + 26) += *((_DWORD *)v3 + 26);
      *((float *)v4 + 25) = *((float *)v3 + 25) + *((float *)v4 + 25);
      *((_DWORD *)v4 + 28) += *((_DWORD *)v3 + 28);
      *((float *)v4 + 27) = *((float *)v3 + 27) + *((float *)v4 + 27);
      *((_DWORD *)v4 + 30) += *((_DWORD *)v3 + 30);
      *((float *)v4 + 29) = *((float *)v3 + 29) + *((float *)v4 + 29);
      *((_DWORD *)v4 + 32) += *((_DWORD *)v3 + 32);
      *((float *)v4 + 31) = *((float *)v3 + 31) + *((float *)v4 + 31);
      *((_DWORD *)v4 + 34) += *((_DWORD *)v3 + 34);
      *((float *)v4 + 33) = *((float *)v3 + 33) + *((float *)v4 + 33);
      *((_DWORD *)v4 + 36) += *((_DWORD *)v3 + 36);
      *((float *)v4 + 35) = *((float *)v3 + 35) + *((float *)v4 + 35);
      *((_DWORD *)v4 + 38) += *((_DWORD *)v3 + 38);
      *((float *)v4 + 37) = *((float *)v3 + 37) + *((float *)v4 + 37);
      *((_DWORD *)v4 + 40) += *((_DWORD *)v3 + 40);
      *((float *)v4 + 39) = *((float *)v3 + 39) + *((float *)v4 + 39);
      *((_DWORD *)v4 + 42) += *((_DWORD *)v3 + 42);
      *((float *)v4 + 41) = *((float *)v3 + 41) + *((float *)v4 + 41);
      *((_DWORD *)v4 + 44) += *((_DWORD *)v3 + 44);
      *((float *)v4 + 43) = *((float *)v3 + 43) + *((float *)v4 + 43);
      *((_DWORD *)v4 + 46) += *((_DWORD *)v3 + 46);
      result = *((float *)v3 + 45) + *((float *)v4 + 45);
      *((float *)v4 + 45) = result;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return result;
}

char *sub_223ACC3BC(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = (19349669 * v8) ^ (73856093 * *a2) ^ (83492791 * v9);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (19349669 * v8) ^ (73856093 * v7) ^ (83492791 * v9);
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
                return (char *)v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
              return (char *)v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v18 = (char *)operator new(0xC0uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = **a4;
  *((_DWORD *)v18 + 6) = *((_DWORD *)*a4 + 2);
  *((_QWORD *)v18 + 2) = v19;
  *(_OWORD *)(v18 + 28) = 0u;
  *(_OWORD *)(v18 + 44) = 0u;
  *(_OWORD *)(v18 + 60) = 0u;
  *(_OWORD *)(v18 + 76) = 0u;
  *(_OWORD *)(v18 + 92) = 0u;
  *(_OWORD *)(v18 + 108) = 0u;
  *(_OWORD *)(v18 + 124) = 0u;
  *(_OWORD *)(v18 + 140) = 0u;
  *(_OWORD *)(v18 + 156) = 0u;
  *(_OWORD *)(v18 + 172) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_30:
      *(_QWORD *)v18 = *v23;
LABEL_65:
      *v23 = v18;
      goto LABEL_66;
    }
  }
  else
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_41;
    if (prime < v11)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v11)
LABEL_41:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v23)
          goto LABEL_30;
      }
      else
      {
        v4 = v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v23)
          goto LABEL_30;
      }
    }
    else
    {
      v4 = v31 & v10;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v10));
      if (v23)
        goto LABEL_30;
    }
  }
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v18)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11)
        v32 %= v11;
    }
    else
    {
      v32 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_223ACC760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223ACC774(uint64_t *a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = (19349669 * v8) ^ (73856093 * *a2) ^ (83492791 * v9);
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (19349669 * v8) ^ (73856093 * v7) ^ (83492791 * v9);
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v17 = a1 + 2;
  v14 = operator new(0x48uLL);
  *v14 = 0;
  v14[1] = v10;
  v18 = **a4;
  *((_DWORD *)v14 + 6) = *((_DWORD *)*a4 + 2);
  v14[2] = v18;
  v14[8] = 0;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_DWORD *)v14 + 16) = 1065353216;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = a1[1];
    }
    if (prime > v11)
    {
LABEL_41:
      if (prime >> 61)
        sub_223174E94();
      v27 = operator new(8 * prime);
      v28 = (void *)*a1;
      *a1 = (uint64_t)v27;
      if (v28)
        operator delete(v28);
      v29 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v29++) = 0;
      while (prime != v29);
      v30 = (_QWORD *)*v17;
      if (!*v17)
        goto LABEL_73;
      v31 = v30[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*a1 + 8 * v33) = v17;
        for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v30 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v35))
          {
            *v30 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*a1 + v36);
            **(_QWORD **)(*a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v35) = v30;
            v30 = i;
            v33 = v35;
          }
        }
        goto LABEL_73;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*a1 + 8 * v31) = v17;
      v40 = (_QWORD *)*v30;
      if (!*v30)
      {
LABEL_73:
        v11 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_74;
        goto LABEL_89;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_67;
        if (*(_QWORD *)(*a1 + 8 * v42))
        {
          *v30 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*a1 + v41);
          **(_QWORD **)(*a1 + v41) = v40;
          v40 = v30;
LABEL_67:
          v30 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v42) = v30;
          v30 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_73;
        }
      }
    }
    if (prime < v11)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v11)
      {
        if (!prime)
        {
          v44 = (void *)*a1;
          *a1 = 0;
          if (v44)
            operator delete(v44);
          v11 = 0;
          a1[1] = 0;
          v43 = -1;
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      v11 = a1[1];
    }
    v43 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_74:
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_30;
      }
      else
      {
        v4 = v10;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * v10);
        if (v22)
          goto LABEL_30;
      }
      goto LABEL_90;
    }
LABEL_89:
    v4 = v43 & v10;
    v21 = *a1;
    v22 = *(_QWORD **)(*a1 + 8 * (v43 & v10));
    if (v22)
      goto LABEL_30;
    goto LABEL_90;
  }
  v21 = *a1;
  v22 = *(_QWORD **)(*a1 + 8 * v4);
  if (v22)
  {
LABEL_30:
    *v14 = *v22;
LABEL_96:
    *v22 = v14;
    goto LABEL_97;
  }
LABEL_90:
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v21 + 8 * v4) = v17;
  if (*v14)
  {
    v45 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    v22 = (_QWORD *)(*a1 + 8 * v45);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  return v14;
}

void sub_223ACCCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238BBFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACCCC0(char **a1)
{
  unint64_t v1;
  uint64_t v3;
  int i;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  float32x2_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  char v18;
  float32x2_t v19;
  char *v20;
  float32x2_t v21;
  float32x2_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  char v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  char *v57;
  float *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  float32x2_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  float32x2_t v74;
  float v75;
  float v76;
  char *v77;
  float32x2_t v78;
  float32x2_t v79;
  unint64_t v80;
  __int128 v81;
  void *__p;
  void *v83;
  char *v84;
  __int128 v85;

  v1 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  if (v1 >= 4)
  {
    while (1)
    {
      v3 = 0;
      for (i = 2; ; ++i)
      {
        v5 = *a1;
        v6 = a1[1];
        v7 = (uint64_t)&(*a1)[40 * v3];
        __p = *(void **)(v7 + 4);
        v83 = *(void **)(v7 + 12);
        LODWORD(v5) = -858993459 * ((unint64_t)(v6 - v5) >> 3);
        v8 = (_DWORD)v5 - 4;
        if ((_DWORD)v5 != 4)
          break;
LABEL_6:
        if (++v3 == v1)
          return;
      }
      v9 = i;
      while (1)
      {
        v10 = v9 % (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3));
        v85 = *(_OWORD *)&(*a1)[40 * v10 + 4];
        if ((sub_22369F3FC((float32x2_t *)&__p, (float32x2_t *)&v85, (float32x2_t *)&v81, 0) & 1) != 0)
          break;
        ++v9;
        if (!--v8)
          goto LABEL_6;
      }
      if (v10 <= v3)
      {
        v12 = *a1;
        v13 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
        v11 = v10 - v3 - 0x3333333333333333 * ((a1[1] - *a1) >> 3);
      }
      else
      {
        LODWORD(v11) = v10 - v3;
        v12 = *a1;
        v13 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
      }
      v14 = (float32x2_t)v81;
      v80 = v13;
      v15 = v13 - v11;
      if (v11 <= v15)
        v16 = v3;
      else
        v16 = v10;
      if (v11 <= v15)
        LODWORD(v3) = v10;
      __p = 0;
      v83 = 0;
      v84 = 0;
      v17 = &v12[40 * v3];
      v18 = *v17;
      v19 = *(float32x2_t *)(v17 + 12);
      v85 = *(_OWORD *)(v17 + 24);
      v20 = (char *)operator new(0x28uLL);
      v21 = v14;
      v22 = vsub_f32(v19, v14);
      v23 = v20 + 40;
      *v20 = v18;
      v79 = v14;
      *(float32x2_t *)(v20 + 4) = v14;
      *(float32x2_t *)(v20 + 12) = v19;
      *((float *)v20 + 5) = sqrtf(vmla_lane_f32(vmul_f32(v22, v22), (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22, 1).f32[0]);
      *(_OWORD *)(v20 + 24) = v85;
      v83 = v20 + 40;
      v84 = v20 + 40;
      __p = v20;
      v24 = (v3 + 1) % v80;
      v25 = v20 + 40;
      if (v16 != (_DWORD)v24)
        break;
LABEL_44:
      v41 = &v12[40 * v16];
      v42 = *v41;
      v43 = *(float32x2_t *)(v41 + 4);
      v81 = *(_OWORD *)(v41 + 24);
      v44 = vsub_f32(v21, v43);
      v45 = sqrtf(vmla_lane_f32(vmul_f32(v44, v44), (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v44, 1).f32[0]);
      if (v23 < v25)
      {
        *v23 = v42;
        *(float32x2_t *)(v23 + 4) = v43;
        *(float32x2_t *)(v23 + 12) = v79;
        *((float *)v23 + 5) = v45;
        *(_OWORD *)(v23 + 24) = v81;
        v46 = v23 + 40;
        v83 = v23 + 40;
        if (&__p == (void **)a1)
          goto LABEL_66;
        goto LABEL_65;
      }
      v47 = (char *)__p;
      v48 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)__p) >> 3);
      v49 = v48 + 1;
      if (v48 + 1 > 0x666666666666666)
        sub_22316E078();
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)__p) >> 3);
      if (2 * v50 > v49)
        v49 = 2 * v50;
      if (v50 >= 0x333333333333333)
        v51 = 0x666666666666666;
      else
        v51 = v49;
      if (v51)
      {
        if (v51 > 0x666666666666666)
          sub_223174E94();
        v52 = (char *)operator new(40 * v51);
      }
      else
      {
        v52 = 0;
      }
      v53 = &v52[40 * v48];
      *v53 = v42;
      *(float32x2_t *)(v53 + 4) = v43;
      *(float32x2_t *)(v53 + 12) = v79;
      *((float *)v53 + 5) = v45;
      *(_OWORD *)(v53 + 24) = v81;
      v46 = v53 + 40;
      if (v23 == v47)
      {
        __p = &v52[40 * v48];
        v83 = v53 + 40;
        v84 = &v52[40 * v51];
      }
      else
      {
        v54 = 0;
        do
        {
          v55 = &v53[v54];
          *(v55 - 40) = v23[v54 - 40];
          *(_QWORD *)(v55 - 36) = *(_QWORD *)&v23[v54 - 36];
          *(_QWORD *)(v55 - 28) = *(_QWORD *)&v23[v54 - 28];
          v56 = *(_OWORD *)&v23[v54 - 20];
          *((_DWORD *)v55 - 1) = *(_DWORD *)&v23[v54 - 4];
          *(_OWORD *)(v55 - 20) = v56;
          v54 -= 40;
        }
        while (&v23[v54] != v47);
        v23 = (char *)__p;
        __p = &v53[v54];
        v83 = v53 + 40;
        v84 = &v52[40 * v51];
        if (!v23)
        {
          v83 = v53 + 40;
          if (&__p == (void **)a1)
            goto LABEL_66;
LABEL_65:
          sub_223ACD508(a1, (char *)__p, v46, 0xCCCCCCCCCCCCCCCDLL * ((v46 - (_BYTE *)__p) >> 3));
          goto LABEL_66;
        }
      }
      operator delete(v23);
      v83 = v46;
      if (&__p != (void **)a1)
        goto LABEL_65;
LABEL_66:
      v58 = (float *)*a1;
      v57 = a1[1];
      v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57 - *a1) >> 3);
      if (v57 != *a1)
      {
        v60 = 0;
        v61 = 0;
        do
        {
          if (v58[10 * v60 + 5] >= 0.001)
          {
            ++v61;
          }
          else
          {
            v62 = 10 * ((v61 + 1) % v59);
            v63 = 10 * v60;
            *(_QWORD *)&v58[v63 + 3] = *(_QWORD *)&v58[v62 + 3];
            v64 = *a1;
            v65 = (uint64_t)&(*a1)[v63 * 4];
            v66 = vsub_f32(*(float32x2_t *)(v65 + 12), *(float32x2_t *)(v65 + 4));
            *(float *)(v65 + 20) = sqrtf(vmla_lane_f32(vmul_f32(v66, v66), (float32x2_t)vdup_lane_s32((int32x2_t)v66, 1), v66, 1).f32[0]);
            v57 = &v64[v62 * 4];
            v67 = v57 + 40;
            v68 = a1[1];
            if (v57 + 40 != v68)
            {
              do
              {
                *v57 = *v67;
                *(_QWORD *)(v57 + 4) = *(_QWORD *)(v67 + 4);
                *(_QWORD *)(v57 + 12) = *(_QWORD *)(v67 + 12);
                *(_OWORD *)(v57 + 20) = *(_OWORD *)(v67 + 20);
                *((_DWORD *)v57 + 9) = *((_DWORD *)v67 + 9);
                v67 += 40;
                v57 += 40;
              }
              while (v67 != v68);
            }
            a1[1] = v57;
            v58 = (float *)*a1;
          }
          v60 = v61;
          v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57 - (char *)v58) >> 3);
        }
        while (v59 > v61);
      }
      if (v59)
      {
        v69 = 0;
        do
        {
          v71 = *a1;
          v70 = a1[1];
          v72 = v69;
          v73 = (uint64_t)&(*a1)[40 * v69];
          v74 = vsub_f32(*(float32x2_t *)(v73 + 12), *(float32x2_t *)(v73 + 4));
          v75 = sqrtf(vmla_lane_f32(vmul_f32(v74, v74), (float32x2_t)vdup_lane_s32((int32x2_t)v74, 1), v74, 1).f32[0]);
          v76 = *(float *)(v73 + 20);
          v77 = *a1;
          if (vabds_f32(v75, v76) >= 0.001)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaBoundary.cpp", 241, (uint64_t)"std::abs((this->operator[](index).end - this->operator[](index).start).norm2() - this->operator[](index).length) < 1e-3f", 120, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_89;
            }
            v77 = *a1;
            v76 = *(float *)&(*a1)[40 * v69 + 20];
          }
          if (v76 < 0.001)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaBoundary.cpp", 242, (uint64_t)"this->operator[](index).length >= 1e-3f", 39, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_89;
            }
            v77 = *a1;
          }
          v78 = vsub_f32(*(float32x2_t *)&v77[40 * v72 + 12], *(float32x2_t *)&v77[40 * (++v69 % (0xCCCCCCCCCCCCCCCDLL * ((v70 - v71) >> 3))) + 4]);
          if (sqrtf(vmla_lane_f32(vmul_f32(v78, v78), (float32x2_t)vdup_lane_s32((int32x2_t)v78, 1), v78, 1).f32[0]) >= 0.001
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaBoundary.cpp", 244, (uint64_t)"(this->operator[](index).end - this->operator[](index2).start).norm2() < 1e-3f", 78, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
LABEL_89:
            abort();
          }
        }
        while (v59 != v69);
      }
      if (__p)
      {
        v83 = __p;
        operator delete(__p);
      }
      v1 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
      if (v1 < 4)
        return;
    }
    while (1)
    {
      v28 = &v12[40 * v24];
      if (v23 >= v84)
        break;
      *v23 = *v28;
      v26 = &v12[40 * v24];
      *(_QWORD *)(v23 + 4) = *(_QWORD *)(v26 + 4);
      *(_QWORD *)(v23 + 12) = *(_QWORD *)(v26 + 12);
      v27 = *(_OWORD *)(v26 + 20);
      *((_DWORD *)v23 + 9) = *((_DWORD *)v26 + 9);
      *(_OWORD *)(v23 + 20) = v27;
      v23 += 40;
LABEL_23:
      v83 = v23;
      v12 = *a1;
      v24 = (v24 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3));
      if (v16 == (_DWORD)v24)
      {
        v25 = v84;
        goto LABEL_44;
      }
    }
    v29 = (char *)__p;
    v30 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)__p) >> 3);
    v31 = v30 + 1;
    if (v30 + 1 > 0x666666666666666)
      sub_22316E078();
    if (0x999999999999999ALL * ((v84 - (_BYTE *)__p) >> 3) > v31)
      v31 = 0x999999999999999ALL * ((v84 - (_BYTE *)__p) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v84 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
      v32 = 0x666666666666666;
    else
      v32 = v31;
    if (v32)
    {
      if (v32 > 0x666666666666666)
        sub_223174E94();
      v33 = (char *)operator new(40 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[40 * v30];
    *v34 = *v28;
    v35 = &v12[40 * v24];
    *(_QWORD *)(v34 + 4) = *(_QWORD *)(v35 + 4);
    *(_QWORD *)(v34 + 12) = *(_QWORD *)(v35 + 12);
    v36 = *(_OWORD *)(v35 + 20);
    *((_DWORD *)v34 + 9) = *((_DWORD *)v35 + 9);
    *(_OWORD *)(v34 + 20) = v36;
    v37 = v34 + 40;
    if (v23 == v29)
    {
      __p = &v33[40 * v30];
      v83 = v34 + 40;
      v84 = &v33[40 * v32];
    }
    else
    {
      v38 = 0;
      do
      {
        v39 = &v34[v38];
        *(v39 - 40) = v23[v38 - 40];
        *(_QWORD *)(v39 - 36) = *(_QWORD *)&v23[v38 - 36];
        *(_QWORD *)(v39 - 28) = *(_QWORD *)&v23[v38 - 28];
        v40 = *(_OWORD *)&v23[v38 - 20];
        *((_DWORD *)v39 - 1) = *(_DWORD *)&v23[v38 - 4];
        *(_OWORD *)(v39 - 20) = v40;
        v38 -= 40;
      }
      while (&v23[v38] != v29);
      v23 = (char *)__p;
      __p = &v34[v38];
      v83 = v34 + 40;
      v84 = &v33[40 * v32];
      if (!v23)
        goto LABEL_42;
    }
    operator delete(v23);
LABEL_42:
    v23 = v37;
    goto LABEL_23;
  }
}

void sub_223ACD4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223ACD508(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *v25 = *v6;
          *(_QWORD *)(v25 + 4) = *(_QWORD *)(v6 + 4);
          *(_QWORD *)(v25 + 12) = *(_QWORD *)(v6 + 12);
          v26 = *(_OWORD *)(v6 + 20);
          *((_DWORD *)v25 + 9) = *((_DWORD *)v6 + 9);
          *(_OWORD *)(v25 + 20) = v26;
          v24 += 40;
          v6 += 40;
          v25 += 40;
        }
        while (v6 != a3);
      }
      *v16 = v24;
    }
    else
    {
      v19 = &a2[40 * v18];
      if (v15 != result)
      {
        do
        {
          *result = *v6;
          *(_QWORD *)(result + 4) = *(_QWORD *)(v6 + 4);
          *(_QWORD *)(result + 12) = *(_QWORD *)(v6 + 12);
          v20 = *(_OWORD *)(v6 + 20);
          *((_DWORD *)result + 9) = *((_DWORD *)v6 + 9);
          *(_OWORD *)(result + 20) = v20;
          v6 += 40;
          result += 40;
        }
        while (v6 != v19);
        result = *v16;
      }
      v21 = result;
      if (v19 != a3)
      {
        v21 = result;
        v22 = result;
        do
        {
          *v22 = *v19;
          *(_QWORD *)(v22 + 4) = *(_QWORD *)(v19 + 4);
          *(_QWORD *)(v22 + 12) = *(_QWORD *)(v19 + 12);
          v23 = *(_OWORD *)(v19 + 20);
          *((_DWORD *)v22 + 9) = *((_DWORD *)v19 + 9);
          *(_OWORD *)(v22 + 20) = v23;
          v21 += 40;
          v19 += 40;
          v22 += 40;
        }
        while (v19 != a3);
      }
      *v16 = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_22316E078();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *v14 = *v6;
        *(_OWORD *)(v14 + 4) = *(_OWORD *)(v6 + 4);
        *(_OWORD *)(v14 + 20) = *(_OWORD *)(v6 + 20);
        *((_DWORD *)v14 + 9) = *((_DWORD *)v6 + 9);
        v14 += 40;
        v6 += 40;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

uint64_t sub_223ACD76C(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float *v4;
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float v11;
  float v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float v23;
  int v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  float v47;
  float *v48;
  __int32 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  float v56;
  unsigned __int8 v57;
  const char *v58;
  size_t v59;
  void *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD v107[3];
  int v108;
  const char *v109;
  int v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t v115;
  void *object;
  void *v117[2];
  __int128 v118;
  void *__p[2];
  unint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;

  v4 = (float *)a2 + 1;
  v5 = a2->f32[1];
  v6 = *a2;
  v7 = *a4;
  v8 = (float32x2_t)vdup_lane_s32((int32x2_t)*a4, 1);
  v9 = vmla_lane_f32(vmul_f32(*a2, *a4), v8, *a2, 1).f32[0];
  if (v9 <= -0.98481 || v9 >= 0.98481)
  {
    if (v9 < 0.0)
    {
      v11 = fabsf(v6.f32[0]);
      v12 = fabsf(v5);
      v13 = 4 * (v11 <= v12);
      v14 = (float *)((char *)a3 + v13);
      v15 = (float *)((char *)a1 + v13);
      if (v11 > v12)
        LODWORD(v16) = *(float32x2_t *)a2->f32;
      else
        v16 = a2->f32[1];
      if ((float)((float)(v14[2] - v15[2]) / v16) < 0.0)
        return 5;
      a2->f32[0] = v5;
      a2->f32[1] = -v6.f32[0];
      v49 = a4->i32[0];
      a4->f32[0] = -a4->f32[1];
      a4->i32[1] = v49;
      return 3;
    }
    v34 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*a1, a3[1])), vsub_f32(a1[1], *a1));
    return vsub_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)).f32[0] < 0.0;
  }
  v18 = a2->f32[0];
  v19 = a4->f32[1];
  v20 = a4->f32[0];
  v21 = (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1);
  v115 = 0;
  v22 = vmla_f32(vmul_f32(v6, v6), v21, v21).f32[0];
  LODWORD(v23) = vmla_f32(vmul_f32(v7, v7), v8, v8).u32[0];
  if (v22 < 0.00000001 || v23 < 0.00000001)
    goto LABEL_16;
  v35 = vmul_f32(v6, (float32x2_t)vrev64_s32((int32x2_t)v7));
  v36 = vabds_f32(v35.f32[0], v35.f32[1]);
  v37 = vabds_f32(v35.f32[1], v35.f32[0]);
  if (v36 > v37)
  {
    if (v36 >= 0.00001)
    {
      v38 = a3[1].f32[0];
      v39 = a3[1].f32[1];
      v40 = a1[1].f32[0];
      v41 = a1[1].f32[1];
      v42 = (float)((float)((float)(vmuls_lane_f32(v38, v6, 1) - (float)(v39 * v6.f32[0])) - vmuls_lane_f32(v40, v6, 1))
                  - (float)(v41 * v6.f32[0]))
          / (float)(v35.f32[0] - v35.f32[1]);
      *((float *)&v115 + 1) = v42;
      v43 = fabsf(v7.f32[0]);
      v44 = fabsf(v19);
      v45 = v43 <= v44;
      if (v43 <= v44)
        v46 = v41;
      else
        v46 = v40;
      if (v45)
        v38 = v39;
      else
        v4 = (float *)a2;
      if (v45)
        v47 = v19;
      else
        v47 = v7.f32[0];
      v48 = (float *)&v115;
      goto LABEL_53;
    }
LABEL_16:
    sub_223ACE25C(&v114);
    if (**(int **)(v114 + 56) > 4)
      return 0;
    v25 = *(unsigned __int8 *)(v114 + 72);
    v26 = sub_22322F254(v114, "OSLogSurrogateAppender", 1, 0);
    if (!v25 && v26 == 0)
      return 0;
    v28 = v26;
    v107[0] = &v114;
    v107[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v107[2] = std::chrono::system_clock::now().__d_.__rep_;
    v108 = 4;
    v109 = "unknown file";
    v110 = 458;
    v112 = 0;
    v113 = 0;
    v111 = "unknown function";
    v29 = v114;
    v30 = v114 + 16;
    if (*(char *)(v114 + 39) < 0)
    {
      v32 = *(const char **)(v114 + 16);
      v31 = *(_QWORD *)(v114 + 24);
      v57 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v57 & 1) != 0)
        goto LABEL_66;
    }
    else
    {
      v31 = *(unsigned __int8 *)(v114 + 39);
      v32 = (const char *)(*(_QWORD *)v107[0] + 16);
      v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v33 & 1) != 0)
        goto LABEL_66;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
      if ((_BYTE)v118 && SHIBYTE(v117[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_66:
    if (byte_255788F40[23] >= 0)
      v58 = byte_255788F40;
    else
      v58 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v59 = byte_255788F40[23];
    else
      v59 = *(_QWORD *)&byte_255788F40[8];
    object = os_log_create(v58, v32);
    v60 = v117;
    if (v59 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v59 >= 0x17)
    {
      v61 = v28;
      v62 = v32;
      v63 = v29;
      v64 = v25;
      v65 = v30;
      v66 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17)
        v66 = v59 | 7;
      v67 = v66 + 1;
      v60 = operator new(v66 + 1);
      v117[1] = (void *)v59;
      *(_QWORD *)&v118 = v67 | 0x8000000000000000;
      v117[0] = v60;
      v30 = v65;
      v25 = v64;
      v29 = v63;
      v32 = v62;
      v28 = v61;
    }
    else
    {
      BYTE7(v118) = v59;
      if (!v59)
      {
LABEL_80:
        *((_BYTE *)v60 + v59) = 0;
        BYTE8(v118) = 1;
        v68 = __p;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v31 >= 0x17)
        {
          v69 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v69 = v31 | 7;
          v70 = v69 + 1;
          v68 = operator new(v69 + 1);
          __p[1] = (void *)v31;
          v120 = v70 | 0x8000000000000000;
          __p[0] = v68;
        }
        else
        {
          HIBYTE(v120) = v31;
          if (!v31)
            goto LABEL_88;
        }
        memmove(v68, v32, v31);
LABEL_88:
        *((_BYTE *)v68 + v31) = 0;
        v121 = 1;
        v71 = object;
        if (SHIBYTE(v120) < 0)
          operator delete(__p[0]);
        if (BYTE8(v118) && SBYTE7(v118) < 0)
          operator delete(v117[0]);
        if (object)
          os_release(object);
        if (v28 && *(_QWORD *)(v28 + 24))
        {
          v72 = _os_log_pack_size();
          v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
          v74 = (std::__shared_weak_count *)operator new();
          v75 = v74;
          v74->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v74->__shared_owners_;
          v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v74->__shared_weak_owners_ = 0;
          v74[1].__vftable = v73;
          object = v73;
          v117[0] = v73;
          v117[1] = v74;
          do
            v77 = __ldxr(p_shared_owners);
          while (__stxr(v77 + 1, p_shared_owners));
          v118 = 0uLL;
          __p[0] = 0;
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v75);
          }
          v79 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v80 = operator new();
          v81 = *(unsigned __int8 *)(v29 + 39);
          if ((v81 & 0x80u) == 0)
            v82 = v30;
          else
            v82 = *(_QWORD *)(v29 + 16);
          if ((v81 & 0x80u) != 0)
            v81 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)v80 = v79;
          *(_OWORD *)(v80 + 8) = *(_OWORD *)v117;
          v117[0] = 0;
          v117[1] = 0;
          *(_OWORD *)(v80 + 24) = v118;
          v118 = 0uLL;
          *(_QWORD *)(v80 + 40) = v82;
          *(_QWORD *)(v80 + 48) = v81;
          *(_BYTE *)(v80 + 56) = 16;
          v122 = 0;
          v123 = v80;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v123);
          v83 = v123;
          v123 = 0;
          if (v83)
          {
            v84 = *(std::__shared_weak_count **)(v83 + 32);
            if (v84)
            {
              v85 = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = *(std::__shared_weak_count **)(v83 + 16);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
            v90 = v122;
            v122 = 0;
            if (v90)
            {
              v91 = *(std::__shared_weak_count **)(v90 + 32);
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              v94 = *(std::__shared_weak_count **)(v90 + 16);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
            }
          }
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
          if (*((_QWORD *)&v118 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = (std::__shared_weak_count *)v117[1];
          if (v117[1])
          {
            v101 = (unint64_t *)((char *)v117[1] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
        }
        else
        {
          os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v103 = (void *)_os_log_send_and_compose_impl();
          if (v103)
            free(v103);
        }
        if (v25)
        {
          sub_22322C138((uint64_t)v107, "Boundary expansion lines are parallel");
          sub_223182C08((uint64_t)v107);
        }
        sub_223182C08((uint64_t)v107);
        v104 = v113;
        if (v113)
        {
          v105 = (unint64_t *)&v113->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        return 0;
      }
    }
    memmove(v60, v58, v59);
    goto LABEL_80;
  }
  if (v37 < 0.00001)
    goto LABEL_16;
  v38 = a1[1].f32[0];
  v50 = a1[1].f32[1];
  v52 = a3[1].f32[0];
  v51 = a3[1].f32[1];
  v42 = (float)((float)((float)(vmuls_lane_f32(v38, v6, 1) - (float)(v50 * v6.f32[0])) + (float)(v51 * v6.f32[0]))
              - vmuls_lane_f32(v52, v6, 1))
      / (float)(v35.f32[1] - v35.f32[0]);
  *(float *)&v115 = v42;
  v53 = fabsf(v6.f32[0]);
  v54 = fabsf(v5);
  v55 = v53 <= v54;
  if (v53 <= v54)
    v46 = v51;
  else
    v46 = v52;
  if (v55)
    v4 = (float *)a4 + 1;
  else
    v4 = (float *)a4;
  if (v55)
    v38 = v50;
  if (v55)
    v47 = v5;
  else
    v47 = v6.f32[0];
  v48 = (float *)&v115 + 1;
LABEL_53:
  v56 = (float)(v18 * v19) - (float)(v5 * v20);
  *v48 = (float)((float)(v46 + (float)(v42 * *v4)) - v38) / v47;
  if (*((float *)&v115 + 1) >= 0.0 && *(float *)&v115 >= 0.0)
  {
    if (v56 < 0.0)
    {
      if (v9 >= 0.5)
        return 1;
      else
        return 2;
    }
    return 0;
  }
  if (*((float *)&v115 + 1) > 0.0 || *(float *)&v115 > 0.0)
  {
    if (*((float *)&v115 + 1) > 0.0)
    {
      a2->f32[0] = v5;
      a2->f32[1] = -v6.f32[0];
    }
    else
    {
      a4->f32[0] = -v19;
      a4->i32[1] = v7.i32[0];
    }
    if (vmla_lane_f32(vmul_f32(*a2, *a4), (float32x2_t)vdup_lane_s32((int32x2_t)*a4, 1), *a2, 1).f32[0] >= 0.5)
      return 3;
    else
      return 2;
  }
  else if (v56 <= 0.0)
  {
    if (v9 >= 0.17365)
      return 4;
    else
      return 6;
  }
  else if (v9 <= -0.17365)
  {
    return 5;
  }
  else
  {
    return 4;
  }
}

void sub_223ACE134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223ACE174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v4 - 96));
  sub_22319A054((uint64_t *)(v4 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACE1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACE1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x227684CE8](v4, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACE1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACE204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223ACE218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223ACE25C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCD88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCD88))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCD80);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCD88);
  }
  *a1 = qword_2540CCD80;
}

void sub_223ACE2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCD88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCD88);
  _Unwind_Resume(a1);
}

void sub_223ACE350(uint64_t *a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, unsigned int a4@<W4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float32x2_t *a7@<X7>, uint64_t a8@<X8>, double a9@<D5>, double a10@<D7>, float *a11)
{
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t *v33;
  float32x2_t v34;
  float32x2_t v35;
  unint64_t v36;
  float v37;
  float v38;
  unint64_t v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t i;
  float32x2_t v46;
  float v47;
  float v48;
  uint64_t v51;
  float32x2_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x2_t v58;
  float v59;
  float v60;
  float v65;
  float32x2_t *v66;
  float32x2_t *v67;
  float32x2_t v68;
  float32x2_t *v69;
  void *v70;
  unint64_t v71;
  float32x2_t *v72;
  float32x2_t *v73;
  unint64_t v74;
  float32x2_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  float32x2_t *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  float32x2_t *v97;
  char *v98;
  unint64_t v99;
  float32x2_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  float32x2_t *v104;
  uint64_t v105;
  __int128 v106;
  float32x2_t v107;
  unint64_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float v113;
  float v114;
  float32x2_t *v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float v127;
  float *v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float32x2_t *v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  unint64_t v141;
  float32x2_t *v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  float32x2_t *v161;
  float32x2_t *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  float32x2_t *v169;
  char *v170;
  char *v171;
  unint64_t v172;
  float32x2_t *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  float v178;
  float v179;
  float v180;
  float v181;
  unint64_t j;
  float32x2_t v183;
  float v184;
  float v185;
  float v188;
  float v189;
  float v190;
  float v191;
  float32x2_t v192;
  float v193;
  float v194;
  float v198;
  float v200;
  float32x2_t v201;
  unint64_t v202;
  float32x2_t *v203;
  float32x2_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _BYTE *v210;
  float32x2_t *v211;
  char *v212;
  char *v213;
  unint64_t v214;
  float32x2_t *v215;
  float v216;
  float v217;
  float v218;
  float v219;
  uint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  float32x2_t *v223;
  uint64_t v224;
  __int128 v225;
  float32x2_t v226;
  float v227;
  float32x2_t v228;
  float v229;
  float32x2_t v230;
  float32x2_t v231;
  unint64_t v232;
  float32x2_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _BYTE *v239;
  float32x2_t *v240;
  char *v241;
  char *v242;
  unint64_t v243;
  float32x2_t *v244;
  uint64_t v245;
  uint64_t v246;
  _OWORD *v247;
  float32x2_t *v248;
  uint64_t v249;
  __int128 v250;
  float32x2_t v251;
  unint64_t v252;
  float32x2_t *v253;
  float32x2_t *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _BYTE *v260;
  float32x2_t *v261;
  char *v262;
  unint64_t v263;
  float32x2_t *v264;
  float32x2_t v265;
  float32x2_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float32x2_t v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float32x2_t v288;
  float32x2_t v289;
  float v290;
  float v291;
  float v292;
  float32x2_t v293;
  BOOL v294;
  float v295;
  float v296;
  float32x2_t *v297;
  float32x2_t *v298;
  float32x2_t *v299;
  float v300;
  float v301;
  float v302;
  float32x2_t *v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float32x2_t v308;
  float32x2_t v309;
  unint64_t v310;
  float32x2_t *v311;
  float32x2_t *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  _BYTE *v318;
  float32x2_t *v319;
  char *v320;
  unint64_t v321;
  float32x2_t *v322;
  uint64_t v323;
  uint64_t v324;
  _OWORD *v325;
  float32x2_t *v326;
  uint64_t v327;
  __int128 v328;
  float32x2_t v329;
  uint64_t v330;
  uint64_t v331;
  _OWORD *v332;
  float32x2_t *v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  _OWORD *v338;
  float32x2_t *v339;
  uint64_t v340;
  __int128 v341;
  float32x2_t v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float32x2_t v347;
  unint64_t v348;
  float32x2_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  float32x2_t *v356;
  char *v357;
  unint64_t v358;
  float32x2_t *v359;
  uint64_t v360;
  uint64_t v361;
  _OWORD *v362;
  float32x2_t *v363;
  uint64_t v364;
  __int128 v365;
  float32x2_t v366;
  unint64_t v367;
  float32x2_t *v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  _BYTE *v374;
  float32x2_t *v375;
  char *v376;
  unint64_t v377;
  float32x2_t *v378;
  uint64_t v379;
  uint64_t v380;
  _OWORD *v381;
  float32x2_t *v382;
  uint64_t v383;
  __int128 v384;
  float32x2_t v385;
  unint64_t v386;
  float32x2_t *v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _BYTE *v393;
  unint64_t v394;
  float32x2_t *v395;
  uint64_t v396;
  uint64_t v397;
  _OWORD *v398;
  float32x2_t *v399;
  uint64_t v400;
  __int128 v401;
  float32x2_t v402;
  float32x2_t *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  float32x2_t *v410;
  char *v411;
  unint64_t v412;
  float32x2_t *v413;
  uint64_t v414;
  uint64_t v415;
  _OWORD *v416;
  float32x2_t *v417;
  uint64_t v418;
  __int128 v419;
  float32x2_t v420;
  unint64_t v421;
  float32x2_t *v422;
  float32x2_t *v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  _BYTE *v429;
  float32x2_t *v430;
  char *v431;
  unint64_t v432;
  float32x2_t *v433;
  uint64_t v434;
  uint64_t v435;
  _OWORD *v436;
  float32x2_t *v437;
  uint64_t v438;
  __int128 v439;
  float32x2_t v440;
  unint64_t v441;
  char *v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  _BYTE *v449;
  float32x2_t *v450;
  char *v451;
  unint64_t v452;
  float32x2_t *v453;
  uint64_t v454;
  uint64_t v455;
  _OWORD *v456;
  float32x2_t *v457;
  uint64_t v458;
  __int128 v459;
  float32x2_t v460;
  unint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  _BYTE *v469;
  _QWORD *v470;
  char *v471;
  char *v472;
  unint64_t v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  _OWORD *v477;
  char *v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  float v484;
  unsigned int v485;
  float v486;
  float v487;
  unsigned int v488;
  float *v489;
  float *v490;
  float *v491;
  float *v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float32x2_t v499;
  float v500;
  float32x2_t *v501;
  float32x2_t v503;
  float v504;
  float v505;
  float v506;
  void **v508;
  float32x2_t v509;
  float32x2_t v510;
  float32x2_t v511;
  float32x2_t v512;
  float32x2_t v513;
  unint64_t v514;

  *(_QWORD *)(a8 + 40) = 0;
  v508 = (void **)(a8 + 40);
  *(_QWORD *)(a8 + 48) = 0;
  *(_QWORD *)(a8 + 56) = 0;
  *(_BYTE *)a8 = a2;
  *(int32x2_t *)(a8 + 64) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a8 + 72) = 2139095039;
  *(_DWORD *)(a8 + 12) = a3;
  *(_DWORD *)(a8 + 16) = a4;
  v16 = *a1;
  v17 = a1[1];
  v18 = a3;
  if (*a1 == v17)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 3);
    v23 = 0.0;
  }
  else
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 3);
    v20 = v16 + 40 * a3;
    v21 = *(float *)(v20 + 4);
    v22 = *(float *)(v20 + 8);
    v23 = 0.0;
    v24 = a3;
    do
    {
      v26 = a3;
      v27 = a3;
      if (v24 != a4)
      {
        v26 = (v24 + 1) % v19;
        v27 = v26;
      }
      v25 = v16 + 40 * v26;
      v23 = v23 + (float)((float)((float)(v21 * *(float *)(v25 + 8)) - (float)(v22 * *(float *)(v25 + 4))) * 0.5);
      v21 = *(float *)(v25 + 4);
      v22 = *(float *)(v25 + 8);
      v24 = v27;
    }
    while (v27 != a3);
  }
  *(float *)(a8 + 32) = v23;
  v28 = v16 + 40 * a3;
  v29 = a7->f32[0];
  v12.i32[0] = a7->i32[1];
  *(float *)&a9 = *a11;
  v30 = a11[1];
  v31 = *a5;
  v32 = *a6;
  v34 = *(float32x2_t *)(v28 + 4);
  v33 = (float32x2_t *)(v28 + 4);
  v35 = v34;
  v36 = a4;
  *(float *)&a10 = -a7->f32[0];
  v11.f32[0] = -v30;
  LODWORD(v37) = vmla_lane_f32(vmul_f32(*a5, v12), *(float32x2_t *)&a10, *a5, 1).u32[0];
  LODWORD(v38) = vmla_lane_f32(vmul_f32(*a6, v11), *(float32x2_t *)&a9, *a6, 1).u32[0];
  v514 = __PAIR64__(LODWORD(a10), v12.u32[0]);
  v39 = a3 % v19;
  v40 = a4 % v19;
  v41 = fabsf(v29);
  v42 = fabsf(v12.f32[0]);
  if (v41 > v42)
    v43 = v29;
  else
    v43 = v12.f32[0];
  v44 = 3.4028e38;
  for (i = a3 % v19; ; i = (i + 1) % v19)
  {
    v46 = vsub_f32(v35, *(float32x2_t *)(v16 + 40 * i + 4));
    v47 = (float)(vmuls_lane_f32(v29, v46, 1) - (float)(v12.f32[0] * v46.f32[0]))
        / (float)((float)(v12.f32[0] * v12.f32[0]) + (float)(v29 * v29));
    if (v41 <= v42)
      v46.f32[0] = v46.f32[1];
    v48 = (float)((float)-v46.f32[0] - (float)(*((float *)&v514 + (v41 <= v42)) * v47)) / v43;
    if ((v47 > v44 || v44 == 3.4028e38) && v48 > 0.0)
      v44 = v47;
    if ((_DWORD)i == v40)
      break;
  }
  v51 = v16 + 40 * a4;
  v52 = *(float32x2_t *)(v51 + 4);
  v501 = (float32x2_t *)(v51 + 4);
  *(float *)&v514 = -v30;
  HIDWORD(v514) = LODWORD(a9);
  v53 = (float)(v30 * v11.f32[0]) - (float)(*(float *)&a9 * *(float *)&a9);
  v54 = fabsf(*(float *)&a9);
  v55 = fabsf(v30);
  if (v54 > v55)
    v56 = *(float *)&a9;
  else
    v56 = v30;
  v57 = 3.4028e38;
  while (1)
  {
    v58 = vsub_f32(v52, *(float32x2_t *)(v16 + 40 * v39 + 4));
    v59 = (float)(vmuls_lane_f32(*(float *)&a9, v58, 1) - (float)(v30 * v58.f32[0])) / v53;
    if (v54 <= v55)
      v58.f32[0] = v58.f32[1];
    v60 = (float)((float)-v58.f32[0] - (float)(*((float *)&v514 + (v54 <= v55)) * v59)) / v56;
    if ((v59 > v57 || v57 == 3.4028e38) && v60 > 0.0)
      v57 = v59;
    if ((_DWORD)v39 == v40)
      break;
    v39 = (v39 + 1) % v19;
  }
  if (v44 < 0.0 || v44 == 3.4028e38)
    v44 = 0.0;
  if (v57 < 0.0 || v57 == 3.4028e38)
    v65 = 0.0;
  else
    v65 = v57;
  v512 = vmla_n_f32(v52, v32, (float)(v65 / v38) + 0.01);
  v513 = vmla_n_f32(v35, v31, (float)(v44 / v37) + 0.01);
  v66 = (float32x2_t *)operator new(8uLL);
  *v66 = *v33;
  *(_QWORD *)(a8 + 48) = v66 + 1;
  *(_QWORD *)(a8 + 56) = v66 + 1;
  *(_QWORD *)(a8 + 40) = v66;
  v67 = (float32x2_t *)operator new(0x10uLL);
  v69 = v67 + 2;
  *v67 = *v66;
  v67[1] = 0;
  v70 = *(void **)(a8 + 40);
  *(_QWORD *)(a8 + 40) = v67;
  *(_QWORD *)(a8 + 48) = v67 + 2;
  *(_QWORD *)(a8 + 56) = v67 + 2;
  if (v70)
    operator delete(v70);
  *(_QWORD *)(a8 + 48) = v69;
  v71 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)v69 >= v71)
  {
    v75 = (float32x2_t *)*v508;
    v76 = ((char *)v69 - (_BYTE *)*v508) >> 3;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 61)
      goto LABEL_562;
    v78 = v71 - (_QWORD)v75;
    if (v78 >> 2 > v77)
      v77 = v78 >> 2;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v79 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    if (v79)
    {
      if (v79 >> 61)
        goto LABEL_563;
      v80 = (char *)operator new(8 * v79);
    }
    else
    {
      v80 = 0;
    }
    v81 = (float32x2_t *)&v80[8 * v76];
    v82 = &v80[8 * v79];
    *v81 = v513;
    v72 = v81 + 1;
    if (v69 == v75)
    {
      *(_QWORD *)(a8 + 40) = v81;
      *(_QWORD *)(a8 + 48) = v72;
      *(_QWORD *)(a8 + 56) = v82;
    }
    else
    {
      v83 = (char *)v67 - (char *)v75 + 8;
      if (v83 < 0x18)
        goto LABEL_574;
      v84 = (v83 >> 3) + 1;
      v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      v69 = (float32x2_t *)((char *)v69 - v85);
      v81 = (float32x2_t *)((char *)v81 - v85);
      v86 = &v80[8 * v76 - 16];
      v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v88 = *(_OWORD *)v67->f32;
        *((_OWORD *)v86 - 1) = *(_OWORD *)v67[-2].f32;
        *(_OWORD *)v86 = v88;
        v86 -= 32;
        v67 -= 4;
        v87 -= 4;
      }
      while (v87);
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_574:
        do
        {
          v89 = v69[-1];
          --v69;
          v81[-1] = v89;
          --v81;
        }
        while (v69 != v75);
      }
      v69 = *(float32x2_t **)(a8 + 40);
      *(_QWORD *)(a8 + 40) = v81;
      *(_QWORD *)(a8 + 48) = v72;
      *(_QWORD *)(a8 + 56) = v82;
      if (!v69)
      {
        v73 = a5;
        *(_QWORD *)(a8 + 48) = v72;
        v74 = *(_QWORD *)(a8 + 56);
        if ((unint64_t)v72 >= v74)
          goto LABEL_76;
        goto LABEL_73;
      }
    }
    operator delete(v69);
    v73 = a5;
    *(_QWORD *)(a8 + 48) = v72;
    v74 = *(_QWORD *)(a8 + 56);
    if ((unint64_t)v72 >= v74)
      goto LABEL_76;
LABEL_73:
    *v72 = *v73;
    v90 = v72 + 1;
    goto LABEL_96;
  }
  v67[2] = v513;
  v72 = v67 + 3;
  v73 = a5;
  *(_QWORD *)(a8 + 48) = v67 + 3;
  v74 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)&v67[3] < v74)
    goto LABEL_73;
LABEL_76:
  v91 = (float32x2_t *)*v508;
  v92 = ((char *)v72 - (_BYTE *)*v508) >> 3;
  v93 = v92 + 1;
  if ((unint64_t)(v92 + 1) >> 61)
    goto LABEL_562;
  v94 = v74 - (_QWORD)v91;
  if (v94 >> 2 > v93)
    v93 = v94 >> 2;
  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
    v95 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v95 = v93;
  if (v95)
  {
    if (v95 >> 61)
      goto LABEL_563;
    v96 = (char *)operator new(8 * v95);
  }
  else
  {
    v96 = 0;
  }
  v97 = (float32x2_t *)&v96[8 * v92];
  v98 = &v96[8 * v95];
  v73 = a5;
  *v97 = *a5;
  v90 = v97 + 1;
  if (v72 != v91)
  {
    v99 = (char *)v72 - (char *)v91 - 8;
    if (v99 >= 0x18)
    {
      v101 = (v99 >> 3) + 1;
      v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      v100 = &v72[v102 / 0xFFFFFFFFFFFFFFF8];
      v97 = (float32x2_t *)((char *)v97 - v102);
      v103 = &v96[8 * v92 - 16];
      v104 = v72 - 2;
      v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *(_OWORD *)v104->f32;
        *((_OWORD *)v103 - 1) = *(_OWORD *)v104[-2].f32;
        *(_OWORD *)v103 = v106;
        v103 -= 32;
        v104 -= 4;
        v105 -= 4;
      }
      while (v105);
      if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_94:
        v72 = *(float32x2_t **)(a8 + 40);
        *(_QWORD *)(a8 + 40) = v97;
        *(_QWORD *)(a8 + 48) = v90;
        *(_QWORD *)(a8 + 56) = v98;
        if (!v72)
          goto LABEL_96;
        goto LABEL_95;
      }
    }
    else
    {
      v100 = v72;
    }
    do
    {
      v107 = v100[-1];
      --v100;
      v97[-1] = v107;
      --v97;
    }
    while (v100 != v91);
    goto LABEL_94;
  }
  *(_QWORD *)(a8 + 40) = v97;
  *(_QWORD *)(a8 + 48) = v90;
  *(_QWORD *)(a8 + 56) = v98;
LABEL_95:
  operator delete(v72);
LABEL_96:
  *(_QWORD *)(a8 + 48) = v90;
  if (a2 == 3)
  {
    *(_DWORD *)(a8 + 72) = 0;
    v108 = *(_QWORD *)(a8 + 56);
    if ((unint64_t)v90 >= v108)
      goto LABEL_456;
LABEL_110:
    *v90 = v512;
    v116 = v90 + 1;
    goto LABEL_478;
  }
  if ((a2 - 1) > 1)
  {
    if (a2 == 4)
    {
      v117 = a7->f32[0] * a11[1];
      v118 = a7->f32[1] * *a11;
      v119 = v117 - v118;
      v120 = v118 - v117;
      v121 = vabds_f32(v117, v118);
      v122 = vabds_f32(v118, v117);
      if (v121 <= v122)
        v123 = a7->f32[1];
      else
        v123 = a11[1];
      if (v121 <= v122)
        v124 = a7->f32[0];
      else
        v124 = *a11;
      v125 = &v512;
      if (v121 <= v122)
        v126 = &v512;
      else
        v126 = &v513;
      if (v121 <= v122)
        v127 = v120;
      else
        v127 = v119;
      v128 = (float *)a6;
      if (v121 <= v122)
        v129 = (float *)v73;
      else
        v129 = (float *)a6;
      if (v121 <= v122)
        v125 = &v513;
      else
        v128 = (float *)v73;
      v130 = v512.f32[1];
      if (v121 <= v122)
        v131 = v513.f32[1];
      else
        v131 = v512.f32[1];
      if (v121 > v122)
        v130 = v513.f32[1];
      v132 = (float)((float)(v124 * v130)
                   + (float)((float)((float)(v123 * v125->f32[0]) - (float)(v124 * v131)) - (float)(v123 * v126->f32[0])))
           / v127;
      v134 = *v129;
      v133 = v129[1];
      v136 = *v128;
      v135 = v128[1];
      if (v121 <= v122)
        v137 = (float32x2_t *)a11;
      else
        v137 = a7;
      v138 = *v137;
      v139 = vadd_f32(*v126, vmul_n_f32(*v137, v132));
      v140 = *(float32x2_t *)v128;
      v141 = *(_QWORD *)(a8 + 56);
      if ((unint64_t)v90 < v141)
      {
        *v90 = v139;
        v142 = v90 + 1;
        goto LABEL_246;
      }
      v162 = (float32x2_t *)*v508;
      v163 = (char *)v90 - (_BYTE *)*v508;
      v164 = v163 >> 3;
      v165 = (v163 >> 3) + 1;
      if (v165 >> 61)
        goto LABEL_568;
      v166 = v141 - (_QWORD)v162;
      if (v166 >> 2 > v165)
        v165 = v166 >> 2;
      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
        v167 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v167 = v165;
      if (v167)
      {
        v499 = *(float32x2_t *)v128;
        v503 = v138;
        if (v167 >> 61)
          goto LABEL_569;
        v168 = operator new(8 * v167);
        v138 = v503;
        v140 = v499;
        v169 = (float32x2_t *)&v168[8 * v164];
        v170 = &v168[8 * v167];
        *v169 = v139;
        v142 = v169 + 1;
        v171 = (char *)((char *)v90 - (char *)v162);
        if (v90 != v162)
        {
LABEL_160:
          v172 = (unint64_t)(v171 - 8);
          if (v172 >= 0x58)
          {
            if ((unint64_t)((char *)v90 - v168 - v163) >= 0x20)
            {
              v220 = (v172 >> 3) + 1;
              v221 = 8 * (v220 & 0x3FFFFFFFFFFFFFFCLL);
              v173 = &v90[v221 / 0xFFFFFFFFFFFFFFF8];
              v169 = (float32x2_t *)((char *)v169 - v221);
              v222 = &v168[8 * v164 - 16];
              v223 = v90 - 2;
              v224 = v220 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v225 = *(_OWORD *)v223->f32;
                *(v222 - 1) = *(_OWORD *)v223[-2].f32;
                *v222 = v225;
                v222 -= 2;
                v223 -= 4;
                v224 -= 4;
              }
              while (v224);
              if (v220 == (v220 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_244:
                v90 = *(float32x2_t **)(a8 + 40);
                *(_QWORD *)(a8 + 40) = v169;
                *(_QWORD *)(a8 + 48) = v142;
                *(_QWORD *)(a8 + 56) = v170;
                if (!v90)
                  goto LABEL_246;
                goto LABEL_245;
              }
            }
            else
            {
              v173 = v90;
            }
          }
          else
          {
            v173 = v90;
          }
          do
          {
            v226 = v173[-1];
            --v173;
            v169[-1] = v226;
            --v169;
          }
          while (v173 != v162);
          goto LABEL_244;
        }
      }
      else
      {
        v168 = 0;
        v169 = (float32x2_t *)(8 * v164);
        v170 = 0;
        *(float32x2_t *)(8 * v164) = v139;
        v142 = (float32x2_t *)(8 * v164 + 8);
        v171 = (char *)((char *)v90 - (char *)v162);
        if (v90 != v162)
          goto LABEL_160;
      }
      *(_QWORD *)(a8 + 40) = v169;
      *(_QWORD *)(a8 + 48) = v142;
      *(_QWORD *)(a8 + 56) = v170;
LABEL_245:
      v227 = v136;
      v228 = v140;
      v504 = v123;
      v229 = v124;
      v230 = v138;
      operator delete(v90);
      v138 = v230;
      v124 = v229;
      v123 = v504;
      v140 = v228;
      v136 = v227;
LABEL_246:
      v231 = vadd_f32(v140, vmul_n_f32(v138, (float)((float)((float)((float)(v123 * v134) - (float)(v124 * v133)) - (float)(v123 * v136))+ (float)(v124 * v135))/ v127));
      *(_QWORD *)(a8 + 48) = v142;
      v232 = *(_QWORD *)(a8 + 56);
      if ((unint64_t)v142 < v232)
      {
        *v142 = v231;
        v90 = v142 + 1;
        goto LABEL_455;
      }
      v233 = (float32x2_t *)*v508;
      v234 = (char *)v142 - (_BYTE *)*v508;
      v235 = v234 >> 3;
      v236 = (v234 >> 3) + 1;
      if (!(v236 >> 61))
      {
        v237 = v232 - (_QWORD)v233;
        if (v237 >> 2 > v236)
          v236 = v237 >> 2;
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
          v238 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v238 = v236;
        if (v238)
        {
          if (!(v238 >> 61))
          {
            v239 = operator new(8 * v238);
            v240 = (float32x2_t *)&v239[8 * v235];
            v241 = &v239[8 * v238];
            *v240 = v231;
            v90 = v240 + 1;
            v242 = (char *)((char *)v142 - (char *)v233);
            if (v142 == v233)
              goto LABEL_446;
            goto LABEL_259;
          }
LABEL_569:
          sub_223174E94();
        }
        v239 = 0;
        v240 = (float32x2_t *)(8 * v235);
        v241 = 0;
        *(float32x2_t *)(8 * v235) = v231;
        v90 = (float32x2_t *)(8 * v235 + 8);
        v242 = (char *)((char *)v142 - (char *)v233);
        if (v142 != v233)
        {
LABEL_259:
          v243 = (unint64_t)(v242 - 8);
          if (v243 < 0x58)
          {
            v244 = v142;
            goto LABEL_368;
          }
          if ((unint64_t)((char *)v142 - v239 - v234) < 0x20)
          {
            v244 = v142;
            do
            {
LABEL_368:
              v329 = v244[-1];
              --v244;
              v240[-1] = v329;
              --v240;
            }
            while (v244 != v233);
            goto LABEL_453;
          }
          v323 = (v243 >> 3) + 1;
          v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
          v244 = &v142[v324 / 0xFFFFFFFFFFFFFFF8];
          v240 = (float32x2_t *)((char *)v240 - v324);
          v325 = &v239[8 * v235 - 16];
          v326 = v142 - 2;
          v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v328 = *(_OWORD *)v326->f32;
            *(v325 - 1) = *(_OWORD *)v326[-2].f32;
            *v325 = v328;
            v325 -= 2;
            v326 -= 4;
            v327 -= 4;
          }
          while (v327);
          if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_368;
LABEL_453:
          v142 = *(float32x2_t **)(a8 + 40);
          *(_QWORD *)(a8 + 40) = v240;
          *(_QWORD *)(a8 + 48) = v90;
          *(_QWORD *)(a8 + 56) = v241;
          if (!v142)
            goto LABEL_455;
          goto LABEL_454;
        }
LABEL_446:
        *(_QWORD *)(a8 + 40) = v240;
        *(_QWORD *)(a8 + 48) = v90;
        *(_QWORD *)(a8 + 56) = v241;
LABEL_454:
        operator delete(v142);
LABEL_455:
        *(_QWORD *)(a8 + 48) = v90;
        v108 = *(_QWORD *)(a8 + 56);
        if ((unint64_t)v90 >= v108)
          goto LABEL_456;
        goto LABEL_110;
      }
LABEL_568:
      sub_22316E078();
    }
    v143 = *a7;
    v144 = *(float32x2_t *)a11;
    v145 = 1.0;
    if (a2 == 6)
    {
      v146 = vneg_f32(*v73);
      v147.i32[0] = v146.i32[1];
      v148 = vneg_f32(*a6);
      v149 = v148.f32[1];
      v150 = 1.0;
    }
    else
    {
      v148 = vadd_f32(v143, v144);
      v147 = vmul_n_f32(v148, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v148, v148), (float32x2_t)vdup_lane_s32((int32x2_t)v148, 1), v148, 1).f32[0]));
      v148.i32[0] = v147.i32[1];
      v146.f32[0] = -v147.f32[1];
      v149 = -v147.f32[0];
      v68 = (float32x2_t)vdup_lane_s32((int32x2_t)v147, 1);
      LODWORD(v150) = vmla_lane_f32(vmul_f32(v143, v147), v68, v143, 1).u32[0];
      LODWORD(v145) = vmla_lane_f32(vmul_f32(v144, v147), v68, v144, 1).u32[0];
    }
    LODWORD(v514) = v147.i32[0];
    *((float *)&v514 + 1) = -v146.f32[0];
    v174 = *a1;
    v175 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
    v176 = v18 % v175;
    v177 = v36 % v175;
    v178 = fabsf(v146.f32[0]);
    v179 = fabsf(v147.f32[0]);
    if (v178 > v179)
      v180 = v146.f32[0];
    else
      v180 = v147.f32[0];
    v181 = 3.4028e38;
    for (j = v18 % v175; ; j = (j + 1) % v175)
    {
      v183 = vsub_f32(v513, *(float32x2_t *)(v174 + 40 * j + 4));
      v184 = (float)(vmuls_lane_f32(v146.f32[0], v183, 1) - (float)(v147.f32[0] * v183.f32[0]))
           / (float)((float)(v146.f32[0] * v146.f32[0]) + (float)(v147.f32[0] * v147.f32[0]));
      if (v178 <= v179)
        v183.f32[0] = v183.f32[1];
      v185 = (float)((float)-v183.f32[0] - (float)(*((float *)&v514 + (v178 <= v179)) * v184)) / v180;
      if ((v184 > v181 || v181 == 3.4028e38) && v185 > 0.0)
        v181 = v184;
      if ((_DWORD)j == v177)
        break;
    }
    *(float *)&v514 = -v149;
    HIDWORD(v514) = v148.i32[0];
    v188 = fabsf(v148.f32[0]);
    v189 = fabsf(v149);
    if (v188 > v189)
      v190 = v148.f32[0];
    else
      v190 = v149;
    v191 = 3.4028e38;
    while (1)
    {
      v192 = vsub_f32(v512, *(float32x2_t *)(v174 + 40 * v176 + 4));
      v193 = (float)(vmuls_lane_f32(v148.f32[0], v192, 1) - (float)(v149 * v192.f32[0]))
           / (float)((float)-(float)(v149 * v149) - (float)(v148.f32[0] * v148.f32[0]));
      if (v188 <= v189)
        v192.f32[0] = v192.f32[1];
      v194 = (float)((float)-v192.f32[0] - (float)(*((float *)&v514 + (v188 <= v189)) * v193)) / v190;
      if ((v193 > v191 || v191 == 3.4028e38) && v194 > 0.0)
        v191 = v193;
      if ((_DWORD)v176 == v177)
        break;
      v176 = (v176 + 1) % v175;
    }
    if (v181 < 0.0 || v181 == 3.4028e38)
      v198 = 0.0;
    else
      v198 = v181;
    if (v191 < 0.0 || v191 == 3.4028e38)
      v200 = 0.0;
    else
      v200 = v191;
    v496 = (float)(v198 / v150) + 0.01;
    v497 = (float)(v200 / v145) + 0.01;
    v201 = vmla_n_f32(v513, v143, v496);
    v514 = (unint64_t)v201;
    v510 = vadd_f32(v143, *v73);
    v511 = vmla_n_f32(v512, v144, v497);
    v509 = vadd_f32(v144, *a6);
    v202 = *(_QWORD *)(a8 + 56);
    if ((unint64_t)v90 < v202)
    {
      *v90 = v201;
      v203 = v90 + 1;
      goto LABEL_269;
    }
    v204 = (float32x2_t *)*v508;
    v205 = (char *)v90 - (_BYTE *)*v508;
    v206 = v205 >> 3;
    v207 = (v205 >> 3) + 1;
    if (v207 >> 61)
      goto LABEL_566;
    v208 = v202 - (_QWORD)v204;
    if (v208 >> 2 > v207)
      v207 = v208 >> 2;
    if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8)
      v209 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v209 = v207;
    if (v209)
    {
      if (v209 >> 61)
        goto LABEL_567;
      v210 = operator new(8 * v209);
      v211 = (float32x2_t *)&v210[8 * v206];
      v212 = &v210[8 * v209];
      *v211 = v201;
      v203 = v211 + 1;
      v213 = (char *)((char *)v90 - (char *)v204);
      if (v90 != v204)
      {
LABEL_218:
        v214 = (unint64_t)(v213 - 8);
        v73 = a5;
        if (v214 >= 0x58)
        {
          if ((unint64_t)((char *)v90 - v210 - v205) >= 0x20)
          {
            v245 = (v214 >> 3) + 1;
            v246 = 8 * (v245 & 0x3FFFFFFFFFFFFFFCLL);
            v215 = &v90[v246 / 0xFFFFFFFFFFFFFFF8];
            v211 = (float32x2_t *)((char *)v211 - v246);
            v247 = &v210[8 * v206 - 16];
            v248 = v90 - 2;
            v249 = v245 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v250 = *(_OWORD *)v248->f32;
              *(v247 - 1) = *(_OWORD *)v248[-2].f32;
              *v247 = v250;
              v247 -= 2;
              v248 -= 4;
              v249 -= 4;
            }
            while (v249);
            if (v245 == (v245 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_267:
              v90 = *(float32x2_t **)(a8 + 40);
              *(_QWORD *)(a8 + 40) = v211;
              *(_QWORD *)(a8 + 48) = v203;
              *(_QWORD *)(a8 + 56) = v212;
              if (!v90)
                goto LABEL_269;
              goto LABEL_268;
            }
          }
          else
          {
            v215 = v90;
          }
        }
        else
        {
          v215 = v90;
        }
        do
        {
          v251 = v215[-1];
          --v215;
          v211[-1] = v251;
          --v211;
        }
        while (v215 != v204);
        goto LABEL_267;
      }
    }
    else
    {
      v210 = 0;
      v211 = (float32x2_t *)(8 * v206);
      v212 = 0;
      *(float32x2_t *)(8 * v206) = v201;
      v203 = (float32x2_t *)(8 * v206 + 8);
      v213 = (char *)((char *)v90 - (char *)v204);
      if (v90 != v204)
        goto LABEL_218;
    }
    *(_QWORD *)(a8 + 40) = v211;
    *(_QWORD *)(a8 + 48) = v203;
    *(_QWORD *)(a8 + 56) = v212;
    v73 = a5;
LABEL_268:
    operator delete(v90);
LABEL_269:
    *(_QWORD *)(a8 + 48) = v203;
    v252 = *(_QWORD *)(a8 + 56);
    if ((unint64_t)v203 < v252)
    {
      *v203 = v510;
      v253 = v203 + 1;
      goto LABEL_290;
    }
    v254 = (float32x2_t *)*v508;
    v255 = (char *)v203 - (_BYTE *)*v508;
    v256 = v255 >> 3;
    v257 = (v255 >> 3) + 1;
    if (v257 >> 61)
      goto LABEL_566;
    v258 = v252 - (_QWORD)v254;
    if (v258 >> 2 > v257)
      v257 = v258 >> 2;
    if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
      v259 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v259 = v257;
    if (v259)
    {
      if (v259 >> 61)
        goto LABEL_567;
      v260 = operator new(8 * v259);
    }
    else
    {
      v260 = 0;
    }
    v261 = (float32x2_t *)&v260[8 * v256];
    v262 = &v260[8 * v259];
    *v261 = v510;
    v253 = v261 + 1;
    if (v203 == v254)
    {
      *(_QWORD *)(a8 + 40) = v261;
      *(_QWORD *)(a8 + 48) = v253;
      *(_QWORD *)(a8 + 56) = v262;
      v73 = a5;
      goto LABEL_289;
    }
    v263 = (char *)v203 - (char *)v254 - 8;
    if (v263 >= 0x58 && (unint64_t)((char *)v203 - v260 - v255) >= 0x20)
    {
      v330 = (v263 >> 3) + 1;
      v331 = 8 * (v330 & 0x3FFFFFFFFFFFFFFCLL);
      v264 = &v203[v331 / 0xFFFFFFFFFFFFFFF8];
      v261 = (float32x2_t *)((char *)v261 - v331);
      v332 = &v260[8 * v256 - 16];
      v333 = v203 - 2;
      v334 = v330 & 0x3FFFFFFFFFFFFFFCLL;
      v73 = a5;
      do
      {
        v335 = *(_OWORD *)v333->f32;
        *(v332 - 1) = *(_OWORD *)v333[-2].f32;
        *v332 = v335;
        v332 -= 2;
        v333 -= 4;
        v334 -= 4;
      }
      while (v334);
      if (v330 == (v330 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_286:
        v203 = *(float32x2_t **)(a8 + 40);
        *(_QWORD *)(a8 + 40) = v261;
        *(_QWORD *)(a8 + 48) = v253;
        *(_QWORD *)(a8 + 56) = v262;
        if (!v203)
        {
LABEL_290:
          *(_QWORD *)(a8 + 48) = v253;
          if (a2 == 5)
          {
            *(int32x2_t *)(a8 + 68) = vdup_n_s32(0x7F7FFFFFu);
            v266 = vsub_f32(*a6, *v73);
            v267 = a7->f32[1];
            v268 = a11[1];
            v269 = (float)(a7->f32[0] * v268) - (float)(v267 * *a11);
            v270 = (float)(v268 * v266.f32[0]) - vmuls_lane_f32(*a11, v266, 1);
            v271 = (float)(v267 * v266.f32[0]) - vmuls_lane_f32(a7->f32[0], v266, 1);
            v272 = vabds_f32(v269, v270);
            v273 = fabsf(v270);
            v274 = fabsf(v271);
            if (vabds_f32(v269, v271) >= 0.00001 && v272 >= 0.00001 && v273 >= 0.00001 && v274 >= 0.00001)
            {
              v278 = vsub_f32(v512, v513);
              v279 = (float)(v268 * v278.f32[0]) - vmuls_lane_f32(*a11, v278, 1);
              v280 = (float)(v267 * v278.f32[0]) - vmuls_lane_f32(a7->f32[0], v278, 1);
              v281 = (float)(v279 - (float)(v496 * v269)) / (float)(v269 - v270);
              v282 = (float)-v279 / v270;
              v283 = (float)(v280 - (float)(v497 * v269)) / (float)(v269 - v271);
              v284 = (float)-v280 / v271;
              if (v282 >= v281)
                v285 = v281;
              else
                v285 = v282;
              if (v281 >= v282)
                v282 = v281;
              if (v284 >= v283)
                v286 = v283;
              else
                v286 = v284;
              if (v283 >= v284)
                v284 = v283;
              if (v285 >= v286)
                v287 = v285;
              else
                v287 = v286;
              if (v284 >= v282)
                v284 = v282;
              if (v287 < v284)
              {
                if (v284 > 0.0)
                  *(float *)(a8 + 68) = v284;
                if (v287 > 0.0)
                  *(float *)(a8 + 72) = v287;
              }
            }
LABEL_407:
            v367 = *(_QWORD *)(a8 + 56);
            if ((unint64_t)v253 < v367)
            {
              *v253 = v511;
              v142 = v253 + 1;
              goto LABEL_431;
            }
            v368 = (float32x2_t *)*v508;
            v369 = (char *)v253 - (_BYTE *)*v508;
            v370 = v369 >> 3;
            v371 = (v369 >> 3) + 1;
            if (v371 >> 61)
              goto LABEL_566;
            v372 = v367 - (_QWORD)v368;
            if (v372 >> 2 > v371)
              v371 = v372 >> 2;
            if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFF8)
              v373 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v373 = v371;
            if (v373)
            {
              if (v373 >> 61)
                goto LABEL_567;
              v374 = operator new(8 * v373);
            }
            else
            {
              v374 = 0;
            }
            v375 = (float32x2_t *)&v374[8 * v370];
            v376 = &v374[8 * v373];
            *v375 = v511;
            v142 = v375 + 1;
            if (v253 == v368)
            {
              *(_QWORD *)(a8 + 40) = v375;
              *(_QWORD *)(a8 + 48) = v142;
              *(_QWORD *)(a8 + 56) = v376;
LABEL_430:
              operator delete(v253);
LABEL_431:
              *(_QWORD *)(a8 + 48) = v142;
              v386 = *(_QWORD *)(a8 + 56);
              if ((unint64_t)v142 < v386)
              {
                *v142 = v509;
                v90 = v142 + 1;
                goto LABEL_455;
              }
              v387 = (float32x2_t *)*v508;
              v388 = (char *)v142 - (_BYTE *)*v508;
              v389 = v388 >> 3;
              v390 = (v388 >> 3) + 1;
              if (!(v390 >> 61))
              {
                v391 = v386 - (_QWORD)v387;
                if (v391 >> 2 > v390)
                  v390 = v391 >> 2;
                if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFF8)
                  v392 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v392 = v390;
                if (!v392)
                {
                  v393 = 0;
LABEL_443:
                  v240 = (float32x2_t *)&v393[8 * v389];
                  v241 = &v393[8 * v392];
                  *v240 = v509;
                  v90 = v240 + 1;
                  if (v142 != v387)
                  {
                    v394 = (char *)v142 - (char *)v387 - 8;
                    if (v394 >= 0x58)
                    {
                      if ((unint64_t)((char *)v142 - v393 - v388) >= 0x20)
                      {
                        v396 = (v394 >> 3) + 1;
                        v397 = 8 * (v396 & 0x3FFFFFFFFFFFFFFCLL);
                        v395 = &v142[v397 / 0xFFFFFFFFFFFFFFF8];
                        v240 = (float32x2_t *)((char *)v240 - v397);
                        v398 = &v393[8 * v389 - 16];
                        v399 = v142 - 2;
                        v400 = v396 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v401 = *(_OWORD *)v399->f32;
                          *(v398 - 1) = *(_OWORD *)v399[-2].f32;
                          *v398 = v401;
                          v398 -= 2;
                          v399 -= 4;
                          v400 -= 4;
                        }
                        while (v400);
                        if (v396 == (v396 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_453;
                      }
                      else
                      {
                        v395 = v142;
                      }
                    }
                    else
                    {
                      v395 = v142;
                    }
                    do
                    {
                      v402 = v395[-1];
                      --v395;
                      v240[-1] = v402;
                      --v240;
                    }
                    while (v395 != v387);
                    goto LABEL_453;
                  }
                  goto LABEL_446;
                }
                if (!(v392 >> 61))
                {
                  v393 = operator new(8 * v392);
                  goto LABEL_443;
                }
LABEL_567:
                sub_223174E94();
              }
LABEL_566:
              sub_22316E078();
            }
            v377 = (char *)v253 - (char *)v368 - 8;
            if (v377 >= 0x58)
            {
              if ((unint64_t)((char *)v253 - v374 - v369) >= 0x20)
              {
                v379 = (v377 >> 3) + 1;
                v380 = 8 * (v379 & 0x3FFFFFFFFFFFFFFCLL);
                v378 = &v253[v380 / 0xFFFFFFFFFFFFFFF8];
                v375 = (float32x2_t *)((char *)v375 - v380);
                v381 = &v374[8 * v370 - 16];
                v382 = v253 - 2;
                v383 = v379 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v384 = *(_OWORD *)v382->f32;
                  *(v381 - 1) = *(_OWORD *)v382[-2].f32;
                  *v381 = v384;
                  v381 -= 2;
                  v382 -= 4;
                  v383 -= 4;
                }
                while (v383);
                if (v379 == (v379 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_429:
                  v253 = *(float32x2_t **)(a8 + 40);
                  *(_QWORD *)(a8 + 40) = v375;
                  *(_QWORD *)(a8 + 48) = v142;
                  *(_QWORD *)(a8 + 56) = v376;
                  if (!v253)
                    goto LABEL_431;
                  goto LABEL_430;
                }
              }
              else
              {
                v378 = v253;
              }
            }
            else
            {
              v378 = v253;
            }
            do
            {
              v385 = v378[-1];
              --v378;
              v375[-1] = v385;
              --v375;
            }
            while (v378 != v368);
            goto LABEL_429;
          }
          v288 = vneg_f32(*v73);
          v289 = vneg_f32(*a6);
          v148.f32[0] = vmuls_lane_f32(v288.f32[0], v289, 1);
          v290 = vmuls_lane_f32(v289.f32[0], v288, 1);
          v291 = v148.f32[0] - v290;
          v292 = v290 - v148.f32[0];
          v68.f32[0] = vabds_f32(v148.f32[0], v290);
          v148.f32[0] = vabds_f32(v290, v148.f32[0]);
          v293 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v68, v148), 0), (int8x8_t)v288, (int8x8_t)v289);
          v294 = v68.f32[0] <= v148.f32[0];
          if (v68.f32[0] <= v148.f32[0])
            v295 = v288.f32[1];
          else
            v295 = v289.f32[1];
          if (v68.f32[0] <= v148.f32[0])
            v296 = v288.f32[0];
          else
            v296 = v289.f32[0];
          v297 = &v511;
          if (v68.f32[0] <= v148.f32[0])
            v298 = &v511;
          else
            v298 = (float32x2_t *)&v514;
          if (v68.f32[0] <= v148.f32[0])
          {
            v299 = &v509;
          }
          else
          {
            v292 = v291;
            v299 = &v510;
          }
          if (v68.f32[0] <= v148.f32[0])
            v297 = (float32x2_t *)&v514;
          v300 = v511.f32[1];
          if (v68.f32[0] <= v148.f32[0])
            v301 = *((float *)&v514 + 1);
          else
            v301 = v511.f32[1];
          if (!v294)
            v300 = *((float *)&v514 + 1);
          v302 = (float)((float)(v296 * v300)
                       + (float)((float)((float)(v295 * v297->f32[0]) - (float)(v296 * v301))
                               - (float)(v298->f32[0] * v295)))
               / v292;
          if (v294)
            v303 = &v510;
          else
            v303 = &v509;
          v304 = v303->f32[0];
          if (v294)
            v305 = v510.f32[1];
          else
            v305 = v509.f32[1];
          v306 = v299->f32[0];
          if (v294)
            v307 = v509.f32[1];
          else
            v307 = v510.f32[1];
          v308 = vadd_f32(*v298, vmul_n_f32(v293, v302));
          v309 = *v299;
          v310 = *(_QWORD *)(a8 + 56);
          if ((unint64_t)v253 < v310)
          {
            *v253 = v308;
            v311 = v253 + 1;
            goto LABEL_382;
          }
          v312 = (float32x2_t *)*v508;
          v313 = (char *)v253 - (_BYTE *)*v508;
          v314 = v313 >> 3;
          v315 = (v313 >> 3) + 1;
          if (v315 >> 61)
            goto LABEL_570;
          v316 = v310 - (_QWORD)v312;
          if (v316 >> 2 > v315)
            v315 = v316 >> 2;
          if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
            v317 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v317 = v315;
          if (v317)
          {
            v500 = v305;
            v505 = v292;
            if (v317 >> 61)
              goto LABEL_571;
            v318 = operator new(8 * v317);
            v292 = v505;
            v305 = v500;
          }
          else
          {
            v318 = 0;
          }
          v319 = (float32x2_t *)&v318[8 * v314];
          v320 = &v318[8 * v317];
          *v319 = v308;
          v311 = v319 + 1;
          if (v253 == v312)
          {
            *(_QWORD *)(a8 + 40) = v319;
            *(_QWORD *)(a8 + 48) = v311;
            *(_QWORD *)(a8 + 56) = v320;
LABEL_381:
            v343 = v304;
            v344 = v305;
            v506 = v295;
            v345 = v296;
            v346 = v292;
            operator delete(v253);
            v292 = v346;
            v296 = v345;
            v295 = v506;
            v305 = v344;
            v304 = v343;
LABEL_382:
            v347 = vadd_f32(v309, vmul_n_f32(v293, (float)((float)(v296 * v307)+ (float)((float)((float)(v295 * v304) - (float)(v296 * v305)) - (float)(v295 * v306)))/ v292));
            *(_QWORD *)(a8 + 48) = v311;
            v348 = *(_QWORD *)(a8 + 56);
            if ((unint64_t)v311 < v348)
            {
              *v311 = v347;
              v253 = v311 + 1;
LABEL_406:
              *(_QWORD *)(a8 + 48) = v253;
              goto LABEL_407;
            }
            v349 = (float32x2_t *)*v508;
            v350 = (char *)v311 - (_BYTE *)*v508;
            v351 = v350 >> 3;
            v352 = (v350 >> 3) + 1;
            if (!(v352 >> 61))
            {
              v353 = v348 - (_QWORD)v349;
              if (v353 >> 2 > v352)
                v352 = v353 >> 2;
              if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v352;
              if (!v354)
              {
                v355 = 0;
LABEL_394:
                v356 = (float32x2_t *)&v355[8 * v351];
                v357 = &v355[8 * v354];
                *v356 = v347;
                v253 = v356 + 1;
                if (v311 == v349)
                {
                  *(_QWORD *)(a8 + 40) = v356;
                  *(_QWORD *)(a8 + 48) = v253;
                  *(_QWORD *)(a8 + 56) = v357;
                  goto LABEL_405;
                }
                v358 = (char *)v311 - (char *)v349 - 8;
                if (v358 >= 0x58)
                {
                  if ((unint64_t)((char *)v311 - v355 - v350) >= 0x20)
                  {
                    v360 = (v358 >> 3) + 1;
                    v361 = 8 * (v360 & 0x3FFFFFFFFFFFFFFCLL);
                    v359 = &v311[v361 / 0xFFFFFFFFFFFFFFF8];
                    v356 = (float32x2_t *)((char *)v356 - v361);
                    v362 = &v355[8 * v351 - 16];
                    v363 = v311 - 2;
                    v364 = v360 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v365 = *(_OWORD *)v363->f32;
                      *(v362 - 1) = *(_OWORD *)v363[-2].f32;
                      *v362 = v365;
                      v362 -= 2;
                      v363 -= 4;
                      v364 -= 4;
                    }
                    while (v364);
                    if (v360 == (v360 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_404:
                      v311 = *(float32x2_t **)(a8 + 40);
                      *(_QWORD *)(a8 + 40) = v356;
                      *(_QWORD *)(a8 + 48) = v253;
                      *(_QWORD *)(a8 + 56) = v357;
                      if (!v311)
                        goto LABEL_406;
LABEL_405:
                      operator delete(v311);
                      goto LABEL_406;
                    }
                  }
                  else
                  {
                    v359 = v311;
                  }
                }
                else
                {
                  v359 = v311;
                }
                do
                {
                  v366 = v359[-1];
                  --v359;
                  v356[-1] = v366;
                  --v356;
                }
                while (v359 != v349);
                goto LABEL_404;
              }
              if (!(v354 >> 61))
              {
                v355 = operator new(8 * v354);
                goto LABEL_394;
              }
LABEL_571:
              sub_223174E94();
            }
LABEL_570:
            sub_22316E078();
          }
          v321 = (char *)v253 - (char *)v312 - 8;
          if (v321 >= 0x58)
          {
            if ((unint64_t)((char *)v253 - v318 - v313) >= 0x20)
            {
              v336 = (v321 >> 3) + 1;
              v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
              v322 = &v253[v337 / 0xFFFFFFFFFFFFFFF8];
              v319 = (float32x2_t *)((char *)v319 - v337);
              v338 = &v318[8 * v314 - 16];
              v339 = v253 - 2;
              v340 = v336 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v341 = *(_OWORD *)v339->f32;
                *(v338 - 1) = *(_OWORD *)v339[-2].f32;
                *v338 = v341;
                v338 -= 2;
                v339 -= 4;
                v340 -= 4;
              }
              while (v340);
              if (v336 == (v336 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_380:
                v253 = *(float32x2_t **)(a8 + 40);
                *(_QWORD *)(a8 + 40) = v319;
                *(_QWORD *)(a8 + 48) = v311;
                *(_QWORD *)(a8 + 56) = v320;
                if (!v253)
                  goto LABEL_382;
                goto LABEL_381;
              }
            }
            else
            {
              v322 = v253;
            }
          }
          else
          {
            v322 = v253;
          }
          do
          {
            v342 = v322[-1];
            --v322;
            v319[-1] = v342;
            --v319;
          }
          while (v322 != v312);
          goto LABEL_380;
        }
LABEL_289:
        operator delete(v203);
        goto LABEL_290;
      }
    }
    else
    {
      v264 = v203;
      v73 = a5;
    }
    do
    {
      v265 = v264[-1];
      --v264;
      v261[-1] = v265;
      --v261;
    }
    while (v264 != v254);
    goto LABEL_286;
  }
  v109 = *v73;
  v110 = *a6;
  v111 = (float32x2_t)vdup_lane_s32((int32x2_t)*a6, 1);
  if (vmla_lane_f32(vmul_f32(*v73, *a6), v111, *v73, 1).f32[0] < 0.99999)
  {
    v112 = (float32x2_t)vdup_lane_s32((int32x2_t)v109, 1);
    LODWORD(v514) = 0;
    v511.i32[0] = 0;
    v113 = vmla_f32(vmul_f32(v109, v109), v112, v112).f32[0];
    LODWORD(v114) = vmla_f32(vmul_f32(v110, v110), v111, v111).u32[0];
    if (v113 >= 0.00000001 && v114 >= 0.00000001)
    {
      v151 = v109.f32[0] * v110.f32[1];
      v152 = v109.f32[1] * v110.f32[0];
      v153 = vabds_f32(v109.f32[0] * v110.f32[1], v109.f32[1] * v110.f32[0]);
      v154 = vabds_f32(v109.f32[1] * v110.f32[0], v109.f32[0] * v110.f32[1]);
      if (v153 <= v154)
      {
        if (v154 < 0.00001)
          goto LABEL_106;
        v216 = v152 - v151;
        v155 = v513.f32[1];
        v159 = v512.f32[1];
        v156 = (float)((float)((float)((float)(v109.f32[1] * v513.f32[0]) - (float)(v109.f32[0] * v513.f32[1]))
                             + (float)(v109.f32[0] * v512.f32[1]))
                     - (float)(v109.f32[1] * v512.f32[0]))
             / v216;
        v511.f32[0] = v156;
        v217 = fabsf(v109.f32[0]);
        v218 = fabsf(v109.f32[1]);
        if (v217 > v218)
          v159 = v512.f32[0];
        v160 = (float *)a6 + (v217 <= v218);
        if (v217 <= v218)
          v109.f32[0] = v109.f32[1];
        else
          v155 = v513.f32[0];
        v161 = (float32x2_t *)&v514;
      }
      else
      {
        if (v153 < 0.00001)
          goto LABEL_106;
        v155 = v512.f32[0];
        v156 = (float)((float)((float)((float)(v109.f32[1] * v512.f32[0]) - (float)(v109.f32[0] * v512.f32[1]))
                             - (float)(v109.f32[1] * v513.f32[0]))
                     - (float)(v109.f32[0] * v513.f32[1]))
             / (float)(v151 - v152);
        *(float *)&v514 = v156;
        v157 = fabsf(v110.f32[0]);
        v158 = fabsf(v110.f32[1]);
        if (v157 > v158)
          v159 = v513.f32[0];
        else
          v159 = v513.f32[1];
        v160 = (float *)v73 + (v157 <= v158);
        if (v157 > v158)
        {
          v109.f32[0] = v110.f32[0];
        }
        else
        {
          v155 = v512.f32[1];
          v109.f32[0] = v110.f32[1];
        }
        v161 = &v511;
      }
      v161->f32[0] = (float)((float)(v159 + (float)(v156 * *v160)) - v155) / v109.f32[0];
      v219 = *(float *)&v514;
      if (*(float *)&v514 > 0.0 && v511.f32[0] > 0.0)
      {
        if (v511.f32[0] < *(float *)&v514)
          v219 = v511.f32[0];
        *(float *)(a8 + 72) = v219;
      }
    }
  }
LABEL_106:
  if (a2 == 2 && *(float *)(a8 + 72) == 3.4028e38)
  {
    *(_BYTE *)a8 = 3;
    *(_DWORD *)(a8 + 72) = 0;
  }
  v108 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)v90 < v108)
    goto LABEL_110;
LABEL_456:
  v403 = (float32x2_t *)*v508;
  v404 = (char *)v90 - (_BYTE *)*v508;
  v405 = v404 >> 3;
  v406 = (v404 >> 3) + 1;
  if (v406 >> 61)
    goto LABEL_562;
  v407 = v108 - (_QWORD)v403;
  if (v407 >> 2 > v406)
    v406 = v407 >> 2;
  if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF8)
    v408 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v408 = v406;
  if (v408)
  {
    if (v408 >> 61)
      goto LABEL_563;
    v409 = operator new(8 * v408);
  }
  else
  {
    v409 = 0;
  }
  v410 = (float32x2_t *)&v409[8 * v405];
  v411 = &v409[8 * v408];
  *v410 = v512;
  v116 = v410 + 1;
  if (v90 != v403)
  {
    v412 = (char *)v90 - (char *)v403 - 8;
    if (v412 >= 0x58)
    {
      if ((unint64_t)((char *)v90 - v409 - v404) >= 0x20)
      {
        v414 = (v412 >> 3) + 1;
        v415 = 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
        v413 = &v90[v415 / 0xFFFFFFFFFFFFFFF8];
        v410 = (float32x2_t *)((char *)v410 - v415);
        v416 = &v409[8 * v405 - 16];
        v417 = v90 - 2;
        v418 = v414 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v419 = *(_OWORD *)v417->f32;
          *(v416 - 1) = *(_OWORD *)v417[-2].f32;
          *v416 = v419;
          v416 -= 2;
          v417 -= 4;
          v418 -= 4;
        }
        while (v418);
        if (v414 == (v414 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_476:
          v90 = *(float32x2_t **)(a8 + 40);
          *(_QWORD *)(a8 + 40) = v410;
          *(_QWORD *)(a8 + 48) = v116;
          *(_QWORD *)(a8 + 56) = v411;
          if (!v90)
            goto LABEL_478;
          goto LABEL_477;
        }
      }
      else
      {
        v413 = v90;
      }
    }
    else
    {
      v413 = v90;
    }
    do
    {
      v420 = v413[-1];
      --v413;
      v410[-1] = v420;
      --v410;
    }
    while (v413 != v403);
    goto LABEL_476;
  }
  *(_QWORD *)(a8 + 40) = v410;
  *(_QWORD *)(a8 + 48) = v116;
  *(_QWORD *)(a8 + 56) = v411;
LABEL_477:
  operator delete(v90);
LABEL_478:
  *(_QWORD *)(a8 + 48) = v116;
  v421 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)v116 < v421)
  {
    *v116 = *a6;
    v422 = v116 + 1;
    goto LABEL_502;
  }
  v423 = (float32x2_t *)*v508;
  v424 = (char *)v116 - (_BYTE *)*v508;
  v425 = v424 >> 3;
  v426 = (v424 >> 3) + 1;
  if (v426 >> 61)
    goto LABEL_562;
  v427 = v421 - (_QWORD)v423;
  if (v427 >> 2 > v426)
    v426 = v427 >> 2;
  if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFF8)
    v428 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v428 = v426;
  if (v428)
  {
    if (v428 >> 61)
      goto LABEL_563;
    v429 = operator new(8 * v428);
  }
  else
  {
    v429 = 0;
  }
  v430 = (float32x2_t *)&v429[8 * v425];
  v431 = &v429[8 * v428];
  *v430 = *a6;
  v422 = v430 + 1;
  if (v116 != v423)
  {
    v432 = (char *)v116 - (char *)v423 - 8;
    if (v432 >= 0x58)
    {
      if ((unint64_t)((char *)v116 - v429 - v424) >= 0x20)
      {
        v434 = (v432 >> 3) + 1;
        v435 = 8 * (v434 & 0x3FFFFFFFFFFFFFFCLL);
        v433 = &v116[v435 / 0xFFFFFFFFFFFFFFF8];
        v430 = (float32x2_t *)((char *)v430 - v435);
        v436 = &v429[8 * v425 - 16];
        v437 = v116 - 2;
        v438 = v434 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v439 = *(_OWORD *)v437->f32;
          *(v436 - 1) = *(_OWORD *)v437[-2].f32;
          *v436 = v439;
          v436 -= 2;
          v437 -= 4;
          v438 -= 4;
        }
        while (v438);
        if (v434 == (v434 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_500:
          v116 = *(float32x2_t **)(a8 + 40);
          *(_QWORD *)(a8 + 40) = v430;
          *(_QWORD *)(a8 + 48) = v422;
          *(_QWORD *)(a8 + 56) = v431;
          if (!v116)
            goto LABEL_502;
          goto LABEL_501;
        }
      }
      else
      {
        v433 = v116;
      }
    }
    else
    {
      v433 = v116;
    }
    do
    {
      v440 = v433[-1];
      --v433;
      v430[-1] = v440;
      --v430;
    }
    while (v433 != v423);
    goto LABEL_500;
  }
  *(_QWORD *)(a8 + 40) = v430;
  *(_QWORD *)(a8 + 48) = v422;
  *(_QWORD *)(a8 + 56) = v431;
LABEL_501:
  operator delete(v116);
LABEL_502:
  *(_QWORD *)(a8 + 48) = v422;
  v441 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)v422 < v441)
  {
    *v422 = *v501;
    v442 = (char *)&v422[1];
    goto LABEL_526;
  }
  v443 = (char *)*v508;
  v444 = (char *)v422 - (_BYTE *)*v508;
  v445 = v444 >> 3;
  v446 = (v444 >> 3) + 1;
  if (v446 >> 61)
LABEL_562:
    sub_22316E078();
  v447 = v441 - (_QWORD)v443;
  if (v447 >> 2 > v446)
    v446 = v447 >> 2;
  if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFF8)
    v448 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v448 = v446;
  if (v448)
  {
    if (!(v448 >> 61))
    {
      v449 = operator new(8 * v448);
      goto LABEL_514;
    }
LABEL_563:
    sub_223174E94();
  }
  v449 = 0;
LABEL_514:
  v450 = (float32x2_t *)&v449[8 * v445];
  v451 = &v449[8 * v448];
  *v450 = *v501;
  v442 = (char *)&v450[1];
  if (v422 != (float32x2_t *)v443)
  {
    v452 = (char *)v422 - v443 - 8;
    if (v452 >= 0x58)
    {
      if ((unint64_t)((char *)v422 - v449 - v444) >= 0x20)
      {
        v454 = (v452 >> 3) + 1;
        v455 = 8 * (v454 & 0x3FFFFFFFFFFFFFFCLL);
        v453 = &v422[v455 / 0xFFFFFFFFFFFFFFF8];
        v450 = (float32x2_t *)((char *)v450 - v455);
        v456 = &v449[8 * v445 - 16];
        v457 = v422 - 2;
        v458 = v454 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v459 = *(_OWORD *)v457->f32;
          *(v456 - 1) = *(_OWORD *)v457[-2].f32;
          *v456 = v459;
          v456 -= 2;
          v457 -= 4;
          v458 -= 4;
        }
        while (v458);
        if (v454 == (v454 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_524:
          v422 = *(float32x2_t **)(a8 + 40);
          *(_QWORD *)(a8 + 40) = v450;
          *(_QWORD *)(a8 + 48) = v442;
          *(_QWORD *)(a8 + 56) = v451;
          if (!v422)
            goto LABEL_526;
          goto LABEL_525;
        }
      }
      else
      {
        v453 = v422;
      }
    }
    else
    {
      v453 = v422;
    }
    do
    {
      v460 = v453[-1];
      --v453;
      v450[-1] = v460;
      --v450;
    }
    while (v453 != (float32x2_t *)v443);
    goto LABEL_524;
  }
  *(_QWORD *)(a8 + 40) = v450;
  *(_QWORD *)(a8 + 48) = v442;
  *(_QWORD *)(a8 + 56) = v451;
LABEL_525:
  operator delete(v422);
LABEL_526:
  *(_QWORD *)(a8 + 48) = v442;
  v461 = *(_QWORD *)(a8 + 56);
  if ((unint64_t)v442 >= v461)
  {
    v463 = (char *)*v508;
    v464 = v442 - (_BYTE *)*v508;
    v465 = v464 >> 3;
    v466 = (v464 >> 3) + 1;
    if (v466 >> 61)
      sub_22316E078();
    v467 = v461 - (_QWORD)v463;
    if (v467 >> 2 > v466)
      v466 = v467 >> 2;
    if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFF8)
      v468 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v468 = v466;
    if (v468)
    {
      if (v468 >> 61)
        sub_223174E94();
      v469 = operator new(8 * v468);
      v470 = &v469[8 * v465];
      v471 = &v469[8 * v468];
      *v470 = 0;
      v462 = (uint64_t)(v470 + 1);
      v472 = (char *)(v442 - v463);
      if (v442 != v463)
      {
LABEL_537:
        v473 = (unint64_t)(v472 - 8);
        if (v473 >= 0x58)
        {
          if ((unint64_t)(v442 - v469 - v464) >= 0x20)
          {
            v475 = (v473 >> 3) + 1;
            v476 = 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
            v474 = &v442[-v476];
            v470 = (_QWORD *)((char *)v470 - v476);
            v477 = &v469[8 * v465 - 16];
            v478 = v442 - 16;
            v479 = v475 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v480 = *(_OWORD *)v478;
              *(v477 - 1) = *((_OWORD *)v478 - 1);
              *v477 = v480;
              v477 -= 2;
              v478 -= 32;
              v479 -= 4;
            }
            while (v479);
            if (v475 == (v475 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_547:
              v442 = *(char **)(a8 + 40);
              *(_QWORD *)(a8 + 40) = v470;
              *(_QWORD *)(a8 + 48) = v462;
              *(_QWORD *)(a8 + 56) = v471;
              if (!v442)
                goto LABEL_549;
LABEL_548:
              operator delete(v442);
              goto LABEL_549;
            }
          }
          else
          {
            v474 = v442;
          }
        }
        else
        {
          v474 = v442;
        }
        do
        {
          v481 = *((_QWORD *)v474 - 1);
          v474 -= 8;
          *--v470 = v481;
        }
        while (v474 != v463);
        goto LABEL_547;
      }
    }
    else
    {
      v469 = 0;
      v470 = (_QWORD *)(8 * v465);
      v471 = 0;
      *(_QWORD *)(8 * v465) = 0;
      v462 = 8 * v465 + 8;
      v472 = (char *)(v442 - v463);
      if (v442 != v463)
        goto LABEL_537;
    }
    *(_QWORD *)(a8 + 40) = v470;
    *(_QWORD *)(a8 + 48) = v462;
    *(_QWORD *)(a8 + 56) = v471;
    goto LABEL_548;
  }
  *(_QWORD *)v442 = 0;
  v462 = (uint64_t)(v442 + 8);
LABEL_549:
  *(_QWORD *)(a8 + 48) = v462;
  v482 = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(a8 + 24) = 0;
  *(_DWORD *)(a8 + 20) = 0;
  if (((v462 - v482) & 0xFFFFFFFF0) == 0)
    goto LABEL_556;
  v483 = ((unint64_t)(v462 - v482) >> 4);
  v484 = 0.0;
  v485 = 1;
  v486 = 0.0;
  v487 = 0.0;
  do
  {
    if (--v483)
      v488 = v485 + 1;
    else
      v488 = 0;
    v489 = (float *)(v482 + 8 * v485);
    v490 = (float *)(v482 + 8 * (v488 | 1));
    v491 = (float *)(v482 + 8 * (v485 - 1));
    v486 = v486 + (float)((float)((float)(*v489 * v490[1]) - (float)(*v490 * v489[1])) * 0.5);
    v492 = (float *)(v482 + 8 * v488);
    *(float *)(a8 + 20) = v486;
    v487 = v487
         + (float)((float)((float)((float)((float)(*v489 * v492[1]) - (float)(*v490 * v491[1]))
                                 + (float)(*v491 * v490[1]))
                         - (float)(*v492 * v489[1]))
                 * 0.5);
    *(float *)(a8 + 24) = v487;
    v484 = v484 + (float)((float)((float)(*v491 * v492[1]) - (float)(*v492 * v491[1])) * 0.5);
    v485 += 2;
    *(float *)(a8 + 28) = v484;
  }
  while (v483);
  if (fabsf(v486) >= 0.0001)
  {
    if (v486 < 0.0)
    {
      v493 = v487 * -0.5;
      v494 = *(float *)(a8 + 72);
      v495 = v493 / v486;
      if (v494 == 3.4028e38 || v495 < v494)
        *(float *)(a8 + 72) = v495;
    }
  }
  else
  {
LABEL_556:
    *(_DWORD *)(a8 + 20) = 0;
  }
}

void sub_223AD0194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  void *v21;

  v21 = *a19;
  if (*a19)
  {
    *(_QWORD *)(v19 + 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223AD01C8(float *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t *a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  float32x2_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  size_t v21;
  const char *v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  unint64_t v27;
  const char *v28;
  float32x2_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  const char *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  float v81;
  size_t v82;
  void *v83;
  _QWORD *v84;
  unint64_t *v85;
  char *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  void *v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  float32x2_t v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  float32x2_t *v146;
  int64_t v147;
  unint64_t v148;
  char *v149;
  float32x2_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  __int128 *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  float32x2_t v161;
  float32x2_t v162;
  uint64_t v163;
  char *v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t *v167;
  uint64_t v168;
  char v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float v173;
  unint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  char *v186;
  unsigned int v187;
  unsigned int v188;
  _QWORD *v189;
  char *v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x2_t v193;
  float v194;
  unint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  char *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  char *v230;
  __int128 v231;
  unsigned int v232;
  unsigned int v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float v237;
  unint64_t v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  __int128 v249;
  char *v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float v257;
  BOOL v258;
  int v259;
  float *v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  size_t v266;
  const char *v267;
  float32x2_t v268;
  float32x2_t v269;
  float32x2_t v270;
  int v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v276;
  uint64_t v277;
  size_t v278;
  const char *v279;
  float32x2_t v280;
  uint64_t v281;
  char *v282;
  float32x2_t v283;
  float32x2_t v284;
  float32x2_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  int8x8_t v292;
  uint8x8_t v293;
  unint64_t v294;
  uint64_t **v295;
  uint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unsigned int *v301;
  unsigned int v302;
  uint8x8_t v303;
  unint64_t v304;
  uint64_t **v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned int *v311;
  unsigned int v312;
  uint8x8_t v313;
  unint64_t v314;
  uint64_t **v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  uint8x8_t v323;
  unint64_t v324;
  uint64_t **v325;
  uint64_t *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  unsigned __int8 v331;
  const char *v332;
  size_t v333;
  _BYTE *v334;
  unint64_t v335;
  const char *v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  NSObject *v345;
  size_t v346;
  std::__shared_weak_count_vtbl *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  float32x2_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  unsigned __int8 v381;
  const char *v382;
  size_t v383;
  _BYTE *v384;
  unint64_t v385;
  const char *v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  _BYTE *v392;
  uint64_t v393;
  uint64_t v394;
  NSObject *v395;
  size_t v396;
  std::__shared_weak_count_vtbl *v397;
  std::__shared_weak_count *v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  float32x2_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  void *v427;
  unint64_t *v428;
  _QWORD *v429;
  void *v430;
  _BYTE *v432;
  int v433;
  uint64_t v434;
  float32x2_t v435;
  unint64_t v439;
  float v441;
  int v442;
  int v445;
  uint64_t v446;
  void *__p;
  _QWORD *v448;
  char *v449;
  uint64_t *v450;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v452;
  int v453;
  const char *v454;
  int v455;
  const char *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  _BYTE v459[40];
  char *v460;
  uint64_t v461;
  uint64_t v462;
  _BYTE v463[24];
  _BYTE v464[40];
  double v465;
  uint64_t v466;

  v466 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40);
  v7 = v6 >> 4;
  if ((v6 >> 4) <= 2)
  {
    sub_223ACE25C(&v462);
    if (**(int **)(v462 + 56) > 4)
      return 0;
    v8 = *(unsigned __int8 *)(v462 + 72);
    v9 = sub_22322F254(v462, "OSLogSurrogateAppender", 1, 0);
    v10 = v9;
    if (!v8 && v9 == 0)
      return 0;
    v450 = &v462;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v452 = std::chrono::system_clock::now().__d_.__rep_;
    v453 = 4;
    v454 = "unknown file";
    v455 = 1152;
    v457 = 0;
    v458 = 0;
    v456 = "unknown function";
    v12 = (float32x2_t)v462;
    v13 = v462 + 16;
    if (*(char *)(v462 + 39) < 0)
    {
      v15 = *(const char **)(v462 + 16);
      v14 = *(_QWORD *)(v462 + 24);
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v14 = *(unsigned __int8 *)(v462 + 39);
      v15 = (const char *)(*v450 + 16);
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v463);
      sub_223199C58("com.apple.cv3d", (unint64_t)v463, byte_255788F40);
      if (v464[0] && (v463[23] & 0x80000000) != 0)
        operator delete(*(void **)v463);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_19:
    if (byte_255788F40[23] >= 0)
      v24 = byte_255788F40;
    else
      v24 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v25 = byte_255788F40[23];
    else
      v25 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v463 = os_log_create(v24, v15);
    v26 = &v463[8];
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v25 >= 0x17)
    {
      v27 = v10;
      v28 = v15;
      v29 = v12;
      v30 = v8;
      v31 = v13;
      v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v32 = v25 | 7;
      v33 = v32 + 1;
      v26 = operator new(v32 + 1);
      *(_QWORD *)&v463[16] = v25;
      *(_QWORD *)v464 = v33 | 0x8000000000000000;
      *(_QWORD *)&v463[8] = v26;
      v13 = v31;
      v8 = v30;
      v12 = v29;
      v15 = v28;
      v10 = v27;
    }
    else
    {
      v464[7] = v25;
      if (!v25)
      {
LABEL_33:
        v26[v25] = 0;
        v464[8] = 1;
        v34 = &v464[16];
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v14 >= 0x17)
        {
          v35 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v35 = v14 | 7;
          v36 = v35 + 1;
          v34 = operator new(v35 + 1);
          *(_QWORD *)&v464[24] = v14;
          *(_QWORD *)&v464[32] = v36 | 0x8000000000000000;
          *(_QWORD *)&v464[16] = v34;
        }
        else
        {
          v464[39] = v14;
          if (!v14)
            goto LABEL_41;
        }
        memmove(v34, v15, v14);
LABEL_41:
        v34[v14] = 0;
        LOBYTE(v465) = 1;
        v37 = *(NSObject **)v463;
        if ((v464[39] & 0x80000000) != 0)
          operator delete(*(void **)&v464[16]);
        if (v464[8] && (v464[7] & 0x80000000) != 0)
          operator delete(*(void **)&v463[8]);
        if (*(_QWORD *)v463)
          os_release(*(void **)v463);
        if (v10 && *(_QWORD *)(v10 + 24))
        {
          v38 = _os_log_pack_size();
          v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
          v40 = (std::__shared_weak_count *)operator new();
          v41 = v40;
          v40->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v40->__shared_weak_owners_ = 0;
          v40[1].__vftable = v39;
          *(_QWORD *)v463 = v39;
          *(_QWORD *)&v463[8] = v39;
          *(_QWORD *)&v463[16] = v40;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          memset(v464, 0, 24);
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v41);
          }
          v45 = *(_QWORD *)v463;
          *(_WORD *)_os_log_pack_fill() = 0;
          v46 = operator new();
          v47 = *(unsigned __int8 *)(*(_QWORD *)&v12 + 39);
          if ((v47 & 0x80u) == 0)
            v48 = v13;
          else
            v48 = *(_QWORD *)(*(_QWORD *)&v12 + 16);
          if ((v47 & 0x80u) != 0)
            v47 = *(_QWORD *)(*(_QWORD *)&v12 + 24);
          *(_QWORD *)v46 = v45;
          *(_OWORD *)(v46 + 8) = *(_OWORD *)&v463[8];
          *(_QWORD *)&v463[8] = 0;
          *(_QWORD *)&v463[16] = 0;
          *(_OWORD *)(v46 + 24) = *(_OWORD *)v464;
          *(_QWORD *)v464 = 0;
          *(_QWORD *)&v464[8] = 0;
          *(_QWORD *)(v46 + 40) = v48;
          *(_QWORD *)(v46 + 48) = v47;
          *(_BYTE *)(v46 + 56) = 16;
          __p = 0;
          *(_QWORD *)v459 = v46;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), v459);
          v49 = *(_QWORD *)v459;
          *(_QWORD *)v459 = 0;
          if (v49)
          {
            v50 = *(std::__shared_weak_count **)(v49 + 32);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = *(std::__shared_weak_count **)(v49 + 16);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
            __p = 0;
          }
          v56 = *(std::__shared_weak_count **)&v464[8];
          if (*(_QWORD *)&v464[8])
          {
            v57 = (unint64_t *)(*(_QWORD *)&v464[8] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = *(std::__shared_weak_count **)&v463[16];
          if (*(_QWORD *)&v463[16])
          {
            v60 = (unint64_t *)(*(_QWORD *)&v463[16] + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
        else
        {
          os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          *(_WORD *)v463 = 0;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
        }
        if (v8)
        {
          sub_22322C138((uint64_t)&v450, "ApplyExpansion with < 3 points");
          sub_223182C08((uint64_t)&v450);
        }
        sub_223182C08((uint64_t)&v450);
        v63 = v458;
        if (v458)
        {
          v64 = (unint64_t *)&v458->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return 0;
      }
    }
    memmove(v26, v24, v25);
    goto LABEL_33;
  }
  v17 = a3;
  v441 = *(float *)(a3 + 64);
  if (v441 <= 5.0)
    goto LABEL_184;
  sub_223ACE25C(&v462);
  if (**(int **)(v462 + 56) <= 4)
  {
    v18 = *(unsigned __int8 *)(v462 + 72);
    v19 = sub_22322F254(v462, "OSLogSurrogateAppender", 1, 0);
    if (v18 || v19 != 0)
    {
      v439 = v19;
      v450 = &v462;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v452 = std::chrono::system_clock::now().__d_.__rep_;
      v453 = 4;
      v454 = "unknown file";
      v455 = 1167;
      v457 = 0;
      v458 = 0;
      v456 = "unknown function";
      v435 = (float32x2_t)v462;
      if (*(char *)(v462 + 39) < 0)
      {
        v22 = *(const char **)(v462 + 16);
        v21 = *(_QWORD *)(v462 + 24);
      }
      else
      {
        v21 = *(unsigned __int8 *)(v462 + 39);
        v22 = (const char *)(v462 + 16);
      }
      v434 = v462 + 16;
      v67 = *(float *)(v17 + 20);
      v68 = *(float *)(v17 + 24);
      v69 = *(float *)(v17 + 28);
      v70 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v463);
        sub_223199C58("com.apple.cv3d", (unint64_t)v463, byte_255788F40);
        if (v464[0] && (v463[23] & 0x80000000) != 0)
          operator delete(*(void **)v463);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v17 = a3;
      }
      if (byte_255788F40[23] >= 0)
        v71 = byte_255788F40;
      else
        v71 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v72 = byte_255788F40[23];
      else
        v72 = *(_QWORD *)&byte_255788F40[8];
      v73 = v22;
      *(_QWORD *)v463 = os_log_create(v71, v22);
      v74 = &v463[8];
      if (v72 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v72 >= 0x17)
      {
        v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v75 = v72 | 7;
        v76 = v75 + 1;
        v74 = operator new(v75 + 1);
        *(_QWORD *)&v463[16] = v72;
        *(_QWORD *)v464 = v76 | 0x8000000000000000;
        *(_QWORD *)&v463[8] = v74;
        v17 = a3;
      }
      else
      {
        v464[7] = v72;
        if (!v72)
        {
LABEL_109:
          v74[v72] = 0;
          v464[8] = 1;
          v77 = &v464[16];
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v21 >= 0x17)
          {
            v78 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v78 = v21 | 7;
            v79 = v78 + 1;
            v77 = operator new(v78 + 1);
            *(_QWORD *)&v464[24] = v21;
            *(_QWORD *)&v464[32] = v79 | 0x8000000000000000;
            *(_QWORD *)&v464[16] = v77;
          }
          else
          {
            v464[39] = v21;
            if (!v21)
            {
LABEL_117:
              v77[v21] = 0;
              LOBYTE(v465) = 1;
              v80 = *(NSObject **)v463;
              if ((v464[39] & 0x80000000) != 0)
                operator delete(*(void **)&v464[16]);
              if (v464[8] && (v464[7] & 0x80000000) != 0)
                operator delete(*(void **)&v463[8]);
              if (*(_QWORD *)v463)
                os_release(*(void **)v463);
              v81 = v69 + (float)((float)((float)(v441 * v441) * v67) + (float)(v441 * v68));
              if (v439 && *(_QWORD *)(v439 + 24))
              {
                v82 = _os_log_pack_size();
                v83 = operator new(v82, (std::align_val_t)8uLL);
                v84 = (_QWORD *)operator new();
                v84[1] = 0;
                v85 = v84 + 1;
                *v84 = &off_24EC1F7F0;
                v84[2] = 0;
                v84[3] = v83;
                *(_QWORD *)v463 = v83;
                *(_QWORD *)&v463[8] = v83;
                *(_QWORD *)v464 = 0;
                *(_QWORD *)&v464[8] = 0;
                *(_QWORD *)&v463[16] = v84;
                v86 = (char *)operator new(0x40uLL);
                v87 = (std::__shared_weak_count *)v86;
                *((_QWORD *)v86 + 1) = 0;
                v88 = (unint64_t *)(v86 + 8);
                *((_QWORD *)v86 + 2) = 0;
                *((_QWORD *)v86 + 3) = off_24EC5D6C0;
                *(_QWORD *)v86 = &off_24EC5D670;
                strcpy(v86 + 32, "Room expansion");
                *(_QWORD *)(v86 + 47) = 0;
                v86[55] = 14;
                *(_QWORD *)v464 = v86 + 24;
                *(_QWORD *)&v464[8] = v86;
                *(_QWORD *)v459 = v83;
                *(_QWORD *)&v459[8] = v83;
                *(_QWORD *)&v459[16] = v84;
                do
                  v89 = __ldxr(v85);
                while (__stxr(v89 + 1, v85));
                *(_QWORD *)&v459[24] = v86 + 24;
                *(_QWORD *)&v459[32] = v86;
                do
                  v90 = __ldxr(v88);
                while (__stxr(v90 + 1, v88));
                v460 = v86 + 24;
                do
                  v91 = __ldaxr(v88);
                while (__stlxr(v91 - 1, v88));
                if (!v91)
                {
                  (*(void (**)(char *))(*(_QWORD *)v86 + 16))(v86);
                  std::__shared_weak_count::__release_weak(v87);
                }
                v92 = *(std::__shared_weak_count **)&v463[16];
                if (*(_QWORD *)&v463[16])
                {
                  v93 = (unint64_t *)(*(_QWORD *)&v463[16] + 8);
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                v95 = *(_QWORD *)v459;
                if (v460[31] >= 0)
                  v96 = v460 + 8;
                else
                  v96 = (char *)*((_QWORD *)v460 + 1);
                v97 = _os_log_pack_fill();
                v98 = *(float *)(v17 + 32);
                v99 = v81;
                v100 = *(float *)(v17 + 20);
                v101 = *(float *)(v17 + 24);
                v102 = *(float *)(v17 + 28);
                *(_DWORD *)v97 = 136382211;
                *(_QWORD *)(v97 + 4) = v96;
                *(_WORD *)(v97 + 12) = 2048;
                *(double *)(v97 + 14) = v441;
                *(_WORD *)(v97 + 22) = 2048;
                *(double *)(v97 + 24) = v98;
                *(_WORD *)(v97 + 32) = 2048;
                *(double *)(v97 + 34) = v99;
                *(_WORD *)(v97 + 42) = 2048;
                *(double *)(v97 + 44) = v100;
                *(_WORD *)(v97 + 52) = 2048;
                *(double *)(v97 + 54) = v101;
                *(_WORD *)(v97 + 62) = 2048;
                *(double *)(v97 + 64) = v102;
                v103 = operator new();
                v104 = *(unsigned __int8 *)(*(_QWORD *)&v435 + 39);
                v105 = v434;
                if ((v104 & 0x80u) != 0)
                {
                  v105 = *(_QWORD *)(*(_QWORD *)&v435 + 16);
                  v104 = *(_QWORD *)(*(_QWORD *)&v435 + 24);
                }
                *(_QWORD *)v103 = v95;
                *(_OWORD *)(v103 + 8) = *(_OWORD *)&v459[8];
                *(_QWORD *)&v459[8] = 0;
                *(_QWORD *)&v459[16] = 0;
                *(_OWORD *)(v103 + 24) = *(_OWORD *)&v459[24];
                *(_QWORD *)&v459[24] = 0;
                *(_QWORD *)&v459[32] = 0;
                *(_QWORD *)(v103 + 40) = v105;
                *(_QWORD *)(v103 + 48) = v104;
                *(_BYTE *)(v103 + 56) = 16;
                __p = 0;
                *(_QWORD *)v463 = v103;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v439 + 24) + 40))(*(_QWORD *)(v439 + 24), v463);
                v106 = *(_QWORD *)v463;
                *(_QWORD *)v463 = 0;
                if (v106)
                {
                  v107 = *(std::__shared_weak_count **)(v106 + 32);
                  if (v107)
                  {
                    v108 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  v110 = *(std::__shared_weak_count **)(v106 + 16);
                  if (v110)
                  {
                    v111 = (unint64_t *)&v110->__shared_owners_;
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  MEMORY[0x227684CE8](v106, 0x10F0C40B62ED6C6);
                  __p = 0;
                }
                if (v18)
                {
                  v113 = *(float *)(v17 + 32);
                  v114 = *(float *)(v17 + 20);
                  v115 = *(float *)(v17 + 24);
                  v116 = *(float *)(v17 + 28);
                  *(_DWORD *)v463 = 136382211;
                  *(_QWORD *)&v463[4] = "Room expansion";
                  *(_WORD *)&v463[12] = 2048;
                  *(double *)&v463[14] = v441;
                  *(_WORD *)&v463[22] = 2048;
                  *(double *)v464 = v113;
                  *(_WORD *)&v464[8] = 2048;
                  *(double *)&v464[10] = v99;
                  *(_WORD *)&v464[18] = 2048;
                  *(double *)&v464[20] = v114;
                  *(_WORD *)&v464[28] = 2048;
                  *(double *)&v464[30] = v115;
                  *(_WORD *)&v464[38] = 2048;
                  v465 = v116;
                  v433 = 72;
                  v432 = v463;
                  v117 = (void *)_os_log_send_and_compose_impl();
                }
                else
                {
                  v117 = 0;
                }
                if (*(_QWORD *)&v459[32])
                {
                  v126 = (unint64_t *)(*(_QWORD *)&v459[32] + 8);
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)&v459[32] + 16))(*(_QWORD *)&v459[32]);
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v459[32]);
                  }
                }
                if (*(_QWORD *)&v459[16])
                {
                  v128 = (unint64_t *)(*(_QWORD *)&v459[16] + 8);
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)&v459[16] + 16))(*(_QWORD *)&v459[16]);
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v459[16]);
                  }
                }
                if (!v18)
                {
LABEL_176:
                  if (!v117)
                  {
LABEL_178:
                    sub_223182C08((uint64_t)&v450);
                    v130 = v458;
                    if (v458)
                    {
                      v131 = (unint64_t *)&v458->__shared_owners_;
                      do
                        v132 = __ldaxr(v131);
                      while (__stlxr(v132 - 1, v131));
                      if (!v132)
                      {
                        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                        std::__shared_weak_count::__release_weak(v130);
                      }
                    }
                    goto LABEL_183;
                  }
LABEL_177:
                  free(v117);
                  goto LABEL_178;
                }
                sub_22322C138((uint64_t)&v450, (char *)v117, v432, v433);
              }
              else
              {
                os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
                if (!v18)
                {
                  v122 = *(float *)(v17 + 32);
                  v123 = *(float *)(v17 + 20);
                  v124 = *(float *)(v17 + 24);
                  v125 = *(float *)(v17 + 28);
                  *(_DWORD *)v463 = 136382211;
                  *(_QWORD *)&v463[4] = "Room expansion";
                  *(_WORD *)&v463[12] = 2048;
                  *(double *)&v463[14] = v441;
                  *(_WORD *)&v463[22] = 2048;
                  *(double *)v464 = v122;
                  *(_WORD *)&v464[8] = 2048;
                  *(double *)&v464[10] = v81;
                  *(_WORD *)&v464[18] = 2048;
                  *(double *)&v464[20] = v123;
                  *(_WORD *)&v464[28] = 2048;
                  *(double *)&v464[30] = v124;
                  *(_WORD *)&v464[38] = 2048;
                  v465 = v125;
                  v117 = (void *)_os_log_send_and_compose_impl();
                  if (!v117)
                    goto LABEL_178;
                  goto LABEL_177;
                }
                v118 = *(float *)(v17 + 32);
                v119 = *(float *)(v17 + 20);
                v120 = *(float *)(v17 + 24);
                v121 = *(float *)(v17 + 28);
                *(_DWORD *)v463 = 136382211;
                *(_QWORD *)&v463[4] = "Room expansion";
                *(_WORD *)&v463[12] = 2048;
                *(double *)&v463[14] = v441;
                *(_WORD *)&v463[22] = 2048;
                *(double *)v464 = v118;
                *(_WORD *)&v464[8] = 2048;
                *(double *)&v464[10] = v81;
                *(_WORD *)&v464[18] = 2048;
                *(double *)&v464[20] = v119;
                *(_WORD *)&v464[28] = 2048;
                *(double *)&v464[30] = v120;
                *(_WORD *)&v464[38] = 2048;
                v465 = v121;
                v117 = (void *)_os_log_send_and_compose_impl();
                sub_22322C138((uint64_t)&v450, (char *)v117, v463, 72);
              }
              sub_223182C08((uint64_t)&v450);
              goto LABEL_176;
            }
          }
          memmove(v77, v73, v21);
          goto LABEL_117;
        }
      }
      memmove(v74, v71, v72);
      goto LABEL_109;
    }
  }
LABEL_183:
  v441 = 5.0;
LABEL_184:
  __p = 0;
  v448 = 0;
  v133 = (v6 >> 4);
  v449 = 0;
  if ((v6 >> 4))
  {
    v134 = (char *)operator new(8 * v133);
    __p = v134;
    v448 = v134;
    v449 = &v134[8 * v133];
  }
  else
  {
    v134 = 0;
  }
  v135 = 0;
  do
  {
    v138 = vadd_f32(*(float32x2_t *)(*(_QWORD *)(v17 + 40) + 8 * (2 * v135)), vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(v17 + 40) + 8 * ((2 * v135) | 1u)), v441));
    if (v134 < v449)
    {
      *(float32x2_t *)v134 = v138;
      v136 = (uint64_t)(v134 + 8);
      goto LABEL_189;
    }
    v139 = (char *)__p;
    v140 = v134 - (_BYTE *)__p;
    v141 = (v134 - (_BYTE *)__p) >> 3;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 61)
      sub_22316E078();
    v143 = v449 - (_BYTE *)__p;
    if ((v449 - (_BYTE *)__p) >> 2 > v142)
      v142 = v143 >> 2;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      if (v144 >> 61)
        sub_223174E94();
      v145 = operator new(8 * v144);
      v146 = (float32x2_t *)&v145[8 * v141];
      *v146 = v138;
      v136 = (uint64_t)&v146[1];
      v147 = v134 - v139;
      if (v134 == v139)
      {
LABEL_206:
        __p = v146;
        v448 = (_QWORD *)v136;
        v449 = &v145[8 * v144];
        v17 = a3;
        if (!v134)
          goto LABEL_189;
LABEL_207:
        operator delete(v134);
        goto LABEL_189;
      }
    }
    else
    {
      v145 = 0;
      v146 = (float32x2_t *)(8 * v141);
      *(float32x2_t *)(8 * v141) = v138;
      v136 = 8 * v141 + 8;
      v147 = v134 - v139;
      if (v134 == v139)
        goto LABEL_206;
    }
    v148 = v147 - 8;
    if (v148 < 0x168)
    {
      v149 = v134;
      goto LABEL_202;
    }
    v151 = (v134 - 8 - v139) & 0xFFFFFFFFFFFFFFF8;
    if (&v145[v140 - 8 - v151] > &v145[v140 - 8])
    {
      v149 = v134;
      do
      {
LABEL_202:
        v150 = *(float32x2_t *)(v149 - 8);
        v149 -= 8;
        v146[-1] = v150;
        --v146;
      }
      while (v149 != v139);
      goto LABEL_203;
    }
    if (&v134[-v151 - 8] > v134 - 8)
    {
      v149 = v134;
      goto LABEL_202;
    }
    if ((unint64_t)(v134 - v145 - v140) < 0x20)
    {
      v149 = v134;
      goto LABEL_202;
    }
    v152 = (v148 >> 3) + 1;
    v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
    v149 = &v134[-v153];
    v146 = (float32x2_t *)((char *)v146 - v153);
    v154 = &v145[8 * v141 - 16];
    v155 = (__int128 *)(v134 - 16);
    v156 = v152 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v157 = *v155;
      *(v154 - 1) = *(v155 - 1);
      *v154 = v157;
      v154 -= 2;
      v155 -= 2;
      v156 -= 4;
    }
    while (v156);
    if (v152 != (v152 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_202;
LABEL_203:
    v134 = (char *)__p;
    __p = v146;
    v448 = (_QWORD *)v136;
    v449 = &v145[8 * v144];
    v17 = a3;
    if (v134)
      goto LABEL_207;
LABEL_189:
    v448 = (_QWORD *)v136;
    ++v135;
    v134 = (char *)v136;
    v137 = a2;
  }
  while (v135 != (_DWORD)v7);
  v158 = 0;
  v159 = (char *)__p;
  while ((_DWORD)v7 - 2 != v158)
  {
    v160 = v158 + 2;
    v161 = *(float32x2_t *)((char *)__p + 8 * v158++);
    v162 = vmul_f32(vsub_f32(*(float32x2_t *)((char *)__p + 8 * (v158 % v7)), v161), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)((char *)__p + 8 * (v160 % v7)), v161)));
    if (vsub_f32(v162, (float32x2_t)vdup_lane_s32((int32x2_t)v162, 1)).f32[0] < -0.001)
    {
      v66 = 0;
      goto LABEL_607;
    }
  }
  memset(v459, 0, 32);
  *(_DWORD *)&v459[32] = 1065353216;
  *(_QWORD *)v463 = v17 + 12;
  v163 = 0;
  *((_DWORD *)sub_223AD44E8((uint64_t)v459, (unsigned int *)(v17 + 12), (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5) = 0;
  do
  {
    if (v163)
    {
      if (v163 == (_DWORD)v7 - 1)
      {
        v165 = *(float32x2_t *)&v159[8 * (v7 - 2)];
        v166 = *(float32x2_t *)(*v137 + 40 * *(unsigned int *)(v17 + 16) + 4);
      }
      else
      {
        v167 = (float32x2_t *)&v159[8 * v163];
        v165 = v167[-1];
        v166 = *v167;
        v450 = (uint64_t *)v165;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v166;
        v168 = *v137;
        if (*v137 != v137[1])
        {
          v169 = 1;
          do
          {
            while (1)
            {
              *(_OWORD *)v463 = *(_OWORD *)(v168 + 4);
              if (!sub_22369F3FC((float32x2_t *)&v450, (float32x2_t *)v463, (float32x2_t *)&v462, 0))
                break;
              v170 = vsub_f32((float32x2_t)v462, (float32x2_t)v450);
              if (vmla_lane_f32(vmul_f32(v170, v170), (float32x2_t)vdup_lane_s32((int32x2_t)v170, 1), v170, 1).f32[0] <= 0.0001)
                break;
              v171 = vsub_f32((float32x2_t)v462, (float32x2_t)rep);
              if (vmla_lane_f32(vmul_f32(v171, v171), (float32x2_t)vdup_lane_s32((int32x2_t)v171, 1), v171, 1).f32[0] <= 0.0001)
                break;
              v169 = 0;
              v168 += 40;
              if (v168 == v137[1])
                goto LABEL_602;
            }
            v168 += 40;
          }
          while (v168 != v137[1]);
          if ((v169 & 1) == 0)
            goto LABEL_602;
        }
      }
      v172 = vsub_f32(v166, v165);
      v173 = sqrtf(vmla_lane_f32(vmul_f32(v172, v172), (float32x2_t)vdup_lane_s32((int32x2_t)v172, 1), v172, 1).f32[0]);
      v175 = (char *)a4[1];
      v174 = a4[2];
      if ((unint64_t)v175 < v174)
      {
        *v175 = 1;
        *(float32x2_t *)(v175 + 4) = v165;
        *(float32x2_t *)(v175 + 12) = v166;
        *((float *)v175 + 5) = v173;
        v164 = v175 + 40;
        *((_QWORD *)v175 + 3) = 0;
        *((_QWORD *)v175 + 4) = 0;
        v17 = a3;
      }
      else
      {
        v176 = (char *)*a4;
        v177 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v175[-*a4] >> 3);
        v178 = v177 + 1;
        if (v177 + 1 > 0x666666666666666)
          sub_22316E078();
        v179 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v174 - (_QWORD)v176) >> 3);
        if (2 * v179 > v178)
          v178 = 2 * v179;
        if (v179 >= 0x333333333333333)
          v180 = 0x666666666666666;
        else
          v180 = v178;
        if (v180 > 0x666666666666666)
          sub_223174E94();
        v181 = (char *)operator new(40 * v180);
        v182 = &v181[40 * v177];
        *v182 = 1;
        *(float32x2_t *)(v182 + 4) = v165;
        *(float32x2_t *)(v182 + 12) = v166;
        *((float *)v182 + 5) = v173;
        *((_QWORD *)v182 + 3) = 0;
        *((_QWORD *)v182 + 4) = 0;
        if (v175 == v176)
        {
          v186 = &v181[40 * v177];
        }
        else
        {
          v183 = 0;
          do
          {
            v184 = &v182[v183];
            *(v184 - 40) = v175[v183 - 40];
            *(_QWORD *)(v184 - 36) = *(_QWORD *)&v175[v183 - 36];
            *(_QWORD *)(v184 - 28) = *(_QWORD *)&v175[v183 - 28];
            v185 = *(_OWORD *)&v175[v183 - 20];
            *((_DWORD *)v184 - 1) = *(_DWORD *)&v175[v183 - 4];
            *(_OWORD *)(v184 - 20) = v185;
            v183 -= 40;
          }
          while (&v175[v183] != v176);
          v186 = &v182[v183];
          v175 = v176;
        }
        v164 = v182 + 40;
        *a4 = v186;
        a4[1] = v182 + 40;
        a4[2] = &v181[40 * v180];
        if (v175)
          operator delete(v175);
        v17 = a3;
        v137 = a2;
      }
      a4[1] = v164;
    }
    ++v163;
  }
  while ((_DWORD)v163 != (_DWORD)v7);
  v187 = *(_DWORD *)(v17 + 8);
  v188 = *(_DWORD *)(v17 + 16);
  v189 = a4;
  v190 = (char *)a4[1];
  if (v187 != v188)
  {
    v191 = *(float32x2_t *)(*v137 + 40 * v188 + 4);
    v192 = *(float32x2_t *)(*v137 + 40 * v187 + 4);
    v193 = vsub_f32(v192, v191);
    v194 = sqrtf(vmla_lane_f32(vmul_f32(v193, v193), (float32x2_t)vdup_lane_s32((int32x2_t)v193, 1), v193, 1).f32[0]);
    v195 = a4[2];
    if ((unint64_t)v190 >= v195)
    {
      v197 = (char *)*a4;
      v198 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v190[-*a4] >> 3);
      v199 = v198 + 1;
      if (v198 + 1 > 0x666666666666666)
        sub_22316E078();
      v200 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v195 - (_QWORD)v197) >> 3);
      if (2 * v200 > v199)
        v199 = 2 * v200;
      if (v200 >= 0x333333333333333)
        v201 = 0x666666666666666;
      else
        v201 = v199;
      if (v201 > 0x666666666666666)
        sub_223174E94();
      v202 = (char *)operator new(40 * v201);
      v203 = &v202[40 * v198];
      *v203 = 1;
      *(float32x2_t *)(v203 + 4) = v191;
      *(float32x2_t *)(v203 + 12) = v192;
      *((float *)v203 + 5) = v194;
      v204 = &v202[40 * v201];
      v196 = v203 + 40;
      *((_QWORD *)v203 + 3) = 0;
      *((_QWORD *)v203 + 4) = 0;
      if (v190 == v197)
      {
        v189 = a4;
      }
      else
      {
        v205 = 0;
        v189 = a4;
        do
        {
          v206 = &v203[v205];
          *(v206 - 40) = v190[v205 - 40];
          *(_QWORD *)(v206 - 36) = *(_QWORD *)&v190[v205 - 36];
          *(_QWORD *)(v206 - 28) = *(_QWORD *)&v190[v205 - 28];
          v207 = *(_OWORD *)&v190[v205 - 20];
          *((_DWORD *)v206 - 1) = *(_DWORD *)&v190[v205 - 4];
          *(_OWORD *)(v206 - 20) = v207;
          v205 -= 40;
        }
        while (&v190[v205] != v197);
        v203 += v205;
        v190 = v197;
      }
      *v189 = v203;
      v189[1] = v196;
      v189[2] = v204;
      if (v190)
        operator delete(v190);
    }
    else
    {
      *v190 = 1;
      *(float32x2_t *)(v190 + 4) = v191;
      *(float32x2_t *)(v190 + 12) = v192;
      *((float *)v190 + 5) = v194;
      v196 = v190 + 40;
      *((_QWORD *)v190 + 3) = 0;
      *((_QWORD *)v190 + 4) = 0;
    }
    v189[1] = v196;
    v187 = *(_DWORD *)(v17 + 8);
    v190 = v196;
  }
  v208 = *(unsigned int *)(v17 + 4);
  v209 = *v137;
  v210 = 0xCCCCCCCCCCCCCCCDLL * ((v137[1] - *v137) >> 3);
  v211 = ((v208 - 0x3333333333333333 * ((v137[1] - *v137) >> 3) - 1) % v210);
  v212 = v187 % v210;
  v442 = v211 % v210;
  while (2)
  {
    LODWORD(v450) = v212;
    v213 = (char *)*v189;
    *(_QWORD *)v463 = &v450;
    v214 = (char *)(v209 + 40 * v212);
    *((_DWORD *)sub_223AD44E8((uint64_t)v459, (unsigned int *)&v450, (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5) = -858993459 * ((unint64_t)(v190 - v213) >> 3);
    v216 = (char *)v189[1];
    v215 = v189[2];
    if ((unint64_t)v216 < v215)
    {
      v217 = v209 + 40 * v212;
      *v216 = *v214;
      *(_QWORD *)(v216 + 4) = *(_QWORD *)(v217 + 4);
      *(_QWORD *)(v216 + 12) = *(_QWORD *)(v217 + 12);
      v218 = *(_OWORD *)(v217 + 20);
      *((_DWORD *)v216 + 9) = *(_DWORD *)(v217 + 36);
      *(_OWORD *)(v216 + 20) = v218;
      v190 = v216 + 40;
      v219 = a3;
      goto LABEL_290;
    }
    v220 = (char *)*v189;
    v221 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v216[-*v189] >> 3);
    v222 = v221 + 1;
    if (v221 + 1 > 0x666666666666666)
      sub_22316E078();
    v223 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v215 - (_QWORD)v220) >> 3);
    if (2 * v223 > v222)
      v222 = 2 * v223;
    if (v223 >= 0x333333333333333)
      v224 = 0x666666666666666;
    else
      v224 = v222;
    if (v224)
    {
      if (v224 > 0x666666666666666)
        sub_223174E94();
      v225 = (char *)operator new(40 * v224);
    }
    else
    {
      v225 = 0;
    }
    v226 = &v225[40 * v221];
    *v226 = *v214;
    v227 = v209 + 40 * v212;
    *(_QWORD *)(v226 + 4) = *(_QWORD *)(v227 + 4);
    *(_QWORD *)(v226 + 12) = *(_QWORD *)(v227 + 12);
    v228 = *(_OWORD *)(v227 + 20);
    *((_DWORD *)v226 + 9) = *(_DWORD *)(v227 + 36);
    *(_OWORD *)(v226 + 20) = v228;
    if (v216 == v220)
    {
      v219 = a3;
      v190 = v226 + 40;
      *v189 = v226;
      v189[1] = v226 + 40;
      v189[2] = &v225[40 * v224];
      if (v216)
        goto LABEL_289;
    }
    else
    {
      v229 = 0;
      v219 = a3;
      do
      {
        v230 = &v226[v229];
        *(v230 - 40) = v216[v229 - 40];
        *(_QWORD *)(v230 - 36) = *(_QWORD *)&v216[v229 - 36];
        *(_QWORD *)(v230 - 28) = *(_QWORD *)&v216[v229 - 28];
        v231 = *(_OWORD *)&v216[v229 - 20];
        *((_DWORD *)v230 - 1) = *(_DWORD *)&v216[v229 - 4];
        *(_OWORD *)(v230 - 20) = v231;
        v229 -= 40;
      }
      while (&v216[v229] != v220);
      v216 = (char *)*v189;
      v190 = v226 + 40;
      *v189 = &v226[v229];
      v189[1] = v226 + 40;
      v189[2] = &v225[40 * v224];
      if (v216)
LABEL_289:
        operator delete(v216);
    }
LABEL_290:
    v189[1] = v190;
    if ((_DWORD)v212 != v442)
    {
      v209 = *a2;
      v212 = (v212 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
      continue;
    }
    break;
  }
  v232 = *(_DWORD *)(v219 + 4);
  v233 = *(_DWORD *)(v219 + 12);
  if (v232 != v233)
  {
    v234 = *(float32x2_t *)(*a2 + 40 * v232 + 4);
    v235 = *(float32x2_t *)(*a2 + 40 * v233 + 4);
    v236 = vsub_f32(v235, v234);
    v237 = sqrtf(vmla_lane_f32(vmul_f32(v236, v236), (float32x2_t)vdup_lane_s32((int32x2_t)v236, 1), v236, 1).f32[0]);
    v238 = v189[2];
    if ((unint64_t)v190 < v238)
    {
      *v190 = 1;
      *(float32x2_t *)(v190 + 4) = v234;
      *(float32x2_t *)(v190 + 12) = v235;
      *((float *)v190 + 5) = v237;
      v239 = v190 + 40;
      *((_QWORD *)v190 + 3) = 0;
      *((_QWORD *)v190 + 4) = 0;
      goto LABEL_312;
    }
    v240 = (char *)*v189;
    v241 = 0xCCCCCCCCCCCCCCCDLL * ((v190 - v240) >> 3) + 1;
    if (v241 > 0x666666666666666)
      sub_22316E078();
    v242 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v238 - (_QWORD)v240) >> 3);
    if (2 * v242 > v241)
      v241 = 2 * v242;
    if (v242 >= 0x333333333333333)
      v243 = 0x666666666666666;
    else
      v243 = v241;
    if (v243 > 0x666666666666666)
      sub_223174E94();
    v244 = (char *)operator new(40 * v243);
    v245 = &v244[8 * ((v190 - v240) >> 3)];
    *v245 = 1;
    *(float32x2_t *)(v245 + 4) = v234;
    *(float32x2_t *)(v245 + 12) = v235;
    *((float *)v245 + 5) = v237;
    v246 = &v244[40 * v243];
    v239 = v245 + 40;
    *((_QWORD *)v245 + 3) = 0;
    *((_QWORD *)v245 + 4) = 0;
    if (v190 == v240)
    {
      *a4 = v245;
      a4[1] = v239;
      v240 = v190;
      a4[2] = v246;
    }
    else
    {
      v247 = 0;
      do
      {
        v248 = &v245[v247];
        *(v248 - 40) = v190[v247 - 40];
        *(_QWORD *)(v248 - 36) = *(_QWORD *)&v190[v247 - 36];
        *(_QWORD *)(v248 - 28) = *(_QWORD *)&v190[v247 - 28];
        v249 = *(_OWORD *)&v190[v247 - 20];
        *((_DWORD *)v248 - 1) = *(_DWORD *)&v190[v247 - 4];
        *(_OWORD *)(v248 - 20) = v249;
        v247 -= 40;
      }
      while (&v190[v247] != v240);
      *a4 = &v245[v247];
      a4[1] = v239;
      a4[2] = v246;
      if (!v240)
        goto LABEL_311;
    }
    operator delete(v240);
LABEL_311:
    v189 = a4;
LABEL_312:
    v189[1] = v239;
    v190 = v239;
  }
  v250 = (char *)*v189;
  if ((char *)*v189 == v190)
  {
    v268 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v269 = (float32x2_t)0x80000000800000;
    v259 = a6;
    v260 = a1;
  }
  else
  {
    v251 = *(float32x2_t *)(v250 + 4);
    v252 = vmaxnm_f32(v251, (float32x2_t)0x80000000800000);
    v253 = vminnm_f32(v251, (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
    v254 = *(float32x2_t *)(v250 + 12);
    v255 = vsub_f32(v254, *(float32x2_t *)(v250 + 4));
    v256 = vsub_f32(v254, *(float32x2_t *)&v250[40 * (v190 - v250 != 40) + 4]);
    v257 = sqrtf(vmla_lane_f32(vmul_f32(v256, v256), (float32x2_t)vdup_lane_s32((int32x2_t)v256, 1), v256, 1).f32[0]);
    v258 = vabds_f32(sqrtf(vmla_lane_f32(vmul_f32(v255, v255), (float32x2_t)vdup_lane_s32((int32x2_t)v255, 1), v255, 1).f32[0]), *((float *)v250 + 5)) < 0.001&& v257 < 0.001;
    v259 = a6;
    v260 = a1;
    if (!v258)
    {
LABEL_318:
      sub_223ACE25C(&v446);
      if (**(int **)(v446 + 56) > 4)
        goto LABEL_602;
      v261 = *(unsigned __int8 *)(v446 + 72);
      v262 = sub_22322F254(v446, "OSLogSurrogateAppender", 1, 0);
      v263 = v262;
      if (!v261 && !v262)
        goto LABEL_602;
      v450 = &v446;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v452 = std::chrono::system_clock::now().__d_.__rep_;
      v453 = 4;
      v454 = "unknown file";
      v455 = 1265;
      v457 = 0;
      v458 = 0;
      v456 = "unknown function";
      v264 = *v450;
      v265 = *v450 + 16;
      if (*(char *)(*v450 + 39) < 0)
      {
        v267 = *(const char **)(v264 + 16);
        v266 = *(_QWORD *)(v264 + 24);
      }
      else
      {
        v266 = *(unsigned __int8 *)(*v450 + 39);
        v267 = (const char *)(*v450 + 16);
      }
      v331 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v331 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v463);
        sub_223199C58("com.apple.cv3d", (unint64_t)v463, byte_255788F40);
        if (v464[0] && (v463[23] & 0x80000000) != 0)
          operator delete(*(void **)v463);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v332 = byte_255788F40;
      else
        v332 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v333 = byte_255788F40[23];
      else
        v333 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v463 = os_log_create(v332, v267);
      v334 = &v463[8];
      if (v333 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v333 >= 0x17)
      {
        v335 = v263;
        v336 = v267;
        v337 = v264;
        v338 = v261;
        v339 = v265;
        v340 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v333 | 7) != 0x17)
          v340 = v333 | 7;
        v341 = v340 + 1;
        v334 = operator new(v340 + 1);
        *(_QWORD *)&v463[16] = v333;
        *(_QWORD *)v464 = v341 | 0x8000000000000000;
        *(_QWORD *)&v463[8] = v334;
        v265 = v339;
        v261 = v338;
        v264 = v337;
        v267 = v336;
        v263 = v335;
      }
      else
      {
        v464[7] = v333;
        if (!v333)
        {
LABEL_447:
          v334[v333] = 0;
          v464[8] = 1;
          v342 = &v464[16];
          if (v266 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v266 >= 0x17)
          {
            v343 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v266 | 7) != 0x17)
              v343 = v266 | 7;
            v344 = v343 + 1;
            v342 = operator new(v343 + 1);
            *(_QWORD *)&v464[24] = v266;
            *(_QWORD *)&v464[32] = v344 | 0x8000000000000000;
            *(_QWORD *)&v464[16] = v342;
          }
          else
          {
            v464[39] = v266;
            if (!v266)
            {
LABEL_455:
              v342[v266] = 0;
              LOBYTE(v465) = 1;
              v345 = *(NSObject **)v463;
              if ((v464[39] & 0x80000000) != 0)
                operator delete(*(void **)&v464[16]);
              if (v464[8] && (v464[7] & 0x80000000) != 0)
                operator delete(*(void **)&v463[8]);
              if (*(_QWORD *)v463)
                os_release(*(void **)v463);
              if (v263 && *(_QWORD *)(v263 + 24))
              {
                v346 = _os_log_pack_size();
                v347 = (std::__shared_weak_count_vtbl *)operator new(v346, (std::align_val_t)8uLL);
                v348 = (std::__shared_weak_count *)operator new();
                v349 = v348;
                v348->__shared_owners_ = 0;
                v350 = (unint64_t *)&v348->__shared_owners_;
                v348->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v348->__shared_weak_owners_ = 0;
                v348[1].__vftable = v347;
                *(_QWORD *)v463 = v347;
                *(_QWORD *)&v463[8] = v347;
                *(_QWORD *)&v463[16] = v348;
                do
                  v351 = __ldxr(v350);
                while (__stxr(v351 + 1, v350));
                memset(v464, 0, 24);
                do
                  v352 = __ldaxr(v350);
                while (__stlxr(v352 - 1, v350));
                if (!v352)
                {
                  ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                  std::__shared_weak_count::__release_weak(v349);
                }
                v353 = *(_QWORD *)v463;
                *(_WORD *)_os_log_pack_fill() = 0;
                v354 = operator new();
                v355 = *(unsigned __int8 *)(v264 + 39);
                if ((v355 & 0x80u) == 0)
                  v356 = v265;
                else
                  v356 = *(_QWORD *)(v264 + 16);
                if ((v355 & 0x80u) != 0)
                  v355 = *(_QWORD *)(v264 + 24);
                *(_QWORD *)v354 = v353;
                *(_OWORD *)(v354 + 8) = *(_OWORD *)&v463[8];
                *(_QWORD *)&v463[8] = 0;
                *(_QWORD *)&v463[16] = 0;
                *(_OWORD *)(v354 + 24) = *(_OWORD *)v464;
                *(_QWORD *)v464 = 0;
                *(_QWORD *)&v464[8] = 0;
                *(_QWORD *)(v354 + 40) = v356;
                *(_QWORD *)(v354 + 48) = v355;
                *(_BYTE *)(v354 + 56) = 16;
                v461 = 0;
                v462 = v354;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v263 + 24) + 40))(*(_QWORD *)(v263 + 24), &v462);
                v357 = (float32x2_t)v462;
                v462 = 0;
                if (v357)
                {
                  v358 = *(std::__shared_weak_count **)(*(_QWORD *)&v357 + 32);
                  if (v358)
                  {
                    v359 = (unint64_t *)&v358->__shared_owners_;
                    do
                      v360 = __ldaxr(v359);
                    while (__stlxr(v360 - 1, v359));
                    if (!v360)
                    {
                      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                      std::__shared_weak_count::__release_weak(v358);
                    }
                  }
                  v361 = *(std::__shared_weak_count **)(*(_QWORD *)&v357 + 16);
                  if (v361)
                  {
                    v362 = (unint64_t *)&v361->__shared_owners_;
                    do
                      v363 = __ldaxr(v362);
                    while (__stlxr(v363 - 1, v362));
                    if (!v363)
                    {
                      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                      std::__shared_weak_count::__release_weak(v361);
                    }
                  }
                  MEMORY[0x227684CE8](*(_QWORD *)&v357, 0x10F0C40B62ED6C6);
                  v364 = v461;
                  v461 = 0;
                  if (v364)
                  {
                    v365 = *(std::__shared_weak_count **)(v364 + 32);
                    if (v365)
                    {
                      v366 = (unint64_t *)&v365->__shared_owners_;
                      do
                        v367 = __ldaxr(v366);
                      while (__stlxr(v367 - 1, v366));
                      if (!v367)
                      {
                        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                        std::__shared_weak_count::__release_weak(v365);
                      }
                    }
                    v368 = *(std::__shared_weak_count **)(v364 + 16);
                    if (v368)
                    {
                      v369 = (unint64_t *)&v368->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                        std::__shared_weak_count::__release_weak(v368);
                      }
                    }
                    MEMORY[0x227684CE8](v364, 0x10F0C40B62ED6C6);
                  }
                }
                v371 = *(std::__shared_weak_count **)&v464[8];
                if (*(_QWORD *)&v464[8])
                {
                  v372 = (unint64_t *)(*(_QWORD *)&v464[8] + 8);
                  do
                    v373 = __ldaxr(v372);
                  while (__stlxr(v373 - 1, v372));
                  if (!v373)
                  {
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v371);
                  }
                }
                v374 = *(std::__shared_weak_count **)&v463[16];
                if (*(_QWORD *)&v463[16])
                {
                  v375 = (unint64_t *)(*(_QWORD *)&v463[16] + 8);
                  do
                    v376 = __ldaxr(v375);
                  while (__stlxr(v376 - 1, v375));
                  if (!v376)
                  {
                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                    std::__shared_weak_count::__release_weak(v374);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v345, OS_LOG_TYPE_ERROR);
                *(_WORD *)v463 = 0;
                v377 = (void *)_os_log_send_and_compose_impl();
                if (v377)
                  free(v377);
              }
              if (v261)
              {
                sub_22322C138((uint64_t)&v450, "ApplyExpansion invalid output");
                sub_223182C08((uint64_t)&v450);
              }
              sub_223182C08((uint64_t)&v450);
              v378 = v458;
              if (v458)
              {
                v379 = (unint64_t *)&v458->__shared_owners_;
                do
                  v380 = __ldaxr(v379);
                while (__stlxr(v380 - 1, v379));
LABEL_600:
                if (!v380)
                {
                  ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                  std::__shared_weak_count::__release_weak(v378);
                }
              }
              goto LABEL_602;
            }
          }
          memmove(v342, v267, v266);
          goto LABEL_455;
        }
      }
      memmove(v334, v332, v333);
      goto LABEL_447;
    }
    v280 = *(float32x2_t *)(v250 + 12);
    v269 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v280, v252), (int8x8_t)v280, (int8x8_t)v252);
    v268 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v253, v280), (int8x8_t)v280, (int8x8_t)v253);
    v281 = 1;
    while ((v190 - v250) / 40 != v281)
    {
      v282 = &v250[40 * v281];
      v283 = *(float32x2_t *)(v282 + 12);
      v284 = vsub_f32(v283, *(float32x2_t *)(v282 + 4));
      if (vabds_f32(sqrtf(vmla_lane_f32(vmul_f32(v284, v284), (float32x2_t)vdup_lane_s32((int32x2_t)v284, 1), v284, 1).f32[0]), *((float *)v282 + 5)) < 0.001)
      {
        v269 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v283, v269), (int8x8_t)v283, (int8x8_t)v269);
        v285 = vsub_f32(v283, *(float32x2_t *)&v250[40 * (++v281 % (0xCCCCCCCCCCCCCCCDLL * ((v190 - v250) >> 3))) + 4]);
        v268 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v268, v283), (int8x8_t)v283, (int8x8_t)v268);
        if (sqrtf(vmla_lane_f32(vmul_f32(v285, v285), (float32x2_t)vdup_lane_s32((int32x2_t)v285, 1), v285, 1).f32[0]) < 0.001)
          continue;
      }
      goto LABEL_318;
    }
  }
  v270 = vsub_f32(v269, v268);
  if (v270.f32[0] <= *v260 && v270.f32[1] <= *v260)
  {
    v286 = v259 + 1;
    v445 = -858993459 * ((unint64_t)(a5[1] - *a5) >> 4);
    if (v259 + 1 != v445)
    {
      do
      {
        v287 = *a5;
        v288 = *a5 + 80 * v286;
        v291 = *(_DWORD *)(v288 + 12);
        v290 = (unsigned int *)(v288 + 12);
        v289 = v291;
        v292 = *(int8x8_t *)&v459[8];
        if (*(_QWORD *)&v459[8])
        {
          v293 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v459[8]);
          v293.i16[0] = vaddlv_u8(v293);
          if (v293.u32[0] > 1uLL)
          {
            v294 = v289;
            if (*(_QWORD *)&v459[8] <= v289)
              v294 = v289 % *(_QWORD *)&v459[8];
          }
          else
          {
            v294 = (*(_DWORD *)&v459[8] - 1) & v289;
          }
          v295 = *(uint64_t ***)(*(_QWORD *)v459 + 8 * v294);
          if (v295)
          {
            v296 = *v295;
            if (v296)
            {
              if (v293.u32[0] < 2uLL)
              {
                while (1)
                {
                  v298 = v296[1];
                  if (v298 == v289)
                  {
                    if (*((_DWORD *)v296 + 4) == (_DWORD)v289)
                      goto LABEL_363;
                  }
                  else if ((v298 & (*(_QWORD *)&v459[8] - 1)) != v294)
                  {
                    goto LABEL_361;
                  }
                  v296 = (uint64_t *)*v296;
                  if (!v296)
                    goto LABEL_361;
                }
              }
              do
              {
                v297 = v296[1];
                if (v297 == v289)
                {
                  if (*((_DWORD *)v296 + 4) == (_DWORD)v289)
                    goto LABEL_363;
                }
                else
                {
                  if (v297 >= *(_QWORD *)&v459[8])
                    v297 %= *(_QWORD *)&v459[8];
                  if (v297 != v294)
                    break;
                }
                v296 = (uint64_t *)*v296;
              }
              while (v296);
            }
          }
        }
LABEL_361:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaExpander.cpp", 1281, (uint64_t)"index_map.count(candidate.index1) > 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_611;
        }
        v292 = *(int8x8_t *)&v459[8];
LABEL_363:
        v299 = v287 + 80 * v286;
        v302 = *(_DWORD *)(v299 + 16);
        v301 = (unsigned int *)(v299 + 16);
        v300 = v302;
        if (v292)
        {
          v303 = (uint8x8_t)vcnt_s8(v292);
          v303.i16[0] = vaddlv_u8(v303);
          if (v303.u32[0] > 1uLL)
          {
            v304 = v300;
            if (*(_QWORD *)&v292 <= v300)
              v304 = v300 % *(_QWORD *)&v292;
          }
          else
          {
            v304 = (v292.i32[0] - 1) & v300;
          }
          v305 = *(uint64_t ***)(*(_QWORD *)v459 + 8 * v304);
          if (v305)
          {
            v306 = *v305;
            if (v306)
            {
              if (v303.u32[0] < 2uLL)
              {
                while (1)
                {
                  v308 = v306[1];
                  if (v308 == v300)
                  {
                    if (*((_DWORD *)v306 + 4) == (_DWORD)v300)
                      goto LABEL_385;
                  }
                  else if ((v308 & (*(_QWORD *)&v292 - 1)) != v304)
                  {
                    goto LABEL_383;
                  }
                  v306 = (uint64_t *)*v306;
                  if (!v306)
                    goto LABEL_383;
                }
              }
              do
              {
                v307 = v306[1];
                if (v307 == v300)
                {
                  if (*((_DWORD *)v306 + 4) == (_DWORD)v300)
                    goto LABEL_385;
                }
                else
                {
                  if (v307 >= *(_QWORD *)&v292)
                    v307 %= *(_QWORD *)&v292;
                  if (v307 != v304)
                    break;
                }
                v306 = (uint64_t *)*v306;
              }
              while (v306);
            }
          }
        }
LABEL_383:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaExpander.cpp", 1282, (uint64_t)"index_map.count(candidate.index2) > 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_611;
        }
        v292 = *(int8x8_t *)&v459[8];
LABEL_385:
        v309 = v287 + 80 * v286;
        v312 = *(_DWORD *)(v309 + 4);
        v311 = (unsigned int *)(v309 + 4);
        v310 = v312;
        if (v292)
        {
          v313 = (uint8x8_t)vcnt_s8(v292);
          v313.i16[0] = vaddlv_u8(v313);
          if (v313.u32[0] > 1uLL)
          {
            v314 = v310;
            if (*(_QWORD *)&v292 <= v310)
              v314 = v310 % *(_QWORD *)&v292;
          }
          else
          {
            v314 = (v292.i32[0] - 1) & v310;
          }
          v315 = *(uint64_t ***)(*(_QWORD *)v459 + 8 * v314);
          if (v315)
          {
            v316 = *v315;
            if (v316)
            {
              if (v313.u32[0] < 2uLL)
              {
                while (1)
                {
                  v318 = v316[1];
                  if (v318 == v310)
                  {
                    if (*((_DWORD *)v316 + 4) == (_DWORD)v310)
                      goto LABEL_407;
                  }
                  else if ((v318 & (*(_QWORD *)&v292 - 1)) != v314)
                  {
                    goto LABEL_405;
                  }
                  v316 = (uint64_t *)*v316;
                  if (!v316)
                    goto LABEL_405;
                }
              }
              do
              {
                v317 = v316[1];
                if (v317 == v310)
                {
                  if (*((_DWORD *)v316 + 4) == (_DWORD)v310)
                    goto LABEL_407;
                }
                else
                {
                  if (v317 >= *(_QWORD *)&v292)
                    v317 %= *(_QWORD *)&v292;
                  if (v317 != v314)
                    break;
                }
                v316 = (uint64_t *)*v316;
              }
              while (v316);
            }
          }
        }
LABEL_405:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaExpander.cpp", 1283, (uint64_t)"index_map.count(candidate.movable_index1) > 0", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_611;
        }
        v292 = *(int8x8_t *)&v459[8];
LABEL_407:
        v319 = v287 + 80 * v286;
        v322 = *(_DWORD *)(v319 + 8);
        v321 = (unsigned int *)(v319 + 8);
        v320 = v322;
        if (v292)
        {
          v323 = (uint8x8_t)vcnt_s8(v292);
          v323.i16[0] = vaddlv_u8(v323);
          if (v323.u32[0] > 1uLL)
          {
            v324 = v320;
            if (*(_QWORD *)&v292 <= v320)
              v324 = v320 % *(_QWORD *)&v292;
          }
          else
          {
            v324 = (v292.i32[0] - 1) & v320;
          }
          v325 = *(uint64_t ***)(*(_QWORD *)v459 + 8 * v324);
          if (v325)
          {
            v326 = *v325;
            if (v326)
            {
              if (v323.u32[0] < 2uLL)
              {
                v327 = *(_QWORD *)&v292 - 1;
                while (1)
                {
                  v329 = v326[1];
                  if (v329 == v320)
                  {
                    if (*((_DWORD *)v326 + 4) == (_DWORD)v320)
                      goto LABEL_428;
                  }
                  else if ((v329 & v327) != v324)
                  {
                    goto LABEL_427;
                  }
                  v326 = (uint64_t *)*v326;
                  if (!v326)
                    goto LABEL_427;
                }
              }
              do
              {
                v328 = v326[1];
                if (v328 == v320)
                {
                  if (*((_DWORD *)v326 + 4) == (_DWORD)v320)
                    goto LABEL_428;
                }
                else
                {
                  if (v328 >= *(_QWORD *)&v292)
                    v328 %= *(_QWORD *)&v292;
                  if (v328 != v324)
                    break;
                }
                v326 = (uint64_t *)*v326;
              }
              while (v326);
            }
          }
        }
LABEL_427:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterAreaExpander.cpp", 1284, (uint64_t)"index_map.count(candidate.movable_index2) > 0", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
LABEL_611:
          abort();
        }
LABEL_428:
        *(_QWORD *)v463 = v290;
        *v290 = *((_DWORD *)sub_223AD44E8((uint64_t)v459, v290, (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5);
        *(_QWORD *)v463 = v301;
        *v301 = *((_DWORD *)sub_223AD44E8((uint64_t)v459, v301, (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5);
        *(_QWORD *)v463 = v311;
        *v311 = *((_DWORD *)sub_223AD44E8((uint64_t)v459, v311, (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5);
        *(_QWORD *)v463 = v321;
        *v321 = *((_DWORD *)sub_223AD44E8((uint64_t)v459, v321, (uint64_t)&unk_2245BA939, (_DWORD **)v463) + 5);
        ++v286;
      }
      while (v286 != v445);
    }
    v66 = 1;
    v330 = *(_QWORD **)&v459[16];
    if (*(_QWORD *)&v459[16])
      goto LABEL_603;
    goto LABEL_604;
  }
  sub_223ACE25C(&v446);
  if (**(int **)(v446 + 56) > 2)
    goto LABEL_602;
  v272 = *(unsigned __int8 *)(v446 + 72);
  v273 = sub_22322F254(v446, "OSLogSurrogateAppender", 1, 0);
  v274 = v273;
  if (!v272 && v273 == 0)
    goto LABEL_602;
  v450 = &v446;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v452 = std::chrono::system_clock::now().__d_.__rep_;
  v453 = 2;
  v454 = "unknown file";
  v455 = 1273;
  v457 = 0;
  v458 = 0;
  v456 = "unknown function";
  v276 = *v450;
  v277 = *v450 + 16;
  if (*(char *)(*v450 + 39) < 0)
  {
    v279 = *(const char **)(v276 + 16);
    v278 = *(_QWORD *)(v276 + 24);
  }
  else
  {
    v278 = *(unsigned __int8 *)(*v450 + 39);
    v279 = (const char *)(*v450 + 16);
  }
  v381 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v381 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v463);
    sub_223199C58("com.apple.cv3d", (unint64_t)v463, byte_255788F40);
    if (v464[0] && (v463[23] & 0x80000000) != 0)
      operator delete(*(void **)v463);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v382 = byte_255788F40;
  else
    v382 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v383 = byte_255788F40[23];
  else
    v383 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v463 = os_log_create(v382, v279);
  v384 = &v463[8];
  if (v383 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v383 >= 0x17)
  {
    v385 = v274;
    v386 = v279;
    v387 = v276;
    v388 = v272;
    v389 = v277;
    v390 = (v383 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v383 | 7) != 0x17)
      v390 = v383 | 7;
    v391 = v390 + 1;
    v384 = operator new(v390 + 1);
    *(_QWORD *)&v463[16] = v383;
    *(_QWORD *)v464 = v391 | 0x8000000000000000;
    *(_QWORD *)&v463[8] = v384;
    v277 = v389;
    v272 = v388;
    v276 = v387;
    v279 = v386;
    v274 = v385;
    goto LABEL_531;
  }
  v464[7] = v383;
  if (v383)
LABEL_531:
    memmove(v384, v382, v383);
  v384[v383] = 0;
  v464[8] = 1;
  v392 = &v464[16];
  if (v278 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v278 >= 0x17)
  {
    v393 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v278 | 7) != 0x17)
      v393 = v278 | 7;
    v394 = v393 + 1;
    v392 = operator new(v393 + 1);
    *(_QWORD *)&v464[24] = v278;
    *(_QWORD *)&v464[32] = v394 | 0x8000000000000000;
    *(_QWORD *)&v464[16] = v392;
    goto LABEL_539;
  }
  v464[39] = v278;
  if (v278)
LABEL_539:
    memmove(v392, v279, v278);
  v392[v278] = 0;
  LOBYTE(v465) = 1;
  v395 = *(NSObject **)v463;
  if ((v464[39] & 0x80000000) != 0)
    operator delete(*(void **)&v464[16]);
  if (v464[8] && (v464[7] & 0x80000000) != 0)
    operator delete(*(void **)&v463[8]);
  if (*(_QWORD *)v463)
    os_release(*(void **)v463);
  if (v274 && *(_QWORD *)(v274 + 24))
  {
    v396 = _os_log_pack_size();
    v397 = (std::__shared_weak_count_vtbl *)operator new(v396, (std::align_val_t)8uLL);
    v398 = (std::__shared_weak_count *)operator new();
    v399 = v398;
    v398->__shared_owners_ = 0;
    v400 = (unint64_t *)&v398->__shared_owners_;
    v398->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v398->__shared_weak_owners_ = 0;
    v398[1].__vftable = v397;
    *(_QWORD *)v463 = v397;
    *(_QWORD *)&v463[8] = v397;
    *(_QWORD *)&v463[16] = v398;
    do
      v401 = __ldxr(v400);
    while (__stxr(v401 + 1, v400));
    memset(v464, 0, 24);
    do
      v402 = __ldaxr(v400);
    while (__stlxr(v402 - 1, v400));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
      std::__shared_weak_count::__release_weak(v399);
    }
    v403 = *(_QWORD *)v463;
    *(_WORD *)_os_log_pack_fill() = 0;
    v404 = operator new();
    v405 = *(unsigned __int8 *)(v276 + 39);
    if ((v405 & 0x80u) == 0)
      v406 = v277;
    else
      v406 = *(_QWORD *)(v276 + 16);
    if ((v405 & 0x80u) != 0)
      v405 = *(_QWORD *)(v276 + 24);
    *(_QWORD *)v404 = v403;
    *(_OWORD *)(v404 + 8) = *(_OWORD *)&v463[8];
    *(_QWORD *)&v463[8] = 0;
    *(_QWORD *)&v463[16] = 0;
    *(_OWORD *)(v404 + 24) = *(_OWORD *)v464;
    *(_QWORD *)v464 = 0;
    *(_QWORD *)&v464[8] = 0;
    *(_QWORD *)(v404 + 40) = v406;
    *(_QWORD *)(v404 + 48) = v405;
    *(_BYTE *)(v404 + 56) = 2;
    v461 = 0;
    v462 = v404;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v274 + 24) + 40))(*(_QWORD *)(v274 + 24), &v462);
    v407 = (float32x2_t)v462;
    v462 = 0;
    if (v407)
    {
      v408 = *(std::__shared_weak_count **)(*(_QWORD *)&v407 + 32);
      if (v408)
      {
        v409 = (unint64_t *)&v408->__shared_owners_;
        do
          v410 = __ldaxr(v409);
        while (__stlxr(v410 - 1, v409));
        if (!v410)
        {
          ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
          std::__shared_weak_count::__release_weak(v408);
        }
      }
      v411 = *(std::__shared_weak_count **)(*(_QWORD *)&v407 + 16);
      if (v411)
      {
        v412 = (unint64_t *)&v411->__shared_owners_;
        do
          v413 = __ldaxr(v412);
        while (__stlxr(v413 - 1, v412));
        if (!v413)
        {
          ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
          std::__shared_weak_count::__release_weak(v411);
        }
      }
      MEMORY[0x227684CE8](*(_QWORD *)&v407, 0x10F0C40B62ED6C6);
      v414 = v461;
      v461 = 0;
      if (v414)
      {
        v415 = *(std::__shared_weak_count **)(v414 + 32);
        if (v415)
        {
          v416 = (unint64_t *)&v415->__shared_owners_;
          do
            v417 = __ldaxr(v416);
          while (__stlxr(v417 - 1, v416));
          if (!v417)
          {
            ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
            std::__shared_weak_count::__release_weak(v415);
          }
        }
        v418 = *(std::__shared_weak_count **)(v414 + 16);
        if (v418)
        {
          v419 = (unint64_t *)&v418->__shared_owners_;
          do
            v420 = __ldaxr(v419);
          while (__stlxr(v420 - 1, v419));
          if (!v420)
          {
            ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
            std::__shared_weak_count::__release_weak(v418);
          }
        }
        MEMORY[0x227684CE8](v414, 0x10F0C40B62ED6C6);
      }
    }
    v421 = *(std::__shared_weak_count **)&v464[8];
    if (*(_QWORD *)&v464[8])
    {
      v422 = (unint64_t *)(*(_QWORD *)&v464[8] + 8);
      do
        v423 = __ldaxr(v422);
      while (__stlxr(v423 - 1, v422));
      if (!v423)
      {
        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
        std::__shared_weak_count::__release_weak(v421);
      }
    }
    v424 = *(std::__shared_weak_count **)&v463[16];
    if (*(_QWORD *)&v463[16])
    {
      v425 = (unint64_t *)(*(_QWORD *)&v463[16] + 8);
      do
        v426 = __ldaxr(v425);
      while (__stlxr(v426 - 1, v425));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
      }
    }
  }
  else
  {
    os_log_type_enabled(v395, OS_LOG_TYPE_DEBUG);
    *(_WORD *)v463 = 0;
    v427 = (void *)_os_log_send_and_compose_impl();
    if (v427)
      free(v427);
  }
  if (v272)
  {
    sub_22322C138((uint64_t)&v450, "ApplyExpansion would have created an oversized room");
    sub_223182C08((uint64_t)&v450);
  }
  sub_223182C08((uint64_t)&v450);
  v378 = v458;
  if (v458)
  {
    v428 = (unint64_t *)&v458->__shared_owners_;
    do
      v380 = __ldaxr(v428);
    while (__stlxr(v380 - 1, v428));
    goto LABEL_600;
  }
LABEL_602:
  v66 = 0;
  v330 = *(_QWORD **)&v459[16];
  if (*(_QWORD *)&v459[16])
  {
    do
    {
LABEL_603:
      v429 = (_QWORD *)*v330;
      operator delete(v330);
      v330 = v429;
    }
    while (v429);
  }
LABEL_604:
  v430 = *(void **)v459;
  *(_QWORD *)v459 = 0;
  if (v430)
    operator delete(v430);
  v159 = (char *)__p;
  if (__p)
LABEL_607:
    operator delete(v159);
  return v66;
}

void sub_223AD316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  if (*(_BYTE *)(v39 - 184) && *(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a30);
  sub_22322E828((uint64_t)&a39);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223AD3540(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  uint64_t *v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  float v20;
  uint64_t v22;
  float *v23;
  float v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  void *v30;
  float *v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  float *v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  float *v82;
  size_t __len;
  char *category;
  int v85;
  unint64_t v86;
  _QWORD v87[3];
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  void *object;
  void *v96[2];
  __int128 v97;
  void *__p[2];
  unint64_t v99;
  char v100;
  void *v101[2];
  char v102;
  char v103;
  uint64_t v104;

  v2 = -858993459 * ((a2[1] - *a2) >> 4);
  if (v2)
  {
    v3 = a2;
    for (i = -858993459 * ((a2[1] - *a2) >> 4) - 1; ; --i)
    {
      --v2;
      v5 = *v3;
      v6 = *v3 + 80 * v2;
      v7 = (float *)(v6 + 28);
      v8 = *(float *)(v6 + 28);
      v9 = (float *)(v6 + 32);
      v10 = *(float *)(v6 + 32);
      v11 = v8 - v10;
      v12 = *(float *)(v6 + 68);
      if (v12 == 3.4028e38)
      {
        if (v8 < 0.0 || v11 > 30.0)
          goto LABEL_10;
      }
      else
      {
        v20 = v11
            + (float)((float)(v12 * (float)(v12 * *(float *)(v5 + 80 * v2 + 20)))
                    + (float)(v12 * *(float *)(v5 + 80 * v2 + 24)));
        if (v8 < 0.0 || v20 > 30.0)
        {
LABEL_10:
          v14 = v6 + 80;
          v15 = v3[1];
          if (v6 + 80 != v15)
          {
            v6 = v5 + 80 * i;
            v16 = v6 + 48;
            do
            {
              v18 = *(_OWORD *)(v16 + 48);
              *(_OWORD *)(v16 - 48) = *(_OWORD *)(v16 + 32);
              *(_OWORD *)(v16 - 32) = v18;
              *(_DWORD *)(v16 - 16) = *(_DWORD *)(v16 + 64);
              v19 = *(void **)(v16 - 8);
              if (v19)
              {
                *(_QWORD *)v16 = v19;
                operator delete(v19);
                *(_QWORD *)v16 = 0;
                *(_QWORD *)(v16 + 8) = 0;
              }
              v17 = v16 - 48;
              *(_OWORD *)(v16 - 8) = *(_OWORD *)(v16 + 72);
              *(_QWORD *)(v16 + 8) = *(_QWORD *)(v16 + 88);
              *(_QWORD *)(v16 + 80) = 0;
              *(_QWORD *)(v16 + 88) = 0;
              *(_QWORD *)(v16 + 72) = 0;
              *(_QWORD *)(v16 + 16) = *(_QWORD *)(v16 + 96);
              *(_DWORD *)(v16 + 24) = *(_DWORD *)(v16 + 104);
              v6 += 80;
              v16 += 80;
            }
            while (v17 + 160 != v15);
            v14 = v3[1];
          }
          while (v14 != v6)
          {
            v30 = *(void **)(v14 - 40);
            if (v30)
            {
              *(_QWORD *)(v14 - 32) = v30;
              operator delete(v30);
            }
            v14 -= 80;
          }
          v3[1] = v6;
          goto LABEL_4;
        }
      }
      if (*(_BYTE *)v6 != 2)
      {
        v31 = (float *)(v5 + 80 * v2 + 64);
        if (v12 != 3.4028e38)
          goto LABEL_120;
        goto LABEL_34;
      }
      v22 = v5 + 80 * v2;
      v24 = *(float *)(v22 + 72);
      v23 = (float *)(v22 + 72);
      v12 = v24;
      if (v24 == 3.4028e38)
        break;
LABEL_119:
      v77 = (float *)(v5 + 80 * v2);
      v78 = (float)(v8 + (float)((float)(v12 * (float)(v12 * v77[5])) + (float)(v12 * v77[6]))) - v10;
      v31 = v77 + 16;
      if (v78 <= 10.0)
      {
LABEL_120:
        *v31 = v12;
        goto LABEL_4;
      }
LABEL_34:
      *v31 = 0.0;
LABEL_4:
      if (!v2)
        return;
    }
    *v23 = 0.0;
    sub_223ACE25C(&v94);
    if (**(int **)(v94 + 56) > 4
      || (v25 = *(unsigned __int8 *)(v94 + 72),
          v26 = sub_22322F254(v94, "OSLogSurrogateAppender", 1, 0),
          (v85 = v25) == 0)
      && !v26)
    {
LABEL_118:
      v12 = *v23;
      v8 = *v7;
      v10 = *v9;
      goto LABEL_119;
    }
    v86 = v26;
    v87[0] = &v94;
    v87[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v87[2] = std::chrono::system_clock::now().__d_.__rep_;
    v88 = 4;
    v89 = "unknown file";
    v90 = 1340;
    v91 = "unknown function";
    v92 = 0;
    v93 = 0;
    v27 = *(_QWORD *)v87[0];
    v79 = *(_QWORD *)v87[0] + 16;
    v80 = *(_QWORD *)v87[0];
    if (*(char *)(*(_QWORD *)v87[0] + 39) < 0)
    {
      v28 = v86;
      __len = *(_QWORD *)(v27 + 24);
      category = *(char **)(v27 + 16);
      v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v32 & 1) != 0)
        goto LABEL_36;
    }
    else
    {
      __len = *(unsigned __int8 *)(*(_QWORD *)v87[0] + 39);
      category = (char *)(*(_QWORD *)v87[0] + 16);
      v28 = v86;
      v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v29 & 1) != 0)
        goto LABEL_36;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v101);
      sub_223199C58("com.apple.cv3d", (unint64_t)v101, byte_255788F40);
      if (v103 && v102 < 0)
        operator delete(v101[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v28 = v86;
    }
LABEL_36:
    if (byte_255788F40[23] >= 0)
      v33 = byte_255788F40;
    else
      v33 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v34 = byte_255788F40[23];
    else
      v34 = *(_QWORD *)&byte_255788F40[8];
    object = os_log_create(v33, category);
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v82 = v23;
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v36 + 1;
      v35 = operator new(v36 + 1);
      v96[1] = (void *)v34;
      *(_QWORD *)&v97 = v37 | 0x8000000000000000;
      v96[0] = v35;
      v28 = v86;
    }
    else
    {
      BYTE7(v97) = v34;
      v35 = v96;
      if (!v34)
      {
LABEL_50:
        *((_BYTE *)v35 + v34) = 0;
        BYTE8(v97) = 1;
        if (__len > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v3 = a2;
        if (__len >= 0x17)
        {
          v40 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v40 = __len | 7;
          v41 = v40 + 1;
          v38 = operator new(v40 + 1);
          __p[1] = (void *)__len;
          v99 = v41 | 0x8000000000000000;
          __p[0] = v38;
          v28 = v86;
        }
        else
        {
          HIBYTE(v99) = __len;
          v38 = __p;
          if (!__len)
          {
            LOBYTE(__p[0]) = 0;
            v100 = 1;
            v39 = object;
            if ((SHIBYTE(v99) & 0x80000000) == 0)
              goto LABEL_54;
            goto LABEL_60;
          }
        }
        memmove(v38, category, __len);
        *((_BYTE *)v38 + __len) = 0;
        v100 = 1;
        v39 = object;
        if ((SHIBYTE(v99) & 0x80000000) == 0)
        {
LABEL_54:
          if (!BYTE8(v97))
            goto LABEL_63;
          goto LABEL_61;
        }
LABEL_60:
        operator delete(__p[0]);
        if (!BYTE8(v97))
        {
LABEL_63:
          if (object)
            os_release(object);
          if (v28 && *(_QWORD *)(v28 + 24))
          {
            v42 = _os_log_pack_size();
            v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
            v44 = (std::__shared_weak_count *)operator new();
            v45 = v44;
            v44->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v44->__shared_weak_owners_ = 0;
            v44[1].__vftable = v43;
            object = v43;
            v96[0] = v43;
            v96[1] = v44;
            do
              v47 = __ldxr(p_shared_owners);
            while (__stxr(v47 + 1, p_shared_owners));
            v97 = 0uLL;
            __p[0] = 0;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v45);
            }
            v49 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v50 = (char *)operator new();
            v51 = *(unsigned __int8 *)(v80 + 39);
            v52 = v79;
            if ((v51 & 0x80u) != 0)
            {
              v52 = *(_QWORD *)(v80 + 16);
              v51 = *(_QWORD *)(v80 + 24);
            }
            *(_QWORD *)v50 = v49;
            *(_OWORD *)(v50 + 8) = *(_OWORD *)v96;
            v96[0] = 0;
            v96[1] = 0;
            *(_OWORD *)(v50 + 24) = v97;
            v97 = 0uLL;
            *((_QWORD *)v50 + 5) = v52;
            *((_QWORD *)v50 + 6) = v51;
            v50[56] = 16;
            v104 = 0;
            v101[0] = v50;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v86 + 24) + 40))(*(_QWORD *)(v86 + 24), v101);
            v53 = v101[0];
            v101[0] = 0;
            if (v53)
            {
              v54 = (std::__shared_weak_count *)*((_QWORD *)v53 + 4);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = (std::__shared_weak_count *)*((_QWORD *)v53 + 2);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
              v60 = v104;
              v104 = 0;
              if (v60)
              {
                v61 = *(std::__shared_weak_count **)(v60 + 32);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = *(std::__shared_weak_count **)(v60 + 16);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
              }
            }
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
            if (*((_QWORD *)&v97 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = (std::__shared_weak_count *)v96[1];
            if (v96[1])
            {
              v71 = (unint64_t *)((char *)v96[1] + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
          }
          else
          {
            os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v73 = (void *)_os_log_send_and_compose_impl();
            if (v73)
              free(v73);
          }
          if (v85)
          {
            sub_22322C138((uint64_t)v87, "Narrow corner has invalid maximum expansion value");
            sub_223182C08((uint64_t)v87);
          }
          sub_223182C08((uint64_t)v87);
          v74 = v93;
          if (v93)
          {
            v75 = (unint64_t *)&v93->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v23 = v82;
          goto LABEL_118;
        }
LABEL_61:
        if (SBYTE7(v97) < 0)
          operator delete(v96[0]);
        goto LABEL_63;
      }
    }
    memmove(v35, v33, v34);
    goto LABEL_50;
  }
}

void sub_223AD3E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  if (*(_BYTE *)(v15 - 120))
  {
    if (*(char *)(v15 - 121) < 0)
      operator delete(*(void **)(v15 - 144));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AD3E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_22319A054((uint64_t *)(v33 - 144));
  sub_22319A054((uint64_t *)(v33 - 112));
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_223AD3EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_223AD3ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  MEMORY[0x227684CE8](v15, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AD3F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AD3F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_223AD3F88(float a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  _BOOL4 v22;
  float v23;
  unsigned int v24;
  float v25;
  _BOOL4 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float32x2_t *v40;
  float32x2_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  void *v59;

  v5 = a3[1];
  while (2)
  {
    v6 = *a3;
    v7 = (v5 - *a3) / 80;
    while (1)
    {
      if (v5 == v6)
      {
        v10 = 0;
        v9 = 0;
        v8 = 0;
        v17 = 0.0;
        v18 = 3.4028e38;
        v13 = 3.4028e38;
        v16 = 0.0;
        v15 = 0.0;
        v14 = 0.0;
        v12 = 0.0;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0.0;
        v13 = 3.4028e38;
        v14 = 0.0;
        v15 = 0.0;
        v16 = 0.0;
        v17 = 0.0;
        v18 = 3.4028e38;
        do
        {
          if (*(float *)(v6 + 80 * v11 + 64) == 3.4028e38)
          {
            v19 = (float *)(v6 + 80 * v11);
            v15 = v15 + v19[5];
            v20 = v19[8];
            v14 = v14 + v20;
            v16 = v16 + v19[6];
            v17 = v17 + v19[7];
            if (v20 < 0.0 && v20 < v12)
            {
              v8 = v11;
              v12 = v19[8];
            }
            v21 = v19[18];
            v22 = v13 == 3.4028e38;
            if (v21 < v13)
              v22 = 1;
            if (v22)
              v23 = v21;
            else
              v23 = v13;
            if (v22)
              v24 = v11;
            else
              v24 = v9;
            if (v21 != 3.4028e38)
            {
              v13 = v23;
              v9 = v24;
            }
            v25 = *(float *)(v6 + 80 * v11 + 68);
            if (v25 != 3.4028e38)
            {
              v26 = v18 == 3.4028e38;
              if (v25 > v18)
                v26 = 1;
              if (v26)
              {
                v18 = *(float *)(v6 + 80 * v11 + 68);
                v10 = v11;
              }
            }
          }
          ++v11;
        }
        while (v7 != v11);
      }
      v27 = v17 - (float)(a1 + v14);
      if (fabsf(v15) >= 0.000001)
        break;
      if (fabsf(v16) >= 0.000001)
      {
        v28 = (float)-v27 / v16;
        goto LABEL_42;
      }
LABEL_30:
      v28 = 3.4028e38;
      if (v13 == 3.4028e38)
        goto LABEL_52;
LABEL_47:
      v36 = v6 + 80 * v9;
      v37 = *(float *)(v36 + 72);
      v38 = *(float *)(v36 + 32);
      v39 = *(float *)(v36 + 28)
          + (float)((float)((float)(v37 * v37) * *(float *)(v36 + 20)) + (float)(v37 * *(float *)(v36 + 24)));
      *(float *)(v36 + 64) = v37;
      a1 = a1 - (float)(v39 - v38);
      if (a1 < 0.0)
      {
        if (v5 != v6)
        {
          do
          {
            v54 = *(void **)(v5 - 40);
            if (v54)
            {
              *(_QWORD *)(v5 - 32) = v54;
              operator delete(v54);
            }
            v5 -= 80;
          }
          while (v5 != v6);
          goto LABEL_97;
        }
        goto LABEL_98;
      }
      if (a1 < 0.001)
        return;
      if (*(_BYTE *)v36 == 1)
      {
        v40 = *(float32x2_t **)(v6 + 80 * v9 + 40);
        v41 = vsub_f32(vmla_n_f32(v40[2], v40[3], v37), vmla_n_f32(v40[4], v40[5], v37));
        if (vmla_lane_f32(vmul_f32(v41, v41), (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), v41, 1).f32[0] < 0.25)
          *(_DWORD *)(v36 + 64) = 0;
      }
    }
    v29 = (float)(v16 * v16) + (float)((float)(v15 * -4.0) * v27);
    if (v29 < 0.0)
      goto LABEL_30;
    v30 = sqrtf(v29);
    v31 = -v16;
    v32 = v15 + v15;
    if (v30 >= 0.000001)
    {
      v28 = (float)(v30 - v16) / v32;
      v33 = (float)(v31 - v30) / v32;
      if (v28 >= v33)
        v34 = v28;
      else
        v34 = v33;
      if (v34 < 0.0)
        goto LABEL_41;
      if (v33 < v28)
        v28 = v33;
      if (v28 < 0.0)
LABEL_41:
        v28 = v34;
    }
    else
    {
      v28 = v31 / v32;
    }
LABEL_42:
    if (v13 != 3.4028e38 && (v28 == 3.4028e38 || v28 > v13))
      goto LABEL_47;
LABEL_52:
    if (v18 != 3.4028e38 && (v28 == 3.4028e38 || v28 < v18))
    {
      v43 = v6 + 80 * v10;
      if (v43 + 80 != v5)
      {
        v43 = v6 + 80 * v10;
        v44 = v43 + 48;
        do
        {
          v46 = *(_OWORD *)(v44 + 48);
          *(_OWORD *)(v44 - 48) = *(_OWORD *)(v44 + 32);
          *(_OWORD *)(v44 - 32) = v46;
          *(_DWORD *)(v44 - 16) = *(_DWORD *)(v44 + 64);
          v47 = *(void **)(v44 - 8);
          if (v47)
          {
            *(_QWORD *)v44 = v47;
            operator delete(v47);
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
          }
          v45 = v44 - 48;
          *(_OWORD *)(v44 - 8) = *(_OWORD *)(v44 + 72);
          *(_QWORD *)(v44 + 8) = *(_QWORD *)(v44 + 88);
          *(_QWORD *)(v44 + 80) = 0;
          *(_QWORD *)(v44 + 88) = 0;
          *(_QWORD *)(v44 + 72) = 0;
          *(_QWORD *)(v44 + 16) = *(_QWORD *)(v44 + 96);
          *(_DWORD *)(v44 + 24) = *(_DWORD *)(v44 + 104);
          v43 += 80;
          v44 += 80;
        }
        while (v45 + 160 != v5);
        v5 = a3[1];
      }
      while (v5 != v43)
      {
        v53 = *(void **)(v5 - 40);
        if (v53)
        {
          *(_QWORD *)(v5 - 32) = v53;
          operator delete(v53);
        }
        v5 -= 80;
      }
      goto LABEL_81;
    }
    if (v28 == 3.4028e38 || v28 < 0.0)
    {
      if (v12 < 0.0)
      {
        v43 = v6 + 80 * v8;
        if (v43 + 80 != v5)
        {
          v43 = v6 + 80 * v8;
          v48 = v43 + 48;
          do
          {
            v50 = *(_OWORD *)(v48 + 48);
            *(_OWORD *)(v48 - 48) = *(_OWORD *)(v48 + 32);
            *(_OWORD *)(v48 - 32) = v50;
            *(_DWORD *)(v48 - 16) = *(_DWORD *)(v48 + 64);
            v51 = *(void **)(v48 - 8);
            if (v51)
            {
              *(_QWORD *)v48 = v51;
              operator delete(v51);
              *(_QWORD *)v48 = 0;
              *(_QWORD *)(v48 + 8) = 0;
            }
            v49 = v48 - 48;
            *(_OWORD *)(v48 - 8) = *(_OWORD *)(v48 + 72);
            *(_QWORD *)(v48 + 8) = *(_QWORD *)(v48 + 88);
            *(_QWORD *)(v48 + 80) = 0;
            *(_QWORD *)(v48 + 88) = 0;
            *(_QWORD *)(v48 + 72) = 0;
            *(_QWORD *)(v48 + 16) = *(_QWORD *)(v48 + 96);
            *(_DWORD *)(v48 + 24) = *(_DWORD *)(v48 + 104);
            v43 += 80;
            v48 += 80;
          }
          while (v49 + 160 != v5);
          v5 = a3[1];
        }
        while (v5 != v43)
        {
          v52 = *(void **)(v5 - 40);
          if (v52)
          {
            *(_QWORD *)(v5 - 32) = v52;
            operator delete(v52);
          }
          v5 -= 80;
        }
LABEL_81:
        a3[1] = v43;
        v5 = v43;
        continue;
      }
      if (v5 == v6)
        goto LABEL_98;
      do
      {
        v59 = *(void **)(v5 - 40);
        if (v59)
        {
          *(_QWORD *)(v5 - 32) = v59;
          operator delete(v59);
        }
        v5 -= 80;
      }
      while (v5 != v6);
LABEL_97:
      v5 = v6;
LABEL_98:
      a3[1] = v5;
      return;
    }
    break;
  }
  if (v5 != v6)
  {
    v55 = 0;
    do
    {
      v56 = v6 + 80 * v55;
      v58 = *(float *)(v56 + 64);
      v57 = (float *)(v56 + 64);
      if (v58 == 3.4028e38)
        *v57 = v28;
      ++v55;
    }
    while (v7 != v55);
  }
}

uint64_t *sub_223AD44E8(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_223AD47D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AD47EC(uint64_t a1, unsigned int a2, int a3)
{
  int v5;
  int v7;
  unint64_t v8;
  unint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  float32x4_t v72;
  float32x4_t v73;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];
  int v79;
  const char *v80;
  int v81;
  const char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *object;
  void *v89[2];
  __int128 v90;
  void *__p[2];
  unint64_t v92;
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 1)
    v5 = 1;
  else
    v5 = 2;
  *(_DWORD *)a1 = 5;
  *(_DWORD *)(a1 + 4) = v5;
  if (v5 == a3)
    goto LABEL_95;
  sub_223AD515C(&v85);
  if (**(int **)(v85 + 56) > 4)
    goto LABEL_95;
  v7 = *(unsigned __int8 *)(v85 + 72);
  v8 = sub_22322F254(v85, "OSLogSurrogateAppender", 1, 0);
  if (!v7 && v8 == 0)
    goto LABEL_95;
  v10 = v8;
  v78[0] = &v85;
  v78[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v78[2] = std::chrono::system_clock::now().__d_.__rep_;
  v79 = 4;
  v80 = "unknown file";
  v81 = 87;
  v83 = 0;
  v84 = 0;
  v82 = "unknown function";
  v77 = v85;
  if (*(char *)(v85 + 39) < 0)
  {
    v12 = *(const char **)(v85 + 16);
    v11 = *(_QWORD *)(v85 + 24);
    v76 = v85 + 16;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v85 + 39);
    v12 = (const char *)(v85 + 16);
    v76 = v85 + 16;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_14;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v90 && SHIBYTE(v89[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_14:
  if (byte_255788F40[23] >= 0)
    v15 = byte_255788F40;
  else
    v15 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v16 = byte_255788F40[23];
  else
    v16 = *(_QWORD *)&byte_255788F40[8];
  object = os_log_create(v15, v12);
  v17 = v89;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v75 = v12;
    v18 = v10;
    v19 = v7;
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v17 = operator new(v20 + 1);
    v89[1] = (void *)v16;
    *(_QWORD *)&v90 = v21 | 0x8000000000000000;
    v89[0] = v17;
    v7 = v19;
    v10 = v18;
    v12 = v75;
    goto LABEL_27;
  }
  BYTE7(v90) = v16;
  if (v16)
LABEL_27:
    memmove(v17, v15, v16);
  *((_BYTE *)v17 + v16) = 0;
  BYTE8(v90) = 1;
  v22 = __p;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v23 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v23 = v11 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = (void *)v11;
    v92 = v24 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    HIBYTE(v92) = v11;
    if (!v11)
      goto LABEL_36;
  }
  memmove(v22, v12, v11);
LABEL_36:
  *((_BYTE *)v22 + v11) = 0;
  v93 = 1;
  v25 = object;
  if (SHIBYTE(v92) < 0)
    operator delete(__p[0]);
  if (BYTE8(v90) && SBYTE7(v90) < 0)
    operator delete(v89[0]);
  if (object)
    os_release(object);
  if (v10 && *(_QWORD *)(v10 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    object = v27;
    v89[0] = v27;
    v89[1] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v90 = 0uLL;
    __p[0] = 0;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = object;
    v34 = (_DWORD *)_os_log_pack_fill();
    *v34 = 67109120;
    v34[1] = a3;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v77 + 39);
    v37 = v76;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(_QWORD *)(v77 + 16);
      v36 = *(_QWORD *)(v77 + 24);
    }
    *(_QWORD *)v35 = v33;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)v89;
    v89[0] = 0;
    v89[1] = 0;
    *(_OWORD *)(v35 + 24) = v90;
    v90 = 0uLL;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 16;
    v86 = 0;
    v87 = v35;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v87);
    v38 = v87;
    v87 = 0;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
      v45 = v86;
      v86 = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = (std::__shared_weak_count *)v89[1];
    if (v89[1])
    {
      v56 = (unint64_t *)((char *)v89[1] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    LODWORD(object) = 67109120;
    HIDWORD(object) = a3;
    v58 = (void *)_os_log_send_and_compose_impl();
    if (v58)
      free(v58);
  }
  if (v7)
  {
    sub_22322C138((uint64_t)v78, "Invalid clustering downscale factor %i", a3);
    sub_223182C08((uint64_t)v78);
  }
  sub_223182C08((uint64_t)v78);
  v59 = v84;
  if (v84)
  {
    v60 = (unint64_t *)&v84->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_95:
  *(_DWORD *)a1 = a2;
  if (a2 > 4)
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v66 = 1;
    v70 = 1;
    v71 = 1;
  }
  else
  {
    v62 = 4 * (int)a2;
    v63 = *(_DWORD *)((char *)&unk_224660B70 + v62);
    v64 = *(_DWORD *)((char *)&unk_224660B84 + v62);
    v65 = *(_DWORD *)((char *)&unk_224660B98 + v62);
    v66 = *(_DWORD *)((char *)&unk_224660BAC + v62);
    v67 = *(_DWORD *)((char *)&unk_224660BC0 + v62);
    v68 = *(_DWORD *)((char *)&unk_224660BD4 + v62);
    v69 = *(_DWORD *)((char *)&unk_224660BE8 + v62);
    v70 = *(_DWORD *)((char *)&unk_224660BFC + v62);
    v71 = *(_DWORD *)((char *)&unk_224660C10 + v62);
  }
  *(_DWORD *)(a1 + 8) = v71;
  *(_DWORD *)(a1 + 12) = v63;
  *(_DWORD *)(a1 + 16) = v64;
  *(_DWORD *)(a1 + 20) = v65;
  *(_DWORD *)(a1 + 24) = v66;
  *(_DWORD *)(a1 + 28) = v67;
  *(_DWORD *)(a1 + 32) = v68;
  *(_DWORD *)(a1 + 36) = v69;
  *(_DWORD *)(a1 + 40) = v70;
  sub_223AE5158(a1 + 44, a1 + 8);
  v72 = vcvtq_f32_s32(*(int32x4_t *)(a1 + 24));
  *(float32x4_t *)(a1 + 80) = vcvtq_f32_s32(*(int32x4_t *)(a1 + 8));
  *(float32x4_t *)(a1 + 96) = v72;
  v73 = vcvtq_f32_s32(*(int32x4_t *)(a1 + 56));
  *(float32x4_t *)(a1 + 112) = vcvtq_f32_s32(*(int32x4_t *)(a1 + 40));
  *(float32x4_t *)(a1 + 128) = v73;
  *(float32x2_t *)(a1 + 144) = vcvt_f32_s32(*(int32x2_t *)(a1 + 72));
  return a1;
}

void sub_223AD5030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223AD5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_22319A054(&a26);
  sub_22319A054(&a25);
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223AD50A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AD50D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AD50E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AD515C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCD98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCD98))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCD90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCD98);
  }
  *a1 = qword_2540CCD90;
}

void sub_223AD51F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCD98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCD98);
  _Unwind_Resume(a1);
}

float32x2_t sub_223AD5250(unsigned int *a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x2_t result;

  *a1 = a2;
  if (a2 > 4)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v6 = 1;
    v10 = 1;
    v11 = 1;
  }
  else
  {
    v2 = 4 * (int)a2;
    v3 = *(_DWORD *)((char *)&unk_224660B70 + v2);
    v4 = *(_DWORD *)((char *)&unk_224660B84 + v2);
    v5 = *(_DWORD *)((char *)&unk_224660B98 + v2);
    v6 = *(_DWORD *)((char *)&unk_224660BAC + v2);
    v7 = *(_DWORD *)((char *)&unk_224660BC0 + v2);
    v8 = *(_DWORD *)((char *)&unk_224660BD4 + v2);
    v9 = *(_DWORD *)((char *)&unk_224660BE8 + v2);
    v10 = *(_DWORD *)((char *)&unk_224660BFC + v2);
    v11 = *(_DWORD *)((char *)&unk_224660C10 + v2);
  }
  a1[2] = v11;
  a1[3] = v3;
  v12 = a1 + 2;
  a1[4] = v4;
  a1[5] = v5;
  a1[6] = v6;
  a1[7] = v7;
  a1[8] = v8;
  a1[9] = v9;
  a1[10] = v10;
  sub_223AE5158((uint64_t)(a1 + 11), (uint64_t)(a1 + 2));
  v13 = *((int32x4_t *)v12 + 1);
  *(float32x4_t *)(v12 + 18) = vcvtq_f32_s32(*(int32x4_t *)v12);
  *(float32x4_t *)(v12 + 22) = vcvtq_f32_s32(v13);
  v14 = *((int32x4_t *)v12 + 3);
  *(float32x4_t *)(v12 + 26) = vcvtq_f32_s32(*((int32x4_t *)v12 + 2));
  *(float32x4_t *)(v12 + 30) = vcvtq_f32_s32(v14);
  result = vcvt_f32_s32(*(int32x2_t *)(v12 + 16));
  *((float32x2_t *)v12 + 17) = result;
  return result;
}

uint64_t sub_223AD5364(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, float a7)
{
  uint64_t v13;

  v13 = sub_223AD47EC(a1, 5u, a2);
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(float *)(v13 + 152) = a7;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_DWORD *)(v13 + 200) = 0;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  *(_WORD *)(v13 + 296) = 3341;
  *(_BYTE *)(v13 + 298) = 13;
  *(_DWORD *)(v13 + 300) = -1;
  *(_DWORD *)(v13 + 320) = 0;
  *(_BYTE *)(v13 + 324) = 0;
  *(_QWORD *)(v13 + 304) = 0;
  *(_QWORD *)(v13 + 309) = 0;
  *(_QWORD *)(v13 + 328) = 0;
  *(_QWORD *)(v13 + 336) = 0;
  *(_QWORD *)(v13 + 344) = 0;
  *(_DWORD *)(v13 + 356) = a4;
  *(_DWORD *)(v13 + 360) = a5;
  if (a6 != 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 112, (uint64_t)"log2BlockWidth == kLog2BlockWidth", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(float *)(a1 + 352) = fminf(fmaxf((float)((float)a3 * 0.025) + 0.025, 0.025), 0.4);
  return a1;
}

void sub_223AD54AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  sub_22386E470(v3);
  sub_22322E828(v1);
  sub_223AD54D0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_223AD54D0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_22388AFA4(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_223AD552C(uint64_t a1, unsigned __int16 a2, float *a3, float a4)
{
  uint64_t *v4;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unsigned __int16 v20;
  unsigned __int16 *v21;

  v20 = a2;
  v4 = *(uint64_t **)(a1 + 176);
  if (!v4)
    return 0;
  while (1)
  {
    if (*((_BYTE *)v4 + 24)
      && *((_DWORD *)v4 + 75)
      && *((float *)v4 + 60) < a4
      && *((float *)v4 + 61) > a4
      && (sub_223EA98C0(a3, (float **)v4 + 6) & 0x80000000) == 0)
    {
      v8 = (_QWORD *)v4[33];
      if (v8)
      {
        v9 = 0;
        do
        {
          v10 = v8 + 4;
          v11 = v8[5];
          if (v11)
          {
            v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
            v12.i16[0] = vaddlv_u8(v12);
            if (v12.u32[0] > 1uLL)
            {
              v13 = v20;
              if (v11 <= v20)
                v13 = v20 % v11;
            }
            else
            {
              v13 = ((_DWORD)v11 - 1) & v20;
            }
            v14 = *(uint64_t ****)(*v10 + 8 * v13);
            if (v14)
            {
              v15 = *v14;
              if (v15)
              {
                if (v12.u32[0] < 2uLL)
                {
                  v16 = v11 - 1;
                  while (1)
                  {
                    v18 = v15[1];
                    if (v18 == (uint64_t *)v20)
                    {
                      if (*((unsigned __int16 *)v15 + 8) == v20)
                        goto LABEL_34;
                    }
                    else if (((unint64_t)v18 & v16) != v13)
                    {
                      goto LABEL_33;
                    }
                    v15 = (uint64_t **)*v15;
                    if (!v15)
                      goto LABEL_33;
                  }
                }
                do
                {
                  v17 = (unint64_t)v15[1];
                  if (v17 == v20)
                  {
                    if (*((unsigned __int16 *)v15 + 8) == v20)
                      goto LABEL_34;
                  }
                  else
                  {
                    if (v17 >= v11)
                      v17 %= v11;
                    if (v17 != v13)
                      break;
                  }
                  v15 = (uint64_t **)*v15;
                }
                while (v15);
              }
            }
          }
LABEL_33:
          v21 = &v20;
          sub_223AEF740((uint64_t)v10, &v20, (uint64_t)&unk_2245BA939, &v21);
          v9 = 1;
LABEL_34:
          v8 = (_QWORD *)*v8;
        }
        while (v8);
        if ((v9 & 1) != 0)
          return 1;
      }
    }
    v4 = (uint64_t *)*v4;
    if (!v4)
      return 0;
  }
}

uint64_t sub_223AD56D8(_QWORD *a1, int *a2, char a3)
{
  int32x2_t *v4;
  uint64_t v6;
  int32x2_t v7;
  uint64_t v9;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;
  int32x2_t v30;
  int32x2_t v31;
  int8x8_t v32;
  int32x2_t v33;
  int v34;
  __int32 v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t j;
  uint64_t *i;

  v4 = (int32x2_t *)a1[28];
  if (a3)
  {
    if (v4)
    {
      v6 = 0;
      while (1)
      {
        v7 = v4[2];
        if (*a2 > v7.i32[0] || a2[2] < v7.i32[0])
          goto LABEL_6;
        v9 = HIDWORD(*(_QWORD *)&v7);
        if (a2[1] > (int)v9 || a2[3] < (int)v9)
          goto LABEL_6;
        v11 = v4[9].u32[1];
        if ((_DWORD)v11 == -1)
          goto LABEL_6;
        v4[12].i8[4] = 0;
        v12 = (int8x8_t)a1[21];
        if (!*(_QWORD *)&v12)
          goto LABEL_4;
        v13 = (uint8x8_t)vcnt_s8(v12);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v14 = v11;
          if (*(_QWORD *)&v12 <= v11)
            v14 = v11 % *(_QWORD *)&v12;
        }
        else
        {
          v14 = (v12.i32[0] - 1) & v11;
        }
        v15 = *(uint64_t ***)(a1[20] + 8 * v14);
        if (!v15 || (v16 = *v15) == 0)
        {
LABEL_4:
          v6 = (v6 + 1);
LABEL_5:
          v4[9].i32[1] = -1;
          goto LABEL_6;
        }
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v12 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == v11)
            {
              if (*((_DWORD *)v16 + 4) == (_DWORD)v11)
                goto LABEL_37;
            }
            else if ((v19 & v17) != v14)
            {
              goto LABEL_4;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_4;
          }
        }
        while (1)
        {
          v18 = v16[1];
          if (v18 == v11)
            break;
          if (v18 >= *(_QWORD *)&v12)
            v18 %= *(_QWORD *)&v12;
          if (v18 != v14)
            goto LABEL_4;
LABEL_26:
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_4;
        }
        if (*((_DWORD *)v16 + 4) != (_DWORD)v11)
          goto LABEL_26;
LABEL_37:
        v20 = sub_223AD5A88((uint64_t)a1, v11);
        v21 = *((_DWORD *)v20 + 66) - v4[10].i32[0];
        *((_DWORD *)v20 + 66) = v21;
        v22 = *((_DWORD *)v20 + 67) - v4[10].i32[1];
        *((_DWORD *)v20 + 67) = v22;
        v23 = *((_DWORD *)v20 + 68) - v4[11].i32[0];
        *((_DWORD *)v20 + 68) = v23;
        v24 = v21 | v22 | v23;
        if (v24 < 0)
        {
          *((_DWORD *)v20 + 66) = v4[10].i32[0] & ~(v4[10].i32[0] >> 31);
          *((_DWORD *)v20 + 67) = v4[10].i32[1] & ~(v4[10].i32[1] >> 31);
          *((_DWORD *)v20 + 68) = v4[11].i32[0] & ~(v4[11].i32[0] >> 31);
        }
        v25 = *((_DWORD *)v20 + 69);
        v26 = v4[4].u16[1];
        v27 = v25 - v26;
        if (v25 < v26)
          v27 = 0;
        *((_DWORD *)v20 + 69) = v27;
        v28 = *((_DWORD *)v20 + 5);
        if (v28)
        {
          v29 = v24 >= 0;
          if (v25 < v26)
            v29 = 0;
          *((_DWORD *)v20 + 5) = v28 - 1;
        }
        else
        {
          v29 = 0;
        }
        v30 = (int32x2_t)v20[54];
        v31 = v4[5];
        v32 = (int8x8_t)vcge_s32(v30, v31);
        v20[54] = (uint64_t)vand_s8((int8x8_t)vsub_s32(v30, v31), v32);
        if ((v32.i32[1] & v32.i32[0] & v29) != 0)
          v6 = v6;
        else
          v6 = (v6 + 10000);
        v33 = v4[2];
        v34 = *a2;
        if (*a2 > v33.i32[0] || a2[2] < v33.i32[0] || a2[1] > v33.i32[1] || a2[3] < v33.i32[1])
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1217, (uint64_t)"InsideBoundary(bbox_opt, pos)", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v33.i32[0] = v4[2].i32[0];
          v34 = *a2;
        }
        if (v33.i32[0] != v34)
        {
          v35 = v4[2].i32[1];
          if (v35 != a2[1] && v33.i32[0] != a2[2] && v35 != a2[3])
            goto LABEL_5;
        }
LABEL_6:
        v4 = (int32x2_t *)*v4;
        if (!v4)
          goto LABEL_70;
      }
    }
    v6 = 0;
LABEL_70:
    for (i = (uint64_t *)a1[22]; i; i = (uint64_t *)*i)
    {
      *((_BYTE *)i + 464) = 0;
      *((_BYTE *)i + 24) = 1;
    }
  }
  else
  {
    for (; v4; v4 = (int32x2_t *)*v4)
    {
      v4[12].i8[4] = 0;
      v4[9].i32[1] = -1;
    }
    if (a1[23])
    {
      v36 = (_QWORD *)a1[22];
      if (v36)
      {
        do
        {
          v37 = (_QWORD *)*v36;
          sub_22388AFA4(v36 + 3);
          operator delete(v36);
          v36 = v37;
        }
        while (v37);
      }
      a1[22] = 0;
      v38 = a1[21];
      if (v38)
      {
        for (j = 0; j != v38; ++j)
          *(_QWORD *)(a1[20] + 8 * j) = 0;
      }
      v6 = 0;
      a1[23] = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t *sub_223AD5A88(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (*((_DWORD *)v6 + 4) == a2)
                return v6 + 3;
            }
            else if ((v9 & v7) != v4)
            {
              goto LABEL_21;
            }
            v6 = (uint64_t *)*v6;
            if (!v6)
              goto LABEL_21;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (*((_DWORD *)v6 + 4) == a2)
              return v6 + 3;
          }
          else
          {
            if (v8 >= v2)
              v8 %= v2;
            if (v8 != v4)
              break;
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
LABEL_21:
  v10 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 2051, (uint64_t)"it != area_infos_.end()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  v6 = 0;
  if (v10)
    abort();
  return v6 + 3;
}

void sub_223AD5BA8(int8x8_t *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v4;
  int8x8_t v6;
  int v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _DWORD **v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  const char *v43;
  size_t v44;
  unsigned __int8 v45;
  const char *v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int32 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int32 v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int8x8_t i;
  int v96;
  uint64_t *j;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v102;
  uint64_t v103;
  const char *v104;
  size_t v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  size_t v120;
  size_t v121;
  _QWORD *p_dst;
  void *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  _QWORD *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  const char *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  int v182;
  uint64_t v184;
  uint64_t *v185;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v187;
  int v188;
  const char *v189;
  int v190;
  const char *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  void *__p[2];
  float v196;
  __int128 v197;
  std::__shared_weak_count *v198;
  char *v199;
  std::__shared_weak_count *v200;
  _QWORD *__dst;
  __int128 v202;
  _BYTE v203[24];
  __int128 v204;
  char *v205;
  size_t v206;
  unint64_t v207;
  char v208;
  uint64_t v209[5];

  v209[2] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return;
  *(_OWORD *)v194 = 0u;
  *(_OWORD *)__p = 0u;
  v196 = 1.0;
  v6 = a1[28];
  if (v6)
  {
    v8 = 0;
    v9 = 1;
    while (1)
    {
      v10 = *(__int16 *)(*(_QWORD *)&v6 + 30) + *(__int16 *)(*(_QWORD *)&v6 + 28);
      v11 = *(_DWORD *)(*(_QWORD *)&v6 + 36) + *(unsigned __int16 *)(*(_QWORD *)&v6 + 34);
      if (!((v10 + v11 < 0) ^ __OFADD__(v10, v11) | (v10 + v11 == 0)))
        ++v8;
      v12 = *(unsigned int *)(*(_QWORD *)&v6 + 76);
      if ((_DWORD)v12 != -1)
        break;
LABEL_4:
      v6 = **(int8x8_t **)&v6;
      if (!*(_QWORD *)&v6)
        goto LABEL_94;
    }
    v13 = (unint64_t)v194[1];
    if (v194[1])
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v194[1]);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v4 = *(unsigned int *)(*(_QWORD *)&v6 + 76);
        if (v194[1] <= (void *)v12)
          v4 = v12 % (unint64_t)v194[1];
      }
      else
      {
        v4 = (LODWORD(v194[1]) - 1) & v12;
      }
      v15 = (_DWORD **)*((_QWORD *)v194[0] + v4);
      if (v15)
      {
        v16 = *v15;
        if (*v15)
        {
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v18 = *((_QWORD *)v16 + 1);
              if (v18 == v12)
              {
                if (v16[4] == (_DWORD)v12)
                  goto LABEL_69;
              }
              else if ((v18 & ((unint64_t)v194[1] - 1)) != v4)
              {
                goto LABEL_28;
              }
              v16 = *(_DWORD **)v16;
              if (!v16)
                goto LABEL_28;
            }
          }
          do
          {
            v17 = *((_QWORD *)v16 + 1);
            if (v17 == v12)
            {
              if (v16[4] == (_DWORD)v12)
                goto LABEL_69;
            }
            else
            {
              if ((void *)v17 >= v194[1])
                v17 %= (unint64_t)v194[1];
              if (v17 != v4)
                break;
            }
            v16 = *(_DWORD **)v16;
          }
          while (v16);
        }
      }
    }
LABEL_28:
    v16 = operator new(0x18uLL);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = v12;
    v16[4] = v12;
    v16[5] = 0;
    v19 = (float)((unint64_t)__p[1] + 1);
    if (v13 && (float)(v196 * (float)v13) >= v19)
    {
      v20 = v194[0];
      v21 = (_QWORD *)*((_QWORD *)v194[0] + v4);
      if (v21)
      {
LABEL_31:
        *(_QWORD *)v16 = *v21;
        goto LABEL_67;
      }
    }
    else
    {
      v22 = v13 < 3 || (v13 & (v13 - 1)) != 0;
      v23 = v22 | (2 * v13);
      v24 = vcvtps_u32_f32(v19 / v196);
      if (v23 <= v24)
        prime = v24;
      else
        prime = v23;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v13 = (unint64_t)v194[1];
      }
      if (prime > v13)
        goto LABEL_43;
      if (prime < v13)
      {
        v26 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v196);
        if (v13 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (prime <= v26)
          prime = v26;
        if (prime < v13)
LABEL_43:
          sub_2231B0668((uint64_t)v194, prime);
      }
      v13 = (unint64_t)v194[1];
      if (((unint64_t)v194[1] & ((unint64_t)v194[1] - 1)) != 0)
      {
        if (v194[1] <= (void *)v12)
        {
          v4 = v12 % (unint64_t)v194[1];
          v20 = v194[0];
          v21 = (_QWORD *)*((_QWORD *)v194[0] + v12 % (unint64_t)v194[1]);
          if (v21)
            goto LABEL_31;
        }
        else
        {
          v4 = v12;
          v20 = v194[0];
          v21 = (_QWORD *)*((_QWORD *)v194[0] + v12);
          if (v21)
            goto LABEL_31;
        }
      }
      else
      {
        v4 = (LODWORD(v194[1]) - 1) & v12;
        v20 = v194[0];
        v21 = (_QWORD *)*((_QWORD *)v194[0] + v4);
        if (v21)
          goto LABEL_31;
      }
    }
    *(void **)v16 = __p[0];
    __p[0] = v16;
    v20[v4] = __p;
    if (!*(_QWORD *)v16)
    {
LABEL_68:
      ++__p[1];
LABEL_69:
      ++v16[5];
      v30 = a1[21];
      if (!*(_QWORD *)&v30)
        goto LABEL_323;
      v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = v12;
        if (*(_QWORD *)&v30 <= v12)
          v32 = v12 % *(_QWORD *)&v30;
      }
      else
      {
        v32 = (v30.i32[0] - 1) & v12;
      }
      v33 = *(uint64_t ***)(*(_QWORD *)&a1[20] + 8 * v32);
      if (!v33 || (v34 = *v33) == 0)
LABEL_323:
        sub_223198218("unordered_map::at: key not found");
      if (v31.u32[0] < 2uLL)
      {
        v35 = *(_QWORD *)&v30 - 1;
        while (1)
        {
          v37 = v34[1];
          if (v37 == v12)
          {
            if (*((_DWORD *)v34 + 4) == (_DWORD)v12)
              goto LABEL_89;
          }
          else if ((v37 & v35) != v32)
          {
            goto LABEL_323;
          }
          v34 = (uint64_t *)*v34;
          if (!v34)
            goto LABEL_323;
        }
      }
      while (1)
      {
        v36 = v34[1];
        if (v36 == v12)
        {
          if (*((_DWORD *)v34 + 4) == (_DWORD)v12)
          {
LABEL_89:
            if (a4
              && *((_BYTE *)v34 + 24)
              && *(__int16 *)(*(_QWORD *)&v6 + 30)
               + *(__int16 *)(*(_QWORD *)&v6 + 28)
               + *(_DWORD *)(*(_QWORD *)&v6 + 36)
               + *(unsigned __int16 *)(*(_QWORD *)&v6 + 34) >= 1)
            {
              v38 = *(_DWORD *)(*(_QWORD *)&v6 + 24) & 0xFFFFFFF8;
              *(_QWORD *)v203 = *(_QWORD *)(*(_QWORD *)&v6 + 16) & 0xFFFFFFF8FFFFFFF8;
              *(_DWORD *)&v203[8] = v38;
              v9 &= sub_2239942A0(v34 + 31, (int *)v203) != 0;
            }
            goto LABEL_4;
          }
        }
        else
        {
          if (v36 >= *(_QWORD *)&v30)
            v36 %= *(_QWORD *)&v30;
          if (v36 != v32)
            goto LABEL_323;
        }
        v34 = (uint64_t *)*v34;
        if (!v34)
          goto LABEL_323;
      }
    }
    v29 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v29 >= v13)
        v29 %= v13;
    }
    else
    {
      v29 &= v13 - 1;
    }
    v21 = (char *)v194[0] + 8 * v29;
LABEL_67:
    *v21 = v16;
    goto LABEL_68;
  }
  v8 = 0;
  v9 = 1;
LABEL_94:
  if (v8 != a1[31].i32[0])
  {
    sub_223AD515C(v209);
    if (**(int **)(v209[0] + 56) > 5
      || ((v39 = *(unsigned __int8 *)(v209[0] + 72),
           v40 = sub_22322F254(v209[0], "OSLogSurrogateAppender", 1, 0),
           v41 = v40,
           !v39)
        ? (v42 = v40 == 0)
        : (v42 = 0),
          v42))
    {
LABEL_186:
      v9 = 0;
      goto LABEL_187;
    }
    v185 = v209;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v187 = std::chrono::system_clock::now().__d_.__rep_;
    v188 = 5;
    v189 = "unknown file";
    v190 = 268;
    v192 = 0;
    v193 = 0;
    v191 = "unknown function";
    v43 = (const char *)(v209[0] + 16);
    v179 = v209[0];
    v180 = v209[0] + 16;
    if (*(char *)(v209[0] + 39) < 0)
    {
      v43 = *(const char **)(v209[0] + 16);
      v44 = *(_QWORD *)(v209[0] + 24);
    }
    else
    {
      v44 = *(unsigned __int8 *)(v209[0] + 39);
    }
    v45 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v203);
      sub_223199C58("com.apple.cv3d", (unint64_t)v203, byte_255788F40);
      if ((_BYTE)v204 && (v203[23] & 0x80000000) != 0)
        operator delete(*(void **)v203);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v46 = byte_255788F40;
    else
      v46 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v47 = byte_255788F40[23];
    else
      v47 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v203 = os_log_create(v46, v43);
    v48 = &v203[8];
    if (v47 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v47 >= 0x17)
    {
      v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v49 = v47 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      *(_QWORD *)&v203[16] = v47;
      *(_QWORD *)&v204 = v50 | 0x8000000000000000;
      *(_QWORD *)&v203[8] = v48;
    }
    else
    {
      BYTE7(v204) = v47;
      if (!v47)
      {
LABEL_118:
        v48[v47] = 0;
        BYTE8(v204) = 1;
        v51 = (char *)&v205;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v44 >= 0x17)
        {
          v52 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v52 = v44 | 7;
          v53 = v52 + 1;
          v51 = (char *)operator new(v52 + 1);
          v206 = v44;
          v207 = v53 | 0x8000000000000000;
          v205 = v51;
        }
        else
        {
          HIBYTE(v207) = v44;
          if (!v44)
            goto LABEL_126;
        }
        memmove(v51, v43, v44);
LABEL_126:
        v51[v44] = 0;
        v208 = 1;
        v54 = *(NSObject **)v203;
        if (SHIBYTE(v207) < 0)
          operator delete(v205);
        if (BYTE8(v204) && SBYTE7(v204) < 0)
          operator delete(*(void **)&v203[8]);
        if (*(_QWORD *)v203)
          os_release(*(void **)v203);
        if (v41 && *(_QWORD *)(v41 + 24))
        {
          v55 = _os_log_pack_size();
          v56 = (std::__shared_weak_count_vtbl *)operator new(v55, (std::align_val_t)8uLL);
          v57 = (std::__shared_weak_count *)operator new();
          v58 = v57;
          v57->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v57->__shared_weak_owners_ = 0;
          v57[1].__vftable = v56;
          *(_QWORD *)v203 = v56;
          *(_QWORD *)&v203[8] = v56;
          *(_QWORD *)&v203[16] = v57;
          do
            v60 = __ldxr(p_shared_owners);
          while (__stxr(v60 + 1, p_shared_owners));
          v204 = 0uLL;
          v205 = 0;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v58);
          }
          v62 = *(_QWORD *)v203;
          v63 = _os_log_pack_fill();
          v64 = a1[31].i32[0];
          *(_DWORD *)v63 = 67109376;
          *(_DWORD *)(v63 + 4) = v8;
          *(_WORD *)(v63 + 8) = 1024;
          *(_DWORD *)(v63 + 10) = v64;
          v65 = operator new();
          v66 = *(unsigned __int8 *)(v179 + 39);
          v67 = *(_QWORD *)(v179 + 16);
          v68 = *(_QWORD *)(v179 + 24);
          v69 = v204;
          *(_OWORD *)(v65 + 8) = *(_OWORD *)&v203[8];
          if ((v66 & 0x80u) != 0)
            v66 = v68;
          else
            v67 = v180;
          *(_QWORD *)v65 = v62;
          *(_QWORD *)&v203[8] = 0;
          *(_QWORD *)&v203[16] = 0;
          *(_OWORD *)(v65 + 24) = v69;
          v204 = 0uLL;
          *(_QWORD *)(v65 + 40) = v67;
          *(_QWORD *)(v65 + 48) = v66;
          *(_BYTE *)(v65 + 56) = 16;
          __dst = 0;
          *(_QWORD *)&v197 = v65;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), &v197);
          v70 = v197;
          *(_QWORD *)&v197 = 0;
          if (v70)
          {
            v71 = *(std::__shared_weak_count **)(v70 + 32);
            if (v71)
            {
              v72 = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = *(std::__shared_weak_count **)(v70 + 16);
            if (v74)
            {
              v75 = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
            v77 = __dst;
            __dst = 0;
            if (v77)
            {
              v78 = (std::__shared_weak_count *)v77[4];
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = (std::__shared_weak_count *)v77[2];
              if (v81)
              {
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
            }
          }
          v84 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
          if (*((_QWORD *)&v204 + 1))
          {
            v85 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = *(std::__shared_weak_count **)&v203[16];
          if (*(_QWORD *)&v203[16])
          {
            v88 = (unint64_t *)(*(_QWORD *)&v203[16] + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
        }
        else
        {
          os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
          v90 = a1[31].i32[0];
          *(_DWORD *)v203 = 67109376;
          *(_DWORD *)&v203[4] = v8;
          *(_WORD *)&v203[8] = 1024;
          *(_DWORD *)&v203[10] = v90;
          v91 = (void *)_os_log_send_and_compose_impl();
          if (v91)
            free(v91);
        }
        if (v39)
        {
          sub_22322C138((uint64_t)&v185, "Count observed voxels (test): %u, member counter: %u", v8, a1[31].i32[0]);
          sub_223182C08((uint64_t)&v185);
        }
        sub_223182C08((uint64_t)&v185);
        v92 = v193;
        if (v193)
        {
          v93 = (unint64_t *)&v193->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        goto LABEL_186;
      }
    }
    memmove(v48, v46, v47);
    goto LABEL_118;
  }
LABEL_187:
  for (i = a1[22]; i; i = **(int8x8_t **)&i)
  {
    LODWORD(v185) = *(_DWORD *)(*(_QWORD *)&i + 16);
    v96 = *(_DWORD *)(*(_QWORD *)&i + 44);
    *(_QWORD *)v203 = &v185;
    v9 &= v96 == *((_DWORD *)sub_223AD44E8((uint64_t)v194, (unsigned int *)&v185, (uint64_t)&unk_2245BA939, (_DWORD **)v203)+ 5);
    for (j = *(uint64_t **)(*(_QWORD *)&i + 344); j; j = (uint64_t *)*j)
      v9 &= *((_DWORD *)j + 4) != (_DWORD)v185;
  }
  if ((v9 & 1) != 0)
    goto LABEL_318;
  sub_223AD515C(&v184);
  if (**(int **)(v184 + 56) <= 4)
  {
    v98 = *(unsigned __int8 *)(v184 + 72);
    v99 = sub_22322F254(v184, "OSLogSurrogateAppender", 1, 0);
    v100 = v99;
    if (v98 || v99 != 0)
    {
      v182 = v98;
      v185 = &v184;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v187 = std::chrono::system_clock::now().__d_.__rep_;
      v188 = 4;
      v189 = "unknown file";
      v190 = 287;
      v192 = 0;
      v193 = 0;
      v191 = "unknown function";
      if (*(char *)(a2 + 23) >= 0)
        v102 = (const char *)a2;
      else
        v102 = *(const char **)a2;
      v103 = *v185;
      v104 = (const char *)(*v185 + 16);
      v181 = v104;
      if (*(char *)(*v185 + 39) < 0)
      {
        v104 = *(const char **)(v103 + 16);
        v105 = *(_QWORD *)(v103 + 24);
      }
      else
      {
        v105 = *(unsigned __int8 *)(*v185 + 39);
      }
      v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v203);
        sub_223199C58("com.apple.cv3d", (unint64_t)v203, byte_255788F40);
        if ((_BYTE)v204 && (v203[23] & 0x80000000) != 0)
          operator delete(*(void **)v203);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v107 = byte_255788F40;
      else
        v107 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v108 = byte_255788F40[23];
      else
        v108 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v203 = os_log_create(v107, v104);
      v109 = &v203[8];
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v108 >= 0x17)
      {
        v110 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v110 = v108 | 7;
        v111 = v110 + 1;
        v109 = operator new(v110 + 1);
        *(_QWORD *)&v203[16] = v108;
        *(_QWORD *)&v204 = v111 | 0x8000000000000000;
        *(_QWORD *)&v203[8] = v109;
      }
      else
      {
        BYTE7(v204) = v108;
        if (!v108)
        {
LABEL_220:
          v109[v108] = 0;
          BYTE8(v204) = 1;
          v112 = (char *)&v205;
          if (v105 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v105 >= 0x17)
          {
            v113 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v105 | 7) != 0x17)
              v113 = v105 | 7;
            v114 = v113 + 1;
            v112 = (char *)operator new(v113 + 1);
            v206 = v105;
            v207 = v114 | 0x8000000000000000;
            v205 = v112;
          }
          else
          {
            HIBYTE(v207) = v105;
            if (!v105)
            {
LABEL_228:
              v112[v105] = 0;
              v208 = 1;
              v115 = *(NSObject **)v203;
              if (SHIBYTE(v207) < 0)
                operator delete(v205);
              v116 = a2;
              if (BYTE8(v204) && SBYTE7(v204) < 0)
                operator delete(*(void **)&v203[8]);
              if (*(_QWORD *)v203)
                os_release(*(void **)v203);
              if (!v100 || !*(_QWORD *)(v100 + 24))
              {
                os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v203 = 136315138;
                *(_QWORD *)&v203[4] = v102;
                v123 = (void *)_os_log_send_and_compose_impl();
                v124 = v182;
                if (v123)
                  free(v123);
                goto LABEL_307;
              }
              v117 = _os_log_pack_size();
              v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
              v119 = (std::__shared_weak_count *)operator new();
              v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v119->__shared_owners_ = 0;
              v119->__shared_weak_owners_ = 0;
              v119[1].__vftable = v118;
              *(_QWORD *)&v197 = v118;
              *((_QWORD *)&v197 + 1) = v118;
              v199 = 0;
              v200 = 0;
              v198 = v119;
              v120 = strlen(v102);
              if (v120 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v121 = v120;
              if (v120 >= 0x17)
              {
                v125 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v120 | 7) != 0x17)
                  v125 = v120 | 7;
                v126 = v125 + 1;
                p_dst = operator new(v125 + 1);
                *(_QWORD *)&v202 = v121;
                *((_QWORD *)&v202 + 1) = v126 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v202) = v120;
                p_dst = &__dst;
                if (!v120)
                {
LABEL_247:
                  *((_BYTE *)p_dst + v121) = 0;
                  v127 = __dst;
                  v209[0] = v202;
                  *(uint64_t *)((char *)v209 + 7) = *(_QWORD *)((char *)&v202 + 7);
                  v128 = HIBYTE(v202);
                  v129 = operator new(0x38uLL);
                  v129[1] = 0;
                  v129[2] = 0;
                  v129[3] = off_24EC1FA48;
                  *v129 = &off_24EC1F9F8;
                  v130 = v209[0];
                  v129[4] = v127;
                  v129[5] = v130;
                  *(_QWORD *)((char *)v129 + 47) = *(uint64_t *)((char *)v209 + 7);
                  *((_BYTE *)v129 + 55) = v128;
                  memset(v209, 0, 15);
                  v131 = v200;
                  v199 = (char *)(v129 + 3);
                  v200 = (std::__shared_weak_count *)v129;
                  v116 = a2;
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  *(_OWORD *)v203 = v197;
                  v134 = v199;
                  *(_QWORD *)&v203[16] = v198;
                  if (v198)
                  {
                    v135 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                  }
                  v137 = v200;
                  *(_QWORD *)&v204 = v134;
                  *((_QWORD *)&v204 + 1) = v200;
                  if (v200)
                  {
                    v138 = (unint64_t *)&v200->__shared_owners_;
                    do
                      v139 = __ldxr(v138);
                    while (__stxr(v139 + 1, v138));
                    v205 = v134;
                    do
                      v140 = __ldaxr(v138);
                    while (__stlxr(v140 - 1, v138));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                      std::__shared_weak_count::__release_weak(v137);
                    }
                  }
                  else
                  {
                    v205 = v134;
                  }
                  v141 = v198;
                  if (v198)
                  {
                    v142 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  v144 = *(_QWORD *)v203;
                  if (v205[31] >= 0)
                    v145 = v205 + 8;
                  else
                    v145 = (char *)*((_QWORD *)v205 + 1);
                  v146 = _os_log_pack_fill();
                  *(_DWORD *)v146 = 136315138;
                  *(_QWORD *)(v146 + 4) = v145;
                  v147 = operator new();
                  v148 = *(unsigned __int8 *)(v103 + 39);
                  v149 = *(const char **)(v103 + 16);
                  v150 = *(_QWORD *)(v103 + 24);
                  v151 = v204;
                  *(_OWORD *)(v147 + 8) = *(_OWORD *)&v203[8];
                  if ((v148 & 0x80u) != 0)
                    v148 = v150;
                  else
                    v149 = v181;
                  *(_QWORD *)v147 = v144;
                  *(_QWORD *)&v203[8] = 0;
                  *(_QWORD *)&v203[16] = 0;
                  *(_OWORD *)(v147 + 24) = v151;
                  v204 = 0uLL;
                  *(_QWORD *)(v147 + 40) = v149;
                  *(_QWORD *)(v147 + 48) = v148;
                  *(_BYTE *)(v147 + 56) = 16;
                  __dst = 0;
                  *(_QWORD *)&v197 = v147;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v197);
                  v152 = v197;
                  *(_QWORD *)&v197 = 0;
                  if (v152)
                  {
                    v153 = *(std::__shared_weak_count **)(v152 + 32);
                    if (v153)
                    {
                      v154 = (unint64_t *)&v153->__shared_owners_;
                      do
                        v155 = __ldaxr(v154);
                      while (__stlxr(v155 - 1, v154));
                      if (!v155)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    v156 = *(std::__shared_weak_count **)(v152 + 16);
                    if (v156)
                    {
                      v157 = (unint64_t *)&v156->__shared_owners_;
                      do
                        v158 = __ldaxr(v157);
                      while (__stlxr(v158 - 1, v157));
                      if (!v158)
                      {
                        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                        std::__shared_weak_count::__release_weak(v156);
                      }
                    }
                    MEMORY[0x227684CE8](v152, 0x10F0C40B62ED6C6);
                    v159 = __dst;
                    __dst = 0;
                    if (v159)
                    {
                      v160 = (std::__shared_weak_count *)v159[4];
                      if (v160)
                      {
                        v161 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v162 = __ldaxr(v161);
                        while (__stlxr(v162 - 1, v161));
                        if (!v162)
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                      }
                      v163 = (std::__shared_weak_count *)v159[2];
                      if (v163)
                      {
                        v164 = (unint64_t *)&v163->__shared_owners_;
                        do
                          v165 = __ldaxr(v164);
                        while (__stlxr(v165 - 1, v164));
                        if (!v165)
                        {
                          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                          std::__shared_weak_count::__release_weak(v163);
                        }
                      }
                      MEMORY[0x227684CE8](v159, 0x10F0C40B62ED6C6);
                    }
                  }
                  v166 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
                  v124 = v182;
                  if (*((_QWORD *)&v204 + 1))
                  {
                    v167 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
                    do
                      v168 = __ldaxr(v167);
                    while (__stlxr(v168 - 1, v167));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                      std::__shared_weak_count::__release_weak(v166);
                    }
                  }
                  v169 = *(std::__shared_weak_count **)&v203[16];
                  if (*(_QWORD *)&v203[16])
                  {
                    v170 = (unint64_t *)(*(_QWORD *)&v203[16] + 8);
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (!v171)
                    {
                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                      std::__shared_weak_count::__release_weak(v169);
                    }
                  }
LABEL_307:
                  if (v124)
                  {
                    if (*(char *)(v116 + 23) >= 0)
                      v172 = (const char *)v116;
                    else
                      v172 = *(const char **)v116;
                    sub_22322C138((uint64_t)&v185, "Consistency check failed at %s", v172);
                    sub_223182C08((uint64_t)&v185);
                  }
                  sub_223182C08((uint64_t)&v185);
                  v173 = v193;
                  if (v193)
                  {
                    v174 = (unint64_t *)&v193->__shared_owners_;
                    do
                      v175 = __ldaxr(v174);
                    while (__stlxr(v175 - 1, v174));
                    if (!v175)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                  goto LABEL_317;
                }
              }
              memcpy(p_dst, v102, v121);
              goto LABEL_247;
            }
          }
          memmove(v112, v104, v105);
          goto LABEL_228;
        }
      }
      memmove(v109, v107, v108);
      goto LABEL_220;
    }
  }
LABEL_317:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 289, (uint64_t)"consistent", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_318:
  v176 = __p[0];
  if (__p[0])
  {
    do
    {
      v177 = (_QWORD *)*v176;
      operator delete(v176);
      v176 = v177;
    }
    while (v177);
  }
  v178 = v194[0];
  v194[0] = 0;
  if (v178)
    operator delete(v178);
}

void sub_223AD704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v8 - 168))
  {
    if (*(char *)(v8 - 169) < 0)
      operator delete(*(void **)(v8 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  sub_22322E828((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223AD7220(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 a4)
{
  uint64_t *v7;
  float v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  float v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  int v39;
  int v40;
  float v41;
  uint64_t v42;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  char __p[18];
  char v94;
  uint64_t v95[3];
  _QWORD v96[2];
  char v97;

  v96[1] = 0;
  v96[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v97 = 1;
  kdebug_trace();
  v7 = *(uint64_t **)(a1 + 224);
  if (v7)
  {
    v8 = 1.0 / (float)(*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 4));
    v9 = a4;
    v10 = *(uint64_t **)(a1 + 224);
    while (1)
    {
      if (v9)
      {
        v14 = v10[2];
        if (*a3 > (int)v14 || a3[2] < (int)v14)
          goto LABEL_5;
        v16 = HIDWORD(v14);
        if (a3[1] > (int)v16 || a3[3] < (int)v16)
          goto LABEL_5;
        v18 = *(_QWORD *)(a1 + 216);
        if (v18)
        {
LABEL_18:
          v19 = *((_DWORD *)v10 + 6);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 208);
          v22 = *((int *)v10 + 4) - 3;
          v23 = (83492791 * v19) ^ (19349669 * (int)v16);
          if ((v18 & (v18 - 1)) != 0)
          {
            v30 = 0;
            v13 = 0.0;
            do
            {
              v34 = v23 ^ (73856093 * (v22 + v30));
              v35 = v34;
              if (v34 >= v18)
                v35 = v34 % v18;
              v31 = *(uint64_t **)(v21 + 8 * v35);
              if (v31)
              {
                do
                {
                  while (1)
                  {
                    v31 = (uint64_t *)*v31;
                    if (!v31)
                      goto LABEL_36;
                    v36 = v31[1];
                    if (v34 != v36)
                      break;
                    if (*((_DWORD *)v31 + 4) == (_DWORD)v22 + (_DWORD)v30
                      && *((_DWORD *)v31 + 5) == (_DWORD)v16
                      && *((_DWORD *)v31 + 6) == v19)
                    {
                      goto LABEL_36;
                    }
                  }
                  if (v36 >= v18)
                    v36 %= v18;
                }
                while (v36 == v35);
                v31 = 0;
              }
LABEL_36:
              v32 = (uint64_t)v31 + 28;
              if (!v31)
                v32 = a1 + 252;
              v33 = *(__int16 *)(v32 + 4) - 2 * *(__int16 *)(v32 + 2);
              v13 = v13 + (float)((float)(v8 * flt_2246609F0[v30++]) * (float)(v33 & ~(v33 >> 31)));
            }
            while (v30 != 7);
          }
          else
          {
            v24 = 0;
            v13 = 0.0;
            do
            {
              v28 = v23 ^ (73856093 * (v22 + v24));
              v25 = *(uint64_t **)(v21 + 8 * (v28 & v20));
              if (v25)
              {
                do
                {
                  while (1)
                  {
                    v25 = (uint64_t *)*v25;
                    if (!v25)
                      goto LABEL_21;
                    v29 = v25[1];
                    if (v28 != v29)
                      break;
                    if (*((_DWORD *)v25 + 4) == (_DWORD)v22 + (_DWORD)v24
                      && *((_DWORD *)v25 + 5) == (_DWORD)v16
                      && *((_DWORD *)v25 + 6) == v19)
                    {
                      goto LABEL_21;
                    }
                  }
                }
                while ((v29 & v20) == (v28 & v20));
                v25 = 0;
              }
LABEL_21:
              if (v25)
                v26 = (uint64_t)v25 + 28;
              else
                v26 = a1 + 252;
              v27 = *(__int16 *)(v26 + 4) - 2 * *(__int16 *)(v26 + 2);
              v13 = v13 + (float)((float)(v8 * flt_2246609F0[v24++]) * (float)(v27 & ~(v27 >> 31)));
            }
            while (v24 != 7);
          }
          goto LABEL_4;
        }
      }
      else
      {
        LODWORD(v16) = *((_DWORD *)v10 + 5);
        v18 = *(_QWORD *)(a1 + 216);
        if (v18)
          goto LABEL_18;
      }
      v11 = *(__int16 *)(a1 + 256) - 2 * *(__int16 *)(a1 + 254);
      v12 = v11 & ~(v11 >> 31);
      v13 = (float)((float)(v8 * 0.011109) * (float)v12)
          + (float)((float)((float)(v8 * 0.13534) * (float)v12)
                  + (float)((float)((float)(v8 * 0.60653) * (float)v12)
                          + (float)((float)(v8 * (float)v12)
                                  + (float)((float)((float)(v8 * 0.60653) * (float)v12)
                                          + (float)((float)((float)(v8 * 0.13534) * (float)v12)
                                                  + (float)((float)((float)(v8 * 0.011109) * (float)v12) + 0.0))))));
LABEL_4:
      *((float *)v10 + 15) = v13;
LABEL_5:
      v10 = (uint64_t *)*v10;
      if (!v10)
      {
        while (v9)
        {
          v42 = v7[2];
          if (*a3 <= (int)v42 && a3[2] >= (int)v42 && a3[1] <= SHIDWORD(v42) && a3[3] >= SHIDWORD(v42))
          {
            v45 = *(_QWORD *)(a1 + 216);
            if (!v45)
            {
LABEL_53:
              v37 = *(float *)(a1 + 284);
              v38 = (float)(v37 * 0.011109)
                  + (float)((float)(v37 * 0.13534)
                          + (float)((float)(v37 * 0.60653)
                                  + (float)(v37
                                          + (float)((float)(v37 * 0.60653)
                                                  + (float)((float)(v37 * 0.13534)
                                                          + (float)((float)(v37 * 0.011109) + 0.0))))));
LABEL_54:
              if (v38 < 14.885)
                v38 = 0.0;
              v39 = *((__int16 *)v7 + 16) - 2 * *((__int16 *)v7 + 15);
              v40 = v39 & ~(v39 >> 31);
              v41 = (float)v40;
              if (v40 < 0xF)
                v41 = 0.0;
              *((float *)v7 + 16) = v38;
              *((float *)v7 + 17) = v41;
              goto LABEL_59;
            }
LABEL_72:
            v46 = v45 - 1;
            v48 = *((int *)v7 + 5);
            v47 = *((_DWORD *)v7 + 6);
            v49 = *(_QWORD *)(a1 + 208);
            v50 = v48 - 3;
            v51 = (83492791 * (int)v47) ^ (73856093 * (int)v42);
            if ((v45 & (v45 - 1)) != 0)
            {
              v55 = 0;
              v38 = 0.0;
              do
              {
                v58 = v51 ^ (19349669 * (v50 + v55));
                v59 = v58;
                if (v58 >= v45)
                  v59 = v58 % v45;
                v56 = *(uint64_t **)(v49 + 8 * v59);
                if (v56)
                {
                  while (1)
                  {
                    v56 = (uint64_t *)*v56;
                    if (!v56)
                      break;
                    v60 = v56[1];
                    if (v58 == v60)
                    {
                      if (*((_DWORD *)v56 + 4) == (_DWORD)v42
                        && *((_DWORD *)v56 + 5) == (_DWORD)v50 + (_DWORD)v55
                        && *((_DWORD *)v56 + 6) == v47)
                      {
                        break;
                      }
                    }
                    else
                    {
                      if (v60 >= v45)
                        v60 %= v45;
                      if (v60 != v59)
                      {
                        v56 = 0;
                        break;
                      }
                    }
                  }
                }
                v57 = (uint64_t)v56 + 28;
                if (!v56)
                  v57 = a1 + 252;
                v38 = v38 + (float)(flt_2246609F0[v55++] * *(float *)(v57 + 32));
              }
              while (v55 != 7);
            }
            else
            {
              v52 = v51 ^ (19349669 * v50);
              v53 = *(uint64_t **)(v49 + 8 * (v52 & v46));
              if (v53)
              {
                while (1)
                {
                  v53 = (uint64_t *)*v53;
                  if (!v53)
                    break;
                  v54 = v53[1];
                  if (v52 == v54)
                  {
                    if (*((_DWORD *)v53 + 4) == (_DWORD)v42 && *(uint64_t *)((char *)v53 + 20) == __PAIR64__(v47, v50))
                      break;
                  }
                  else if ((v54 & v46) != (v52 & v46))
                  {
                    v53 = 0;
                    break;
                  }
                }
              }
              v61 = (uint64_t)v53 + 28;
              if (!v53)
                v61 = a1 + 252;
              v62 = v51 ^ (19349669 * (v48 - 2));
              v63 = *(uint64_t **)(v49 + 8 * (v62 & v46));
              if (v63)
              {
                while (1)
                {
                  v63 = (uint64_t *)*v63;
                  if (!v63)
                    break;
                  v64 = v63[1];
                  if (v62 == v64)
                  {
                    if (*((_DWORD *)v63 + 4) == (_DWORD)v42
                      && *((_DWORD *)v63 + 5) == (_DWORD)v48 - 2
                      && *((_DWORD *)v63 + 6) == v47)
                    {
                      break;
                    }
                  }
                  else if ((v64 & v46) != (v62 & v46))
                  {
                    v63 = 0;
                    break;
                  }
                }
              }
              v65 = *(float *)(v61 + 32);
              v66 = (uint64_t)v63 + 28;
              if (!v63)
                v66 = a1 + 252;
              v67 = *(float *)(v66 + 32);
              v68 = v51 ^ (19349669 * (v48 - 1));
              v69 = *(uint64_t **)(v49 + 8 * (v68 & v46));
              if (v69)
              {
                while (1)
                {
                  v69 = (uint64_t *)*v69;
                  if (!v69)
                    break;
                  v70 = v69[1];
                  if (v68 == v70)
                  {
                    if (*((_DWORD *)v69 + 4) == (_DWORD)v42
                      && *((_DWORD *)v69 + 5) == (_DWORD)v48 - 1
                      && *((_DWORD *)v69 + 6) == v47)
                    {
                      break;
                    }
                  }
                  else if ((v70 & v46) != (v68 & v46))
                  {
                    v69 = 0;
                    break;
                  }
                }
              }
              if (v69)
                v71 = (uint64_t)v69 + 28;
              else
                v71 = a1 + 252;
              v72 = *(float *)(v71 + 32);
              v73 = v51 ^ (19349669 * (int)v48);
              v74 = *(uint64_t **)(v49 + 8 * (v73 & v46));
              if (v74)
              {
                while (1)
                {
                  v74 = (uint64_t *)*v74;
                  if (!v74)
                    break;
                  v75 = v74[1];
                  if (v73 == v75)
                  {
                    if (*((_DWORD *)v74 + 4) == (_DWORD)v42 && *(uint64_t *)((char *)v74 + 20) == __PAIR64__(v47, v48))
                      break;
                  }
                  else if ((v75 & v46) != (v73 & v46))
                  {
                    v74 = 0;
                    break;
                  }
                }
              }
              if (v74)
                v76 = (uint64_t)v74 + 28;
              else
                v76 = a1 + 252;
              v77 = *(float *)(v76 + 32);
              v78 = v51 ^ (19349669 * (v48 + 1));
              v79 = *(uint64_t **)(v49 + 8 * (v78 & v46));
              if (v79)
              {
                while (1)
                {
                  v79 = (uint64_t *)*v79;
                  if (!v79)
                    break;
                  v80 = v79[1];
                  if (v78 == v80)
                  {
                    if (*((_DWORD *)v79 + 4) == (_DWORD)v42
                      && *((_DWORD *)v79 + 5) == (_DWORD)v48 + 1
                      && *((_DWORD *)v79 + 6) == v47)
                    {
                      break;
                    }
                  }
                  else if ((v80 & v46) != (v78 & v46))
                  {
                    v79 = 0;
                    break;
                  }
                }
              }
              if (v79)
                v81 = (uint64_t)v79 + 28;
              else
                v81 = a1 + 252;
              v82 = *(float *)(v81 + 32);
              v83 = v51 ^ (19349669 * (v48 + 2));
              v84 = *(uint64_t **)(v49 + 8 * (v83 & v46));
              if (v84)
              {
                while (1)
                {
                  v84 = (uint64_t *)*v84;
                  if (!v84)
                    break;
                  v85 = v84[1];
                  if (v83 == v85)
                  {
                    if (*((_DWORD *)v84 + 4) == (_DWORD)v42
                      && *((_DWORD *)v84 + 5) == (_DWORD)v48 + 2
                      && *((_DWORD *)v84 + 6) == v47)
                    {
                      break;
                    }
                  }
                  else if ((v85 & v46) != (v83 & v46))
                  {
                    v84 = 0;
                    break;
                  }
                }
              }
              if (v84)
                v86 = (uint64_t)v84 + 28;
              else
                v86 = a1 + 252;
              v87 = v48 + 3;
              v88 = v51 ^ (19349669 * v87);
              v89 = *(uint64_t **)(v49 + 8 * (v88 & v46));
              if (v89)
              {
                while (1)
                {
                  v89 = (uint64_t *)*v89;
                  if (!v89)
                    break;
                  v90 = v89[1];
                  if (v88 == v90)
                  {
                    if (*((_DWORD *)v89 + 4) == (_DWORD)v42
                      && *((_DWORD *)v89 + 5) == (_DWORD)v87
                      && *((_DWORD *)v89 + 6) == v47)
                    {
                      break;
                    }
                  }
                  else if ((v90 & v46) != (v88 & v46))
                  {
                    v89 = 0;
                    break;
                  }
                }
              }
              v91 = (float)((float)((float)((float)((float)((float)(v65 * 0.011109) + 0.0) + (float)(v67 * 0.13534))
                                          + (float)(v72 * 0.60653))
                                  + v77)
                          + (float)(v82 * 0.60653))
                  + (float)(*(float *)(v86 + 32) * 0.13534);
              v92 = (uint64_t)v89 + 28;
              if (!v89)
                v92 = a1 + 252;
              v38 = v91 + (float)(*(float *)(v92 + 32) * 0.011109);
            }
            goto LABEL_54;
          }
LABEL_59:
          v7 = (uint64_t *)*v7;
          if (!v7)
            goto LABEL_178;
        }
        LODWORD(v42) = *((_DWORD *)v7 + 4);
        v45 = *(_QWORD *)(a1 + 216);
        if (!v45)
          goto LABEL_53;
        goto LABEL_72;
      }
    }
  }
LABEL_178:
  kdebug_trace();
  HIBYTE(v95[2]) = 21;
  strcpy((char *)v95, "ComputeClutterDensity");
  v94 = 17;
  strcpy(__p, "KeyframeOccupancy");
  sub_22391CC34(v95, (uint64_t *)__p, (uint64_t)v96);
  if ((v94 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v95[2]) & 0x80000000) == 0)
      return;
LABEL_182:
    operator delete((void *)v95[0]);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v95[2]) < 0)
    goto LABEL_182;
}

void sub_223AD7B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_223AD7B78(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  char v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  float *v35;
  float v36;
  char v37;
  char *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  int v49;
  int v50;
  float v51;
  char v52;
  char v53;
  char __p[18];
  char v55;
  uint64_t v56[3];
  _QWORD v57[2];
  char v58;

  v57[1] = 0;
  v57[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v58 = 1;
  kdebug_trace();
  v7 = *(uint64_t **)(a1 + 224);
  if (v7)
  {
    v8 = a4;
    do
    {
      if (!v8
        || ((v9 = v7[2], *a3 <= (int)v9) ? (v10 = a3[2] < (int)v9) : (v10 = 1),
            !v10 && ((v11 = HIDWORD(v9), a3[1] <= (int)v11) ? (v12 = a3[3] < (int)v11) : (v12 = 1), !v12)))
      {
        v13 = *((__int16 *)v7 + 15) + *((__int16 *)v7 + 14);
        v14 = *((_DWORD *)v7 + 9) + *((unsigned __int16 *)v7 + 17);
        if ((v13 + v14 < 0) ^ __OFADD__(v13, v14) | (v13 + v14 == 0))
          goto LABEL_3;
        v15 = *(int8x8_t *)(a1 + 216);
        if (v15)
        {
          v16 = *((int *)v7 + 4);
          v17 = *((int *)v7 + 5);
          v18 = *((int *)v7 + 6);
          v19 = (uint8x8_t)vcnt_s8(v15);
          v19.i16[0] = vaddlv_u8(v19);
          v20 = v19.u32[0];
          v21 = *(_QWORD *)&v15 - 1;
          v22 = *(_QWORD *)(a1 + 208);
          v23 = *((float *)v7 + 16);
          v24 = 13;
          v25 = &byte_224660A0C;
          do
          {
            v26 = (int *)((char *)&unk_224660A10 + 12 * *v25);
            v27 = *v26 + v16;
            v28 = v26[1] + v17;
            v29 = v26[2] + v18;
            v30 = (19349669 * v28) ^ (73856093 * v27) ^ (83492791 * v29);
            if (v20 >= 2)
            {
              v31 = (19349669 * v28) ^ (73856093 * v27) ^ (83492791 * v29);
              if (v30 >= *(_QWORD *)&v15)
                v31 = v30 % *(_QWORD *)&v15;
            }
            else
            {
              v31 = v30 & v21;
            }
            v32 = *(uint64_t **)(v22 + 8 * v31);
            if (v32)
            {
              v32 = (uint64_t *)*v32;
              if (v32)
              {
                if (v20 >= 2)
                {
                  while (1)
                  {
                    v34 = v32[1];
                    if (v30 == v34)
                    {
                      if (*((_DWORD *)v32 + 4) == (_DWORD)v27
                        && *((_DWORD *)v32 + 5) == (_DWORD)v28
                        && *((_DWORD *)v32 + 6) == (_DWORD)v29)
                      {
                        goto LABEL_43;
                      }
                    }
                    else
                    {
                      if (v34 >= *(_QWORD *)&v15)
                        v34 %= *(_QWORD *)&v15;
                      if (v34 != v31)
                        goto LABEL_42;
                    }
                    v32 = (uint64_t *)*v32;
                    if (!v32)
                      goto LABEL_43;
                  }
                }
                do
                {
                  v33 = v32[1];
                  if (v30 == v33)
                  {
                    if (*((_DWORD *)v32 + 4) == (_DWORD)v27
                      && *((_DWORD *)v32 + 5) == (_DWORD)v28
                      && *((_DWORD *)v32 + 6) == (_DWORD)v29)
                    {
                      break;
                    }
                  }
                  else if ((v33 & v21) != v31)
                  {
LABEL_42:
                    v32 = 0;
                    break;
                  }
                  v32 = (uint64_t *)*v32;
                }
                while (v32);
              }
            }
LABEL_43:
            if (v32)
              v35 = (float *)v32 + 7;
            else
              v35 = (float *)(a1 + 252);
            if (*((__int16 *)v35 + 1) + *(__int16 *)v35 + *((_DWORD *)v35 + 2) + *((unsigned __int16 *)v35 + 3) >= 1
              && v35[9] < v23)
            {
              v23 = v35[9];
              v24 = *v25;
            }
            ++v25;
          }
          while (v25 != (char *)&unk_224660A10);
          *((_BYTE *)v7 + 72) = v24;
          v36 = *((float *)v7 + 17);
          v37 = 13;
          v38 = &byte_224660A0C;
          do
          {
            v39 = (int *)((char *)&unk_224660A10 + 12 * *v38);
            v40 = *v39 + v16;
            v41 = v39[1] + v17;
            v42 = v39[2] + v18;
            v43 = (19349669 * v41) ^ (73856093 * v40) ^ (83492791 * v42);
            if (v20 >= 2)
            {
              v44 = (19349669 * v41) ^ (73856093 * v40) ^ (83492791 * v42);
              if (v43 >= *(_QWORD *)&v15)
                v44 = v43 % *(_QWORD *)&v15;
            }
            else
            {
              v44 = v43 & v21;
            }
            v45 = *(uint64_t **)(v22 + 8 * v44);
            if (v45)
            {
              v45 = (uint64_t *)*v45;
              if (v45)
              {
                if (v20 >= 2)
                {
                  while (1)
                  {
                    v47 = v45[1];
                    if (v43 == v47)
                    {
                      if (*((_DWORD *)v45 + 4) == (_DWORD)v40
                        && *((_DWORD *)v45 + 5) == (_DWORD)v41
                        && *((_DWORD *)v45 + 6) == (_DWORD)v42)
                      {
                        goto LABEL_76;
                      }
                    }
                    else
                    {
                      if (v47 >= *(_QWORD *)&v15)
                        v47 %= *(_QWORD *)&v15;
                      if (v47 != v44)
                        goto LABEL_75;
                    }
                    v45 = (uint64_t *)*v45;
                    if (!v45)
                      goto LABEL_76;
                  }
                }
                do
                {
                  v46 = v45[1];
                  if (v43 == v46)
                  {
                    if (*((_DWORD *)v45 + 4) == (_DWORD)v40
                      && *((_DWORD *)v45 + 5) == (_DWORD)v41
                      && *((_DWORD *)v45 + 6) == (_DWORD)v42)
                    {
                      break;
                    }
                  }
                  else if ((v46 & v21) != v44)
                  {
LABEL_75:
                    v45 = 0;
                    break;
                  }
                  v45 = (uint64_t *)*v45;
                }
                while (v45);
              }
            }
LABEL_76:
            if (v45)
              v48 = (float *)v45 + 7;
            else
              v48 = (float *)(a1 + 252);
            if (*((__int16 *)v48 + 1) + *(__int16 *)v48 + *((_DWORD *)v48 + 2) + *((unsigned __int16 *)v48 + 3) >= 1
              && v48[10] < v36)
            {
              v36 = v48[10];
              v37 = *v38;
            }
            ++v38;
          }
          while (v38 != (char *)&unk_224660A10);
          *((_BYTE *)v7 + 73) = v37;
          goto LABEL_4;
        }
        v49 = *(__int16 *)(a1 + 254) + *(__int16 *)(a1 + 252);
        v50 = *(_DWORD *)(a1 + 260) + *(unsigned __int16 *)(a1 + 258);
        if ((v49 + v50 < 0) ^ __OFADD__(v49, v50) | (v49 + v50 == 0))
        {
LABEL_3:
          *((_WORD *)v7 + 36) = 3341;
        }
        else
        {
          v51 = *((float *)v7 + 17);
          if (*(float *)(a1 + 288) >= *((float *)v7 + 16))
            v52 = 13;
          else
            v52 = 4;
          *((_BYTE *)v7 + 72) = v52;
          if (*(float *)(a1 + 292) >= v51)
            v53 = 13;
          else
            v53 = 4;
          *((_BYTE *)v7 + 73) = v53;
        }
      }
LABEL_4:
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  kdebug_trace();
  strcpy((char *)v56, "ComputeClutterGradient");
  HIBYTE(v56[2]) = 22;
  v55 = 17;
  strcpy(__p, "KeyframeOccupancy");
  sub_22391CC34(v56, (uint64_t *)__p, (uint64_t)v57);
  if ((v55 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v56[2]) & 0x80000000) == 0)
      return;
LABEL_95:
    operator delete((void *)v56[0]);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v56[2]) < 0)
    goto LABEL_95;
}

void sub_223AD80AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_223AD80F0(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  int32x2_t v5;
  unsigned __int32 v6;
  unsigned __int32 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int16 *v28;
  int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v48;
  uint64_t *v49;
  int v50;
  __int32 v51;
  uint64_t v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  __int16 *v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v80;
  uint64_t *v81;
  uint64_t *v82;
  int v83;
  int *v84;
  unint64_t v85;
  unint64_t v87;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int8x8_t v96;
  uint8x8_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  int32x2_t v101;
  uint64_t v102;
  uint64_t v103;
  int8x8_t v104;
  uint8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  int32x2_t **v111;
  int32x2_t *v112;
  int32x2_t v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  BOOL v118;
  int32x2_t v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int8x8_t v125;
  uint8x8_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t **v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  size_t v163;
  const char *v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v171;
  size_t v172;
  const char *v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  uint64_t *v177;
  unint64_t v178;
  const char *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE *v184;
  int v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  int v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unsigned __int8 v228;
  const char *v229;
  size_t v230;
  uint64_t *v231;
  unint64_t v232;
  const char *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  NSObject *v240;
  size_t v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count *v244;
  unint64_t *p_shared_owners;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  void *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  unsigned __int32 v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  int v285;
  unsigned __int32 v286;
  char v287;
  uint64_t v288;
  int v289;
  uint64_t *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v291;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v292;
  int v293;
  const char *v294;
  int v295;
  const char *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  uint64_t v299;
  char __p[18];
  char v301;
  _QWORD v302[5];
  int v303;
  _QWORD v304[2];
  void *v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  int32x2_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312[3];
  _BYTE v313[24];
  __int128 v314;
  char v315;
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  v309 = a3;
  v310 = a4;
  if ((_BYTE)a4)
  {
    v5 = vadd_s32(vsub_s32(a3[1], *a3), (int32x2_t)0x100000001);
    v6 = vmul_lane_s32(v5, v5, 1).u32[0];
    v7 = *(_DWORD *)(a1 + 248);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 248);
    v6 = v7;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v279 = v6;
  if (v7 >= v6)
    v7 = v6;
  v286 = v7;
  v307 = 0;
  v308 = 0x100000000;
  v305 = 0;
  v306 = 0;
  v281 = (_QWORD *)(a1 + 160);
  v304[0] = a1;
  v304[1] = &v305;
  v278 = *(_DWORD *)(a1 + 184);
  v11 = (uint64_t *)(a1 + 208);
  v303 = 0;
  v302[0] = &v305;
  v302[1] = a1;
  v302[2] = v304;
  v302[3] = &v309;
  v302[4] = &v303;
  do
  {
    v12 = *((unsigned int *)&v308 + v10);
    v287 = v9;
    rep = 0;
    v291 = 0;
    LOBYTE(v292) = 0;
    rep = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    LOBYTE(v292) = 1;
    kdebug_trace();
    if ((_BYTE)v310)
    {
      v13 = v8;
      v14 = v309;
      v15 = v309[1].i32[0];
      v16 = v309->i32[0];
      v17 = v15 - v16;
      if ((_DWORD)v15 - (_DWORD)v16 == -1)
        goto LABEL_97;
      v18 = 0;
      do
      {
        v19 = v14->i32[1];
        v20 = v14->i32[0] + (uint64_t)v18;
        LODWORD(v312[0]) = v14->i32[0] + v18;
        *(uint64_t *)((char *)v312 + 4) = v19;
        v21 = *(int8x8_t *)(a1 + 216);
        if (v21)
        {
          v22 = (19349669 * v19) ^ (73856093 * v20);
          v23 = (uint8x8_t)vcnt_s8(v21);
          v23.i16[0] = vaddlv_u8(v23);
          if (v23.u32[0] > 1uLL)
          {
            v24 = (19349669 * v19) ^ (73856093 * v20);
            if (v22 >= *(_QWORD *)&v21)
              v24 = v22 % *(_QWORD *)&v21;
          }
          else
          {
            v24 = (*(_QWORD *)&v21 - 1) & v22;
          }
          v25 = *(uint64_t **)(*v11 + 8 * v24);
          if (v25)
          {
            v25 = (uint64_t *)*v25;
            if (v25)
            {
              if (v23.u32[0] < 2uLL)
              {
                while (1)
                {
                  v27 = v25[1];
                  if (v22 == v27)
                  {
                    if (*((_DWORD *)v25 + 4) == (_DWORD)v20 && *((_DWORD *)v25 + 5) == v19 && !*((_DWORD *)v25 + 6))
                      goto LABEL_38;
                  }
                  else if ((v27 & (*(_QWORD *)&v21 - 1)) != v24)
                  {
                    goto LABEL_37;
                  }
                  v25 = (uint64_t *)*v25;
                  if (!v25)
                    goto LABEL_38;
                }
              }
              do
              {
                v26 = v25[1];
                if (v22 == v26)
                {
                  if (*((_DWORD *)v25 + 4) == (_DWORD)v20 && *((_DWORD *)v25 + 5) == v19 && !*((_DWORD *)v25 + 6))
                    break;
                }
                else
                {
                  if (v26 >= *(_QWORD *)&v21)
                    v26 %= *(_QWORD *)&v21;
                  if (v26 != v24)
                    goto LABEL_37;
                }
                v25 = (uint64_t *)*v25;
              }
              while (v25);
            }
          }
        }
        else
        {
LABEL_37:
          v25 = 0;
        }
LABEL_38:
        if (v25)
          v28 = (__int16 *)v25 + 14;
        else
          v28 = (__int16 *)(a1 + 252);
        v29 = v28[1] + *v28;
        v30 = *((_DWORD *)v28 + 2) + (unsigned __int16)v28[3];
        v31 = *((_DWORD *)v28 + 12);
        if ((v29 + v30 < 0) ^ __OFADD__(v29, v30) | (v29 + v30 == 0))
        {
          if (v31 != -1)
          {
            v34 = sub_22393835C((_QWORD *)(a1 + 208), (int *)v312);
            if (v34)
              *((_DWORD *)v34 + 19) = -1;
          }
        }
        else if (v31 != -1)
        {
          v32 = *((_DWORD *)v28 + 17) == (_DWORD)v12 && *((_BYTE *)v28 + 72) == 0;
          if (v32)
          {
            v33 = *((_DWORD *)sub_223ADC0E4(a1, v31) + 5);
            sub_223ADA5CC((uint64_t)v302, v12, (int *)v312, *((_DWORD *)v28 + 12), 1);
            if (*((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v28 + 12)) + 5) <= v33
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 550, (uint64_t)"AreaForIndexConst(voxel.area_index).SizeInVoxels() > size_before", 64, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_567:
              abort();
            }
            v13 = v13 - v33 + *((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v28 + 12)) + 5);
            v21 = *(int8x8_t *)(a1 + 216);
          }
        }
        v35 = v14->i32[0] + (uint64_t)v18;
        v36 = v14->i32[1] + v17;
        LODWORD(v312[0]) = v14->i32[0] + v18;
        *(uint64_t *)((char *)v312 + 4) = v36;
        if (v21)
        {
          v37 = (19349669 * v36) ^ (73856093 * v35);
          v38 = (uint8x8_t)vcnt_s8(v21);
          v38.i16[0] = vaddlv_u8(v38);
          if (v38.u32[0] > 1uLL)
          {
            v39 = (19349669 * v36) ^ (73856093 * v35);
            if (v37 >= *(_QWORD *)&v21)
              v39 = v37 % *(_QWORD *)&v21;
          }
          else
          {
            v39 = v37 & (*(_QWORD *)&v21 - 1);
          }
          v40 = *(uint64_t **)(*v11 + 8 * v39);
          if (v40)
          {
            v40 = (uint64_t *)*v40;
            if (v40)
            {
              if (v38.u32[0] < 2uLL)
              {
                while (1)
                {
                  v42 = v40[1];
                  if (v37 == v42)
                  {
                    if (*((_DWORD *)v40 + 4) == (_DWORD)v35
                      && *((_DWORD *)v40 + 5) == (_DWORD)v36
                      && !*((_DWORD *)v40 + 6))
                    {
                      goto LABEL_80;
                    }
                  }
                  else if ((v42 & (*(_QWORD *)&v21 - 1)) != v39)
                  {
                    goto LABEL_79;
                  }
                  v40 = (uint64_t *)*v40;
                  if (!v40)
                    goto LABEL_80;
                }
              }
              do
              {
                v41 = v40[1];
                if (v37 == v41)
                {
                  if (*((_DWORD *)v40 + 4) == (_DWORD)v35
                    && *((_DWORD *)v40 + 5) == (_DWORD)v36
                    && !*((_DWORD *)v40 + 6))
                  {
                    break;
                  }
                }
                else
                {
                  if (v41 >= *(_QWORD *)&v21)
                    v41 %= *(_QWORD *)&v21;
                  if (v41 != v39)
                    goto LABEL_79;
                }
                v40 = (uint64_t *)*v40;
              }
              while (v40);
            }
          }
        }
        else
        {
LABEL_79:
          v40 = 0;
        }
LABEL_80:
        if (v40)
          v43 = (__int16 *)v40 + 14;
        else
          v43 = (__int16 *)(a1 + 252);
        v44 = v43[1] + *v43;
        v45 = *((_DWORD *)v43 + 2) + (unsigned __int16)v43[3];
        v46 = *((_DWORD *)v43 + 12);
        if ((v44 + v45 < 0) ^ __OFADD__(v44, v45) | (v44 + v45 == 0))
        {
          if (v46 != -1)
          {
            v49 = sub_22393835C((_QWORD *)(a1 + 208), (int *)v312);
            if (v49)
              *((_DWORD *)v49 + 19) = -1;
          }
        }
        else if (v46 != -1 && *((_DWORD *)v43 + 17) == (_DWORD)v12 && *((_BYTE *)v43 + 72) == 0)
        {
          v48 = *((_DWORD *)sub_223ADC0E4(a1, v46) + 5);
          sub_223ADA5CC((uint64_t)v302, v12, (int *)v312, *((_DWORD *)v43 + 12), 1);
          if (*((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v43 + 12)) + 5) <= v48
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 550, (uint64_t)"AreaForIndexConst(voxel.area_index).SizeInVoxels() > size_before", 64, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v13 = v13 - v48 + *((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v43 + 12)) + 5);
        }
        v32 = v18++ == (_DWORD)v17;
      }
      while (!v32);
      if ((_DWORD)v17 != 1)
      {
LABEL_97:
        v50 = 1;
        do
        {
          v51 = v14->i32[0];
          v52 = v14->i32[1] + (uint64_t)v50;
          LODWORD(v312[0]) = v14->i32[0];
          *(uint64_t *)((char *)v312 + 4) = v52;
          v53 = *(int8x8_t *)(a1 + 216);
          if (v53)
          {
            v54 = (19349669 * v52) ^ (73856093 * v51);
            v55 = (uint8x8_t)vcnt_s8(v53);
            v55.i16[0] = vaddlv_u8(v55);
            if (v55.u32[0] > 1uLL)
            {
              v56 = (19349669 * v52) ^ (73856093 * v51);
              if (v54 >= *(_QWORD *)&v53)
                v56 = v54 % *(_QWORD *)&v53;
            }
            else
            {
              v56 = (*(_QWORD *)&v53 - 1) & v54;
            }
            v57 = *(uint64_t **)(*v11 + 8 * v56);
            if (v57)
            {
              v57 = (uint64_t *)*v57;
              if (v57)
              {
                if (v55.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v59 = v57[1];
                    if (v54 == v59)
                    {
                      if (*((_DWORD *)v57 + 4) == v51 && *((_DWORD *)v57 + 5) == (_DWORD)v52 && !*((_DWORD *)v57 + 6))
                        goto LABEL_125;
                    }
                    else if ((v59 & (*(_QWORD *)&v53 - 1)) != v56)
                    {
                      goto LABEL_124;
                    }
                    v57 = (uint64_t *)*v57;
                    if (!v57)
                      goto LABEL_125;
                  }
                }
                do
                {
                  v58 = v57[1];
                  if (v54 == v58)
                  {
                    if (*((_DWORD *)v57 + 4) == v51 && *((_DWORD *)v57 + 5) == (_DWORD)v52 && !*((_DWORD *)v57 + 6))
                      break;
                  }
                  else
                  {
                    if (v58 >= *(_QWORD *)&v53)
                      v58 %= *(_QWORD *)&v53;
                    if (v58 != v56)
                      goto LABEL_124;
                  }
                  v57 = (uint64_t *)*v57;
                }
                while (v57);
              }
            }
          }
          else
          {
LABEL_124:
            v57 = 0;
          }
LABEL_125:
          if (v57)
            v60 = (__int16 *)v57 + 14;
          else
            v60 = (__int16 *)(a1 + 252);
          v61 = v60[1] + *v60;
          v62 = *((_DWORD *)v60 + 2) + (unsigned __int16)v60[3];
          v63 = *((_DWORD *)v60 + 12);
          if ((v61 + v62 < 0) ^ __OFADD__(v61, v62) | (v61 + v62 == 0))
          {
            if (v63 != -1)
            {
              v66 = sub_22393835C((_QWORD *)(a1 + 208), (int *)v312);
              if (v66)
                *((_DWORD *)v66 + 19) = -1;
            }
          }
          else if (v63 != -1 && *((_DWORD *)v60 + 17) == (_DWORD)v12 && *((_BYTE *)v60 + 72) == 0)
          {
            v65 = *((_DWORD *)sub_223ADC0E4(a1, v63) + 5);
            sub_223ADA5CC((uint64_t)v302, v12, (int *)v312, *((_DWORD *)v60 + 12), 1);
            if (*((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v60 + 12)) + 5) <= v65
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 550, (uint64_t)"AreaForIndexConst(voxel.area_index).SizeInVoxels() > size_before", 64, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_567;
            }
            v13 = v13 - v65 + *((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v60 + 12)) + 5);
            v53 = *(int8x8_t *)(a1 + 216);
          }
          v67 = v14->i32[0] + (uint64_t)(int)v17;
          v68 = v14->i32[1] + (uint64_t)v50;
          LODWORD(v312[0]) = v14->i32[0] + v17;
          *(uint64_t *)((char *)v312 + 4) = v68;
          if (v53)
          {
            v69 = (19349669 * v68) ^ (73856093 * v67);
            v70 = (uint8x8_t)vcnt_s8(v53);
            v70.i16[0] = vaddlv_u8(v70);
            if (v70.u32[0] > 1uLL)
            {
              v71 = (19349669 * v68) ^ (73856093 * v67);
              if (v69 >= *(_QWORD *)&v53)
                v71 = v69 % *(_QWORD *)&v53;
            }
            else
            {
              v71 = v69 & (*(_QWORD *)&v53 - 1);
            }
            v72 = *(uint64_t **)(*v11 + 8 * v71);
            if (v72)
            {
              v72 = (uint64_t *)*v72;
              if (v72)
              {
                if (v70.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v74 = v72[1];
                    if (v69 == v74)
                    {
                      if (*((_DWORD *)v72 + 4) == (_DWORD)v67
                        && *((_DWORD *)v72 + 5) == (_DWORD)v68
                        && !*((_DWORD *)v72 + 6))
                      {
                        goto LABEL_167;
                      }
                    }
                    else if ((v74 & (*(_QWORD *)&v53 - 1)) != v71)
                    {
                      goto LABEL_166;
                    }
                    v72 = (uint64_t *)*v72;
                    if (!v72)
                      goto LABEL_167;
                  }
                }
                do
                {
                  v73 = v72[1];
                  if (v69 == v73)
                  {
                    if (*((_DWORD *)v72 + 4) == (_DWORD)v67
                      && *((_DWORD *)v72 + 5) == (_DWORD)v68
                      && !*((_DWORD *)v72 + 6))
                    {
                      break;
                    }
                  }
                  else
                  {
                    if (v73 >= *(_QWORD *)&v53)
                      v73 %= *(_QWORD *)&v53;
                    if (v73 != v71)
                      goto LABEL_166;
                  }
                  v72 = (uint64_t *)*v72;
                }
                while (v72);
              }
            }
          }
          else
          {
LABEL_166:
            v72 = 0;
          }
LABEL_167:
          if (v72)
            v75 = (__int16 *)v72 + 14;
          else
            v75 = (__int16 *)(a1 + 252);
          v76 = v75[1] + *v75;
          v77 = *((_DWORD *)v75 + 2) + (unsigned __int16)v75[3];
          v78 = *((_DWORD *)v75 + 12);
          if ((v76 + v77 < 0) ^ __OFADD__(v76, v77) | (v76 + v77 == 0))
          {
            if (v78 != -1)
            {
              v81 = sub_22393835C((_QWORD *)(a1 + 208), (int *)v312);
              if (v81)
                *((_DWORD *)v81 + 19) = -1;
            }
          }
          else if (v78 != -1 && *((_DWORD *)v75 + 17) == (_DWORD)v12 && *((_BYTE *)v75 + 72) == 0)
          {
            v80 = *((_DWORD *)sub_223ADC0E4(a1, v78) + 5);
            sub_223ADA5CC((uint64_t)v302, v12, (int *)v312, *((_DWORD *)v75 + 12), 1);
            if (*((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v75 + 12)) + 5) <= v80
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 550, (uint64_t)"AreaForIndexConst(voxel.area_index).SizeInVoxels() > size_before", 64, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v13 = v13 - v80 + *((_DWORD *)sub_223ADC0E4(a1, *((_DWORD *)v75 + 12)) + 5);
          }
          ++v50;
        }
        while (v50 != (_DWORD)v17);
      }
    }
    else
    {
      v13 = v8;
    }
    v82 = *(uint64_t **)(a1 + 224);
    v8 = v13;
    while (v82)
    {
      v84 = (int *)(v82 + 2);
      if ((_BYTE)v310)
      {
        v85 = *(_QWORD *)v84;
        if (v309->i32[0] > (int)*(_QWORD *)v84 || v309[1].i32[0] < (int)v85)
          goto LABEL_191;
        v87 = HIDWORD(v85);
        if (v309->i32[1] > (int)v87 || v309[1].i32[1] < (int)v87)
          goto LABEL_191;
      }
      v89 = *((__int16 *)v82 + 15) + *((__int16 *)v82 + 14);
      v90 = *((_DWORD *)v82 + 9) + *((unsigned __int16 *)v82 + 17);
      if ((v89 + v90 < 0) ^ __OFADD__(v89, v90) | (v89 + v90 == 0))
      {
        if (*((_DWORD *)v82 + 19) != -1)
          *((_DWORD *)v82 + 19) = -1;
      }
      else
      {
        if (*((_BYTE *)v82 + 100)
          || *((_BYTE *)v82 + v12 + 72) != 13
          || (_DWORD)v12 != 1 && *((float *)v82 + v12 + 16) > 0.0)
        {
          goto LABEL_191;
        }
        v91 = *(unsigned int *)(a1 + 200);
        *(_DWORD *)(a1 + 200) = v91 + 1;
        sub_223ADA5CC((uint64_t)v302, v12, v84, v91, 0);
        v92 = sub_223AD5A88(a1, v91);
        if ((_DWORD)v12)
        {
          v83 = *((_DWORD *)v92 + 5);
LABEL_190:
          v8 = (v83 + v8);
          goto LABEL_191;
        }
        v93 = *((int *)v92 + 4);
        v94 = *((int *)v92 + 2);
        if ((_DWORD)v94 == (_DWORD)v93 + 1)
        {
          v95 = *((_DWORD *)v92 + 5);
        }
        else
        {
          v283 = v8;
          v99 = *((int *)v92 + 3);
          if (*((_DWORD *)v92 + 1) != (_DWORD)v99 + 1)
          {
            v125 = *(int8x8_t *)(a1 + 216);
            if (v125)
            {
              v126 = (uint8x8_t)vcnt_s8(v125);
              v126.i16[0] = vaddlv_u8(v126);
              v127 = *(_QWORD *)&v125 - 1;
              v128 = *v11;
              v129 = *((int *)v92 + 2);
              do
              {
                v130 = v129 + 1;
                v131 = 19349669 * (v129 + 1);
                v132 = v129 + 2;
                v133 = *((int *)v92 + 1);
                do
                {
                  v134 = 0;
                  while (1)
                  {
                    v135 = v134 + v133;
                    v136 = 73856093 * (v134 + v133);
                    v137 = v136 ^ (19349669 * v129);
                    if (v126.u32[0] >= 2uLL)
                    {
                      v138 = v136 ^ (19349669 * v129);
                      if (v137 >= *(_QWORD *)&v125)
                        v138 = v137 % *(_QWORD *)&v125;
                    }
                    else
                    {
                      v138 = v137 & v127;
                    }
                    v139 = *(uint64_t ***)(v128 + 8 * v138);
                    if (v139)
                    {
                      v140 = *v139;
                      if (*v139)
                      {
                        if (v126.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v141 = v140[1];
                            if (v137 == v141)
                            {
                              if (*((_DWORD *)v140 + 4) == v135
                                && *((_DWORD *)v140 + 5) == (_DWORD)v129
                                && !*((_DWORD *)v140 + 6))
                              {
                                goto LABEL_304;
                              }
                            }
                            else if ((v141 & v127) != v138)
                            {
                              goto LABEL_303;
                            }
                            v140 = (uint64_t *)*v140;
                            if (!v140)
                              goto LABEL_304;
                          }
                        }
                        do
                        {
                          v142 = v140[1];
                          if (v137 == v142)
                          {
                            if (*((_DWORD *)v140 + 4) == v135
                              && *((_DWORD *)v140 + 5) == (_DWORD)v129
                              && !*((_DWORD *)v140 + 6))
                            {
                              break;
                            }
                          }
                          else
                          {
                            if (v142 >= *(_QWORD *)&v125)
                              v142 %= *(_QWORD *)&v125;
                            if (v142 != v138)
                              goto LABEL_303;
                          }
                          v140 = (uint64_t *)*v140;
                        }
                        while (v140);
                      }
                    }
                    else
                    {
LABEL_303:
                      v140 = 0;
                    }
LABEL_304:
                    v143 = v140 ? (uint64_t)v140 + 28 : a1 + 252;
                    if (*(_DWORD *)(v143 + 48) != (_DWORD)v91 || *(_BYTE *)(v143 + 44) != 13)
                      break;
                    v144 = v136 ^ v131;
                    if (v126.u32[0] >= 2uLL)
                    {
                      v145 = v136 ^ v131;
                      if (v144 >= *(_QWORD *)&v125)
                        v145 = v144 % *(_QWORD *)&v125;
                    }
                    else
                    {
                      v145 = v144 & v127;
                    }
                    v146 = *(uint64_t ***)(v128 + 8 * v145);
                    if (v146)
                    {
                      v147 = *v146;
                      if (*v146)
                      {
                        if (v126.u32[0] >= 2uLL)
                        {
                          while (1)
                          {
                            v149 = v147[1];
                            if (v144 == v149)
                            {
                              if (*((_DWORD *)v147 + 4) == v135
                                && *((_DWORD *)v147 + 5) == v130
                                && !*((_DWORD *)v147 + 6))
                              {
                                goto LABEL_334;
                              }
                            }
                            else
                            {
                              if (v149 >= *(_QWORD *)&v125)
                                v149 %= *(_QWORD *)&v125;
                              if (v149 != v145)
                                goto LABEL_333;
                            }
                            v147 = (uint64_t *)*v147;
                            if (!v147)
                              goto LABEL_334;
                          }
                        }
                        do
                        {
                          v148 = v147[1];
                          if (v144 == v148)
                          {
                            if (*((_DWORD *)v147 + 4) == v135
                              && *((_DWORD *)v147 + 5) == v130
                              && !*((_DWORD *)v147 + 6))
                            {
                              break;
                            }
                          }
                          else if ((v148 & v127) != v145)
                          {
                            goto LABEL_333;
                          }
                          v147 = (uint64_t *)*v147;
                        }
                        while (v147);
                      }
                    }
                    else
                    {
LABEL_333:
                      v147 = 0;
                    }
LABEL_334:
                    v150 = v147 ? (uint64_t)v147 + 28 : a1 + 252;
                    if (*(_DWORD *)(v150 + 48) != (_DWORD)v91 || *(_BYTE *)(v150 + 44) != 13)
                      break;
                    v151 = v136 ^ (19349669 * (v129 + 2));
                    if (v126.u32[0] >= 2uLL)
                    {
                      v152 = v151;
                      if (v151 >= *(_QWORD *)&v125)
                        v152 = v151 % *(_QWORD *)&v125;
                    }
                    else
                    {
                      v152 = v151 & v127;
                    }
                    v153 = *(uint64_t ***)(v128 + 8 * v152);
                    if (v153)
                    {
                      v154 = *v153;
                      if (*v153)
                      {
                        if (v126.u32[0] >= 2uLL)
                        {
                          while (1)
                          {
                            v156 = v154[1];
                            if (v151 == v156)
                            {
                              if (*((_DWORD *)v154 + 4) == v135
                                && *((_DWORD *)v154 + 5) == v132
                                && !*((_DWORD *)v154 + 6))
                              {
                                goto LABEL_364;
                              }
                            }
                            else
                            {
                              if (v156 >= *(_QWORD *)&v125)
                                v156 %= *(_QWORD *)&v125;
                              if (v156 != v152)
                                goto LABEL_363;
                            }
                            v154 = (uint64_t *)*v154;
                            if (!v154)
                              goto LABEL_364;
                          }
                        }
                        do
                        {
                          v155 = v154[1];
                          if (v151 == v155)
                          {
                            if (*((_DWORD *)v154 + 4) == v135
                              && *((_DWORD *)v154 + 5) == v132
                              && !*((_DWORD *)v154 + 6))
                            {
                              break;
                            }
                          }
                          else if ((v155 & v127) != v152)
                          {
                            goto LABEL_363;
                          }
                          v154 = (uint64_t *)*v154;
                        }
                        while (v154);
                      }
                    }
                    else
                    {
LABEL_363:
                      v154 = 0;
                    }
LABEL_364:
                    v157 = v154 ? (uint64_t)v154 + 28 : a1 + 252;
                    if (*(_DWORD *)(v157 + 48) != (_DWORD)v91 || *(_BYTE *)(v157 + 44) != 13)
                      break;
                    if (++v134 == 3)
                      goto LABEL_376;
                  }
                  v32 = v133++ == v99;
                }
                while (!v32);
                v32 = v129++ == v93;
              }
              while (!v32);
            }
            else if (*(_DWORD *)(a1 + 300) == (_DWORD)v91 && *(_BYTE *)(a1 + 296) == 13)
            {
LABEL_376:
              v83 = *((_DWORD *)v92 + 5);
              LODWORD(v8) = v283;
              goto LABEL_190;
            }
          }
          v100 = *((_DWORD *)v92 + 69);
          v95 = *((_DWORD *)v92 + 5);
          v101 = (int32x2_t)v92[54];
          v8 = v283;
          do
          {
            v102 = *((int *)v92 + 3);
            v103 = *((int *)v92 + 1);
            if ((_DWORD)v103 != (_DWORD)v102 + 1)
            {
              v104 = *(int8x8_t *)(a1 + 216);
              if (v104)
              {
                v105 = (uint8x8_t)vcnt_s8(v104);
                v105.i16[0] = vaddlv_u8(v105);
                v106 = *v11;
                v107 = *(_QWORD *)&v104 - 1;
                v108 = v95;
                do
                {
                  v109 = (73856093 * v103) ^ (19349669 * v94);
                  if (v105.u32[0] > 1uLL)
                  {
                    v110 = (73856093 * v103) ^ (19349669 * v94);
                    if (v109 >= *(_QWORD *)&v104)
                      v110 = v109 % *(_QWORD *)&v104;
                  }
                  else
                  {
                    v110 = v109 & v107;
                  }
                  v111 = *(int32x2_t ***)(v106 + 8 * v110);
                  if (v111)
                  {
                    v112 = *v111;
                    if (v112)
                    {
                      if (v105.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v113 = v112[1];
                          if (*(_QWORD *)&v113 == v109)
                          {
                            if (v112[2].i32[0] == (_DWORD)v103 && v112[2].i32[1] == (_DWORD)v94 && !v112[3].i32[0])
                              goto LABEL_238;
                          }
                          else if ((*(_QWORD *)&v113 & v107) != v110)
                          {
                            goto LABEL_223;
                          }
                          v112 = (int32x2_t *)*v112;
                          if (!v112)
                            goto LABEL_223;
                        }
                      }
                      do
                      {
                        v119 = v112[1];
                        if (*(_QWORD *)&v119 == v109)
                        {
                          if (v112[2].i32[0] == (_DWORD)v103 && v112[2].i32[1] == (_DWORD)v94 && !v112[3].i32[0])
                          {
LABEL_238:
                            if (v112[9].i32[1] == (_DWORD)v91)
                            {
                              v114 = *((_DWORD *)v92 + 66) - v112[10].i32[0];
                              *((_DWORD *)v92 + 66) = v114;
                              v115 = *((_DWORD *)v92 + 67) - v112[10].i32[1];
                              *((_DWORD *)v92 + 67) = v115;
                              v116 = *((_DWORD *)v92 + 68) - v112[11].i32[0];
                              *((_DWORD *)v92 + 68) = v116;
                              if (v114 < 0 || v115 < 0 || v116 < 0)
                              {
                                *((_DWORD *)v92 + 66) = v112[10].i32[0] & ~(v112[10].i32[0] >> 31);
                                *((_DWORD *)v92 + 67) = v112[10].i32[1] & ~(v112[10].i32[1] >> 31);
                                *((_DWORD *)v92 + 68) = v112[11].i32[0] & ~(v112[11].i32[0] >> 31);
                              }
                              v117 = v112[4].u16[1];
                              v118 = v100 >= v117;
                              v100 -= v117;
                              if (!v118)
                                v100 = 0;
                              *((_DWORD *)v92 + 69) = v100;
                              if (v108)
                              {
                                v95 = v108 - 1;
                                *((_DWORD *)v92 + 5) = --v108;
                              }
                              v101 = (int32x2_t)vbic_s8((int8x8_t)vsub_s32(v101, v112[5]), (int8x8_t)vcgt_s32(v112[5], v101));
                              v92[54] = (uint64_t)v101;
                              v112[9].i32[1] = -1;
                              v112[9].i8[2] = 13;
                              v112[12].i8[4] = 0;
                            }
                            break;
                          }
                        }
                        else
                        {
                          if (*(_QWORD *)&v119 >= *(_QWORD *)&v104)
                            *(_QWORD *)&v119 %= *(_QWORD *)&v104;
                          if (*(_QWORD *)&v119 != v110)
                            break;
                        }
                        v112 = (int32x2_t *)*v112;
                      }
                      while (v112);
                    }
                  }
LABEL_223:
                  v32 = v103++ == v102;
                }
                while (!v32);
              }
            }
            v32 = v94++ == v93;
          }
          while (!v32);
        }
        if (v95
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 638, (uint64_t)"current_area.SizeInVoxels() == 0", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v96 = *(int8x8_t *)(a1 + 168);
        if (v96)
        {
          v97 = (uint8x8_t)vcnt_s8(v96);
          v97.i16[0] = vaddlv_u8(v97);
          if (v97.u32[0] > 1uLL)
          {
            v98 = v91;
            if (*(_QWORD *)&v96 <= v91)
              v98 = v91 % *(_QWORD *)&v96;
          }
          else
          {
            v98 = (v96.i32[0] - 1) & v91;
          }
          v120 = *(uint64_t ***)(*v281 + 8 * v98);
          if (v120)
          {
            v121 = *v120;
            if (*v120)
            {
              if (v97.u32[0] < 2uLL)
              {
                v122 = *(_QWORD *)&v96 - 1;
                while (1)
                {
                  v124 = v121[1];
                  if (v124 == v91)
                  {
                    if (*((_DWORD *)v121 + 4) == (_DWORD)v91)
                      goto LABEL_377;
                  }
                  else if ((v124 & v122) != v98)
                  {
                    goto LABEL_191;
                  }
                  v121 = (uint64_t *)*v121;
                  if (!v121)
                    goto LABEL_191;
                }
              }
              do
              {
                v123 = v121[1];
                if (v123 == v91)
                {
                  if (*((_DWORD *)v121 + 4) == (_DWORD)v91)
                  {
LABEL_377:
                    sub_2231AFBB8(v281, v121, (uint64_t)v312);
                    v158 = (_QWORD *)v312[0];
                    v312[0] = 0;
                    if (v158)
                    {
                      if (LOBYTE(v312[2]))
                        sub_22388AFA4(v158 + 3);
                      operator delete(v158);
                    }
                    break;
                  }
                }
                else
                {
                  if (v123 >= *(_QWORD *)&v96)
                    v123 %= *(_QWORD *)&v96;
                  if (v123 != v98)
                    break;
                }
                v121 = (uint64_t *)*v121;
              }
              while (v121);
            }
          }
        }
      }
LABEL_191:
      v82 = (uint64_t *)*v82;
    }
    kdebug_trace();
    HIBYTE(v312[2]) = 19;
    strcpy((char *)v312, "ComputeClutterAreas");
    v301 = 17;
    strcpy(__p, "KeyframeOccupancy");
    sub_22391CC34(v312, (uint64_t *)__p, (uint64_t)&rep);
    if (v301 < 0)
    {
      operator delete(*(void **)__p);
      if ((SHIBYTE(v312[2]) & 0x80000000) == 0)
      {
LABEL_187:
        if ((_DWORD)v8 == v286)
          goto LABEL_390;
        goto LABEL_383;
      }
    }
    else if ((SHIBYTE(v312[2]) & 0x80000000) == 0)
    {
      goto LABEL_187;
    }
    operator delete((void *)v312[0]);
    if ((_DWORD)v8 == v286)
    {
LABEL_390:
      LODWORD(v8) = v286;
      goto LABEL_391;
    }
LABEL_383:
    v9 = 1;
    v10 = 1;
  }
  while ((v287 & 1) == 0);
  sub_223AD515C(&v299);
  if (**(int **)(v299 + 56) > 3)
    goto LABEL_391;
  v159 = *(unsigned __int8 *)(v299 + 72);
  v160 = sub_22322F254(v299, "OSLogSurrogateAppender", 1, 0);
  v161 = v160;
  if (!v159 && !v160)
    goto LABEL_391;
  rep = &v299;
  v291 = std::chrono::steady_clock::now().__d_.__rep_;
  v292 = std::chrono::system_clock::now().__d_.__rep_;
  v293 = 3;
  v294 = "unknown file";
  v295 = 658;
  v297 = 0;
  v298 = 0;
  v296 = "unknown function";
  v162 = *rep;
  if (*(char *)(*rep + 39) < 0)
  {
    v164 = *(const char **)(v162 + 16);
    v163 = *(_QWORD *)(v162 + 24);
    v288 = *rep + 16;
    v284 = v8;
    v228 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v228 & 1) == 0)
    {
LABEL_581:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v312);
        sub_223199C58("com.apple.cv3d", (unint64_t)v312, byte_255788F40);
        if (v313[0] && SHIBYTE(v312[2]) < 0)
          operator delete((void *)v312[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v163 = *(unsigned __int8 *)(*rep + 39);
    v164 = (const char *)(*rep + 16);
    v288 = (uint64_t)v164;
    v284 = v8;
    v165 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v165 & 1) == 0)
      goto LABEL_581;
  }
  if (byte_255788F40[23] >= 0)
    v229 = byte_255788F40;
  else
    v229 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v230 = byte_255788F40[23];
  else
    v230 = *(_QWORD *)&byte_255788F40[8];
  v312[0] = (uint64_t)os_log_create(v229, v164);
  v231 = &v312[1];
  if (v230 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v230 >= 0x17)
  {
    v232 = v161;
    v233 = v164;
    v234 = v162;
    v235 = v159;
    v236 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v230 | 7) != 0x17)
      v236 = v230 | 7;
    v237 = v236 + 1;
    v231 = (uint64_t *)operator new(v236 + 1);
    v312[2] = v230;
    *(_QWORD *)v313 = v237 | 0x8000000000000000;
    v312[1] = (uint64_t)v231;
    v159 = v235;
    v162 = v234;
    v164 = v233;
    v161 = v232;
    goto LABEL_499;
  }
  v313[7] = v230;
  if (v230)
LABEL_499:
    memmove(v231, v229, v230);
  *((_BYTE *)v231 + v230) = 0;
  v313[8] = 1;
  v238 = &v313[16];
  if (v163 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v163 >= 0x17)
  {
    v239 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v163 | 7) != 0x17)
      v239 = v163 | 7;
    v8 = v239 + 1;
    v238 = operator new(v239 + 1);
    *(_QWORD *)&v314 = v163;
    *((_QWORD *)&v314 + 1) = v8 | 0x8000000000000000;
    *(_QWORD *)&v313[16] = v238;
    LODWORD(v8) = v284;
    goto LABEL_507;
  }
  HIBYTE(v314) = v163;
  LODWORD(v8) = v284;
  if (v163)
LABEL_507:
    memmove(v238, v164, v163);
  v238[v163] = 0;
  v315 = 1;
  v240 = v312[0];
  if (SHIBYTE(v314) < 0)
    operator delete(*(void **)&v313[16]);
  if (v313[8] && (v313[7] & 0x80000000) != 0)
    operator delete((void *)v312[1]);
  if (v312[0])
    os_release((void *)v312[0]);
  if (v161 && *(_QWORD *)(v161 + 24))
  {
    v241 = _os_log_pack_size();
    v242 = (std::__shared_weak_count_vtbl *)operator new(v241, (std::align_val_t)8uLL);
    v243 = (std::__shared_weak_count *)operator new();
    v244 = v243;
    v243->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v243->__shared_owners_;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v242;
    v312[0] = (uint64_t)v242;
    v312[1] = (uint64_t)v242;
    v312[2] = (uint64_t)v243;
    do
      v246 = __ldxr(p_shared_owners);
    while (__stxr(v246 + 1, p_shared_owners));
    memset(v313, 0, sizeof(v313));
    do
      v247 = __ldaxr(p_shared_owners);
    while (__stlxr(v247 - 1, p_shared_owners));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v244);
    }
    v248 = v312[0];
    v249 = _os_log_pack_fill();
    *(_DWORD *)v249 = 67109376;
    *(_DWORD *)(v249 + 4) = v284;
    *(_WORD *)(v249 + 8) = 1024;
    *(_DWORD *)(v249 + 10) = v286;
    v250 = operator new();
    v251 = *(unsigned __int8 *)(v162 + 39);
    v252 = v288;
    if ((v251 & 0x80u) != 0)
    {
      v252 = *(_QWORD *)(v162 + 16);
      v251 = *(_QWORD *)(v162 + 24);
    }
    *(_QWORD *)v250 = v248;
    *(_OWORD *)(v250 + 8) = *(_OWORD *)&v312[1];
    v312[1] = 0;
    v312[2] = 0;
    *(_OWORD *)(v250 + 24) = *(_OWORD *)v313;
    *(_QWORD *)v313 = 0;
    *(_QWORD *)&v313[8] = 0;
    *(_QWORD *)(v250 + 40) = v252;
    *(_QWORD *)(v250 + 48) = v251;
    *(_BYTE *)(v250 + 56) = 1;
    v311 = 0;
    *(_QWORD *)__p = v250;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v161 + 24) + 40))(*(_QWORD *)(v161 + 24), __p);
    v253 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    LODWORD(v8) = v284;
    if (v253)
    {
      v254 = *(std::__shared_weak_count **)(v253 + 32);
      if (v254)
      {
        v255 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = *(std::__shared_weak_count **)(v253 + 16);
      if (v257)
      {
        v258 = (unint64_t *)&v257->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      MEMORY[0x227684CE8](v253, 0x10F0C40B62ED6C6);
      v260 = v311;
      v311 = 0;
      if (v260)
      {
        v261 = *(std::__shared_weak_count **)(v260 + 32);
        if (v261)
        {
          v262 = (unint64_t *)&v261->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
          }
        }
        v264 = *(std::__shared_weak_count **)(v260 + 16);
        if (v264)
        {
          v265 = (unint64_t *)&v264->__shared_owners_;
          do
            v266 = __ldaxr(v265);
          while (__stlxr(v266 - 1, v265));
          if (!v266)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
        }
        MEMORY[0x227684CE8](v260, 0x10F0C40B62ED6C6);
      }
    }
    v267 = *(std::__shared_weak_count **)&v313[8];
    if (*(_QWORD *)&v313[8])
    {
      v268 = (unint64_t *)(*(_QWORD *)&v313[8] + 8);
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
    v270 = (std::__shared_weak_count *)v312[2];
    if (v312[2])
    {
      v271 = (unint64_t *)(v312[2] + 8);
      do
        v272 = __ldaxr(v271);
      while (__stlxr(v272 - 1, v271));
      if (!v272)
      {
        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
        std::__shared_weak_count::__release_weak(v270);
      }
    }
  }
  else
  {
    os_log_type_enabled(v240, OS_LOG_TYPE_INFO);
    LODWORD(v312[0]) = 67109376;
    HIDWORD(v312[0]) = v8;
    LOWORD(v312[1]) = 1024;
    *(_DWORD *)((char *)&v312[1] + 2) = v286;
    v273 = (void *)_os_log_send_and_compose_impl();
    if (v273)
      free(v273);
  }
  if (v159)
  {
    sub_22322C138((uint64_t)&rep, "Clustering covered %i voxels out of %i", v8, v286);
    sub_223182C08((uint64_t)&rep);
  }
  sub_223182C08((uint64_t)&rep);
  v274 = v298;
  if (v298)
  {
    v275 = (unint64_t *)&v298->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
LABEL_391:
  v166 = atomic_load((unsigned __int8 *)&qword_2540CCDA8);
  if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDA8))
  {
    sub_22455F53C(&rep);
    sub_223174DE4(v312, "cv3dapi.recon3d");
    sub_2232300E0(&rep, (uint64_t)v312, &qword_2540CCDA0);
    if (SHIBYTE(v312[2]) < 0)
      operator delete((void *)v312[0]);
    __cxa_guard_release(&qword_2540CCDA8);
  }
  v299 = qword_2540CCDA0;
  if (**(int **)(qword_2540CCDA0 + 56) > 3)
    goto LABEL_482;
  v167 = *(unsigned __int8 *)(qword_2540CCDA0 + 72);
  v168 = sub_22322F254(qword_2540CCDA0, "OSLogSurrogateAppender", 1, 0);
  v169 = v168;
  if (!v167 && v168 == 0)
    goto LABEL_482;
  rep = &v299;
  v291 = std::chrono::steady_clock::now().__d_.__rep_;
  v292 = std::chrono::system_clock::now().__d_.__rep_;
  v293 = 3;
  v294 = "unknown file";
  v295 = 664;
  v297 = 0;
  v298 = 0;
  v296 = "unknown function";
  v171 = *rep;
  if (*(char *)(*rep + 39) < 0)
  {
    v173 = *(const char **)(v171 + 16);
    v172 = *(_QWORD *)(v171 + 24);
  }
  else
  {
    v172 = *(unsigned __int8 *)(*rep + 39);
    v173 = (const char *)(*rep + 16);
  }
  v277 = *rep + 16;
  v280 = *(_QWORD *)(a1 + 184);
  v282 = *(_QWORD *)(a1 + 232);
  v285 = v8;
  v289 = v310;
  v174 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v312);
    sub_223199C58("com.apple.cv3d", (unint64_t)v312, byte_255788F40);
    if (v313[0] && SHIBYTE(v312[2]) < 0)
      operator delete((void *)v312[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v175 = byte_255788F40;
  else
    v175 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v176 = byte_255788F40[23];
  else
    v176 = *(_QWORD *)&byte_255788F40[8];
  v312[0] = (uint64_t)os_log_create(v175, v173);
  v177 = &v312[1];
  if (v176 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v176 >= 0x17)
  {
    v178 = v169;
    v179 = v173;
    v180 = v171;
    v181 = v167;
    v182 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17)
      v182 = v176 | 7;
    v183 = v182 + 1;
    v177 = (uint64_t *)operator new(v182 + 1);
    v312[2] = v176;
    *(_QWORD *)v313 = v183 | 0x8000000000000000;
    v312[1] = (uint64_t)v177;
    v167 = v181;
    v171 = v180;
    v173 = v179;
    v169 = v178;
    goto LABEL_414;
  }
  v313[7] = v176;
  if (v176)
LABEL_414:
    memmove(v177, v175, v176);
  *((_BYTE *)v177 + v176) = 0;
  v313[8] = 1;
  v184 = &v313[16];
  if (v172 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v172 >= 0x17)
  {
    v187 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17)
      v187 = v172 | 7;
    v188 = v187 + 1;
    v184 = operator new(v187 + 1);
    *(_QWORD *)&v314 = v172;
    *((_QWORD *)&v314 + 1) = v188 | 0x8000000000000000;
    *(_QWORD *)&v313[16] = v184;
    v185 = v285;
  }
  else
  {
    HIBYTE(v314) = v172;
    v185 = v285;
    if (!v172)
    {
      v313[16] = 0;
      v315 = 1;
      v186 = v312[0];
      if ((SHIBYTE(v314) & 0x80000000) == 0)
        goto LABEL_419;
LABEL_425:
      operator delete(*(void **)&v313[16]);
      if (v313[8])
        goto LABEL_426;
      goto LABEL_428;
    }
  }
  memmove(v184, v173, v172);
  v184[v172] = 0;
  v315 = 1;
  v186 = v312[0];
  if (SHIBYTE(v314) < 0)
    goto LABEL_425;
LABEL_419:
  if (v313[8])
  {
LABEL_426:
    if ((v313[7] & 0x80000000) != 0)
      operator delete((void *)v312[1]);
  }
LABEL_428:
  if (v312[0])
    os_release((void *)v312[0]);
  if (v169 && *(_QWORD *)(v169 + 24))
  {
    v189 = _os_log_pack_size();
    v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
    v191 = (std::__shared_weak_count *)operator new();
    v192 = v191;
    v191->__shared_owners_ = 0;
    v193 = (unint64_t *)&v191->__shared_owners_;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v190;
    v312[0] = (uint64_t)v190;
    v312[1] = (uint64_t)v190;
    v312[2] = (uint64_t)v191;
    do
      v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
    memset(v313, 0, sizeof(v313));
    do
      v195 = __ldaxr(v193);
    while (__stlxr(v195 - 1, v193));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v192);
    }
    v196 = v312[0];
    v197 = _os_log_pack_fill();
    v198 = v303;
    v199 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)v197 = 67111168;
    *(_DWORD *)(v197 + 4) = v278;
    *(_WORD *)(v197 + 8) = 2048;
    *(_QWORD *)(v197 + 10) = v280;
    *(_WORD *)(v197 + 18) = 1024;
    *(_DWORD *)(v197 + 20) = v198;
    *(_WORD *)(v197 + 24) = 1024;
    *(_DWORD *)(v197 + 26) = v285;
    *(_WORD *)(v197 + 30) = 1024;
    *(_DWORD *)(v197 + 32) = v286;
    *(_WORD *)(v197 + 36) = 2048;
    *(_QWORD *)(v197 + 38) = v282;
    *(_WORD *)(v197 + 46) = 1024;
    *(_DWORD *)(v197 + 48) = v199;
    *(_WORD *)(v197 + 52) = 1024;
    *(_DWORD *)(v197 + 54) = v289;
    *(_WORD *)(v197 + 58) = 1024;
    *(_DWORD *)(v197 + 60) = v279;
    v200 = operator new();
    v201 = *(unsigned __int8 *)(v171 + 39);
    v202 = v277;
    if ((v201 & 0x80u) != 0)
    {
      v202 = *(_QWORD *)(v171 + 16);
      v201 = *(_QWORD *)(v171 + 24);
    }
    *(_QWORD *)v200 = v196;
    *(_OWORD *)(v200 + 8) = *(_OWORD *)&v312[1];
    v312[1] = 0;
    v312[2] = 0;
    *(_OWORD *)(v200 + 24) = *(_OWORD *)v313;
    *(_QWORD *)v313 = 0;
    *(_QWORD *)&v313[8] = 0;
    *(_QWORD *)(v200 + 40) = v202;
    *(_QWORD *)(v200 + 48) = v201;
    *(_BYTE *)(v200 + 56) = 1;
    v311 = 0;
    *(_QWORD *)__p = v200;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v169 + 24) + 40))(*(_QWORD *)(v169 + 24), __p);
    v203 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    v185 = v285;
    if (v203)
    {
      v204 = *(std::__shared_weak_count **)(v203 + 32);
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v207 = *(std::__shared_weak_count **)(v203 + 16);
      if (v207)
      {
        v208 = (unint64_t *)&v207->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      MEMORY[0x227684CE8](v203, 0x10F0C40B62ED6C6);
      v210 = v311;
      v311 = 0;
      if (v210)
      {
        v211 = *(std::__shared_weak_count **)(v210 + 32);
        if (v211)
        {
          v212 = (unint64_t *)&v211->__shared_owners_;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        v214 = *(std::__shared_weak_count **)(v210 + 16);
        if (v214)
        {
          v215 = (unint64_t *)&v214->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
          }
        }
        MEMORY[0x227684CE8](v210, 0x10F0C40B62ED6C6);
      }
    }
    v217 = *(std::__shared_weak_count **)&v313[8];
    if (*(_QWORD *)&v313[8])
    {
      v218 = (unint64_t *)(*(_QWORD *)&v313[8] + 8);
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    v220 = (std::__shared_weak_count *)v312[2];
    if (v312[2])
    {
      v221 = (unint64_t *)(v312[2] + 8);
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
  }
  else
  {
    os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
    v223 = *(_DWORD *)(a1 + 248);
    LODWORD(v312[0]) = 67111168;
    HIDWORD(v312[0]) = v278;
    LOWORD(v312[1]) = 2048;
    *(uint64_t *)((char *)&v312[1] + 2) = v280;
    WORD1(v312[2]) = 1024;
    HIDWORD(v312[2]) = v303;
    *(_WORD *)v313 = 1024;
    *(_DWORD *)&v313[2] = v185;
    *(_WORD *)&v313[6] = 1024;
    *(_DWORD *)&v313[8] = v286;
    *(_WORD *)&v313[12] = 2048;
    *(_QWORD *)&v313[14] = v282;
    *(_WORD *)&v313[22] = 1024;
    LODWORD(v314) = v223;
    WORD2(v314) = 1024;
    *(_DWORD *)((char *)&v314 + 6) = v289;
    WORD5(v314) = 1024;
    HIDWORD(v314) = v279;
    v224 = (void *)_os_log_send_and_compose_impl();
    if (v224)
      free(v224);
  }
  if (v167)
  {
    sub_22322C138((uint64_t)&rep, "KFOS:CA ba:%d a:%lu ma:%d v:%d mv:%d gv:%lu gvo:%d bb:%d bba:%d", v278, *(_QWORD *)(a1 + 184), v303, v185, v286, *(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 248), v310, v279);
    sub_223182C08((uint64_t)&rep);
  }
  sub_223182C08((uint64_t)&rep);
  v225 = v298;
  if (v298)
  {
    v226 = (unint64_t *)&v298->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
LABEL_482:
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
}

void sub_223ADA3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;

  if (*(_BYTE *)(v42 - 152) && *(char *)(v42 - 153) < 0)
    operator delete(*(void **)(v42 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  v44 = *(void **)(v42 - 232);
  if (v44)
  {
    *(_QWORD *)(v42 - 224) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void sub_223ADA5CC(uint64_t a1, unsigned __int32 a2, int *a3, unsigned __int32 a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  BOOL v28;
  int v29;
  int v30;
  BOOL v31;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int16 *v40;
  BOOL v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  const char *v47;
  unsigned __int8 v48;
  const char *v49;
  size_t v50;
  _BYTE *v51;
  uint64_t v52;
  size_t v53;
  void **v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  os_log_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  __int32 v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  int32x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  const char *__src;
  unint64_t __srca;
  int v119;
  __int32 v120;
  unint64_t v121;
  unint64_t v122;
  size_t v123;
  int v124;
  char *v125;
  char *v126;
  int32x2_t *v127;
  unsigned __int32 v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[3];
  int v135;
  const char *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  void *v147[2];
  char v148;
  char v149;
  uint64_t v150;
  os_log_t v151;
  _BYTE v152[32];
  void *v153[2];
  unint64_t v154;
  char v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)a1 + 8) = **(_QWORD **)a1;
  if (a5)
    v9 = sub_223AD5A88(v8, a4);
  else
    v9 = sub_223ADF0C8(v8, a4);
  v127 = (int32x2_t *)v9;
  v131 = (uint64_t *)(v8 + 208);
  v10 = sub_2239942A0((_QWORD *)(v8 + 208), a3);
  v11 = (char *)v10 + 28;
  v132 = v8 + 252;
  v133 = v8;
  if (!v10)
    v11 = (char *)(v8 + 252);
  if (v11[72]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 449, (uint64_t)"!VoxelAt(start_pos).visited", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v130 = a4;
  sub_223AE4AD8(*(_QWORD **)(a1 + 16), v127, a3, a4, 13, a2);
  v12 = (uint64_t *)(*(_QWORD *)a1 + 8);
  v13 = *v12;
  if (**(_QWORD **)a1 == *v12)
    return;
  while (2)
  {
    v15 = *(_QWORD *)(v13 - 12);
    v14 = v13 - 12;
    v145 = v15;
    v146 = *(_DWORD *)(v14 + 8);
    *v12 = v14;
    v16 = sub_2239942A0(v131, (int *)&v145);
    v17 = (char *)v16 + 28;
    if (!v16)
      v17 = (char *)v132;
    v125 = v17 + 36;
    v126 = v17 + 44;
    v18 = &byte_224660A0C;
    do
    {
      v19 = (int *)((char *)&unk_224660A10 + 12 * *v18);
      v21 = *v19;
      v20 = v19[1];
      v22 = v19[2];
      v23 = (int)v145 + v21;
      v24 = SHIDWORD(v145) + v20;
      v142 = v145 + v21;
      v143 = HIDWORD(v145) + v20;
      v25 = v146 + v22;
      v144 = v146 + v22;
      v26 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v26 + 8)
        || ((v27 = *(_DWORD **)v26, *v27 <= v142) ? (v28 = v27[2] < v142) : (v28 = 1),
            !v28 && ((v29 = v27[1], v30 = v27[3], v29 <= v143) ? (v31 = v30 < v143) : (v31 = 1), !v31)))
      {
        v32 = *(int8x8_t *)(v133 + 216);
        if (v32)
        {
          v33 = (19349669 * v24) ^ (73856093 * v23) ^ (83492791 * v25);
          v34 = (uint8x8_t)vcnt_s8(v32);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            v35 = (19349669 * v24) ^ (73856093 * v23) ^ (83492791 * v25);
            if (v33 >= *(_QWORD *)&v32)
              v35 = v33 % *(_QWORD *)&v32;
          }
          else
          {
            v35 = (*(_QWORD *)&v32 - 1) & v33;
          }
          v36 = *(uint64_t **)(*v131 + 8 * v35);
          if (v36)
          {
            v36 = (uint64_t *)*v36;
            if (v36)
            {
              if (v34.u32[0] < 2uLL)
              {
                v37 = *(_QWORD *)&v32 - 1;
                while (1)
                {
                  v39 = v36[1];
                  if (v33 == v39)
                  {
                    if (*((_DWORD *)v36 + 4) == (_DWORD)v23 && *(uint64_t *)((char *)v36 + 20) == __PAIR64__(v25, v24))
                      goto LABEL_49;
                  }
                  else if ((v39 & v37) != v35)
                  {
                    goto LABEL_48;
                  }
                  v36 = (uint64_t *)*v36;
                  if (!v36)
                    goto LABEL_49;
                }
              }
              do
              {
                v38 = v36[1];
                if (v33 == v38)
                {
                  if (*((_DWORD *)v36 + 4) == (_DWORD)v23 && *(uint64_t *)((char *)v36 + 20) == __PAIR64__(v25, v24))
                    break;
                }
                else
                {
                  if (v38 >= *(_QWORD *)&v32)
                    v38 %= *(_QWORD *)&v32;
                  if (v38 != v35)
                    goto LABEL_48;
                }
                v36 = (uint64_t *)*v36;
              }
              while (v36);
            }
          }
        }
        else
        {
LABEL_48:
          v36 = 0;
        }
LABEL_49:
        v40 = v36 ? (__int16 *)((char *)v36 + 28) : (__int16 *)v132;
        v41 = v40[1] + *v40 + *((_DWORD *)v40 + 2) + (unsigned __int16)v40[3] >= 1 && *((_BYTE *)v40 + 72) == 0;
        if (v41)
        {
          v42 = *((_DWORD *)v40 + 12);
          if (v42 == -1)
          {
LABEL_157:
            v99 = *((unsigned __int8 *)v40 + a2 + 44);
            if (v99 == (-3 * v20 - 9 * v21 - v22 + 13))
            {
              sub_223AE4AD8(*(_QWORD **)(a1 + 16), v127, &v142, v130, v99, a2);
            }
            else if (a2 == 1 && *((unsigned __int8 *)v40 + 44) == (-3 * v20 - 9 * v21 - v22 + 13))
            {
              sub_223AE4AD8(*(_QWORD **)(a1 + 16), v127, &v142, v130, -3 * v20 - 9 * v21 - v22 + 13, 1);
            }
            else if (v99 == 13 && v126[a2] == 13
                   || *(float *)&v40[2 * a2 + 18] <= 0.0 && *(float *)&v125[4 * a2] <= 0.0)
            {
              sub_223AE4AD8(*(_QWORD **)(a1 + 16), v127, &v142, v130, 13, a2);
            }
            goto LABEL_15;
          }
          v43 = v42 == v130 || a5 == 0;
          if (v43 || *((_BYTE *)v40 + a2 + 44) != 13 || v126[a2] != 13)
            goto LABEL_15;
          sub_223AD515C(&v141);
          if (**(int **)(v141 + 56) > 3
            || (v124 = *(unsigned __int8 *)(v141 + 72),
                v44 = sub_22322F254(v141, "OSLogSurrogateAppender", 1, 0),
                ((v44 == 0) & ~(v124 != 0)) != 0))
          {
LABEL_151:
            v95 = sub_223AD5A88(v133, v130);
            v96 = (int32x2_t *)sub_223AD5A88(v133, v42);
            if (!*(_BYTE *)v95
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 741, (uint64_t)"merge_to.IsValid()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            if (!v96->i8[0]
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 742, (uint64_t)"merge_from.IsValid()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v97 = v96[2].i32[0];
            v98 = v96[1].i32[0];
            if ((_DWORD)v98 != (_DWORD)v97 + 1)
            {
              do
              {
                v100 = v96[1].i32[1];
                v101 = v96->i32[1];
                if ((_DWORD)v101 != (_DWORD)v100 + 1)
                {
                  v102 = *(_QWORD *)(v133 + 216);
                  if (v102)
                  {
                    v103 = 19349669 * v98;
                    v104 = v102 - 1;
                    v105 = *v131;
                    if ((v102 & (v102 - 1)) != 0)
                    {
                      do
                      {
                        v109 = (73856093 * v101) ^ v103;
                        v110 = v109;
                        if (v109 >= v102)
                          v110 = v109 % v102;
                        v111 = *(uint64_t **)(v105 + 8 * v110);
                        if (v111)
                        {
                          while (1)
                          {
                            v111 = (uint64_t *)*v111;
                            if (!v111)
                              break;
                            v112 = v111[1];
                            if (v112 == v109)
                            {
                              if (*((_DWORD *)v111 + 4) == (_DWORD)v101
                                && *((_DWORD *)v111 + 5) == (_DWORD)v98
                                && !*((_DWORD *)v111 + 6))
                              {
                                if (*((_DWORD *)v111 + 19) == v42)
                                  *((_DWORD *)v111 + 19) = v130;
                                break;
                              }
                            }
                            else
                            {
                              if (v112 >= v102)
                                v112 %= v102;
                              if (v112 != v110)
                                break;
                            }
                          }
                        }
                        v41 = v101++ == v100;
                      }
                      while (!v41);
                    }
                    else
                    {
                      do
                      {
                        v106 = (73856093 * v101) ^ v103;
                        v107 = *(uint64_t **)(v105 + 8 * (v106 & v104));
                        if (v107)
                        {
                          while (1)
                          {
                            v107 = (uint64_t *)*v107;
                            if (!v107)
                              break;
                            v108 = v107[1];
                            if (v108 == v106)
                            {
                              if (*((_DWORD *)v107 + 4) == (_DWORD)v101
                                && *((_DWORD *)v107 + 5) == (_DWORD)v98
                                && !*((_DWORD *)v107 + 6))
                              {
                                if (*((_DWORD *)v107 + 19) == v42)
                                  *((_DWORD *)v107 + 19) = v130;
                                break;
                              }
                            }
                            else if ((v108 & v104) != (v106 & v104))
                            {
                              break;
                            }
                          }
                        }
                        v41 = v101++ == v100;
                      }
                      while (!v41);
                    }
                  }
                }
                v41 = v98++ == v97;
              }
              while (!v41);
            }
            sub_223ACBDE8((uint64_t)v95, v96);
            ++**(_DWORD **)(a1 + 32);
            goto LABEL_157;
          }
          v121 = v44;
          v134[0] = &v141;
          v134[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v134[2] = std::chrono::system_clock::now().__d_.__rep_;
          v135 = 3;
          v136 = "unknown file";
          v137 = 488;
          v138 = "unknown function";
          v139 = 0;
          v140 = 0;
          v120 = v127[2].i32[1];
          v45 = sub_223AD5A88(v133, v42);
          v46 = *(_QWORD *)v134[0];
          if (*(char *)(*(_QWORD *)v134[0] + 39) < 0)
          {
            v47 = *(const char **)(v46 + 16);
            v122 = *(_QWORD *)(v46 + 24);
          }
          else
          {
            v122 = *(unsigned __int8 *)(*(_QWORD *)v134[0] + 39);
            v47 = (const char *)(*(_QWORD *)v134[0] + 16);
          }
          v114 = *(_QWORD *)v134[0] + 16;
          v115 = *(_QWORD *)v134[0];
          v119 = *((_DWORD *)v45 + 5);
          v48 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v147);
            sub_223199C58("com.apple.cv3d", (unint64_t)v147, byte_255788F40);
            if (v149 && v148 < 0)
              operator delete(v147[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F40[23] >= 0)
            v49 = byte_255788F40;
          else
            v49 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v50 = byte_255788F40[23];
          else
            v50 = *(_QWORD *)&byte_255788F40[8];
          __src = v49;
          v151 = os_log_create(v49, v47);
          if (v50 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v116 = v47;
          if (v50 >= 0x17)
          {
            v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17)
              v52 = v50 | 7;
            v113 = v52 + 1;
            v51 = operator new(v52 + 1);
            *(_QWORD *)&v152[8] = v50;
            *(_QWORD *)&v152[16] = v113 | 0x8000000000000000;
            *(_QWORD *)v152 = v51;
          }
          else
          {
            v152[23] = v50;
            v51 = v152;
            if (!v50)
            {
LABEL_84:
              v51[v50] = 0;
              v152[24] = 1;
              v53 = v122;
              if (v122 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v122 >= 0x17)
              {
                v57 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v122 | 7) != 0x17)
                  v57 = v122 | 7;
                __srca = v57 + 1;
                v54 = (void **)operator new(v57 + 1);
                v153[1] = (void *)v122;
                v154 = __srca | 0x8000000000000000;
                v153[0] = v54;
                v53 = v122;
                v55 = v121;
              }
              else
              {
                HIBYTE(v154) = v122;
                v54 = v153;
                v55 = v121;
                if (!v122)
                {
                  LOBYTE(v153[0]) = 0;
                  v155 = 1;
                  v56 = v151;
                  if ((SHIBYTE(v154) & 0x80000000) == 0)
                    goto LABEL_88;
                  goto LABEL_94;
                }
              }
              memmove(v54, v116, v53);
              *((_BYTE *)v54 + v122) = 0;
              v155 = 1;
              v56 = v151;
              if ((SHIBYTE(v154) & 0x80000000) == 0)
              {
LABEL_88:
                if (!v152[24])
                  goto LABEL_97;
                goto LABEL_95;
              }
LABEL_94:
              operator delete(v153[0]);
              if (!v152[24])
              {
LABEL_97:
                if (v151)
                  os_release(v151);
                if (v55 && *(_QWORD *)(v55 + 24))
                {
                  v123 = _os_log_pack_size();
                  v58 = operator new(v123, (std::align_val_t)8uLL);
                  v59 = (std::__shared_weak_count *)operator new();
                  v60 = v59;
                  v59->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v59->__shared_owners_;
                  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v59->__shared_weak_owners_ = 0;
                  v59[1].__vftable = (std::__shared_weak_count_vtbl *)v58;
                  v151 = v58;
                  *(_QWORD *)v152 = v58;
                  *(_QWORD *)&v152[8] = v59;
                  do
                    v62 = __ldxr(p_shared_owners);
                  while (__stxr(v62 + 1, p_shared_owners));
                  *(_QWORD *)&v152[16] = 0;
                  *(_QWORD *)&v152[24] = 0;
                  v153[0] = 0;
                  do
                    v63 = __ldaxr(p_shared_owners);
                  while (__stlxr(v63 - 1, p_shared_owners));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                  v64 = v151;
                  v65 = _os_log_pack_fill();
                  *(_DWORD *)v65 = 67109888;
                  *(_DWORD *)(v65 + 4) = v130;
                  *(_WORD *)(v65 + 8) = 1024;
                  *(_DWORD *)(v65 + 10) = v120;
                  *(_WORD *)(v65 + 14) = 1024;
                  *(_DWORD *)(v65 + 16) = v42;
                  *(_WORD *)(v65 + 20) = 1024;
                  *(_DWORD *)(v65 + 22) = v119;
                  v66 = (char *)operator new();
                  v67 = *(unsigned __int8 *)(v115 + 39);
                  v68 = v114;
                  if ((v67 & 0x80u) != 0)
                  {
                    v68 = *(_QWORD *)(v115 + 16);
                    v67 = *(_QWORD *)(v115 + 24);
                  }
                  *(_QWORD *)v66 = v64;
                  *(_OWORD *)(v66 + 8) = *(_OWORD *)v152;
                  *(_QWORD *)v152 = 0;
                  *(_QWORD *)&v152[8] = 0;
                  *(_OWORD *)(v66 + 24) = *(_OWORD *)&v152[16];
                  *(_QWORD *)&v152[16] = 0;
                  *(_QWORD *)&v152[24] = 0;
                  *((_QWORD *)v66 + 5) = v68;
                  *((_QWORD *)v66 + 6) = v67;
                  v66[56] = 1;
                  v150 = 0;
                  v147[0] = v66;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v121 + 24) + 40))(*(_QWORD *)(v121 + 24), v147);
                  v69 = v147[0];
                  v147[0] = 0;
                  if (v69)
                  {
                    v70 = (std::__shared_weak_count *)*((_QWORD *)v69 + 4);
                    if (v70)
                    {
                      v71 = (unint64_t *)&v70->__shared_owners_;
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                    v73 = (std::__shared_weak_count *)*((_QWORD *)v69 + 2);
                    if (v73)
                    {
                      v74 = (unint64_t *)&v73->__shared_owners_;
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 - 1, v74));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                        std::__shared_weak_count::__release_weak(v73);
                      }
                    }
                    MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
                    v76 = v150;
                    v150 = 0;
                    if (v76)
                    {
                      v77 = *(std::__shared_weak_count **)(v76 + 32);
                      if (v77)
                      {
                        v78 = (unint64_t *)&v77->__shared_owners_;
                        do
                          v79 = __ldaxr(v78);
                        while (__stlxr(v79 - 1, v78));
                        if (!v79)
                        {
                          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                          std::__shared_weak_count::__release_weak(v77);
                        }
                      }
                      v80 = *(std::__shared_weak_count **)(v76 + 16);
                      if (v80)
                      {
                        v81 = (unint64_t *)&v80->__shared_owners_;
                        do
                          v82 = __ldaxr(v81);
                        while (__stlxr(v82 - 1, v81));
                        if (!v82)
                        {
                          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                          std::__shared_weak_count::__release_weak(v80);
                        }
                      }
                      MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
                    }
                  }
                  v83 = *(std::__shared_weak_count **)&v152[24];
                  if (*(_QWORD *)&v152[24])
                  {
                    v84 = (unint64_t *)(*(_QWORD *)&v152[24] + 8);
                    do
                      v85 = __ldaxr(v84);
                    while (__stlxr(v85 - 1, v84));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                  }
                  v86 = *(std::__shared_weak_count **)&v152[8];
                  if (*(_QWORD *)&v152[8])
                  {
                    v87 = (unint64_t *)(*(_QWORD *)&v152[8] + 8);
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
                  v151 = (os_log_t)__PAIR64__(v130, 67109888);
                  *(_WORD *)v152 = 1024;
                  *(_DWORD *)&v152[2] = v120;
                  *(_WORD *)&v152[6] = 1024;
                  *(_DWORD *)&v152[8] = v42;
                  *(_WORD *)&v152[12] = 1024;
                  *(_DWORD *)&v152[14] = v119;
                  v89 = (void *)_os_log_send_and_compose_impl();
                  if (v89)
                    free(v89);
                }
                if (v124)
                {
                  v90 = v127[2].i32[1];
                  v91 = sub_223AD5A88(v133, v42);
                  sub_22322C138((uint64_t)v134, "Merging areas at incremental boundary %i (%i) %i (%i)", v130, v90, v42, *((_DWORD *)v91 + 5));
                  sub_223182C08((uint64_t)v134);
                }
                sub_223182C08((uint64_t)v134);
                v92 = v140;
                if (v140)
                {
                  v93 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                goto LABEL_151;
              }
LABEL_95:
              if ((v152[23] & 0x80000000) != 0)
                operator delete(*(void **)v152);
              goto LABEL_97;
            }
          }
          memmove(v51, __src, v50);
          goto LABEL_84;
        }
      }
LABEL_15:
      ++v18;
    }
    while (v18 != (char *)&unk_224660A10);
    v12 = (uint64_t *)(*(_QWORD *)a1 + 8);
    v13 = *v12;
    if (**(_QWORD **)a1 != *v12)
      continue;
    break;
  }
}

void sub_223ADB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(_BYTE *)(v36 - 192))
  {
    if (*(char *)(v36 - 193) < 0)
      operator delete(*(void **)(v36 - 216));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223ADB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  sub_22319A054((uint64_t *)(v36 - 216));
  sub_22319A054((uint64_t *)(v36 - 184));
  sub_223199DE8(v36 - 176);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223ADB4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  sub_223199DE8(v36 - 176);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223ADB50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  MEMORY[0x227684CE8](v36, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223ADB538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  void *v38;

  if (*(char *)(v36 - 145) < 0)
    operator delete(*(void **)(v36 - 168));
  v38 = *(void **)(v36 - 176);
  if (v38)
    os_release(v38);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223ADB5D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  const char *v39;
  size_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  NSObject *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  NSObject *v60;
  objc_class *v61;
  objc_class *v62;
  os_log_t v63;
  std::__shared_weak_count *isa;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  const char *v74;
  uint64_t v75;
  int v77;
  unint64_t v78;
  _QWORD v79[3];
  int v80;
  const char *v81;
  int v82;
  const char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  os_log_t v91;
  void **v92;
  __int128 v93;
  char v94;
  void *v95[2];
  unint64_t v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 176);
  if (v1)
  {
    v2 = a1;
    v3 = 150 / (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 4));
    v4 = *(uint64_t **)(a1 + 176);
    do
    {
      if (*((_BYTE *)v4 + 24))
      {
        v5 = *((_DWORD *)v4 + 74) + *((_DWORD *)v4 + 73);
        if (*((_DWORD *)v4 + 72) > v5 && v5 < v3)
          *((_BYTE *)v4 + 24) = 0;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    do
    {
      if (!*((_BYTE *)v1 + 24) || *((int *)v1 + 114) < 513 || *((int *)v1 + 115) < 513)
        goto LABEL_12;
      v7 = 0;
      v8 = *((_DWORD *)v1 + 4);
      v87 = 0;
      v9 = *((int *)v1 + 10);
      v10 = *((int *)v1 + 8);
      if ((_DWORD)v10 == (_DWORD)v9 + 1)
        goto LABEL_40;
      v11 = *((int *)v1 + 9);
      v12 = *((int *)v1 + 7);
      if ((_DWORD)v12 == (_DWORD)v11 + 1 || (v13 = *(_QWORD *)(v2 + 216)) == 0)
      {
        v7 = 0;
        goto LABEL_40;
      }
      v14 = v13 - 1;
      v15 = *(_QWORD *)(v2 + 208);
      if ((v13 & (v13 - 1)) == 0)
      {
        v7 = 0;
        while (1)
        {
          v17 = v12;
          do
          {
            v19 = (73856093 * v17) ^ (19349669 * v10);
            v20 = *(uint64_t **)(v15 + 8 * (v19 & v14));
            if (v20)
            {
              do
              {
                while (1)
                {
                  v20 = (uint64_t *)*v20;
                  if (!v20)
                    goto LABEL_26;
                  v21 = v20[1];
                  if (v21 == v19)
                    break;
                  if ((v21 & v14) != (v19 & v14))
                    goto LABEL_26;
                }
              }
              while (*((_DWORD *)v20 + 4) != (_DWORD)v17 || *((_DWORD *)v20 + 5) != (_DWORD)v10 || *((_DWORD *)v20 + 6));
              if (*((_DWORD *)v20 + 19) == v8)
              {
                v23 = *((_DWORD *)v20 + 10);
                v22 = *((_DWORD *)v20 + 11);
                if (v23 <= v22)
                {
                  if (v23 < v22)
                  {
                    v18 = &v87;
LABEL_24:
                    ++*(_DWORD *)v18;
                  }
                  ++v7;
                  goto LABEL_26;
                }
                v18 = (uint64_t *)((char *)&v87 + 4);
                goto LABEL_24;
              }
            }
LABEL_26:
            v16 = v17++ == v11;
          }
          while (!v16);
          v16 = v10++ == v9;
          if (v16)
            goto LABEL_40;
        }
      }
      v7 = 0;
      while (2)
      {
        v30 = v12;
        do
        {
          v32 = (73856093 * v30) ^ (19349669 * v10);
          v33 = v32;
          if (v32 >= v13)
            v33 = v32 % v13;
          v34 = *(uint64_t **)(v15 + 8 * v33);
          if (v34)
          {
            do
            {
              while (1)
              {
                v34 = (uint64_t *)*v34;
                if (!v34)
                  goto LABEL_53;
                v35 = v34[1];
                if (v35 == v32)
                  break;
                if (v35 >= v13)
                  v35 %= v13;
                if (v35 != v33)
                  goto LABEL_53;
              }
            }
            while (*((_DWORD *)v34 + 4) != (_DWORD)v30 || *((_DWORD *)v34 + 5) != (_DWORD)v10 || *((_DWORD *)v34 + 6));
            if (*((_DWORD *)v34 + 19) == v8)
            {
              v36 = *((_DWORD *)v34 + 10);
              v37 = *((_DWORD *)v34 + 11);
              if (v36 <= v37)
              {
                if (v36 < v37)
                {
                  v31 = &v87;
LABEL_51:
                  ++*(_DWORD *)v31;
                }
                ++v7;
                goto LABEL_53;
              }
              v31 = (uint64_t *)((char *)&v87 + 4);
              goto LABEL_51;
            }
          }
LABEL_53:
          v16 = v30++ == v11;
        }
        while (!v16);
        v16 = v10++ == v9;
        if (!v16)
          continue;
        break;
      }
LABEL_40:
      if (HIDWORD(v87) < 0x101)
        goto LABEL_12;
      if (v87 < 0x101)
        goto LABEL_12;
      *((_BYTE *)v1 + 464) = 1;
      sub_223AD515C(&v86);
      if (**(int **)(v86 + 56) > 3)
        goto LABEL_12;
      v24 = *(unsigned __int8 *)(v86 + 72);
      v25 = *(_BYTE *)(v86 + 72) != 0;
      v78 = sub_22322F254(v86, "OSLogSurrogateAppender", 1, 0);
      if (((v78 == 0) & ~v25) != 0)
        goto LABEL_12;
      v77 = v24;
      v79[0] = &v86;
      v79[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v79[2] = std::chrono::system_clock::now().__d_.__rep_;
      v80 = 3;
      v81 = "unknown file";
      v82 = 716;
      v83 = "unknown function";
      v84 = 0;
      v85 = 0;
      v26 = *(_QWORD *)v79[0];
      v27 = (const char *)(*(_QWORD *)v79[0] + 16);
      v74 = v27;
      if (*(char *)(*(_QWORD *)v79[0] + 39) < 0)
      {
        v27 = *(const char **)(v26 + 16);
        v28 = *(_QWORD *)(v26 + 24);
        v75 = *(_QWORD *)v79[0];
        v38 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v38 & 1) == 0)
        {
LABEL_131:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v88);
            if (v90)
            {
              *(_OWORD *)byte_255788F40 = v88;
              *(_QWORD *)&byte_255788F40[16] = v89;
            }
            else
            {
              byte_255788F40[23] = 14;
              strcpy(byte_255788F40, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v28 = *(unsigned __int8 *)(*(_QWORD *)v79[0] + 39);
        v75 = *(_QWORD *)v79[0];
        v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v29 & 1) == 0)
          goto LABEL_131;
      }
      if (byte_255788F40[23] >= 0)
        v39 = byte_255788F40;
      else
        v39 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v40 = byte_255788F40[23];
      else
        v40 = *(_QWORD *)&byte_255788F40[8];
      v91 = os_log_create(v39, v27);
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v40 >= 0x17)
      {
        v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v40 | 7) != 0x17)
          v42 = v40 | 7;
        v43 = v42 + 1;
        v41 = (void **)operator new(v42 + 1);
        *(_QWORD *)&v93 = v40;
        *((_QWORD *)&v93 + 1) = v43 | 0x8000000000000000;
        v92 = v41;
LABEL_85:
        memmove(v41, v39, v40);
        goto LABEL_86;
      }
      HIBYTE(v93) = v40;
      v41 = (void **)&v92;
      if (v40)
        goto LABEL_85;
LABEL_86:
      *((_BYTE *)v41 + v40) = 0;
      v94 = 1;
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v28 >= 0x17)
      {
        v48 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v48 = v28 | 7;
        v49 = v48 + 1;
        v44 = (void **)operator new(v48 + 1);
        v95[1] = (void *)v28;
        v96 = v49 | 0x8000000000000000;
        v95[0] = v44;
      }
      else
      {
        HIBYTE(v96) = v28;
        v44 = v95;
        if (!v28)
        {
          LOBYTE(v95[0]) = 0;
          v97 = 1;
          v45 = v91;
          if ((SHIBYTE(v96) & 0x80000000) == 0)
            goto LABEL_90;
LABEL_96:
          operator delete(v95[0]);
          v46 = v77;
          v47 = v78;
          if (v94)
            goto LABEL_97;
          goto LABEL_99;
        }
      }
      memmove(v44, v27, v28);
      *((_BYTE *)v44 + v28) = 0;
      v97 = 1;
      v45 = v91;
      if (SHIBYTE(v96) < 0)
        goto LABEL_96;
LABEL_90:
      v46 = v77;
      v47 = v78;
      if (v94)
      {
LABEL_97:
        if (SHIBYTE(v93) < 0)
          operator delete(v92);
      }
LABEL_99:
      if (v91)
        os_release(v91);
      if (v47 && *(_QWORD *)(v47 + 24))
      {
        v50 = _os_log_pack_size();
        v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
        v52 = (std::__shared_weak_count *)operator new();
        v53 = v52;
        v52->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v52->__shared_weak_owners_ = 0;
        v52[1].__vftable = v51;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v53);
        }
        v57 = _os_log_pack_fill();
        v59 = v87;
        v58 = HIDWORD(v87);
        *(_DWORD *)v57 = 67109888;
        *(_DWORD *)(v57 + 4) = v8;
        *(_WORD *)(v57 + 8) = 1024;
        *(_DWORD *)(v57 + 10) = v58;
        *(_WORD *)(v57 + 14) = 1024;
        *(_DWORD *)(v57 + 16) = v59;
        *(_WORD *)(v57 + 20) = 1024;
        *(_DWORD *)(v57 + 22) = v7;
        v60 = operator new();
        v61 = (objc_class *)*(unsigned __int8 *)(v75 + 39);
        v62 = (objc_class *)v74;
        if ((char)v61 < 0)
        {
          v62 = *(objc_class **)(v75 + 16);
          v61 = *(objc_class **)(v75 + 24);
        }
        v60->isa = (Class)v51;
        v60[1].isa = (Class)v51;
        v60[2].isa = (Class)v53;
        v60[3].isa = 0;
        v60[4].isa = 0;
        v60[5].isa = v62;
        v60[6].isa = v61;
        LOBYTE(v60[7].isa) = 1;
        v91 = v60;
        (*(void (**)(_QWORD, os_log_t *))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), &v91);
        v63 = v91;
        v91 = 0;
        v46 = v77;
        if (v63)
        {
          isa = (std::__shared_weak_count *)v63[4].isa;
          if (isa)
          {
            v65 = (unint64_t *)&isa->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
              std::__shared_weak_count::__release_weak(isa);
            }
          }
          v67 = (std::__shared_weak_count *)v63[2].isa;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
        }
      }
      else
      {
        os_log_type_enabled(v45, OS_LOG_TYPE_INFO);
        v91 = (os_log_t)__PAIR64__(v8, 67109888);
        LOWORD(v92) = 1024;
        *(_DWORD *)((char *)&v92 + 2) = HIDWORD(v87);
        HIWORD(v92) = 1024;
        LODWORD(v93) = v87;
        WORD2(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 6) = v7;
        v70 = (void *)_os_log_send_and_compose_impl();
        if (v70)
          free(v70);
      }
      v2 = a1;
      if (v46)
      {
        sub_22322C138((uint64_t)v79, "Marking area %u as contested (%u indoor, %u outdoor dominated voxels out of %u total voxels)", v8, HIDWORD(v87), v87, v7);
        sub_223182C08((uint64_t)v79);
      }
      sub_223182C08((uint64_t)v79);
      v71 = v85;
      if (v85)
      {
        v72 = (unint64_t *)&v85->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
LABEL_12:
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
}

void sub_223ADBF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a22);
  v31 = a30;
  if (a30)
  {
    p_shared_owners = (unint64_t *)&a30->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_223ADC0E4(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (*((_DWORD *)v6 + 4) == a2)
                return v6 + 3;
            }
            else if ((v9 & v7) != v4)
            {
              goto LABEL_21;
            }
            v6 = (uint64_t *)*v6;
            if (!v6)
              goto LABEL_21;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (*((_DWORD *)v6 + 4) == a2)
              return v6 + 3;
          }
          else
          {
            if (v8 >= v2)
              v8 %= v2;
            if (v8 != v4)
              break;
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
LABEL_21:
  v10 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 2045, (uint64_t)"it != area_infos_.end()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  v6 = 0;
  if (v10)
    abort();
  return v6 + 3;
}

void sub_223ADC204(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t *v15;
  char *v16;
  float v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  int v33;
  int v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;
  uint64_t *v38;
  int8x8_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t j;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t k;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  int v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t m;
  unsigned __int8 v66;
  uint8x8_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int32x2_t *v117;
  unsigned int v118;
  uint64_t v119;
  int32x2_t *v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int32 v126;
  int v127;
  int v128;
  int v129;
  unsigned __int32 v130;
  BOOL v131;
  __int32 v132;
  __int32 v133;
  int *v134;
  int *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  size_t v139;
  void **v140;
  int *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  const void **v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int v151;
  int32x2_t v152;
  int32x2_t v153;
  uint64_t v154;
  char *v155;
  int8x8_t v156;
  int32x2_t *v157;
  int32x2_t v158;
  uint64_t v159;
  unint64_t v160;
  uint8x8_t v161;
  uint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned __int32 v174;
  int v175;
  int v176;
  int v177;
  unsigned __int32 v178;
  __int32 v179;
  __int32 v180;
  int32x2_t v181;
  int *v182;
  int *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  int v191;
  const void *v192;
  uint64_t v193;
  uint64_t v194;
  void **v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  unsigned __int8 v199;
  const char *v200;
  size_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  size_t v205;
  uint64_t v206;
  void **v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  size_t v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  size_t v216;
  size_t v217;
  _QWORD *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  char v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *p_shared_owners;
  unint64_t v228;
  void *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  _QWORD *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  const char *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int8x8_t v273;
  uint64_t *v274;
  char *v275;
  uint64_t v276;
  int *v277;
  int v278;
  int v279;
  int v280;
  unint64_t v281;
  uint8x8_t v282;
  uint64_t v283;
  uint64_t **v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  _DWORD *v288;
  int v289;
  int v290;
  int v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  unint64_t v297;
  __int16 *v298;
  int v299;
  int v300;
  unsigned int v301;
  int v302;
  int v303;
  unsigned int v304;
  _DWORD *v305;
  int v306;
  int v307;
  _DWORD *v308;
  int v309;
  int v310;
  int v311;
  unint64_t v312;
  uint8x8_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  unsigned int __src;
  const char *__srca;
  int32x2_t *v326;
  int v327;
  int8x8_t *v328;
  uint64_t *v329;
  int __s;
  char *__sa;
  char *v332;
  int v333;
  uint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD v338[3];
  int v339;
  const char *v340;
  int v341;
  const char *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  void *__dst[2];
  int64_t v346;
  uint64_t v347;
  int v348;
  _QWORD v349[3];
  _QWORD v350[3];
  uint64_t v351;
  unint64_t v352;
  void *__p;
  char v354;
  unint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  int v359[3];
  void *v360;
  int *v361;
  int *v362;
  __int128 v363;
  std::__shared_weak_count *v364;
  char *v365;
  std::__shared_weak_count *v366;
  _QWORD *v367;
  __int128 v368;
  _BYTE v369[24];
  __int128 v370;
  void *v371[2];
  unint64_t v372;
  char v373;
  _QWORD v374[5];

  v1 = a1;
  v374[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 224);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 224);
    do
    {
      *((_BYTE *)v3 + 92) = 0;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  v4 = *(_QWORD **)(a1 + 176);
  if (v4)
  {
    do
    {
      v4[39] = v4[38];
      if (v4[44])
      {
        v5 = (_QWORD *)v4[43];
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v4[43] = 0;
        v7 = v4[42];
        if (v7)
        {
          for (i = 0; i != v7; ++i)
            *(_QWORD *)(v4[41] + 8 * i) = 0;
        }
        v4[44] = 0;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v2 = *(uint64_t **)(v1 + 224);
  }
  v328 = (int8x8_t *)v1;
  v329 = (uint64_t *)(v1 + 208);
  v361 = 0;
  v360 = 0;
  v362 = 0;
  v9 = 0;
  if (v2)
  {
    v332 = 0;
    v336 = v1 + 252;
    v319 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v320 = *MEMORY[0x24BEDB7F0];
    v318 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v317 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v10 = *((_DWORD *)v2 + 19);
      v11 = v10 != -1 && *((_BYTE *)v2 + 92) == 0;
      if (!v11)
        goto LABEL_19;
      v12 = sub_223AD5A88(v1, *((_DWORD *)v2 + 19));
      if (!*(_BYTE *)v12)
        goto LABEL_19;
      v13 = *((_DWORD *)v2 + 5);
      v333 = *((_DWORD *)v2 + 4);
      v359[0] = v333 - 1;
      v359[1] = v13;
      v14 = *((_DWORD *)v2 + 6);
      v359[2] = v14;
      v15 = sub_2239942A0(v329, v359);
      v16 = (char *)v15 + 28;
      if (!v15)
        v16 = (char *)v336;
      if (*((_DWORD *)v16 + 12) == v10)
        goto LABEL_19;
      v326 = (int32x2_t *)v12;
      v321 = v2;
      v17 = 0.0;
      v18 = 4;
      v19 = v9;
      __s = v10;
LABEL_31:
      v20 = v18;
LABEL_36:
      v18 = v20;
      if (v19 < v332)
      {
        *(_DWORD *)v19 = v333;
        *((_DWORD *)v19 + 1) = v13;
        *(_QWORD *)(v19 + 28) = *(_QWORD *)v19;
        *((_DWORD *)v19 + 2) = v14;
        v19[24] = v20;
        *((_QWORD *)v19 + 5) = 0;
        v19[48] = 0;
        *((_DWORD *)v19 + 13) = -1;
        v23 = (int *)((char *)&unk_224660840 + 12 * v20);
        v24 = *v23;
        v25 = v23[1];
        LODWORD(v23) = v23[2];
        *((_DWORD *)v19 + 3) = v24 + v333;
        *((_DWORD *)v19 + 4) = v13 + v25;
        *((_DWORD *)v19 + 5) = v14 + (_DWORD)v23;
        *((_DWORD *)v19 + 9) = v14;
        HIDWORD(v26) = v20;
        LODWORD(v26) = ((_DWORD)v20 << 24) - 0x4000000;
        v27 = v19 + 32;
        switch((v26 >> 25))
        {
          case 0u:
            goto LABEL_52;
          case 3u:
            goto LABEL_62;
          case 6u:
            ++*((_DWORD *)v19 + 7);
            goto LABEL_52;
          case 9u:
            v27 = v19 + 28;
LABEL_52:
            ++*v27;
            v19 += 56;
            v38 = (uint64_t *)(v19 - 56);
            v37 = *((_DWORD *)v19 - 14);
            v39 = *(int8x8_t *)(v1 + 216);
            if (!*(_QWORD *)&v39)
              goto LABEL_104;
            goto LABEL_80;
          default:
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterArea.cpp", 93, (uint64_t)"false", 5, (uint64_t)&unk_2245A0659, 0, (void (*)(void **))sub_22457406C);
            v40 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v41 = qword_255795648;
              for (j = qword_255795650; v41 != j; v41 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v41)(*(_QWORD *)(v41 + 8), "false", 5, &unk_2245A0659, 0);
            }
            v43 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v10 = __s;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "false", 5, &unk_2245A0659, 0);
LABEL_62:
            v19 += 56;
            v38 = (uint64_t *)(v19 - 56);
            v37 = *((_DWORD *)v19 - 14);
            v39 = *(int8x8_t *)(v1 + 216);
            if (!*(_QWORD *)&v39)
              goto LABEL_104;
            goto LABEL_80;
        }
      }
      v28 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v9) >> 3) + 1;
      if (v28 > 0x492492492492492)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((v332 - v9) >> 3) > v28)
        v28 = 0xDB6DB6DB6DB6DB6ELL * ((v332 - v9) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v332 - v9) >> 3)) >= 0x249249249249249)
        v29 = 0x492492492492492;
      else
        v29 = v28;
      if (v29)
      {
        if (v29 > 0x492492492492492)
          sub_223174E94();
        v30 = (char *)operator new(56 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * ((v19 - v9) >> 3)];
      *(_DWORD *)v31 = v333;
      *((_DWORD *)v31 + 1) = v13;
      v31[24] = v18;
      *(_QWORD *)(v31 + 28) = *(_QWORD *)v31;
      *((_QWORD *)v31 + 5) = 0;
      v31[48] = 0;
      *((_DWORD *)v31 + 13) = -1;
      v32 = (int *)((char *)&unk_224660840 + 12 * v18);
      v33 = *v32;
      v34 = v32[1];
      LODWORD(v32) = v32[2];
      *((_DWORD *)v31 + 2) = v14;
      *((_DWORD *)v31 + 3) = v33 + v333;
      *((_DWORD *)v31 + 4) = v13 + v34;
      *((_DWORD *)v31 + 5) = v14 + (_DWORD)v32;
      *((_DWORD *)v31 + 9) = v14;
      HIDWORD(v35) = v18;
      LODWORD(v35) = ((_DWORD)v18 << 24) - 0x4000000;
      v36 = v31 + 32;
      switch((v35 >> 25))
      {
        case 0u:
          goto LABEL_65;
        case 3u:
          break;
        case 6u:
          ++*((_DWORD *)v31 + 7);
          goto LABEL_65;
        case 9u:
          v36 = v31 + 28;
LABEL_65:
          ++*v36;
          break;
        default:
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterArea.cpp", 93, (uint64_t)"false", 5, (uint64_t)&unk_2245A0659, 0, (void (*)(void **))sub_22457406C);
          v44 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v46 = qword_255795648;
            for (k = qword_255795650; v46 != k; v46 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v46)(*(_QWORD *)(v46 + 8), "false", 5, &unk_2245A0659, 0);
          }
          v47 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "false", 5, &unk_2245A0659, 0);
          break;
      }
      if (v19 == v9)
      {
        v53 = &v30[8 * ((v19 - v9) >> 3)];
        v332 = &v30[56 * v29];
        v19 = v31 + 56;
        if (!v9)
          goto LABEL_79;
      }
      else
      {
        v48 = 0;
        do
        {
          v49 = &v31[v48];
          v50 = *(_QWORD *)&v19[v48 - 56];
          *((_DWORD *)v49 - 12) = *(_DWORD *)&v19[v48 - 48];
          *((_QWORD *)v49 - 7) = v50;
          v51 = *(_QWORD *)&v19[v48 - 44];
          *((_DWORD *)v49 - 9) = *(_DWORD *)&v19[v48 - 36];
          *(_QWORD *)(v49 - 44) = v51;
          *(v49 - 32) = v19[v48 - 32];
          v52 = *(_QWORD *)&v19[v48 - 28];
          *((_DWORD *)v49 - 5) = *(_DWORD *)&v19[v48 - 20];
          *(_QWORD *)(v49 - 28) = v52;
          *((_OWORD *)v49 - 1) = *(_OWORD *)&v19[v48 - 16];
          v48 -= 56;
        }
        while (&v19[v48] != v9);
        v53 = &v31[v48];
        v332 = &v30[56 * v29];
        v19 = v31 + 56;
        if (!v9)
          goto LABEL_79;
      }
      operator delete(v9);
LABEL_79:
      v9 = v53;
      v1 = (uint64_t)v328;
      v10 = __s;
      v38 = (uint64_t *)(v19 - 56);
      v37 = *((_DWORD *)v19 - 14);
      v39 = v328[27];
      if (v39)
      {
LABEL_80:
        v55 = *((_DWORD *)v38 + 1);
        v54 = *((_DWORD *)v38 + 2);
        v56 = (19349669 * v55) ^ (73856093 * v37) ^ (83492791 * v54);
        v57 = (uint8x8_t)vcnt_s8(v39);
        v57.i16[0] = vaddlv_u8(v57);
        if (v57.u32[0] > 1uLL)
        {
          v58 = (19349669 * v55) ^ (73856093 * v37) ^ (83492791 * v54);
          if (v56 >= *(_QWORD *)&v39)
            v58 = v56 % *(_QWORD *)&v39;
        }
        else
        {
          v58 = v56 & (*(_QWORD *)&v39 - 1);
        }
        v59 = *(uint64_t ***)(*v329 + 8 * v58);
        if (v59)
        {
          v60 = *v59;
          if (v60)
          {
            if (v57.u32[0] < 2uLL)
            {
              while (1)
              {
                v62 = v60[1];
                if (v56 == v62)
                {
                  if (*((_DWORD *)v60 + 4) == v37 && *((_DWORD *)v60 + 5) == v55 && *((_DWORD *)v60 + 6) == v54)
                    goto LABEL_112;
                }
                else if ((v62 & (*(_QWORD *)&v39 - 1)) != v58)
                {
                  goto LABEL_104;
                }
                v60 = (uint64_t *)*v60;
                if (!v60)
                  goto LABEL_104;
              }
            }
            do
            {
              v61 = v60[1];
              if (v56 == v61)
              {
                if (*((_DWORD *)v60 + 4) == v37 && *((_DWORD *)v60 + 5) == v55 && *((_DWORD *)v60 + 6) == v54)
                  goto LABEL_112;
              }
              else
              {
                if (v61 >= *(_QWORD *)&v39)
                  v61 %= *(_QWORD *)&v39;
                if (v61 != v58)
                  break;
              }
              v60 = (uint64_t *)*v60;
            }
            while (v60);
          }
        }
      }
LABEL_104:
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1022, (uint64_t)"voxels_.count(boundary_edge.inside_pos) > 0", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v63 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v64 = qword_255795648;
        for (m = qword_255795650; v64 != m; v64 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v64)(*(_QWORD *)(v64 + 8), "voxels_.count(boundary_edge.inside_pos) > 0", 43, "", 0);
      }
      v66 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      v10 = __s;
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "voxels_.count(boundary_edge.inside_pos) > 0", 43, "", 0);
      v37 = *((_DWORD *)v19 - 14);
      v55 = *((_DWORD *)v19 - 13);
      v54 = *((_DWORD *)v19 - 12);
      v39 = *(int8x8_t *)(v1 + 216);
      v56 = (19349669 * v55) ^ (73856093 * v37) ^ (83492791 * v54);
LABEL_112:
      if (!*(_QWORD *)&v39)
        goto LABEL_614;
      v67 = (uint8x8_t)vcnt_s8(v39);
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        v68 = v56;
        if (v56 >= *(_QWORD *)&v39)
          v68 = v56 % *(_QWORD *)&v39;
      }
      else
      {
        v68 = (*(_QWORD *)&v39 - 1) & v56;
      }
      v69 = *v329;
      v70 = *(uint64_t ***)(*v329 + 8 * v68);
      if (!v70 || (v71 = *v70) == 0)
LABEL_614:
        sub_223198218("unordered_map::at: key not found");
      v72 = *(_QWORD *)&v39 - 1;
      if (v67.u32[0] < 2uLL)
      {
        while (1)
        {
          v73 = v71[1];
          if (v73 == v56)
          {
            if (*((_DWORD *)v71 + 4) == v37 && *((_DWORD *)v71 + 5) == v55 && *((_DWORD *)v71 + 6) == v54)
              goto LABEL_127;
          }
          else if ((v73 & v72) != v68)
          {
            goto LABEL_614;
          }
          v71 = (uint64_t *)*v71;
          if (!v71)
            goto LABEL_614;
        }
      }
      while (1)
      {
        v96 = v71[1];
        if (v96 == v56)
          break;
        if (v96 >= *(_QWORD *)&v39)
          v96 %= *(_QWORD *)&v39;
        if (v96 != v68)
          goto LABEL_614;
LABEL_146:
        v71 = (uint64_t *)*v71;
        if (!v71)
          goto LABEL_614;
      }
      if (*((_DWORD *)v71 + 4) != v37 || *((_DWORD *)v71 + 5) != v55 || *((_DWORD *)v71 + 6) != v54)
        goto LABEL_146;
LABEL_127:
      *((_BYTE *)v71 + 92) = 1;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v19 - v9) >> 3)) < 2
        || *(_DWORD *)v9 != v37
        || *((_DWORD *)v9 + 1) != v55
        || *((_DWORD *)v9 + 2) != v54
        || *((_DWORD *)v9 + 3) != *((_DWORD *)v19 - 11)
        || *((_DWORD *)v9 + 4) != *((_DWORD *)v19 - 10)
        || *((_DWORD *)v9 + 5) != *((_DWORD *)v19 - 9))
      {
        v74 = *((_DWORD *)v19 - 11);
        v75 = *((int *)v19 - 10);
        v76 = (int *)((char *)&unk_224660840 + 12 * byte_224660984[byte_224660984[*(v19 - 32)]]);
        v77 = *v76;
        v78 = v76[1];
        v79 = v37 + v74 + 1;
        v80 = v55 + v75 + 1;
        if (v77 + v79 < 0 != __OFADD__(v77, v79))
          v81 = v77 + v79 + 1;
        else
          v81 = v77 + v79;
        v82 = v78 + v80 + (v78 + v80 < 0);
        v83 = v79 - v77;
        v84 = v80 - v78;
        if (v83 >= 0)
          v85 = v83;
        else
          v85 = v83 + 1;
        if (v84 >= 0)
          v86 = v84;
        else
          v86 = v84 + 1;
        v20 = byte_224660B54[byte_224660B54[(-3 * dword_224660A10[3 * v18 + 1]
                                                            - 9 * dword_224660A10[3 * v18]
                                                            - dword_224660A10[3 * v18 + 2]
                                                            + 13)]];
        v87 = &dword_224660A10[3 * v20];
        v88 = *v87;
        v89 = v87[1];
        v90 = v87[2];
        v91 = v74 + v88;
        v92 = v75 + v89;
        v93 = *((int *)v19 - 9) + v90;
        v94 = (19349669 * v92) ^ (73856093 * v91) ^ (83492791 * v93);
        if (v67.u32[0] > 1uLL)
        {
          v95 = (19349669 * v92) ^ (73856093 * v91) ^ (83492791 * v93);
          if (v94 >= *(_QWORD *)&v39)
            v95 = v94 % *(_QWORD *)&v39;
        }
        else
        {
          v95 = v94 & v72;
        }
        v97 = *(uint64_t **)(v69 + 8 * v95);
        if (!v97)
          goto LABEL_178;
        v97 = (uint64_t *)*v97;
        if (!v97)
          goto LABEL_178;
        if (v67.u32[0] < 2uLL)
        {
          while (1)
          {
            v98 = v97[1];
            if (v94 == v98)
            {
              if (*((_DWORD *)v97 + 4) == v91 && *(uint64_t *)((char *)v97 + 20) == __PAIR64__(v93, v92))
                goto LABEL_177;
            }
            else if ((v98 & v72) != v95)
            {
              goto LABEL_176;
            }
            v97 = (uint64_t *)*v97;
            if (!v97)
              goto LABEL_177;
          }
        }
        while (1)
        {
          v99 = v97[1];
          if (v94 == v99)
          {
            if (*((_DWORD *)v97 + 4) == v91 && *(uint64_t *)((char *)v97 + 20) == __PAIR64__(v93, v92))
              goto LABEL_177;
          }
          else
          {
            if (v99 >= *(_QWORD *)&v39)
              v99 %= *(_QWORD *)&v39;
            if (v99 != v95)
            {
LABEL_176:
              v97 = 0;
LABEL_177:
              v10 = __s;
LABEL_178:
              v17 = v17
                  + (float)((float)((float)((float)(v81 >> 1) * (float)(v86 >> 1))
                                  - (float)((float)(v85 >> 1) * (float)(v82 >> 1)))
                          * 0.5);
              v100 = (uint64_t)v97 + 28;
              if (!v97)
                v100 = v336;
              if (*(_DWORD *)(v100 + 48) == v10)
              {
                v101 = v88 + v37;
                v102 = *((int *)v19 - 13) + v89;
                v103 = v54 + v90;
                v104 = (19349669 * v102) ^ (73856093 * v101) ^ (83492791 * (int)v103);
                if (v67.u32[0] > 1uLL)
                {
                  v105 = (19349669 * v102) ^ (73856093 * v101) ^ (83492791 * (int)v103);
                  if (v104 >= *(_QWORD *)&v39)
                    v105 = v104 % *(_QWORD *)&v39;
                }
                else
                {
                  v105 = v104 & v72;
                }
                v106 = *(uint64_t **)(v69 + 8 * v105);
                if (v106)
                {
                  v106 = (uint64_t *)*v106;
                  if (v106)
                  {
                    if (v67.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v107 = v106[1];
                        if (v104 == v107)
                        {
                          if (*((_DWORD *)v106 + 4) == v101
                            && *(uint64_t *)((char *)v106 + 20) == __PAIR64__(v103, v102))
                          {
                            goto LABEL_204;
                          }
                        }
                        else if ((v107 & v72) != v105)
                        {
                          goto LABEL_203;
                        }
                        v106 = (uint64_t *)*v106;
                        if (!v106)
                          goto LABEL_204;
                      }
                    }
                    do
                    {
                      v108 = v106[1];
                      if (v104 == v108)
                      {
                        if (*((_DWORD *)v106 + 4) == v101 && *(uint64_t *)((char *)v106 + 20) == __PAIR64__(v103, v102))
                          break;
                      }
                      else
                      {
                        if (v108 >= *(_QWORD *)&v39)
                          v108 %= *(_QWORD *)&v39;
                        if (v108 != v105)
                        {
LABEL_203:
                          v106 = 0;
                          break;
                        }
                      }
                      v106 = (uint64_t *)*v106;
                    }
                    while (v106);
                  }
                }
LABEL_204:
                v109 = (uint64_t)v106 + 28;
                if (!v106)
                  v109 = v336;
                if (*(_DWORD *)(v109 + 48) == v10)
                {
                  v18 = (247 * v88 + 253 * v89 - v90 + 13);
                  v333 = v91;
                  v13 = v92;
                  v14 = *((_DWORD *)v19 - 9) + v90;
                  goto LABEL_31;
                }
              }
              v110 = v88 + v333;
              v111 = v89 + v13;
              v112 = v90 + v14;
              v113 = (19349669 * ((int)v89 + v13)) ^ (73856093 * (v88 + v333)) ^ (83492791 * ((int)v90 + v14));
              if (v67.u32[0] > 1uLL)
              {
                v114 = (19349669 * v111) ^ (73856093 * v110) ^ (83492791 * v112);
                if (v113 >= *(_QWORD *)&v39)
                  v114 = v113 % *(_QWORD *)&v39;
              }
              else
              {
                v114 = v72 & v113;
              }
              v21 = *(uint64_t **)(v69 + 8 * v114);
              if (v21)
              {
                v21 = (uint64_t *)*v21;
                if (v21)
                {
                  if (v67.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v115 = v21[1];
                      if (v113 == v115)
                      {
                        if (*((_DWORD *)v21 + 4) == v110
                          && *((_DWORD *)v21 + 5) == v111
                          && *((_DWORD *)v21 + 6) == v112)
                        {
                          goto LABEL_33;
                        }
                      }
                      else if ((v115 & v72) != v114)
                      {
                        goto LABEL_32;
                      }
                      v21 = (uint64_t *)*v21;
                      if (!v21)
                        goto LABEL_33;
                    }
                  }
                  do
                  {
                    v116 = v21[1];
                    if (v113 == v116)
                    {
                      if (*((_DWORD *)v21 + 4) == v110 && *((_DWORD *)v21 + 5) == v111 && *((_DWORD *)v21 + 6) == v112)
                        break;
                    }
                    else
                    {
                      if (v116 >= *(_QWORD *)&v39)
                        v116 %= *(_QWORD *)&v39;
                      if (v116 != v114)
                      {
LABEL_32:
                        v21 = 0;
                        break;
                      }
                    }
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
LABEL_33:
              v22 = (uint64_t)v21 + 28;
              if (!v21)
                v22 = v336;
              if (*(_DWORD *)(v22 + 48) == v10)
              {
                v333 += v88;
                v13 += v89;
                v14 = v112;
                goto LABEL_31;
              }
              goto LABEL_36;
            }
          }
          v97 = (uint64_t *)*v97;
          if (!v97)
            goto LABEL_177;
        }
      }
      v9[48] = *(v19 - 8);
      if (v17 < 0.0)
      {
        v2 = v321;
        goto LABEL_19;
      }
      v2 = v321;
      if (v17 > 0.0)
      {
        v117 = v326;
        if (*(_QWORD *)&v326[35] == *(_QWORD *)&v326[36])
        {
          sub_223AE4D54((char **)&v326[35], (uint64_t *)v9, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - v9) >> 3));
        }
        else
        {
          v118 = *(_DWORD *)(v1 + 200);
          *(_DWORD *)(v1 + 200) = v118 + 1;
          __src = v118;
          v334 = sub_223ADF0C8(v1, v118);
          v361 = (int *)v360;
          v119 = *(_QWORD *)v9;
          v348 = *((_DWORD *)v9 + 2);
          v347 = v119;
          v120 = (int32x2_t *)sub_22393835C(v329, (int *)&v347);
          if (!v120)
          {
            v117 = v326;
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1121, (uint64_t)"voxel_it != voxels_.end()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_624;
            }
          }
          v120[9].i32[1] = __src;
          v121 = HIDWORD(v347);
          v122 = v347;
          v123 = *((_DWORD *)v334 + 1);
          v124 = *((_DWORD *)v334 + 2);
          if ((int)v347 < v123)
            v123 = v347;
          v125 = *((_DWORD *)v334 + 4);
          if (*((_DWORD *)v334 + 3) > (int)v347)
            v122 = *((_DWORD *)v334 + 3);
          if (SHIDWORD(v347) < v124)
            v124 = HIDWORD(v347);
          *((_DWORD *)v334 + 1) = v123;
          *((_DWORD *)v334 + 2) = v124;
          if (v125 > v121)
            v121 = v125;
          *((_DWORD *)v334 + 3) = v122;
          *((_DWORD *)v334 + 4) = v121;
          *((_DWORD *)v334 + 66) += v120[10].i32[0];
          *((_DWORD *)v334 + 67) += v120[10].i32[1];
          *((_DWORD *)v334 + 68) += v120[11].i32[0];
          v126 = v120[4].u16[1];
          *((_DWORD *)v334 + 69) += v126;
          ++*((_DWORD *)v334 + 5);
          v334[54] = (uint64_t)vadd_s32((int32x2_t)v334[54], v120[5]);
          v127 = v117[33].i32[0] - v120[10].i32[0];
          v117[33].i32[0] = v127;
          v128 = v117[33].i32[1] - v120[10].i32[1];
          v117[33].i32[1] = v128;
          v129 = v117[34].i32[0] - v120[11].i32[0];
          v117[34].i32[0] = v129;
          if (v127 < 0 || v128 < 0 || v129 < 0)
          {
            v117[33].i32[0] = v120[10].i32[0] & ~(v120[10].i32[0] >> 31);
            v117[33].i32[1] = v120[10].i32[1] & ~(v120[10].i32[1] >> 31);
            v117[34].i32[0] = v120[11].i32[0] & ~(v120[11].i32[0] >> 31);
          }
          v130 = v117[34].u32[1];
          v131 = v130 >= v126;
          v132 = v130 - v126;
          if (!v131)
            v132 = 0;
          v117[34].i32[1] = v132;
          v133 = v117[2].i32[1];
          if (v133)
            v117[2].i32[1] = v133 - 1;
          v117[54] = (int32x2_t)vbic_s8((int8x8_t)vsub_s32(v117[54], v120[5]), (int8x8_t)vcgt_s32(v120[5], v117[54]));
          v134 = v361;
          if (v361 >= v362)
          {
            v141 = (int *)v360;
            v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v361 - (_BYTE *)v360) >> 2);
            v143 = v142 + 1;
            if (v142 + 1 > 0x1555555555555555)
              sub_22316E078();
            if (0x5555555555555556 * (((char *)v362 - (_BYTE *)v360) >> 2) > v143)
              v143 = 0x5555555555555556 * (((char *)v362 - (_BYTE *)v360) >> 2);
            v144 = 0xAAAAAAAAAAAAAAABLL * (((char *)v362 - (_BYTE *)v360) >> 2) >= 0xAAAAAAAAAAAAAAALL
                 ? 0x1555555555555555
                 : v143;
            if (v144)
            {
              if (v144 > 0x1555555555555555)
                sub_223174E94();
              v145 = (char *)operator new(12 * v144);
            }
            else
            {
              v145 = 0;
            }
            v148 = &v145[12 * v142];
            *(_QWORD *)v148 = v347;
            *((_DWORD *)v148 + 2) = v348;
            v149 = v148;
            if (v134 != v141)
            {
              do
              {
                v150 = *(_QWORD *)(v134 - 3);
                v134 -= 3;
                v151 = v134[2];
                *(_QWORD *)(v149 - 12) = v150;
                v149 -= 12;
                *((_DWORD *)v149 + 2) = v151;
              }
              while (v134 != v141);
              v134 = (int *)v360;
            }
            v135 = (int *)(v148 + 12);
            v360 = v149;
            v361 = (int *)(v148 + 12);
            v362 = (int *)&v145[12 * v144];
            v117 = v326;
            if (v134)
              operator delete(v134);
          }
          else
          {
            *(_QWORD *)v361 = v347;
            v134[2] = v348;
            v135 = v134 + 3;
          }
          v361 = v135;
LABEL_293:
          while (v360 != v135)
          {
            v152 = *(int32x2_t *)(v135 - 3);
            v135 -= 3;
            v153 = v152;
            v154 = v135[2];
            v361 = v135;
            if (*(_QWORD *)(v1 + 216))
            {
              v155 = &byte_224660A0C;
              v322 = v154;
              while (1)
              {
                v156 = *(int8x8_t *)(v1 + 216);
                if (!*(_QWORD *)&v156)
                  break;
                v157 = (int32x2_t *)&dword_224660A10[3 * *v155];
                v158 = vadd_s32(*v157, v153);
                v159 = v157[1].i32[0] + v154;
                v160 = (19349669 * v158.i32[1]) ^ (73856093 * v158.i32[0]) ^ (83492791 * v159);
                v161 = (uint8x8_t)vcnt_s8(v156);
                v161.i16[0] = vaddlv_u8(v161);
                if (v161.u32[0] > 1uLL)
                {
                  v162 = (19349669 * v158.i32[1]) ^ (73856093 * v158.i32[0]) ^ (83492791 * v159);
                  if (v160 >= *(_QWORD *)&v156)
                    v162 = v160 % *(_QWORD *)&v156;
                }
                else
                {
                  v162 = v160 & (*(_QWORD *)&v156 - 1);
                }
                v163 = *(uint64_t **)(*v329 + 8 * v162);
                if (v163)
                {
                  v163 = (uint64_t *)*v163;
                  if (v163)
                  {
                    if (v161.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v165 = v163[1];
                        if (v160 == v165)
                        {
                          if (*((_DWORD *)v163 + 4) == v158.i32[0]
                            && *(uint64_t *)((char *)v163 + 20) == __PAIR64__(v159, v158.u32[1]))
                          {
                            goto LABEL_324;
                          }
                        }
                        else if ((v165 & (*(_QWORD *)&v156 - 1)) != v162)
                        {
                          goto LABEL_323;
                        }
                        v163 = (uint64_t *)*v163;
                        if (!v163)
                          goto LABEL_324;
                      }
                    }
                    do
                    {
                      v164 = v163[1];
                      if (v160 == v164)
                      {
                        if (*((_DWORD *)v163 + 4) == v158.i32[0]
                          && *(uint64_t *)((char *)v163 + 20) == __PAIR64__(v159, v158.u32[1]))
                        {
                          break;
                        }
                      }
                      else
                      {
                        if (v164 >= *(_QWORD *)&v156)
                          v164 %= *(_QWORD *)&v156;
                        if (v164 != v162)
                        {
LABEL_323:
                          v163 = 0;
                          break;
                        }
                      }
                      v163 = (uint64_t *)*v163;
                    }
                    while (v163);
                  }
                }
LABEL_324:
                v166 = (uint64_t)v163 + 28;
                v11 = v163 == 0;
                v167 = v336;
                if (!v11)
                  v167 = v166;
                if (*(_DWORD *)(v167 + 48) == v10)
                {
                  if (v161.u32[0] > 1uLL)
                  {
                    v168 = (19349669 * v158.i32[1]) ^ (73856093 * v158.i32[0]) ^ (83492791 * v159);
                    if (v160 >= *(_QWORD *)&v156)
                      v168 = v160 % *(_QWORD *)&v156;
                  }
                  else
                  {
                    v168 = v160 & (*(_QWORD *)&v156 - 1);
                  }
                  v169 = *(uint64_t ***)(*v329 + 8 * v168);
                  if (v169)
                  {
                    v170 = *v169;
                    if (v170)
                    {
                      if (v161.u32[0] < 2uLL)
                      {
                        v171 = *(_QWORD *)&v156 - 1;
                        while (1)
                        {
                          v173 = v170[1];
                          if (v173 == v160)
                          {
                            if (*((_DWORD *)v170 + 4) == v158.i32[0]
                              && *(uint64_t *)((char *)v170 + 20) == __PAIR64__(v159, v158.u32[1]))
                            {
                              goto LABEL_348;
                            }
                          }
                          else if ((v173 & v171) != v168)
                          {
                            goto LABEL_616;
                          }
                          v170 = (uint64_t *)*v170;
                          if (!v170)
                            goto LABEL_616;
                        }
                      }
                      do
                      {
                        v172 = v170[1];
                        if (v172 == v160)
                        {
                          if (*((_DWORD *)v170 + 4) == v158.i32[0]
                            && *(uint64_t *)((char *)v170 + 20) == __PAIR64__(v159, v158.u32[1]))
                          {
LABEL_348:
                            *((_DWORD *)v170 + 19) = __src;
                            *(uint64_t *)((char *)v334 + 4) = (uint64_t)vmin_s32(v158, *(int32x2_t *)((char *)v334 + 4));
                            *(uint64_t *)((char *)v334 + 12) = (uint64_t)vmax_s32(*(int32x2_t *)((char *)v334 + 12), v158);
                            *((_DWORD *)v334 + 66) += *((_DWORD *)v170 + 20);
                            *((_DWORD *)v334 + 67) += *((_DWORD *)v170 + 21);
                            *((_DWORD *)v334 + 68) += *((_DWORD *)v170 + 22);
                            v174 = *((unsigned __int16 *)v170 + 17);
                            *((_DWORD *)v334 + 69) += v174;
                            ++*((_DWORD *)v334 + 5);
                            v334[54] = (uint64_t)vadd_s32((int32x2_t)v334[54], (int32x2_t)v170[5]);
                            v175 = v117[33].i32[0] - *((_DWORD *)v170 + 20);
                            v117[33].i32[0] = v175;
                            v176 = v117[33].i32[1] - *((_DWORD *)v170 + 21);
                            v117[33].i32[1] = v176;
                            v177 = v117[34].i32[0] - *((_DWORD *)v170 + 22);
                            v117[34].i32[0] = v177;
                            if (v175 < 0 || v176 < 0 || v177 < 0)
                            {
                              v117[33].i32[0] = v170[10] & ~(*((int *)v170 + 20) >> 31);
                              v117[33].i32[1] = *((_DWORD *)v170 + 21) & ~(*((int *)v170 + 21) >> 31);
                              v117[34].i32[0] = v170[11] & ~(*((int *)v170 + 22) >> 31);
                            }
                            v178 = v117[34].u32[1];
                            v131 = v178 >= v174;
                            v179 = v178 - v174;
                            if (!v131)
                              v179 = 0;
                            v117[34].i32[1] = v179;
                            v180 = v117[2].i32[1];
                            if (v180)
                              v117[2].i32[1] = v180 - 1;
                            v181 = v158;
                            v117[54] = (int32x2_t)vbic_s8((int8x8_t)vsub_s32(v117[54], (int32x2_t)v170[5]), (int8x8_t)vcgt_s32((int32x2_t)v170[5], v117[54]));
                            if (v135 >= v362)
                            {
                              v183 = (int *)v360;
                              v184 = 0xAAAAAAAAAAAAAAABLL * (((char *)v135 - (_BYTE *)v360) >> 2);
                              v185 = v184 + 1;
                              if (v184 + 1 > 0x1555555555555555)
                                sub_22316E078();
                              if (0x5555555555555556 * (((char *)v362 - (_BYTE *)v360) >> 2) > v185)
                                v185 = 0x5555555555555556 * (((char *)v362 - (_BYTE *)v360) >> 2);
                              if (0xAAAAAAAAAAAAAAABLL * (((char *)v362 - (_BYTE *)v360) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                                v186 = 0x1555555555555555;
                              else
                                v186 = v185;
                              if (v186)
                              {
                                if (v186 > 0x1555555555555555)
                                  sub_223174E94();
                                v187 = (char *)operator new(12 * v186);
                              }
                              else
                              {
                                v187 = 0;
                              }
                              v188 = &v187[12 * v184];
                              *(int32x2_t *)v188 = v181;
                              *((_DWORD *)v188 + 2) = v159;
                              v189 = v188;
                              if (v135 != v183)
                              {
                                do
                                {
                                  v190 = *(_QWORD *)(v135 - 3);
                                  v135 -= 3;
                                  v191 = v135[2];
                                  *(_QWORD *)(v189 - 12) = v190;
                                  v189 -= 12;
                                  *((_DWORD *)v189 + 2) = v191;
                                }
                                while (v135 != v183);
                                v135 = (int *)v360;
                              }
                              v182 = (int *)(v188 + 12);
                              v360 = v189;
                              v361 = (int *)(v188 + 12);
                              v362 = (int *)&v187[12 * v186];
                              v10 = __s;
                              if (v135)
                                operator delete(v135);
                              v1 = (uint64_t)v328;
                              v154 = v322;
                            }
                            else
                            {
                              *(int32x2_t *)v135 = v158;
                              v135[2] = v159;
                              v182 = v135 + 3;
                            }
                            v361 = v182;
                            v135 = v182;
                            v117 = v326;
                            goto LABEL_299;
                          }
                        }
                        else
                        {
                          if (v172 >= *(_QWORD *)&v156)
                            v172 %= *(_QWORD *)&v156;
                          if (v172 != v168)
                            break;
                        }
                        v170 = (uint64_t *)*v170;
                      }
                      while (v170);
                    }
                  }
LABEL_616:
                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1121, (uint64_t)"voxel_it != voxels_.end()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  abort();
                }
LABEL_299:
                if (++v155 == (char *)dword_224660A10)
                  goto LABEL_293;
              }
              if (*(_DWORD *)(v1 + 300) != v10)
                goto LABEL_299;
              goto LABEL_616;
            }
            if (*(_DWORD *)(v1 + 300) == v10)
              goto LABEL_616;
          }
          if ((v2 = v321, !*((_DWORD *)v334 + 5))
            && (v117 = v326,
                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1144, (uint64_t)"new_area.SizeInVoxels() > 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))|| !v117[2].i32[1]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1145, (uint64_t)"current_area.SizeInVoxels() > 0", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
LABEL_624:
            abort();
          }
          sub_223AE4D54((char **)v334 + 35, (uint64_t *)v9, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - v9) >> 3));
        }
        goto LABEL_19;
      }
      sub_223AD515C(&v358);
      if (**(int **)(v358 + 56) > 5)
        goto LABEL_19;
      v136 = *(unsigned __int8 *)(v358 + 72);
      v137 = sub_22322F254(v358, "OSLogSurrogateAppender", 1, 0);
      v138 = v137;
      if (!v136 && !v137)
        goto LABEL_19;
      sub_223195210((uint64_t)&v347);
      sub_2231813E8(v349, (uint64_t)"Found zero area boundary", 24);
      v327 = v136;
      if ((v356 & 0x10) != 0)
      {
        v146 = v355;
        v147 = (const void **)&v351;
        if (v355 < v352)
        {
          v355 = v352;
          v146 = v352;
          v147 = (const void **)&v351;
        }
      }
      else
      {
        if ((v356 & 8) == 0)
        {
          v139 = 0;
          HIBYTE(v346) = 0;
          v140 = __dst;
          goto LABEL_389;
        }
        v146 = v350[2];
        v147 = (const void **)v350;
      }
      v192 = *v147;
      v139 = v146 - (_QWORD)*v147;
      if (v139 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v139 >= 0x17)
      {
        v193 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v139 | 7) != 0x17)
          v193 = v139 | 7;
        v194 = v193 + 1;
        v140 = (void **)operator new(v193 + 1);
        __dst[1] = (void *)v139;
        v346 = v194 | 0x8000000000000000;
        __dst[0] = v140;
LABEL_388:
        memmove(v140, v192, v139);
        goto LABEL_389;
      }
      HIBYTE(v346) = v146 - *(_BYTE *)v147;
      v140 = __dst;
      if (v139)
        goto LABEL_388;
LABEL_389:
      *((_BYTE *)v140 + v139) = 0;
      v338[0] = &v358;
      v338[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v338[2] = std::chrono::system_clock::now().__d_.__rep_;
      v339 = 5;
      v340 = "unknown file";
      v341 = 1102;
      v342 = "unknown function";
      v343 = 0;
      v344 = 0;
      v195 = __dst;
      if (v346 < 0)
        v195 = (void **)__dst[0];
      __sa = (char *)v195;
      v196 = *(_QWORD *)v338[0];
      v197 = *(_QWORD *)v338[0] + 16;
      if (*(char *)(*(_QWORD *)v338[0] + 39) < 0)
      {
        v198 = *(const char **)(v196 + 16);
        v335 = *(_QWORD *)(v196 + 24);
      }
      else
      {
        v335 = *(unsigned __int8 *)(*(_QWORD *)v338[0] + 39);
        v198 = (const char *)(*(_QWORD *)v338[0] + 16);
      }
      v199 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v363);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v363, byte_255788F40);
        if ((_BYTE)v365 && SHIBYTE(v364) < 0)
          operator delete((void *)v363);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v1 = (uint64_t)v328;
      }
      if (byte_255788F40[23] >= 0)
        v200 = byte_255788F40;
      else
        v200 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v201 = byte_255788F40[23];
      else
        v201 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v369 = os_log_create(v200, v198);
      if (v201 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      __srca = v198;
      if (v201 >= 0x17)
      {
        v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v201 | 7) != 0x17)
          v203 = v201 | 7;
        v204 = v203 + 1;
        v202 = operator new(v203 + 1);
        *(_QWORD *)&v369[16] = v201;
        *(_QWORD *)&v370 = v204 | 0x8000000000000000;
        *(_QWORD *)&v369[8] = v202;
LABEL_408:
        memmove(v202, v200, v201);
        goto LABEL_409;
      }
      BYTE7(v370) = v201;
      v202 = &v369[8];
      if (v201)
        goto LABEL_408;
LABEL_409:
      v202[v201] = 0;
      BYTE8(v370) = 1;
      v205 = v335;
      if (v335 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v206 = v197;
      if (v335 >= 0x17)
      {
        v323 = v138;
        v209 = v197;
        v210 = (v335 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v335 | 7) != 0x17)
          v210 = v335 | 7;
        v211 = v210 + 1;
        v207 = (void **)operator new(v210 + 1);
        v371[1] = (void *)v335;
        v372 = v211 | 0x8000000000000000;
        v371[0] = v207;
        v205 = v335;
        v208 = v327;
        v206 = v209;
        v2 = v321;
        v138 = v323;
LABEL_416:
        memmove(v207, __srca, v205);
        v205 = v335;
        goto LABEL_417;
      }
      HIBYTE(v372) = v335;
      v207 = v371;
      v2 = v321;
      v208 = v327;
      if (v335)
        goto LABEL_416;
LABEL_417:
      *((_BYTE *)v207 + v205) = 0;
      v373 = 1;
      v212 = *(NSObject **)v369;
      if (SHIBYTE(v372) < 0)
        operator delete(v371[0]);
      if (BYTE8(v370) && SBYTE7(v370) < 0)
        operator delete(*(void **)&v369[8]);
      if (*(_QWORD *)v369)
        os_release(*(void **)v369);
      if (v138 && *(_QWORD *)(v138 + 24))
      {
        v213 = _os_log_pack_size();
        v214 = (std::__shared_weak_count_vtbl *)operator new(v213, (std::align_val_t)8uLL);
        v215 = (std::__shared_weak_count *)operator new();
        v215->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v215->__shared_owners_ = 0;
        v215->__shared_weak_owners_ = 0;
        v215[1].__vftable = v214;
        *(_QWORD *)&v363 = v214;
        *((_QWORD *)&v363 + 1) = v214;
        v364 = v215;
        v365 = 0;
        v366 = 0;
        v216 = strlen(__sa);
        if (v216 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v217 = v216;
        if (v216 >= 0x17)
        {
          v220 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17)
            v220 = v216 | 7;
          v221 = v220 + 1;
          v218 = operator new(v220 + 1);
          *(_QWORD *)&v368 = v217;
          *((_QWORD *)&v368 + 1) = v221 | 0x8000000000000000;
          v367 = v218;
        }
        else
        {
          HIBYTE(v368) = v216;
          v218 = &v367;
          if (!v216)
            goto LABEL_436;
        }
        memcpy(v218, __sa, v217);
LABEL_436:
        *((_BYTE *)v218 + v217) = 0;
        v222 = v367;
        v374[0] = v368;
        *(_QWORD *)((char *)v374 + 7) = *(_QWORD *)((char *)&v368 + 7);
        v223 = HIBYTE(v368);
        v224 = operator new(0x38uLL);
        v224[1] = 0;
        v224[2] = 0;
        v224[3] = off_24EC1FA48;
        *v224 = &off_24EC1F9F8;
        v225 = v374[0];
        v224[4] = v222;
        v224[5] = v225;
        *(_QWORD *)((char *)v224 + 47) = *(_QWORD *)((char *)v374 + 7);
        *((_BYTE *)v224 + 55) = v223;
        v374[0] = 0;
        *(_QWORD *)((char *)v374 + 7) = 0;
        v226 = v366;
        v365 = (char *)(v224 + 3);
        v366 = (std::__shared_weak_count *)v224;
        if (v226)
        {
          p_shared_owners = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldaxr(p_shared_owners);
          while (__stlxr(v228 - 1, p_shared_owners));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        *(_OWORD *)v369 = v363;
        v229 = v365;
        *(_QWORD *)&v369[16] = v364;
        if (v364)
        {
          v230 = (unint64_t *)&v364->__shared_owners_;
          do
            v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
        }
        v232 = v366;
        *(_QWORD *)&v370 = v229;
        *((_QWORD *)&v370 + 1) = v366;
        if (v366)
        {
          v233 = (unint64_t *)&v366->__shared_owners_;
          do
            v234 = __ldxr(v233);
          while (__stxr(v234 + 1, v233));
          v371[0] = v229;
          do
            v235 = __ldaxr(v233);
          while (__stlxr(v235 - 1, v233));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        else
        {
          v371[0] = v229;
        }
        v236 = v364;
        if (v364)
        {
          v237 = (unint64_t *)&v364->__shared_owners_;
          do
            v238 = __ldaxr(v237);
          while (__stlxr(v238 - 1, v237));
          if (!v238)
          {
            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
            std::__shared_weak_count::__release_weak(v236);
          }
        }
        v239 = *(_QWORD *)v369;
        if (*((char *)v371[0] + 31) >= 0)
          v240 = (char *)v371[0] + 8;
        else
          v240 = (char *)*((_QWORD *)v371[0] + 1);
        v241 = _os_log_pack_fill();
        *(_DWORD *)v241 = 136315138;
        *(_QWORD *)(v241 + 4) = v240;
        v242 = operator new();
        v243 = *(unsigned __int8 *)(v196 + 39);
        if ((v243 & 0x80u) == 0)
          v244 = v206;
        else
          v244 = *(_QWORD *)(v196 + 16);
        if ((v243 & 0x80u) != 0)
          v243 = *(_QWORD *)(v196 + 24);
        *(_QWORD *)v242 = v239;
        *(_OWORD *)(v242 + 8) = *(_OWORD *)&v369[8];
        *(_QWORD *)&v369[8] = 0;
        *(_QWORD *)&v369[16] = 0;
        *(_OWORD *)(v242 + 24) = v370;
        v370 = 0uLL;
        *(_QWORD *)(v242 + 40) = v244;
        *(_QWORD *)(v242 + 48) = v243;
        *(_BYTE *)(v242 + 56) = 16;
        v367 = 0;
        *(_QWORD *)&v363 = v242;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v138 + 24) + 40))(*(_QWORD *)(v138 + 24), &v363);
        v245 = v363;
        *(_QWORD *)&v363 = 0;
        if (v245)
        {
          v246 = *(std::__shared_weak_count **)(v245 + 32);
          if (v246)
          {
            v247 = (unint64_t *)&v246->__shared_owners_;
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          v249 = *(std::__shared_weak_count **)(v245 + 16);
          if (v249)
          {
            v250 = (unint64_t *)&v249->__shared_owners_;
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
            }
          }
          MEMORY[0x227684CE8](v245, 0x10F0C40B62ED6C6);
          v252 = v367;
          v367 = 0;
          if (v252)
          {
            v253 = (std::__shared_weak_count *)v252[4];
            if (v253)
            {
              v254 = (unint64_t *)&v253->__shared_owners_;
              do
                v255 = __ldaxr(v254);
              while (__stlxr(v255 - 1, v254));
              if (!v255)
              {
                ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                std::__shared_weak_count::__release_weak(v253);
              }
            }
            v256 = (std::__shared_weak_count *)v252[2];
            if (v256)
            {
              v257 = (unint64_t *)&v256->__shared_owners_;
              do
                v258 = __ldaxr(v257);
              while (__stlxr(v258 - 1, v257));
              if (!v258)
              {
                ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                std::__shared_weak_count::__release_weak(v256);
              }
            }
            MEMORY[0x227684CE8](v252, 0x10F0C40B62ED6C6);
          }
        }
        v259 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
        v2 = v321;
        if (*((_QWORD *)&v370 + 1))
        {
          v260 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
        v262 = *(std::__shared_weak_count **)&v369[16];
        if (*(_QWORD *)&v369[16])
        {
          v263 = (unint64_t *)(*(_QWORD *)&v369[16] + 8);
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
      }
      else
      {
        os_log_type_enabled(v212, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v369 = 136315138;
        *(_QWORD *)&v369[4] = __sa;
        v219 = (void *)_os_log_send_and_compose_impl();
        if (v219)
          free(v219);
      }
      if (v208)
      {
        v265 = (const char *)__dst;
        if (v346 < 0)
          v265 = (const char *)__dst[0];
        sub_22322C138((uint64_t)v338, "%s", v265);
        sub_223182C08((uint64_t)v338);
      }
      sub_223182C08((uint64_t)v338);
      v266 = v344;
      if (v344)
      {
        v267 = (unint64_t *)&v344->__shared_owners_;
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
          std::__shared_weak_count::__release_weak(v266);
        }
      }
      if (SHIBYTE(v346) < 0)
        operator delete(__dst[0]);
      v347 = v320;
      *(uint64_t *)((char *)&v347 + *(_QWORD *)(v320 - 24)) = v319;
      v349[0] = v318;
      v349[1] = v317;
      if (v354 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](&v357);
LABEL_19:
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  v269 = *(uint64_t **)(v1 + 176);
  if (v269)
  {
    while (1)
    {
      if (*((_BYTE *)v269 + 24))
      {
        v271 = v269[38];
        v270 = v269[39];
        if (v270 != v271)
          break;
      }
LABEL_519:
      v269 = (uint64_t *)*v269;
      if (!v269)
        goto LABEL_609;
    }
    v272 = 0;
    v337 = 0x6DB6DB6DB6DB6DB7 * ((v270 - v271) >> 3);
    v273 = v328[27];
LABEL_527:
    if (!*(_QWORD *)&v273)
      goto LABEL_615;
    v276 = v271;
    v277 = (int *)(v271 + 56 * v272);
    v278 = *v277;
    v279 = v277[1];
    v280 = v277[2];
    v281 = (19349669 * v279) ^ (73856093 * *v277) ^ (83492791 * v280);
    v282 = (uint8x8_t)vcnt_s8(v273);
    v282.i16[0] = vaddlv_u8(v282);
    if (v282.u32[0] > 1uLL)
    {
      v283 = (19349669 * v279) ^ (73856093 * v278) ^ (83492791 * v280);
      if (v281 >= *(_QWORD *)&v273)
        v283 = v281 % *(_QWORD *)&v273;
    }
    else
    {
      v283 = v281 & (*(_QWORD *)&v273 - 1);
    }
    v284 = *(uint64_t ***)(*v329 + 8 * v283);
    if (!v284 || (v285 = *v284) == 0)
LABEL_615:
      sub_223198218("unordered_map::at: key not found");
    v286 = *(_QWORD *)&v273 - 1;
    if (v282.u32[0] < 2uLL)
    {
      while (1)
      {
        v287 = v285[1];
        if (v287 == v281)
        {
          if (*((_DWORD *)v285 + 4) == v278 && *((_DWORD *)v285 + 5) == v279 && *((_DWORD *)v285 + 6) == v280)
            goto LABEL_542;
        }
        else if ((v287 & v286) != v283)
        {
          goto LABEL_615;
        }
        v285 = (uint64_t *)*v285;
        if (!v285)
          goto LABEL_615;
      }
    }
    while (1)
    {
      v294 = v285[1];
      if (v294 == v281)
      {
        if (*((_DWORD *)v285 + 4) == v278 && *((_DWORD *)v285 + 5) == v279 && *((_DWORD *)v285 + 6) == v280)
        {
LABEL_542:
          v288 = (_DWORD *)(v276 + 56 * v272);
          v289 = v288[3];
          v290 = v288[4];
          v291 = v288[5];
          v292 = (19349669 * v290) ^ (73856093 * v289) ^ (83492791 * v291);
          if (v282.u32[0] > 1uLL)
          {
            v293 = (19349669 * v290) ^ (73856093 * v289) ^ (83492791 * v291);
            if (v292 >= *(_QWORD *)&v273)
              v293 = v292 % *(_QWORD *)&v273;
          }
          else
          {
            v293 = v292 & v286;
          }
          v295 = *(uint64_t **)(*v329 + 8 * v293);
          if (v295)
          {
            v295 = (uint64_t *)*v295;
            if (v295)
            {
              if (v282.u32[0] < 2uLL)
              {
                while (1)
                {
                  v296 = v295[1];
                  if (v292 == v296)
                  {
                    if (*((_DWORD *)v295 + 4) == v289 && *((_DWORD *)v295 + 5) == v290 && *((_DWORD *)v295 + 6) == v291)
                      goto LABEL_576;
                  }
                  else if ((v296 & v286) != v293)
                  {
                    goto LABEL_575;
                  }
                  v295 = (uint64_t *)*v295;
                  if (!v295)
                    goto LABEL_576;
                }
              }
              do
              {
                v297 = v295[1];
                if (v292 == v297)
                {
                  if (*((_DWORD *)v295 + 4) == v289 && *((_DWORD *)v295 + 5) == v290 && *((_DWORD *)v295 + 6) == v291)
                    break;
                }
                else
                {
                  if (v297 >= *(_QWORD *)&v273)
                    v297 %= *(_QWORD *)&v273;
                  if (v297 != v293)
                  {
LABEL_575:
                    v295 = 0;
                    break;
                  }
                }
                v295 = (uint64_t *)*v295;
              }
              while (v295);
            }
          }
LABEL_576:
          v298 = (__int16 *)v295 + 14;
          if (!v295)
            v298 = (__int16 *)&v328[31] + 2;
          v299 = *((__int16 *)v285 + 15);
          v300 = *((__int16 *)v285 + 16) - 2 * v299;
          v301 = v300 & ~(v300 >> 31);
          v302 = v298[1];
          v303 = v298[2] - 2 * v302;
          v304 = v303 & ~(v303 >> 31);
          if (v301 <= v304)
            v301 = v304;
          v305 = (_DWORD *)(v276 + 56 * v272);
          v305[10] = v301;
          v306 = *((__int16 *)v285 + 14) + v299;
          if (v306 <= *v298 + v302)
            v306 = *v298 + v302;
          v305[11] = v306;
          v307 = *((_DWORD *)v298 + 12);
          LODWORD(v347) = v307;
          v305[13] = v307;
          v271 = v276;
          if (v307 != -1)
          {
            sub_223A1AA44((uint64_t)(v269 + 41), (unsigned int *)&v347, &v347);
            v271 = v269[38];
            v270 = v269[39];
            v273 = v328[27];
          }
          if (v273)
          {
            v308 = (_DWORD *)(v271
                            + 56
                            * (((unint64_t)v272 + 0x6DB6DB6DB6DB6DB7 * ((v270 - v271) >> 3) - 1)
                             % (0x6DB6DB6DB6DB6DB7 * ((v270 - v271) >> 3))));
            v309 = v308[3];
            v310 = v308[4];
            v311 = v308[5];
            v312 = (19349669 * v310) ^ (73856093 * v309) ^ (83492791 * v311);
            v313 = (uint8x8_t)vcnt_s8(v273);
            v313.i16[0] = vaddlv_u8(v313);
            if (v313.u32[0] > 1uLL)
            {
              v314 = (19349669 * v310) ^ (73856093 * v309) ^ (83492791 * v311);
              if (v312 >= *(_QWORD *)&v273)
                v314 = v312 % *(_QWORD *)&v273;
            }
            else
            {
              v314 = v312 & (*(_QWORD *)&v273 - 1);
            }
            v274 = *(uint64_t **)(*v329 + 8 * v314);
            if (v274)
            {
              v274 = (uint64_t *)*v274;
              if (v274)
              {
                if (v313.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v316 = v274[1];
                    if (v312 == v316)
                    {
                      if (*((_DWORD *)v274 + 4) == v309
                        && *((_DWORD *)v274 + 5) == v310
                        && *((_DWORD *)v274 + 6) == v311)
                      {
                        goto LABEL_524;
                      }
                    }
                    else if ((v316 & (*(_QWORD *)&v273 - 1)) != v314)
                    {
                      goto LABEL_523;
                    }
                    v274 = (uint64_t *)*v274;
                    if (!v274)
                      goto LABEL_524;
                  }
                }
                do
                {
                  v315 = v274[1];
                  if (v312 == v315)
                  {
                    if (*((_DWORD *)v274 + 4) == v309 && *((_DWORD *)v274 + 5) == v310 && *((_DWORD *)v274 + 6) == v311)
                      break;
                  }
                  else
                  {
                    if (v315 >= *(_QWORD *)&v273)
                      v315 %= *(_QWORD *)&v273;
                    if (v315 != v314)
                      goto LABEL_523;
                  }
                  v274 = (uint64_t *)*v274;
                }
                while (v274);
              }
            }
          }
          else
          {
LABEL_523:
            v274 = 0;
          }
LABEL_524:
          v275 = (char *)v274 + 28;
          if (!v274)
            v275 = (char *)&v328[31] + 4;
          *(_BYTE *)(v276 + 56 * v272++ + 48) = (_DWORD)v347 != *((_DWORD *)v275 + 12);
          if (v272 == v337)
            goto LABEL_519;
          goto LABEL_527;
        }
      }
      else
      {
        if (v294 >= *(_QWORD *)&v273)
          v294 %= *(_QWORD *)&v273;
        if (v294 != v283)
          goto LABEL_615;
      }
      v285 = (uint64_t *)*v285;
      if (!v285)
        goto LABEL_615;
    }
  }
LABEL_609:
  if (v360)
  {
    v361 = (int *)v360;
    operator delete(v360);
  }
  if (v9)
    operator delete(v9);
}

void sub_223ADEBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  void *v55;
  void *v57;

  if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a40);
  if (a54 < 0)
    operator delete(a49);
  sub_223195348((uint64_t)&a55);
  v57 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v57;
    operator delete(v57);
    if (!v55)
LABEL_9:
      _Unwind_Resume(a1);
  }
  else if (!v55)
  {
    goto LABEL_9;
  }
  operator delete(v55);
  goto LABEL_9;
}

char *sub_223ADEDFC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  float32x4_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  __int32 v12;
  __int32 v13;
  uint64_t *v14;
  float32x4_t v15;
  char *v16;
  int v17;
  uint64_t *v18;
  float32x4_t v19;
  char *v20;
  int v21;
  char *result;
  float32x4_t v23;
  float32x4_t v24;
  char *v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  signed int v30;
  int32x2_t v31;
  float32x4_t v32;
  int32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  int32x2_t v39;
  int v40;
  int32x2_t v41;
  int v42;
  int *v43;
  int32x2_t *v44;

  v5 = (_QWORD *)(a2 + 208);
  v6 = sub_2239942A0((_QWORD *)(a2 + 208), (int *)a3);
  if (v6)
    v8 = (char *)v6 + 28;
  else
    v8 = (char *)(a2 + 252);
  v9 = *((unsigned __int16 *)v8 + 2);
  if ((__int16)v9 < 1)
  {
    v10 = 0;
    v37 = 0u;
  }
  else
  {
    v7.i64[0] = *(_QWORD *)(v8 + 20);
    v7.i32[2] = *((_DWORD *)v8 + 7);
    v37 = vaddq_f32(vmulq_n_f32(v7, (float)(__int16)v9), (float32x4_t)0);
    v10 = v9 * v9;
  }
  v11 = a3->i32[0];
  v12 = a3->i32[1];
  LODWORD(v43) = a3->i32[0];
  HIDWORD(v43) = v12 - 1;
  v13 = a3[1].i32[0];
  LODWORD(v44) = v13;
  v14 = sub_2239942A0(v5, (int *)&v43);
  if (v14)
    v16 = (char *)v14 + 28;
  else
    v16 = (char *)(a2 + 252);
  v17 = *((unsigned __int16 *)v16 + 2);
  if ((__int16)v17 >= 1)
  {
    v15.i64[0] = *(_QWORD *)(v16 + 20);
    v15.i32[2] = *((_DWORD *)v16 + 7);
    v37 = vaddq_f32(v37, vmulq_n_f32(v15, (float)(__int16)v17));
    v10 += v17 * v17;
  }
  LODWORD(v43) = v11 - 1;
  HIDWORD(v43) = v12;
  LODWORD(v44) = v13;
  v18 = sub_2239942A0(v5, (int *)&v43);
  if (v18)
    v20 = (char *)v18 + 28;
  else
    v20 = (char *)(a2 + 252);
  v21 = *((unsigned __int16 *)v20 + 2);
  if ((__int16)v21 >= 1)
  {
    v19.i64[0] = *(_QWORD *)(v20 + 20);
    v19.i32[2] = *((_DWORD *)v20 + 7);
    v37 = vaddq_f32(v37, vmulq_n_f32(v19, (float)(__int16)v21));
    v10 += v21 * v21;
  }
  LODWORD(v43) = v11 - 1;
  HIDWORD(v43) = v12 - 1;
  LODWORD(v44) = v13;
  result = (char *)sub_2239942A0(v5, (int *)&v43);
  if (result)
    v25 = result + 28;
  else
    v25 = (char *)(a2 + 252);
  v26 = *((unsigned __int16 *)v25 + 2);
  if ((__int16)v26 < 1)
  {
    v27 = v37;
    if (!v10)
    {
      v29 = *(_DWORD *)(a2 + 4);
      v41.i32[0] = v29 * v11;
      v41.i32[1] = v29 * v12;
      v42 = 0;
      v43 = (int *)(a2 + 8);
      v44 = &v41;
      sub_223AE5064((int *)&v39, &v43);
      v30 = *(_DWORD *)(a2 + 4);
      *(float *)v31.i32 = (float)v30 * 0.5;
      *(float32x2_t *)v32.f32 = vcvt_f32_s32(v39);
      v32.f32[2] = (float)v40;
      v38 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v31, 0), v32), *(float *)(a2 + 152));
      v41 = vmul_s32(vadd_s32(*a3, (int32x2_t)-1), vdup_n_s32(v30));
      v42 = 0;
      v43 = (int *)(a2 + 8);
      v44 = &v41;
      result = (char *)sub_223AE5064((int *)&v39, &v43);
      *(float *)v33.i32 = (float)*(int *)(a2 + 4) * 0.5;
      *(float32x2_t *)v34.f32 = vcvt_f32_s32(v39);
      v34.f32[2] = (float)v40;
      v35 = vaddq_f32(v38, vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v33, 0), v34), *(float *)(a2 + 152)));
      v34.i64[0] = 0x3F0000003F000000;
      v34.i64[1] = 0x3F0000003F000000;
      v28 = vmulq_f32(v35, v34);
      goto LABEL_24;
    }
  }
  else
  {
    v24.i64[0] = *(_QWORD *)(v25 + 20);
    v24.i32[2] = *((_DWORD *)v25 + 7);
    v23 = vmulq_n_f32(v24, (float)(__int16)v26);
    v27 = vaddq_f32(v37, v23);
    v10 += v26 * v26;
  }
  v23.f32[0] = (float)v10;
  v28 = vdivq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0));
LABEL_24:
  *(_DWORD *)(a1 + 8) = v28.i32[2];
  *(_QWORD *)a1 = v28.i64[0];
  return result;
}

uint64_t *sub_223ADF0C8(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  _QWORD *v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t prime;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  size_t v61;
  _QWORD *i;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  void *v73;
  void **v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  void *v80;
  void *v81;
  unint64_t v82;
  int8x8_t v83;
  uint8x8_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void **v93;
  char *v94;
  char *v95;
  void *v96;
  char *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t j;
  uint64_t v107;
  void *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t k;
  uint64_t v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t m;
  uint64_t v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t n;
  uint64_t v142;
  void *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE v149[4];
  __int128 v150;
  int v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  char v196;
  char *v197;
  uint64_t v198;
  char v199;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 168);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
            {
LABEL_22:
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 2037, (uint64_t)"it == area_infos_.end()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              break;
            }
          }
          else
          {
            if (v12 >= v6)
              v12 %= v6;
            if (v12 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  sub_223ACB790((uint64_t)v149, *(_DWORD *)(a1 + 356), *(_DWORD *)(a1 + 360), *(float *)(a1 + 152));
  v14 = *(_QWORD *)(a1 + 168);
  if (!v14)
    goto LABEL_44;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v2 = v5;
    if (v14 <= v5)
      v2 = v5 % v14;
  }
  else
  {
    v2 = ((_DWORD)v14 - 1) & v5;
  }
  v16 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v2);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_44:
    v20 = (char *)operator new(0x1D8uLL);
    v21 = v20;
    v22 = (_QWORD *)(a1 + 176);
    v197 = v20;
    v198 = a1 + 176;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = v5;
    *((_DWORD *)v20 + 4) = a2;
    v20[24] = v149[0];
    *(_OWORD *)(v20 + 28) = v150;
    *((_DWORD *)v20 + 11) = v151;
    *((_OWORD *)v20 + 3) = v152;
    *((_QWORD *)v20 + 8) = v153;
    v152 = 0uLL;
    *(_OWORD *)(v20 + 72) = v154;
    *((_QWORD *)v20 + 11) = v155;
    v153 = 0;
    v154 = 0uLL;
    v155 = 0;
    *((_OWORD *)v20 + 6) = v156;
    *((_QWORD *)v20 + 14) = v157;
    v156 = 0uLL;
    *(_OWORD *)(v20 + 120) = v158;
    *((_QWORD *)v20 + 17) = v159;
    v157 = 0;
    v158 = 0uLL;
    v159 = 0;
    *((_OWORD *)v20 + 9) = v160;
    *((_QWORD *)v20 + 20) = v161;
    v160 = 0uLL;
    *(_OWORD *)(v20 + 168) = v162;
    v23 = v165;
    *((_QWORD *)v20 + 23) = v163;
    v161 = 0;
    v162 = 0uLL;
    v163 = 0;
    *((_OWORD *)v20 + 12) = v164;
    *((_QWORD *)v20 + 26) = v23;
    v164 = 0uLL;
    *(_OWORD *)(v20 + 216) = v166;
    v165 = 0;
    v166 = 0uLL;
    v24 = v167;
    v25 = v168;
    v167 = 0;
    *((_QWORD *)v20 + 29) = v24;
    *((_QWORD *)v20 + 30) = v25;
    v26 = v169;
    v27 = v170;
    *((_QWORD *)v20 + 31) = v169;
    *((_QWORD *)v20 + 32) = v27;
    v169 = 0;
    v170 = 0;
    v29 = v171;
    v28 = v172;
    *((_QWORD *)v20 + 33) = v171;
    *((_QWORD *)v20 + 34) = v28;
    *((_DWORD *)v20 + 70) = v173;
    if (v28)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v30 >= v27)
          v30 %= v27;
      }
      else
      {
        v30 &= v27 - 1;
      }
      *(_QWORD *)(v26 + 8 * v30) = v20 + 264;
      v171 = 0;
      v172 = 0;
    }
    *((_QWORD *)v20 + 36) = v174;
    *((_DWORD *)v20 + 74) = v175;
    *((_DWORD *)v20 + 75) = v176;
    *((_OWORD *)v20 + 19) = v177;
    v32 = v178;
    v31 = v179;
    v178 = 0;
    v179 = 0;
    v177 = 0uLL;
    *((_QWORD *)v20 + 40) = v32;
    *((_QWORD *)v20 + 41) = v31;
    v33 = v180;
    v34 = v181;
    v180 = 0;
    *((_QWORD *)v20 + 42) = v33;
    *((_QWORD *)v20 + 43) = v34;
    v35 = v182;
    *((_QWORD *)v20 + 44) = v182;
    *((_DWORD *)v20 + 90) = v183;
    if (v35)
    {
      v36 = *(_QWORD *)(v34 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v36 >= v33)
          v36 %= v33;
      }
      else
      {
        v36 &= v33 - 1;
      }
      *(_QWORD *)(v31 + 8 * v36) = v20 + 344;
      v181 = 0;
      v182 = 0;
    }
    v37 = v185;
    v38 = v186;
    v39 = v187;
    v185 = 0;
    v186 = 0;
    *((_QWORD *)v20 + 46) = v184;
    *((_QWORD *)v20 + 47) = v37;
    *((_QWORD *)v20 + 48) = v38;
    *((_QWORD *)v20 + 49) = v39;
    v40 = v188;
    *((_QWORD *)v20 + 50) = v188;
    *((_DWORD *)v20 + 102) = v189;
    if (v40)
    {
      v41 = *(_QWORD *)(v39 + 8);
      if ((v38 & (v38 - 1)) != 0)
      {
        if (v41 >= v38)
          v41 %= v38;
      }
      else
      {
        v41 &= v38 - 1;
      }
      *(_QWORD *)(v37 + 8 * v41) = v20 + 392;
      v187 = 0;
      v188 = 0;
    }
    v42 = v190;
    v43 = v191;
    v190 = 0;
    v191 = 0;
    *((_QWORD *)v20 + 52) = v42;
    *((_QWORD *)v20 + 53) = v43;
    v45 = v192;
    v44 = v193;
    *((_QWORD *)v20 + 54) = v192;
    *((_QWORD *)v20 + 55) = v44;
    *((_DWORD *)v20 + 112) = v194;
    if (v44)
    {
      v46 = *(_QWORD *)(v45 + 8);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v46 >= v43)
          v46 %= v43;
      }
      else
      {
        v46 &= v43 - 1;
      }
      *(_QWORD *)(v42 + 8 * v46) = v20 + 432;
      v192 = 0;
      v193 = 0;
    }
    *((_QWORD *)v20 + 57) = v195;
    v20[464] = v196;
    v199 = 1;
    v47 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
    v48 = *(float *)(a1 + 192);
    if (v14 && (float)(v48 * (float)v14) >= v47)
    {
      v49 = *(_QWORD *)(a1 + 160);
      v50 = *(_QWORD **)(v49 + 8 * v2);
      if (v50)
      {
LABEL_71:
        *(_QWORD *)v21 = *v50;
        goto LABEL_146;
      }
LABEL_140:
      *(_QWORD *)v21 = *v22;
      *v22 = v21;
      *(_QWORD *)(v49 + 8 * v2) = v22;
      if (!*(_QWORD *)v21)
        goto LABEL_147;
      v82 = *(_QWORD *)(*(_QWORD *)v21 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v82 >= v14)
          v82 %= v14;
      }
      else
      {
        v82 &= v14 - 1;
      }
      v50 = (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v82);
LABEL_146:
      *v50 = v21;
LABEL_147:
      ++*(_QWORD *)(a1 + 184);
      sub_22388AFA4(v149);
      v83 = *(int8x8_t *)(a1 + 168);
      if (!*(_QWORD *)&v83)
        goto LABEL_255;
      goto LABEL_148;
    }
    v51 = v14 < 3 || (v14 & (v14 - 1)) != 0;
    v52 = v51 | (2 * v14);
    v53 = vcvtps_u32_f32(v47 / v48);
    if (v52 <= v53)
      prime = v53;
    else
      prime = v52;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v14 = *(_QWORD *)(a1 + 168);
    if (prime > v14)
    {
LABEL_83:
      if (prime >> 61)
        sub_223174E94();
      v55 = operator new(8 * prime);
      v56 = *(void **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v55;
      if (v56)
        operator delete(v56);
      v57 = 0;
      *(_QWORD *)(a1 + 168) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v57++) = 0;
      while (prime != v57);
      v58 = (_QWORD *)*v22;
      if (!*v22)
        goto LABEL_115;
      v59 = v58[1];
      v60 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v61 = v59 & v60;
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v61) = v22;
        for (i = (_QWORD *)*v58; *v58; i = (_QWORD *)*v58)
        {
          v63 = i[1] & v60;
          if (v63 == v61)
          {
            v58 = i;
          }
          else
          {
            v64 = *(_QWORD *)(a1 + 160);
            if (*(_QWORD *)(v64 + 8 * v63))
            {
              *v58 = *i;
              v65 = 8 * v63;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 160) + v65);
              **(_QWORD **)(*(_QWORD *)(a1 + 160) + v65) = i;
            }
            else
            {
              *(_QWORD *)(v64 + 8 * v63) = v58;
              v58 = i;
              v61 = v63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v59 >= prime)
        v59 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v59) = v22;
      v69 = (_QWORD *)*v58;
      if (!*v58)
      {
LABEL_115:
        v14 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_116;
        goto LABEL_139;
      }
      while (1)
      {
        v71 = v69[1];
        if (v71 >= prime)
          v71 %= prime;
        if (v71 == v59)
          goto LABEL_109;
        v72 = *(_QWORD *)(a1 + 160);
        if (*(_QWORD *)(v72 + 8 * v71))
        {
          *v58 = *v69;
          v70 = 8 * v71;
          *v69 = **(_QWORD **)(*(_QWORD *)(a1 + 160) + v70);
          **(_QWORD **)(*(_QWORD *)(a1 + 160) + v70) = v69;
          v69 = v58;
LABEL_109:
          v58 = v69;
          v69 = (_QWORD *)*v69;
          if (!v69)
            goto LABEL_115;
        }
        else
        {
          *(_QWORD *)(v72 + 8 * v71) = v58;
          v58 = v69;
          v69 = (_QWORD *)*v69;
          v59 = v71;
          if (!v69)
            goto LABEL_115;
        }
      }
    }
    if (prime < v14)
    {
      v66 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
      if (v14 < 3 || (v67 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        v66 = std::__next_prime(v66);
      }
      else
      {
        v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2)
          v66 = v68;
      }
      if (prime <= v66)
        prime = v66;
      if (prime < v14)
      {
        if (!prime)
        {
          v81 = *(void **)(a1 + 160);
          *(_QWORD *)(a1 + 160) = 0;
          if (v81)
            operator delete(v81);
          v14 = 0;
          *(_QWORD *)(a1 + 168) = 0;
          goto LABEL_139;
        }
        goto LABEL_83;
      }
      v14 = *(_QWORD *)(a1 + 168);
    }
    if ((v14 & (v14 - 1)) != 0)
    {
LABEL_116:
      if (v14 <= v5)
      {
        v2 = v5 % v14;
        v49 = *(_QWORD *)(a1 + 160);
        v50 = *(_QWORD **)(v49 + 8 * (v5 % v14));
        if (v50)
          goto LABEL_71;
      }
      else
      {
        v2 = v5;
        v49 = *(_QWORD *)(a1 + 160);
        v50 = *(_QWORD **)(v49 + 8 * v5);
        if (v50)
          goto LABEL_71;
      }
      goto LABEL_140;
    }
LABEL_139:
    v2 = ((_DWORD)v14 - 1) & v5;
    v49 = *(_QWORD *)(a1 + 160);
    v50 = *(_QWORD **)(v49 + 8 * v2);
    if (v50)
      goto LABEL_71;
    goto LABEL_140;
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v17[1];
      if (v19 == v5)
      {
        if (*((_DWORD *)v17 + 4) == a2)
          goto LABEL_121;
      }
      else if ((v19 & (v14 - 1)) != v2)
      {
        goto LABEL_44;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v18 = v17[1];
    if (v18 == v5)
      break;
    if (v18 >= v14)
      v18 %= v14;
    if (v18 != v2)
      goto LABEL_44;
LABEL_34:
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_44;
  }
  if (*((_DWORD *)v17 + 4) != a2)
    goto LABEL_34;
LABEL_121:
  v73 = (void *)v17[6];
  *((_BYTE *)v17 + 24) = v149[0];
  *(_OWORD *)((char *)v17 + 28) = v150;
  *((_DWORD *)v17 + 11) = v151;
  if (v73)
  {
    v17[7] = (uint64_t)v73;
    operator delete(v73);
    v17[6] = 0;
    v17[7] = 0;
    v17[8] = 0;
  }
  v74 = (void **)(v17 + 9);
  v75 = (char *)v17[9];
  *((_OWORD *)v17 + 3) = v152;
  v17[8] = v153;
  v153 = 0;
  v152 = 0uLL;
  if (v75)
  {
    v76 = (char *)v17[10];
    v77 = v75;
    if (v76 != v75)
    {
      v78 = (char *)v17[10];
      do
      {
        v80 = (void *)*((_QWORD *)v78 - 3);
        v78 -= 24;
        v79 = v80;
        if (v80)
        {
          *((_QWORD *)v76 - 2) = v79;
          operator delete(v79);
        }
        v76 = v78;
      }
      while (v78 != v75);
      v77 = *v74;
    }
    v17[10] = (uint64_t)v75;
    operator delete(v77);
    *v74 = 0;
    v17[10] = 0;
    v17[11] = 0;
  }
  v90 = (void *)v17[12];
  *(_OWORD *)(v17 + 9) = v154;
  v17[11] = v155;
  v155 = 0;
  v154 = 0uLL;
  if (v90)
  {
    v17[13] = (uint64_t)v90;
    operator delete(v90);
    v17[12] = 0;
    v17[13] = 0;
    v17[14] = 0;
  }
  v91 = (void *)v17[15];
  *((_OWORD *)v17 + 6) = v156;
  v17[14] = v157;
  v157 = 0;
  v156 = 0uLL;
  if (v91)
  {
    v17[16] = (uint64_t)v91;
    operator delete(v91);
    v17[15] = 0;
    v17[16] = 0;
    v17[17] = 0;
  }
  v92 = (void *)v17[18];
  *(_OWORD *)(v17 + 15) = v158;
  v17[17] = v159;
  v159 = 0;
  v158 = 0uLL;
  if (v92)
  {
    v17[19] = (uint64_t)v92;
    operator delete(v92);
    v17[18] = 0;
    v17[19] = 0;
    v17[20] = 0;
  }
  v93 = (void **)(v17 + 21);
  v94 = (char *)v17[21];
  *((_OWORD *)v17 + 9) = v160;
  v17[20] = v161;
  v161 = 0;
  v160 = 0uLL;
  if (v94)
  {
    v95 = (char *)v17[22];
    v96 = v94;
    if (v95 != v94)
    {
      v97 = (char *)v17[22];
      do
      {
        v99 = (void *)*((_QWORD *)v97 - 3);
        v97 -= 24;
        v98 = v99;
        if (v99)
        {
          *((_QWORD *)v95 - 2) = v98;
          operator delete(v98);
        }
        v95 = v97;
      }
      while (v97 != v94);
      v96 = *v93;
    }
    v17[22] = (uint64_t)v94;
    operator delete(v96);
    *v93 = 0;
    v17[22] = 0;
    v17[23] = 0;
  }
  v100 = (void *)v17[24];
  *(_OWORD *)(v17 + 21) = v162;
  v17[23] = v163;
  v163 = 0;
  v162 = 0uLL;
  if (v100)
  {
    v17[25] = (uint64_t)v100;
    operator delete(v100);
    v17[24] = 0;
    v17[25] = 0;
    v17[26] = 0;
  }
  v101 = (void *)v17[27];
  *((_OWORD *)v17 + 12) = v164;
  v17[26] = v165;
  v165 = 0;
  v164 = 0uLL;
  if (v101)
  {
    v17[28] = (uint64_t)v101;
    operator delete(v101);
    v17[27] = 0;
    v17[28] = 0;
    v17[29] = 0;
  }
  *(_OWORD *)(v17 + 27) = v166;
  v102 = v167;
  v103 = v168;
  v167 = 0;
  v166 = 0uLL;
  v17[29] = v102;
  v17[30] = v103;
  if (v17[34])
  {
    v104 = (_QWORD *)v17[33];
    if (v104)
    {
      do
      {
        v113 = (_QWORD *)*v104;
        v114 = (_QWORD *)v104[6];
        if (v114)
        {
          do
          {
            v115 = (_QWORD *)*v114;
            operator delete(v114);
            v114 = v115;
          }
          while (v115);
        }
        v116 = (void *)v104[4];
        v104[4] = 0;
        if (v116)
          operator delete(v116);
        operator delete(v104);
        v104 = v113;
      }
      while (v113);
    }
    v17[33] = 0;
    v105 = v17[32];
    if (v105)
    {
      for (j = 0; j != v105; ++j)
        *(_QWORD *)(v17[31] + 8 * j) = 0;
    }
    v17[34] = 0;
  }
  v107 = v169;
  v169 = 0;
  v108 = (void *)v17[31];
  v17[31] = v107;
  if (v108)
    operator delete(v108);
  v109 = v170;
  v110 = v171;
  v170 = 0;
  v111 = v172;
  v17[33] = v171;
  v17[34] = v111;
  v17[32] = v109;
  *((_DWORD *)v17 + 70) = v173;
  if (v111)
  {
    v112 = *(_QWORD *)(v110 + 8);
    if ((v109 & (v109 - 1)) != 0)
    {
      if (v112 >= v109)
        v112 %= v109;
    }
    else
    {
      v112 &= v109 - 1;
    }
    *(_QWORD *)(v17[31] + 8 * v112) = v17 + 33;
    v171 = 0;
    v172 = 0;
  }
  v17[36] = v174;
  *((_DWORD *)v17 + 74) = v175;
  *((_DWORD *)v17 + 75) = v176;
  v117 = (void *)v17[38];
  if (v117)
  {
    v17[39] = (uint64_t)v117;
    operator delete(v117);
    v17[38] = 0;
    v17[39] = 0;
    v17[40] = 0;
  }
  *((_OWORD *)v17 + 19) = v177;
  v17[40] = v178;
  v178 = 0;
  v177 = 0uLL;
  if (v17[44])
  {
    v118 = (_QWORD *)v17[43];
    if (v118)
    {
      do
      {
        v119 = (_QWORD *)*v118;
        operator delete(v118);
        v118 = v119;
      }
      while (v119);
    }
    v17[43] = 0;
    v120 = v17[42];
    if (v120)
    {
      for (k = 0; k != v120; ++k)
        *(_QWORD *)(v17[41] + 8 * k) = 0;
    }
    v17[44] = 0;
  }
  v122 = v179;
  v179 = 0;
  v123 = (void *)v17[41];
  v17[41] = v122;
  if (v123)
    operator delete(v123);
  v124 = v180;
  v125 = v181;
  v180 = 0;
  v126 = v182;
  v17[43] = v181;
  v17[44] = v126;
  v17[42] = v124;
  *((_DWORD *)v17 + 90) = v183;
  if (v126)
  {
    v127 = *(_QWORD *)(v125 + 8);
    if ((v124 & (v124 - 1)) != 0)
    {
      if (v127 >= v124)
        v127 %= v124;
    }
    else
    {
      v127 &= v124 - 1;
    }
    *(_QWORD *)(v17[41] + 8 * v127) = v17 + 43;
    v181 = 0;
    v182 = 0;
  }
  v17[46] = v184;
  if (v17[50])
  {
    v128 = (_QWORD *)v17[49];
    if (v128)
    {
      do
      {
        v129 = (_QWORD *)*v128;
        operator delete(v128);
        v128 = v129;
      }
      while (v129);
    }
    v17[49] = 0;
    v130 = v17[48];
    if (v130)
    {
      for (m = 0; m != v130; ++m)
        *(_QWORD *)(v17[47] + 8 * m) = 0;
    }
    v17[50] = 0;
  }
  v132 = v185;
  v185 = 0;
  v133 = (void *)v17[47];
  v17[47] = v132;
  if (v133)
    operator delete(v133);
  v134 = v186;
  v135 = v187;
  v186 = 0;
  v136 = v188;
  v17[49] = v187;
  v17[50] = v136;
  v17[48] = v134;
  *((_DWORD *)v17 + 102) = v189;
  if (v136)
  {
    v137 = *(_QWORD *)(v135 + 8);
    if ((v134 & (v134 - 1)) != 0)
    {
      if (v137 >= v134)
        v137 %= v134;
    }
    else
    {
      v137 &= v134 - 1;
    }
    *(_QWORD *)(v17[47] + 8 * v137) = v17 + 49;
    v187 = 0;
    v188 = 0;
  }
  if (v17[55])
  {
    v138 = (_QWORD *)v17[54];
    if (v138)
    {
      do
      {
        v139 = (_QWORD *)*v138;
        operator delete(v138);
        v138 = v139;
      }
      while (v139);
    }
    v17[54] = 0;
    v140 = v17[53];
    if (v140)
    {
      for (n = 0; n != v140; ++n)
        *(_QWORD *)(v17[52] + 8 * n) = 0;
    }
    v17[55] = 0;
  }
  v142 = v190;
  v190 = 0;
  v143 = (void *)v17[52];
  v17[52] = v142;
  if (v143)
    operator delete(v143);
  v144 = v191;
  v145 = v192;
  v191 = 0;
  v146 = v193;
  v17[54] = v192;
  v17[55] = v146;
  v17[53] = v144;
  *((_DWORD *)v17 + 112) = v194;
  if (v146)
  {
    v147 = *(_QWORD *)(v145 + 8);
    if ((v144 & (v144 - 1)) != 0)
    {
      if (v147 >= v144)
        v147 %= v144;
    }
    else
    {
      v147 &= v144 - 1;
    }
    *(_QWORD *)(v17[52] + 8 * v147) = v17 + 54;
    v192 = 0;
    v193 = 0;
  }
  v17[57] = v195;
  *((_BYTE *)v17 + 464) = v196;
  sub_22388AFA4(v149);
  v83 = *(int8x8_t *)(a1 + 168);
  if (!*(_QWORD *)&v83)
  {
LABEL_255:
    v86 = 0;
    return v86 + 3;
  }
LABEL_148:
  v84 = (uint8x8_t)vcnt_s8(v83);
  v84.i16[0] = vaddlv_u8(v84);
  if (v84.u32[0] > 1uLL)
  {
    v85 = v5;
    if (*(_QWORD *)&v83 <= v5)
      v85 = v5 % *(_QWORD *)&v83;
  }
  else
  {
    v85 = (v83.i32[0] - 1) & v5;
  }
  v86 = *(uint64_t **)(*(_QWORD *)(a1 + 160) + 8 * v85);
  if (v86)
  {
    v86 = (uint64_t *)*v86;
    if (v86)
    {
      if (v84.u32[0] < 2uLL)
      {
        v87 = *(_QWORD *)&v83 - 1;
        while (1)
        {
          v89 = v86[1];
          if (v89 == v5)
          {
            if (*((_DWORD *)v86 + 4) == a2)
              return v86 + 3;
          }
          else if ((v89 & v87) != v85)
          {
            goto LABEL_255;
          }
          v86 = (uint64_t *)*v86;
          if (!v86)
            return v86 + 3;
        }
      }
      do
      {
        v88 = v86[1];
        if (v88 == v5)
        {
          if (*((_DWORD *)v86 + 4) == a2)
            return v86 + 3;
        }
        else
        {
          if (v88 >= *(_QWORD *)&v83)
            v88 %= *(_QWORD *)&v83;
          if (v88 != v85)
            goto LABEL_255;
        }
        v86 = (uint64_t *)*v86;
      }
      while (v86);
    }
  }
  return v86 + 3;
}

void sub_223ADFFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_223AE5338(v2 - 104);
  sub_22388AFA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223AE0014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22388AFA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223AE0028(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  int v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  char *v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  char *v94;
  char *v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x2_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  float32x2_t v122;
  float v123;
  float v124;
  uint64_t v125;
  float32x2_t v126;
  unsigned int v127;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  _QWORD v135[6];
  char v136;
  _QWORD v137[5];
  void *__p;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  char v144;
  int v145;
  int v146;
  _QWORD v147[4];
  char *v148;
  char *v149;
  unint64_t v150;

  v3 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v145 = -1;
  v146 = 0;
  v144 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  __p = 0;
  v139 = 0;
  v140 = 0;
  v137[0] = a2;
  v137[1] = &v141;
  v137[2] = &__p;
  v137[3] = &v144;
  v137[4] = a1;
  v136 = 0;
  v135[0] = &v136;
  v135[1] = &v145;
  v135[2] = v137;
  v135[3] = &v141;
  v135[4] = &__p;
  v135[5] = &v144;
  v147[0] = a3;
  v147[1] = a2;
  v147[2] = v135;
  v147[3] = &v146;
  v4 = *(_QWORD *)(a3 + 280);
  v5 = *(_QWORD *)(a3 + 288);
  if (v4 == v5)
    goto LABEL_117;
  v6 = a3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3);
  do
  {
    if (*(_BYTE *)(v4 + 56 * v7 + 48))
    {
      v148 = 0;
      v149 = 0;
      v150 = 0;
      v36 = v8;
      v127 = v8;
      while (1)
      {
        v38 = *(_QWORD *)(v6 + 280);
        v37 = *(_QWORD *)(v6 + 288);
        v39 = 0x6DB6DB6DB6DB6DB7 * ((v37 - v38) >> 3);
        v133 = v36;
        v40 = 1;
        if (*(_BYTE *)(v38 + 56 * ((v36 + 1) % v39) + 48))
          break;
        do
        {
          v40 = (v40 + 1);
          if (v39 < v40)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterArea.hpp", 96, (uint64_t)"seg_len <= size()", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v44 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v46 = qword_255795648;
              for (i = qword_255795650; v46 != i; v46 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v46)(*(_QWORD *)(v46 + 8), "seg_len <= size()", 17, "", 0);
            }
            v45 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v36 = v133;
            if (!byte_255795670)
              goto LABEL_174;
            qword_255795660(*(_QWORD *)algn_255795668, "seg_len <= size()", 17, "", 0);
            v38 = *(_QWORD *)(v6 + 280);
            v37 = *(_QWORD *)(v6 + 288);
          }
          v39 = 0x6DB6DB6DB6DB6DB7 * ((v37 - v38) >> 3);
          v43 = (v40 + v36) % v39;
        }
        while (!*(_BYTE *)(v38 + 56 * v43 + 48));
        v41 = v148;
        v42 = (char *)v150;
        v149 = v148;
        if ((_DWORD)v40)
          goto LABEL_57;
        v71 = v36 % v39;
        v50 = v148;
        if ((unint64_t)v148 >= v150)
          goto LABEL_89;
LABEL_87:
        v36 = v71;
        *(_DWORD *)v41 = v71;
        v72 = (uint64_t)(v41 + 4);
LABEL_111:
        v149 = (char *)v72;
        if ((_DWORD)v40 + 1 != (v72 - (uint64_t)v50) >> 2
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterArea.hpp", 109, (uint64_t)"edge_indices.size() == seg_len + 1", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
LABEL_174:
          abort();
        }
        sub_223AE537C((uint64_t)v147, &v148);
        if (v36 == v8)
        {
          if (v148)
            operator delete(v148);
          v3 = a1;
LABEL_117:
          if (v136)
            goto LABEL_145;
          goto LABEL_146;
        }
      }
      v41 = v148;
      v42 = (char *)v150;
      v43 = (v36 + 1) % v39;
LABEL_57:
      v48 = 0;
      v49 = v40;
      v50 = v41;
      v130 = v40;
      v131 = v43;
      while (1)
      {
        while (1)
        {
          v51 = (v36 + v48)
              % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 288) - *(_QWORD *)(v6 + 280)) >> 3));
          if (v41 >= v42)
            break;
          *(_DWORD *)v41 = v51;
          v41 += 4;
          if (++v48 == v49)
            goto LABEL_86;
        }
        v52 = v40;
        v53 = (v41 - v50) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
        {
          v149 = v41;
          v150 = (unint64_t)v42;
          v148 = v50;
          sub_22316E078();
        }
        if ((v42 - v50) >> 1 > v54)
          v54 = (v42 - v50) >> 1;
        v55 = (unint64_t)(v42 - v50) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v54;
        if (v55)
        {
          if (v55 >> 62)
          {
            v149 = v41;
            v150 = (unint64_t)v42;
            v148 = v50;
            sub_223174E94();
          }
          v56 = operator new(4 * v55);
          v57 = &v56[4 * v53];
          *(_DWORD *)v57 = v51;
          v58 = (uint64_t)(v57 + 4);
          v59 = v41 - v50;
          if (v41 == v50)
          {
LABEL_77:
            v6 = a3;
            v40 = v52;
            v42 = &v56[4 * v55];
            if (!v50)
              goto LABEL_74;
LABEL_73:
            v63 = v42;
            operator delete(v50);
            v42 = v63;
            goto LABEL_74;
          }
        }
        else
        {
          v56 = 0;
          v57 = (char *)(4 * v53);
          *(_DWORD *)(4 * v53) = v51;
          v58 = 4 * v53 + 4;
          v59 = v41 - v50;
          if (v41 == v50)
            goto LABEL_77;
        }
        v60 = v59 - 4;
        if (v60 < 0xBC)
          break;
        v64 = (v41 - 4 - v50) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v56[v41 - v50 - 4 - v64] > &v56[v41 - v50 - 4]
          || &v41[-v64 - 4] > v41 - 4
          || (unint64_t)(v50 - v56) < 0x20)
        {
          break;
        }
        v65 = (v60 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v61 = &v41[-v66];
        v57 -= v66;
        v67 = &v56[4 * v53 - 16];
        v68 = v41 - 16;
        v69 = v65 & 0x7FFFFFFFFFFFFFF8;
        v6 = a3;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 32;
          v69 -= 8;
        }
        while (v69);
        v40 = v52;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_71;
LABEL_72:
        v42 = &v56[4 * v55];
        if (v50)
          goto LABEL_73;
LABEL_74:
        v50 = v57;
        v41 = (char *)v58;
        v36 = v133;
        v49 = v130;
        LODWORD(v43) = v131;
        if (++v48 == v130)
        {
LABEL_86:
          v149 = v41;
          v150 = (unint64_t)v42;
          v71 = v43;
          v8 = v127;
          v148 = v50;
          if (v41 < v42)
            goto LABEL_87;
LABEL_89:
          v134 = v40;
          v73 = (v41 - v50) >> 2;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62)
            sub_22316E078();
          if ((v42 - v50) >> 1 > v74)
            v74 = (v42 - v50) >> 1;
          if ((unint64_t)(v42 - v50) >= 0x7FFFFFFFFFFFFFFCLL)
            v75 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
          {
            if (v75 >> 62)
              sub_223174E94();
            v76 = operator new(4 * v75);
            v36 = v71;
            v77 = &v76[4 * v73];
            *(_DWORD *)v77 = v71;
            v72 = (uint64_t)(v77 + 4);
            v78 = v41 - v50;
            if (v41 == v50)
            {
LABEL_108:
              v148 = v77;
              v150 = (unint64_t)&v76[4 * v75];
              if (v50)
                operator delete(v50);
              v50 = v77;
              LODWORD(v40) = v134;
              goto LABEL_111;
            }
          }
          else
          {
            v36 = v71;
            v76 = 0;
            v77 = (char *)(4 * v73);
            *(_DWORD *)(4 * v73) = v71;
            v72 = 4 * v73 + 4;
            v78 = v41 - v50;
            if (v41 == v50)
              goto LABEL_108;
          }
          v79 = v78 - 4;
          if (v79 >= 0x2C)
          {
            if ((unint64_t)(v50 - v76) >= 0x20)
            {
              v81 = (v79 >> 2) + 1;
              v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
              v80 = &v41[-v82];
              v77 -= v82;
              v83 = &v76[4 * v73 - 16];
              v84 = v41 - 16;
              v85 = v81 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v86 = *(_OWORD *)v84;
                *(v83 - 1) = *((_OWORD *)v84 - 1);
                *v83 = v86;
                v83 -= 2;
                v84 -= 32;
                v85 -= 8;
              }
              while (v85);
              if (v81 == (v81 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_108;
            }
            else
            {
              v80 = v41;
            }
          }
          else
          {
            v80 = v41;
          }
          do
          {
            v87 = *((_DWORD *)v80 - 1);
            v80 -= 4;
            *((_DWORD *)v77 - 1) = v87;
            v77 -= 4;
          }
          while (v80 != v50);
          goto LABEL_108;
        }
      }
      v61 = v41;
      v6 = a3;
      v40 = v52;
      do
      {
LABEL_71:
        v62 = *((_DWORD *)v61 - 1);
        v61 -= 4;
        *((_DWORD *)v57 - 1) = v62;
        v57 -= 4;
      }
      while (v61 != v50);
      goto LABEL_72;
    }
    v12 = *(_DWORD *)(v4 + 56 * v7 + 40);
    if (v12 > v9)
    {
      v10 = v8;
      v9 = v12;
    }
    v7 = ++v8;
  }
  while (v11 > v8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v132 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3);
  do
  {
    while (1)
    {
      v17 = (v10 + v15)
          % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 288) - *(_QWORD *)(v6 + 280)) >> 3));
      if (v13 >= v14)
        break;
      *(_DWORD *)v13 = v17;
      v13 += 4;
      if (++v15 == v11)
        goto LABEL_119;
    }
    v18 = (v13 - v16) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
    {
      v149 = v13;
      v150 = (unint64_t)v14;
      v148 = v16;
      sub_22316E078();
    }
    if ((v14 - v16) >> 1 > v19)
      v19 = (v14 - v16) >> 1;
    if ((unint64_t)(v14 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 >> 62)
      {
        v149 = v13;
        v150 = (unint64_t)v14;
        v148 = v16;
        sub_223174E94();
      }
      v21 = v20;
      v22 = operator new(4 * v20);
      v20 = v21;
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v17;
      v24 = (uint64_t)(v23 + 4);
      v25 = v13 - v16;
      if (v13 == v16)
        goto LABEL_24;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(4 * v18);
      *(_DWORD *)(4 * v18) = v17;
      v24 = 4 * v18 + 4;
      v25 = v13 - v16;
      if (v13 == v16)
        goto LABEL_24;
    }
    v26 = v25 - 4;
    if (v26 < 0xBC)
    {
      v27 = v13;
      goto LABEL_23;
    }
    v29 = (v13 - 4 - v16) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v22[v13 - v16 - 4 - v29] > &v22[v13 - v16 - 4])
    {
      v27 = v13;
      do
      {
LABEL_23:
        v28 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v23 - 1) = v28;
        v23 -= 4;
      }
      while (v27 != v16);
      goto LABEL_24;
    }
    if (&v13[-v29 - 4] > v13 - 4)
    {
      v27 = v13;
      goto LABEL_23;
    }
    if ((unint64_t)(v16 - v22) < 0x20)
    {
      v27 = v13;
      goto LABEL_23;
    }
    v30 = (v26 >> 2) + 1;
    v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    v27 = &v13[-v31];
    v23 -= v31;
    v32 = &v22[4 * v18 - 16];
    v33 = v13 - 16;
    v34 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_23;
LABEL_24:
    v14 = &v22[4 * v20];
    if (v16)
      operator delete(v16);
    v16 = v23;
    v13 = (char *)v24;
    v3 = a1;
    v6 = a3;
    v11 = v132;
    ++v15;
  }
  while (v15 != v132);
LABEL_119:
  v88 = v3;
  v149 = v13;
  v150 = (unint64_t)v14;
  v148 = v16;
  if (v13 < v14)
  {
    *(_DWORD *)v13 = v10;
    v89 = (uint64_t)(v13 + 4);
    goto LABEL_142;
  }
  v90 = (v13 - v16) >> 2;
  v91 = v90 + 1;
  if ((unint64_t)(v90 + 1) >> 62)
    sub_22316E078();
  if ((v14 - v16) >> 1 > v91)
    v91 = (v14 - v16) >> 1;
  if ((unint64_t)(v14 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
    v92 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v92 = v91;
  if (v92)
  {
    if (v92 >> 62)
      sub_223174E94();
    v93 = operator new(4 * v92);
    v94 = &v93[4 * v90];
    v95 = &v93[4 * v92];
    *(_DWORD *)v94 = v10;
    v89 = (uint64_t)(v94 + 4);
    v96 = v13 - v16;
    if (v13 == v16)
      goto LABEL_140;
LABEL_132:
    v97 = v96 - 4;
    if (v97 < 0x2C)
    {
      v98 = v13;
      goto LABEL_139;
    }
    if ((unint64_t)(v16 - v93) < 0x20)
    {
      v98 = v13;
      goto LABEL_139;
    }
    v99 = (v97 >> 2) + 1;
    v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
    v98 = &v13[-v100];
    v94 -= v100;
    v101 = &v93[4 * v90 - 16];
    v102 = v13 - 16;
    v103 = v99 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 8;
    }
    while (v103);
    if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_139:
        v105 = *((_DWORD *)v98 - 1);
        v98 -= 4;
        *((_DWORD *)v94 - 1) = v105;
        v94 -= 4;
      }
      while (v98 != v16);
    }
  }
  else
  {
    v93 = 0;
    v94 = (char *)(4 * v90);
    v95 = 0;
    *(_DWORD *)(4 * v90) = v10;
    v89 = 4 * v90 + 4;
    v96 = v13 - v16;
    if (v13 != v16)
      goto LABEL_132;
  }
LABEL_140:
  v148 = v94;
  v150 = (unint64_t)v95;
  if (v16)
    operator delete(v16);
LABEL_142:
  v149 = (char *)v89;
  sub_223AE537C((uint64_t)v147, &v148);
  if (v148)
    operator delete(v148);
  v3 = v88;
  if (v136)
LABEL_145:
    sub_223AE0EA8(v137);
LABEL_146:
  v107 = *v3;
  v106 = v3[1];
  v108 = 0xCCCCCCCCCCCCCCCDLL * ((v106 - *v3) >> 3);
  if (v106 != *v3)
  {
    v109 = 0;
    v110 = 0;
    do
    {
      if (*(float *)(v107 + 40 * v109 + 20) >= 0.001)
      {
        ++v110;
      }
      else
      {
        v111 = 40 * ((v110 + 1) % v108);
        v112 = 40 * v109;
        *(_QWORD *)(v107 + v112 + 12) = *(_QWORD *)(v107 + v111 + 12);
        v107 = *v3;
        v113 = *v3 + v112;
        v114 = vsub_f32(*(float32x2_t *)(v113 + 12), *(float32x2_t *)(v113 + 4));
        *(float *)(v113 + 20) = sqrtf(vmla_lane_f32(vmul_f32(v114, v114), (float32x2_t)vdup_lane_s32((int32x2_t)v114, 1), v114, 1).f32[0]);
        v106 = v107 + v111;
        v115 = v106 + 40;
        v116 = v3[1];
        if (v106 + 40 != v116)
        {
          do
          {
            *(_BYTE *)v106 = *(_BYTE *)v115;
            *(_QWORD *)(v106 + 4) = *(_QWORD *)(v115 + 4);
            *(_QWORD *)(v106 + 12) = *(_QWORD *)(v115 + 12);
            *(_OWORD *)(v106 + 20) = *(_OWORD *)(v115 + 20);
            *(_DWORD *)(v106 + 36) = *(_DWORD *)(v115 + 36);
            v115 += 40;
            v106 += 40;
          }
          while (v115 != v116);
          v107 = *v3;
        }
        v3[1] = v106;
      }
      v109 = v110;
      v108 = 0xCCCCCCCCCCCCCCCDLL * ((v106 - v107) >> 3);
    }
    while (v108 > v110);
  }
  if (v108)
  {
    v117 = 0;
    do
    {
      v119 = *a1;
      v118 = a1[1];
      v120 = v117;
      v121 = *a1 + 40 * v117;
      v122 = vsub_f32(*(float32x2_t *)(v121 + 12), *(float32x2_t *)(v121 + 4));
      v123 = sqrtf(vmla_lane_f32(vmul_f32(v122, v122), (float32x2_t)vdup_lane_s32((int32x2_t)v122, 1), v122, 1).f32[0]);
      v124 = *(float *)(v121 + 20);
      v125 = *a1;
      if (vabds_f32(v123, v124) >= 0.001)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1425, (uint64_t)"std::abs((boundary[index].end - boundary[index].start).norm2() - boundary[index].length) < 1e-3f", 96, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_166;
        }
        v125 = *a1;
        v124 = *(float *)(*a1 + 40 * v117 + 20);
      }
      if (v124 < 0.001)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1426, (uint64_t)"boundary[index].length >= 1e-3f", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_166;
        }
        v125 = *a1;
      }
      v126 = vsub_f32(*(float32x2_t *)(v125 + 40 * v120 + 12), *(float32x2_t *)(v125 + 40 * (++v117 % (0xCCCCCCCCCCCCCCCDLL * ((v118 - v119) >> 3))) + 4));
      if (sqrtf(vmla_lane_f32(vmul_f32(v126, v126), (float32x2_t)vdup_lane_s32((int32x2_t)v126, 1), v126, 1).f32[0]) >= 0.001
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1427, (uint64_t)"(boundary[index].end - boundary[index2].start).norm2() < 1e-3f", 62, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_166:
        abort();
      }
    }
    while (v108 != v117);
  }
  sub_223ACCCC0((char **)a1);
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
}

void sub_223AE0DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  if (__p)
  {
    operator delete(__p);
    v33 = a30;
    if (!a30)
    {
LABEL_3:
      v34 = *(void **)v31;
      if (!*(_QWORD *)v31)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v33 = a30;
    if (!a30)
      goto LABEL_3;
  }
  operator delete(v33);
  v34 = *(void **)v31;
  if (!*(_QWORD *)v31)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v31 + 8) = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void sub_223AE0EA8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  float v10;
  uint64_t i;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  size_t v17;
  int8x8_t *v18;
  int8x8_t *v19;
  int8x8_t *v20;
  float32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  int v27;
  int v28;
  int v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int *v41;
  void **v42;
  float32x2_t v43;
  char v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  _QWORD *v69;

  v1 = a1;
  v2 = (uint64_t *)a1[1];
  v4 = *v2;
  v3 = v2[1];
  v5 = v3 - *v2;
  if ((unint64_t)v5 < 0x18)
    goto LABEL_26;
  v6 = *(float *)(*a1 + 352);
  v7 = (_QWORD *)a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7[1] - *v7) >> 2) + 1 == v5 >> 3)
    goto LABEL_7;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1310, (uint64_t)"pts.size() == weights.size() + 1", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_53;
  }
  v4 = *v2;
  v3 = v2[1];
  v5 = v3 - *v2;
  if ((unint64_t)v5 < 0x11)
  {
LABEL_19:
    if ((unint64_t)v5 <= 8)
      goto LABEL_22;
    goto LABEL_24;
  }
  while (1)
  {
LABEL_7:
    v8 = v5 >> 3;
    if (v8 == 2)
    {
      v9 = 0;
      if (v6 <= 3.4028e38)
        break;
      goto LABEL_15;
    }
    v9 = 0;
    v10 = 3.4028e38;
    for (i = 2; i != v8; ++i)
    {
      v12 = *(float32x2_t *)(v4 + 8 * (i - 2));
      v13 = vsub_f32(*(float32x2_t *)(v4 + 8 * (i % v8)), v12);
      v14 = vmul_f32(vsub_f32(*(float32x2_t *)(v4 + 8 * ((i - 1) % v8)), v12), (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v13, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v13, v13), (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1), v13, 1).f32[0]))));
      v15 = fabsf(vsub_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)).f32[0]);
      if (v15 < v10)
      {
        v10 = v15;
        v9 = (i - 1) % v8;
      }
    }
    if (v10 >= v6)
      break;
LABEL_15:
    v16 = v4 + 8 * v9;
    if (v16 + 8 != v3)
    {
      v17 = ((v3 - v16 - 16) & 0xFFFFFFFFFFFFFFF8) + 8;
      memmove((void *)v16, (const void *)(v16 + 8), v17);
      v16 = v4 + v17 + 8 * v9;
    }
    v18 = (int8x8_t *)v7[1];
    v19 = (int8x8_t *)(*v7 + 20 * (v9 - 1));
    v20 = (int8x8_t *)(*v7 + 20 * v9);
    v21 = (float32x2_t)v20[1];
    v22.i32[0] = (__int32)*v20;
    v23 = (int32x2_t)*v19;
    v24 = (float32x2_t)v19[1];
    v22.i32[1] = HIDWORD(*(unint64_t *)v19);
    v25.i32[0] = (__int32)*v19;
    v25.i32[1] = HIDWORD(*(unint64_t *)v20);
    v26 = vbsl_s8((int8x8_t)vcgt_f32(v25, v22), *v20, *v19);
    v2[1] = v16;
    v27 = v19[2].i32[0];
    v28 = v20[2].i32[0];
    v22.f32[0] = (float)v27;
    v29 = v28 + v27;
    v19[2].i32[0] = v29;
    *(float *)v23.i32 = (float)v29;
    *v19 = v26;
    v19[1] = (int8x8_t)vdiv_f32(vadd_f32(vmul_n_f32(v24, v22.f32[0]), vmul_n_f32(v21, (float)v28)), (float32x2_t)vdup_lane_s32(v23, 0));
    v30 = (char *)v18 - (char *)&v20[2].u8[4];
    if (v18 == (int8x8_t *)&v20[2].u8[4])
    {
      v3 = v16;
      v7[1] = (char *)v18 - 20;
      v4 = *v2;
      v5 = v16 - *v2;
      if ((unint64_t)v5 <= 0x10)
        goto LABEL_19;
    }
    else
    {
      memmove(v20, (char *)&v20[2] + 4, (char *)v18 - (char *)&v20[2].u8[4]);
      v3 = v2[1];
      v7[1] = (char *)v20 + v30;
      v4 = *v2;
      v5 = v3 - *v2;
      if ((unint64_t)v5 <= 0x10)
        goto LABEL_19;
    }
  }
  v5 = v3 - v4;
  if ((unint64_t)(v3 - v4) <= 8)
  {
LABEL_22:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1352, (uint64_t)"pts.size() >= 2", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v5 = v2[1] - *v2;
      goto LABEL_24;
    }
LABEL_53:
    abort();
  }
LABEL_24:
  if (1 - 0x3333333333333333 * ((uint64_t)(v7[1] - *v7) >> 2) != v5 >> 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1353, (uint64_t)"pts.size() == weights.size() + 1", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_53;
  }
LABEL_26:
  v31 = (uint64_t *)v1[1];
  v33 = *v31;
  v32 = v31[1];
  if (v33 != v32)
  {
    v34 = (v32 - v33) >> 3;
    v35 = v34 - 1;
    if (v34 == 1)
      return;
LABEL_31:
    v37 = 0;
    v69 = v1;
    while (2)
    {
      while (1)
      {
        v38 = v37;
        v39 = v37;
        v40 = *(_QWORD *)v1[1];
        ++v37;
        v41 = (int *)(*(_QWORD *)v1[2] + 20 * v39);
        v42 = (void **)v1[4];
        v43 = *(float32x2_t *)(v40 + 8 * v38);
        v44 = *(_BYTE *)v1[3];
        v45 = *(float32x2_t *)(v40 + 8 * v37);
        v46 = vsub_f32(v43, v45);
        v47 = sqrtf(vmla_lane_f32(vmul_f32(v46, v46), (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), v46, 1).f32[0]);
        v49 = *v41;
        v48 = v41[1];
        v51 = v41[2];
        v50 = v41[3];
        v53 = (char *)v42[1];
        v52 = (unint64_t)v42[2];
        if ((unint64_t)v53 >= v52)
          break;
        *v53 = v44;
        *(float32x2_t *)(v53 + 4) = v43;
        *(float32x2_t *)(v53 + 12) = v45;
        *((float *)v53 + 5) = v47;
        *((_DWORD *)v53 + 6) = v49;
        *((_DWORD *)v53 + 7) = v48;
        *((_DWORD *)v53 + 8) = v51;
        *((_DWORD *)v53 + 9) = v50;
        v42[1] = v53 + 40;
        if (v37 == v35)
          return;
      }
      v54 = (char *)*v42;
      v55 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (_BYTE *)*v42) >> 3);
      v56 = v55 + 1;
      if (v55 + 1 > 0x666666666666666)
        sub_22316E078();
      v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - (_QWORD)v54) >> 3);
      if (2 * v57 > v56)
        v56 = 2 * v57;
      if (v57 >= 0x333333333333333)
        v58 = 0x666666666666666;
      else
        v58 = v56;
      if (v58 > 0x666666666666666)
        sub_223174E94();
      v59 = v35;
      v60 = 40 * v58;
      v61 = (char *)operator new(40 * v58);
      v62 = &v61[40 * v55];
      *v62 = v44;
      *(float32x2_t *)(v62 + 4) = v43;
      *(float32x2_t *)(v62 + 12) = v45;
      *((float *)v62 + 5) = v47;
      *((_DWORD *)v62 + 6) = v49;
      *((_DWORD *)v62 + 7) = v48;
      *((_DWORD *)v62 + 8) = v51;
      *((_DWORD *)v62 + 9) = v50;
      if (v53 == v54)
      {
        v68 = &v61[v60];
        v67 = v62 + 40;
        *v42 = v62;
        v42[1] = v62 + 40;
        v42[2] = v68;
        if (v53)
          goto LABEL_45;
      }
      else
      {
        v63 = 0;
        do
        {
          v64 = &v62[v63];
          *(v64 - 40) = v53[v63 - 40];
          *(_QWORD *)(v64 - 36) = *(_QWORD *)&v53[v63 - 36];
          *(_QWORD *)(v64 - 28) = *(_QWORD *)&v53[v63 - 28];
          v65 = *(_OWORD *)&v53[v63 - 20];
          *((_DWORD *)v64 - 1) = *(_DWORD *)&v53[v63 - 4];
          *(_OWORD *)(v64 - 20) = v65;
          v63 -= 40;
        }
        while (&v53[v63] != v54);
        v53 = (char *)*v42;
        v66 = &v61[v60];
        v67 = v62 + 40;
        *v42 = &v62[v63];
        v42[1] = v62 + 40;
        v42[2] = v66;
        if (v53)
LABEL_45:
          operator delete(v53);
      }
      v35 = v59;
      v1 = v69;
      v42[1] = v67;
      if (v37 == v35)
        return;
      continue;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1368, (uint64_t)"!points.empty()", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_53;
  }
  v36 = (uint64_t)(*(_QWORD *)(v1[1] + 8) - *(_QWORD *)v1[1]) >> 3;
  v35 = v36 - 1;
  if (v36 != 1)
    goto LABEL_31;
}

void sub_223AE1438(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  char *v24;
  float *v25;
  float32x2_t v26;
  float v27;
  _QWORD *v28;
  uint64_t v29;
  float32x2_t v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  int v41;
  uint64_t (**v42)();
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  __n128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t (**v60)();
  float v61;
  float32x2_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  int v75;
  uint64_t (**v76)();
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  const char *v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  int v89;
  uint64_t (**v90)();
  int v91;
  int v92;
  uint64_t (**v93)();
  uint64_t (**v94)();
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)();
  uint64_t (**v101)();
  uint64_t (**v102)();
  uint64_t (**v103)();
  uint64_t (*v104)();
  int v105;
  unint64_t v106;
  int v107;
  uint64_t (**v108)();
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)();
  uint64_t (**v115)();
  uint64_t (**v116)();
  uint64_t (**v117)();
  uint64_t (*v118)();
  int v119;
  unint64_t v120;
  float v121;
  _BOOL4 v122;
  _BOOL4 v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float *v128;
  float *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float *v135;
  float *v136;
  float *v137;
  float *v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  float *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float *v148;
  float *v149;
  float *v150;
  float *v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  float *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  float *v162;
  float *v163;
  float *v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float *v173;
  float *v174;
  float *v175;
  float *v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  const char **v180;
  const char *v181;
  std::__shared_weak_count *v182;
  unint64_t *p_shared_owners;
  unint64_t v184;
  std::__shared_weak_count *v185;
  void *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *i;
  uint64_t *v206;
  uint64_t *v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  float32x2_t v211;
  __int128 v212;
  float32x2_t v213;
  __int128 v214;
  _QWORD v215[4];
  void *__p[2];
  __int128 v217;
  int v218;
  std::string v219;
  char v220;
  char v221;
  int v222;
  __int128 v223;
  uint64_t (**v224)();
  void *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  char v229;
  uint64_t v230;
  void *v231;
  std::__shared_weak_count *v232;
  uint64_t (***v233)();
  const char *v234;
  unint64_t v235;
  uint64_t (**v236)();
  void *v237;
  float *v238;
  float *v239;
  unint64_t v240;
  _BYTE v241[4];
  int v242;
  int v243;
  uint64_t (**v244)();
  uint64_t (**v245)();
  unint64_t v246;
  _BYTE v247[4];
  int v248;
  uint64_t v249;

  v249 = *MEMORY[0x24BDAC8D0];
  v6 = a4 + (uint64_t)~a3;
  if (v6 <= 1)
    v6 = 1;
  if ((unint64_t)v6 >= 0x7FFFFFFF)
    LODWORD(v6) = 0x7FFFFFFF;
  v222 = v6;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      v9 = v7;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v9[2];
    }
    v10 = *(_QWORD *)(v8 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      sub_22456D250("ObservationMapping.Res.Cluster.RoomsSimplifiedEdges-%i", (std::string *)__p, a2);
      v234 = "cv3d.recon.";
      v235 = 11;
      v14 = (void *)BYTE7(v217);
      if ((SBYTE7(v217) & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (SBYTE7(v217) < 0)
        v14 = __p[1];
      v236 = (uint64_t (**)())v15;
      v237 = v14;
      sub_2231A9820((uint64_t)&v234, (uint64_t)&v238, 0, 0, &v219);
      if (SBYTE7(v217) < 0)
        operator delete(__p[0]);
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
      {
        *(_OWORD *)__p = 0u;
        v217 = 0u;
        v218 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
        {
          *(_QWORD *)&v223 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v223 + 1) = 2;
          v17 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
          {
            v206 = v17;
            sub_2241498F4((uint64_t)&v234, 0);
            v243 = 1;
            v18 = *(_QWORD *)(a1 + 176);
            if (v18)
            {
              do
              {
                v207 = (uint64_t *)v18;
                v20 = *(unsigned __int8 *)(v18 + 24);
                v19 = v18 + 24;
                if (v20)
                {
                  sub_223AE0028(v227, a1, v19);
                  v24 = (char *)v227[0];
                  v210 = (char *)v227[1];
                  if (v227[0] == v227[1])
                  {
                    if (!v227[0])
                      goto LABEL_22;
                  }
                  else
                  {
                    do
                    {
                      v26 = *(float32x2_t *)(v24 + 4);
                      v213 = *(float32x2_t *)(v24 + 12);
                      v27 = *((float *)v24 + 8);
                      v28 = (_QWORD *)v235;
                      v29 = (uint64_t)(v235 - (_QWORD)v234) / 12;
                      v21.i32[0] = *(_DWORD *)(a1 + 88);
                      v22.i32[0] = *(_DWORD *)(a1 + 100);
                      v23.i32[0] = *(_DWORD *)(a1 + 112);
                      *(float32x2_t *)&v31 = vmla_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), v26.f32[0]), *(float32x2_t *)(a1 + 92), v26, 1), 0, *(float32x2_t *)(a1 + 104));
                      v211 = v26;
                      v30 = vmla_f32(vmla_lane_f32(vmul_f32(v21, v26), v22, v26, 1), 0, v23);
                      *((float32x2_t *)&v31 + 1) = v30;
                      if (v235 >= (unint64_t)v236)
                      {
                        v33 = v29 + 1;
                        if ((unint64_t)(v29 + 1) > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * (((char *)v236 - v234) >> 2) > v33)
                          v33 = 0x5555555555555556 * (((char *)v236 - v234) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v236 - v234) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v33 = 0x1555555555555555;
                        if (v33)
                        {
                          v208 = v31;
                          LODWORD(v233) = v33;
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v34 = ((uint64_t (*)(uint64_t (***)(), void **))off_24EC5FA18[HIDWORD(v237)])(&v224, &v237);
                          v31 = v208;
                        }
                        else
                        {
                          v34 = 0;
                          v35 = 0;
                        }
                        v36 = v34 + 12 * v29;
                        *(_QWORD *)v36 = v31;
                        *(_DWORD *)(v36 + 8) = DWORD2(v31);
                        v38 = v234;
                        v37 = (const char *)v235;
                        v39 = (const char *)v36;
                        if ((const char *)v235 != v234)
                        {
                          do
                          {
                            v40 = *(_QWORD *)(v37 - 12);
                            v37 -= 12;
                            v41 = *((_DWORD *)v37 + 2);
                            *(_QWORD *)(v39 - 12) = v40;
                            v39 -= 12;
                            *((_DWORD *)v39 + 2) = v41;
                          }
                          while (v37 != v38);
                          v37 = v234;
                        }
                        v32 = (char *)(v36 + 12);
                        v234 = v39;
                        v235 = v36 + 12;
                        v42 = v236;
                        v236 = (uint64_t (**)())(v34 + 12 * v35);
                        if (v37)
                        {
                          v224 = (uint64_t (**)())v37;
                          LODWORD(v225) = -1431655765 * ((unint64_t)((char *)v42 - v37) >> 2);
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), void **))off_24EC5FA08[HIDWORD(v237)])(&v233, &v237);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v235 + 8) = v30.i32[0];
                        *v28 = v31;
                        v32 = (char *)v28 + 12;
                      }
                      v235 = (unint64_t)v32;
                      v21.i32[0] = *(_DWORD *)(a1 + 88);
                      v43 = *(float32x2_t *)(a1 + 92);
                      v22.i32[0] = *(_DWORD *)(a1 + 100);
                      v44 = *(float32x2_t *)(a1 + 104);
                      v23.i32[0] = *(_DWORD *)(a1 + 112);
                      v45.i32[1] = v213.i32[1];
                      *(float32x2_t *)&v47 = vmla_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), v213.f32[0]), v43, v213, 1), 0, v44);
                      v46.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v21, v213), v22, v213, 1), 0, v23);
                      *((_QWORD *)&v47 + 1) = v46.n128_u64[0];
                      if (v32 >= (char *)v236)
                      {
                        v49 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v234) >> 2);
                        v50 = v49 + 1;
                        if (v49 + 1 > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * (((char *)v236 - v234) >> 2) > v50)
                          v50 = 0x5555555555555556 * (((char *)v236 - v234) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v236 - v234) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v51 = 0x1555555555555555;
                        else
                          v51 = v50;
                        if (v51)
                        {
                          v209 = v47;
                          LODWORD(v233) = v51;
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v52 = ((uint64_t (*)(uint64_t (***)(), void **))off_24EC5FA18[HIDWORD(v237)])(&v224, &v237);
                          v47 = v209;
                        }
                        else
                        {
                          v52 = 0;
                          v53 = 0;
                        }
                        v54 = v52 + 12 * v49;
                        *(_QWORD *)v54 = v47;
                        *(_DWORD *)(v54 + 8) = DWORD2(v47);
                        v56 = v234;
                        v55 = (const char *)v235;
                        v57 = (const char *)v54;
                        if ((const char *)v235 != v234)
                        {
                          do
                          {
                            v58 = *(_QWORD *)(v55 - 12);
                            v55 -= 12;
                            v59 = *((_DWORD *)v55 + 2);
                            *(_QWORD *)(v57 - 12) = v58;
                            v57 -= 12;
                            *((_DWORD *)v57 + 2) = v59;
                          }
                          while (v55 != v56);
                          v55 = v234;
                        }
                        v48 = v54 + 12;
                        v234 = v57;
                        v235 = v54 + 12;
                        v60 = v236;
                        v236 = (uint64_t (**)())(v52 + 12 * v53);
                        if (v55)
                        {
                          v224 = (uint64_t (**)())v55;
                          LODWORD(v225) = -1431655765 * ((unint64_t)((char *)v60 - v55) >> 2);
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          v46 = ((__n128 (*)(uint64_t (****)(), void **))off_24EC5FA08[HIDWORD(v237)])(&v233, &v237);
                        }
                      }
                      else
                      {
                        *((_DWORD *)v32 + 2) = v46.n128_u32[0];
                        *(_QWORD *)v32 = v47;
                        v48 = (unint64_t)(v32 + 12);
                      }
                      v61 = fmaxf(v27, 0.5);
                      v235 = v48;
                      v46.n128_f32[0] = v61 * *(float *)(a1 + 152);
                      v43.i32[0] = *(_DWORD *)(a1 + 88);
                      v44.i32[0] = *(_DWORD *)(a1 + 100);
                      v45.i32[0] = *(_DWORD *)(a1 + 112);
                      *(float32x2_t *)&v63 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), v211.f32[0]), *(float32x2_t *)(a1 + 92), v211, 1), *(float32x2_t *)(a1 + 104), v46.n128_f32[0]);
                      v62 = vmla_f32(vmla_lane_f32(vmul_f32(v43, v211), v44, v211, 1), (float32x2_t)v46.n128_u64[0], v45);
                      *((float32x2_t *)&v63 + 1) = v62;
                      if (v48 >= (unint64_t)v236)
                      {
                        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v234) >> 2);
                        v66 = v65 + 1;
                        if (v65 + 1 > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * (((char *)v236 - v234) >> 2) > v66)
                          v66 = 0x5555555555555556 * (((char *)v236 - v234) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v236 - v234) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v67 = 0x1555555555555555;
                        else
                          v67 = v66;
                        if (v67)
                        {
                          v212 = v63;
                          LODWORD(v233) = v67;
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v68 = ((uint64_t (*)(uint64_t (***)(), void **))off_24EC5FA18[HIDWORD(v237)])(&v224, &v237);
                          v63 = v212;
                        }
                        else
                        {
                          v68 = 0;
                          v69 = 0;
                        }
                        v70 = v68 + 12 * v65;
                        *(_QWORD *)v70 = v63;
                        *(_DWORD *)(v70 + 8) = DWORD2(v63);
                        v72 = v234;
                        v71 = (const char *)v235;
                        v73 = (const char *)v70;
                        if ((const char *)v235 != v234)
                        {
                          do
                          {
                            v74 = *(_QWORD *)(v71 - 12);
                            v71 -= 12;
                            v75 = *((_DWORD *)v71 + 2);
                            *(_QWORD *)(v73 - 12) = v74;
                            v73 -= 12;
                            *((_DWORD *)v73 + 2) = v75;
                          }
                          while (v71 != v72);
                          v71 = v234;
                        }
                        v64 = v70 + 12;
                        v234 = v73;
                        v235 = v70 + 12;
                        v76 = v236;
                        v236 = (uint64_t (**)())(v68 + 12 * v69);
                        if (v71)
                        {
                          v224 = (uint64_t (**)())v71;
                          LODWORD(v225) = -1431655765 * ((unint64_t)((char *)v76 - v71) >> 2);
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          v46 = ((__n128 (*)(uint64_t (****)(), void **))off_24EC5FA08[HIDWORD(v237)])(&v233, &v237);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v48 + 8) = v62.i32[0];
                        *(_QWORD *)v48 = v63;
                        v64 = v48 + 12;
                      }
                      v235 = v64;
                      v46.n128_f32[0] = v61 * *(float *)(a1 + 152);
                      v43.i32[0] = *(_DWORD *)(a1 + 88);
                      v22 = *(float32x2_t *)(a1 + 92);
                      v44.i32[0] = *(_DWORD *)(a1 + 100);
                      v23 = *(float32x2_t *)(a1 + 104);
                      v45.i32[0] = *(_DWORD *)(a1 + 112);
                      *(float32x2_t *)&v77 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), v213.f32[0]), v22, v213, 1), v23, v46.n128_f32[0]);
                      v21 = vmla_f32(vmla_lane_f32(vmul_f32(v43, v213), v44, v213, 1), (float32x2_t)v46.n128_u64[0], v45);
                      *((float32x2_t *)&v77 + 1) = v21;
                      if (v64 >= (unint64_t)v236)
                      {
                        v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)v234) >> 2);
                        v80 = v79 + 1;
                        if (v79 + 1 > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * (((char *)v236 - v234) >> 2) > v80)
                          v80 = 0x5555555555555556 * (((char *)v236 - v234) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v236 - v234) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v81 = 0x1555555555555555;
                        else
                          v81 = v80;
                        if (v81)
                        {
                          v214 = v77;
                          LODWORD(v233) = v81;
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v82 = ((uint64_t (*)(uint64_t (***)(), void **))off_24EC5FA18[HIDWORD(v237)])(&v224, &v237);
                          v77 = v214;
                        }
                        else
                        {
                          v82 = 0;
                          v83 = 0;
                        }
                        v84 = v82 + 12 * v79;
                        *(_QWORD *)v84 = v77;
                        *(_DWORD *)(v84 + 8) = DWORD2(v77);
                        v86 = v234;
                        v85 = (const char *)v235;
                        v87 = (const char *)v84;
                        if ((const char *)v235 != v234)
                        {
                          do
                          {
                            v88 = *(_QWORD *)(v85 - 12);
                            v85 -= 12;
                            v89 = *((_DWORD *)v85 + 2);
                            *(_QWORD *)(v87 - 12) = v88;
                            v87 -= 12;
                            *((_DWORD *)v87 + 2) = v89;
                          }
                          while (v85 != v86);
                          v85 = v234;
                        }
                        v78 = v84 + 12;
                        v234 = v87;
                        v235 = v84 + 12;
                        v90 = v236;
                        v236 = (uint64_t (**)())(v82 + 12 * v83);
                        if (v85)
                        {
                          v224 = (uint64_t (**)())v85;
                          LODWORD(v225) = -1431655765 * ((unint64_t)((char *)v90 - v85) >> 2);
                          if (HIDWORD(v237) == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), void **))off_24EC5FA08[HIDWORD(v237)])(&v233, &v237);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v64 + 8) = v21.i32[0];
                        *(_QWORD *)v64 = v77;
                        v78 = v64 + 12;
                      }
                      v235 = v78;
                      v91 = v29 + 1;
                      v92 = v29 + 3;
                      v93 = v245;
                      if ((unint64_t)v245 >= v246)
                      {
                        v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v245 - (char *)v244) >> 2);
                        v96 = v95 + 1;
                        if (v95 + 1 > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * ((uint64_t)(v246 - (_QWORD)v244) >> 2) > v96)
                          v96 = 0x5555555555555556 * ((uint64_t)(v246 - (_QWORD)v244) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - (_QWORD)v244) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v97 = 0x1555555555555555;
                        else
                          v97 = v96;
                        if (v97)
                        {
                          LODWORD(v233) = v97;
                          if (v248 == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v98 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA28[v248])(&v224, v247);
                        }
                        else
                        {
                          v98 = 0;
                          v99 = 0;
                        }
                        v100 = (uint64_t (**)())(v98 + 12 * v95);
                        *(_DWORD *)v100 = v29;
                        *((_DWORD *)v100 + 1) = v91;
                        *((_DWORD *)v100 + 2) = v92;
                        v102 = v244;
                        v101 = v245;
                        v103 = v100;
                        if (v245 != v244)
                        {
                          do
                          {
                            v104 = *(uint64_t (**)())((char *)v101 - 12);
                            v101 = (uint64_t (**)())((char *)v101 - 12);
                            v105 = *((_DWORD *)v101 + 2);
                            *(uint64_t (**)())((char *)v103 - 12) = v104;
                            v103 = (uint64_t (**)())((char *)v103 - 12);
                            *((_DWORD *)v103 + 2) = v105;
                          }
                          while (v101 != v102);
                          v101 = v244;
                        }
                        v94 = (uint64_t (**)())((char *)v100 + 12);
                        v244 = v103;
                        v245 = (uint64_t (**)())((char *)v100 + 12);
                        v106 = v246;
                        v246 = v98 + 12 * v99;
                        if (v101)
                        {
                          v224 = v101;
                          LODWORD(v225) = -1431655765 * ((v106 - (unint64_t)v101) >> 2);
                          if (v248 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5F9F8[v248])(&v233, v247);
                        }
                      }
                      else
                      {
                        *(_DWORD *)v245 = v29;
                        *((_DWORD *)v93 + 1) = v91;
                        v94 = (uint64_t (**)())((char *)v93 + 12);
                        *((_DWORD *)v93 + 2) = v92;
                      }
                      v245 = v94;
                      v107 = v29 + 2;
                      if ((unint64_t)v94 >= v246)
                      {
                        v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v244) >> 2);
                        v110 = v109 + 1;
                        if (v109 + 1 > 0x1555555555555555)
                          sub_22316E078();
                        if (0x5555555555555556 * ((uint64_t)(v246 - (_QWORD)v244) >> 2) > v110)
                          v110 = 0x5555555555555556 * ((uint64_t)(v246 - (_QWORD)v244) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - (_QWORD)v244) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v111 = 0x1555555555555555;
                        else
                          v111 = v110;
                        if (v111)
                        {
                          LODWORD(v233) = v111;
                          if (v248 == -1)
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v112 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA28[v248])(&v224, v247);
                        }
                        else
                        {
                          v112 = 0;
                          v113 = 0;
                        }
                        v114 = (uint64_t (**)())(v112 + 12 * v109);
                        *(_DWORD *)v114 = v29;
                        *((_DWORD *)v114 + 1) = v92;
                        *((_DWORD *)v114 + 2) = v107;
                        v116 = v244;
                        v115 = v245;
                        v117 = v114;
                        if (v245 != v244)
                        {
                          do
                          {
                            v118 = *(uint64_t (**)())((char *)v115 - 12);
                            v115 = (uint64_t (**)())((char *)v115 - 12);
                            v119 = *((_DWORD *)v115 + 2);
                            *(uint64_t (**)())((char *)v117 - 12) = v118;
                            v117 = (uint64_t (**)())((char *)v117 - 12);
                            *((_DWORD *)v117 + 2) = v119;
                          }
                          while (v115 != v116);
                          v115 = v244;
                        }
                        v108 = (uint64_t (**)())((char *)v114 + 12);
                        v244 = v117;
                        v245 = (uint64_t (**)())((char *)v114 + 12);
                        v120 = v246;
                        v246 = v112 + 12 * v113;
                        if (v115)
                        {
                          v224 = v115;
                          LODWORD(v225) = -1431655765 * ((v120 - (unint64_t)v115) >> 2);
                          if (v248 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5F9F8[v248])(&v233, v247);
                        }
                      }
                      else
                      {
                        *(_DWORD *)v94 = v29;
                        *((_DWORD *)v94 + 1) = v92;
                        v108 = (uint64_t (**)())((char *)v94 + 12);
                        *((_DWORD *)v94 + 2) = v107;
                      }
                      v245 = v108;
                      v121 = *((float *)v24 + 8);
                      v122 = v121 >= 10.0 || *v24 == 0;
                      v123 = *((float *)v24 + 5) < 0.5 || v121 < 10.0;
                      if (!v122
                        && !v123
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1459, (uint64_t)"!(ok_to_move && ok_to_expand)", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      if (v123)
                        v124 = 1.0;
                      else
                        v124 = 0.0;
                      if (v122)
                        v125 = v124;
                      else
                        v125 = 1.0;
                      if (v122)
                        v126 = v124;
                      else
                        v126 = 0.0;
                      if (v122)
                        v127 = 1.0;
                      else
                        v127 = 0.0;
                      v128 = v239;
                      if ((unint64_t)v239 >= v240)
                      {
                        v130 = 0xAAAAAAAAAAAAAAABLL * (v239 - v238);
                        v131 = v130 + 1;
                        if (v130 + 1 > 0x1555555555555555)
                          goto LABEL_276;
                        if (0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2) > v131)
                          v131 = 0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - (_QWORD)v238) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v132 = 0x1555555555555555;
                        else
                          v132 = v131;
                        if (v132)
                        {
                          LODWORD(v233) = v132;
                          if (v242 == -1)
                            goto LABEL_277;
                          v224 = (uint64_t (**)())&v233;
                          v133 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA18[v242])(&v224, v241);
                        }
                        else
                        {
                          v133 = 0;
                          v134 = 0;
                        }
                        v135 = (float *)(v133 + 12 * v130);
                        *v135 = v125;
                        v135[1] = v126;
                        v135[2] = v127;
                        v137 = v238;
                        v136 = v239;
                        v138 = v135;
                        if (v239 != v238)
                        {
                          do
                          {
                            v139 = *(_QWORD *)(v136 - 3);
                            v136 -= 3;
                            v140 = *((_DWORD *)v136 + 2);
                            *(_QWORD *)(v138 - 3) = v139;
                            v138 -= 3;
                            *((_DWORD *)v138 + 2) = v140;
                          }
                          while (v136 != v137);
                          v136 = v238;
                        }
                        v129 = v135 + 3;
                        v238 = v138;
                        v239 = v135 + 3;
                        v141 = v240;
                        v240 = v133 + 12 * v134;
                        if (v136)
                        {
                          v224 = (uint64_t (**)())v136;
                          LODWORD(v225) = -1431655765 * ((v141 - (unint64_t)v136) >> 2);
                          if (v242 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5FA08[v242])(&v233, v241);
                        }
                      }
                      else
                      {
                        *v239 = v125;
                        v128[1] = v126;
                        v129 = v128 + 3;
                        v128[2] = v127;
                      }
                      v239 = v129;
                      if ((unint64_t)v129 >= v240)
                      {
                        v143 = 0xAAAAAAAAAAAAAAABLL * (v129 - v238);
                        v144 = v143 + 1;
                        if (v143 + 1 > 0x1555555555555555)
                          goto LABEL_276;
                        if (0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2) > v144)
                          v144 = 0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - (_QWORD)v238) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v145 = 0x1555555555555555;
                        else
                          v145 = v144;
                        if (v145)
                        {
                          LODWORD(v233) = v145;
                          if (v242 == -1)
                            goto LABEL_277;
                          v224 = (uint64_t (**)())&v233;
                          v146 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA18[v242])(&v224, v241);
                        }
                        else
                        {
                          v146 = 0;
                          v147 = 0;
                        }
                        v148 = (float *)(v146 + 12 * v143);
                        *v148 = v125;
                        v148[1] = v126;
                        v148[2] = v127;
                        v150 = v238;
                        v149 = v239;
                        v151 = v148;
                        if (v239 != v238)
                        {
                          do
                          {
                            v152 = *(_QWORD *)(v149 - 3);
                            v149 -= 3;
                            v153 = *((_DWORD *)v149 + 2);
                            *(_QWORD *)(v151 - 3) = v152;
                            v151 -= 3;
                            *((_DWORD *)v151 + 2) = v153;
                          }
                          while (v149 != v150);
                          v149 = v238;
                        }
                        v142 = v148 + 3;
                        v238 = v151;
                        v239 = v148 + 3;
                        v154 = v240;
                        v240 = v146 + 12 * v147;
                        if (v149)
                        {
                          v224 = (uint64_t (**)())v149;
                          LODWORD(v225) = -1431655765 * ((v154 - (unint64_t)v149) >> 2);
                          if (v242 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5FA08[v242])(&v233, v241);
                        }
                      }
                      else
                      {
                        *v129 = v125;
                        v129[1] = v126;
                        v142 = v129 + 3;
                        v129[2] = v127;
                      }
                      v239 = v142;
                      if ((unint64_t)v142 >= v240)
                      {
                        v156 = 0xAAAAAAAAAAAAAAABLL * (v142 - v238);
                        v157 = v156 + 1;
                        if (v156 + 1 > 0x1555555555555555)
                          goto LABEL_276;
                        if (0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2) > v157)
                          v157 = 0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - (_QWORD)v238) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v158 = 0x1555555555555555;
                        else
                          v158 = v157;
                        if (v158)
                        {
                          LODWORD(v233) = v158;
                          if (v242 == -1)
                            goto LABEL_277;
                          v224 = (uint64_t (**)())&v233;
                          v159 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA18[v242])(&v224, v241);
                        }
                        else
                        {
                          v159 = 0;
                          v160 = 0;
                        }
                        v161 = (float *)(v159 + 12 * v156);
                        *v161 = v125;
                        v161[1] = v126;
                        v161[2] = v127;
                        v163 = v238;
                        v162 = v239;
                        v164 = v161;
                        if (v239 != v238)
                        {
                          do
                          {
                            v165 = *(_QWORD *)(v162 - 3);
                            v162 -= 3;
                            v166 = *((_DWORD *)v162 + 2);
                            *(_QWORD *)(v164 - 3) = v165;
                            v164 -= 3;
                            *((_DWORD *)v164 + 2) = v166;
                          }
                          while (v162 != v163);
                          v162 = v238;
                        }
                        v155 = v161 + 3;
                        v238 = v164;
                        v239 = v161 + 3;
                        v167 = v240;
                        v240 = v159 + 12 * v160;
                        if (v162)
                        {
                          v224 = (uint64_t (**)())v162;
                          LODWORD(v225) = -1431655765 * ((v167 - (unint64_t)v162) >> 2);
                          if (v242 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5FA08[v242])(&v233, v241);
                        }
                      }
                      else
                      {
                        *v142 = v125;
                        v142[1] = v126;
                        v155 = v142 + 3;
                        v142[2] = v127;
                      }
                      v239 = v155;
                      if ((unint64_t)v155 < v240)
                      {
                        *v155 = v125;
                        v155[1] = v126;
                        v25 = v155 + 3;
                        v155[2] = v127;
                      }
                      else
                      {
                        v168 = 0xAAAAAAAAAAAAAAABLL * (v155 - v238);
                        v169 = v168 + 1;
                        if (v168 + 1 > 0x1555555555555555)
LABEL_276:
                          sub_22316E078();
                        if (0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2) > v169)
                          v169 = 0x5555555555555556 * ((uint64_t)(v240 - (_QWORD)v238) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - (_QWORD)v238) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v170 = 0x1555555555555555;
                        else
                          v170 = v169;
                        if (v170)
                        {
                          LODWORD(v233) = v170;
                          if (v242 == -1)
LABEL_277:
                            sub_22316DD70();
                          v224 = (uint64_t (**)())&v233;
                          v171 = ((uint64_t (*)(uint64_t (***)(), _BYTE *))off_24EC5FA18[v242])(&v224, v241);
                        }
                        else
                        {
                          v171 = 0;
                          v172 = 0;
                        }
                        v173 = (float *)(v171 + 12 * v168);
                        *v173 = v125;
                        v173[1] = v126;
                        v173[2] = v127;
                        v175 = v238;
                        v174 = v239;
                        v176 = v173;
                        if (v239 != v238)
                        {
                          do
                          {
                            v177 = *(_QWORD *)(v174 - 3);
                            v174 -= 3;
                            v178 = *((_DWORD *)v174 + 2);
                            *(_QWORD *)(v176 - 3) = v177;
                            v176 -= 3;
                            *((_DWORD *)v176 + 2) = v178;
                          }
                          while (v174 != v175);
                          v174 = v238;
                        }
                        v25 = v173 + 3;
                        v238 = v176;
                        v239 = v173 + 3;
                        v179 = v240;
                        v240 = v171 + 12 * v172;
                        if (v174)
                        {
                          v224 = (uint64_t (**)())v174;
                          LODWORD(v225) = -1431655765 * ((v179 - (unint64_t)v174) >> 2);
                          if (v242 == -1)
                            sub_22316DD70();
                          v233 = &v224;
                          ((void (*)(uint64_t (****)(), _BYTE *))off_24EC5FA08[v242])(&v233, v241);
                        }
                      }
                      v239 = v25;
                      v24 += 40;
                    }
                    while (v24 != v210);
                    v24 = (char *)v227[0];
                    if (!v227[0])
                      goto LABEL_22;
                  }
                  v227[1] = v24;
                  operator delete(v24);
                }
LABEL_22:
                v18 = *v207;
              }
              while (*v207);
            }
            LOBYTE(v227[0]) = 0;
            v229 = 0;
            sub_22329F414((uint64_t)&v234, (__int128 *)v227, &v223, &v230);
            if (v229 && v228 < 0)
              operator delete(v227[0]);
            sub_22316F8F4((uint64_t *)&v234);
            v180 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
            v181 = *v180;
            v182 = (std::__shared_weak_count *)v180[1];
            if (v182)
            {
              p_shared_owners = (unint64_t *)&v182->__shared_owners_;
              do
                v184 = __ldxr(p_shared_owners);
              while (__stxr(v184 + 1, p_shared_owners));
            }
            v186 = v231;
            v185 = v232;
            v224 = &off_24EC6A3B8;
            v225 = v231;
            v226 = v232;
            v231 = 0;
            v232 = 0;
            v234 = v181;
            v235 = (unint64_t)v182;
            if (v182)
            {
              v187 = (unint64_t *)&v182->__shared_owners_;
              do
                v188 = __ldxr(v187);
              while (__stxr(v188 + 1, v187));
            }
            v236 = &off_24EC6A3B8;
            v237 = v186;
            v238 = (float *)v185;
            if (v185)
            {
              v189 = (unint64_t *)&v185->__shared_owners_;
              do
                v190 = __ldxr(v189);
              while (__stxr(v190 + 1, v189));
            }
            (*(void (**)(uint64_t *, const char **))(*v206 + 16))(v206, &v234);
            v191 = (std::__shared_weak_count *)v238;
            if (v238)
            {
              v192 = (unint64_t *)(v238 + 2);
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            v194 = (std::__shared_weak_count *)v235;
            if (v235)
            {
              v195 = (unint64_t *)(v235 + 8);
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            v197 = v226;
            if (v226)
            {
              v198 = (unint64_t *)&v226->__shared_owners_;
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            if (v182)
            {
              v200 = (unint64_t *)&v182->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            v202 = v232;
            if (v232)
            {
              v203 = (unint64_t *)&v232->__shared_owners_;
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
    }
  }
  v215[0] = a1;
  v215[1] = &v222;
  v215[2] = &v221;
  v215[3] = &v220;
  for (i = *(uint64_t **)(a1 + 176); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 24))
      sub_223AE5C9C((uint64_t)v215, (uint64_t)(i + 3));
  }
}

void sub_223AE2904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,__int16 a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;

  sub_2241231D8(v56);
  v58 = (std::__shared_weak_count *)a55;
  if (a55)
  {
    v59 = (unint64_t *)(a55 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_2241231D8((uint64_t)&a43);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  sub_2241231D8((uint64_t)&a50);
  sub_2231874DC((uint64_t)&a29);
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_223AE2AC4(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  int8x8_t **v7;
  int8x8_t *v8;
  uint64_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  _QWORD *v101;
  uint64_t *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  char **v106;
  uint64_t *v107;
  _DWORD *v108;

  v1 = (uint64_t *)result[22];
  if (v1)
  {
    v101 = result;
    while (1)
    {
      if (*((_BYTE *)v1 + 24))
      {
        v2 = v1[43];
        if (v2)
          break;
      }
LABEL_3:
      v1 = (uint64_t *)*v1;
      if (!v1)
        return result;
    }
    v103 = *((unsigned int *)v1 + 4);
    v107 = v1;
    while (1)
    {
      v3 = (int8x8_t)result[21];
      if (!*(_QWORD *)&v3)
        goto LABEL_139;
      v4 = *(unsigned int *)(v2 + 16);
      v5 = (uint8x8_t)vcnt_s8(v3);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        v6 = *(unsigned int *)(v2 + 16);
        if (*(_QWORD *)&v3 <= v4)
          v6 = v4 % *(_QWORD *)&v3;
      }
      else
      {
        v6 = (v3.i32[0] - 1) & v4;
      }
      v7 = *(int8x8_t ***)(result[20] + 8 * v6);
      if (!v7 || (v8 = *v7) == 0)
      {
LABEL_139:
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 2051, (uint64_t)"it != area_infos_.end()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        abort();
      }
      v102 = (uint64_t *)v2;
      if (v5.u32[0] < 2uLL)
      {
        v9 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v11 = v8[1];
          if (*(_QWORD *)&v11 == v4)
          {
            if (v8[2].i32[0] == (_DWORD)v4)
              goto LABEL_28;
          }
          else if ((*(_QWORD *)&v11 & v9) != v6)
          {
            goto LABEL_139;
          }
          v8 = (int8x8_t *)*v8;
          if (!v8)
            goto LABEL_139;
        }
      }
      while (1)
      {
        v10 = v8[1];
        if (*(_QWORD *)&v10 == v4)
          break;
        if (*(_QWORD *)&v10 >= *(_QWORD *)&v3)
          *(_QWORD *)&v10 %= *(_QWORD *)&v3;
        if (*(_QWORD *)&v10 != v6)
          goto LABEL_139;
LABEL_18:
        v8 = (int8x8_t *)*v8;
        if (!v8)
          goto LABEL_139;
      }
      if (v8[2].i32[0] != (_DWORD)v4)
        goto LABEL_18;
LABEL_28:
      if (v8[3].i8[0])
      {
        v12 = v8[42];
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8(v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            v14 = v103;
            if (*(_QWORD *)&v12 <= v103)
              v14 = v103 % *(_QWORD *)&v12;
          }
          else
          {
            v14 = (v12.i32[0] - 1) & v103;
          }
          v15 = *(uint64_t ***)(*(_QWORD *)&v8[41] + 8 * v14);
          if (v15)
          {
            v16 = *v15;
            if (v16)
            {
              if (v13.u32[0] < 2uLL)
              {
                v17 = *(_QWORD *)&v12 - 1;
                while (1)
                {
                  v19 = v16[1];
                  if (v19 == v103)
                  {
                    if (*((_DWORD *)v16 + 4) == (_DWORD)v103)
                      goto LABEL_7;
                  }
                  else if ((v19 & v17) != v14)
                  {
                    goto LABEL_49;
                  }
                  v16 = (uint64_t *)*v16;
                  if (!v16)
                    goto LABEL_49;
                }
              }
              do
              {
                v18 = v16[1];
                if (v18 == v103)
                {
                  if (*((_DWORD *)v16 + 4) == (_DWORD)v103)
                    goto LABEL_7;
                }
                else
                {
                  if (v18 >= *(_QWORD *)&v12)
                    v18 %= *(_QWORD *)&v12;
                  if (v18 != v14)
                    break;
                }
                v16 = (uint64_t *)*v16;
              }
              while (v16);
            }
          }
        }
LABEL_49:
        v21 = (_QWORD *)v8[10];
        v20 = (unint64_t)v8[11];
        if ((unint64_t)v21 >= v20)
        {
          v23 = (_QWORD *)v8[9];
          v24 = 0xAAAAAAAAAAAAAAABLL * (v21 - v23) + 1;
          if (v24 > 0xAAAAAAAAAAAAAAALL)
            sub_22329A3C4();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v23) >> 3);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          v26 = v25 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
          if (v26)
          {
            if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_140:
              sub_223174E94();
            v27 = (char *)operator new(24 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[8 * (v21 - v23)];
          v29 = &v27[24 * v26];
          *(_QWORD *)v28 = 0;
          *((_QWORD *)v28 + 1) = 0;
          *((_QWORD *)v28 + 2) = 0;
          v22 = v28 + 24;
          if (v21 == v23)
          {
            v8[9] = (int8x8_t)v28;
            v8[10] = (int8x8_t)v22;
            v8[11] = (int8x8_t)v29;
          }
          else
          {
            do
            {
              v30 = v28;
              *((_QWORD *)v28 - 2) = 0;
              *((_QWORD *)v28 - 1) = 0;
              v31 = *(_OWORD *)(v21 - 3);
              v21 -= 3;
              *(_OWORD *)(v28 - 24) = v31;
              v28 -= 24;
              *((_QWORD *)v30 - 1) = v21[2];
              *v21 = 0;
              v21[1] = 0;
              v21[2] = 0;
            }
            while (v21 != v23);
            v21 = (_QWORD *)v8[9];
            v32 = (_QWORD *)v8[10];
            v8[9] = (int8x8_t)v28;
            v8[10] = (int8x8_t)v22;
            v8[11] = (int8x8_t)v29;
            if (v32 != v21)
            {
              v33 = v32;
              do
              {
                v35 = (void *)*(v33 - 3);
                v33 -= 3;
                v34 = v35;
                if (v35)
                {
                  *(v32 - 2) = v34;
                  operator delete(v34);
                }
                v32 = v33;
              }
              while (v33 != v21);
            }
          }
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v21 = 0;
          v21[1] = 0;
          v22 = v21 + 3;
          v21[2] = 0;
        }
        v8[10] = (int8x8_t)v22;
        v36 = (_QWORD *)v1[7];
        if (v36 != (_QWORD *)v1[6])
        {
          v108 = (_DWORD *)v1[16];
          v37 = (_DWORD *)v1[13];
          v105 = (void **)&v8[12];
          v106 = (char **)(v22 - 3);
          v104 = (void **)&v8[15];
          while (1)
          {
            --v36;
            v40 = (char *)*(v22 - 2);
            v39 = *(v22 - 1);
            if ((unint64_t)v40 < v39)
            {
              *(_QWORD *)v40 = *v36;
              v41 = (uint64_t)(v40 + 8);
              goto LABEL_97;
            }
            v42 = *v106;
            v43 = v40 - *v106;
            v44 = v43 >> 3;
            v45 = (v43 >> 3) + 1;
            if (v45 >> 61)
              sub_22316E078();
            v46 = v39 - (_QWORD)v42;
            if (v46 >> 2 > v45)
              v45 = v46 >> 2;
            v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v45;
            if (v47)
              break;
            v48 = 0;
            v49 = (_QWORD *)(8 * v44);
            *(_QWORD *)(8 * v44) = *v36;
            v41 = 8 * v44 + 8;
            v50 = (char *)(v40 - v42);
            if (v40 != v42)
              goto LABEL_88;
LABEL_95:
            *(v22 - 3) = v49;
            *(v22 - 2) = v41;
            *(v22 - 1) = &v48[8 * v47];
            if (v40)
              operator delete(v40);
LABEL_97:
            *(v22 - 2) = v41;
            --v37;
            v61 = (char *)v8[13];
            v60 = (unint64_t)v8[14];
            if ((unint64_t)v61 < v60)
            {
              *(_DWORD *)v61 = *v37;
              v62 = (uint64_t)(v61 + 4);
              goto LABEL_118;
            }
            v63 = (char *)*v105;
            v64 = v61 - (_BYTE *)*v105;
            v65 = v64 >> 2;
            v66 = (v64 >> 2) + 1;
            if (v66 >> 62)
              sub_22316E078();
            v67 = v60 - (_QWORD)v63;
            if (v67 >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              if (v68 >> 62)
                goto LABEL_140;
              v69 = operator new(4 * v68);
              v70 = &v69[4 * v65];
              *v70 = *v37;
              v62 = (uint64_t)(v70 + 1);
              v71 = v61 - v63;
              if (v61 == v63)
                goto LABEL_116;
LABEL_110:
              v72 = v71 - 4;
              if (v72 < 0x2C)
                goto LABEL_147;
              if ((unint64_t)(v61 - v69 - v64) < 0x20)
                goto LABEL_147;
              v73 = (v72 >> 2) + 1;
              v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
              v75 = &v61[-v74];
              v70 = (_DWORD *)((char *)v70 - v74);
              v76 = &v69[4 * v65 - 16];
              v77 = v61 - 16;
              v78 = v73 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v79 = *(_OWORD *)v77;
                *(v76 - 1) = *((_OWORD *)v77 - 1);
                *v76 = v79;
                v76 -= 2;
                v77 -= 32;
                v78 -= 8;
              }
              while (v78);
              v61 = v75;
              if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_147:
                do
                {
                  v80 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *--v70 = v80;
                }
                while (v61 != v63);
              }
              goto LABEL_116;
            }
            v69 = 0;
            v70 = (_DWORD *)(4 * v65);
            *(_DWORD *)(4 * v65) = *v37;
            v62 = 4 * v65 + 4;
            v71 = v61 - v63;
            if (v61 != v63)
              goto LABEL_110;
LABEL_116:
            v8[12] = (int8x8_t)v70;
            v8[13] = (int8x8_t)v62;
            v8[14] = (int8x8_t)&v69[4 * v68];
            if (v63)
              operator delete(v63);
LABEL_118:
            v8[13] = (int8x8_t)v62;
            v81 = v108 - 1;
            v83 = (char *)v8[16];
            v82 = (unint64_t)v8[17];
            --v108;
            if ((unint64_t)v83 < v82)
            {
              *(_DWORD *)v83 = *v81;
              v38 = v83 + 4;
            }
            else
            {
              v84 = (char *)*v104;
              v85 = v83 - (_BYTE *)*v104;
              v86 = v85 >> 2;
              v87 = (v85 >> 2) + 1;
              if (v87 >> 62)
                sub_22316E078();
              v88 = v82 - (_QWORD)v84;
              if (v88 >> 1 > v87)
                v87 = v88 >> 1;
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                v89 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v89 = v87;
              if (v89)
              {
                if (v89 >> 62)
                  goto LABEL_140;
                v90 = operator new(4 * v89);
              }
              else
              {
                v90 = 0;
              }
              v91 = &v90[4 * v86];
              *v91 = *v108;
              v38 = v91 + 1;
              if (v83 != v84)
              {
                v92 = v83 - v84 - 4;
                if (v92 < 0x2C)
                  goto LABEL_148;
                if ((unint64_t)(v83 - v90 - v85) < 0x20)
                  goto LABEL_148;
                v93 = (v92 >> 2) + 1;
                v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
                v95 = &v83[-v94];
                v91 = (_DWORD *)((char *)v91 - v94);
                v96 = &v90[4 * v86 - 16];
                v97 = v83 - 16;
                v98 = v93 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v99 = *(_OWORD *)v97;
                  *(v96 - 1) = *((_OWORD *)v97 - 1);
                  *v96 = v99;
                  v96 -= 2;
                  v97 -= 32;
                  v98 -= 8;
                }
                while (v98);
                v83 = v95;
                if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_148:
                  do
                  {
                    v100 = *((_DWORD *)v83 - 1);
                    v83 -= 4;
                    *--v91 = v100;
                  }
                  while (v83 != v84);
                }
              }
              v8[15] = (int8x8_t)v91;
              v8[16] = (int8x8_t)v38;
              v8[17] = (int8x8_t)&v90[4 * v89];
              if (v84)
                operator delete(v84);
            }
            v1 = v107;
            v8[16] = (int8x8_t)v38;
            if (v36 == (_QWORD *)v107[6])
              goto LABEL_7;
          }
          if (v47 >> 61)
            goto LABEL_140;
          v48 = operator new(8 * v47);
          v49 = &v48[8 * v44];
          *v49 = *v36;
          v41 = (uint64_t)(v49 + 1);
          v50 = (char *)(v40 - v42);
          if (v40 == v42)
            goto LABEL_95;
LABEL_88:
          v51 = (unint64_t)(v50 - 8);
          if (v51 < 0x58)
            goto LABEL_149;
          if ((unint64_t)(v40 - v48 - v43) < 0x20)
            goto LABEL_149;
          v52 = (v51 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v54 = &v40[-v53];
          v49 = (_QWORD *)((char *)v49 - v53);
          v55 = &v48[8 * v44 - 16];
          v56 = v40 - 16;
          v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 4;
          }
          while (v57);
          v40 = v54;
          if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_149:
            do
            {
              v59 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *--v49 = v59;
            }
            while (v40 != v42);
          }
          v40 = *v106;
          goto LABEL_95;
        }
      }
LABEL_7:
      result = v101;
      v2 = *v102;
      if (!*v102)
        goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_223AE327C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  float32x4_t v5;
  int32x2_t *v6;
  const float *v12;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t *v20;
  int *v21;
  int v22;
  int32x2_t *v23;
  int *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  const float *v28;
  float32x4_t v29;
  float32x2_t *v30;
  int32x2_t *v31;
  _DWORD v32[88];
  int32x2_t v33;
  int v34;
  int32x2_t v35;
  int v36;

  result = sub_2241498F4(a2, 0);
  *(_DWORD *)(a2 + 64) = 1;
  v6 = *(int32x2_t **)(a1 + 224);
  if (v6)
  {
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      v12 = (const float *)(a1 + 4);
      v13 = (int32x2_t)vld1_dup_f32(v12);
      v35 = vmul_s32(v6[2], v13);
      v36 = 0;
      v30 = (float32x2_t *)(a1 + 8);
      v31 = &v35;
      sub_223AE5064((int *)&v33, (int **)&v30);
      sub_22414CF6C(0, (uint64_t)&v30);
      v19 = v30;
      v20 = (float32x2_t *)v31;
      v21 = (int *)v30;
      if (v30 == (float32x2_t *)v31)
        goto LABEL_9;
      do
      {
        v22 = v6[4].i16[0] - 2 * v6[3].i16[3];
        v14.f32[0] = (float)(v19[1].f32[0] * 0.2) * (float)(v22 & ~(v22 >> 31));
        v16.i32[0] = *(_DWORD *)(a1 + 88);
        v17.i32[0] = *(_DWORD *)(a1 + 100);
        v18.i32[0] = *(_DWORD *)(a1 + 112);
        v16 = vmla_f32(vmla_lane_f32(vmul_f32(v16, *v19), v17, *v19, 1), *(float32x2_t *)v14.f32, v18);
        *v19 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), COERCE_FLOAT(*v19)), *(float32x2_t *)(a1 + 92), *v19, 1), *(float32x2_t *)(a1 + 104), v14.f32[0]);
        v19[1].i32[0] = v16.i32[0];
        v19 = (float32x2_t *)((char *)v19 + 12);
      }
      while (v19 != v20);
      v24 = (int *)v30;
      v23 = v31;
      if (v30 != (float32x2_t *)v31)
        break;
LABEL_12:
      if (v6[4].i16[1])
      {
        v35 = (int32x2_t)0x3F80000000000000;
        v36 = 0;
        sub_22339E688((uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 2), (uint64_t *)&v35);
      }
      else if (v6[4].i16[0] < 1)
      {
        if (v6[3].i16[3] + v6[3].i16[2] < 1)
        {
          if (v6[4].i32[1] < 1)
          {
            v35 = 0;
            v36 = 0;
          }
          else
          {
            v35 = _D9;
            v36 = 1065353216;
          }
          sub_22339E688((uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 2), (uint64_t *)&v35);
        }
        else
        {
          v35 = 0;
          v36 = 1065353216;
          sub_22339E688((uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 2), (uint64_t *)&v35);
        }
      }
      else
      {
        v35 = (int32x2_t)1065353216;
        v36 = 0;
        sub_22339E688((uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 2), (uint64_t *)&v35);
      }
      v32[8] = 1;
      sub_22414E9E0(a2, (uint64_t)&v30);
      result = (uint64_t)sub_22316F8F4((uint64_t *)&v30);
      v6 = (int32x2_t *)*v6;
      if (!v6)
        goto LABEL_24;
    }
    v25 = (float)*(int *)(a1 + 4);
    do
    {
      v15.i64[0] = *(_QWORD *)v24;
      v15.i32[2] = v24[2];
      v15 = vmulq_n_f32(v15, v25);
      v24[2] = v15.i32[2];
      *(_QWORD *)v24 = v15.i64[0];
      v24 += 3;
    }
    while (v24 != (int *)v23);
    v21 = (int *)v30;
    v19 = (float32x2_t *)v31;
LABEL_9:
    if (v21 != (int *)v19)
    {
      *(float32x2_t *)v14.f32 = vcvt_f32_s32(v33);
      v14.f32[2] = (float)v34;
      do
      {
        v15.i64[0] = *(_QWORD *)v21;
        v15.i32[2] = v21[2];
        v15 = vaddq_f32(v14, v15);
        v21[2] = v15.i32[2];
        *(_QWORD *)v21 = v15.i64[0];
        v21 += 3;
      }
      while (v21 != (int *)v19);
    }
    goto LABEL_12;
  }
LABEL_24:
  v26 = *(_QWORD *)a2;
  v27 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v27)
  {
    v28 = (const float *)(a1 + 152);
    v29 = vld1q_dup_f32(v28);
    do
    {
      v5.i64[0] = *(_QWORD *)v26;
      v5.i32[2] = *(_DWORD *)(v26 + 8);
      v5 = vmulq_f32(v29, v5);
      *(_DWORD *)(v26 + 8) = v5.i32[2];
      *(_QWORD *)v26 = v5.i64[0];
      v26 += 12;
    }
    while (v26 != v27);
  }
  return result;
}

void sub_223AE35AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(v2);
  _Unwind_Resume(a1);
}

void sub_223AE35DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE35F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AE3604@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  float32x4_t v7;
  int32x2_t *i;
  const float *v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float v18;
  int *v19;
  _BYTE *v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float32x2_t *v26;
  int32x2_t *v27;
  _DWORD v28[88];
  int32x2_t v29;
  int v30;
  int32x2_t v31;
  float v32;

  result = sub_2241498F4(a3, 0);
  *(_DWORD *)(a3 + 64) = 1;
  for (i = *(int32x2_t **)(a1 + 224); i; i = (int32x2_t *)*i)
  {
    v9 = (const float *)(a1 + 4);
    v10 = (int32x2_t)vld1_dup_f32(v9);
    v31 = vmul_s32(i[2], v10);
    v32 = 0.0;
    v26 = (float32x2_t *)(a1 + 8);
    v27 = &v31;
    result = (uint64_t)sub_223AE5064((int *)&v29, (int **)&v26);
    if (i[3].i16[3] + i[3].i16[2] + i[4].i32[1] + i[4].u16[1] >= 1)
    {
      sub_22414CF6C(0, (uint64_t)&v26);
      if (a2 >= 2
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1712, (uint64_t)"smooth < voxel.densities.size()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v26;
      v17 = (float32x2_t *)v27;
      if (v26 == (float32x2_t *)v27)
        goto LABEL_14;
      v18 = *(float *)&i[8].i32[a2];
      do
      {
        v12.f32[0] = v18 * (float)(v16[1].f32[0] * 0.1);
        v13.i32[0] = *(_DWORD *)(a1 + 88);
        v14.i32[0] = *(_DWORD *)(a1 + 100);
        v15.i32[0] = *(_DWORD *)(a1 + 112);
        v13 = vmla_f32(vmla_lane_f32(vmul_f32(v13, *v16), v14, *v16, 1), *(float32x2_t *)v12.f32, v15);
        *v16 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), COERCE_FLOAT(*v16)), *(float32x2_t *)(a1 + 92), *v16, 1), *(float32x2_t *)(a1 + 104), v12.f32[0]);
        v16[1].i32[0] = v13.i32[0];
        v16 = (float32x2_t *)((char *)v16 + 12);
      }
      while (v16 != v17);
      v19 = (int *)v26;
      v16 = (float32x2_t *)v27;
      if (v26 == (float32x2_t *)v27)
      {
LABEL_14:
        v20 = v16;
      }
      else
      {
        *(float32x2_t *)v11.f32 = vcvt_f32_s32(v29);
        v11.f32[2] = (float)v30;
        do
        {
          v12.i64[0] = *(_QWORD *)v19;
          v12.i32[2] = v19[2];
          v12 = vaddq_f32(v11, v12);
          v19[2] = v12.i32[2];
          *(_QWORD *)v19 = v12.i64[0];
          v19 += 3;
        }
        while (v19 != (int *)v16);
        v16 = v26;
        v20 = v27;
      }
      v21 = i[9].i32[1];
      *(float *)v31.i32 = (float)(2341 * (v21 + 1) % 7u) / 7.0;
      *(float *)&v31.i32[1] = (float)((7162 * v21 + 50134) % 0x4Au) / 74.0;
      v32 = (float)(71 * (v21 + 1) % 5u) / 5.0;
      sub_22339E688((uint64_t)v28, 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)v16) >> 2), (uint64_t *)&v31);
      v28[8] = 1;
      sub_22414E9E0(a3, (uint64_t)&v26);
      result = (uint64_t)sub_22316F8F4((uint64_t *)&v26);
    }
  }
  v22 = *(_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 != v23)
  {
    v24 = (const float *)(a1 + 152);
    v25 = vld1q_dup_f32(v24);
    do
    {
      v7.i64[0] = *(_QWORD *)v22;
      v7.i32[2] = *(_DWORD *)(v22 + 8);
      v7 = vmulq_f32(v25, v7);
      *(_DWORD *)(v22 + 8) = v7.i32[2];
      *(_QWORD *)v22 = v7.i64[0];
      v22 += 12;
    }
    while (v22 != v23);
  }
  return result;
}

void sub_223AE391C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(v2);
  _Unwind_Resume(a1);
}

void sub_223AE3958(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AE396C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int32x2_t *v7;
  int **v8;
  const float *v14;
  int32x2_t v15;
  float32x4_t v16;
  signed int v17;
  int32x2_t v18;
  int v19;
  int v20;
  int32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  float32x4_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x2_t v68;
  int v69;
  int **v70;
  int v71;
  int ***v72;
  int ***v73;

  result = sub_2241498F4(a3, 0);
  *(_DWORD *)(a3 + 64) = 1;
  v7 = *(int32x2_t **)(a1 + 224);
  if (v7)
  {
    v61 = a1;
    v62 = (int *)(a1 + 8);
    v60 = a2;
    v64 = a3 + 24;
    v8 = (int **)(a3 + 32);
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      v14 = (const float *)(a1 + 4);
      v15 = (int32x2_t)vld1_dup_f32(v14);
      v70 = (int **)vmul_s32(v7[2], v15);
      v71 = 0;
      v72 = (int ***)v62;
      v73 = &v70;
      result = (uint64_t)sub_223AE5064((int *)&v68, (int **)&v72);
      if (v7[9].i8[v60] != 13)
      {
        v17 = *(_DWORD *)(v61 + 4);
        v18 = v68;
        v19 = v69;
        v16.i32[0] = *(_DWORD *)(v61 + 152);
        v66 = v16;
        v70 = (int **)vmul_s32(vadd_s32(v7[2], *(int32x2_t *)&dword_224660A10[3 * v7[9].u8[v60]]), vdup_n_s32(v17));
        v71 = 0;
        v72 = (int ***)v62;
        v73 = &v70;
        result = (uint64_t)sub_223AE5064((int *)&v68, (int **)&v72);
        v20 = 0;
        *(float *)v21.i32 = (float)v17 * 0.5;
        *(float32x2_t *)v22.f32 = vcvt_f32_s32(v18);
        v22.f32[2] = (float)v19;
        v23 = vaddq_f32((float32x4_t)vdupq_lane_s32(v21, 0), v22);
        v22.i32[3] = v66.i32[3];
        v24 = vmulq_n_f32(v23, v66.f32[0]);
        v23.f32[0] = (float)*(int *)(v61 + 4) * 0.5;
        *(float32x2_t *)v22.f32 = vcvt_f32_s32(v68);
        v22.f32[2] = (float)v69;
        v65 = vsubq_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0), v22), *(float *)(v61 + 152)), v24);
        v67 = v24;
        do
        {
          v26 = vaddq_f32(v67, vmulq_n_f32(v65, (float)v20 / 20.0));
          v28 = *(_QWORD *)(a3 + 8);
          v27 = *(_QWORD *)(a3 + 16);
          if (v28 >= v27)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(_QWORD *)a3) >> 2);
            v31 = v30 + 1;
            if (v30 + 1 > 0x1555555555555555)
              sub_22316E078();
            v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a3) >> 2);
            if (2 * v32 > v31)
              v31 = 2 * v32;
            if (v32 >= 0xAAAAAAAAAAAAAAALL)
              v33 = 0x1555555555555555;
            else
              v33 = v31;
            if (v33)
            {
              v63 = v26;
              LODWORD(v70) = v33;
              v34 = *(unsigned int *)(a3 + 28);
              if ((_DWORD)v34 == -1)
                sub_22316DD70();
              v72 = &v70;
              result = ((uint64_t (*)(int ****, uint64_t))off_24EC5FA18[v34])(&v72, v64);
              v26 = v63;
            }
            else
            {
              result = 0;
              v35 = 0;
            }
            v36 = result + 12 * v30;
            *(_QWORD *)v36 = v26.i64[0];
            *(_DWORD *)(v36 + 8) = v26.i32[2];
            v38 = *(int **)a3;
            v37 = *(int **)(a3 + 8);
            v39 = v36;
            if (v37 != *(int **)a3)
            {
              do
              {
                v40 = *(_QWORD *)(v37 - 3);
                v37 -= 3;
                v41 = v37[2];
                *(_QWORD *)(v39 - 12) = v40;
                v39 -= 12;
                *(_DWORD *)(v39 + 8) = v41;
              }
              while (v37 != v38);
              v37 = *(int **)a3;
            }
            v29 = v36 + 12;
            *(_QWORD *)a3 = v39;
            *(_QWORD *)(a3 + 8) = v36 + 12;
            v42 = *(_QWORD *)(a3 + 16);
            *(_QWORD *)(a3 + 16) = result + 12 * v35;
            if (v37)
            {
              v72 = (int ***)v37;
              LODWORD(v73) = -1431655765 * ((unint64_t)(v42 - (_QWORD)v37) >> 2);
              v43 = *(unsigned int *)(a3 + 28);
              if ((_DWORD)v43 == -1)
                sub_22316DD70();
              v70 = (int **)&v72;
              result = ((uint64_t (*)(int ***, uint64_t))off_24EC5FA08[v43])(&v70, v64);
            }
          }
          else
          {
            *(_DWORD *)(v28 + 8) = v26.i32[2];
            *(_QWORD *)v28 = v26.i64[0];
            v29 = v28 + 12;
          }
          *(_QWORD *)(a3 + 8) = v29;
          v45 = *(_QWORD *)(a3 + 40);
          v44 = *(_QWORD *)(a3 + 48);
          if (v45 < v44)
          {
            *(_QWORD *)v45 = _D10;
            *(_DWORD *)(v45 + 8) = 1065353216;
            v25 = v45 + 12;
          }
          else
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)*v8) >> 2);
            v47 = v46 + 1;
            if (v46 + 1 > 0x1555555555555555)
              sub_22316E078();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)*v8) >> 2);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0xAAAAAAAAAAAAAAALL)
              v49 = 0x1555555555555555;
            else
              v49 = v47;
            if (v49)
            {
              LODWORD(v70) = v49;
              v50 = *(unsigned int *)(a3 + 60);
              if ((_DWORD)v50 == -1)
                sub_22316DD70();
              v72 = &v70;
              result = ((uint64_t (*)(int ****, uint64_t))off_24EC5FA18[v50])(&v72, a3 + 56);
            }
            else
            {
              result = 0;
              v51 = 0;
            }
            v52 = result + 12 * v46;
            *(_QWORD *)v52 = _D10;
            *(_DWORD *)(v52 + 8) = 1065353216;
            v54 = *(int **)(a3 + 32);
            v53 = *(int **)(a3 + 40);
            v55 = v52;
            if (v53 != v54)
            {
              do
              {
                v56 = *(_QWORD *)(v53 - 3);
                v53 -= 3;
                v57 = v53[2];
                *(_QWORD *)(v55 - 12) = v56;
                v55 -= 12;
                *(_DWORD *)(v55 + 8) = v57;
              }
              while (v53 != v54);
              v53 = *v8;
            }
            v25 = v52 + 12;
            *(_QWORD *)(a3 + 32) = v55;
            *(_QWORD *)(a3 + 40) = v52 + 12;
            v58 = *(_QWORD *)(a3 + 48);
            *(_QWORD *)(a3 + 48) = result + 12 * v51;
            if (v53)
            {
              v72 = (int ***)v53;
              LODWORD(v73) = -1431655765 * ((unint64_t)(v58 - (_QWORD)v53) >> 2);
              v59 = *(unsigned int *)(a3 + 60);
              if ((_DWORD)v59 == -1)
                sub_22316DD70();
              v70 = (int **)&v72;
              result = ((uint64_t (*)(int ***, uint64_t))off_24EC5FA08[v59])(&v70, a3 + 56);
            }
          }
          *(_QWORD *)(a3 + 40) = v25;
          ++v20;
        }
        while (v20 != 20);
      }
      v7 = (int32x2_t *)*v7;
      a1 = v61;
    }
    while (v7);
  }
  return result;
}

void sub_223AE3E2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE3E40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE3E60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE3E74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE3E8C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223AE3EA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AE3EB4@<X0>(uint64_t a1@<X0>, float a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result;
  float32x4_t v6;
  uint64_t *i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  int *v26;
  int *v27;
  float v28;
  int *v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const float *v34;
  float32x4_t v35;
  uint64_t *v38;
  int *v39;
  int *v40;
  _DWORD v41[88];
  int32x2_t v42;
  int v43;
  uint64_t v44;
  float v45;

  result = sub_2241498F4(a4, 0);
  v38 = (uint64_t *)result;
  *(_DWORD *)(result + 64) = 1;
  for (i = *(uint64_t **)(a1 + 176); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 24))
    {
      v8 = *((_DWORD *)i + 4);
      if (*((_DWORD *)i + 75) || (a3 & 1) == 0)
      {
        v9 = *((int *)i + 10);
        v10 = *((int *)i + 8);
        if ((_DWORD)v10 == (_DWORD)v9 + 1)
        {
          v11 = 0;
        }
        else
        {
          v11 = 0;
          do
          {
            v13 = *((int *)i + 9);
            v14 = *((int *)i + 7);
            if ((_DWORD)v14 != (_DWORD)v13 + 1)
            {
              v15 = *(int8x8_t *)(a1 + 216);
              if (v15)
              {
LABEL_16:
                v16 = (73856093 * v14) ^ (19349669 * v10);
                v17 = (uint8x8_t)vcnt_s8(v15);
                v17.i16[0] = vaddlv_u8(v17);
                if (v17.u32[0] > 1uLL)
                {
                  v18 = (73856093 * v14) ^ (19349669 * v10);
                  if (v16 >= *(_QWORD *)&v15)
                    v18 = v16 % *(_QWORD *)&v15;
                }
                else
                {
                  v18 = v16 & (*(_QWORD *)&v15 - 1);
                }
                v19 = *(uint64_t ***)(*(_QWORD *)(a1 + 208) + 8 * v18);
                if (v19)
                {
                  v20 = *v19;
                  if (v20)
                  {
                    if (v17.u32[0] < 2uLL)
                    {
                      v21 = *(_QWORD *)&v15 - 1;
                      while (1)
                      {
                        v22 = v20[1];
                        if (v16 == v22)
                        {
                          if (*((_DWORD *)v20 + 4) == (_DWORD)v14
                            && *((_DWORD *)v20 + 5) == (_DWORD)v10
                            && !*((_DWORD *)v20 + 6))
                          {
                            goto LABEL_30;
                          }
                        }
                        else if ((v22 & v21) != v18)
                        {
                          goto LABEL_49;
                        }
                        v20 = (uint64_t *)*v20;
                        if (!v20)
                          goto LABEL_49;
                      }
                    }
                    do
                    {
                      v31 = v20[1];
                      if (v16 == v31)
                      {
                        if (*((_DWORD *)v20 + 4) == (_DWORD)v14
                          && *((_DWORD *)v20 + 5) == (_DWORD)v10
                          && !*((_DWORD *)v20 + 6))
                        {
LABEL_30:
                          if (*((_DWORD *)v20 + 19) == v8)
                          {
                            v23 = *(_DWORD *)(a1 + 4);
                            LODWORD(v44) = v23 * v14;
                            HIDWORD(v44) = v23 * v10;
                            v45 = a2;
                            v39 = (int *)(a1 + 8);
                            v40 = (int *)&v44;
                            sub_223AE5064((int *)&v42, &v39);
                            sub_22414CF6C(0, (uint64_t)&v39);
                            v26 = v39;
                            v27 = v40;
                            if (v39 == v40)
                              goto LABEL_47;
                            v28 = (float)*(int *)(a1 + 4);
                            do
                            {
                              v25.i64[0] = *(_QWORD *)v26;
                              v25.i32[2] = v26[2];
                              v25 = vmulq_n_f32(v25, v28);
                              v26[2] = v25.i32[2];
                              *(_QWORD *)v26 = v25.i64[0];
                              v26 += 3;
                            }
                            while (v26 != v27);
                            v29 = v39;
                            v26 = v40;
                            if (v39 == v40)
                            {
LABEL_47:
                              v30 = v26;
                            }
                            else
                            {
                              *(float32x2_t *)v24.f32 = vcvt_f32_s32(v42);
                              v24.f32[2] = (float)v43;
                              do
                              {
                                v25.i64[0] = *(_QWORD *)v29;
                                v25.i32[2] = v29[2];
                                v25 = vaddq_f32(v24, v25);
                                v29[2] = v25.i32[2];
                                *(_QWORD *)v29 = v25.i64[0];
                                v29 += 3;
                              }
                              while (v29 != v26);
                              v26 = v39;
                              v30 = v40;
                            }
                            *(float *)&v44 = (float)((2341 * v8 + 2341) % 7u) / 7.0;
                            *((float *)&v44 + 1) = (float)((7162 * v8 + 50134) % 0x4Au) / 74.0;
                            v45 = (float)((71 * v8 + 71) % 5u) / 5.0;
                            sub_22339E688((uint64_t)v41, 0xAAAAAAAAAAAAAAABLL * (v30 - v26), &v44);
                            v41[8] = 1;
                            sub_22414E9E0((uint64_t)v38, (uint64_t)&v39);
                            ++v11;
                            result = (uint64_t)sub_22316F8F4((uint64_t *)&v39);
                          }
                          break;
                        }
                      }
                      else
                      {
                        if (v31 >= *(_QWORD *)&v15)
                          v31 %= *(_QWORD *)&v15;
                        if (v31 != v18)
                          break;
                      }
                      v20 = (uint64_t *)*v20;
                    }
                    while (v20);
                  }
                }
LABEL_49:
                while (v14 != v13)
                {
                  ++v14;
                  v15 = *(int8x8_t *)(a1 + 216);
                  if (v15)
                    goto LABEL_16;
                }
              }
            }
          }
          while (v10++ != v9);
        }
        if (v11 != *((_DWORD *)i + 11))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1787, (uint64_t)"added_count == area.SizeInVoxels()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            abort();
        }
      }
    }
  }
  v32 = *v38;
  v33 = v38[1];
  if (*v38 != v33)
  {
    v34 = (const float *)(a1 + 152);
    v35 = vld1q_dup_f32(v34);
    do
    {
      v6.i64[0] = *(_QWORD *)v32;
      v6.i32[2] = *(_DWORD *)(v32 + 8);
      v6 = vmulq_f32(v35, v6);
      *(_DWORD *)(v32 + 8) = v6.i32[2];
      *(_QWORD *)v32 = v6.i64[0];
      v32 += 12;
    }
    while (v32 != v33);
  }
  return result;
}

void sub_223AE4330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  sub_22316F8F4(a14);
  _Unwind_Resume(a1);
}

void sub_223AE4344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  sub_22316F8F4(a14);
  _Unwind_Resume(a1);
}

void sub_223AE4358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(a7);
  _Unwind_Resume(a1);
}

void sub_223AE4378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  sub_22316F8F4(a14);
  _Unwind_Resume(a1);
}

void sub_223AE438C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float32x4_t v4;
  uint64_t *v5;
  int *v11;
  int *v12;
  uint64_t *i;
  int32x2_t v14;
  uint64_t **v15;
  _WORD *v16;
  int *v17;
  __int16 v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  int *v29;
  _QWORD *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  float32x2_t v40;
  int32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t *j;
  float32x2_t *v47;
  float32x2_t *k;
  float32x2_t v49;
  float32x2_t v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  _DWORD *v54;
  _DWORD *v55;
  int *v56;
  float32x2_t *v57;
  float32x2_t *m;
  int v59;
  uint64_t v60;
  uint64_t v61;
  const float *v62;
  float32x4_t v63;
  uint64_t *v64;
  uint64_t v65;
  int *v66;
  int v67;
  int32x2_t v68;
  int v69;
  float32x2_t *v70;
  float32x2_t *v71;
  _DWORD v72[88];
  void *v73[2];
  void *__p[2];
  _DWORD v75[91];
  _DWORD v76[3];
  int *v77;
  float v78[4];

  v3 = a2;
  sub_2241498F4(a2, 0);
  *(_DWORD *)(v3 + 64) = 1;
  v5 = *(uint64_t **)(a1 + 176);
  if (!v5)
    goto LABEL_63;
  __asm { FMOV            V8.2S, #1.0 }
  v65 = v3;
  while (2)
  {
    if (!*((_BYTE *)v5 + 24))
      goto LABEL_3;
    *(_OWORD *)v73 = 0u;
    *(_OWORD *)__p = 0u;
    v75[0] = 1065353216;
    v11 = (int *)v5[33];
    v64 = v5;
    if (!v11)
    {
      v12 = 0;
      v73[0] = 0;
      goto LABEL_40;
    }
    do
    {
      for (i = (uint64_t *)*((_QWORD *)v11 + 6); i; i = (uint64_t *)*i)
      {
        v14 = *(int32x2_t *)((char *)i + 20);
        v70 = (float32x2_t *)(i + 2);
        v15 = sub_223AEF740((uint64_t)v73, (unsigned __int16 *)i + 8, (uint64_t)&unk_2245BA939, (_WORD **)&v70);
        *(uint64_t **)((char *)v15 + 20) = (uint64_t *)vadd_s32(*(int32x2_t *)((char *)v15 + 20), v14);
      }
      v11 = *(int **)v11;
    }
    while (v11);
    v16 = __p[0];
    if (!__p[0])
    {
      v11 = 0;
      v12 = 0;
      v31 = v73[0];
      v73[0] = 0;
      if (v31)
        goto LABEL_39;
      goto LABEL_40;
    }
    v11 = 0;
    v12 = 0;
    v17 = 0;
    do
    {
      while (1)
      {
        v66 = v11;
        v18 = v16[8];
        v19 = *((_DWORD *)v16 + 5);
        v20 = *((_DWORD *)v16 + 6);
        if (v12 >= v17)
          break;
        *(_WORD *)v12 = v18;
        v12[1] = v19;
        v12[2] = v20;
        v12 += 3;
        v11 = v66;
        v16 = *(_WORD **)v16;
        if (!v16)
          goto LABEL_34;
      }
      v21 = 0xAAAAAAAAAAAAAAABLL * (v12 - v66) + 1;
      if (v21 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * (v17 - v66) > v21)
        v21 = 0x5555555555555556 * (v17 - v66);
      if (0xAAAAAAAAAAAAAAABLL * (v17 - v66) >= 0xAAAAAAAAAAAAAAALL)
        v22 = 0x1555555555555555;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 > 0x1555555555555555)
          sub_223174E94();
        v23 = (char *)operator new(12 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = (int *)&v23[4 * (v12 - v66)];
      *(_WORD *)v24 = v18;
      v24[1] = v19;
      v24[2] = v20;
      v11 = v24;
      if (v12 == v66)
      {
        v3 = v65;
        v25 = v66;
        v17 = (int *)&v23[12 * v22];
        v12 = v24 + 3;
        if (v66)
          goto LABEL_29;
      }
      else
      {
        v3 = v65;
        v25 = v66;
        do
        {
          v26 = *(_QWORD *)(v12 - 3);
          v12 -= 3;
          v27 = v12[2];
          *(_QWORD *)(v11 - 3) = v26;
          v11 -= 3;
          v11[2] = v27;
        }
        while (v12 != v66);
        v17 = (int *)&v23[12 * v22];
        v12 = v24 + 3;
        if (v66)
LABEL_29:
          operator delete(v25);
      }
      v16 = *(_WORD **)v16;
    }
    while (v16);
LABEL_34:
    v28 = __p[0];
    if (__p[0])
    {
      v29 = v11;
      do
      {
        v30 = (_QWORD *)*v28;
        operator delete(v28);
        v28 = v30;
      }
      while (v30);
      v11 = v29;
    }
    v31 = v73[0];
    v73[0] = 0;
    if (v31)
LABEL_39:
      operator delete(v31);
LABEL_40:
    v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v12 - v11));
    if (v12 == v11)
      v33 = 0;
    else
      v33 = v32;
    sub_223AEB4FC((unint64_t)v11, v12, v33, 1);
    v34 = *(uint64_t *)((char *)v64 + 28);
    v35 = *(uint64_t *)((char *)v64 + 36);
    v36 = HIDWORD(v35) + HIDWORD(v34);
    if (HIDWORD(v35) + HIDWORD(v34) < 0 != __OFADD__(HIDWORD(v35), HIDWORD(v34)))
      ++v36;
    if (v12 != v11)
    {
      v67 = v36 >> 1;
      _VF = __OFADD__((_DWORD)v35, (_DWORD)v34);
      v37 = v35 + v34;
      if (v37 < 0 != _VF)
        ++v37;
      v38 = v37 >> 1;
      v39 = v11;
      do
      {
        sub_22414CF6C(0, (uint64_t)v73);
        sub_22414CF6C(0, (uint64_t)&v70);
        v45 = (float32x2_t *)v73[0];
        for (j = (float32x2_t *)v73[1]; v45 != j; v45 = (float32x2_t *)((char *)v45 + 12))
        {
          v40.f32[0] = (float)((float)(v45[1].f32[0] * 0.02) * (float)v39[2]) + 1.0;
          v41 = (int32x2_t)*v45;
          v42.i32[0] = *(_DWORD *)(a1 + 88);
          v43.i32[0] = *(_DWORD *)(a1 + 100);
          v44.i32[0] = *(_DWORD *)(a1 + 112);
          v42 = vmla_f32(vmla_lane_f32(vmul_f32(v42, *v45), v43, *v45, 1), v40, v44);
          *v45 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), COERCE_FLOAT(*v45)), *(float32x2_t *)(a1 + 92), *v45, 1), *(float32x2_t *)(a1 + 104), v40.f32[0]);
          v45[1].i32[0] = v42.i32[0];
        }
        v47 = v70;
        for (k = v71; v47 != k; v47 = (float32x2_t *)((char *)v47 + 12))
        {
          v41.i32[0] = 1017370378;
          v49 = (float32x2_t)vdup_lane_s32(v41, 0);
          v49.f32[0] = v47[1].f32[0] * 0.02;
          v50 = vmul_f32(v49, vcvt_f32_u32(*(uint32x2_t *)(v39 + 1)));
          v50.f32[0] = (float)(v50.f32[1] + 1.0) + v50.f32[0];
          v41 = (int32x2_t)*v47;
          v42.i32[0] = *(_DWORD *)(a1 + 88);
          v43.i32[0] = *(_DWORD *)(a1 + 100);
          v44.i32[0] = *(_DWORD *)(a1 + 112);
          v42 = vmla_f32(vmla_lane_f32(vmul_f32(v42, *v47), v43, *v47, 1), v50, v44);
          *v47 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 80), COERCE_FLOAT(*v47)), *(float32x2_t *)(a1 + 92), *v47, 1), *(float32x2_t *)(a1 + 104), v50.f32[0]);
          v47[1].i32[0] = v42.i32[0];
        }
        v51 = *(_DWORD *)(a1 + 4);
        v76[0] = v51 * v38;
        v76[1] = v51 * v67;
        v76[2] = 0;
        v77 = (int *)(a1 + 8);
        *(_QWORD *)v78 = v76;
        sub_223AE5064((int *)&v68, &v77);
        *(float32x2_t *)v53.f32 = vcvt_f32_s32(v68);
        v53.f32[2] = (float)v69;
        v54 = v73[0];
        v55 = v73[1];
        if (v73[0] != v73[1])
        {
          do
          {
            v52.i64[0] = *(_QWORD *)v54;
            v52.i32[2] = v54[2];
            v52 = vaddq_f32(v53, v52);
            v54[2] = v52.i32[2];
            *(_QWORD *)v54 = v52.i64[0];
            v54 += 3;
          }
          while (v54 != v55);
          *(float32x2_t *)v53.f32 = vcvt_f32_s32(v68);
          v53.f32[2] = (float)v69;
        }
        v56 = v11;
        v57 = v70;
        for (m = v71; v57 != m; v57 = (float32x2_t *)((char *)v57 + 12))
        {
          *(float32x2_t *)v52.f32 = *v57;
          v52.i32[2] = v57[1].i32[0];
          v52 = vaddq_f32(v53, v52);
          v57[1].i32[0] = v52.i32[2];
          *v57 = *(float32x2_t *)v52.f32;
        }
        v59 = *(unsigned __int16 *)v39;
        v77 = _D8;
        v78[0] = 1.0;
        sub_22339E688((uint64_t)v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v73[1] - (char *)v73[0]) >> 2), (uint64_t *)&v77);
        v75[8] = 1;
        *(float *)&v77 = (float)(int)(2341 * (v59 + 1)
                                    - 7 * ((613566757 * (unint64_t)(2341 * (v59 + 1))) >> 32))
                       / 7.0;
        *((float *)&v77 + 1) = (float)(int)(7162 * v59
                                          + 50134
                                          - 74
                                          * (((464320789
                                                           * (unint64_t)(7162 * v59 + 50134)) >> 32) >> 3))
                             / 74.0;
        v78[0] = (float)(int)(71 * (v59 + 1) - 5
                                             * ((858993460 * (unint64_t)(71 * (v59 + 1))) >> 32))
               / 5.0;
        sub_22339E688((uint64_t)v72, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 2), (uint64_t *)&v77);
        v72[8] = 1;
        v3 = v65;
        v11 = v56;
        sub_22414E9E0(v65, (uint64_t)v73);
        sub_22414E9E0(v65, (uint64_t)&v70);
        ++v38;
        sub_22316F8F4((uint64_t *)&v70);
        sub_22316F8F4((uint64_t *)v73);
        v39 += 3;
      }
      while (v39 != v12);
    }
    v5 = v64;
    if (v11)
      operator delete(v11);
LABEL_3:
    v5 = (uint64_t *)*v5;
    if (v5)
      continue;
    break;
  }
LABEL_63:
  v60 = *(_QWORD *)v3;
  v61 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 != v61)
  {
    v62 = (const float *)(a1 + 152);
    v63 = vld1q_dup_f32(v62);
    do
    {
      v4.i64[0] = *(_QWORD *)v60;
      v4.i32[2] = *(_DWORD *)(v60 + 8);
      v4 = vmulq_f32(v63, v4);
      *(_DWORD *)(v60 + 8) = v4.i32[2];
      *(_QWORD *)v60 = v4.i64[0];
      v60 += 12;
    }
    while (v60 != v61);
  }
}

void sub_223AE4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  _QWORD *__p;
  _QWORD *v68;
  _QWORD *v69;

  v68 = __p;
  if (__p)
  {
    do
    {
      v69 = (_QWORD *)*v68;
      operator delete(v68);
      v68 = v69;
    }
    while (v69);
  }
  if (a65)
    operator delete(a65);
  if (a14)
  {
    operator delete(a14);
    sub_22316F8F4(a13);
    _Unwind_Resume(a1);
  }
  sub_22316F8F4(a13);
  _Unwind_Resume(a1);
}

void sub_223AE4AD8(_QWORD *a1, int32x2_t *a2, int *a3, __int32 a4, __int8 a5, __int32 a6)
{
  int32x2_t *v12;
  __int32 v13;
  int v14;
  int v15;
  int v16;
  __int32 v17;
  char **v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;

  v12 = (int32x2_t *)sub_22393835C((_QWORD *)(*a1 + 208), a3);
  if (!v12
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 425, (uint64_t)"writable_voxel_it != voxels_.end()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| v12[12].i8[4]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 428, (uint64_t)"!add_voxel.visited", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12[9].i8[2] = a5;
  v12[9].i32[1] = a4;
  v12[12].i32[0] = a6;
  v12[12].i8[4] = 1;
  v14 = *a3;
  v13 = a3[1];
  v15 = a2->i32[1];
  v16 = a2[1].i32[0];
  if (*a3 < v15)
    v15 = *a3;
  v17 = a2[2].i32[0];
  if (a2[1].i32[1] > v14)
    v14 = a2[1].i32[1];
  if (v13 < v16)
    v16 = a3[1];
  a2->i32[1] = v15;
  a2[1].i32[0] = v16;
  if (v17 > v13)
    v13 = v17;
  a2[1].i32[1] = v14;
  a2[2].i32[0] = v13;
  a2[33].i32[0] += v12[10].i32[0];
  a2[33].i32[1] += v12[10].i32[1];
  a2[34].i32[0] += v12[11].i32[0];
  a2[34].i32[1] += v12[4].u16[1];
  ++a2[2].i32[1];
  a2[54] = vadd_s32(a2[54], v12[5]);
  v18 = (char **)a1[1];
  v20 = v18[1];
  v19 = (unint64_t)v18[2];
  if ((unint64_t)v20 >= v19)
  {
    v23 = *v18;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *v18) >> 2);
    v25 = v24 + 1;
    if (v24 + 1 > 0x1555555555555555)
      sub_22316E078();
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v23) >> 2);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 > 0x1555555555555555)
        sub_223174E94();
      v28 = (char *)operator new(12 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[12 * v24];
    *(_QWORD *)v29 = *(_QWORD *)a3;
    *((_DWORD *)v29 + 2) = a3[2];
    v22 = v29 + 12;
    if (v20 != v23)
    {
      do
      {
        v30 = *(_QWORD *)(v20 - 12);
        v20 -= 12;
        v31 = *((_DWORD *)v20 + 2);
        *(_QWORD *)(v29 - 12) = v30;
        v29 -= 12;
        *((_DWORD *)v29 + 2) = v31;
      }
      while (v20 != v23);
      v20 = *v18;
    }
    *v18 = v29;
    v18[1] = v22;
    v18[2] = &v28[12 * v27];
    if (v20)
      operator delete(v20);
  }
  else
  {
    v21 = *(_QWORD *)a3;
    *((_DWORD *)v20 + 2) = a3[2];
    *(_QWORD *)v20 = v21;
    v22 = v20 + 12;
  }
  v18[1] = v22;
}

char *sub_223AE4D54(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0x6DB6DB6DB6DB6DB7 * ((v17 - result) >> 3);
    if (v18 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          if (v6 != (uint64_t *)v25)
          {
            v26 = *v6;
            *((_DWORD *)v25 + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v25 = v26;
            v27 = *(uint64_t *)((char *)v6 + 12);
            *((_DWORD *)v25 + 5) = *((_DWORD *)v6 + 5);
            *(_QWORD *)(v25 + 12) = v27;
            v25[24] = *((_BYTE *)v6 + 24);
            v28 = *(uint64_t *)((char *)v6 + 28);
            *((_DWORD *)v25 + 9) = *((_DWORD *)v6 + 9);
            *(_QWORD *)(v25 + 28) = v28;
          }
          *(_OWORD *)(v25 + 40) = *(_OWORD *)(v6 + 5);
          v6 += 7;
          v25 += 56;
          v24 += 56;
        }
        while (v6 != a3);
      }
      *v16 = v24;
    }
    else
    {
      v19 = &a2[7 * v18];
      if (v15 != result)
      {
        v20 = 56 * v18;
        do
        {
          if (v6 != (uint64_t *)result)
          {
            v21 = *v6;
            *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)result = v21;
            v22 = *(uint64_t *)((char *)v6 + 12);
            *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
            *(_QWORD *)(result + 12) = v22;
            result[24] = *((_BYTE *)v6 + 24);
            v23 = *(uint64_t *)((char *)v6 + 28);
            *((_DWORD *)result + 9) = *((_DWORD *)v6 + 9);
            *(_QWORD *)(result + 28) = v23;
          }
          *(_OWORD *)(result + 40) = *(_OWORD *)(v6 + 5);
          v6 += 7;
          result += 56;
          v20 -= 56;
        }
        while (v20);
        result = *v16;
      }
      v29 = result;
      if (v19 != a3)
      {
        v29 = result;
        v30 = result;
        do
        {
          v31 = *v19;
          *((_DWORD *)v30 + 2) = *((_DWORD *)v19 + 2);
          *(_QWORD *)v30 = v31;
          v32 = *(uint64_t *)((char *)v19 + 12);
          *((_DWORD *)v30 + 5) = *((_DWORD *)v19 + 5);
          *(_QWORD *)(v30 + 12) = v32;
          v30[24] = *((_BYTE *)v19 + 24);
          v33 = *(uint64_t *)((char *)v19 + 28);
          *((_DWORD *)v30 + 9) = *((_DWORD *)v19 + 9);
          *(_QWORD *)(v30 + 28) = v33;
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v19 + 5);
          v29 += 56;
          v19 += 7;
          v30 += 56;
        }
        while (v19 != a3);
      }
      *v16 = v29;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_32;
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492)
LABEL_32:
      sub_22316E078();
    v13 = 56 * v12;
    result = (char *)operator new(56 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        *((_DWORD *)v14 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v14 + 12) = *(uint64_t *)((char *)v6 + 12);
        *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
        v14[24] = *((_BYTE *)v6 + 24);
        *(_QWORD *)(v14 + 28) = *(uint64_t *)((char *)v6 + 28);
        *((_DWORD *)v14 + 9) = *((_DWORD *)v6 + 9);
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v6 + 5);
        v14 += 56;
        v6 += 7;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

int *sub_223AE5064(int *result, int **a2)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    result = (int *)sub_223AE5064(&v11);
    *(_QWORD *)v2 = v11;
    v2[2] = v12;
  }
  else
  {
    v5 = *v4 * *v3;
    *result = v5;
    v6 = v5 + v4[1] * v3[3];
    *result = v6;
    *result = v6 + v4[2] * v3[6];
    v7 = *v4 * v3[1];
    result[1] = v7;
    v8 = v7 + v4[1] * v3[4];
    result[1] = v8;
    result[1] = v8 + v4[2] * v3[7];
    v9 = *v4 * v3[2];
    result[2] = v9;
    v10 = v9 + v4[1] * v3[5];
    result[2] = v10;
    result[2] = v10 + v4[2] * v3[8];
  }
  return result;
}

uint64_t sub_223AE5158(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = (v3 + 3);
    v5 = -3 - v3;
    v6 = v3 & 0xFFFFFFFF00000000 | v4;
    v7 = HIDWORD(v3);
    v8 = v6;
    LODWORD(v9) = v3 + 3;
    if ((v4 & 0x80000000) != 0)
    {
      if ((int)v4 <= -3)
        v11 = -3;
      else
        v11 = v3 + 3;
      v12 = ((__PAIR64__(v11 + v5, v4) - 4294967293u) >> 32) / 3;
      if (v4 < 0xFFFFFFFD)
        ++v12;
      v9 = (v3 + 3 * v12 + 6);
      v8 = v9 | ((unint64_t)(~v12 + HIDWORD(v3)) << 32);
      if ((int)v9 < 3)
      {
LABEL_5:
        v10 = HIDWORD(v8);
        if ((_DWORD)v3 == (_DWORD)v8)
          goto LABEL_17;
        goto LABEL_18;
      }
    }
    else if ((int)v9 < 3)
    {
      goto LABEL_5;
    }
    v13 = HIDWORD(v8);
    if ((int)v9 >= 5)
      v14 = 5;
    else
      v14 = v9;
    v8 = (v9 - 3 * (((int)v9 - v14 + 2) / 3u) - 3) | ((unint64_t)(v13
                                                                                     + ((int)v9 - v14 + 2) / 3u
                                                                                     + 1) << 32);
    v10 = HIDWORD(v8);
    if ((_DWORD)v3 == (_DWORD)v8)
    {
LABEL_17:
      if (HIDWORD(v3) == (_DWORD)v10)
        goto LABEL_27;
    }
LABEL_18:
    v15 = (_DWORD *)(result + 12 * v2);
    LODWORD(v16) = v3;
    v17 = v3;
    do
    {
      *v15++ = *(_DWORD *)(a2 + 4 * (3 * v17 + HIDWORD(v17)));
      v18 = (v17 + 1);
      v19 = v17 & 0xFFFFFFFF00000000;
      v20 = v18 | v19;
      v21 = v19 + 0x100000000;
      if ((int)v16 >= 2)
        v16 = v21;
      else
        v16 = v20;
      v22 = (_DWORD)v16 == (_DWORD)v8 && HIDWORD(v16) == (_DWORD)v10;
      v17 = v16;
    }
    while (!v22);
LABEL_27:
    if ((v4 & 0x80000000) == 0)
    {
      if ((int)v4 < 3)
        goto LABEL_2;
LABEL_36:
      v27 = HIDWORD(v6);
      if ((int)v4 >= 5)
        v28 = 5;
      else
        v28 = v4;
      v6 = (v4 - 3 * (((int)v4 - v28 + 2) / 3u) - 3) | ((unint64_t)(v27
                                                                                       + ((int)v4 - v28 + 2) / 3u
                                                                                       + 1) << 32);
      goto LABEL_2;
    }
    if ((int)v4 <= -3)
      v23 = -3;
    else
      v23 = v3 + 3;
    v24 = __CFADD__((_DWORD)v4, 3);
    v25 = ((__PAIR64__(v23 + v5, v4) - 4294967293u) >> 32) / 3;
    if (!v24)
      ++v25;
    v26 = (v3 + 3 * v25 + 6);
    v6 = v26 | ((unint64_t)(~v25 + v7) << 32);
    LODWORD(v4) = v26;
    if ((int)v26 >= 3)
      goto LABEL_36;
LABEL_2:
    ++v2;
    v3 = v6;
  }
  while (v2 != 3);
  return result;
}

uint64_t sub_223AE5338(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_22388AFA4(v2 + 3);
    operator delete(v2);
  }
  return a1;
}

void sub_223AE537C(uint64_t a1, char **a2)
{
  unsigned int *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  int v16;
  float v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  uint64_t v24;
  int v25;
  float v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int16 *v33;
  uint64_t *v34;
  float32x4_t v35;
  __int16 *v36;
  int v37;
  int v38;
  const float *v39;
  int32x2_t v40;
  signed int v41;
  int32x2_t v42;
  float32x4_t v43;
  int16x8_t v44;
  int32x2_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int8x16_t v60;
  int v61;
  _QWORD *v62;
  int v63;
  uint64_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int32x2_t v68;
  int v69;
  int32x2_t v70;
  int v71;
  float32x4_t v72[2];

  v65 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v3 = (unsigned int *)a2[1];
  v5 = (char *)v3 - *a2;
  if (v5 <= 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/ClusterMap.cpp", 1248, (uint64_t)"edge_indices.size() >= 2", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a2;
    v3 = (unsigned int *)a2[1];
    v5 = (char *)v3 - *a2;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 280);
  v7 = v5 >> 2;
  v8 = (v5 >> 2) - 2;
  v9 = *(_DWORD *)&v4[4 * v8];
  v10 = *(v3 - 1);
  v11 = v6 + 56 * *(unsigned int *)v4;
  v12 = v65;
  sub_223ADEDFC((uint64_t)v72, v65, (int32x2_t *)(v11 + 28));
  v13 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v12 + 116), v72[0].f32[0]), *(float32x2_t *)(v12 + 128), *(float32x2_t *)v72[0].f32, 1), *(float32x2_t *)(v12 + 140), v72[0], 2);
  sub_223ADEDFC((uint64_t)v72, v65, (int32x2_t *)(v6 + 56 * v10 + 28));
  v14 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v12 + 116), v72[0].f32[0]), *(float32x2_t *)(v12 + 128), *(float32x2_t *)v72[0].f32, 1), *(float32x2_t *)(v12 + 140), v72[0], 2);
  v66 = v13;
  v67 = v14;
  v63 = *(_DWORD *)(v11 + 52);
  v15 = *(_DWORD *)(v11 + 40);
  v16 = *(_DWORD *)(v11 + 44);
  v17 = (float)v16;
  v58 = v9;
  v59 = v6;
  if (v8 == 1 || (unint64_t)(a2[1] - *a2) < 0xD)
  {
    v25 = *(_DWORD *)(v11 + 40);
    v26 = (float)v16;
  }
  else
  {
    v18 = 0;
    v62 = (_QWORD *)(v65 + 208);
    v61 = v7 - 3;
    do
    {
      v29 = *(_DWORD *)&(*a2)[4 * v18 + 4];
      v30 = *(_QWORD *)(*(_QWORD *)a1 + 280);
      v31 = v30 + 56 * v29;
      v32 = sub_2239942A0(v62, (int *)v31);
      if (v32)
        v33 = (__int16 *)v32 + 14;
      else
        v33 = (__int16 *)(v65 + 252);
      v34 = sub_2239942A0(v62, (int *)(v31 + 12));
      if (v34)
        v36 = (__int16 *)v34 + 14;
      else
        v36 = (__int16 *)(v65 + 252);
      v37 = v33[2];
      v38 = v36[2];
      if (v38 + v37 >= 1)
      {
        v35.i64[0] = *(_QWORD *)(v33 + 10);
        v35.i32[2] = *((_DWORD *)v33 + 7);
        v19 = vmulq_n_f32(v35, (float)v37);
        v35.i64[0] = *(_QWORD *)(v36 + 10);
        v35.i32[2] = *((_DWORD *)v36 + 7);
        v20 = vmulq_n_f32(v35, (float)v38);
        v21 = vaddq_f32(v19, v20);
        v20.f32[0] = (float)(v37 * v37 + v38 * v38);
        v22 = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0));
      }
      else
      {
        v39 = (const float *)(v65 + 4);
        v40 = (int32x2_t)vld1_dup_f32(v39);
        v70 = vmul_s32(*(int32x2_t *)v31, v40);
        v71 = 0;
        v72[0].i64[0] = v65 + 8;
        v72[0].i64[1] = (uint64_t)&v70;
        sub_223AE5064((int *)&v68, (int **)v72);
        v41 = *(_DWORD *)(v65 + 4);
        *(float *)v42.i32 = (float)v41 * 0.5;
        *(float32x2_t *)v43.f32 = vcvt_f32_s32(v68);
        v43.f32[2] = (float)v69;
        v60 = (int8x16_t)vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v42, 0), v43), *(float *)(v65 + 152));
        v70 = vmul_s32(*(int32x2_t *)(v31 + 12), vdup_n_s32(v41));
        v71 = 0;
        v72[0].i64[0] = v65 + 8;
        v72[0].i64[1] = (uint64_t)&v70;
        sub_223AE5064((int *)&v68, (int **)v72);
        *(float *)v45.i32 = (float)*(int *)(v65 + 4) * 0.5;
        *(float32x2_t *)v46.f32 = vcvt_f32_s32(v68);
        v46.f32[2] = (float)v69;
        v47 = (int8x16_t)vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v45, 0), v46), *(float *)(v65 + 152));
        v48 = v33[1];
        v49 = v36[1];
        if (v49 + v48 < 1)
        {
          if (*v33 < 1 || *v36 < 1)
          {
            v46.i32[0] = 0;
            v44.i32[0] = *v33;
            v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(v44, (int16x8_t)v46), 0), v60, v47);
          }
          else
          {
            v53.i64[0] = 0x3F0000003F000000;
            v53.i64[1] = 0x3F0000003F000000;
            v22 = vmulq_f32(vaddq_f32((float32x4_t)v60, (float32x4_t)v47), v53);
          }
        }
        else
        {
          v50 = vmulq_n_f32((float32x4_t)v60, (float)(__int16)v48);
          v51 = vaddq_f32(v50, vmulq_n_f32((float32x4_t)v47, (float)(__int16)v49));
          v50.f32[0] = (float)(v49 + v48);
          v22 = vdivq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0));
        }
      }
      v23 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v65 + 116), v22.f32[0]), *(float32x2_t *)(v65 + 128), *(float32x2_t *)v22.f32, 1), *(float32x2_t *)(v65 + 140), v22, 2);
      *(float32x2_t *)v72[0].f32 = v23;
      v24 = v30 + 56 * v29;
      v25 = *(_DWORD *)(v24 + 40);
      v26 = (float)*(int *)(v24 + 44);
      if (v25 >= v15)
        v27 = v15;
      else
        v27 = *(_DWORD *)(v24 + 40);
      if (v15 <= v25)
        v28 = *(_DWORD *)(v24 + 40);
      else
        v28 = v15;
      sub_223AE5830(*(_QWORD *)(a1 + 16), **(_DWORD **)(a1 + 24), v63 == -1, &v66, v72, v27, v28, (float)(v17 + v26) * 0.5);
      v66 = v23;
      ++v18;
      v17 = v26;
      v15 = v25;
    }
    while (v61 != (_DWORD)v18);
  }
  v54 = v59 + 56 * v58;
  v55 = *(_DWORD *)(v54 + 40);
  if (v55 >= v25)
    v56 = v25;
  else
    v56 = *(_DWORD *)(v54 + 40);
  if (v25 <= v55)
    v57 = *(_DWORD *)(v54 + 40);
  else
    v57 = v25;
  sub_223AE5830(*(_QWORD *)(a1 + 16), **(_DWORD **)(a1 + 24), v63 == -1, &v66, &v67, v56, v57, (float)(v26 + (float)*(int *)(v54 + 44)) * 0.5);
  ++**(_DWORD **)(a1 + 24);
}

void sub_223AE5830(uint64_t a1, int a2, char a3, _QWORD *a4, _QWORD *a5, int a6, int a7, float a8)
{
  _DWORD *v13;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char **v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  float v56;
  float v57;
  void **v58;
  float v59;
  unint64_t v60;
  float *v61;
  char *v62;
  float *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;

  v13 = *(_DWORD **)(a1 + 8);
  **(_BYTE **)a1 = 1;
  if (*v13 != a2)
  {
    if (*v13 == -1)
    {
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(char **)(v18 + 8);
      **(_BYTE **)(a1 + 40) = a3;
      *v13 = a2;
      v21 = *(_QWORD *)(v18 + 16);
      if ((unint64_t)v19 < v21)
        goto LABEL_4;
    }
    else
    {
      sub_223AE0EA8(*(_QWORD **)(a1 + 16));
      v18 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD **)(a1 + 32);
      v19 = *(char **)v18;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)v18;
      v17[1] = *v17;
      v20 = *(_DWORD **)(a1 + 8);
      **(_BYTE **)(a1 + 40) = a3;
      *v20 = a2;
      v21 = *(_QWORD *)(v18 + 16);
      if ((unint64_t)v19 < v21)
      {
LABEL_4:
        *(_QWORD *)v19 = *a4;
        v22 = v19 + 8;
LABEL_23:
        *(_QWORD *)(v18 + 8) = v22;
        goto LABEL_24;
      }
    }
    v77 = a7;
    v23 = *(char **)v18;
    v24 = (uint64_t)&v19[-*(_QWORD *)v18];
    v25 = v24 >> 3;
    v26 = (v24 >> 3) + 1;
    if (v26 >> 61)
      goto LABEL_70;
    v27 = v21 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        goto LABEL_71;
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[8 * v25];
    v31 = &v29[8 * v28];
    *v30 = *a4;
    v22 = v30 + 1;
    if (v19 == v23)
    {
      a7 = v77;
      *(_QWORD *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v31;
      if (!v19)
        goto LABEL_23;
      goto LABEL_22;
    }
    v32 = v19 - v23 - 8;
    if (v32 >= 0x58 && (unint64_t)(v19 - v29 - v24) >= 0x20)
    {
      v71 = (v32 >> 3) + 1;
      v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      v33 = &v19[-v72];
      v30 = (_QWORD *)((char *)v30 - v72);
      v73 = &v29[8 * v25 - 16];
      v74 = v19 - 16;
      v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      a7 = v77;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 4;
      }
      while (v75);
      if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_21:
        v19 = *(char **)v18;
        *(_QWORD *)v18 = v30;
        *(_QWORD *)(v18 + 8) = v22;
        *(_QWORD *)(v18 + 16) = v31;
        if (!v19)
          goto LABEL_23;
LABEL_22:
        operator delete(v19);
        goto LABEL_23;
      }
    }
    else
    {
      v33 = v19;
      a7 = v77;
    }
    do
    {
      v34 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      *--v30 = v34;
    }
    while (v33 != v23);
    goto LABEL_21;
  }
LABEL_24:
  v35 = *(char ***)(a1 + 24);
  v37 = v35[1];
  v36 = (unint64_t)v35[2];
  if ((unint64_t)v37 >= v36)
  {
    v39 = *v35;
    v40 = v37 - *v35;
    v41 = v40 >> 3;
    v42 = (v40 >> 3) + 1;
    if (!(v42 >> 61))
    {
      v43 = v36 - (_QWORD)v39;
      if (v43 >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 61)
          goto LABEL_71;
        v45 = operator new(8 * v44);
      }
      else
      {
        v45 = 0;
      }
      v46 = &v45[8 * v41];
      *(_QWORD *)v46 = *a5;
      v38 = v46 + 8;
      if (v37 != v39)
      {
        v47 = v37 - v39 - 8;
        if (v47 < 0x58)
          goto LABEL_75;
        if ((unint64_t)(v37 - v45 - v40) < 0x20)
          goto LABEL_75;
        v48 = (v47 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v50 = &v37[-v49];
        v46 -= v49;
        v51 = &v45[8 * v41 - 16];
        v52 = v37 - 16;
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 4;
        }
        while (v53);
        v37 = v50;
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_75:
          do
          {
            v55 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v46 - 1) = v55;
            v46 -= 8;
          }
          while (v37 != v39);
        }
        v37 = *v35;
      }
      *v35 = v46;
      v35[1] = v38;
      v35[2] = &v45[8 * v44];
      if (v37)
        operator delete(v37);
      goto LABEL_46;
    }
LABEL_70:
    sub_22316E078();
  }
  *(_QWORD *)v37 = *a5;
  v38 = v37 + 8;
LABEL_46:
  v35[1] = v38;
  v56 = (float)a6;
  v57 = (float)a7;
  v58 = *(void ***)(a1 + 32);
  v59 = (float)(v56 + (float)a7) * 0.5;
  v61 = (float *)v58[1];
  v60 = (unint64_t)v58[2];
  if ((unint64_t)v61 < v60)
  {
    *v61 = v56;
    v61[1] = v57;
    v61[2] = v59;
    v61[3] = a8;
    v62 = (char *)(v61 + 5);
    *((_DWORD *)v61 + 4) = 1;
    goto LABEL_63;
  }
  v63 = (float *)*v58;
  v64 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - (_BYTE *)*v58) >> 2);
  v65 = v64 + 1;
  if (v64 + 1 > 0xCCCCCCCCCCCCCCCLL)
    sub_22316E078();
  v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - (_QWORD)v63) >> 2);
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x666666666666666)
    v67 = 0xCCCCCCCCCCCCCCCLL;
  else
    v67 = v65;
  if (!v67)
  {
    v68 = 0;
    goto LABEL_58;
  }
  if (v67 > 0xCCCCCCCCCCCCCCCLL)
LABEL_71:
    sub_223174E94();
  v68 = (char *)operator new(20 * v67);
LABEL_58:
  v69 = &v68[20 * v64];
  *(float *)v69 = v56;
  *((float *)v69 + 1) = v57;
  *((float *)v69 + 2) = v59;
  *((float *)v69 + 3) = a8;
  *((_DWORD *)v69 + 4) = 1;
  v62 = v69 + 20;
  if (v61 != v63)
  {
    do
    {
      v70 = *(_OWORD *)(v61 - 5);
      *((float *)v69 - 1) = *(v61 - 1);
      *(_OWORD *)(v69 - 20) = v70;
      v69 -= 20;
      v61 -= 5;
    }
    while (v61 != v63);
    v61 = (float *)*v58;
  }
  *v58 = v69;
  v58[1] = v62;
  v58[2] = &v68[20 * v67];
  if (v61)
    operator delete(v61);
LABEL_63:
  v58[1] = v62;
}

void sub_223AE5C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  const char *v18;
  size_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  void **v29;
  void *v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 v38;
  const char *v39;
  size_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  float v94;
  float v95;
  uint64_t v96;
  float32x2_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _OWORD *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  float v119;
  unint64_t v120;
  float *v121;
  uint64_t v122;
  float *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  float *v130;
  int64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float *v135;
  _OWORD *v136;
  float *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  float32x2_t v141;
  float32x2_t v142;
  float v143;
  unint64_t v144;
  float *v145;
  float *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  float *v153;
  int64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  _OWORD *v159;
  float *v160;
  uint64_t v161;
  __int128 v162;
  int v163;
  float v164;
  uint64_t *v165;
  __n128 v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  uint64_t v172;
  const char *v173;
  size_t v174;
  char *v175;
  float *v176;
  float *v177;
  int v178;
  float *v179;
  float v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  int64_t v186;
  unint64_t v187;
  float *v188;
  float *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __n128 *v194;
  __n128 *v195;
  uint64_t v196;
  unsigned __int8 v197;
  const char *v198;
  size_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  size_t v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  const char *v218;
  void *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  int v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  float *v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  float32x2_t v245;
  float32x2_t v246;
  float32x2_t v247;
  BOOL v250;
  BOOL v251;
  unsigned int v252;
  float32x2_t v253;
  float32x2_t v254;
  float v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  _BOOL8 v259;
  int v260;
  float v261;
  float v262;
  float v263;
  int v264;
  unsigned int v265;
  unint64_t v266;
  float32x2_t v267;
  float v268;
  _BOOL4 v269;
  unsigned int v270;
  unint64_t v271;
  float32x2_t v272;
  float v273;
  _BOOL4 v274;
  BOOL v275;
  unsigned int v276;
  float v277;
  BOOL v278;
  _BOOL8 v279;
  int v280;
  float v281;
  float v282;
  float v283;
  int v284;
  unsigned int v285;
  unint64_t v286;
  float32x2_t v287;
  _BOOL4 v288;
  unsigned int v289;
  unint64_t v290;
  float32x2_t v291;
  _BOOL4 v292;
  BOOL v293;
  unsigned int v294;
  unint64_t v295;
  unsigned int v296;
  unint64_t v297;
  unsigned int v298;
  unint64_t v299;
  int v300;
  float *v301;
  BOOL v303;
  float *v304;
  _DWORD *v306;
  __int128 v307;
  __int128 v308;
  void **v309;
  size_t v310;
  int64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  float32x2_t v319;
  float32x2_t v320;
  float32x2_t v321;
  float32x2_t v322;
  _DWORD *v323;
  int v324;
  _DWORD *v325;
  void *v326;
  void *v327;
  char **v328;
  _BYTE *v329;
  char *v330;
  char *v331;
  unint64_t v332;
  _BYTE *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  float v338;
  int v339;
  unint64_t v340;
  uint64_t v341;
  float32x2_t *v342;
  uint64_t *v343;
  float32x2_t v344;
  char *v345;
  unsigned __int8 v346;
  size_t v347;
  const char *v348;
  _BYTE *v349;
  uint64_t v350;
  uint64_t v351;
  void **v352;
  uint64_t v353;
  uint64_t v354;
  NSObject *v355;
  size_t v356;
  std::__shared_weak_count_vtbl *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  const char *v367;
  void *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  void *v381;
  double v382;
  unint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  __int128 *v389;
  uint64_t v390;
  __int128 v391;
  int v392;
  _BYTE *v393;
  _BYTE *v394;
  char *v395;
  uint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  char *v402;
  char *v403;
  __int128 *v404;
  uint64_t v405;
  __int128 v406;
  int v407;
  float v408;
  float v409;
  uint64_t v410;
  float v411;
  unint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _BYTE *v421;
  _QWORD *v422;
  char *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  _OWORD *v428;
  char *v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  float v433;
  unint64_t v434;
  float *v435;
  uint64_t v436;
  float *v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  _BYTE *v443;
  float *v444;
  int64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float *v449;
  _OWORD *v450;
  float *v451;
  uint64_t v452;
  __int128 v453;
  int v454;
  float v455;
  unint64_t v456;
  float *v457;
  float *v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  _BYTE *v464;
  float *v465;
  int64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  float *v470;
  _OWORD *v471;
  float *v472;
  uint64_t v473;
  __int128 v474;
  int v475;
  unsigned __int8 v476;
  char *v477;
  char *v478;
  NSObject *v479;
  double v480;
  const char *v481;
  const char *v482;
  int v483;
  int v484;
  void **v485;
  int v486;
  int v487;
  void **v488;
  uint64_t *v489;
  uint64_t v490;
  _BYTE *v491;
  int v492;
  void **v493;
  uint64_t v495;
  const char *v496;
  char *v497;
  void *v498;
  char *v499;
  uint64_t v500;
  int v501;
  void *v502;
  char *v503;
  uint64_t v504;
  void *v505;
  char *v506;
  void *__p;
  _DWORD *rep;
  unint64_t v509;
  int v510;
  const char *v511;
  int v512;
  const char *v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  __int32 v516;
  float v517;
  float32x2_t v518;
  float32x2_t v519;
  double v520;
  float32x2_t v521;
  double v522;
  char *category;
  float32x2_t v524;
  _BYTE v525[40];
  void **v526;
  void **v527;
  unint64_t v528;
  uint64_t v529;
  float v530;
  uint64_t v531;

  v531 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a2 + 20) || *(_QWORD *)(a2 + 280) == *(_QWORD *)(a2 + 288))
  {
    *(_BYTE *)a2 = 0;
    sub_223AD515C(&v498);
    if (**((int **)v498 + 7) > 5)
      return;
    v13 = *((unsigned __int8 *)v498 + 72);
    v14 = sub_22322F254((uint64_t)v498, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return;
    v483 = v13;
    __p = &v498;
    rep = (_DWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v509 = std::chrono::system_clock::now().__d_.__rep_;
    v510 = 5;
    v511 = "unknown file";
    v512 = 1477;
    v514 = 0;
    v515 = 0;
    v513 = "unknown function";
    v17 = *(_QWORD *)__p;
    v18 = (const char *)(*(_QWORD *)__p + 16);
    v481 = v18;
    if (*(char *)(*(_QWORD *)__p + 39) < 0)
    {
      v18 = *(const char **)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
    }
    else
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    }
    v490 = *(_QWORD *)(a2 + 280);
    v495 = *(_QWORD *)(a2 + 288);
    v486 = *(_DWORD *)(a2 + 20);
    v38 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v525);
      sub_223199C58("com.apple.cv3d", (unint64_t)v525, byte_255788F40);
      if (v525[24] && (v525[23] & 0x80000000) != 0)
        operator delete(*(void **)v525);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v39 = byte_255788F40;
    else
      v39 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v40 = byte_255788F40[23];
    else
      v40 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v525 = os_log_create(v39, v18);
    v41 = &v525[8];
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v40 >= 0x17)
    {
      v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v42 = v40 | 7;
      v43 = v42 + 1;
      v41 = operator new(v42 + 1);
      *(_QWORD *)&v525[16] = v40;
      *(_QWORD *)&v525[24] = v43 | 0x8000000000000000;
      *(_QWORD *)&v525[8] = v41;
    }
    else
    {
      v525[31] = v40;
      if (!v40)
      {
LABEL_51:
        v41[v40] = 0;
        v525[32] = 1;
        v44 = (void **)&v526;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v45 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v45 = v19 | 7;
          v46 = v45 + 1;
          v44 = (void **)operator new(v45 + 1);
          v527 = (void **)v19;
          v528 = v46 | 0x8000000000000000;
          v526 = v44;
        }
        else
        {
          HIBYTE(v528) = v19;
          if (!v19)
            goto LABEL_59;
        }
        memmove(v44, v18, v19);
LABEL_59:
        *((_BYTE *)v44 + v19) = 0;
        LOBYTE(v529) = 1;
        v47 = *(NSObject **)v525;
        if (SHIBYTE(v528) < 0)
          operator delete(v526);
        if (v525[32] && (v525[31] & 0x80000000) != 0)
          operator delete(*(void **)&v525[8]);
        if (*(_QWORD *)v525)
          os_release(*(void **)v525);
        if (v15 && *(_QWORD *)(v15 + 24))
        {
          v48 = _os_log_pack_size();
          v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
          v50 = (std::__shared_weak_count *)operator new();
          v51 = v50;
          v50->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v50->__shared_weak_owners_ = 0;
          v50[1].__vftable = v49;
          *(_QWORD *)v525 = v49;
          *(_QWORD *)&v525[8] = v49;
          *(_QWORD *)&v525[16] = v50;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          v526 = 0;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v51);
          }
          v55 = *(_QWORD *)v525;
          v56 = _os_log_pack_fill();
          *(_DWORD *)v56 = 134218240;
          *(_QWORD *)(v56 + 4) = 0x6DB6DB6DB6DB6DB7 * ((v495 - v490) >> 3);
          *(_WORD *)(v56 + 12) = 1024;
          *(_DWORD *)(v56 + 14) = v486;
          v57 = (char *)operator new();
          v58 = *(unsigned __int8 *)(v17 + 39);
          v59 = v481;
          if ((v58 & 0x80u) != 0)
          {
            v59 = *(const char **)(v17 + 16);
            v58 = *(_QWORD *)(v17 + 24);
          }
          *(_QWORD *)v57 = v55;
          *(_OWORD *)(v57 + 8) = *(_OWORD *)&v525[8];
          *(_QWORD *)&v525[8] = 0;
          *(_QWORD *)&v525[16] = 0;
          *(_OWORD *)(v57 + 24) = *(_OWORD *)&v525[24];
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          *((_QWORD *)v57 + 5) = v59;
          *((_QWORD *)v57 + 6) = v58;
          v57[56] = 16;
          v502 = 0;
          v505 = v57;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v505);
          v60 = v505;
          v505 = 0;
          if (v60)
          {
            v61 = (std::__shared_weak_count *)*((_QWORD *)v60 + 4);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v64 = (std::__shared_weak_count *)*((_QWORD *)v60 + 2);
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
            v67 = v502;
            v502 = 0;
            if (v67)
            {
              v68 = (std::__shared_weak_count *)*((_QWORD *)v67 + 4);
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = (std::__shared_weak_count *)*((_QWORD *)v67 + 2);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              MEMORY[0x227684CE8](v67, 0x10F0C40B62ED6C6);
            }
          }
          v74 = *(std::__shared_weak_count **)&v525[32];
          v75 = v483;
          if (*(_QWORD *)&v525[32])
          {
            v76 = (unint64_t *)(*(_QWORD *)&v525[32] + 8);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v78 = *(std::__shared_weak_count **)&v525[16];
          if (*(_QWORD *)&v525[16])
          {
            v79 = (unint64_t *)(*(_QWORD *)&v525[16] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
        }
        else
        {
          os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v525 = 134218240;
          *(_QWORD *)&v525[4] = 0x6DB6DB6DB6DB6DB7 * ((v495 - v490) >> 3);
          *(_WORD *)&v525[12] = 1024;
          *(_DWORD *)&v525[14] = v486;
          v81 = (void *)_os_log_send_and_compose_impl();
          v75 = v483;
          if (v81)
            free(v81);
        }
        if (v75)
        {
          sub_22322C138((uint64_t)&__p, "Invalid boundary edges in room boundary %lu/%d", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3), *(_DWORD *)(a2 + 20));
          sub_223182C08((uint64_t)&__p);
        }
        sub_223182C08((uint64_t)&__p);
        v82 = v515;
        if (v515)
        {
          v83 = (unint64_t *)&v515->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    memmove(v41, v39, v40);
    goto LABEL_51;
  }
  v3 = *(_QWORD *)a1;
  v5 = (_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
    *v5 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  v6 = (void **)(a2 + 48);
  v7 = *(char **)(a2 + 48);
  *v5 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (v7)
  {
    v8 = *(char **)(a2 + 56);
    v9 = v7;
    if (v8 != v7)
    {
      v10 = *(char **)(a2 + 56);
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 3);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *((_QWORD *)v8 - 2) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a2 + 56) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  v489 = (uint64_t *)(a2 + 24);
  *v6 = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  sub_223AE0028(&v505, v3, a2);
  v21 = (char *)v505;
  v20 = v506;
  v22 = 0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3);
  if (v22 <= 2)
  {
    *(_BYTE *)a2 = 0;
    sub_223AD515C(&category);
    if (**((int **)category + 7) > 5)
      goto LABEL_645;
    v23 = category[72];
    v24 = sub_22322F254((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      goto LABEL_645;
    v484 = v23;
    __p = &category;
    rep = (_DWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v509 = std::chrono::system_clock::now().__d_.__rep_;
    v510 = 5;
    v511 = "unknown file";
    v512 = 1489;
    v514 = 0;
    v515 = 0;
    v513 = "unknown function";
    v26 = *(_QWORD *)__p;
    v27 = (const char *)(*(_QWORD *)__p + 16);
    v482 = v27;
    if (*(char *)(*(_QWORD *)__p + 39) < 0)
    {
      v27 = *(const char **)(v26 + 16);
      v28 = *(_QWORD *)(v26 + 24);
    }
    else
    {
      v28 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    }
    v491 = v505;
    v497 = v506;
    v487 = *(_DWORD *)(a2 + 20);
    v197 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v525);
      sub_223199C58("com.apple.cv3d", (unint64_t)v525, byte_255788F40);
      if (v525[24] && (v525[23] & 0x80000000) != 0)
        operator delete(*(void **)v525);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v198 = byte_255788F40;
    else
      v198 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v199 = byte_255788F40[23];
    else
      v199 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v525 = os_log_create(v198, v27);
    v200 = &v525[8];
    if (v199 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v199 >= 0x17)
    {
      v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v199 | 7) != 0x17)
        v201 = v199 | 7;
      v202 = v201 + 1;
      v200 = operator new(v201 + 1);
      *(_QWORD *)&v525[16] = v199;
      *(_QWORD *)&v525[24] = v202 | 0x8000000000000000;
      *(_QWORD *)&v525[8] = v200;
    }
    else
    {
      v525[31] = v199;
      if (!v199)
      {
LABEL_252:
        v200[v199] = 0;
        v525[32] = 1;
        v203 = (void **)&v526;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v28 >= 0x17)
        {
          v204 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v204 = v28 | 7;
          v205 = v204 + 1;
          v203 = (void **)operator new(v204 + 1);
          v527 = (void **)v28;
          v528 = v205 | 0x8000000000000000;
          v526 = v203;
        }
        else
        {
          HIBYTE(v528) = v28;
          if (!v28)
            goto LABEL_260;
        }
        memmove(v203, v27, v28);
LABEL_260:
        *((_BYTE *)v203 + v28) = 0;
        LOBYTE(v529) = 1;
        v206 = *(NSObject **)v525;
        if (SHIBYTE(v528) < 0)
          operator delete(v526);
        if (v525[32] && (v525[31] & 0x80000000) != 0)
          operator delete(*(void **)&v525[8]);
        if (*(_QWORD *)v525)
          os_release(*(void **)v525);
        if (v25 && *(_QWORD *)(v25 + 24))
        {
          v207 = _os_log_pack_size();
          v208 = (std::__shared_weak_count_vtbl *)operator new(v207, (std::align_val_t)8uLL);
          v209 = (std::__shared_weak_count *)operator new();
          v210 = v209;
          v209->__shared_owners_ = 0;
          v211 = (unint64_t *)&v209->__shared_owners_;
          v209->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v209->__shared_weak_owners_ = 0;
          v209[1].__vftable = v208;
          *(_QWORD *)v525 = v208;
          *(_QWORD *)&v525[8] = v208;
          *(_QWORD *)&v525[16] = v209;
          do
            v212 = __ldxr(v211);
          while (__stxr(v212 + 1, v211));
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          v526 = 0;
          do
            v213 = __ldaxr(v211);
          while (__stlxr(v213 - 1, v211));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v210);
          }
          v214 = *(_QWORD *)v525;
          v215 = _os_log_pack_fill();
          *(_DWORD *)v215 = 134218240;
          *(_QWORD *)(v215 + 4) = 0xCCCCCCCCCCCCCCCDLL * ((v497 - v491) >> 3);
          *(_WORD *)(v215 + 12) = 1024;
          *(_DWORD *)(v215 + 14) = v487;
          v216 = (char *)operator new();
          v217 = *(unsigned __int8 *)(v26 + 39);
          v218 = v482;
          if ((v217 & 0x80u) != 0)
          {
            v218 = *(const char **)(v26 + 16);
            v217 = *(_QWORD *)(v26 + 24);
          }
          *(_QWORD *)v216 = v214;
          *(_OWORD *)(v216 + 8) = *(_OWORD *)&v525[8];
          *(_QWORD *)&v525[8] = 0;
          *(_QWORD *)&v525[16] = 0;
          *(_OWORD *)(v216 + 24) = *(_OWORD *)&v525[24];
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          *((_QWORD *)v216 + 5) = v218;
          *((_QWORD *)v216 + 6) = v217;
          v216[56] = 16;
          v498 = 0;
          v502 = v216;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &v502);
          v219 = v502;
          v502 = 0;
          if (v219)
          {
            v220 = (std::__shared_weak_count *)*((_QWORD *)v219 + 4);
            if (v220)
            {
              v221 = (unint64_t *)&v220->__shared_owners_;
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 - 1, v221));
              if (!v222)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            v223 = (std::__shared_weak_count *)*((_QWORD *)v219 + 2);
            if (v223)
            {
              v224 = (unint64_t *)&v223->__shared_owners_;
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
            v498 = 0;
          }
          v226 = *(std::__shared_weak_count **)&v525[32];
          v227 = v484;
          if (*(_QWORD *)&v525[32])
          {
            v228 = (unint64_t *)(*(_QWORD *)&v525[32] + 8);
            do
              v229 = __ldaxr(v228);
            while (__stlxr(v229 - 1, v228));
            if (!v229)
            {
              ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
              std::__shared_weak_count::__release_weak(v226);
            }
          }
          v230 = *(std::__shared_weak_count **)&v525[16];
          if (*(_QWORD *)&v525[16])
          {
            v231 = (unint64_t *)(*(_QWORD *)&v525[16] + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
        }
        else
        {
          os_log_type_enabled(v206, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v525 = 134218240;
          *(_QWORD *)&v525[4] = 0xCCCCCCCCCCCCCCCDLL * ((v497 - v491) >> 3);
          *(_WORD *)&v525[12] = 1024;
          *(_DWORD *)&v525[14] = v487;
          v233 = (void *)_os_log_send_and_compose_impl();
          v227 = v484;
          if (v233)
            free(v233);
        }
        if (v227)
        {
          sub_22322C138((uint64_t)&__p, "Invalid boundary in room boundaries %lu/%d", 0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3), *(_DWORD *)(a2 + 20));
          sub_223182C08((uint64_t)&__p);
        }
        sub_223182C08((uint64_t)&__p);
        v234 = v515;
        if (!v515)
          goto LABEL_645;
        v235 = (unint64_t *)&v515->__shared_owners_;
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        goto LABEL_543;
      }
    }
    memmove(v200, v198, v199);
    goto LABEL_252;
  }
  v29 = (void **)(a2 + 72);
  v30 = *(void **)(a2 + 72);
  *(_QWORD *)(a2 + 80) = v30;
  v31 = *(_BYTE **)(a2 + 96);
  v485 = (void **)(a2 + 96);
  *(_QWORD *)(a2 + 104) = v31;
  if (v22 > (uint64_t)(*(_QWORD *)(a2 + 88) - (_QWORD)v30) >> 2)
  {
    if (v22 >> 62)
      goto LABEL_669;
    v32 = (char *)operator new(4 * v22);
    *(_QWORD *)(a2 + 72) = v32;
    *(_QWORD *)(a2 + 80) = v32;
    *(_QWORD *)(a2 + 88) = &v32[4 * v22];
    if (v30)
    {
      operator delete(v30);
      v21 = (char *)v505;
      v20 = v506;
      v31 = *v485;
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3);
    }
  }
  if (v22 > (uint64_t)(*(_QWORD *)(a2 + 112) - (_QWORD)v31) >> 2)
  {
    if (!(v22 >> 62))
    {
      v33 = *(_BYTE **)(a2 + 104);
      v34 = (char *)operator new(4 * v22);
      v35 = v33 - v31;
      v36 = &v34[(v33 - v31) & 0xFFFFFFFFFFFFFFFCLL];
      v37 = v36;
      if (v33 == v31)
        goto LABEL_123;
      if ((unint64_t)(v35 - 4) >= 0x2C)
      {
        v37 = &v34[(v33 - v31) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v33[-(v35 & 0xFFFFFFFFFFFFFFFCLL)] - v34) >= 0x20)
        {
          v85 = v35 >> 2;
          v86 = ((unint64_t)(v35 - 4) >> 2) + 1;
          v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          v88 = &v33[-v87];
          v37 = &v36[-v87];
          v89 = &v34[4 * v85 - 16];
          v90 = (__int128 *)(v33 - 16);
          v91 = v86 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v92 = *v90;
            *((_OWORD *)v89 - 1) = *(v90 - 1);
            *(_OWORD *)v89 = v92;
            v89 -= 32;
            v90 -= 2;
            v91 -= 8;
          }
          while (v91);
          v33 = v88;
          if (v86 == (v86 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_123:
            *(_QWORD *)(a2 + 96) = v37;
            *(_QWORD *)(a2 + 104) = v36;
            *(_QWORD *)(a2 + 112) = &v34[4 * v22];
            if (v31)
            {
              operator delete(v31);
              v21 = (char *)v505;
              v20 = v506;
            }
            goto LABEL_125;
          }
        }
      }
      else
      {
        v37 = &v34[(v33 - v31) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v93 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v37 - 1) = v93;
        v37 -= 4;
      }
      while (v33 != v31);
      goto LABEL_123;
    }
LABEL_669:
    sub_22316E078();
  }
LABEL_125:
  if (v21 == v20)
  {
    v164 = 0.0;
    goto LABEL_195;
  }
  v94 = 0.0;
  v95 = 0.0;
  do
  {
    v99 = *(_QWORD **)(a2 + 32);
    v98 = *(_QWORD *)(a2 + 40);
    if ((unint64_t)v99 < v98)
    {
      *v99 = *(_QWORD *)(v21 + 4);
      v100 = (uint64_t)(v99 + 1);
      goto LABEL_151;
    }
    v101 = *v489;
    v102 = (uint64_t)v99 - *v489;
    v103 = v102 >> 3;
    v104 = (v102 >> 3) + 1;
    if (v104 >> 61)
      sub_22316E078();
    v105 = v98 - v101;
    if (v105 >> 2 > v104)
      v104 = v105 >> 2;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
      v106 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    if (v106)
    {
      if (v106 >> 61)
        sub_223174E94();
      v107 = operator new(8 * v106);
      v108 = &v107[8 * v103];
      *v108 = *(_QWORD *)(v21 + 4);
      v100 = (uint64_t)(v108 + 1);
      v109 = (char *)v99 - v101;
      if (v99 == (_QWORD *)v101)
      {
LABEL_149:
        *(_QWORD *)(a2 + 24) = v108;
        *(_QWORD *)(a2 + 32) = v100;
        *(_QWORD *)(a2 + 40) = &v107[8 * v106];
        if (!v99)
          goto LABEL_151;
LABEL_150:
        operator delete(v99);
        goto LABEL_151;
      }
    }
    else
    {
      v107 = 0;
      v108 = (_QWORD *)(8 * v103);
      *(_QWORD *)(8 * v103) = *(_QWORD *)(v21 + 4);
      v100 = 8 * v103 + 8;
      v109 = (char *)v99 - v101;
      if (v99 == (_QWORD *)v101)
        goto LABEL_149;
    }
    v110 = (unint64_t)(v109 - 8);
    if (v110 < 0x58)
      goto LABEL_694;
    if ((unint64_t)((char *)v99 - v107 - v102) < 0x20)
      goto LABEL_694;
    v111 = (v110 >> 3) + 1;
    v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
    v113 = &v99[v112 / 0xFFFFFFFFFFFFFFF8];
    v108 = (_QWORD *)((char *)v108 - v112);
    v114 = &v107[8 * v103 - 16];
    v115 = (__int128 *)(v99 - 2);
    v116 = v111 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v117 = *v115;
      *(v114 - 1) = *(v115 - 1);
      *v114 = v117;
      v114 -= 2;
      v115 -= 2;
      v116 -= 4;
    }
    while (v116);
    v99 = v113;
    if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_694:
      do
      {
        v118 = *--v99;
        *--v108 = v118;
      }
      while (v99 != (_QWORD *)v101);
    }
    v99 = (_QWORD *)*v489;
    *(_QWORD *)(a2 + 24) = v108;
    *(_QWORD *)(a2 + 32) = v100;
    *(_QWORD *)(a2 + 40) = &v107[8 * v106];
    if (v99)
      goto LABEL_150;
LABEL_151:
    *(_QWORD *)(a2 + 32) = v100;
    v119 = fminf((float)(*((float *)v21 + 8) * 4.5) / (float)(*((float *)v21 + 8) + 80.0), 1.0);
    v121 = *(float **)(a2 + 80);
    v120 = *(_QWORD *)(a2 + 88);
    if ((unint64_t)v121 < v120)
    {
      *v121 = v119;
      v122 = (uint64_t)(v121 + 1);
      goto LABEL_172;
    }
    v123 = (float *)*v29;
    v124 = (char *)v121 - (_BYTE *)*v29;
    v125 = v124 >> 2;
    v126 = (v124 >> 2) + 1;
    if (v126 >> 62)
      sub_22316E078();
    v127 = v120 - (_QWORD)v123;
    if (v127 >> 1 > v126)
      v126 = v127 >> 1;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
      v128 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v128 = v126;
    if (v128)
    {
      if (v128 >> 62)
        sub_223174E94();
      v129 = operator new(4 * v128);
      v130 = (float *)&v129[4 * v125];
      *v130 = v119;
      v122 = (uint64_t)(v130 + 1);
      v131 = (char *)v121 - (char *)v123;
      if (v121 == v123)
        goto LABEL_170;
LABEL_164:
      v132 = v131 - 4;
      if (v132 < 0x2C)
        goto LABEL_695;
      if ((unint64_t)((char *)v121 - v129 - v124) < 0x20)
        goto LABEL_695;
      v133 = (v132 >> 2) + 1;
      v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
      v135 = &v121[v134 / 0xFFFFFFFFFFFFFFFCLL];
      v130 = (float *)((char *)v130 - v134);
      v136 = &v129[4 * v125 - 16];
      v137 = v121 - 4;
      v138 = v133 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v139 = *(_OWORD *)v137;
        *(v136 - 1) = *((_OWORD *)v137 - 1);
        *v136 = v139;
        v136 -= 2;
        v137 -= 8;
        v138 -= 8;
      }
      while (v138);
      v121 = v135;
      if (v133 != (v133 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_695:
        do
        {
          v140 = *((_DWORD *)v121-- - 1);
          *((_DWORD *)v130-- - 1) = v140;
        }
        while (v121 != v123);
      }
      goto LABEL_170;
    }
    v129 = 0;
    v130 = (float *)(4 * v125);
    *(float *)(4 * v125) = v119;
    v122 = 4 * v125 + 4;
    v131 = (char *)v121 - (char *)v123;
    if (v121 != v123)
      goto LABEL_164;
LABEL_170:
    *(_QWORD *)(a2 + 72) = v130;
    *(_QWORD *)(a2 + 80) = v122;
    *(_QWORD *)(a2 + 88) = &v129[4 * v128];
    if (v123)
      operator delete(v123);
LABEL_172:
    *(_QWORD *)(a2 + 80) = v122;
    v141 = *(float32x2_t *)(v21 + 12);
    v142 = *(float32x2_t *)(v21 + 4);
    v143 = fmaxf(fminf(*((float *)v21 + 9) / (float)**(int **)(a1 + 8), 1.0), 0.0);
    v145 = *(float **)(a2 + 104);
    v144 = *(_QWORD *)(a2 + 112);
    if ((unint64_t)v145 < v144)
    {
      *v145 = v143;
      v96 = (uint64_t)(v145 + 1);
      goto LABEL_128;
    }
    v146 = (float *)*v485;
    v147 = (char *)v145 - (_BYTE *)*v485;
    v148 = v147 >> 2;
    v149 = (v147 >> 2) + 1;
    if (v149 >> 62)
      sub_22316E078();
    v150 = v144 - (_QWORD)v146;
    if (v150 >> 1 > v149)
      v149 = v150 >> 1;
    if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
      v151 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v151 = v149;
    if (v151)
    {
      if (v151 >> 62)
        sub_223174E94();
      v152 = operator new(4 * v151);
      v153 = (float *)&v152[4 * v148];
      *v153 = v143;
      v96 = (uint64_t)(v153 + 1);
      v154 = (char *)v145 - (char *)v146;
      if (v145 == v146)
        goto LABEL_190;
LABEL_184:
      v155 = v154 - 4;
      if (v155 < 0x2C)
        goto LABEL_696;
      if ((unint64_t)((char *)v145 - v152 - v147) < 0x20)
        goto LABEL_696;
      v156 = (v155 >> 2) + 1;
      v157 = 4 * (v156 & 0x7FFFFFFFFFFFFFF8);
      v158 = &v145[v157 / 0xFFFFFFFFFFFFFFFCLL];
      v153 = (float *)((char *)v153 - v157);
      v159 = &v152[4 * v148 - 16];
      v160 = v145 - 4;
      v161 = v156 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v162 = *(_OWORD *)v160;
        *(v159 - 1) = *((_OWORD *)v160 - 1);
        *v159 = v162;
        v159 -= 2;
        v160 -= 8;
        v161 -= 8;
      }
      while (v161);
      v145 = v158;
      if (v156 != (v156 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_696:
        do
        {
          v163 = *((_DWORD *)v145-- - 1);
          *((_DWORD *)v153-- - 1) = v163;
        }
        while (v145 != v146);
      }
      goto LABEL_190;
    }
    v152 = 0;
    v153 = (float *)(4 * v148);
    *(float *)(4 * v148) = v143;
    v96 = 4 * v148 + 4;
    v154 = (char *)v145 - (char *)v146;
    if (v145 != v146)
      goto LABEL_184;
LABEL_190:
    *(_QWORD *)(a2 + 96) = v153;
    *(_QWORD *)(a2 + 104) = v96;
    *(_QWORD *)(a2 + 112) = &v152[4 * v151];
    if (v146)
      operator delete(v146);
LABEL_128:
    v97 = vsub_f32(v141, v142);
    v97.f32[0] = sqrtf(vmla_lane_f32(vmul_f32(v97, v97), (float32x2_t)vdup_lane_s32((int32x2_t)v97, 1), v97, 1).f32[0]);
    *(_QWORD *)(a2 + 104) = v96;
    v94 = v94 + v97.f32[0];
    v95 = v95 + (float)(v97.f32[0] * v143);
    v21 += 40;
  }
  while (v21 != v20);
  v164 = 0.0;
  if (v94 > 0.000001)
    v164 = fminf(fmaxf(v95 / v94, 0.0), 1.0);
LABEL_195:
  *(float *)(a2 + 344) = v164;
  v165 = (uint64_t *)(a2 + 24);
  if (sub_223B7EE5C(v489) <= 0.0)
  {
    *(_BYTE *)a2 = 0;
    sub_223AD515C(&category);
    if (**((int **)category + 7) > 3)
      goto LABEL_645;
    v168 = category[72];
    v169 = sub_22322F254((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
    v170 = v169;
    if (!v168 && !v169)
      goto LABEL_645;
    __p = &category;
    rep = (_DWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v509 = std::chrono::system_clock::now().__d_.__rep_;
    v510 = 3;
    v511 = "unknown file";
    v512 = 1529;
    v514 = 0;
    v515 = 0;
    v513 = "unknown function";
    v171 = sub_223B7EE5C(v489);
    v172 = *(_QWORD *)__p;
    v173 = (const char *)(*(_QWORD *)__p + 16);
    v496 = v173;
    if (*(char *)(*(_QWORD *)__p + 39) < 0)
    {
      v173 = *(const char **)(v172 + 16);
      v174 = *(_QWORD *)(v172 + 24);
    }
    else
    {
      v174 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    }
    v346 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v525);
      sub_223199C58("com.apple.cv3d", (unint64_t)v525, byte_255788F40);
      if (v525[24] && (v525[23] & 0x80000000) != 0)
        operator delete(*(void **)v525);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v165 = v489;
    }
    if (byte_255788F40[23] >= 0)
      v347 = byte_255788F40[23];
    else
      v347 = *(_QWORD *)&byte_255788F40[8];
    if (byte_255788F40[23] >= 0)
      v348 = byte_255788F40;
    else
      v348 = *(const char **)byte_255788F40;
    *(_QWORD *)v525 = os_log_create(v348, v173);
    v349 = &v525[8];
    if (v347 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v347 >= 0x17)
    {
      v350 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v347 | 7) != 0x17)
        v350 = v347 | 7;
      v351 = v350 + 1;
      v349 = operator new(v350 + 1);
      *(_QWORD *)&v525[16] = v347;
      *(_QWORD *)&v525[24] = v351 | 0x8000000000000000;
      *(_QWORD *)&v525[8] = v349;
      v165 = v489;
    }
    else
    {
      v525[31] = v347;
      if (!v347)
      {
LABEL_489:
        v349[v347] = 0;
        v525[32] = 1;
        v352 = (void **)&v526;
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v174 >= 0x17)
        {
          v353 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v353 = v174 | 7;
          v354 = v353 + 1;
          v352 = (void **)operator new(v353 + 1);
          v527 = (void **)v174;
          v528 = v354 | 0x8000000000000000;
          v526 = v352;
        }
        else
        {
          HIBYTE(v528) = v174;
          if (!v174)
            goto LABEL_497;
        }
        memmove(v352, v173, v174);
LABEL_497:
        *((_BYTE *)v352 + v174) = 0;
        LOBYTE(v529) = 1;
        v355 = *(NSObject **)v525;
        if (SHIBYTE(v528) < 0)
          operator delete(v526);
        if (v525[32] && (v525[31] & 0x80000000) != 0)
          operator delete(*(void **)&v525[8]);
        if (*(_QWORD *)v525)
          os_release(*(void **)v525);
        if (v170 && *(_QWORD *)(v170 + 24))
        {
          v356 = _os_log_pack_size();
          v357 = (std::__shared_weak_count_vtbl *)operator new(v356, (std::align_val_t)8uLL);
          v358 = (std::__shared_weak_count *)operator new();
          v359 = v358;
          v358->__shared_owners_ = 0;
          v360 = (unint64_t *)&v358->__shared_owners_;
          v358->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v358->__shared_weak_owners_ = 0;
          v358[1].__vftable = v357;
          *(_QWORD *)v525 = v357;
          *(_QWORD *)&v525[8] = v357;
          *(_QWORD *)&v525[16] = v358;
          do
            v361 = __ldxr(v360);
          while (__stxr(v361 + 1, v360));
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          v526 = 0;
          do
            v362 = __ldaxr(v360);
          while (__stlxr(v362 - 1, v360));
          if (!v362)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v359);
          }
          v363 = *(_QWORD *)v525;
          v364 = _os_log_pack_fill();
          *(_DWORD *)v364 = 134217984;
          *(double *)(v364 + 4) = v171;
          v365 = (char *)operator new();
          v366 = *(unsigned __int8 *)(v172 + 39);
          v367 = v496;
          if ((v366 & 0x80u) != 0)
          {
            v367 = *(const char **)(v172 + 16);
            v366 = *(_QWORD *)(v172 + 24);
          }
          *(_QWORD *)v365 = v363;
          *(_OWORD *)(v365 + 8) = *(_OWORD *)&v525[8];
          *(_QWORD *)&v525[8] = 0;
          *(_QWORD *)&v525[16] = 0;
          *(_OWORD *)(v365 + 24) = *(_OWORD *)&v525[24];
          *(_QWORD *)&v525[24] = 0;
          *(_QWORD *)&v525[32] = 0;
          *((_QWORD *)v365 + 5) = v367;
          *((_QWORD *)v365 + 6) = v366;
          v365[56] = 1;
          v498 = 0;
          v502 = v365;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v170 + 24) + 40))(*(_QWORD *)(v170 + 24), &v502);
          v368 = v502;
          v502 = 0;
          if (v368)
          {
            v369 = (std::__shared_weak_count *)*((_QWORD *)v368 + 4);
            if (v369)
            {
              v370 = (unint64_t *)&v369->__shared_owners_;
              do
                v371 = __ldaxr(v370);
              while (__stlxr(v371 - 1, v370));
              if (!v371)
              {
                ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                std::__shared_weak_count::__release_weak(v369);
              }
            }
            v372 = (std::__shared_weak_count *)*((_QWORD *)v368 + 2);
            if (v372)
            {
              v373 = (unint64_t *)&v372->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            MEMORY[0x227684CE8](v368, 0x10F0C40B62ED6C6);
            v498 = 0;
          }
          v375 = *(std::__shared_weak_count **)&v525[32];
          if (*(_QWORD *)&v525[32])
          {
            v376 = (unint64_t *)(*(_QWORD *)&v525[32] + 8);
            do
              v377 = __ldaxr(v376);
            while (__stlxr(v377 - 1, v376));
            if (!v377)
            {
              ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
              std::__shared_weak_count::__release_weak(v375);
            }
          }
          v378 = *(std::__shared_weak_count **)&v525[16];
          if (*(_QWORD *)&v525[16])
          {
            v379 = (unint64_t *)(*(_QWORD *)&v525[16] + 8);
            do
              v380 = __ldaxr(v379);
            while (__stlxr(v380 - 1, v379));
            if (!v380)
            {
              ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
              std::__shared_weak_count::__release_weak(v378);
            }
          }
        }
        else
        {
          os_log_type_enabled(v355, OS_LOG_TYPE_INFO);
          *(_DWORD *)v525 = 134217984;
          *(double *)&v525[4] = v171;
          v381 = (void *)_os_log_send_and_compose_impl();
          if (v381)
            free(v381);
        }
        if (v168)
        {
          v382 = sub_223B7EE5C(v165);
          sub_22322C138((uint64_t)&__p, "Negative area boundary: %f", v382);
          sub_223182C08((uint64_t)&__p);
        }
        sub_223182C08((uint64_t)&__p);
        v234 = v515;
        if (!v515)
          goto LABEL_645;
        v383 = (unint64_t *)&v515->__shared_owners_;
        do
          v236 = __ldaxr(v383);
        while (__stlxr(v236 - 1, v383));
LABEL_543:
        if (!v236)
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
        goto LABEL_645;
      }
    }
    memmove(v349, v348, v347);
    goto LABEL_489;
  }
  v502 = 0;
  v503 = 0;
  v504 = 0;
  if (!*(_DWORD *)(a2 + 276))
    goto LABEL_463;
  v501 = 1092616192;
  v498 = 0;
  v499 = 0;
  v500 = 0;
  if (sub_223AE91EC((float *)&v501, (uint64_t *)&v505, (char **)&v498, -1.0))
  {
    if ((sub_223AE91EC((float *)&v501, (uint64_t *)&v505, (char **)&v502, 12.0) & 1) == 0)
      sub_223ACD508((char **)&v502, (char *)v498, v499, 0xCCCCCCCCCCCCCCCDLL * ((v499 - (_BYTE *)v498) >> 3));
    v167 = 1;
    goto LABEL_455;
  }
  v175 = (char *)v505;
  if (v505 != v506)
  {
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v179 = 0;
    while (1)
    {
      while (1)
      {
        v166.n128_u32[0] = *((_DWORD *)v175 + 5);
        v180 = v166.n128_f32[0] * *((float *)v175 + 7);
        if (v179 >= v177)
          break;
        *(_DWORD *)v179 = v178;
        v179[1] = v180;
        v179 += 2;
        ++v178;
        v175 += 40;
        if (v175 == v506)
          goto LABEL_308;
      }
      v181 = ((char *)v179 - (char *)v176) >> 3;
      v182 = v181 + 1;
      if ((unint64_t)(v181 + 1) >> 61)
        sub_22316E078();
      if (v177 - v176 > v182)
        v182 = v177 - v176;
      v183 = (unint64_t)((char *)v177 - (char *)v176) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v182;
      if (v183)
      {
        if (v183 >> 61)
          sub_223174E94();
        v184 = operator new(8 * v183);
        v185 = (uint64_t)&v184[8 * v181];
        *(_DWORD *)v185 = v178;
        *(float *)(v185 + 4) = v180;
        v186 = (char *)v179 - (char *)v176;
        if (v179 == v176)
        {
LABEL_227:
          v189 = (float *)v185;
          v177 = (float *)&v184[8 * v183];
          v179 = (float *)(v185 + 8);
          if (!v176)
            goto LABEL_224;
LABEL_223:
          operator delete(v176);
          goto LABEL_224;
        }
      }
      else
      {
        v184 = 0;
        v185 = 8 * v181;
        *(_DWORD *)v185 = v178;
        *(float *)(v185 + 4) = v180;
        v186 = (char *)v179 - (char *)v176;
        if (v179 == v176)
          goto LABEL_227;
      }
      v187 = v186 - 8;
      if (v187 < 0x168)
        break;
      v191 = ((char *)(v179 - 2) - (char *)v176) & 0xFFFFFFFFFFFFFFF8;
      if (&v184[(char *)v179 - (char *)v176 - 8 - v191] > &v184[(char *)v179 - (char *)v176 - 8]
        || (float *)((char *)v179 - v191 - 8) > v179 - 2
        || (unint64_t)((char *)v176 - v184) < 0x20)
      {
        break;
      }
      v192 = (v187 >> 3) + 1;
      v193 = 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
      v188 = &v179[v193 / 0xFFFFFFFFFFFFFFFCLL];
      v189 = (float *)(v185 - v193);
      v194 = (__n128 *)&v184[8 * v181 - 16];
      v195 = (__n128 *)(v179 - 4);
      v196 = v192 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v195;
        v194[-1] = v195[-1];
        *v194 = v166;
        v194 -= 2;
        v195 -= 2;
        v196 -= 4;
      }
      while (v196);
      if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_221;
LABEL_222:
      v177 = (float *)&v184[8 * v183];
      v179 = (float *)(v185 + 8);
      if (v176)
        goto LABEL_223;
LABEL_224:
      v176 = v189;
      ++v178;
      v175 += 40;
      if (v175 == v506)
        goto LABEL_308;
    }
    v188 = v179;
    v189 = (float *)v185;
    do
    {
LABEL_221:
      v190 = *((_QWORD *)v188 - 1);
      v188 -= 2;
      *((_QWORD *)v189 - 1) = v190;
      v189 -= 2;
    }
    while (v188 != v176);
    goto LABEL_222;
  }
  v176 = 0;
  v179 = 0;
LABEL_308:
  v237 = 126 - 2 * __clz(((char *)v179 - (char *)v176) >> 3);
  if (v179 == v176)
    v238 = 0;
  else
    v238 = v237;
  sub_223AEA350(v176, (uint64_t *)v179, v238, 1, v166);
  if (v179 != v176)
  {
    v492 = 0;
    v239 = v176;
    while (2)
    {
      v240 = *(_DWORD *)v239;
      v241 = 0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3);
      __p = 0;
      rep = 0;
      v509 = 0;
      v242 = (v241 - 1);
      if ((_DWORD)v241 == 1 || v241 <= v242)
        goto LABEL_313;
      v243 = (v240 + 1) % v241;
      v244 = (v242 + v243) % v241;
      category = *(char **)((char *)v505
                          + 40
                          * ((v243 - 0x3333333333333333 * ((v506 - (_BYTE *)v505) >> 3) - 1)
                                         % (0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3)))
                          + 4);
      v524 = *(float32x2_t *)((char *)v505 + 40 * v243 + 4);
      v521 = *(float32x2_t *)((char *)v505 + 40 * ((v244 + 1) % v241) + 4);
      v245 = vsub_f32(v524, (float32x2_t)category);
      v522 = *(double *)((char *)v505 + 40 * v244 + 4);
      v246 = vmul_n_f32(v245, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v245, v245), (float32x2_t)vdup_lane_s32((int32x2_t)v245, 1), v245, 1).f32[0]));
      v247 = vsub_f32(*(float32x2_t *)&v522, v521);
      v519 = vmul_n_f32(v247, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v247, v247), (float32x2_t)vdup_lane_s32((int32x2_t)v247, 1), v247, 1).f32[0]));
      v520 = *(double *)&v246;
      if ((v246.i32[1] & 0x7FFFFFFFu) < 0x7F800000
        && (v246.i32[0] & 0x7FFFFFFFu) < 0x7F800000
        && (v519.i32[1] & 0x7FFFFFFFu) < 0x7F800000
        && (v519.i32[0] & 0x7FFFFFFFu) < 0x7F800000)
      {
        v250 = (HIDWORD(v520) & 0x7FFFFFFFu) < 0x7F800000 && (LODWORD(v520) & 0x7FFFFFFFu) < 0x7F800000;
        if (!v250
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterAreaExpander.hpp", 244, (uint64_t)"math::IsFinite(dir1)", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| ((v519.i32[1] & 0x7FFFFFFFu) < 0x7F800000 ? (v251 = (v519.i32[0] & 0x7FFFFFFFu) < 0x7F800000) : (v251 = 0), !v251&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterAreaExpander.hpp", 245, (uint64_t)"math::IsFinite(dir2)", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
        {
          abort();
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3) == v241)
        {
          v252 = 5;
        }
        else
        {
          v252 = sub_223ACD76C((float32x2_t *)&category, (float32x2_t *)&v520, &v521, &v519);
          if (!v252)
            goto LABEL_434;
        }
        v518.f32[0] = -*((float *)&v520 + 1);
        v518.i32[1] = LODWORD(v520);
        v516 = v519.i32[1];
        v517 = -v519.f32[0];
        if (v252 <= 3)
        {
          v253 = vadd_f32(*(float32x2_t *)&v520, v519);
          v254 = vmul_n_f32(v253, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v253, v253), (float32x2_t)vdup_lane_s32((int32x2_t)v253, 1), v253, 1).f32[0]));
          v518.f32[0] = -v254.f32[1];
          v516 = v254.i32[1];
          v518.i32[1] = v254.i32[0];
          v517 = -v254.f32[0];
        }
        *(_DWORD *)v525 = HIDWORD(v520);
        *(float *)&v525[4] = -*(float *)&v520;
        v255 = (float)(*((float *)&v520 + 1) * *((float *)&v520 + 1)) + (float)(*(float *)&v520 * *(float *)&v520);
        v256 = 0xCCCCCCCCCCCCCCCDLL * ((v506 - (_BYTE *)v505) >> 3);
        v257 = v244 % v256;
        v258 = fabsf(*(float *)&v520) <= fabsf(*((float *)&v520 + 1));
        v259 = v258;
        v260 = v258;
        v261 = v260 ? *((float *)&v520 + 1) : *(float *)&v520;
        v262 = *(float *)&v525[4 * v259];
        if (v260)
        {
          v263 = 3.4028e38;
          v264 = v243;
          v265 = v243;
          do
          {
            v266 = v265 % v256;
            v267 = vsub_f32(v524, *(float32x2_t *)((char *)v505 + 40 * v266 + 4));
            v268 = (float)(vmuls_lane_f32(*(float *)&v520, v267, 1) - (float)(*((float *)&v520 + 1) * v267.f32[0]))
                 / v255;
            if ((float)((float)((float)-v267.f32[1] - (float)(v262 * v268)) / v261) > 0.0)
            {
              v269 = v263 == 3.4028e38;
              if (v268 > v263)
                v269 = 1;
              if (v269)
              {
                v264 = v266;
                v263 = v268;
              }
            }
            v265 = v266 + 1;
          }
          while ((_DWORD)v266 != v257);
        }
        else
        {
          v263 = 3.4028e38;
          v264 = v243;
          v270 = v243;
          do
          {
            v271 = v270 % v256;
            v272 = vsub_f32(v524, *(float32x2_t *)((char *)v505 + 40 * v271 + 4));
            v273 = (float)(vmuls_lane_f32(*(float *)&v520, v272, 1) - (float)(*((float *)&v520 + 1) * v272.f32[0]))
                 / v255;
            if ((float)((float)((float)-v272.f32[0] - (float)(v262 * v273)) / v261) > 0.0)
            {
              v274 = v263 == 3.4028e38;
              if (v273 > v263)
                v274 = 1;
              if (v274)
              {
                v264 = v271;
                v263 = v273;
              }
            }
            v270 = v271 + 1;
          }
          while ((_DWORD)v271 != v257);
        }
        v275 = v263 >= -0.001 || v263 == 3.4028e38;
        v276 = v275 ? v264 : v243;
        *(float *)v525 = -v519.f32[1];
        *(_DWORD *)&v525[4] = v519.i32[0];
        v277 = (float)-(float)(v519.f32[1] * v519.f32[1]) - (float)(v519.f32[0] * v519.f32[0]);
        v278 = fabsf(v519.f32[0]) <= fabsf(v519.f32[1]);
        v279 = v278;
        v280 = v278;
        v281 = v280 ? v519.f32[1] : v519.f32[0];
        v282 = *(float *)&v525[4 * v279];
        if (v280)
        {
          v283 = 3.4028e38;
          v284 = v244;
          v285 = v243;
          do
          {
            v286 = v285 % v256;
            v287 = vsub_f32(*(float32x2_t *)&v522, *(float32x2_t *)((char *)v505 + 40 * v286 + 4));
            v287.f32[0] = (float)(vmuls_lane_f32(v519.f32[0], v287, 1) - (float)(v519.f32[1] * v287.f32[0])) / v277;
            if ((float)((float)((float)-v287.f32[1] - (float)(v282 * v287.f32[0])) / v281) > 0.0)
            {
              v288 = v283 == 3.4028e38;
              if (v287.f32[0] > v283)
                v288 = 1;
              if (v288)
              {
                v284 = v286;
                v283 = v287.f32[0];
              }
            }
            v285 = v286 + 1;
          }
          while ((_DWORD)v286 != v257);
        }
        else
        {
          v283 = 3.4028e38;
          v284 = v244;
          v289 = v243;
          do
          {
            v290 = v289 % v256;
            v287 = *(float32x2_t *)((char *)v505 + 40 * v290 + 4);
            v291 = vsub_f32(*(float32x2_t *)&v522, v287);
            v287.f32[0] = (float)(vmuls_lane_f32(v519.f32[0], v291, 1) - (float)(v519.f32[1] * v291.f32[0])) / v277;
            if ((float)((float)((float)-v291.f32[0] - (float)(v282 * v287.f32[0])) / v281) > 0.0)
            {
              v292 = v283 == 3.4028e38;
              if (v287.f32[0] > v283)
                v292 = 1;
              if (v292)
              {
                v284 = v290;
                v283 = v287.f32[0];
              }
            }
            v289 = v290 + 1;
          }
          while ((_DWORD)v290 != v257);
        }
        v293 = v283 >= -0.001 || v283 == 3.4028e38;
        v294 = v293 ? v284 : v244;
        if (v276 != v294)
        {
          if (v276 == (_DWORD)v243)
            goto LABEL_396;
          v295 = (v243 + 1) % v256;
          if (v276 == (_DWORD)v295)
            goto LABEL_396;
          v315 = *(float32x2_t *)((char *)v505 + 40 * v243 + 4);
          v316 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v276 + 4), v315));
          v317 = vmul_f32(v316, vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v295 + 4), v315));
          v296 = v276;
          if (vsub_f32(v317, (float32x2_t)vdup_lane_s32((int32x2_t)v317, 1)).f32[0] <= 0.0)
          {
            while (1)
            {
              v295 = (v295 + 1) % v256;
              if (v276 == (_DWORD)v295)
                break;
              v318 = vmul_f32(v316, vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v295 + 4), v315));
              if (vsub_f32(v318, (float32x2_t)vdup_lane_s32((int32x2_t)v318, 1)).f32[0] > 0.0)
              {
                v296 = v276;
                goto LABEL_397;
              }
            }
LABEL_396:
            v296 = v243;
          }
LABEL_397:
          if (v294 == (_DWORD)v244
            || (v297 = (v244 - 0x3333333333333333 * ((v506 - (_BYTE *)v505) >> 3) - 1) % v256, v294 == (_DWORD)v297))
          {
LABEL_399:
            v298 = v244;
          }
          else
          {
            v319 = *(float32x2_t *)((char *)v505 + 40 * v244 + 4);
            v320 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v294 + 4), v319));
            v321 = vmul_f32(v320, vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v297 + 4), v319));
            v298 = v294;
            if (vsub_f32(v321, (float32x2_t)vdup_lane_s32((int32x2_t)v321, 1)).f32[0] >= 0.0)
            {
              while (1)
              {
                v297 = (v256 - 1 + v297) % v256;
                if (v294 == (_DWORD)v297)
                  goto LABEL_399;
                v322 = vmul_f32(v320, vsub_f32(*(float32x2_t *)((char *)v505 + 40 * v297 + 4), v319));
                if (vsub_f32(v322, (float32x2_t)vdup_lane_s32((int32x2_t)v322, 1)).f32[0] < 0.0)
                {
                  v298 = v294;
                  break;
                }
              }
            }
          }
          v299 = v296 % v256;
          v300 = ((v256 + v298 - 1) % v256) % v256;
          v301 = (float *)((char *)v505 + 40 * v299);
          v303 = v301[8] < 10.0 && *(_BYTE *)v301 != 0;
          while ((_DWORD)v299 != v300)
          {
            v299 = (v299 + 1) % v256;
            v304 = (float *)((char *)v505 + 40 * v299);
            if (v304[8] >= 10.0 || *(_BYTE *)v304 == 0)
              v303 = 0;
          }
          if (v303)
          {
            sub_223ACE350((uint64_t *)&v505, v252, v276, v294, (float32x2_t *)&v520, &v519, &v518, (uint64_t)v525, v522, *(double *)&v287, (float *)&v516);
            *(_DWORD *)&v525[4] = v296;
            *(_DWORD *)&v525[8] = v298;
            if (v530 == 3.4028e38 || v530 >= 0.0)
            {
              v306 = rep;
              if ((unint64_t)rep >= v509)
              {
                v314 = sub_223AEA078(&__p, (uint64_t)v525);
              }
              else
              {
                v307 = *(_OWORD *)v525;
                v308 = *(_OWORD *)&v525[16];
                rep[8] = *(_DWORD *)&v525[32];
                *((_QWORD *)v306 + 5) = 0;
                *(_OWORD *)v306 = v307;
                *((_OWORD *)v306 + 1) = v308;
                *((_QWORD *)v306 + 6) = 0;
                *((_QWORD *)v306 + 7) = 0;
                v309 = v526;
                v310 = (char *)v527 - (char *)v526;
                if (v527 != v526)
                {
                  if ((v310 & 0x8000000000000000) != 0)
                    sub_22316E078();
                  v311 = (char *)v527 - (char *)v526;
                  v312 = (char *)operator new(v310);
                  *((_QWORD *)v306 + 5) = v312;
                  *((_QWORD *)v306 + 6) = v312;
                  *((_QWORD *)v306 + 7) = &v312[8 * (v311 >> 3)];
                  v311 &= 0xFFFFFFFFFFFFFFF8;
                  memcpy(v312, v309, v311);
                  *((_QWORD *)v306 + 6) = &v312[v311];
                }
                v313 = v529;
                *((float *)v306 + 18) = v530;
                *((_QWORD *)v306 + 8) = v313;
                v314 = (char *)(v306 + 20);
              }
              rep = v314;
            }
            if (v526)
            {
              v527 = v526;
              operator delete(v526);
            }
          }
        }
      }
LABEL_434:
      v323 = __p;
      if (__p == rep)
      {
        v324 = 3;
        if (!__p)
        {
LABEL_448:
          if (v324 != 3 && v324)
            goto LABEL_452;
LABEL_313:
          v239 += 2;
          if (v239 == v179)
            goto LABEL_452;
          continue;
        }
      }
      else
      {
        *((_DWORD *)__p + 16) = 1069547520;
        if ((sub_223AD01C8((float *)&v501, (uint64_t *)&v505, (uint64_t)v323, &v502, (uint64_t *)&__p, 0) & 1) != 0)
        {
          v492 = 1;
          v324 = 2;
          v323 = __p;
          if (!__p)
            goto LABEL_448;
        }
        else
        {
          v324 = 0;
          v503 = (char *)v502;
          v323 = __p;
          if (!__p)
            goto LABEL_448;
        }
      }
      break;
    }
    v325 = rep;
    v326 = v323;
    if (rep != v323)
    {
      do
      {
        v327 = (void *)*((_QWORD *)v325 - 5);
        if (v327)
        {
          *((_QWORD *)v325 - 4) = v327;
          operator delete(v327);
        }
        v325 -= 20;
      }
      while (v325 != v323);
      v326 = __p;
    }
    rep = v323;
    operator delete(v326);
    goto LABEL_448;
  }
  v492 = 0;
LABEL_452:
  if (v176)
    operator delete(v176);
  v167 = v492;
LABEL_455:
  if (v498)
  {
    v499 = (char *)v498;
    operator delete(v498);
  }
  if (!v167)
  {
LABEL_463:
    sub_2233320C8((_QWORD *)(a2 + 120), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
    sub_22362017C(a2 + 144, *(char ***)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    sub_22342D7E8((_QWORD *)(a2 + 168), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    sub_22342D7E8((_QWORD *)(a2 + 192), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
    v338 = *(float *)(a2 + 344);
    goto LABEL_464;
  }
  v328 = (char **)(a2 + 120);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a2 + 120);
  v329 = *(_BYTE **)(a2 + 168);
  v493 = (void **)(a2 + 168);
  v331 = (char *)v502;
  v330 = v503;
  v332 = 0xCCCCCCCCCCCCCCCDLL * ((v503 - (_BYTE *)v502) >> 3);
  if (v332 <= (uint64_t)(*(_QWORD *)(a2 + 184) - (_QWORD)v329) >> 2)
    goto LABEL_552;
  if (v332 >> 62)
    goto LABEL_685;
  v333 = *(_BYTE **)(a2 + 176);
  v334 = (char *)operator new(0x3333333333333334 * ((v503 - (_BYTE *)v502) >> 3));
  v335 = v333 - v329;
  v336 = &v334[(v333 - v329) & 0xFFFFFFFFFFFFFFFCLL];
  v337 = v336;
  if (v333 != v329)
  {
    if ((unint64_t)(v335 - 4) < 0x2C)
    {
      v337 = &v334[(v333 - v329) & 0xFFFFFFFFFFFFFFFCLL];
      goto LABEL_549;
    }
    v337 = &v334[(v333 - v329) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v333 - &v334[v335 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_697;
    v384 = v335 >> 2;
    v385 = ((unint64_t)(v335 - 4) >> 2) + 1;
    v386 = 4 * (v385 & 0x7FFFFFFFFFFFFFF8);
    v387 = &v333[-v386];
    v337 = &v336[-v386];
    v388 = &v334[4 * v384 - 16];
    v389 = (__int128 *)(v333 - 16);
    v390 = v385 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v391 = *v389;
      *((_OWORD *)v388 - 1) = *(v389 - 1);
      *(_OWORD *)v388 = v391;
      v388 -= 32;
      v389 -= 2;
      v390 -= 8;
    }
    while (v390);
    v333 = v387;
    if (v385 != (v385 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_697:
      do
      {
LABEL_549:
        v392 = *((_DWORD *)v333 - 1);
        v333 -= 4;
        *((_DWORD *)v337 - 1) = v392;
        v337 -= 4;
      }
      while (v333 != v329);
    }
  }
  *(_QWORD *)(a2 + 168) = v337;
  *(_QWORD *)(a2 + 176) = v336;
  *(_QWORD *)(a2 + 184) = &v334[4 * v332];
  if (v329)
  {
    operator delete(v329);
    v331 = (char *)v502;
    v330 = v503;
    v332 = 0xCCCCCCCCCCCCCCCDLL * ((v503 - (_BYTE *)v502) >> 3);
  }
LABEL_552:
  v393 = *(_BYTE **)(a2 + 96);
  if (v332 <= (uint64_t)(*(_QWORD *)(a2 + 112) - (_QWORD)v393) >> 2)
    goto LABEL_564;
  if (v332 >> 62)
LABEL_685:
    sub_22316E078();
  v394 = *(_BYTE **)(a2 + 104);
  v395 = (char *)operator new(4 * v332);
  v396 = v394 - v393;
  v397 = &v395[(v394 - v393) & 0xFFFFFFFFFFFFFFFCLL];
  v398 = v397;
  if (v394 != v393)
  {
    if ((unint64_t)(v396 - 4) < 0x2C)
    {
      v398 = &v395[(v394 - v393) & 0xFFFFFFFFFFFFFFFCLL];
      goto LABEL_561;
    }
    v398 = &v395[(v394 - v393) & 0xFFFFFFFFFFFFFFFCLL];
    if (v394 - v395 - (v396 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_698;
    v399 = v396 >> 2;
    v400 = ((unint64_t)(v396 - 4) >> 2) + 1;
    v401 = 4 * (v400 & 0x7FFFFFFFFFFFFFF8);
    v402 = &v394[-v401];
    v398 = &v397[-v401];
    v403 = &v395[4 * v399 - 16];
    v404 = (__int128 *)(v394 - 16);
    v405 = v400 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v406 = *v404;
      *((_OWORD *)v403 - 1) = *(v404 - 1);
      *(_OWORD *)v403 = v406;
      v403 -= 32;
      v404 -= 2;
      v405 -= 8;
    }
    while (v405);
    v394 = v402;
    if (v400 != (v400 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_698:
      do
      {
LABEL_561:
        v407 = *((_DWORD *)v394 - 1);
        v394 -= 4;
        *((_DWORD *)v398 - 1) = v407;
        v398 -= 4;
      }
      while (v394 != v393);
    }
  }
  *(_QWORD *)(a2 + 96) = v398;
  *(_QWORD *)(a2 + 104) = v397;
  *(_QWORD *)(a2 + 112) = &v395[4 * v332];
  if (v393)
  {
    operator delete(v393);
    v331 = (char *)v502;
    v330 = v503;
  }
LABEL_564:
  if (v331 == v330)
  {
    v338 = 0.0;
    goto LABEL_464;
  }
  v488 = (void **)(a2 + 192);
  v408 = 0.0;
  v409 = 0.0;
  while (2)
  {
    v413 = *(char **)(a2 + 128);
    v412 = *(_QWORD *)(a2 + 136);
    if ((unint64_t)v413 < v412)
    {
      *(_QWORD *)v413 = *(_QWORD *)(v331 + 4);
      v414 = (uint64_t)(v413 + 8);
      goto LABEL_590;
    }
    v415 = *v328;
    v416 = v413 - *v328;
    v417 = v416 >> 3;
    v418 = (v416 >> 3) + 1;
    if (v418 >> 61)
      sub_22316E078();
    v419 = v412 - (_QWORD)v415;
    if (v419 >> 2 > v418)
      v418 = v419 >> 2;
    if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF8)
      v420 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v420 = v418;
    if (!v420)
    {
      v421 = 0;
      v422 = (_QWORD *)(8 * v417);
      *(_QWORD *)(8 * v417) = *(_QWORD *)(v331 + 4);
      v414 = 8 * v417 + 8;
      v423 = (char *)(v413 - v415);
      if (v413 != v415)
        goto LABEL_579;
LABEL_588:
      *(_QWORD *)(a2 + 120) = v422;
      *(_QWORD *)(a2 + 128) = v414;
      *(_QWORD *)(a2 + 136) = &v421[8 * v420];
      if (!v413)
        goto LABEL_590;
      goto LABEL_589;
    }
    if (v420 >> 61)
      sub_223174E94();
    v421 = operator new(8 * v420);
    v422 = &v421[8 * v417];
    *v422 = *(_QWORD *)(v331 + 4);
    v414 = (uint64_t)(v422 + 1);
    v423 = (char *)(v413 - v415);
    if (v413 == v415)
      goto LABEL_588;
LABEL_579:
    v424 = (unint64_t)(v423 - 8);
    if (v424 < 0x58)
      goto LABEL_699;
    if ((unint64_t)(v413 - v421 - v416) < 0x20)
      goto LABEL_699;
    v425 = (v424 >> 3) + 1;
    v426 = 8 * (v425 & 0x3FFFFFFFFFFFFFFCLL);
    v427 = &v413[-v426];
    v422 = (_QWORD *)((char *)v422 - v426);
    v428 = &v421[8 * v417 - 16];
    v429 = v413 - 16;
    v430 = v425 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v431 = *(_OWORD *)v429;
      *(v428 - 1) = *((_OWORD *)v429 - 1);
      *v428 = v431;
      v428 -= 2;
      v429 -= 32;
      v430 -= 4;
    }
    while (v430);
    v413 = v427;
    if (v425 != (v425 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_699:
      do
      {
        v432 = *((_QWORD *)v413 - 1);
        v413 -= 8;
        *--v422 = v432;
      }
      while (v413 != v415);
    }
    v413 = *v328;
    *(_QWORD *)(a2 + 120) = v422;
    *(_QWORD *)(a2 + 128) = v414;
    *(_QWORD *)(a2 + 136) = &v421[8 * v420];
    if (v413)
LABEL_589:
      operator delete(v413);
LABEL_590:
    *(_QWORD *)(a2 + 128) = v414;
    v433 = fminf((float)(*((float *)v331 + 8) * 4.5) / (float)(*((float *)v331 + 8) + 80.0), 1.0);
    v435 = *(float **)(a2 + 176);
    v434 = *(_QWORD *)(a2 + 184);
    if ((unint64_t)v435 < v434)
    {
      *v435 = v433;
      v436 = (uint64_t)(v435 + 1);
      goto LABEL_611;
    }
    v437 = (float *)*v493;
    v438 = (char *)v435 - (_BYTE *)*v493;
    v439 = v438 >> 2;
    v440 = (v438 >> 2) + 1;
    if (v440 >> 62)
      sub_22316E078();
    v441 = v434 - (_QWORD)v437;
    if (v441 >> 1 > v440)
      v440 = v441 >> 1;
    if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFFCLL)
      v442 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v442 = v440;
    if (v442)
    {
      if (v442 >> 62)
        sub_223174E94();
      v443 = operator new(4 * v442);
      v444 = (float *)&v443[4 * v439];
      *v444 = v433;
      v436 = (uint64_t)(v444 + 1);
      v445 = (char *)v435 - (char *)v437;
      if (v435 == v437)
        goto LABEL_609;
LABEL_603:
      v446 = v445 - 4;
      if (v446 < 0x2C)
        goto LABEL_700;
      if ((unint64_t)((char *)v435 - v443 - v438) < 0x20)
        goto LABEL_700;
      v447 = (v446 >> 2) + 1;
      v448 = 4 * (v447 & 0x7FFFFFFFFFFFFFF8);
      v449 = &v435[v448 / 0xFFFFFFFFFFFFFFFCLL];
      v444 = (float *)((char *)v444 - v448);
      v450 = &v443[4 * v439 - 16];
      v451 = v435 - 4;
      v452 = v447 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v453 = *(_OWORD *)v451;
        *(v450 - 1) = *((_OWORD *)v451 - 1);
        *v450 = v453;
        v450 -= 2;
        v451 -= 8;
        v452 -= 8;
      }
      while (v452);
      v435 = v449;
      if (v447 != (v447 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_700:
        do
        {
          v454 = *((_DWORD *)v435-- - 1);
          *((_DWORD *)v444-- - 1) = v454;
        }
        while (v435 != v437);
      }
    }
    else
    {
      v443 = 0;
      v444 = (float *)(4 * v439);
      *(float *)(4 * v439) = v433;
      v436 = 4 * v439 + 4;
      v445 = (char *)v435 - (char *)v437;
      if (v435 != v437)
        goto LABEL_603;
    }
LABEL_609:
    *(_QWORD *)(a2 + 168) = v444;
    *(_QWORD *)(a2 + 176) = v436;
    *(_QWORD *)(a2 + 184) = &v443[4 * v442];
    if (v437)
      operator delete(v437);
LABEL_611:
    *(_QWORD *)(a2 + 176) = v436;
    v455 = fmaxf(fminf(*((float *)v331 + 9) / (float)**(int **)(a1 + 8), 1.0), 0.0);
    v457 = *(float **)(a2 + 200);
    v456 = *(_QWORD *)(a2 + 208);
    if ((unint64_t)v457 < v456)
    {
      *v457 = v455;
      v410 = (uint64_t)(v457 + 1);
      goto LABEL_567;
    }
    v458 = (float *)*v488;
    v459 = (char *)v457 - (_BYTE *)*v488;
    v460 = v459 >> 2;
    v461 = (v459 >> 2) + 1;
    if (v461 >> 62)
      sub_22316E078();
    v462 = v456 - (_QWORD)v458;
    if (v462 >> 1 > v461)
      v461 = v462 >> 1;
    if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFFCLL)
      v463 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v463 = v461;
    if (!v463)
    {
      v464 = 0;
      v465 = (float *)(4 * v460);
      *(float *)(4 * v460) = v455;
      v410 = 4 * v460 + 4;
      v466 = (char *)v457 - (char *)v458;
      if (v457 == v458)
        goto LABEL_629;
      goto LABEL_623;
    }
    if (v463 >> 62)
      sub_223174E94();
    v464 = operator new(4 * v463);
    v465 = (float *)&v464[4 * v460];
    *v465 = v455;
    v410 = (uint64_t)(v465 + 1);
    v466 = (char *)v457 - (char *)v458;
    if (v457 != v458)
    {
LABEL_623:
      v467 = v466 - 4;
      if (v467 < 0x2C)
        goto LABEL_701;
      if ((unint64_t)((char *)v457 - &v464[v459]) < 0x20)
        goto LABEL_701;
      v468 = (v467 >> 2) + 1;
      v469 = 4 * (v468 & 0x7FFFFFFFFFFFFFF8);
      v470 = &v457[v469 / 0xFFFFFFFFFFFFFFFCLL];
      v465 = (float *)((char *)v465 - v469);
      v471 = &v464[4 * v460 - 16];
      v472 = v457 - 4;
      v473 = v468 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v474 = *(_OWORD *)v472;
        *(v471 - 1) = *((_OWORD *)v472 - 1);
        *v471 = v474;
        v471 -= 2;
        v472 -= 8;
        v473 -= 8;
      }
      while (v473);
      v457 = v470;
      if (v468 != (v468 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_701:
        do
        {
          v475 = *((_DWORD *)v457-- - 1);
          *((_DWORD *)v465-- - 1) = v475;
        }
        while (v457 != v458);
      }
    }
LABEL_629:
    *(_QWORD *)(a2 + 192) = v465;
    *(_QWORD *)(a2 + 200) = v410;
    *(_QWORD *)(a2 + 208) = &v464[4 * v463];
    if (v458)
      operator delete(v458);
LABEL_567:
    *(_QWORD *)(a2 + 200) = v410;
    v411 = *((float *)v331 + 5);
    v408 = v408 + (float)(v455 * v411);
    v409 = v409 + v411;
    v331 += 40;
    if (v331 != v330)
      continue;
    break;
  }
  v338 = 0.0;
  if (v409 > 0.000001)
    v338 = v408 / v409;
LABEL_464:
  *(float *)(a2 + 348) = v338;
  if (sub_223B7EE5C((uint64_t *)(a2 + 120)) <= 0.0)
  {
    sub_223AD515C(&v521);
    if (**(int **)(*(_QWORD *)&v521 + 56) <= 3)
    {
      v339 = *(unsigned __int8 *)(*(_QWORD *)&v521 + 72);
      v340 = sub_22322F254(*(_QWORD *)&v521, "OSLogSurrogateAppender", 1, 0);
      v341 = v340 ? v340 + 16 : 0;
      if (v339 || v340)
      {
        __p = &v521;
        rep = (_DWORD *)std::chrono::steady_clock::now().__d_.__rep_;
        v509 = std::chrono::system_clock::now().__d_.__rep_;
        v510 = 3;
        v511 = "unknown file";
        v512 = 1609;
        v514 = 0;
        v515 = 0;
        v513 = "unknown function";
        v520 = sub_223B7EE5C((uint64_t *)(a2 + 120));
        v342 = *(float32x2_t **)__p;
        v343 = (uint64_t *)(*(_QWORD *)__p + 16);
        if (*(char *)(*(_QWORD *)__p + 39) < 0)
        {
          v345 = (char *)v342[2];
          v344 = v342[3];
        }
        else
        {
          v344 = (float32x2_t)*(unsigned __int8 *)(*(_QWORD *)__p + 39);
          v345 = (char *)(*(_QWORD *)__p + 16);
        }
        category = v345;
        v524 = v344;
        v476 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v476 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v525);
          sub_223199C58("com.apple.cv3d", (unint64_t)v525, byte_255788F40);
          if (v525[24] && (v525[23] & 0x80000000) != 0)
            operator delete(*(void **)v525);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        v477 = (char *)byte_255788F40[23];
        if (byte_255788F40[23] >= 0)
        {
          v478 = byte_255788F40;
        }
        else
        {
          v477 = *(char **)&byte_255788F40[8];
          v478 = *(char **)byte_255788F40;
        }
        v498 = v478;
        v499 = v477;
        *(_QWORD *)v525 = os_log_create(v478, category);
        sub_223199D38(&v525[8], (uint64_t)&v498);
        sub_223199D38(&v526, (uint64_t)&category);
        v479 = *(NSObject **)v525;
        sub_223199BDC((uint64_t)v525);
        sub_223AEB0BC(v341, v343, v479, OS_LOG_TYPE_INFO, (uint64_t *)&v520);
        if (v339)
        {
          v480 = sub_223B7EE5C((uint64_t *)(a2 + 120));
          sub_22322C138((uint64_t)&__p, "Negative area hallucinated boundary: %f", v480);
          sub_223182C08((uint64_t)&__p);
        }
        sub_223182DAC((uint64_t)&__p);
      }
    }
    sub_2233320C8((_QWORD *)(a2 + 120), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
    sub_22362017C(a2 + 144, *(char ***)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    sub_22342D7E8((_QWORD *)(a2 + 168), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    sub_22342D7E8((_QWORD *)(a2 + 192), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
    *(_DWORD *)(a2 + 348) = *(_DWORD *)(a2 + 344);
  }
  if (v502)
  {
    v503 = (char *)v502;
    operator delete(v502);
  }
LABEL_645:
  if (v505)
  {
    v506 = (char *)v505;
    operator delete(v505);
  }
}

void sub_223AE8DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  uint64_t v27;
  _Unwind_Exception *v29;

  if (*(_BYTE *)(v27 - 232))
  {
    if (*(char *)(v27 - 233) < 0)
      operator delete(*(void **)(v27 - 256));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  if (__p)
  {
    operator delete(__p);
    v29 = exception_object;
    if (!exception_object)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    v29 = exception_object;
    if (!exception_object)
      goto LABEL_6;
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_223AE91EC(float *a1, uint64_t *a2, char **a3, float a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  float32x2_t v34;
  float32x2_t v35;
  BOOL v38;
  BOOL v39;
  int v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  float v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  _BOOL8 v56;
  int v57;
  float v58;
  float v59;
  float v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  float32x2_t v64;
  float v65;
  _BOOL4 v66;
  unsigned int v67;
  unint64_t v68;
  float32x2_t v69;
  float v70;
  _BOOL4 v71;
  BOOL v72;
  unsigned int v73;
  float v74;
  BOOL v75;
  _BOOL8 v76;
  int v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  float32x2_t v84;
  _BOOL4 v85;
  unsigned int v86;
  unint64_t v87;
  float32x2_t v88;
  _BOOL4 v89;
  BOOL v90;
  uint64_t v91;
  float32x2_t v92;
  float32x2_t v93;
  unint64_t v94;
  float32x2_t v95;
  unint64_t v96;
  unint64_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  char *v113;
  size_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char **v118;
  char v119;
  char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _QWORD *v124;
  float *v125;
  uint64_t *v126;
  void *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  __int128 v137;
  _QWORD *v138;
  _QWORD *v139;
  void *v140;
  void *v141;
  char **v142;
  char **v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  void *v147;
  void *v148;
  char *v149;
  void *v150;
  void *v151;
  char v154;
  float32x2_t v155;
  unint64_t v156;
  float32x2_t v157;
  void *v158;
  char *v159;
  unint64_t v160;
  void *v161[2];
  __int128 v162;
  int v163;
  void *__p;
  _BYTE *v165;
  uint64_t v166;
  float v167;
  __int32 v168;
  float v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  double v174;
  float32x2_t v175;
  float32x2_t v176;

  v5 = a2;
  v7 = *a2;
  v8 = a2[1];
  if (v8 == *a2)
  {
    if (a4 != 0.0)
    {
      v118 = a3;
      v158 = 0;
      v159 = 0;
      v16 = a4;
      v160 = 0;
      if (a4 < 0.0)
        goto LABEL_168;
      goto LABEL_165;
    }
LABEL_166:
    v119 = 0;
    return v119 & 1;
  }
  v9 = 0;
  v10 = (v8 - *a2) / 40;
  v11 = *(float *)(v7 + 4);
  v12 = *(float *)(v7 + 8);
  v13 = 0.0;
  do
  {
    if (v9 == (_DWORD)v10 - 1)
    {
      v14 = 0;
      v9 = 0;
    }
    else
    {
      v14 = (v9 + 1) % v10;
      v9 = v14;
    }
    v15 = v7 + 40 * v14;
    v13 = v13 + (float)((float)((float)(v11 * *(float *)(v15 + 8)) - (float)(v12 * *(float *)(v15 + 4))) * 0.5);
    v11 = *(float *)(v15 + 4);
    v12 = *(float *)(v15 + 8);
  }
  while (v9);
  v16 = a4 - v13;
  if (a4 >= 0.0 && v16 <= 0.0)
    goto LABEL_166;
  v17 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  while (1)
  {
    v18 = v7 + 40 * v17;
    if (*(float *)(v18 + 32) >= 10.0 && *(float *)(v18 + 20) >= 0.5)
      break;
    if (v10 == ++v17)
    {
      LODWORD(v17) = 0;
      break;
    }
  }
  LODWORD(v20) = 0;
  do
  {
    v23 = 0;
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3);
    v24 = (v20 + v17) % v21;
    do
    {
      v25 = v23;
      if (v21 <= v23)
        goto LABEL_19;
      v26 = (v23 + v24) % v21;
      v27 = v7 + 40 * v26;
      v28 = *(float *)(v27 + 20);
      v29 = *(float *)(v27 + 32);
      ++v23;
    }
    while (v29 < 10.0 || v28 < 0.5);
    if (v23 != 1)
    {
      v31 = (v24 - 0x3333333333333333 * ((v8 - v7) >> 3) - 1) % (0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3));
      v32 = v7 + 40 * v31;
      if (*(float *)(v32 + 32) >= 10.0 && *(float *)(v32 + 20) >= 0.5 && v29 >= 10.0 && v28 >= 0.5)
      {
        v33 = (v25 + v24) % v21;
        v175 = *(float32x2_t *)(v7 + 40 * v31 + 4);
        v176 = *(float32x2_t *)(v7 + 40 * v24 + 4);
        v173 = *(float32x2_t *)(v7 + 40 * ((v26 + 1) % v21) + 4);
        v34 = vsub_f32(v176, v175);
        v174 = *(double *)(v7 + 40 * v26 + 4);
        v157 = vmul_n_f32(v34, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v34, v34), (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1), v34, 1).f32[0]));
        v172 = v157;
        v35 = vsub_f32(*(float32x2_t *)&v174, v173);
        v155 = vmul_n_f32(v35, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v35, v35), (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1), v35, 1).f32[0]));
        v171 = v155;
        if ((v157.i32[1] & 0x7FFFFFFFu) >= 0x7F800000 || (v157.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          goto LABEL_18;
        if ((v171.i32[1] & 0x7FFFFFFFu) >= 0x7F800000 || (v171.i32[0] & 0x7FFFFFFFu) >= 0x7F800000)
          goto LABEL_18;
        v38 = (v172.i32[1] & 0x7FFFFFFFu) < 0x7F800000 && (v172.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
        if (!v38
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterAreaExpander.hpp", 244, (uint64_t)"math::IsFinite(dir1)", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| ((v171.i32[1] & 0x7FFFFFFFu) < 0x7F800000 ? (v39 = (v171.i32[0] & 0x7FFFFFFFu) < 0x7F800000) : (v39 = 0), !v39&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterAreaExpander.hpp", 245, (uint64_t)"math::IsFinite(dir2)", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
        {
          abort();
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 3) == v23)
        {
          v40 = 5;
          v170.f32[0] = -v157.f32[1];
          v170.i32[1] = v157.i32[0];
          v168 = v155.i32[1];
          v169 = -v155.f32[0];
        }
        else
        {
          v46 = sub_223ACD76C(&v175, &v172, &v173, &v171);
          v40 = v46;
          if (!v46)
          {
LABEL_18:
            v7 = *v5;
            v8 = v5[1];
            v21 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *v5) >> 3);
            goto LABEL_19;
          }
          v170.f32[0] = -v172.f32[1];
          v170.i32[1] = v172.i32[0];
          v168 = v171.i32[1];
          v169 = -v171.f32[0];
          if (v46 <= 3)
          {
            v41 = vadd_f32(v172, v171);
            v42 = vmul_n_f32(v41, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v41, v41), (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), v41, 1).f32[0]));
            v170.f32[0] = -v42.f32[1];
            v168 = v42.i32[1];
            v170.i32[1] = v42.i32[0];
            v169 = -v42.f32[0];
          }
        }
        v43 = *v5;
        v44 = (v5[1] - *v5) >> 3;
        if ((_DWORD)v33 == (_DWORD)v24)
        {
          v45 = 0xCCCCCCCCCCCCCCCDLL * v44;
          goto LABEL_69;
        }
        v45 = 0xCCCCCCCCCCCCCCCDLL * v44;
        while (1)
        {
          v47 = v43 + 40 * v24;
          if (*(_BYTE *)v47 && *(float *)(v47 + 32) < 10.0)
            break;
          LODWORD(v24) = (v24 + 1) % v45;
          if ((_DWORD)v24 == (_DWORD)v33)
          {
            LODWORD(v24) = v33;
            break;
          }
        }
LABEL_69:
        while ((_DWORD)v33 != (_DWORD)v24)
        {
          v49 = v33;
          v33 = (v45 + v33 - 1) % v45;
          v50 = v43 + 40 * v33;
          if (*(_BYTE *)v50)
            v51 = *(float *)(v50 + 32) < 10.0;
          else
            v51 = 0;
          if (v51)
          {
            if ((_DWORD)v24 != v49)
            {
              LODWORD(v161[0]) = v172.i32[1];
              *((float *)v161 + 1) = -v172.f32[0];
              v52 = (float)(*(float *)v161 * *(float *)v161) + (float)(v172.f32[0] * v172.f32[0]);
              v53 = v49;
              v54 = v49 % v45;
              v55 = fabsf(v172.f32[0]) <= fabsf(v172.f32[1]);
              v56 = v55;
              v57 = v55;
              v58 = v57 ? v172.f32[1] : v172.f32[0];
              v59 = *((float *)v161 + v56);
              if (v57)
              {
                v60 = 3.4028e38;
                v61 = v24;
                v62 = v24;
                do
                {
                  v63 = v62 % v45;
                  v64 = vsub_f32(v176, *(float32x2_t *)(v43 + 40 * v63 + 4));
                  v65 = (float)(vmuls_lane_f32(v172.f32[0], v64, 1) - (float)(v172.f32[1] * v64.f32[0])) / v52;
                  if ((float)((float)((float)-v64.f32[1] - (float)(v59 * v65)) / v58) > 0.0)
                  {
                    v66 = v60 == 3.4028e38;
                    if (v65 > v60)
                      v66 = 1;
                    if (v66)
                    {
                      v61 = v63;
                      v60 = v65;
                    }
                  }
                  v62 = v63 + 1;
                }
                while ((_DWORD)v63 != v54);
              }
              else
              {
                v60 = 3.4028e38;
                v61 = v24;
                v67 = v24;
                do
                {
                  v68 = v67 % v45;
                  v69 = vsub_f32(v176, *(float32x2_t *)(v43 + 40 * v68 + 4));
                  v70 = (float)(vmuls_lane_f32(v172.f32[0], v69, 1) - (float)(v172.f32[1] * v69.f32[0])) / v52;
                  if ((float)((float)((float)-v69.f32[0] - (float)(v59 * v70)) / v58) > 0.0)
                  {
                    v71 = v60 == 3.4028e38;
                    if (v70 > v60)
                      v71 = 1;
                    if (v71)
                    {
                      v61 = v68;
                      v60 = v70;
                    }
                  }
                  v67 = v68 + 1;
                }
                while ((_DWORD)v68 != v54);
              }
              v72 = v60 >= -0.001 || v60 == 3.4028e38;
              v73 = v72 ? v61 : v24;
              *(float *)v161 = -v171.f32[1];
              HIDWORD(v161[0]) = v171.i32[0];
              v74 = (float)-(float)(v171.f32[1] * v171.f32[1]) - (float)(*((float *)v161 + 1) * *((float *)v161 + 1));
              v75 = fabsf(v171.f32[0]) <= fabsf(v171.f32[1]);
              v76 = v75;
              v77 = v75;
              v78 = v77 ? v171.f32[1] : v171.f32[0];
              v79 = *((float *)v161 + v76);
              if (v77)
              {
                v80 = 3.4028e38;
                v81 = v49;
                v82 = v24;
                do
                {
                  v83 = v82 % v45;
                  v84 = vsub_f32(*(float32x2_t *)&v174, *(float32x2_t *)(v43 + 40 * v83 + 4));
                  v84.f32[0] = (float)(vmuls_lane_f32(v171.f32[0], v84, 1) - (float)(v171.f32[1] * v84.f32[0])) / v74;
                  if ((float)((float)((float)-v84.f32[1] - (float)(v79 * v84.f32[0])) / v78) > 0.0)
                  {
                    v85 = v80 == 3.4028e38;
                    if (v84.f32[0] > v80)
                      v85 = 1;
                    if (v85)
                    {
                      v81 = v83;
                      v80 = v84.f32[0];
                    }
                  }
                  v82 = v83 + 1;
                }
                while ((_DWORD)v83 != v54);
              }
              else
              {
                v80 = 3.4028e38;
                v81 = v49;
                v86 = v24;
                do
                {
                  v87 = v86 % v45;
                  v84 = *(float32x2_t *)(v43 + 40 * v87 + 4);
                  v88 = vsub_f32(*(float32x2_t *)&v174, v84);
                  v84.f32[0] = (float)(vmuls_lane_f32(v171.f32[0], v88, 1) - (float)(v171.f32[1] * v88.f32[0])) / v74;
                  if ((float)((float)((float)-v88.f32[0] - (float)(v79 * v84.f32[0])) / v78) > 0.0)
                  {
                    v89 = v80 == 3.4028e38;
                    if (v84.f32[0] > v80)
                      v89 = 1;
                    if (v89)
                    {
                      v81 = v87;
                      v80 = v84.f32[0];
                    }
                  }
                  v86 = v87 + 1;
                }
                while ((_DWORD)v87 != v54);
              }
              v90 = v80 >= -0.001 || v80 == 3.4028e38;
              v91 = v90 ? v81 : v49;
              if (v73 != (_DWORD)v91)
              {
                if ((_DWORD)v24 != v73)
                {
                  v92 = *(float32x2_t *)(v43 + 40 * v24 + 4);
                  v93 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v43 + 40 * v73 + 4), v92));
                  LODWORD(v94) = v24;
                  while (1)
                  {
                    v94 = (v94 + 1) % v45;
                    if (v73 == (_DWORD)v94)
                      break;
                    v95 = vmul_f32(v93, vsub_f32(*(float32x2_t *)(v43 + 40 * v94 + 4), v92));
                    if (vsub_f32(v95, (float32x2_t)vdup_lane_s32((int32x2_t)v95, 1)).f32[0] > 0.0)
                    {
                      LODWORD(v24) = v73;
                      break;
                    }
                  }
                }
                v96 = v45 - 1;
                if (v49 != (_DWORD)v91)
                {
                  v97 = (v96 + v49) % v45;
                  if ((_DWORD)v91 != (_DWORD)v97)
                  {
                    v98 = *(float32x2_t *)(v43 + 40 * v49 + 4);
                    v99 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v43 + 40 * v91 + 4), v98));
                    while (1)
                    {
                      v100 = vmul_f32(v99, vsub_f32(*(float32x2_t *)(v43 + 40 * v97 + 4), v98));
                      if (vsub_f32(v100, (float32x2_t)vdup_lane_s32((int32x2_t)v100, 1)).f32[0] < 0.0)
                        break;
                      v97 = (v96 + v97) % v45;
                      if ((_DWORD)v91 == (_DWORD)v97)
                        goto LABEL_143;
                    }
                    v53 = v91;
                    v49 = v91;
                  }
                }
LABEL_143:
                v101 = ((v96 + v53) % v45) % v45;
                v102 = 1;
                v103 = v24;
                do
                {
                  v104 = v103 % v45;
                  v105 = v43 + 40 * v104;
                  if (*(float *)(v105 + 32) >= 10.0 || *(_BYTE *)v105 == 0)
                    v102 = 0;
                  v103 = v104 + 1;
                }
                while ((_DWORD)v104 != v101);
                if (v102)
                {
                  sub_223ACE350(v5, v40, v73, v91, &v172, &v171, &v170, (uint64_t)v161, v174, *(double *)&v84, (float *)&v168);
                  HIDWORD(v161[0]) = v24;
                  LODWORD(v161[1]) = v49;
                  if (v167 == 3.4028e38 || v167 >= 0.0)
                  {
                    v107 = v5;
                    v108 = v159;
                    if ((unint64_t)v159 >= v160)
                    {
                      v117 = sub_223AEA078(&v158, (uint64_t)v161);
                    }
                    else
                    {
                      v109 = *(_OWORD *)v161;
                      v110 = v162;
                      *((_DWORD *)v159 + 8) = v163;
                      *((_QWORD *)v108 + 5) = 0;
                      *(_OWORD *)v108 = v109;
                      *((_OWORD *)v108 + 1) = v110;
                      *((_QWORD *)v108 + 6) = 0;
                      *((_QWORD *)v108 + 7) = 0;
                      v111 = __p;
                      v112 = v165 - (_BYTE *)__p;
                      if (v165 != __p)
                      {
                        if (v112 < 0)
                          sub_22316E078();
                        v113 = (char *)operator new(v165 - (_BYTE *)__p);
                        *((_QWORD *)v108 + 5) = v113;
                        *((_QWORD *)v108 + 6) = v113;
                        *((_QWORD *)v108 + 7) = &v113[8 * (v112 >> 3)];
                        v114 = v112 & 0xFFFFFFFFFFFFFFF8;
                        v115 = v113;
                        memcpy(v113, v111, v114);
                        *((_QWORD *)v108 + 6) = &v115[v114];
                      }
                      v116 = v166;
                      *((float *)v108 + 18) = v167;
                      *((_QWORD *)v108 + 8) = v116;
                      v117 = v108 + 80;
                    }
                    v5 = v107;
                    v159 = v117;
                  }
                  if (__p)
                  {
                    v165 = __p;
                    operator delete(__p);
                  }
                }
              }
            }
            goto LABEL_18;
          }
        }
        goto LABEL_18;
      }
    }
LABEL_19:
    if (v25 <= 1)
      v22 = 1;
    else
      v22 = v25;
    v20 = (v22 + v20);
  }
  while (v21 > v20);
  v118 = a3;
  if (a4 >= 0.0)
  {
LABEL_165:
    sub_223AD3F88(v16, (uint64_t)a1, (uint64_t *)&v158);
    goto LABEL_169;
  }
LABEL_168:
  sub_223AD3540((uint64_t)a1, (uint64_t *)&v158);
LABEL_169:
  v120 = (char *)v158;
  if (v158 == v159)
  {
    v119 = 0;
    if (!v158)
      return v119 & 1;
    goto LABEL_217;
  }
  v154 = 0;
  v121 = 0;
  v161[0] = 0;
  v161[1] = 0;
  *(_QWORD *)&v162 = 0;
  v156 = 0xCCCCCCCCCCCCCCCDLL * ((v159 - (_BYTE *)v158) >> 4);
  do
  {
    v122 = v158;
    v123 = -1 - 0x3333333333333333 * ((v159 - (_BYTE *)v158) >> 4);
    v124 = v161[1];
    if (v121 != v123)
    {
      v125 = a1;
      v126 = v5;
      if (v161[1] >= (void *)v162)
      {
        v128 = v161[0];
        v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v161[1] - (char *)v161[0]) >> 3);
        v130 = v129 + 1;
        if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(v162 - (unint64_t)v161[0]) >> 3) > v130)
          v130 = 0x5555555555555556 * ((uint64_t)(v162 - (unint64_t)v161[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v162 - (unint64_t)v161[0]) >> 3) >= 0x555555555555555)
          v131 = 0xAAAAAAAAAAAAAAALL;
        else
          v131 = v130;
        if (v131)
        {
          if (v131 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v132 = (char *)operator new(24 * v131);
        }
        else
        {
          v132 = 0;
        }
        v133 = &v132[24 * v129];
        v134 = &v132[24 * v131];
        *(_QWORD *)v133 = 0;
        *((_QWORD *)v133 + 1) = 0;
        *((_QWORD *)v133 + 2) = 0;
        if (v124 == v128)
        {
          v161[0] = v133;
          *(_QWORD *)&v162 = &v132[24 * v131];
          v118 = a3;
        }
        else
        {
          v135 = v133;
          v118 = a3;
          do
          {
            v136 = v135;
            *((_QWORD *)v135 - 2) = 0;
            *((_QWORD *)v135 - 1) = 0;
            v137 = *(_OWORD *)(v124 - 3);
            v124 -= 3;
            *(_OWORD *)(v135 - 24) = v137;
            v135 -= 24;
            *((_QWORD *)v136 - 1) = v124[2];
            *v124 = 0;
            v124[1] = 0;
            v124[2] = 0;
          }
          while (v124 != v128);
          v124 = v161[0];
          v138 = v161[1];
          v161[0] = v135;
          *(_QWORD *)&v162 = v134;
          if (v161[1] != v124)
          {
            v139 = v161[1];
            do
            {
              v141 = (void *)*(v139 - 3);
              v139 -= 3;
              v140 = v141;
              if (v141)
              {
                *(v138 - 2) = v140;
                operator delete(v140);
              }
              v138 = v139;
            }
            while (v139 != v124);
          }
        }
        v127 = v133 + 24;
        if (v124)
          operator delete(v124);
      }
      else
      {
        *(_QWORD *)v161[1] = 0;
        v124[1] = 0;
        v127 = v124 + 3;
        v124[2] = 0;
      }
      v161[1] = v127;
      v122 = v158;
      v124 = v127;
      v5 = v126;
      a1 = v125;
    }
    if ((_DWORD)v121)
      v142 = (char **)((char *)v161[0] + 24 * (v121 - 1));
    else
      v142 = (char **)v5;
    if (v121 == v123)
      v143 = v118;
    else
      v143 = (char **)(v124 - 3);
    if ((sub_223AD01C8(a1, (uint64_t *)v142, (uint64_t)v122 + 80 * v121, v143, (uint64_t *)&v158, v121) & 1) != 0)
    {
      v154 = 1;
    }
    else if (v143 != v142)
    {
      sub_223ACD508(v143, *v142, v142[1], 0xCCCCCCCCCCCCCCCDLL * ((v142[1] - *v142) >> 3));
    }
    ++v121;
  }
  while (v121 != v156);
  v144 = (char *)v161[0];
  v119 = v154;
  if (v161[0])
  {
    v145 = v161[1];
    if (v161[1] != v161[0])
    {
      v146 = (char *)v161[1];
      do
      {
        v148 = (void *)*((_QWORD *)v146 - 3);
        v146 -= 24;
        v147 = v148;
        if (v148)
        {
          *(v145 - 2) = v147;
          operator delete(v147);
        }
        v145 = v146;
      }
      while (v146 != v144);
    }
    operator delete(v144);
  }
  v120 = (char *)v158;
  if (v158)
  {
LABEL_217:
    v149 = v159;
    v150 = v120;
    if (v159 != v120)
    {
      do
      {
        v151 = (void *)*((_QWORD *)v149 - 5);
        if (v151)
        {
          *((_QWORD *)v149 - 4) = v151;
          operator delete(v151);
        }
        v149 -= 80;
      }
      while (v149 != v120);
      v150 = v158;
    }
    v159 = v120;
    operator delete(v150);
  }
  return v119 & 1;
}

void sub_223AE9F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void **v27;
  void *v29;

  v29 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 48) = v29;
    operator delete(v29);
  }
  a18 = v26;
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
    sub_223AEA008(&a17);
    _Unwind_Resume(a1);
  }
  sub_223AEA008(&a17);
  _Unwind_Resume(a1);
}

void **sub_223AEA008(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_223AEA078(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  _BYTE *__src;
  unint64_t v25;
  __int128 v27;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*a1] >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_22316E078();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 4) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v5;
  if (v7)
  {
    if (v7 > 0x333333333333333)
      sub_223174E94();
    v8 = (char *)operator new(80 * v7);
  }
  else
  {
    v8 = 0;
  }
  v25 = v4;
  v9 = &v8[80 * v4];
  *((_QWORD *)&v27 + 1) = &v8[80 * v7];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  v11 = v9 + 48;
  *((_QWORD *)v9 + 7) = 0;
  v12 = *(_BYTE **)(a2 + 48);
  __src = *(_BYTE **)(a2 + 40);
  v13 = v12 - __src;
  if (v12 != __src)
  {
    if (v13 < 0)
      sub_22316E078();
    v14 = (char *)operator new(v12 - __src);
    *((_QWORD *)v9 + 5) = v14;
    *v11 = v14;
    *((_QWORD *)v9 + 7) = &v14[8 * (v13 >> 3)];
    v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v14, __src, v15);
    *v11 = &v14[v15];
  }
  v16 = &v8[80 * v25];
  *((_QWORD *)v16 + 8) = *(_QWORD *)(a2 + 64);
  *((_DWORD *)v16 + 18) = *(_DWORD *)(a2 + 72);
  v17 = v9 + 80;
  *(_QWORD *)&v27 = v9 + 80;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v17;
    a1[2] = *((_QWORD *)&v27 + 1);
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v2 - 5);
      v19 = *((_OWORD *)v2 - 4);
      *((_DWORD *)v9 - 12) = *((_DWORD *)v2 - 12);
      *((_OWORD *)v9 - 5) = v18;
      *((_OWORD *)v9 - 4) = v19;
      *((_QWORD *)v9 - 4) = 0;
      *((_QWORD *)v9 - 3) = 0;
      *(_OWORD *)(v9 - 40) = *(_OWORD *)(v2 - 40);
      *((_QWORD *)v9 - 3) = *((_QWORD *)v2 - 3);
      *((_QWORD *)v2 - 5) = 0;
      *((_QWORD *)v2 - 4) = 0;
      *((_QWORD *)v2 - 3) = 0;
      v20 = *((_QWORD *)v2 - 2);
      *((_DWORD *)v9 - 2) = *((_DWORD *)v2 - 2);
      *((_QWORD *)v9 - 2) = v20;
      v9 -= 80;
      v2 -= 80;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v27;
    v17 = (char *)v27;
    while (v21 != v2)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v21 -= 80;
    }
  }
  if (v2)
    operator delete(v2);
  return v17;
}

void sub_223AEA2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void **v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = *v7;
  if (*v7)
  {
    *v6 = v9;
    operator delete(v9);
  }
  sub_223AEA2E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEA2E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 80;
        *(_QWORD *)(a1 + 16) = v2 - 80;
        v5 = *(void **)(v2 - 40);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 80;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float sub_223AEA350(float *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  float v53;
  uint64_t *v54;
  float v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  unint64_t v64;
  float v65;
  uint64_t *v66;
  uint64_t *v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  _DWORD *v84;
  float v85;
  int v86;
  uint64_t v87;
  float v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  float v112;
  int v113;
  float *v114;
  uint64_t v115;

BOOL sub_223AEADAC(float *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  int v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((float *)a2 - 1) > a1[1])
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      v7 = a1[3];
      v8 = *((float *)a2 - 1);
      if (v7 <= a1[1])
      {
        if (v8 > v7)
        {
          v19 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *(a2 - 1);
          *(a2 - 1) = v19;
          if (a1[3] > a1[1])
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v9 = *(_QWORD *)a1;
        if (v8 <= v7)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v9;
          if (*((float *)a2 - 1) > *((float *)&v9 + 1))
          {
            *((_QWORD *)a1 + 1) = *(a2 - 1);
            *(a2 - 1) = v9;
          }
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 1);
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 4:
      sub_2239AEE14(a1, a1 + 2, a1 + 4, (float *)a2 - 2);
      return 1;
    case 5:
      sub_2239AEE14(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*((float *)a2 - 1) <= a1[7])
        return 1;
      v14 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *(a2 - 1);
      *(a2 - 1) = v14;
      if (a1[7] <= a1[5])
        return 1;
      v16 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v16;
      if (a1[3] >= *((float *)&v15 + 1))
        return 1;
      v17 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v15;
      *((_QWORD *)a1 + 2) = v17;
      if (a1[1] >= *((float *)&v15 + 1))
        return 1;
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v15;
      *((_QWORD *)a1 + 1) = v18;
      return 1;
    default:
      v10 = a1[3];
      v11 = a1[1];
      v12 = a1[5];
      if (v10 <= v11)
      {
        if (v12 > v10)
        {
          v21 = *((_QWORD *)a1 + 1);
          v20 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 1) = v20;
          *((_QWORD *)a1 + 2) = v21;
          if (v11 < *((float *)&v20 + 1))
          {
            v22 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v20;
            *((_QWORD *)a1 + 1) = v22;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)a1;
        if (v12 <= v10)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v13;
          if (v12 <= *((float *)&v13 + 1))
            goto LABEL_29;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a1 + 2);
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
        }
        *((_QWORD *)a1 + 2) = v13;
      }
LABEL_29:
      v23 = a1 + 6;
      if (a1 + 6 == (float *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      v26 = a1 + 4;
      break;
  }
  while (1)
  {
    v27 = v23[1];
    if (v27 > v26[1])
      break;
LABEL_38:
    v26 = v23;
    v24 += 8;
    v23 += 2;
    if (v23 == (float *)a2)
      return 1;
  }
  v28 = *v23;
  v29 = v24;
  do
  {
    *(_QWORD *)((char *)a1 + v29 + 24) = *(_QWORD *)((char *)a1 + v29 + 16);
    if (v29 == -16)
    {
      *a1 = v28;
      a1[1] = v27;
      if (++v25 != 8)
        goto LABEL_38;
      return v23 + 2 == (float *)a2;
    }
    v30 = *(float *)((char *)a1 + v29 + 12);
    v29 -= 8;
  }
  while (v30 < v27);
  v31 = (uint64_t)a1 + v29;
  *(float *)(v31 + 24) = v28;
  *(float *)(v31 + 28) = v27;
  if (++v25 != 8)
    goto LABEL_38;
  return v23 + 2 == (float *)a2;
}

void sub_223AEB0BC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)v38 = v10;
    *(_QWORD *)&v38[8] = v10;
    *(_QWORD *)&v38[16] = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v39 = 0uLL;
    v40 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = *(_QWORD *)v38;
    v17 = _os_log_pack_fill();
    v18 = *a5;
    *(_DWORD *)v17 = 134217984;
    *(_QWORD *)(v17 + 4) = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)&v38[8];
    *(_OWORD *)&v38[8] = 0uLL;
    *(_OWORD *)(v19 + 24) = v39;
    v39 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&v38[16];
    if (*(_QWORD *)&v38[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v38[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    *(_DWORD *)v38 = 134217984;
    *(_QWORD *)&v38[4] = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_223AEB4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223AEB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AEB4D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

unint64_t sub_223AEB4FC(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  int *v71;
  int *v72;
  unsigned int v73;
  int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  int *v88;
  int *v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int *v113;
  BOOL v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  BOOL v128;
  uint64_t v129;
  _DWORD *v130;
  unsigned int v131;
  unsigned int v132;
  _DWORD *v133;
  int v134;
  int v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int *v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;

  v7 = (int *)result;
LABEL_2:
  v8 = (uint64_t *)(a2 - 3);
  v9 = (uint64_t *)(a2 - 6);
  v10 = (uint64_t *)(a2 - 9);
  v11 = (unint64_t)v7;
  while (2)
  {
    v7 = (int *)v11;
    v12 = (uint64_t)a2 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 2);
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4)))
        {
          v218 = *(_DWORD *)(v11 + 8);
          v193 = *(_QWORD *)v11;
          v98 = *(_QWORD *)(a2 - 3);
          *(_DWORD *)(v11 + 8) = *(a2 - 1);
          *(_QWORD *)v11 = v98;
          *(a2 - 1) = v218;
          *(_QWORD *)(a2 - 3) = v193;
        }
        return result;
      case 3:
        v99 = (uint64_t *)(v11 + 12);
        v100 = *(_DWORD *)(v11 + 20) + *(_DWORD *)(v11 + 16);
        v101 = *(a2 - 1) + *(a2 - 2);
        if (v100 <= *(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4))
        {
          if (v101 > v100)
          {
            v160 = *v99;
            v161 = *(_DWORD *)(v11 + 20);
            v162 = *(a2 - 1);
            *v99 = *v8;
            *(_DWORD *)(v11 + 20) = v162;
            *(a2 - 1) = v161;
            *v8 = v160;
            if (*(_DWORD *)(v11 + 20) + *(_DWORD *)(v11 + 16) > (*(_DWORD *)(v11 + 8)
                                                                              + *(_DWORD *)(v11 + 4)))
            {
              v222 = *(_DWORD *)(v11 + 8);
              v197 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *v99;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
              *v99 = v197;
              *(_DWORD *)(v11 + 20) = v222;
            }
          }
        }
        else if (v101 <= v100)
        {
          v223 = *(_DWORD *)(v11 + 8);
          v198 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *v99;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
          *v99 = v198;
          *(_DWORD *)(v11 + 20) = v223;
          if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(v11 + 20) + *(_DWORD *)(v11 + 16)))
          {
            v171 = *v99;
            v172 = *(_DWORD *)(v11 + 20);
            v173 = *(a2 - 1);
            *v99 = *v8;
            *(_DWORD *)(v11 + 20) = v173;
            *(a2 - 1) = v172;
            *v8 = v171;
          }
        }
        else
        {
          v219 = *(_DWORD *)(v11 + 8);
          v194 = *(_QWORD *)v11;
          v102 = *v8;
          *(_DWORD *)(v11 + 8) = *(a2 - 1);
          *(_QWORD *)v11 = v102;
          *(a2 - 1) = v219;
          *v8 = v194;
        }
        return result;
      case 4:
        return (unint64_t)sub_223AECA94((uint64_t *)v11, (uint64_t *)(v11 + 12), (uint64_t *)(v11 + 24), (uint64_t *)(a2 - 3));
      case 5:
        v103 = (uint64_t *)(v11 + 12);
        v104 = (uint64_t *)(v11 + 24);
        v105 = (uint64_t *)(v11 + 36);
        result = (unint64_t)sub_223AECA94((uint64_t *)v11, (uint64_t *)(v11 + 12), (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 36));
        if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(v11 + 44) + *(_DWORD *)(v11 + 40)))
        {
          v106 = *v105;
          v107 = *(_DWORD *)(v11 + 44);
          v108 = *(a2 - 1);
          *v105 = *(_QWORD *)(a2 - 3);
          *(_DWORD *)(v11 + 44) = v108;
          *(a2 - 1) = v107;
          *(_QWORD *)(a2 - 3) = v106;
          if (*(_DWORD *)(v11 + 44) + *(_DWORD *)(v11 + 40) > (*(_DWORD *)(v11 + 32)
                                                                            + *(_DWORD *)(v11 + 28)))
          {
            v109 = *(_DWORD *)(v11 + 32);
            v110 = *v104;
            *v104 = *v105;
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 44);
            *v105 = v110;
            *(_DWORD *)(v11 + 44) = v109;
            if (*(_DWORD *)(v11 + 32) + *(_DWORD *)(v11 + 28) > (*(_DWORD *)(v11 + 20)
                                                                              + *(_DWORD *)(v11 + 16)))
            {
              v111 = *(_DWORD *)(v11 + 20);
              v112 = *v103;
              *v103 = *v104;
              *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
              *v104 = v112;
              *(_DWORD *)(v11 + 32) = v111;
              if (*(_DWORD *)(v11 + 20) + *(_DWORD *)(v11 + 16) > (*(_DWORD *)(v11 + 8)
                                                                                + *(_DWORD *)(v11 + 4)))
              {
                v220 = *(_DWORD *)(v11 + 8);
                v195 = *(_QWORD *)v11;
                *(_QWORD *)v11 = *v103;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
                *v103 = v195;
                *(_DWORD *)(v11 + 20) = v220;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 287)
        {
          if (!a3)
          {
            if ((int *)v11 != a2)
            {
              v126 = (unint64_t)(v13 - 2) >> 1;
              v127 = v126;
              do
              {
                if (v126 >= v127)
                {
                  v129 = (2 * v127) | 1;
                  v130 = (_DWORD *)(v11 + 12 * v129);
                  if (2 * v127 + 2 < v13)
                  {
                    v131 = v130[2] + v130[1];
                    v132 = v130[5] + v130[4];
                    v130 += 3 * (v131 > v132);
                    if (v131 > v132)
                      v129 = 2 * v127 + 2;
                  }
                  v133 = (_DWORD *)(v11 + 12 * v127);
                  v134 = v133[1];
                  v135 = v133[2];
                  result = (v135 + v134);
                  if (v130[2] + v130[1] <= result)
                  {
                    v136 = *v133;
                    do
                    {
                      v137 = v133;
                      v133 = v130;
                      v138 = *(_QWORD *)v130;
                      v137[2] = v133[2];
                      *(_QWORD *)v137 = v138;
                      if (v126 < v129)
                        break;
                      v139 = (2 * v129) | 1;
                      v130 = (_DWORD *)(v11 + 12 * v139);
                      v140 = 2 * v129 + 2;
                      if (v140 < v13)
                      {
                        v141 = v130[2] + v130[1];
                        v142 = v130[5] + v130[4];
                        v130 += 3 * (v141 > v142);
                        if (v141 > v142)
                          v139 = v140;
                      }
                      v129 = v139;
                    }
                    while (v130[2] + v130[1] <= result);
                    *v133 = v136;
                    v133[1] = v134;
                    v133[2] = v135;
                  }
                }
                v128 = v127-- <= 0;
              }
              while (!v128);
              v143 = v12 / 0xCuLL;
              do
              {
                v144 = 0;
                v221 = *(_DWORD *)(v11 + 8);
                v196 = *(_QWORD *)v11;
                v145 = v11;
                do
                {
                  v147 = v145 + 12 * v144 + 12;
                  v148 = (2 * v144) | 1;
                  v149 = 2 * v144 + 2;
                  if (v149 < v143)
                  {
                    result = *(unsigned int *)(v147 + 16);
                    v150 = *(_DWORD *)(v147 + 8) + *(_DWORD *)(v147 + 4);
                    v151 = *(_DWORD *)(v147 + 20) + result;
                    v147 += 12 * (v150 > v151);
                    if (v150 > v151)
                      v148 = v149;
                  }
                  v146 = *(_QWORD *)v147;
                  *(_DWORD *)(v145 + 8) = *(_DWORD *)(v147 + 8);
                  *(_QWORD *)v145 = v146;
                  v145 = v147;
                  v144 = v148;
                }
                while (v148 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                a2 -= 3;
                if ((int *)v147 == a2)
                {
                  *(_DWORD *)(v147 + 8) = v221;
                  *(_QWORD *)v147 = v196;
                }
                else
                {
                  v152 = *(_QWORD *)a2;
                  *(_DWORD *)(v147 + 8) = a2[2];
                  *(_QWORD *)v147 = v152;
                  a2[2] = v221;
                  *(_QWORD *)a2 = v196;
                  v153 = v147 - v11 + 12;
                  if (v153 >= 13)
                  {
                    v154 = (v153 / 0xCuLL - 2) >> 1;
                    v155 = v11 + 12 * v154;
                    v156 = *(_DWORD *)(v147 + 4);
                    v157 = *(_DWORD *)(v147 + 8);
                    if (*(_DWORD *)(v155 + 8) + *(_DWORD *)(v155 + 4) > (v157 + v156))
                    {
                      v158 = *(_DWORD *)v147;
                      do
                      {
                        result = v147;
                        v147 = v155;
                        v159 = *(_QWORD *)v155;
                        *(_DWORD *)(result + 8) = *(_DWORD *)(v147 + 8);
                        *(_QWORD *)result = v159;
                        if (!v154)
                          break;
                        v154 = (v154 - 1) >> 1;
                        v155 = v11 + 12 * v154;
                        result = (*(_DWORD *)(v155 + 8) + *(_DWORD *)(v155 + 4));
                      }
                      while (result > v157 + v156);
                      *(_DWORD *)v147 = v158;
                      *(_DWORD *)(v147 + 4) = v156;
                      *(_DWORD *)(v147 + 8) = v157;
                    }
                  }
                }
                v128 = v143-- <= 2;
              }
              while (!v128);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = v11 + 12 * ((unint64_t)v13 >> 1);
          v16 = *(a2 - 1) + *(a2 - 2);
          if ((unint64_t)v12 < 0x601)
          {
            v19 = *(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4);
            if (v19 <= *(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4))
            {
              if (v16 > v19)
              {
                v203 = *(_DWORD *)(v11 + 8);
                v178 = *(_QWORD *)v11;
                v23 = *v8;
                *(_DWORD *)(v11 + 8) = *(a2 - 1);
                *(_QWORD *)v11 = v23;
                *(a2 - 1) = v203;
                *v8 = v178;
                if (*(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4) > (*(_DWORD *)(v15 + 8)
                                                                                + *(_DWORD *)(v15 + 4)))
                {
                  v204 = *(_DWORD *)(v15 + 8);
                  v179 = *(_QWORD *)v15;
                  v24 = *(_QWORD *)v11;
                  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                  *(_QWORD *)v15 = v24;
                  *(_DWORD *)(v11 + 8) = v204;
                  *(_QWORD *)v11 = v179;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v16 <= v19)
              {
                v207 = *(_DWORD *)(v15 + 8);
                v182 = *(_QWORD *)v15;
                v39 = *(_QWORD *)v11;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                *(_QWORD *)v15 = v39;
                *(_DWORD *)(v11 + 8) = v207;
                *(_QWORD *)v11 = v182;
                if (*(a2 - 1) + *(a2 - 2) <= (*(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4)))
                  goto LABEL_32;
                v200 = *(_DWORD *)(v11 + 8);
                v175 = *(_QWORD *)v11;
                v40 = *v8;
                *(_DWORD *)(v11 + 8) = *(a2 - 1);
                *(_QWORD *)v11 = v40;
              }
              else
              {
                v200 = *(_DWORD *)(v15 + 8);
                v175 = *(_QWORD *)v15;
                v20 = *v8;
                *(_DWORD *)(v15 + 8) = *(a2 - 1);
                *(_QWORD *)v15 = v20;
              }
              *(a2 - 1) = v200;
              *v8 = v175;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v41 = *(_DWORD *)(v11 + 4);
            v42 = *(_DWORD *)(v11 + 8);
            v43 = v42 + v41;
            if (*(_DWORD *)(v11 - 4) + *(_DWORD *)(v11 - 8) > (v42 + v41))
              goto LABEL_55;
            if (v43 <= *(a2 - 1) + *(a2 - 2))
            {
              v86 = v11 + 12;
              do
              {
                v11 = v86;
                if (v86 >= (unint64_t)a2)
                  break;
                v87 = *(_DWORD *)(v86 + 8) + *(_DWORD *)(v86 + 4);
                v86 += 12;
              }
              while (v43 <= v87);
            }
            else
            {
              v84 = v11;
              do
              {
                v11 = v84 + 12;
                v85 = *(_DWORD *)(v84 + 20) + *(_DWORD *)(v84 + 16);
                v84 += 12;
              }
              while (v43 <= v85);
            }
            v88 = a2;
            if (v11 < (unint64_t)a2)
            {
              v89 = a2;
              do
              {
                v88 = v89 - 3;
                v90 = *(v89 - 1) + *(v89 - 2);
                v89 -= 3;
              }
              while (v43 > v90);
            }
            v91 = *v7;
            while (v11 < (unint64_t)v88)
            {
              v217 = *(_DWORD *)(v11 + 8);
              v192 = *(_QWORD *)v11;
              v92 = *(_QWORD *)v88;
              *(_DWORD *)(v11 + 8) = v88[2];
              *(_QWORD *)v11 = v92;
              v88[2] = v217;
              *(_QWORD *)v88 = v192;
              do
              {
                v93 = *(_DWORD *)(v11 + 16);
                v94 = *(_DWORD *)(v11 + 20);
                v11 += 12;
              }
              while (v43 <= v94 + v93);
              do
              {
                v95 = *(v88 - 2);
                v96 = *(v88 - 1);
                v88 -= 3;
              }
              while (v43 > v96 + v95);
            }
            if ((int *)(v11 - 12) != v7)
            {
              v97 = *(_QWORD *)(v11 - 12);
              v7[2] = *(_DWORD *)(v11 - 4);
              *(_QWORD *)v7 = v97;
            }
            a4 = 0;
            *(_DWORD *)(v11 - 12) = v91;
            *(_DWORD *)(v11 - 8) = v41;
            *(_DWORD *)(v11 - 4) = v42;
            continue;
          }
          v17 = *(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4);
          if (v17 <= *(_DWORD *)(v11 + 8) + *(_DWORD *)(v11 + 4))
          {
            if (v16 > v17)
            {
              v201 = *(_DWORD *)(v15 + 8);
              v176 = *(_QWORD *)v15;
              v21 = *v8;
              *(_DWORD *)(v15 + 8) = *(a2 - 1);
              *(_QWORD *)v15 = v21;
              *(a2 - 1) = v201;
              *v8 = v176;
              if (*(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4) > (*(_DWORD *)(v11 + 8)
                                                                              + *(_DWORD *)(v11 + 4)))
              {
                v202 = *(_DWORD *)(v11 + 8);
                v177 = *(_QWORD *)v11;
                v22 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v22;
                *(_DWORD *)(v15 + 8) = v202;
                *(_QWORD *)v15 = v177;
              }
            }
          }
          else
          {
            if (v16 <= v17)
            {
              v205 = *(_DWORD *)(v11 + 8);
              v180 = *(_QWORD *)v11;
              v25 = *(_QWORD *)v15;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
              *(_QWORD *)v11 = v25;
              *(_DWORD *)(v15 + 8) = v205;
              *(_QWORD *)v15 = v180;
              if (*(a2 - 1) + *(a2 - 2) <= (*(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4)))
                goto LABEL_23;
              v199 = *(_DWORD *)(v15 + 8);
              v174 = *(_QWORD *)v15;
              v26 = *v8;
              *(_DWORD *)(v15 + 8) = *(a2 - 1);
              *(_QWORD *)v15 = v26;
            }
            else
            {
              v199 = *(_DWORD *)(v11 + 8);
              v174 = *(_QWORD *)v11;
              v18 = *v8;
              *(_DWORD *)(v11 + 8) = *(a2 - 1);
              *(_QWORD *)v11 = v18;
            }
            *(a2 - 1) = v199;
            *v8 = v174;
          }
LABEL_23:
          v27 = (uint64_t *)(v11 + 12);
          v28 = v11 + 12 * v14;
          v29 = v28 - 12;
          v30 = *(_DWORD *)(v28 - 4) + *(_DWORD *)(v28 - 8);
          v31 = *(a2 - 4) + *(a2 - 5);
          if (v30 <= *(_DWORD *)(v11 + 20) + *(_DWORD *)(v11 + 16))
          {
            if (v31 > v30)
            {
              v206 = *(_DWORD *)(v29 + 8);
              v181 = *(_QWORD *)v29;
              v35 = *v9;
              *(_DWORD *)(v29 + 8) = *(a2 - 4);
              *(_QWORD *)v29 = v35;
              *(a2 - 4) = v206;
              *v9 = v181;
              if (*(_DWORD *)(v29 + 8) + *(_DWORD *)(v29 + 4) > (*(_DWORD *)(v11 + 20)
                                                                              + *(_DWORD *)(v11 + 16)))
              {
                v36 = *v27;
                v37 = *(_DWORD *)(v11 + 20);
                v38 = *(_DWORD *)(v29 + 8);
                *v27 = *(_QWORD *)v29;
                *(_DWORD *)(v11 + 20) = v38;
                *(_DWORD *)(v29 + 8) = v37;
                *(_QWORD *)v29 = v36;
              }
            }
          }
          else if (v31 <= v30)
          {
            v44 = *v27;
            v45 = *(_DWORD *)(v11 + 20);
            v46 = *(_DWORD *)(v29 + 8);
            *v27 = *(_QWORD *)v29;
            *(_DWORD *)(v11 + 20) = v46;
            *(_DWORD *)(v29 + 8) = v45;
            *(_QWORD *)v29 = v44;
            if (*(a2 - 4) + *(a2 - 5) > (*(_DWORD *)(v29 + 8) + *(_DWORD *)(v29 + 4)))
            {
              v208 = *(_DWORD *)(v29 + 8);
              v183 = *(_QWORD *)v29;
              v47 = *v9;
              *(_DWORD *)(v29 + 8) = *(a2 - 4);
              *(_QWORD *)v29 = v47;
              *(a2 - 4) = v208;
              *v9 = v183;
            }
          }
          else
          {
            v32 = *v27;
            v33 = *(_DWORD *)(v11 + 20);
            v34 = *(a2 - 4);
            *v27 = *v9;
            *(_DWORD *)(v11 + 20) = v34;
            *(a2 - 4) = v33;
            *v9 = v32;
          }
          v48 = (uint64_t *)(v11 + 24);
          v49 = v11 + 12 * v14;
          v50 = v49 + 12;
          v51 = *(_DWORD *)(v49 + 20) + *(_DWORD *)(v49 + 16);
          v52 = *(a2 - 7) + *(a2 - 8);
          if (v51 <= *(_DWORD *)(v11 + 32) + *(_DWORD *)(v11 + 28))
          {
            if (v52 > v51)
            {
              v209 = *(_DWORD *)(v50 + 8);
              v184 = *(_QWORD *)v50;
              v56 = *v10;
              *(_DWORD *)(v50 + 8) = *(a2 - 7);
              *(_QWORD *)v50 = v56;
              *(a2 - 7) = v209;
              *v10 = v184;
              if (*(_DWORD *)(v50 + 8) + *(_DWORD *)(v50 + 4) > (*(_DWORD *)(v11 + 32)
                                                                              + *(_DWORD *)(v11 + 28)))
              {
                v57 = *v48;
                v58 = *(_DWORD *)(v11 + 32);
                v59 = *(_DWORD *)(v50 + 8);
                *v48 = *(_QWORD *)v50;
                *(_DWORD *)(v11 + 32) = v59;
                *(_DWORD *)(v50 + 8) = v58;
                *(_QWORD *)v50 = v57;
              }
            }
          }
          else if (v52 <= v51)
          {
            v60 = *v48;
            v61 = *(_DWORD *)(v11 + 32);
            v62 = *(_DWORD *)(v50 + 8);
            *v48 = *(_QWORD *)v50;
            *(_DWORD *)(v11 + 32) = v62;
            *(_DWORD *)(v50 + 8) = v61;
            *(_QWORD *)v50 = v60;
            if (*(a2 - 7) + *(a2 - 8) > (*(_DWORD *)(v50 + 8) + *(_DWORD *)(v50 + 4)))
            {
              v210 = *(_DWORD *)(v50 + 8);
              v185 = *(_QWORD *)v50;
              v63 = *v10;
              *(_DWORD *)(v50 + 8) = *(a2 - 7);
              *(_QWORD *)v50 = v63;
              *(a2 - 7) = v210;
              *v10 = v185;
            }
          }
          else
          {
            v53 = *v48;
            v54 = *(_DWORD *)(v11 + 32);
            v55 = *(a2 - 7);
            *v48 = *v10;
            *(_DWORD *)(v11 + 32) = v55;
            *(a2 - 7) = v54;
            *v10 = v53;
          }
          v64 = *(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4);
          v65 = *(_DWORD *)(v50 + 8) + *(_DWORD *)(v50 + 4);
          if (v64 <= *(_DWORD *)(v29 + 8) + *(_DWORD *)(v29 + 4))
          {
            if (v65 > v64)
            {
              v212 = *(_DWORD *)(v15 + 8);
              v187 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *(_QWORD *)v50;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v50 + 8);
              *(_DWORD *)(v50 + 8) = v212;
              *(_QWORD *)v50 = v187;
              if (*(_DWORD *)(v15 + 8) + *(_DWORD *)(v15 + 4) > (*(_DWORD *)(v29 + 8)
                                                                              + *(_DWORD *)(v29 + 4)))
              {
                v213 = *(_DWORD *)(v29 + 8);
                v188 = *(_QWORD *)v29;
                *(_QWORD *)v29 = *(_QWORD *)v15;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v15 + 8);
                *(_DWORD *)(v15 + 8) = v213;
                *(_QWORD *)v15 = v188;
              }
            }
          }
          else
          {
            if (v65 <= v64)
            {
              v214 = *(_DWORD *)(v29 + 8);
              v189 = *(_QWORD *)v29;
              *(_QWORD *)v29 = *(_QWORD *)v15;
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v214;
              *(_QWORD *)v15 = v189;
              if (*(_DWORD *)(v50 + 8) + *(_DWORD *)(v50 + 4) <= (*(_DWORD *)(v15 + 8)
                                                                               + *(_DWORD *)(v15 + 4)))
                goto LABEL_53;
              v211 = *(_DWORD *)(v15 + 8);
              v186 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *(_QWORD *)v50;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v50 + 8);
            }
            else
            {
              v211 = *(_DWORD *)(v29 + 8);
              v186 = *(_QWORD *)v29;
              *(_QWORD *)v29 = *(_QWORD *)v50;
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v50 + 8);
            }
            *(_DWORD *)(v50 + 8) = v211;
            *(_QWORD *)v50 = v186;
          }
LABEL_53:
          v215 = *(_DWORD *)(v11 + 8);
          v190 = *(_QWORD *)v11;
          v66 = *(_QWORD *)v15;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v11 = v66;
          *(_DWORD *)(v15 + 8) = v215;
          *(_QWORD *)v15 = v190;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v41 = *(_DWORD *)(v11 + 4);
          v42 = *(_DWORD *)(v11 + 8);
          v43 = v42 + v41;
LABEL_55:
          v67 = 0;
          v68 = *(_DWORD *)v11;
          do
          {
            v69 = *(_DWORD *)(v11 + v67 + 20) + *(_DWORD *)(v11 + v67 + 16);
            v67 += 12;
          }
          while (v69 > v43);
          v70 = v11 + v67;
          v71 = a2;
          if (v67 == 12)
          {
            v74 = a2;
            while (v70 < (unint64_t)v74)
            {
              v72 = v74 - 3;
              v75 = *(v74 - 1) + *(v74 - 2);
              v74 -= 3;
              if (v75 > v43)
                goto LABEL_63;
            }
            v72 = v74;
            v11 = v70;
          }
          else
          {
            do
            {
              v72 = v71 - 3;
              v73 = *(v71 - 1) + *(v71 - 2);
              v71 -= 3;
            }
            while (v73 <= v43);
LABEL_63:
            v11 = v70;
            if (v70 < (unint64_t)v72)
            {
              v76 = (unint64_t)v72;
              do
              {
                v216 = *(_DWORD *)(v11 + 8);
                v191 = *(_QWORD *)v11;
                v77 = *(_QWORD *)v76;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v76 + 8);
                *(_QWORD *)v11 = v77;
                *(_DWORD *)(v76 + 8) = v216;
                *(_QWORD *)v76 = v191;
                do
                {
                  v78 = *(_DWORD *)(v11 + 16);
                  v79 = *(_DWORD *)(v11 + 20);
                  v11 += 12;
                }
                while (v79 + v78 > v43);
                do
                {
                  v80 = *(_DWORD *)(v76 - 8);
                  v81 = *(_DWORD *)(v76 - 4);
                  v76 -= 12;
                }
                while (v81 + v80 <= v43);
              }
              while (v11 < v76);
            }
          }
          if ((int *)(v11 - 12) != v7)
          {
            v82 = *(_QWORD *)(v11 - 12);
            v7[2] = *(_DWORD *)(v11 - 4);
            *(_QWORD *)v7 = v82;
          }
          *(_DWORD *)(v11 - 12) = v68;
          *(_DWORD *)(v11 - 8) = v41;
          *(_DWORD *)(v11 - 4) = v42;
          if (v70 < (unint64_t)v72)
            goto LABEL_74;
          v83 = sub_223AEC574((uint64_t)v7, (_DWORD *)(v11 - 12));
          result = sub_223AEC574(v11, a2);
          if (!(_DWORD)result)
          {
            if (v83)
              continue;
LABEL_74:
            result = sub_223AEB4FC(v7, v11 - 12, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (int *)(v11 - 12);
          if (v83)
            return result;
          goto LABEL_2;
        }
        v113 = (int *)(v11 + 12);
        v115 = (int *)v11 == a2 || v113 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v115)
          {
            v116 = 0;
            v117 = (_DWORD *)v11;
            do
            {
              v119 = v117[4];
              v120 = v117[5];
              v121 = v117[1];
              v122 = v117[2];
              v117 = v113;
              if (v120 + v119 > (v122 + v121))
              {
                v123 = *v113;
                v124 = v116;
                do
                {
                  v125 = v11 + v124;
                  *(_QWORD *)(v125 + 12) = *(_QWORD *)(v11 + v124);
                  *(_DWORD *)(v125 + 20) = *(_DWORD *)(v11 + v124 + 8);
                  if (!v124)
                  {
                    v118 = (_DWORD *)v11;
                    goto LABEL_119;
                  }
                  v124 -= 12;
                }
                while (v120 + v119 > (*(_DWORD *)(v125 - 4) + *(_DWORD *)(v125 - 8)));
                v118 = (_DWORD *)(v11 + v124 + 12);
LABEL_119:
                *v118 = v123;
                v118[1] = v119;
                v118[2] = v120;
              }
              v113 = v117 + 3;
              v116 += 12;
            }
            while (v117 + 3 != a2);
          }
        }
        else if (!v115)
        {
          do
          {
            v163 = v7[4];
            v164 = v7[5];
            v165 = v7[1];
            v166 = v7[2];
            v7 = v113;
            if (v164 + v163 > (v166 + v165))
            {
              v167 = *v113;
              v168 = v113;
              do
              {
                v169 = v168;
                v170 = *(_QWORD *)(v168 - 3);
                v168 -= 3;
                *(_QWORD *)v169 = v170;
                v169[2] = *(v169 - 1);
              }
              while (v164 + v163 > (*(v169 - 4) + *(v169 - 5)));
              *v168 = v167;
              v168[1] = v163;
              v168[2] = v164;
            }
            v113 += 3;
          }
          while (v7 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_223AEC574(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4)))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(a2 - 1);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 3);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 3) = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      v9 = (uint64_t *)(a1 + 12);
      v10 = (uint64_t *)(a2 - 3);
      v11 = *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16);
      v12 = *(a2 - 1) + *(a2 - 2);
      if (v11 <= *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4))
      {
        if (v12 > v11)
        {
          v35 = *(_DWORD *)(a1 + 20);
          v36 = *v9;
          v37 = *(a2 - 1);
          *v9 = *v10;
          *(_DWORD *)(a1 + 20) = v37;
          *v10 = v36;
          *(a2 - 1) = v35;
          if (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) > (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4)))
          {
            v38 = *(_DWORD *)(a1 + 8);
            v39 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v9;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v9 = v39;
            *(_DWORD *)(a1 + 20) = v38;
          }
        }
      }
      else if (v12 <= v11)
      {
        v44 = *(_DWORD *)(a1 + 8);
        v45 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v9;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v9 = v45;
        *(_DWORD *)(a1 + 20) = v44;
        if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16)))
        {
          v46 = *(_DWORD *)(a1 + 20);
          v47 = *v9;
          v48 = *(a2 - 1);
          *v9 = *v10;
          *(_DWORD *)(a1 + 20) = v48;
          *v10 = v47;
          *(a2 - 1) = v46;
        }
      }
      else
      {
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
        v15 = *(a2 - 1);
        *(_QWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 8) = v15;
        *v10 = v14;
        *(a2 - 1) = v13;
      }
      return result;
    case 4uLL:
      sub_223AECA94((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 3));
      return 1;
    case 5uLL:
      v23 = (uint64_t *)(a1 + 12);
      v24 = (uint64_t *)(a1 + 24);
      v25 = (uint64_t *)(a1 + 36);
      sub_223AECA94((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36));
      if (*(a2 - 1) + *(a2 - 2) > (*(_DWORD *)(a1 + 44) + *(_DWORD *)(a1 + 40)))
      {
        v26 = *(_DWORD *)(a1 + 44);
        v27 = *v25;
        v28 = *(a2 - 1);
        *v25 = *(_QWORD *)(a2 - 3);
        *(_DWORD *)(a1 + 44) = v28;
        *(_QWORD *)(a2 - 3) = v27;
        *(a2 - 1) = v26;
        if (*(_DWORD *)(a1 + 44) + *(_DWORD *)(a1 + 40) > (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 28)))
        {
          v29 = *(_DWORD *)(a1 + 32);
          v30 = *v24;
          *v24 = *v25;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v25 = v30;
          *(_DWORD *)(a1 + 44) = v29;
          if (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 28) > (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16)))
          {
            v31 = *(_DWORD *)(a1 + 20);
            v32 = *v23;
            *v23 = *v24;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v24 = v32;
            *(_DWORD *)(a1 + 32) = v31;
            if (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) > (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4)))
            {
              v33 = *(_DWORD *)(a1 + 8);
              v34 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v23;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v23 = v34;
              *(_DWORD *)(a1 + 20) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v16 = (_DWORD *)(a1 + 24);
      v17 = (uint64_t *)(a1 + 12);
      v18 = *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16);
      v19 = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4);
      v20 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 28);
      if (v18 <= v19)
      {
        if (v20 > v18)
        {
          v40 = *(_DWORD *)(a1 + 20);
          v41 = *v17;
          *v17 = *(_QWORD *)v16;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *(_QWORD *)v16 = v41;
          *(_DWORD *)(a1 + 32) = v40;
          if (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) > v19)
          {
            v42 = *(_DWORD *)(a1 + 8);
            v43 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v17;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v17 = v43;
            *(_DWORD *)(a1 + 20) = v42;
          }
        }
      }
      else if (v20 <= v18)
      {
        v49 = *(_DWORD *)(a1 + 8);
        v50 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v17;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v17 = v50;
        *(_DWORD *)(a1 + 20) = v49;
        if (v20 > *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16))
        {
          v51 = *(_DWORD *)(a1 + 20);
          v52 = *v17;
          *v17 = *(_QWORD *)v16;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *(_QWORD *)v16 = v52;
          *(_DWORD *)(a1 + 32) = v51;
        }
      }
      else
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        *(_QWORD *)v16 = v22;
        *(_DWORD *)(a1 + 32) = v21;
      }
      v53 = (_DWORD *)(a1 + 36);
      if ((_DWORD *)(a1 + 36) == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = v53[1];
    v57 = v53[2];
    if (v57 + v56 > (v16[2] + v16[1]))
      break;
LABEL_36:
    v16 = v53;
    v54 += 12;
    v53 += 3;
    if (v53 == a2)
      return 1;
  }
  v58 = *v53;
  v59 = v54;
  do
  {
    v60 = a1 + v59;
    *(_QWORD *)(v60 + 36) = *(_QWORD *)(a1 + v59 + 24);
    *(_DWORD *)(v60 + 44) = *(_DWORD *)(a1 + v59 + 32);
    if (v59 == -24)
    {
      *(_DWORD *)a1 = v58;
      *(_DWORD *)(a1 + 4) = v56;
      *(_DWORD *)(a1 + 8) = v57;
      if (++v55 != 8)
        goto LABEL_36;
      return v53 + 3 == a2;
    }
    v59 -= 12;
  }
  while (v57 + v56 > (*(_DWORD *)(v60 + 20) + *(_DWORD *)(v60 + 16)));
  v61 = a1 + v59;
  *(_DWORD *)(v61 + 36) = v58;
  *(_DWORD *)(v61 + 40) = v56;
  *(_DWORD *)(a1 + v59 + 44) = v57;
  if (++v55 != 8)
    goto LABEL_36;
  return v53 + 3 == a2;
}

uint64_t *sub_223AECA94(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;

  v4 = *((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1);
  v5 = *((_DWORD *)a3 + 2) + *((_DWORD *)a3 + 1);
  if (v4 <= *((_DWORD *)result + 2) + *((_DWORD *)result + 1))
  {
    if (v5 > v4)
    {
      v9 = *((_DWORD *)a2 + 2);
      v10 = *a2;
      v11 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v11;
      *a3 = v10;
      *((_DWORD *)a3 + 2) = v9;
      if (*((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1) > (*((_DWORD *)result + 2) + *((_DWORD *)result + 1)))
      {
        v12 = *((_DWORD *)result + 2);
        v13 = *result;
        v14 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v14;
        *a2 = v13;
        *((_DWORD *)a2 + 2) = v12;
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *result;
      v8 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v8;
LABEL_9:
      *a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      goto LABEL_10;
    }
    v15 = *((_DWORD *)result + 2);
    v16 = *result;
    v17 = *((_DWORD *)a2 + 2);
    *result = *a2;
    *((_DWORD *)result + 2) = v17;
    *a2 = v16;
    *((_DWORD *)a2 + 2) = v15;
    if (*((_DWORD *)a3 + 2) + *((_DWORD *)a3 + 1) > (*((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1)))
    {
      v6 = *((_DWORD *)a2 + 2);
      v7 = *a2;
      v18 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((_DWORD *)a4 + 2) + *((_DWORD *)a4 + 1) > (*((_DWORD *)a3 + 2) + *((_DWORD *)a3 + 1)))
  {
    v19 = *((_DWORD *)a3 + 2);
    v20 = *a3;
    v21 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v21;
    *a4 = v20;
    *((_DWORD *)a4 + 2) = v19;
    if (*((_DWORD *)a3 + 2) + *((_DWORD *)a3 + 1) > (*((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1)))
    {
      v22 = *((_DWORD *)a2 + 2);
      v23 = *a2;
      v24 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v24;
      *a3 = v23;
      *((_DWORD *)a3 + 2) = v22;
      if (*((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 1) > (*((_DWORD *)result + 2) + *((_DWORD *)result + 1)))
      {
        v25 = *((_DWORD *)result + 2);
        v26 = *result;
        v27 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v27;
        *a2 = v26;
        *((_DWORD *)a2 + 2) = v25;
      }
    }
  }
  return result;
}

uint64_t sub_223AECC48(uint64_t a1, unsigned int a2, float a3)
{
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *__src;
  unint64_t v63;
  uint64_t *v64[3];
  int v65;
  const char *v66;
  int v67;
  const char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *object;
  void *v75[2];
  __int128 v76;
  void *__p[2];
  unint64_t v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  *(float *)a1 = a3;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (a2 > 4 || ((1 << a2) & 0x16) == 0)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_2540CCDB8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDB8))
    {
      sub_22455F53C(v64);
      sub_223174DE4(&object, "cv3d.recon");
      sub_2232300E0(v64, (uint64_t)&object, &qword_2540CCDB0);
      if (SHIBYTE(v75[1]) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_2540CCDB8);
    }
    v71 = qword_2540CCDB0;
    if (**(int **)(qword_2540CCDB0 + 56) > 4)
      goto LABEL_93;
    v7 = *(unsigned __int8 *)(qword_2540CCDB0 + 72);
    v8 = sub_22322F254(qword_2540CCDB0, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && !v8)
      goto LABEL_93;
    v64[0] = &v71;
    v64[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v64[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    v65 = 4;
    v66 = "unknown file";
    v67 = 111;
    v69 = 0;
    v70 = 0;
    v68 = "unknown function";
    v10 = *v64[0];
    v61 = *v64[0];
    if (*(char *)(*v64[0] + 39) < 0)
    {
      v12 = *(const char **)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
    }
    else
    {
      v11 = *(unsigned __int8 *)(*v64[0] + 39);
      v12 = (const char *)(*v64[0] + 16);
    }
    v60 = *v64[0] + 16;
    v63 = v9;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v76 && SHIBYTE(v75[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v14 = (const char *)&xmmword_255788F40;
    else
      v14 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v15 = byte_255788F57;
    else
      v15 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v12;
    object = os_log_create(v14, v12);
    v16 = v75;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v15 >= 0x17)
    {
      v17 = v7;
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      v16 = operator new(v18 + 1);
      v75[1] = (void *)v15;
      *(_QWORD *)&v76 = v19 | 0x8000000000000000;
      v75[0] = v16;
      v7 = v17;
    }
    else
    {
      BYTE7(v76) = v15;
      if (!v15)
      {
LABEL_26:
        *((_BYTE *)v16 + v15) = 0;
        BYTE8(v76) = 1;
        v20 = __p;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v11 >= 0x17)
        {
          v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v21 = v11 | 7;
          v22 = v21 + 1;
          v20 = operator new(v21 + 1);
          __p[1] = (void *)v11;
          v78 = v22 | 0x8000000000000000;
          __p[0] = v20;
        }
        else
        {
          HIBYTE(v78) = v11;
          if (!v11)
            goto LABEL_34;
        }
        memmove(v20, __src, v11);
LABEL_34:
        *((_BYTE *)v20 + v11) = 0;
        v79 = 1;
        v23 = object;
        if (SHIBYTE(v78) < 0)
          operator delete(__p[0]);
        if (BYTE8(v76) && SBYTE7(v76) < 0)
          operator delete(v75[0]);
        if (object)
          os_release(object);
        if (v63 && *(_QWORD *)(v63 + 24))
        {
          v24 = _os_log_pack_size();
          v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
          v26 = (std::__shared_weak_count *)operator new();
          v27 = v26;
          v26->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v26->__shared_weak_owners_ = 0;
          v26[1].__vftable = v25;
          object = v25;
          v75[0] = v25;
          v75[1] = v26;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
          v76 = 0uLL;
          __p[0] = 0;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v27);
          }
          v31 = object;
          v32 = (_DWORD *)_os_log_pack_fill();
          *v32 = 67109120;
          v32[1] = a2;
          v33 = operator new();
          v34 = *(unsigned __int8 *)(v61 + 39);
          v35 = v60;
          if ((v34 & 0x80u) != 0)
          {
            v35 = *(_QWORD *)(v61 + 16);
            v34 = *(_QWORD *)(v61 + 24);
          }
          *(_QWORD *)v33 = v31;
          *(_OWORD *)(v33 + 8) = *(_OWORD *)v75;
          v75[0] = 0;
          v75[1] = 0;
          *(_OWORD *)(v33 + 24) = v76;
          v76 = 0uLL;
          *(_QWORD *)(v33 + 40) = v35;
          *(_QWORD *)(v33 + 48) = v34;
          *(_BYTE *)(v33 + 56) = 16;
          v72 = 0;
          v73 = v33;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v63 + 24) + 40))(*(_QWORD *)(v63 + 24), &v73);
          v36 = v73;
          v73 = 0;
          if (v36)
          {
            v37 = *(std::__shared_weak_count **)(v36 + 32);
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = *(std::__shared_weak_count **)(v36 + 16);
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            MEMORY[0x227684CE8](v36, 0x10F0C40B62ED6C6);
            v43 = v72;
            v72 = 0;
            if (v43)
            {
              v44 = *(std::__shared_weak_count **)(v43 + 32);
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v47 = *(std::__shared_weak_count **)(v43 + 16);
              if (v47)
              {
                v48 = (unint64_t *)&v47->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
          if (*((_QWORD *)&v76 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = (std::__shared_weak_count *)v75[1];
          if (v75[1])
          {
            v54 = (unint64_t *)((char *)v75[1] + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
        }
        else
        {
          os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          LODWORD(object) = 67109120;
          HIDWORD(object) = a2;
          v56 = (void *)_os_log_send_and_compose_impl();
          if (v56)
            free(v56);
        }
        if (v7)
        {
          sub_22322C138((uint64_t)v64, "Invalid occupancy downscale factor %i", a2);
          sub_223182C08((uint64_t)v64);
        }
        sub_223182C08((uint64_t)v64);
        v57 = v70;
        if (v70)
        {
          v58 = (unint64_t *)&v70->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
LABEL_93:
        *(_DWORD *)(a1 + 8) = 1;
        return a1;
      }
    }
    memmove(v16, v14, v15);
    goto LABEL_26;
  }
  return a1;
}

void sub_223AED42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  _QWORD *v40;
  void **v41;
  void **v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  if (a36)
  {
    if (a35 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  v44 = (void *)v40[16];
  if (v44)
  {
    v40[17] = v44;
    operator delete(v44);
    v45 = *v41;
    if (!*v41)
    {
LABEL_6:
      v46 = (void *)v40[9];
      if (!v46)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
    v45 = *v41;
    if (!*v41)
      goto LABEL_6;
  }
  v40[14] = v45;
  operator delete(v45);
  v46 = (void *)v40[9];
  if (!v46)
  {
LABEL_7:
    v47 = (void *)v40[6];
    if (!v47)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  v40[10] = v46;
  operator delete(v46);
  v47 = (void *)v40[6];
  if (!v47)
  {
LABEL_8:
    v48 = *v42;
    if (!*v42)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_14:
  v40[7] = v47;
  operator delete(v47);
  v48 = *v42;
  if (!*v42)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_9:
  v40[4] = v48;
  operator delete(v48);
  goto LABEL_10;
}

void sub_223AED5BC(uint64_t a1, unint64_t a2, float32x2_t *a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int i;
  _DWORD *v20;
  const float *v21;
  int32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  _QWORD *v81;

  if (*(_BYTE *)(a1 + 4))
    return;
  v5 = HIDWORD(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = a2 / v6;
  v8 = HIDWORD(a2) / v6;
  *(_QWORD *)(a1 + 12) = v7 | (v8 << 32);
  if ((_DWORD)v7 * v6 != (_DWORD)a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 123, (uint64_t)"size_[0] * downsample_factor_ == size[0]", 40, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_94;
    }
    LODWORD(v8) = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 8);
  }
  if (v6 * (_DWORD)v8 != (_DWORD)v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 124, (uint64_t)"size_[1] * downsample_factor_ == size[1]", 40, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_94;
    }
    LODWORD(v8) = *(_DWORD *)(a1 + 16);
  }
  v9 = (*(_DWORD *)(a1 + 12) * v8);
  if (!(_DWORD)v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 127, (uint64_t)"total > 0", 9, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_94:
    abort();
  }
  v10 = *(char **)(a1 + 24);
  v81 = (_QWORD *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 2) < v9)
  {
    v11 = *(char **)(a1 + 32);
    v12 = (char *)operator new(12 * v9);
    v13 = &v12[12 * ((v11 - v10) / 12)];
    v14 = v13;
    if (v11 != v10)
    {
      v14 = &v12[12 * ((v11 - v10) / 12)];
      do
      {
        v15 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        v16 = *((_DWORD *)v11 + 2);
        *(_QWORD *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v11 != v10);
    }
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = &v12[12 * v9];
    if (v10)
      operator delete(v10);
  }
  v79 = v9;
  v80 = *(_DWORD *)(a1 + 16);
  if (!v80)
    goto LABEL_42;
  v17 = *(_DWORD *)(a1 + 12);
  if (!v17)
    goto LABEL_42;
  v18 = 0;
LABEL_19:
  for (i = 0; i != v17; ++i)
  {
    v26 = *(_DWORD **)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v26 < v25)
    {
      v20 = v26 + 3;
      goto LABEL_21;
    }
    v27 = (_DWORD *)*v81;
    v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - *v81) >> 2);
    v29 = v28 + 1;
    if (v28 + 1 > 0x1555555555555555)
      sub_22316E078();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v27) >> 2);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0xAAAAAAAAAAAAAAALL)
      v31 = 0x1555555555555555;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 > 0x1555555555555555)
        goto LABEL_93;
      v32 = (char *)operator new(12 * v31);
      v33 = (uint64_t)&v32[12 * v28];
      v34 = v33;
      if (v26 == v27)
        goto LABEL_36;
    }
    else
    {
      v32 = 0;
      v33 = 4 * (((uint64_t)v26 - *v81) >> 2);
      v34 = v33;
      if (v26 == v27)
        goto LABEL_36;
    }
    do
    {
      v35 = *(_QWORD *)(v26 - 3);
      v26 -= 3;
      v36 = v26[2];
      *(_QWORD *)(v34 - 12) = v35;
      v34 -= 12;
      *(_DWORD *)(v34 + 8) = v36;
    }
    while (v26 != v27);
    v26 = (_DWORD *)*v81;
LABEL_36:
    v37 = &v32[12 * v31];
    v20 = (_DWORD *)(v33 + 12);
    *(_QWORD *)(a1 + 24) = v34;
    *(_QWORD *)(a1 + 32) = v33 + 12;
    *(_QWORD *)(a1 + 40) = v37;
    if (v26)
      operator delete(v26);
LABEL_21:
    v21 = (const float *)(a1 + 8);
    v22 = (int32x2_t)vld1_dup_f32(v21);
    v23 = a3[5];
    v24 = vmul_f32(a3[4], vcvt_f32_s32(vmul_s32(v22, (int32x2_t)__PAIR64__(v18, i))));
    *(_QWORD *)(a1 + 32) = v20;
    *(v20 - 1) = 1065353216;
    *(float32x2_t *)(v20 - 3) = vadd_f32(v23, v24);
  }
  while (++v18 != v80)
  {
    v17 = *(_DWORD *)(a1 + 12);
    if (v17)
      goto LABEL_19;
  }
LABEL_42:
  v39 = *(_QWORD *)(a1 + 48);
  v38 = *(_QWORD *)(a1 + 56);
  v40 = (v38 - v39) >> 4;
  v41 = v79 - v40;
  if (v79 <= v40)
  {
    if (v79 >= v40)
      goto LABEL_58;
    v54 = v39 + 16 * v79;
    goto LABEL_57;
  }
  v42 = *(_QWORD *)(a1 + 64);
  if (v41 <= (v42 - v38) >> 4)
  {
    bzero(*(void **)(a1 + 56), 16 * v41);
    v54 = v38 + 16 * v41;
LABEL_57:
    *(_QWORD *)(a1 + 56) = v54;
    goto LABEL_58;
  }
  v43 = v42 - v39;
  v44 = v43 >> 3;
  if (v43 >> 3 <= v79)
    v44 = v79;
  v45 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0;
  v46 = 0xFFFFFFFFFFFFFFFLL;
  if (!v45)
    v46 = v44;
  if (v46 >> 60)
LABEL_93:
    sub_223174E94();
  v47 = 16 * v46;
  v48 = (char *)operator new(16 * v46);
  v49 = &v48[16 * v40];
  v50 = &v48[v47];
  bzero(v49, 16 * v41);
  v51 = &v49[16 * v41];
  if (v38 != v39)
  {
    do
    {
      v52 = *(_QWORD *)(v38 - 16);
      v38 -= 16;
      v53 = *(_DWORD *)(v38 + 8);
      *((_QWORD *)v49 - 2) = v52;
      v49 -= 16;
      *((_DWORD *)v49 + 2) = v53;
      *((_WORD *)v49 + 6) = *(_WORD *)(v38 + 12);
    }
    while (v38 != v39);
    v38 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v49;
  *(_QWORD *)(a1 + 56) = v51;
  *(_QWORD *)(a1 + 64) = v50;
  if (v38)
    operator delete((void *)v38);
LABEL_58:
  v56 = *(char **)(a1 + 72);
  v55 = *(char **)(a1 + 80);
  v57 = 0xF0F0F0F0F0F0F0F1 * ((v55 - v56) >> 2);
  v58 = v79 - v57;
  if (v79 <= v57)
  {
    if (v79 >= v57)
      goto LABEL_79;
    v72 = &v56[68 * v79];
    goto LABEL_78;
  }
  v59 = *(_QWORD *)(a1 + 88);
  if (0xF0F0F0F0F0F0F0F1 * ((v59 - (uint64_t)v55) >> 2) >= v58)
  {
    v72 = &v55[68 * v58];
    do
    {
      *((_DWORD *)v55 + 16) = 0;
      *((_OWORD *)v55 + 2) = 0uLL;
      *((_OWORD *)v55 + 3) = 0uLL;
      *(_OWORD *)v55 = 0uLL;
      *((_OWORD *)v55 + 1) = 0uLL;
      *((_WORD *)v55 + 33) = -1;
      v55 += 68;
    }
    while (v55 != v72);
LABEL_78:
    *(_QWORD *)(a1 + 80) = v72;
    goto LABEL_79;
  }
  v60 = 0xE1E1E1E1E1E1E1E2 * ((v59 - (uint64_t)v56) >> 2);
  if (v60 <= v79)
    v60 = v79;
  if (0xF0F0F0F0F0F0F0F1 * ((v59 - (uint64_t)v56) >> 2) >= 0x1E1E1E1E1E1E1E1)
    v61 = 0x3C3C3C3C3C3C3C3;
  else
    v61 = v60;
  if (v61 > 0x3C3C3C3C3C3C3C3)
    goto LABEL_93;
  v62 = (char *)operator new(68 * v61);
  v63 = &v62[4 * ((v55 - v56) >> 2)];
  v64 = &v62[68 * v79];
  v65 = v63;
  do
  {
    *((_DWORD *)v65 + 16) = 0;
    *((_OWORD *)v65 + 2) = 0uLL;
    *((_OWORD *)v65 + 3) = 0uLL;
    *(_OWORD *)v65 = 0uLL;
    *((_OWORD *)v65 + 1) = 0uLL;
    *((_WORD *)v65 + 33) = -1;
    v65 += 68;
  }
  while (v65 != v64);
  if (v55 != v56)
  {
    v66 = 0;
    do
    {
      v67 = &v63[v66];
      *(_QWORD *)(v67 - 68) = *(_QWORD *)&v55[v66 - 68];
      v68 = *(_QWORD *)&v55[v66 - 60];
      *((_DWORD *)v67 - 13) = *(_DWORD *)&v55[v66 - 52];
      *(_QWORD *)(v67 - 60) = v68;
      v69 = *(_QWORD *)&v55[v66 - 48];
      *((_DWORD *)v67 - 10) = *(_DWORD *)&v55[v66 - 40];
      *((_QWORD *)v67 - 6) = v69;
      *(_QWORD *)(v67 - 36) = *(_QWORD *)&v55[v66 - 36];
      v70 = *(_QWORD *)&v55[v66 - 28];
      *((_DWORD *)v67 - 5) = *(_DWORD *)&v55[v66 - 20];
      *(_QWORD *)(v67 - 28) = v70;
      v71 = *(_QWORD *)&v55[v66 - 16];
      *((_DWORD *)v67 - 2) = *(_DWORD *)&v55[v66 - 8];
      *((_QWORD *)v67 - 2) = v71;
      *((_DWORD *)v67 - 1) = *(_DWORD *)&v55[v66 - 4];
      v66 -= 68;
    }
    while (&v55[v66] != v56);
    v55 = *(char **)(a1 + 72);
    v63 += v66;
  }
  *(_QWORD *)(a1 + 72) = v63;
  *(_QWORD *)(a1 + 80) = v64;
  *(_QWORD *)(a1 + 88) = &v62[68 * v61];
  if (v55)
    operator delete(v55);
LABEL_79:
  LODWORD(v73) = v79 >> 6;
  v74 = *(_QWORD *)(a1 + 104);
  if (v79 <= (v79 & 0xFFFFFFC0))
    v73 = v73;
  else
    v73 = (v73 + 1);
  *(_DWORD *)(a1 + 96) = v73;
  v75 = (*(_QWORD *)(a1 + 112) - v74) >> 1;
  if (v73 <= v75)
  {
    if (v73 < v75)
      *(_QWORD *)(a1 + 112) = v74 + 2 * v73;
  }
  else
  {
    sub_2232C5090(a1 + 104, v73 - v75);
    LODWORD(v73) = *(_DWORD *)(a1 + 96);
  }
  v76 = *(_QWORD *)(a1 + 128);
  v77 = ((_DWORD)v73 << 6);
  v78 = (*(_QWORD *)(a1 + 136) - v76) >> 1;
  if (v77 <= v78)
  {
    if (v77 < v78)
      *(_QWORD *)(a1 + 136) = v76 + 2 * v77;
  }
  else
  {
    sub_2232C5090(a1 + 128, v77 - v78);
  }
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t sub_223AEDC28(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float a9)
{
  _DWORD v19[6];
  __int128 v20;
  __int128 v21;
  int v22;

  v20 = 0u;
  v21 = 0u;
  v22 = 728335616;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 4)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 165, (uint64_t)"initialized_", 12, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223AEDD94(a1, a2, a3, a4, a8, a9);
  sub_223AEE218(a1);
  sub_223AEE2B0(a1, a5, a6, a7, (uint64_t)v19);
  sub_223AEEC58(a1, v19);
  return kdebug_trace();
}

void sub_223AEDD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AEDD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEDD94(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v28;
  float v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int v33;
  uint64_t v34;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 v49;
  int v51;
  uint64_t v52;
  int v54;
  float v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;

  kdebug_trace();
  v17 = *(_QWORD *)(a3 + 32);
  v19 = *(_DWORD *)(a1 + 8);
  v18 = *(_DWORD *)(a1 + 12);
  if (v18 * v19 != (_DWORD)v17 || (v20 = *(_DWORD *)(a1 + 16), v20 * v19 != HIDWORD(v17)))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 193, (uint64_t)"depth_view_size[0] == downsample_factor_ * size_[0] && depth_view_size[1] == downsample_factor_ * size_[1]", 106, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_40;
    }
    v18 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2) != v18 * v20)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 195, (uint64_t)"pixels_.size() == size_[0] * size_[1]", 37, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      v20 = *(_DWORD *)(a1 + 16);
      goto LABEL_8;
    }
LABEL_40:
    abort();
  }
LABEL_8:
  if (v20 && *(_DWORD *)(a1 + 12))
  {
    v52 = a3;
    v54 = 0;
    v12.i32[0] = 1.0;
    v21 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 72);
    v23 = *(float32x2_t **)(a1 + 48);
    _D0.f32[0] = 1.0 / *(float *)a1;
    v55 = _D0.f32[0];
    v51 = v20;
    while (1)
    {
      v24 = *(_DWORD *)(a1 + 12);
      if (v24)
        break;
LABEL_12:
      if (++v54 == v20)
        return kdebug_trace();
    }
    v25 = 0;
    v26 = *(_DWORD *)(a1 + 8) * v54;
    v59 = *(_DWORD *)(v52 + 40);
    v58 = *(_QWORD *)(v52 + 24) + 2 * (*(_DWORD *)(v52 + 44) * v26);
    v57 = *(_DWORD *)(a4 + 40);
    v56 = *(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 44) * v26);
    while (1)
    {
      v33 = *(_DWORD *)(a1 + 8);
      v34 = (v33 * v25);
      _H0 = *(_WORD *)(v58 + 2 * (v34 * v59));
      __asm { FCVT            S10, H0 }
      _D0.i16[0] = *(_WORD *)(v56 + 2 * (v34 * v57));
      __asm { FCVT            S11, H0 }
      if (!*(_BYTE *)(a5 + 536))
        goto LABEL_17;
      v41 = a1;
      v42 = (v33 * v54);
      v43 = sub_223CCAF1C(a5, v34 | (v42 << 32), _D0, v12, *(double *)v13.i64, *(double *)&v14);
      if ((v43 & 0xFF00000000) != 0)
      {
        if (_S10 >= *(float *)&v43)
        {
          _S11 = 0.8;
          _S10 = *(float *)&v43;
          goto LABEL_16;
        }
      }
      else
      {
        v45 = *(_QWORD *)(a5 + 440);
        v44 = *(_QWORD *)(a5 + 448);
        if (v45 == v44)
          goto LABEL_16;
        if (*(_DWORD *)(a5 + 416) <= v34 || *(_DWORD *)(a5 + 420) <= v42)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/DepthCorrection/SpecularRegions.cpp", 41, (uint64_t)"idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, (uint64_t)&unk_2245A741E, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v45 = *(_QWORD *)(a5 + 440);
          v44 = *(_QWORD *)(a5 + 448);
        }
        v47 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 408)
                                 + (*(_DWORD *)(a5 + 424) * v34 + *(_DWORD *)(a5 + 428) * v42));
        v48 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - v45) >> 3);
        v49 = v47 - 100;
        if (v48 > v47)
          v49 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 408)
                                   + (*(_DWORD *)(a5 + 424) * v34 + *(_DWORD *)(a5 + 428) * v42));
        if (v48 <= v49)
          goto LABEL_16;
      }
      _S11 = 0.01;
LABEL_16:
      a1 = v41;
LABEL_17:
      v28 = _S10 > 0.0;
      if (_S10 >= a6)
        v28 = 0;
      *(_BYTE *)v22 = v28;
      *(float *)(v22 + 4) = fmaxf(_S11, 0.01) * (float)v28;
      if (_S10 <= a6)
        v29 = _S10;
      else
        v29 = a6;
      v12.i64[0] = *(_QWORD *)v21;
      v12.i32[2] = *(_DWORD *)(v21 + 8);
      v21 += 12;
      v30 = (int8x16_t)vmulq_n_f32(v12, fmaxf(v29, 0.0));
      v13.i32[0] = a2[1].i32[0];
      v15.i32[0] = a2[3].i32[0];
      v16.i32[0] = a2[5].i32[0];
      *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a2, *(float *)v30.i32), a2[2], *(float32x2_t *)v30.i8, 1), a2[4], (float32x4_t)v30, 2);
      v14 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
      *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v30.i8), v15, *(float32x2_t *)v30.i8, 1), v14, v16);
      *(float32x2_t *)v13.f32 = a2[6];
      v13.i32[2] = a2[7].i32[0];
      *(_DWORD *)(v22 + 16) = v30.i32[2];
      v12 = vaddq_f32(v13, v31);
      *(_QWORD *)(v22 + 8) = v30.i64[0];
      *(_DWORD *)(v22 + 28) = v12.i32[2];
      *(_QWORD *)(v22 + 20) = v12.i64[0];
      v22 += 68;
      v32 = vmulq_n_f32(v12, v55);
      v12.i32[0] = v32.i32[2];
      _D0 = (float32x2_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v32.f32));
      *v23 = _D0;
      v23[1].i32[0] = vcvtms_s32_f32(v32.f32[2]);
      v23 += 2;
      if (v24 == ++v25)
      {
        v20 = v51;
        goto LABEL_12;
      }
    }
  }
  return kdebug_trace();
}

void sub_223AEE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AEE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AEE204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEE218(uint64_t a1)
{
  kdebug_trace();
  sub_223AEEDF4((int *)(a1 + 12), (int **)(a1 + 48));
  return kdebug_trace();
}

void sub_223AEE298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEE2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int32x2_t v25;
  signed int v26;
  int v27;
  int v28;
  int32x2_t v29;
  float32x4_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 v41;
  int v42;
  unsigned __int8 v43;
  int v44;
  unsigned __int8 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v59;
  uint64_t v60;
  int32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned int v66;
  _BOOL4 v68;
  BOOL v69;
  unsigned __int8 v70;
  BOOL v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  _BOOL4 v89;
  BOOL v90;
  int v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  int32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  unsigned __int8 v100;
  unsigned __int8 v101;
  _BOOL4 v103;
  BOOL v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  uint64_t v115;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;

  kdebug_trace();
  v14 = *(_DWORD *)(a2 + 56);
  if (v14 != *(_DWORD *)(a3 + 56) || *(_DWORD *)(a2 + 60) != *(_DWORD *)(a3 + 60))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 241, (uint64_t)"semantic_view.Size() == material_view.Size()", 44, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_174;
    }
    v14 = *(_DWORD *)(a2 + 56);
  }
  v15 = *(_DWORD *)(a1 + 8);
  if (v14 != *(_DWORD *)(a1 + 12) * v15 || (v16 = *(_DWORD *)(a1 + 16), *(_DWORD *)(a2 + 60) != v16 * v15))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 243, (uint64_t)"semantic_view.Size()[0] == downsample_factor_ * size_[0] && semantic_view.Size()[1] == downsample_factor_ * size_[1]", 116, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
    {
      v16 = *(_DWORD *)(a1 + 16);
      goto LABEL_9;
    }
LABEL_174:
    abort();
  }
LABEL_9:
  *(_OWORD *)a5 = xmmword_224660C30;
  *(_QWORD *)(a5 + 16) = 0x8000000080000000;
  v17 = *(unsigned __int8 **)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 48);
  if (v16)
  {
    v19 = 0;
    v20 = 0;
    v119 = a2;
    v120 = a3;
    v118 = v16;
    do
    {
      v21 = *(_DWORD *)(a1 + 8);
      v22 = (unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 68) * v21 * v20));
      v23 = (unsigned __int16 *)(*(_QWORD *)(a3 + 24) + 2 * (*(_DWORD *)(a3 + 68) * v21 * v20));
      v24 = *(unsigned __int16 *)(v18 + 12);
      v25 = *(int32x2_t *)v18;
      v26 = *(_DWORD *)(v18 + 8);
      v121 = v20;
      if (v19 == (_DWORD)v24)
      {
        *(int32x2_t *)a5 = vmin_s32(v25, *(int32x2_t *)a5);
        *(int32x2_t *)(a5 + 12) = vmax_s32(*(int32x2_t *)(a5 + 12), v25);
        v27 = *(_DWORD *)(a5 + 8);
        if (v26 < v27)
          v27 = v26;
        *(_DWORD *)(a5 + 8) = v27;
        v28 = *(_DWORD *)(a5 + 20);
        if (v28 <= v26)
          v28 = v26;
        *(_DWORD *)(a5 + 20) = v28;
        *((_WORD *)v17 + 16) = 0;
        *(_QWORD *)(v17 + 58) = 0;
        *(_QWORD *)(v17 + 36) = 0;
        *(_QWORD *)(v17 + 52) = 0;
        *(_QWORD *)(v17 + 44) = 0;
        *((_WORD *)v17 + 33) = -258;
        v29 = *(int32x2_t *)(v17 + 4);
        v10.i64[0] = *((_QWORD *)v17 + 1);
        v10.i32[2] = *((_DWORD *)v17 + 4);
        v11.i64[0] = *(_QWORD *)(v17 + 20);
        v11.i32[2] = *((_DWORD *)v17 + 7);
        v30 = vmulq_n_f32(v10, *(float *)v29.i32);
        v10 = vmulq_n_f32(v11, *(float *)v29.i32);
        v31 = *v22;
        if (*v22 <= v22[3])
          v31 = v22[3];
        v32 = v31 >> 8;
        v33 = *v23;
        if (*v23 <= v23[3])
          v33 = v23[3];
        v34 = v33 >> 8;
        v21 = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v29 = *(int32x2_t *)(v17 + 4);
        v10.i64[0] = *((_QWORD *)v17 + 1);
        v10.i32[2] = *((_DWORD *)v17 + 4);
        v30 = vmulq_n_f32(v10, *(float *)v29.i32);
        v10.i64[0] = *(_QWORD *)(v17 + 20);
        v10.i32[2] = *((_DWORD *)v17 + 7);
        v10 = vmulq_n_f32(v10, *(float *)v29.i32);
        v35 = *v22;
        if (*v22 <= v22[3])
          v35 = v22[3];
        v32 = v35 >> 8;
        v36 = *v23;
        if (*v23 <= v23[3])
          v36 = v23[3];
        v34 = v36 >> 8;
      }
      v37 = *v17;
      v38 = *(_DWORD *)(a1 + 12);
      v18 += 16;
      v39 = v19 + 1;
      v40 = v38 - 1;
      if (v38 == 1)
      {
        v41 = 0;
        LOBYTE(v42) = 0;
        v43 = *v17;
        LOBYTE(v44) = *v17;
        v45 = v32;
        LOBYTE(v46) = v34;
        v17 += 68;
        v122 = v39;
        v47 = *(_QWORD *)(a1 + 72);
        if (*(float *)v29.i32 <= 0.0)
          goto LABEL_125;
      }
      else
      {
        v117 = *(_DWORD *)(a1 + 12);
        v123 = v19;
        v42 = 0;
        v41 = 0;
        v48 = (4 * v21);
        v49 = &v22[v48];
        v50 = &v23[v48];
        v51 = v17 + 135;
        v46 = v34;
        v45 = v32;
        v44 = v37;
        v43 = v37;
        do
        {
          while (v25.i32[0] == *(_DWORD *)v18 && __PAIR64__(v26, v25.u32[1]) == *(_QWORD *)(v18 + 4))
          {
            v55 = v49[3];
            if (*v49 > v55)
              v55 = *v49;
            if (v32 != v55 >> 8)
            {
              v56 = v55 >> 8;
              if (v32 > 0x29u)
              {
                v43 = 0;
                LOBYTE(v32) = v56;
              }
              else
              {
                if (v43 >= v41 || v45 > 0x29u)
                {
                  v41 = v43;
                  v45 = v32;
                }
                LOBYTE(v32) = v56;
                v43 = 0;
              }
            }
            v84 = *(_QWORD *)(v51 - 63);
            v12.i64[0] = *(_QWORD *)(v51 - 59);
            v12.i32[2] = *(_DWORD *)(v51 - 51);
            v13.i64[0] = *(_QWORD *)(v51 - 47);
            v13.i32[2] = *(_DWORD *)(v51 - 39);
            v30 = vaddq_f32(v30, vmulq_n_f32(v12, *(float *)&v84));
            v12 = vmulq_n_f32(v13, *(float *)&v84);
            v10 = vaddq_f32(v10, v12);
            v85 = *(v51 - 67);
            LOWORD(v37) = v37 + v85;
            *(float *)v29.i32 = *(float *)v29.i32 + *(float *)&v84;
            v86 = (4 * v21);
            v49 += v86;
            v43 += v85;
            v87 = v50[3];
            if (*v50 > v87)
              v87 = *v50;
            v50 += v86;
            v89 = v44 >= v42 || v46 > 0x19u;
            v90 = !v89;
            if (v89)
              v91 = v44;
            else
              v91 = v42;
            if (v90)
              v92 = v46;
            else
              v92 = v34;
            if (v34 > 0x19u)
            {
              v91 = v42;
              v92 = v46;
            }
            if (v34 == v87 >> 8)
            {
              v93 = v44;
            }
            else
            {
              v42 = v91;
              v93 = 0;
            }
            if (v34 != v87 >> 8)
            {
              v34 = v87 >> 8;
              v46 = v92;
            }
            v44 = v93 + v85;
            v18 += 16;
            ++v39;
            v51 += 68;
            if (!--v40)
              goto LABEL_123;
          }
          v59 = *(_QWORD *)(a1 + 72);
          if (*(float *)v29.i32 > 0.0)
          {
            v60 = v59 + 68 * v24;
            v61 = *(int32x2_t *)(v60 + 36);
            v11.i64[0] = *(_QWORD *)(v60 + 40);
            v11.i32[2] = *(_DWORD *)(v60 + 48);
            v11 = vmulq_n_f32(v11, *(float *)v61.i32);
            *(float *)v61.i32 = *(float *)v29.i32 + *(float *)v61.i32;
            v62 = vaddq_f32(v30, v11);
            v63 = vdivq_f32(v62, (float32x4_t)vdupq_lane_s32(v61, 0));
            *(_DWORD *)(v60 + 48) = v63.i32[2];
            *(_QWORD *)(v60 + 40) = v63.i64[0];
            v63.f32[0] = COERCE_FLOAT(*(_QWORD *)(v60 + 36));
            v62.i64[0] = *(_QWORD *)(v60 + 52);
            v62.i32[2] = *(_DWORD *)(v60 + 60);
            *(float *)v29.i32 = *(float *)v29.i32 + v63.f32[0];
            v10 = vdivq_f32(vaddq_f32(v10, vmulq_n_f32(v62, v63.f32[0])), (float32x4_t)vdupq_lane_s32(v29, 0));
            *(_DWORD *)(v60 + 60) = v10.i32[2];
            *(_QWORD *)(v60 + 52) = v10.i64[0];
            *(_DWORD *)(v60 + 36) = v29.i32[0];
          }
          *(_WORD *)(v59 + 68 * v24 + 32) += v37;
          if (v32 <= 0x29u && (v43 >= v41 || v45 > 0x29u))
          {
            v41 = v43;
            v45 = v32;
          }
          v66 = v34;
          v68 = v44 >= v42 || v46 > 0x19u;
          v69 = !v68;
          if (v68)
            v70 = v44;
          else
            v70 = v42;
          if (v69)
            LOBYTE(v34) = v46;
          v71 = v66 > 0x19;
          if (v66 <= 0x19)
            v72 = v70;
          else
            v72 = v42;
          if (v71)
            v73 = v46;
          else
            v73 = v34;
          if (v45 <= 0x29u)
          {
            v74 = v59 + 68 * v24;
            v76 = *(unsigned __int8 *)(v74 + 64);
            v75 = (unsigned __int8 *)(v74 + 64);
            if (v76 < v41 || v75[2] >= 0x2Au)
            {
              v75[2] = v45;
              *v75 = v41;
            }
          }
          if (v73 <= 0x19u)
          {
            v77 = v59 + 68 * v24;
            v79 = *(unsigned __int8 *)(v77 + 65);
            v78 = (unsigned __int8 *)(v77 + 65);
            if (v79 < v72 || v78[2] >= 0x1Au)
            {
              v78[2] = v73;
              *v78 = v72;
            }
          }
          if (a4 == 2)
          {
            v81 = v59 + 68 * v24;
            *(_BYTE *)(v81 + 67) = 25;
            *(_BYTE *)(v81 + 65) = 0;
          }
          v24 = *(unsigned __int16 *)(v18 + 12);
          v25 = *(int32x2_t *)v18;
          v26 = *(_DWORD *)(v18 + 8);
          if (v39 == (_DWORD)v24)
          {
            v41 = 0;
            v42 = 0;
            *(int32x2_t *)a5 = vmin_s32(v25, *(int32x2_t *)a5);
            *(int32x2_t *)(a5 + 12) = vmax_s32(*(int32x2_t *)(a5 + 12), v25);
            v82 = *(_DWORD *)(a5 + 8);
            if (v26 < v82)
              v82 = v26;
            *(_DWORD *)(a5 + 8) = v82;
            v83 = *(_DWORD *)(a5 + 20);
            if (v83 <= v26)
              v83 = v26;
            *(_DWORD *)(a5 + 20) = v83;
            *(_WORD *)(v51 - 35) = 0;
            *(_QWORD *)(v51 - 9) = 0;
            *(_QWORD *)(v51 - 31) = 0;
            *(_QWORD *)(v51 - 15) = 0;
            *(_QWORD *)(v51 - 23) = 0;
            *(_WORD *)(v51 - 1) = -258;
          }
          else
          {
            v41 = 0;
            v42 = 0;
          }
          v10.i64[0] = *(_QWORD *)(v51 - 59);
          v10.i32[2] = *(_DWORD *)(v51 - 51);
          v29 = *(int32x2_t *)(v51 - 63);
          v11.i64[0] = *(_QWORD *)(v51 - 47);
          v11.i32[2] = *(_DWORD *)(v51 - 39);
          v30 = vmulq_n_f32(v10, *(float *)v29.i32);
          v10 = vmulq_n_f32(v11, *(float *)v29.i32);
          v52 = *v49;
          if (*v49 <= v49[3])
            v52 = v49[3];
          v32 = v52 >> 8;
          v53 = *v50;
          if (*v50 <= v50[3])
            v53 = v50[3];
          v34 = v53 >> 8;
          v21 = *(_DWORD *)(a1 + 8);
          v54 = 2 * (4 * v21);
          v49 = (unsigned __int16 *)((char *)v49 + v54);
          v50 = (unsigned __int16 *)((char *)v50 + v54);
          LOWORD(v37) = *(v51 - 67);
          v43 = *(v51 - 67);
          v44 = v43;
          v45 = v32;
          v46 = v34;
          v18 += 16;
          ++v39;
          v51 += 68;
          --v40;
        }
        while (v40);
LABEL_123:
        v122 = v117 + v123;
        v17 = v51 - 67;
        v47 = *(_QWORD *)(a1 + 72);
        if (*(float *)v29.i32 <= 0.0)
          goto LABEL_125;
      }
      v94 = v47 + 68 * v24;
      v95 = *(int32x2_t *)(v94 + 36);
      v11.i64[0] = *(_QWORD *)(v94 + 40);
      v11.i32[2] = *(_DWORD *)(v94 + 48);
      v11 = vmulq_n_f32(v11, *(float *)v95.i32);
      *(float *)v95.i32 = *(float *)v29.i32 + *(float *)v95.i32;
      v96 = vaddq_f32(v30, v11);
      v97 = vdivq_f32(v96, (float32x4_t)vdupq_lane_s32(v95, 0));
      *(_DWORD *)(v94 + 48) = v97.i32[2];
      *(_QWORD *)(v94 + 40) = v97.i64[0];
      v97.f32[0] = COERCE_FLOAT(*(_QWORD *)(v94 + 36));
      v96.i64[0] = *(_QWORD *)(v94 + 52);
      v96.i32[2] = *(_DWORD *)(v94 + 60);
      *(float *)v29.i32 = *(float *)v29.i32 + v97.f32[0];
      v10 = vdivq_f32(vaddq_f32(v10, vmulq_n_f32(v96, v97.f32[0])), (float32x4_t)vdupq_lane_s32(v29, 0));
      *(_DWORD *)(v94 + 60) = v10.i32[2];
      *(_QWORD *)(v94 + 52) = v10.i64[0];
      *(_DWORD *)(v94 + 36) = v29.i32[0];
LABEL_125:
      *(_WORD *)(v47 + 68 * v24 + 32) += v37;
      if (v43 >= v41 || v45 > 0x29u)
      {
        v100 = v32;
      }
      else
      {
        v43 = v41;
        v100 = v45;
      }
      if (v32 <= 0x29u)
        v101 = v43;
      else
        v101 = v41;
      if (v32 > 0x29u)
        v100 = v45;
      v103 = v44 >= v42 || v46 > 0x19u;
      v104 = !v103;
      if (v103)
        v105 = v44;
      else
        v105 = v42;
      if (v104)
        v106 = v46;
      else
        v106 = v34;
      if (v34 <= 0x19u)
        v107 = v105;
      else
        v107 = v42;
      if (v34 > 0x19u)
        v106 = v46;
      if (v100 <= 0x29u)
      {
        v108 = v47 + 68 * v24;
        v110 = *(unsigned __int8 *)(v108 + 64);
        v109 = (unsigned __int8 *)(v108 + 64);
        if (v110 < v101 || v109[2] >= 0x2Au)
        {
          v109[2] = v100;
          *v109 = v101;
        }
      }
      a2 = v119;
      a3 = v120;
      v19 = v122;
      if (v106 <= 0x19u)
      {
        v111 = v47 + 68 * v24;
        v113 = *(unsigned __int8 *)(v111 + 65);
        v112 = (unsigned __int8 *)(v111 + 65);
        if (v113 < v107 || v112[2] >= 0x1Au)
        {
          v112[2] = v106;
          *v112 = v107;
        }
      }
      if (a4 == 2)
      {
        v115 = v47 + 68 * v24;
        *(_BYTE *)(v115 + 67) = 25;
        *(_BYTE *)(v115 + 65) = 0;
      }
      v20 = v121 + 1;
    }
    while (v121 + 1 != v118);
  }
  if (v17 != *(unsigned __int8 **)(a1 + 80)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 395, (uint64_t)"pixel_iter == pixels_.end()", 27, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C)|| v18 != *(_QWORD *)(a1 + 56)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 395, (uint64_t)"iter == voxels_and_indices_.end()", 33, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return kdebug_trace();
}

void sub_223AEEC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223AEEC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEEC58(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  kdebug_trace();
  v4 = *a2 & 0xFFFFFFF8;
  v5 = a2[1] & 0xFFFFFFF8;
  v6 = a2[2] & 0xFFFFFFF8;
  v7 = ((int)((a2[3] & 0xFFFFFFF8) - v4) >> 3) + 1;
  v8 = v7 + v7 * ((int)((a2[4] & 0xFFFFFFF8) - v5) >> 3);
  v9 = *(_DWORD *)(a1 + 96);
  if (v9 / (v8 + v8 * ((int)((a2[5] & 0xFFFFFFF8) - v6) >> 3)) <= 1)
    v10 = 1;
  else
    v10 = v9 / (v8 + v8 * ((int)((a2[5] & 0xFFFFFFF8) - v6) >> 3));
  v12 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 112);
  if (v12 != v11)
    bzero(*(void **)(a1 + 104), (v11 - v12) & 0xFFFFFFFFFFFFFFFELL);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 48);
    do
    {
      v17 = *(unsigned __int16 *)(v16 + 12);
      if (v15 == v17 && *(_WORD *)(v13 + 32) != 0)
      {
        v19 = (((int)((*(_DWORD *)(v16 + 4) & 0xFFFFFFF8) - v5) >> 3) * v7
             + ((int)((*(_DWORD *)v16 & 0xFFFFFFF8) - v4) >> 3)
             + ((int)((*(_DWORD *)(v16 + 8) & 0xFFFFFFF8) - v6) >> 3) * v8)
            * v10;
        do
        {
          v20 = v19 % v9;
          v21 = *(unsigned __int16 *)(v12 + 2 * v20);
          v19 = v20 + 1;
        }
        while (v21 > 0x3F);
        *(_WORD *)(v12 + 2 * v20) = v21 + 1;
        *(_WORD *)(*(_QWORD *)(a1 + 128) + 2 * (v21 + ((_DWORD)v20 << 6))) = v17;
      }
      v16 += 16;
      ++v15;
      v13 += 68;
    }
    while (v13 != v14);
  }
  return kdebug_trace();
}

int *sub_223AEEDF4(int *result, int **a2)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  int *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  int i;
  int v16;
  int v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  char v23;
  __int16 v24;
  int *v25;
  int *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _WORD *v39;
  uint64_t v40;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (result[1] * *result != ((char *)a2[1] - (char *)*a2) >> 4)
  {
    result = (int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 605, (uint64_t)"voxels_and_indices.size() == size[0] * size[1]", 46, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_56;
    v4 = *a2;
    v5 = *v3;
  }
  v7 = *v4;
  v6 = v4[1];
  v8 = v4[2];
  v9 = v4 + 4;
  *((_WORD *)v4 + 6) = 0;
  if (v5 == 1)
  {
    v10 = v3[1] - 1;
    if (v3[1] != 1)
    {
      v11 = v4 + 3;
      v12 = 1;
      do
      {
        v13 = v12;
        if (v11[1] == *(v11 - 3))
        {
          v13 = v12;
          if (v11[2] == *(v11 - 2))
          {
            v13 = v12;
            if (v11[3] == *(v11 - 1))
              v13 = *(_WORD *)v11;
          }
        }
        *((_WORD *)v11 + 8) = v13;
        v11 += 4;
        ++v12;
        --v10;
      }
      while (v10);
      v9 = v11 + 1;
    }
    goto LABEL_53;
  }
  v14 = 0;
  for (i = 1; i != v5; ++i)
  {
    if (v7 != *v9 || v6 != v9[1] || v8 != v9[2])
    {
      v6 = v9[1];
      v8 = v9[2];
      v7 = *v9;
      v14 = i;
    }
    *((_WORD *)v9 + 6) = v14;
    v9 += 4;
  }
  v16 = v3[1];
  if (v16 != 1)
  {
    v17 = 1;
    v18 = v5;
    v19 = v9;
LABEL_22:
    v21 = *v19;
    v20 = v19[1];
    v22 = v19[2];
    if (*v19 == *v4 && v20 == v4[1] && v22 == v4[2])
    {
      v23 = 0;
      v24 = *((_WORD *)v4 + 6);
    }
    else
    {
      v23 = 1;
      v24 = v18;
    }
    result = 0;
    *((_WORD *)v19 + 6) = v24;
    v25 = v19 + 4;
    v26 = v4 + 4;
    ++v18;
    v27 = 1;
    v28 = (unint64_t)(v19 + 4);
    v9 = v19 + 4;
    v29 = (unint64_t)v19;
    while (1)
    {
      v30 = v4;
      v31 = v19;
      v19 = v9;
      v4 = v26;
      v32 = v31[4];
      if (v21 == v32 && v20 == v31[5] && v22 == v31[6])
      {
        if ((v23 & 1) == 0)
          goto LABEL_51;
        if (v21 != v30[4])
        {
LABEL_28:
          v23 = 1;
          goto LABEL_29;
        }
      }
      else
      {
        v20 = v19[1];
        v22 = v19[2];
        v21 = v31[4];
        v24 = v18;
        v29 = (unint64_t)v19;
        if (v32 != v30[4])
          goto LABEL_28;
      }
      if (v20 != v30[5] || v22 != v30[6])
        goto LABEL_28;
      v24 = *((_WORD *)v30 + 14);
      if (v29 >= (unint64_t)v19)
        goto LABEL_51;
      v33 = (unint64_t)&v25[4 * (_QWORD)result];
      v34 = v29 + 16;
      if (v33 <= v29 + 16)
        v33 = v29 + 16;
      v35 = ~v29;
      v36 = v33 + ~v29;
      if (v36 < 0x10)
        goto LABEL_50;
      v37 = (v36 >> 4) + 1;
      v38 = v29 + 16 * (v37 & 0x1FFFFFFFFFFFFFFELL);
      v39 = (_WORD *)(v29 + 28);
      if (v28 > v34)
        v34 = v28;
      v40 = (((v35 + v34) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v39 - 8) = v24;
        *v39 = v24;
        v39 += 16;
        v40 -= 2;
      }
      while (v40);
      if (v37 != (v37 & 0x1FFFFFFFFFFFFFFELL))
      {
        v29 = v38;
        do
        {
LABEL_50:
          *(_WORD *)(v29 + 12) = v24;
          v29 += 16;
        }
        while (v29 < (unint64_t)v19);
LABEL_51:
        v23 = 0;
        goto LABEL_29;
      }
      v23 = 0;
      v29 = v38;
LABEL_29:
      ++v27;
      v9 = v19 + 4;
      *((_WORD *)v31 + 14) = v24;
      v26 = v4 + 4;
      ++v18;
      result = (int *)((char *)result + 1);
      v28 += 16;
      if (v27 == v5)
      {
        ++v17;
        v19 += 4;
        v4 += 4;
        if (v17 != v16)
          goto LABEL_22;
        break;
      }
    }
  }
LABEL_53:
  if (v9 != a2[1])
  {
    result = (int *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/FrameVoxelCollector.cpp", 678, (uint64_t)"iter == voxels_and_indices.end()", 32, (uint64_t)&unk_2245A121A, 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
LABEL_56:
      abort();
  }
  return result;
}

void sub_223AEF164(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231EB6E4(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223AEF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEF26C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;

  v2 = *(uint64_t **)(a2 + 16);
  if (!v2)
    return 1;
  v3 = a1[1];
  if (v3)
  {
    v4 = v3 - 1;
    v5 = *a1;
    if ((v3 & (v3 - 1)) != 0)
    {
      LODWORD(result) = 1;
      do
      {
LABEL_28:
        v20 = *((unsigned __int16 *)v2 + 8);
        v21 = v20;
        if (v3 <= v20)
          v21 = v20 % v3;
        v22 = *(uint64_t **)(v5 + 8 * v21);
        if (v22)
        {
          while (1)
          {
            v22 = (uint64_t *)*v22;
            if (!v22)
              break;
            v23 = v22[1];
            if (v23 == v20)
            {
              if (*((unsigned __int16 *)v22 + 8) == (_DWORD)v20)
              {
                v24 = *((_DWORD *)v22 + 5);
                v25 = *((_DWORD *)v22 + 6);
                v26 = *((_DWORD *)v2 + 5);
                v27 = *((_DWORD *)v2 + 6);
                v28 = v25 >= v27;
                v29 = v25 - v27;
                v30 = v28;
                if (!v28)
                  v29 = 0;
                v15 = v24 >= v26;
                v31 = v24 - v26;
                if (v15)
                {
                  v32 = v30;
                }
                else
                {
                  v31 = 0;
                  v32 = 0;
                }
                result = v32 & result;
                *((_DWORD *)v22 + 5) = v31;
                *((_DWORD *)v22 + 6) = v29;
                v2 = (uint64_t *)*v2;
                if (v2)
                  goto LABEL_28;
                return result;
              }
            }
            else
            {
              if (v23 >= v3)
                v23 %= v3;
              if (v23 != v21)
                break;
            }
          }
        }
        result = (*((_DWORD *)v2 + 5) + *((_DWORD *)v2 + 6) == 0) & result;
        v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    else
    {
      v6 = v3 + 0xFFFF;
      LODWORD(result) = 1;
      do
      {
LABEL_6:
        v8 = *((unsigned __int16 *)v2 + 8);
        v9 = *(uint64_t **)(v5 + 8 * (v6 & v8));
        if (v9)
        {
          while (1)
          {
            v9 = (uint64_t *)*v9;
            if (!v9)
              break;
            v10 = v9[1];
            if (v10 == v8)
            {
              if (*((unsigned __int16 *)v9 + 8) == (_DWORD)v8)
              {
                v11 = *((_DWORD *)v9 + 5);
                v12 = *((_DWORD *)v9 + 6);
                v13 = *((_DWORD *)v2 + 5);
                v14 = *((_DWORD *)v2 + 6);
                v15 = v12 >= v14;
                v16 = v12 - v14;
                v17 = v15;
                if (!v15)
                  v16 = 0;
                v15 = v11 >= v13;
                v18 = v11 - v13;
                if (v15)
                {
                  v19 = v17;
                }
                else
                {
                  v18 = 0;
                  v19 = 0;
                }
                result = v19 & result;
                *((_DWORD *)v9 + 5) = v18;
                *((_DWORD *)v9 + 6) = v16;
                v2 = (uint64_t *)*v2;
                if (v2)
                  goto LABEL_6;
                return result;
              }
            }
            else if ((v10 & v4) != (v6 & v8))
            {
              break;
            }
          }
        }
        result = (*((_DWORD *)v2 + 5) + *((_DWORD *)v2 + 6) == 0) & result;
        v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
  }
  else
  {
    LOBYTE(result) = 1;
    do
    {
      result = (*((_DWORD *)v2 + 5) + *((_DWORD *)v2 + 6) == 0) & result;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_223AEF408(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  v13[4] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_34:
      *v13 = *v21;
LABEL_69:
      *v21 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_34;
    }
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_223AEF72C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_223AEF740(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == (uint64_t *)v7)
            {
              if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v7)
                return v11;
            }
            else if (((unint64_t)v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t **)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = (unint64_t)v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t **)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_WORD *)v15 + 8) = **a4;
  *(_QWORD *)((char *)v15 + 20) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t **)v15;
}

void sub_223AEFA34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223AEFA48(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  __int16 *v15;
  __int16 *v16;
  __int16 *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  _BYTE *v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  _BYTE *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  unint64_t i;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;
  float v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float v82;
  float v83;
  float v84;
  int32x4_t v85;
  uint64_t v86;
  uint64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  int32x4_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  unsigned __int8 v97;
  const char *v98;
  size_t v99;
  __int128 *v100;
  unint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  NSObject *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  size_t v111;
  NSObject *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  unint64_t v117;
  os_log_t v118;
  _DWORD *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  int v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int16 *__x;
  float64x2_t __xb;
  int __xa;
  __int16 *v167;
  long double v168;
  float64x2_t v169;
  float64x2_t v171;
  int32x4_t v173;
  _QWORD v174[3];
  int v175;
  const char *v176;
  int v177;
  const char *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  os_log_t v184;
  __int128 v185;
  __int128 v186;
  void *v187[2];
  unint64_t v188;
  char v189;
  uint64_t v190;

  v3 = a1;
  v190 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  v7 = *((float *)a2 + 1);
  v8 = *((_DWORD *)a2 + 2);
  sub_223E8A268(a1 + 184, 8u, 8u, v7);
  v9 = 0;
  *(_QWORD *)(v3 + 184) = &off_24EC5BDA0;
  *(_DWORD *)(v3 + 456) = v8;
  *(_DWORD *)(v3 + 460) = 16776960;
  v163 = v3 + 23076;
  v10 = (_DWORD *)(v3 + 466);
  *(_WORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 466) = -65408;
  v160 = v3 + 21792;
  v162 = v3 + 21416;
  v11 = v3 + 21088;
  v167 = (__int16 *)(v3 + 460);
  *(_DWORD *)(v3 + 480) = 16776960;
  *(_DWORD *)(v3 + 470) = 16776960;
  v12 = (__int16 *)(v3 + 470);
  *(_WORD *)(v3 + 474) = 0;
  v13 = (__int16 *)(v3 + 473);
  *(_DWORD *)(v3 + 476) = -65408;
  v14 = (__int16 *)(v3 + 480);
  v15 = (__int16 *)(v3 + 483);
  *(_WORD *)(v3 + 484) = 0;
  *(_DWORD *)(v3 + 486) = -65408;
  *(_DWORD *)(v3 + 490) = 16776960;
  v16 = (__int16 *)(v3 + 490);
  v17 = (__int16 *)(v3 + 493);
  *(_DWORD *)(v3 + 496) = -65408;
  *(_WORD *)(v3 + 494) = 0;
  do
  {
    v18 = v3 + v9;
    *(_QWORD *)(v3 + v9 + 500) = 0x80000000FFFF00;
    *(_WORD *)(v18 + 508) = -1;
    *(_QWORD *)(v3 + v9 + 510) = 0x80000000FFFF00;
    *(_WORD *)(v18 + 518) = -1;
    *(_QWORD *)(v18 + 520) = 0x80000000FFFF00;
    *(_WORD *)(v18 + 528) = -1;
    *(_QWORD *)(v3 + v9 + 530) = 0x80000000FFFF00;
    v9 += 40;
    *(_WORD *)(v18 + 538) = -1;
  }
  while (v9 != 20480);
  __x = (__int16 *)(v3 + 463);
  *(_QWORD *)(v3 + 21080) = 0;
  *(_OWORD *)(v3 + 21064) = 0u;
  *(_OWORD *)(v3 + 21048) = 0u;
  *(_OWORD *)(v3 + 21032) = 0u;
  *(_OWORD *)(v3 + 21016) = 0u;
  *(_OWORD *)(v3 + 21000) = 0u;
  *(_OWORD *)(v3 + 20984) = 0u;
  *(_DWORD *)v11 = 1065353216;
  *(_DWORD *)(v3 + 21096) = 0x80000000;
  v19 = SLODWORD(v7) <= -1 || ((LODWORD(v7) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F;
  *(_OWORD *)(v3 + 21104) = 0uLL;
  v20 = v19 && (LODWORD(v7) - 1) >= 0x7FFFFF;
  *(_OWORD *)(v3 + 21120) = 0uLL;
  *(_OWORD *)(v3 + 21136) = 0uLL;
  if (v20)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 49, (uint64_t)"math::IsFinite(voxel_size) && voxel_size > 0", 44, (uint64_t)"Invalid voxel size", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = *(_DWORD *)(v3 + 456);
  }
  if (v8)
  {
    v21 = v8;
    v22 = *(_BYTE **)(v3 + 20984);
    v156 = v3 + 21088;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 21000) - (_QWORD)v22) >> 12) < v21)
    {
      v23 = *(_BYTE **)(v3 + 20992);
      v157 = v21;
      v24 = (char *)operator new(20480 * v21);
      v21 = v157;
      v25 = &v24[v23 - v22];
      v26 = v25;
      if (v23 != v22)
      {
        v26 = &v24[v23 - v22];
        do
        {
          v27 = v26;
          v28 = v23;
          v26 -= 20480;
          v23 -= 20480;
          v29 = -20480;
          v30 = -20444;
          do
          {
            v31 = &v27[v29];
            v32 = *(_WORD *)&v28[v29];
            v31[2] = v28[v29 + 2];
            *(_WORD *)v31 = v32;
            v33 = *(_WORD *)&v28[v29 + 3];
            v31[5] = v28[v29 + 5];
            *(_WORD *)(v31 + 3) = v33;
            v34 = &v27[v30];
            *(_DWORD *)(v34 - 30) = *(_DWORD *)&v28[v30 - 30];
            v35 = *(_WORD *)&v28[v29 + 10];
            v31[12] = v28[v29 + 12];
            *((_WORD *)v31 + 5) = v35;
            v36 = *(_WORD *)&v28[v29 + 13];
            v31[15] = v28[v29 + 15];
            *(_WORD *)(v31 + 13) = v36;
            *((_DWORD *)v34 - 5) = *(_DWORD *)&v28[v30 - 20];
            v37 = *(_WORD *)&v28[v29 + 20];
            v31[22] = v28[v29 + 22];
            *((_WORD *)v31 + 10) = v37;
            v38 = *(_WORD *)&v28[v29 + 23];
            v31[25] = v28[v29 + 25];
            *(_WORD *)(v31 + 23) = v38;
            *(_DWORD *)(v34 - 10) = *(_DWORD *)&v28[v30 - 10];
            v39 = *(_WORD *)&v28[v29 + 30];
            v31[32] = v28[v29 + 32];
            *((_WORD *)v31 + 15) = v39;
            v40 = *(_WORD *)&v28[v29 + 33];
            v31[35] = v28[v29 + 35];
            *(_WORD *)(v31 + 33) = v40;
            *(_DWORD *)v34 = *(_DWORD *)&v28[v30];
            v30 += 40;
            v29 += 40;
          }
          while (v29);
        }
        while (v23 != v22);
      }
      *(_QWORD *)(v3 + 20984) = v26;
      *(_QWORD *)(v3 + 20992) = v25;
      *(_QWORD *)(v3 + 21000) = &v24[20480 * v157];
      v11 = v3 + 21088;
      if (v22)
      {
        operator delete(v22);
        v21 = *(unsigned int *)(v3 + 456);
      }
    }
    v41 = *(_BYTE **)(v3 + 21008);
    if (v21 > (uint64_t)(*(_QWORD *)(v3 + 21024) - (_QWORD)v41) >> 4)
    {
      v42 = *(_BYTE **)(v3 + 21016);
      v158 = v21;
      v43 = (char *)operator new(16 * v21);
      v21 = v158;
      v44 = &v43[(v42 - v41) & 0xFFFFFFFFFFFFFFF0];
      v45 = v44;
      if (v42 != v41)
      {
        v46 = &v43[(v42 - v41) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v45 = v46 - 16;
          *((_OWORD *)v46 - 1) = *((_OWORD *)v42 - 1);
          v42 -= 16;
          v46 -= 16;
        }
        while (v42 != v41);
      }
      *(_QWORD *)(v3 + 21008) = v45;
      *(_QWORD *)(v3 + 21016) = v44;
      *(_QWORD *)(v3 + 21024) = &v43[16 * v158];
      v11 = v3 + 21088;
      if (v41)
      {
        operator delete(v41);
        v21 = *(unsigned int *)(v3 + 456);
      }
    }
    v47 = *(_QWORD **)(v3 + 21104);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 21120) - (_QWORD)v47) >> 4) < v21)
    {
      v48 = *(_BYTE **)(v3 + 21112);
      v159 = v21;
      v49 = (char *)operator new(48 * v21);
      v50 = &v49[48 * v159];
      v51 = &v49[v48 - (_BYTE *)v47];
      if (v48 == (_BYTE *)v47)
      {
        *(_QWORD *)(v3 + 21104) = v51;
        *(_QWORD *)(v3 + 21112) = v51;
        *(_QWORD *)(v3 + 21120) = v50;
        v11 = v3 + 21088;
        if (!v47)
          goto LABEL_48;
        goto LABEL_47;
      }
      v52 = 0;
      do
      {
        v54 = &v51[v52];
        v55 = &v48[v52];
        v56 = *(_QWORD *)&v48[v52 - 48];
        *((_QWORD *)v55 - 6) = 0;
        *((_QWORD *)v54 - 6) = v56;
        v57 = *(_QWORD *)&v48[v52 - 40];
        *((_QWORD *)v54 - 5) = v57;
        *((_QWORD *)v55 - 5) = 0;
        v58 = *(_QWORD *)&v48[v52 - 32];
        *(_QWORD *)&v51[v52 - 32] = v58;
        v59 = (uint64_t)&v51[v52 - 32];
        v60 = *(_QWORD *)&v48[v52 - 24];
        *(_QWORD *)(v59 + 8) = v60;
        *(_DWORD *)(v59 + 16) = *(_DWORD *)&v48[v52 - 16];
        if (v60)
        {
          v53 = *(_QWORD *)(v58 + 8);
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v53 >= v57)
              v53 %= v57;
          }
          else
          {
            v53 &= v57 - 1;
          }
          *(_QWORD *)(v56 + 8 * v53) = v59;
          *(_QWORD *)&v48[v52 - 32] = 0;
          *(_QWORD *)&v48[v52 - 24] = 0;
        }
        *((_DWORD *)v54 - 2) = *((_DWORD *)v55 - 2);
        v52 -= 48;
      }
      while (&v48[v52] != (_BYTE *)v47);
      v47 = *(_QWORD **)(v3 + 21104);
      v61 = *(_QWORD **)(v3 + 21112);
      *(_QWORD *)(v3 + 21104) = &v51[v52];
      *(_QWORD *)(v3 + 21112) = v51;
      *(_QWORD *)(v3 + 21120) = v50;
      if (v61 != v47)
      {
        v154 = v3;
        do
        {
          v62 = (_QWORD *)*(v61 - 4);
          if (v62)
          {
            do
            {
              v63 = (_QWORD *)*v62;
              operator delete(v62);
              v62 = v63;
            }
            while (v63);
          }
          v65 = (void *)*(v61 - 6);
          v61 -= 6;
          v64 = v65;
          *v61 = 0;
          if (v65)
            operator delete(v64);
        }
        while (v61 != v47);
        v3 = v154;
      }
      v11 = v156;
      if (v47)
LABEL_47:
        operator delete(v47);
    }
  }
LABEL_48:
  v66 = 500;
  for (i = 513; i > 1; --i)
  {
    v68 = v3 + v66;
    v69 = *v167;
    *(_BYTE *)(v68 + 2) = *((_BYTE *)v167 + 2);
    *(_WORD *)v68 = v69;
    v70 = *__x;
    *(_BYTE *)(v68 + 5) = *((_BYTE *)__x + 2);
    *(_WORD *)(v68 + 3) = v70;
    *(_DWORD *)(v68 + 6) = *v10;
    v71 = *v12;
    *(_BYTE *)(v68 + 12) = *((_BYTE *)v12 + 2);
    *(_WORD *)(v68 + 10) = v71;
    v72 = *v13;
    *(_BYTE *)(v68 + 15) = *((_BYTE *)v13 + 2);
    *(_WORD *)(v68 + 13) = v72;
    *(_DWORD *)(v68 + 16) = *(_DWORD *)(v3 + 476);
    v73 = *v14;
    *(_BYTE *)(v68 + 22) = *((_BYTE *)v14 + 2);
    *(_WORD *)(v68 + 20) = v73;
    v74 = *v15;
    *(_BYTE *)(v68 + 25) = *((_BYTE *)v15 + 2);
    *(_WORD *)(v68 + 23) = v74;
    *(_DWORD *)(v68 + 26) = v10[5];
    v75 = *v16;
    *(_BYTE *)(v68 + 32) = *((_BYTE *)v16 + 2);
    *(_WORD *)(v68 + 30) = v75;
    v76 = *v17;
    *(_BYTE *)(v68 + 35) = *((_BYTE *)v17 + 2);
    *(_WORD *)(v68 + 33) = v76;
    *(_DWORD *)(v68 + 36) = *(_DWORD *)(v3 + 496);
    v66 += 40;
  }
  sub_223AECC48(v3 + 21152, *(_DWORD *)(v3 + 20), *(float *)(v3 + 312));
  v77 = 0;
  *(_OWORD *)(v3 + 21304) = 0u;
  *(_OWORD *)(v3 + 21320) = 0u;
  *(_DWORD *)(v11 + 248) = 1065353216;
  *(_BYTE *)(v11 + 256) = 0;
  *(_DWORD *)(v11 + 260) = 5;
  *(_OWORD *)(v3 + 21352) = 0u;
  *(_OWORD *)(v3 + 21368) = 0u;
  *(_DWORD *)(v11 + 296) = 1065353216;
  *(_QWORD *)(v3 + 21392) = 0;
  *(_QWORD *)(v3 + 21408) = 0;
  *(_QWORD *)(v3 + 21400) = 0;
  v78 = *(float *)(v3 + 312);
  *(float *)v162 = v78;
  *(_QWORD *)(v3 + 21440) = 0;
  *(_QWORD *)(v3 + 21432) = 0;
  *(_QWORD *)(v3 + 21424) = v3 + 21432;
  *(_OWORD *)(v3 + 21496) = 0u;
  *(_OWORD *)(v3 + 21512) = 0u;
  *(_OWORD *)(v3 + 21464) = 0u;
  *(_OWORD *)(v3 + 21480) = 0u;
  *(_OWORD *)(v3 + 21448) = 0u;
  v79 = a3[3];
  v81 = *a3;
  v80 = a3[1];
  *(_OWORD *)(v3 + 21560) = a3[2];
  *(_OWORD *)(v3 + 21576) = v79;
  *(_OWORD *)(v3 + 21528) = v81;
  *(_OWORD *)(v3 + 21544) = v80;
  *(_OWORD *)(v3 + 21592) = 0u;
  *(_OWORD *)(v3 + 21608) = 0u;
  *(_DWORD *)(v162 + 208) = 1065353216;
  *(_QWORD *)(v3 + 21632) = 0;
  v82 = *((float *)a2 + 4);
  v83 = 10.0;
  if (v82 <= 10.0)
    v83 = *((float *)a2 + 4);
  if (v82 >= 3.0)
    v84 = v83;
  else
    v84 = 3.0;
  *(float *)(v162 + 224) = v84;
  *(_QWORD *)(v3 + 21696) = 0;
  *(_OWORD *)(v3 + 21680) = 0uLL;
  *(_OWORD *)(v3 + 21664) = 0uLL;
  *(_OWORD *)(v3 + 21648) = 0uLL;
  *(_DWORD *)(v162 + 288) = 1065353216;
  *(_OWORD *)(v3 + 21728) = 0uLL;
  *(_OWORD *)(v3 + 21712) = 0uLL;
  *(_DWORD *)(v162 + 328) = 1065353216;
  *(_OWORD *)(v3 + 21768) = 0uLL;
  *(_OWORD *)(v3 + 21752) = 0uLL;
  *(_DWORD *)(v162 + 368) = 1065353216;
  *(_DWORD *)v160 = 0;
  v85 = (int32x4_t)xmmword_224660CA0;
  v86 = v163;
  do
  {
    v173 = v85;
    v87.i64[0] = v85.u32[0];
    v87.i64[1] = v85.u32[1];
    v171 = vcvtq_f64_u64(v87);
    v87.i64[0] = v85.u32[2];
    v87.i64[1] = v85.u32[3];
    __xb = vcvtq_f64_u64(v87);
    v168 = log(__xb.f64[1]);
    v88.f64[0] = log(__xb.f64[0]);
    v88.f64[1] = v168;
    v169 = v88;
    __xb.f64[0] = log(v171.f64[1]);
    v89.f64[0] = log(v171.f64[0]);
    v89.f64[1] = __xb.f64[0];
    *(float32x4_t *)(v3 + 21796 + v77) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), v169);
    v90.i64[0] = 0x400000004;
    v90.i64[1] = 0x400000004;
    v85 = vaddq_s32(v173, v90);
    v77 += 16;
  }
  while (v77 != 1008);
  *(_QWORD *)(v160 + 1012) = 0x40B131D840B11187;
  *(_DWORD *)(v160 + 1020) = 1085362696;
  *(float *)(v160 + 1024) = logf(v78);
  *(_QWORD *)(v160 + 1028) = 0;
  *(_BYTE *)(v160 + 1048) = 0;
  *(_QWORD *)(v3 + 22832) = off_24EC5FCD8;
  *(_OWORD *)(v3 + 22848) = 0u;
  *(_OWORD *)(v3 + 22864) = 0u;
  *(_DWORD *)(v160 + 1088) = 1065353216;
  *(_QWORD *)(v3 + 22888) = 0;
  *(_QWORD *)(v3 + 22904) = 0;
  *(_QWORD *)(v3 + 22896) = 0;
  *(_QWORD *)(v3 + 23032) = 0;
  *(_OWORD *)(v3 + 22968) = 0u;
  *(_OWORD *)(v3 + 22984) = 0u;
  *(_OWORD *)(v3 + 23000) = 0u;
  *(_OWORD *)(v3 + 23016) = 0u;
  *(_QWORD *)(v3 + 22952) = 0;
  *(_QWORD *)(v3 + 22944) = 0;
  *(_DWORD *)(v3 + 22960) = 0;
  *(_OWORD *)(v3 + 23040) = xmmword_224656660;
  *(_OWORD *)(v3 + 23056) = xmmword_224660CB0;
  *(_DWORD *)(v160 + 1280) = 5;
  *(_QWORD *)(v3 + 23096) = 0;
  *(_DWORD *)(v3 + 23104) = 0;
  *(_QWORD *)(v3 + 23088) = 0;
  *(_QWORD *)(v3 + 23080) = 0;
  *(_DWORD *)v163 = 1065353216;
  *(_DWORD *)(v163 + 16) = 1065353216;
  *(_DWORD *)(v163 + 32) = 1065353216;
  *(_OWORD *)(v3 + 23112) = 0u;
  *(_OWORD *)(v3 + 23128) = 0u;
  *(_OWORD *)(v3 + 23144) = 0u;
  *(_OWORD *)(v3 + 23160) = 0u;
  *(_OWORD *)(v3 + 23176) = 0u;
  *(_OWORD *)(v3 + 23192) = 0u;
  *(_OWORD *)(v3 + 23208) = 0u;
  *(_OWORD *)(v3 + 23224) = 0u;
  *(_OWORD *)(v3 + 23240) = 0u;
  *(_OWORD *)(v163 + 180) = xmmword_224656660;
  *(_OWORD *)(v163 + 196) = xmmword_224660CB0;
  *(_QWORD *)(v163 + 212) = 0x3F80000000000005;
  *(_QWORD *)(v3 + 23312) = 0;
  *(_DWORD *)(v3 + 23320) = 0;
  *(_QWORD *)(v3 + 23304) = 0;
  *(_QWORD *)(v3 + 23296) = 0;
  *(_DWORD *)(v163 + 232) = 1065353216;
  *(_DWORD *)(v163 + 248) = 1065353216;
  *(_OWORD *)(v3 + 23328) = 0u;
  *(_OWORD *)(v3 + 23344) = 0u;
  *(_OWORD *)(v3 + 23360) = 0u;
  *(_OWORD *)(v3 + 23376) = 0u;
  *(_OWORD *)(v3 + 23392) = 0u;
  *(_DWORD *)(v163 + 332) = 1065353216;
  *(_DWORD *)(v163 + 340) = 0;
  *(_QWORD *)(v163 + 344) = 0;
  *(_BYTE *)(v163 + 353) = 0;
  *(_BYTE *)(v163 + 356) = 0;
  *(_QWORD *)(v3 + 23440) = 0;
  qmemcpy((void *)(v3 + 22920), "ObservationMapping.Res", 22);
  *(_WORD *)(v160 + 1150) = 5632;
  sub_223AF0EC4(&v181);
  if (**(int **)(v181 + 56) > 3
    || (v91 = *(unsigned __int8 *)(v181 + 72),
        v92 = sub_22322F254(v181, "OSLogSurrogateAppender", 1, 0),
        v93 = v92,
        !v91)
    && !v92)
  {
LABEL_146:
    *(_BYTE *)(v86 + 352) = 2;
    v150 = *(float *)(v3 + 56);
    if (v150 <= 0.0)
      return v3;
    goto LABEL_147;
  }
  v174[0] = &v181;
  v174[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v174[2] = std::chrono::system_clock::now().__d_.__rep_;
  v175 = 3;
  v176 = "unknown file";
  v177 = 221;
  v179 = 0;
  v180 = 0;
  v178 = "unknown function";
  v94 = v181;
  v95 = (const char *)(v181 + 16);
  v161 = v181 + 16;
  if (*(char *)(v181 + 39) < 0)
  {
    v95 = *(const char **)(v181 + 16);
    v96 = *(_QWORD *)(v181 + 24);
  }
  else
  {
    v96 = *(unsigned __int8 *)(v181 + 39);
  }
  __xa = v91;
  v155 = v3;
  v97 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v184);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v184, &xmmword_255788F40);
    if ((_BYTE)v186 && SHIBYTE(v185) < 0)
      operator delete(v184);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v98 = (const char *)&xmmword_255788F40;
  else
    v98 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v99 = byte_255788F57;
  else
    v99 = *((_QWORD *)&xmmword_255788F40 + 1);
  v184 = os_log_create(v98, v95);
  v100 = &v185;
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v99 >= 0x17)
  {
    v101 = v93;
    v102 = v94;
    v103 = v95;
    v104 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v104 = v99 | 7;
    v105 = v104 + 1;
    v100 = (__int128 *)operator new(v104 + 1);
    *((_QWORD *)&v185 + 1) = v99;
    *(_QWORD *)&v186 = v105 | 0x8000000000000000;
    *(_QWORD *)&v185 = v100;
    v95 = v103;
    v94 = v102;
    v93 = v101;
    goto LABEL_79;
  }
  BYTE7(v186) = v99;
  if (v99)
LABEL_79:
    memmove(v100, v98, v99);
  *((_BYTE *)v100 + v99) = 0;
  BYTE8(v186) = 1;
  v106 = v187;
  if (v96 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v96 >= 0x17)
  {
    v108 = v95;
    v109 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17)
      v109 = v96 | 7;
    v110 = v109 + 1;
    v106 = (void **)operator new(v109 + 1);
    v187[1] = (void *)v96;
    v188 = v110 | 0x8000000000000000;
    v187[0] = v106;
    v95 = v108;
  }
  else
  {
    HIBYTE(v188) = v96;
    if (!v96)
    {
      LOBYTE(v187[0]) = 0;
      v189 = 1;
      v107 = v184;
      if ((SHIBYTE(v188) & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_90;
    }
  }
  memmove(v106, v95, v96);
  *((_BYTE *)v106 + v96) = 0;
  v189 = 1;
  v107 = v184;
  if ((SHIBYTE(v188) & 0x80000000) == 0)
  {
LABEL_84:
    v3 = v155;
    if (!BYTE8(v186))
      goto LABEL_93;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v187[0]);
  v3 = v155;
  if (!BYTE8(v186))
    goto LABEL_93;
LABEL_91:
  if (SBYTE7(v186) < 0)
    operator delete((void *)v185);
LABEL_93:
  if (v184)
    os_release(v184);
  if (v93 && *(_QWORD *)(v93 + 24))
  {
    v111 = _os_log_pack_size();
    v112 = operator new(v111, (std::align_val_t)8uLL);
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v113;
    v113->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
    v184 = v112;
    *(_QWORD *)&v185 = v112;
    *((_QWORD *)&v185 + 1) = v113;
    do
      v116 = __ldxr(p_shared_owners);
    while (__stxr(v116 + 1, p_shared_owners));
    v186 = 0uLL;
    v187[0] = 0;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v114);
    }
    v118 = v184;
    v119 = (_DWORD *)_os_log_pack_fill();
    v120 = *(_DWORD *)(v155 + 40);
    *v119 = 67109120;
    v119[1] = v120;
    v121 = operator new();
    v122 = *(unsigned __int8 *)(v94 + 39);
    v123 = v161;
    if ((v122 & 0x80u) != 0)
    {
      v123 = *(_QWORD *)(v94 + 16);
      v122 = *(_QWORD *)(v94 + 24);
    }
    *(_QWORD *)v121 = v118;
    *(_OWORD *)(v121 + 8) = v185;
    v185 = 0uLL;
    *(_OWORD *)(v121 + 24) = v186;
    v186 = 0uLL;
    *(_QWORD *)(v121 + 40) = v123;
    *(_QWORD *)(v121 + 48) = v122;
    *(_BYTE *)(v121 + 56) = 1;
    v182 = 0;
    v183 = v121;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v93 + 24) + 40))(*(_QWORD *)(v93 + 24), &v183);
    v124 = v183;
    v183 = 0;
    v86 = v163;
    v125 = __xa;
    if (v124)
    {
      v126 = *(std::__shared_weak_count **)(v124 + 32);
      if (v126)
      {
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v129 = *(std::__shared_weak_count **)(v124 + 16);
      if (v129)
      {
        v130 = (unint64_t *)&v129->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      MEMORY[0x227684CE8](v124, 0x10F0C40B62ED6C6);
      v132 = v182;
      v182 = 0;
      if (v132)
      {
        v133 = *(std::__shared_weak_count **)(v132 + 32);
        if (v133)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v136 = *(std::__shared_weak_count **)(v132 + 16);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        MEMORY[0x227684CE8](v132, 0x10F0C40B62ED6C6);
      }
    }
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
    v3 = v155;
    if (*((_QWORD *)&v186 + 1))
    {
      v140 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v142 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
    if (*((_QWORD *)&v185 + 1))
    {
      v143 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
  }
  else
  {
    os_log_type_enabled(v107, OS_LOG_TYPE_INFO);
    v145 = *(_DWORD *)(v3 + 40);
    LODWORD(v184) = 67109120;
    HIDWORD(v184) = v145;
    v146 = (void *)_os_log_send_and_compose_impl();
    v86 = v163;
    v125 = __xa;
    if (v146)
      free(v146);
  }
  if (v125)
  {
    sub_22322C138((uint64_t)v174, "Room boundary simplification level %d", *(_DWORD *)(v3 + 40));
    sub_223182C08((uint64_t)v174);
  }
  sub_223182C08((uint64_t)v174);
  v147 = v180;
  if (!v180)
    goto LABEL_146;
  v148 = (unint64_t *)&v180->__shared_owners_;
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 - 1, v148));
  if (v149)
    goto LABEL_146;
  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
  std::__shared_weak_count::__release_weak(v147);
  *(_BYTE *)(v86 + 352) = 2;
  v150 = *(float *)(v3 + 56);
  if (v150 <= 0.0)
    return v3;
LABEL_147:
  v151 = operator new();
  *(_QWORD *)v151 = &off_24EC62D60;
  *(_QWORD *)(v151 + 8) = 0;
  *(_QWORD *)(v151 + 16) = 0;
  *(_QWORD *)(v151 + 24) = 0;
  *(_DWORD *)(v151 + 32) = 5;
  *(float *)(v151 + 36) = v150;
  *(_BYTE *)(v151 + 40) = 1;
  *(_QWORD *)(v151 + 48) = &off_24EC5FA58;
  *(_QWORD *)(v151 + 72) = v151 + 48;
  *(_QWORD *)(v151 + 56) = sub_223B242D8;
  *(_QWORD *)(v151 + 80) = &off_24EC5FB08;
  *(_QWORD *)(v151 + 104) = v151 + 80;
  *(_QWORD *)(v151 + 88) = sub_223C933E0;
  *(_OWORD *)(v151 + 112) = 0u;
  *(_OWORD *)(v151 + 128) = 0u;
  v152 = *(_QWORD *)(v3 + 21520);
  *(_QWORD *)(v3 + 21520) = v151;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  return v3;
}

void sub_223AF0C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void **a13, uint64_t a14, _QWORD *a15, uint64_t a16, _QWORD **a17, uint64_t a18, _QWORD **a19, void **a20,uint64_t a21,void **a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  void *v40;

  if (*(_BYTE *)(v36 - 168) && *(char *)(v36 - 169) < 0)
    operator delete(*(void **)(v36 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a35);
  sub_223919D14(a12 + 2930);
  sub_22388925C(v35);
  sub_22388ABEC(a11);
  sub_22388ACBC(a13);
  sub_22322E828(a14);
  v38 = a12[2690];
  a12[2690] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_223AF0FB8(a22);
  v39 = (void *)a12[2684];
  if (v39)
  {
    a12[2685] = v39;
    operator delete(v39);
  }
  sub_223AF1010(a25);
  sub_223AF104C(a23);
  sub_223AF10D0(a31);
  sub_223530D14(a33);
  sub_223AF1150(a29);
  sub_22388B1A4(a15);
  sub_223198030(a16, *a17);
  sub_223198030(a18, *a19);
  v40 = *a20;
  if (*a20)
  {
    a12[14] = v40;
    operator delete(v40);
  }
  sub_223AF11C0(a21);
  _Unwind_Resume(a1);
}

void sub_223AF0EC4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCDC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDC8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCDC0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCDC8);
  }
  *a1 = qword_2540CCDC0;
}

void sub_223AF0F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCDC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCDC8);
  _Unwind_Resume(a1);
}

void **sub_223AF0FB8(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_22388AEE8(v3 - 46);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223AF1010(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  sub_223198030(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

_QWORD *sub_223AF104C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223AF10D0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[26];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[24];
      v2[24] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_223AF1150(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_223AF11C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_22316F8F4(v2 + 28);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_223AF121C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t j;
  _QWORD *v18;
  _QWORD *k;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t m;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t n;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t ii;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t jj;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  std::mutex *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v51;
  std::string::size_type v52;
  int v53;
  int v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  void **v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  unint64_t v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  const char *v75;
  size_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  size_t v87;
  size_t v88;
  _QWORD *v89;
  void *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  const char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t result;
  uint64_t v147;
  const char *v148;
  int v149;
  std::string __p;
  int v151;
  const char *v152;
  int v153;
  const char *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void *__dst[2];
  int64_t v158;
  uint64_t v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  char *v162;
  std::__shared_weak_count *v163;
  _QWORD *v164;
  __int128 v165;
  uint64_t v166[2];
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  const void *v170;
  uint64_t v171;
  const void *v172;
  unint64_t v173;
  void *v174;
  char v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  _BYTE v179[40];
  void *v180[2];
  unint64_t v181;
  char v182;
  _QWORD v183[5];

  v183[2] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 144);
  sub_223198030(a1 + 136, *(_QWORD **)(a1 + 144));
  v3 = *(_QWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 136) = v2;
  *v2 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_223198030(a1 + 160, v3);
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if (*(_QWORD *)(a1 + 21328))
  {
    v4 = *(_QWORD **)(a1 + 21320);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        sub_22316F8F4(v4 + 4);
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 21320) = 0;
    v6 = *(_QWORD *)(a1 + 21312);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 21304) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 21328) = 0;
  }
  *(_QWORD *)(a1 + 360) = 0x80000000;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD **)(a1 + 21112);
  v9 = *(_QWORD **)(a1 + 21104);
  while (v8 != v9)
  {
    v10 = (_QWORD *)*(v8 - 4);
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    v13 = (void *)*(v8 - 6);
    v8 -= 6;
    v12 = v13;
    *v8 = 0;
    if (v13)
      operator delete(v12);
  }
  *(_QWORD *)(a1 + 21112) = v9;
  *(_QWORD *)(a1 + 20992) = *(_QWORD *)(a1 + 20984);
  *(_QWORD *)(a1 + 21016) = *(_QWORD *)(a1 + 21008);
  *(_QWORD *)(a1 + 21040) = *(_QWORD *)(a1 + 21032);
  *(_QWORD *)(a1 + 21136) = *(_QWORD *)(a1 + 21128);
  if (*(_QWORD *)(a1 + 88))
  {
    v14 = *(_QWORD **)(a1 + 80);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        sub_22316F8F4(v14 + 28);
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *(_QWORD *)(a1 + 80) = 0;
    v16 = *(_QWORD *)(a1 + 72);
    if (v16)
    {
      for (j = 0; j != v16; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(a1 + 21344) = 0;
  sub_223198030(a1 + 21424, *(_QWORD **)(a1 + 21432));
  *(_QWORD *)(a1 + 21424) = a1 + 21432;
  *(_QWORD *)(a1 + 21440) = 0;
  *(_QWORD *)(a1 + 21432) = 0;
  *(_QWORD *)(a1 + 21456) = *(_QWORD *)(a1 + 21448);
  *(_QWORD *)(a1 + 21480) = *(_QWORD *)(a1 + 21472);
  v18 = *(_QWORD **)(a1 + 21504);
  for (k = *(_QWORD **)(a1 + 21496); v18 != k; v18 = sub_22388AEE8(v18 - 46))
    ;
  *(_QWORD *)(a1 + 21504) = k;
  v20 = *(_QWORD **)(a1 + 21400);
  v21 = *(_QWORD **)(a1 + 21392);
  while (v20 != v21)
  {
    v22 = (_QWORD *)*(v20 - 3);
    if (v22)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        operator delete(v22);
        v22 = v23;
      }
      while (v23);
    }
    v25 = (void *)*(v20 - 5);
    v20 -= 5;
    v24 = v25;
    *v20 = 0;
    if (v25)
      operator delete(v24);
  }
  *(_QWORD *)(a1 + 21400) = v21;
  if (*(_QWORD *)(a1 + 21376))
  {
    v26 = *(_QWORD **)(a1 + 21368);
    if (v26)
    {
      do
      {
        v61 = (_QWORD *)*v26;
        v62 = (_QWORD *)v26[26];
        if (v62)
        {
          do
          {
            v63 = (_QWORD *)*v62;
            operator delete(v62);
            v62 = v63;
          }
          while (v63);
        }
        v64 = (void *)v26[24];
        v26[24] = 0;
        if (v64)
          operator delete(v64);
        operator delete(v26);
        v26 = v61;
      }
      while (v61);
    }
    *(_QWORD *)(a1 + 21368) = 0;
    v27 = *(_QWORD *)(a1 + 21360);
    if (v27)
    {
      for (m = 0; m != v27; ++m)
        *(_QWORD *)(*(_QWORD *)(a1 + 21352) + 8 * m) = 0;
    }
    *(_QWORD *)(a1 + 21376) = 0;
  }
  if (*(_QWORD *)(a1 + 21616))
  {
    v29 = *(_QWORD **)(a1 + 21608);
    if (v29)
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while (v30);
    }
    *(_QWORD *)(a1 + 21608) = 0;
    v31 = *(_QWORD *)(a1 + 21600);
    if (v31)
    {
      for (n = 0; n != v31; ++n)
        *(_QWORD *)(*(_QWORD *)(a1 + 21592) + 8 * n) = 0;
    }
    *(_QWORD *)(a1 + 21616) = 0;
  }
  *(_QWORD *)(a1 + 21632) = 0;
  *(_QWORD *)(a1 + 22820) = 0;
  if (*(_QWORD *)(a1 + 22872))
  {
    v33 = *(_QWORD **)(a1 + 22864);
    if (v33)
    {
      do
      {
        v34 = (_QWORD *)*v33;
        operator delete(v33);
        v33 = v34;
      }
      while (v34);
    }
    *(_QWORD *)(a1 + 22864) = 0;
    v35 = *(_QWORD *)(a1 + 22856);
    if (v35)
    {
      for (ii = 0; ii != v35; ++ii)
        *(_QWORD *)(*(_QWORD *)(a1 + 22848) + 8 * ii) = 0;
    }
    *(_QWORD *)(a1 + 22872) = 0;
  }
  *(_BYTE *)(a1 + 22840) = 0;
  sub_2238891A0((uint64_t *)(a1 + 22888));
  *(_DWORD *)(a1 + 22912) = 0;
  *(_DWORD *)(a1 + 22960) = 0;
  if (*(_QWORD *)(a1 + 23400))
  {
    v37 = *(_QWORD **)(a1 + 23392);
    if (v37)
    {
      do
      {
        v38 = (_QWORD *)*v37;
        operator delete(v37);
        v37 = v38;
      }
      while (v38);
    }
    *(_QWORD *)(a1 + 23392) = 0;
    v39 = *(_QWORD *)(a1 + 23384);
    if (v39)
    {
      for (jj = 0; jj != v39; ++jj)
        *(_QWORD *)(*(_QWORD *)(a1 + 23376) + 8 * jj) = 0;
    }
    *(_QWORD *)(a1 + 23400) = 0;
  }
  *(_BYTE *)(a1 + 23428) = 2;
  *(_BYTE *)(a1 + 23432) = 0;
  v166[0] = (uint64_t)"cv3d.recon.";
  v166[1] = 11;
  v167 = "ObservationMapping.Res.Mesh";
  v168 = 27;
  sub_2231A9820((uint64_t)v166, (uint64_t)&v169, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v41 = sub_2241471F8();
    v42 = v41[2];
    if (!v42)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v42 = v41[2];
    }
    v43 = *(_QWORD *)(v42 + 64);
    v44 = (std::mutex *)(v43 + 32);
    std::mutex::lock((std::mutex *)(v43 + 32));
    v46 = *(_QWORD *)(v43 + 96);
    v45 = *(_QWORD *)(v43 + 104);
    std::mutex::unlock(v44);
    if (v46 != v45)
    {
      sub_2241471F8();
      v47 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
      {
        memset(v179, 0, 32);
        *(_DWORD *)&v179[32] = 728325608;
        kdebug_trace();
        sub_2241498F4((uint64_t)v166, 0);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
        {
          *(_QWORD *)&v160 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v160 + 1) = 2;
          v48 = sub_2241471F8();
          sub_2238BB49C((uint64_t)v48, v47, (uint64_t)v166, (uint64_t)&unk_2245C9EFE, &v160);
        }
        sub_22316F8F4(v166);
        kdebug_trace();
      }
    }
  }
  memset(v179, 0, 32);
  *(_DWORD *)&v179[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v51 = p_p->__r_.__value_.__r.__words[0];
    v52 = p_p->__r_.__value_.__l.__size_;
    v53 = p_p->__r_.__value_.__s.__data_[16];
    if (v51 == 0x6365722E64337663 && v52 == 0x73746174532E6E6FLL && v53 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)v166, 0);
      sub_22316F8F4(v166);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_223AF24D8(&v159);
  if (**(int **)(v159 + 56) <= 3)
  {
    v56 = *(unsigned __int8 *)(v159 + 72);
    v57 = sub_22322F254(v159, "OSLogSurrogateAppender", 1, 0);
    v58 = v57;
    if (v56 || v57)
    {
      sub_223195210((uint64_t)v166);
      sub_2231813E8(&v167, (uint64_t)"KFOS: reset", 11);
      v149 = v56;
      if ((v177 & 0x10) != 0)
      {
        v65 = v176;
        if (v176 < v173)
        {
          v176 = v173;
          v65 = v173;
        }
        v66 = v172;
        v59 = v65 - (_QWORD)v172;
        if (v65 - (unint64_t)v172 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_147;
      }
      else
      {
        if ((v177 & 8) == 0)
        {
          v59 = 0;
          HIBYTE(v158) = 0;
          v60 = __dst;
          goto LABEL_102;
        }
        v66 = v170;
        v59 = v171 - (_QWORD)v170;
        if ((unint64_t)(v171 - (_QWORD)v170) > 0x7FFFFFFFFFFFFFF7)
LABEL_147:
          sub_22316DBC0();
      }
      if (v59 >= 0x17)
      {
        v67 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v59 | 7) != 0x17)
          v67 = v59 | 7;
        v68 = v67 + 1;
        v60 = (void **)operator new(v67 + 1);
        __dst[1] = (void *)v59;
        v158 = v68 | 0x8000000000000000;
        __dst[0] = v60;
      }
      else
      {
        HIBYTE(v158) = v59;
        v60 = __dst;
        if (!v59)
        {
LABEL_102:
          *((_BYTE *)v60 + v59) = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v151 = 3;
          v152 = "unknown file";
          v153 = 255;
          v155 = 0;
          v156 = 0;
          v154 = "unknown function";
          if (v158 >= 0)
            v69 = (const char *)__dst;
          else
            v69 = (const char *)__dst[0];
          v70 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v71 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v147 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v148 = v71;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v71 = *(const char **)(v70 + 16);
            v72 = *(_QWORD *)(v70 + 24);
            v74 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v74 & 1) != 0)
              goto LABEL_109;
          }
          else
          {
            v72 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v73 & 1) != 0)
              goto LABEL_109;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v179);
            sub_223199C58("com.apple.cv3d", (unint64_t)v179, &xmmword_255788F40);
            if (v179[24] && (v179[23] & 0x80000000) != 0)
              operator delete(*(void **)v179);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_109:
          if (byte_255788F57 >= 0)
            v75 = (const char *)&xmmword_255788F40;
          else
            v75 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v76 = byte_255788F57;
          else
            v76 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)v179 = os_log_create(v75, v71);
          v77 = &v179[8];
          if (v76 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v76 >= 0x17)
          {
            v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v76 | 7) != 0x17)
              v78 = v76 | 7;
            v79 = v78 + 1;
            v77 = operator new(v78 + 1);
            *(_QWORD *)&v179[16] = v76;
            *(_QWORD *)&v179[24] = v79 | 0x8000000000000000;
            *(_QWORD *)&v179[8] = v77;
          }
          else
          {
            v179[31] = v76;
            if (!v76)
            {
LABEL_123:
              v77[v76] = 0;
              v179[32] = 1;
              v80 = v180;
              if (v72 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v72 >= 0x17)
              {
                v82 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v72 | 7) != 0x17)
                  v82 = v72 | 7;
                v83 = v82 + 1;
                v80 = (void **)operator new(v82 + 1);
                v180[1] = (void *)v72;
                v181 = v83 | 0x8000000000000000;
                v180[0] = v80;
              }
              else
              {
                HIBYTE(v181) = v72;
                if (!v72)
                {
                  LOBYTE(v180[0]) = 0;
                  v182 = 1;
                  v81 = *(NSObject **)v179;
                  if ((SHIBYTE(v181) & 0x80000000) == 0)
                    goto LABEL_127;
                  goto LABEL_133;
                }
              }
              memmove(v80, v71, v72);
              *((_BYTE *)v80 + v72) = 0;
              v182 = 1;
              v81 = *(NSObject **)v179;
              if ((SHIBYTE(v181) & 0x80000000) == 0)
              {
LABEL_127:
                if (!v179[32])
                  goto LABEL_136;
                goto LABEL_134;
              }
LABEL_133:
              operator delete(v180[0]);
              if (!v179[32])
                goto LABEL_136;
LABEL_134:
              if ((v179[31] & 0x80000000) != 0)
                operator delete(*(void **)&v179[8]);
LABEL_136:
              if (*(_QWORD *)v179)
                os_release(*(void **)v179);
              if (!v58 || !*(_QWORD *)(v58 + 24))
              {
                os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
                *(_DWORD *)v179 = 136315138;
                *(_QWORD *)&v179[4] = v69;
                v90 = (void *)_os_log_send_and_compose_impl();
                v91 = v149;
                if (v90)
                  free(v90);
                goto LABEL_211;
              }
              v84 = _os_log_pack_size();
              v85 = (std::__shared_weak_count_vtbl *)operator new(v84, (std::align_val_t)8uLL);
              v86 = (std::__shared_weak_count *)operator new();
              v86->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v86->__shared_owners_ = 0;
              v86->__shared_weak_owners_ = 0;
              v86[1].__vftable = v85;
              *(_QWORD *)&v160 = v85;
              *((_QWORD *)&v160 + 1) = v85;
              v162 = 0;
              v163 = 0;
              v161 = v86;
              v87 = strlen(v69);
              if (v87 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v88 = v87;
              if (v87 >= 0x17)
              {
                v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v87 | 7) != 0x17)
                  v92 = v87 | 7;
                v93 = v92 + 1;
                v89 = operator new(v92 + 1);
                *(_QWORD *)&v165 = v88;
                *((_QWORD *)&v165 + 1) = v93 | 0x8000000000000000;
                v164 = v89;
              }
              else
              {
                HIBYTE(v165) = v87;
                v89 = &v164;
                if (!v87)
                {
LABEL_152:
                  *((_BYTE *)v89 + v88) = 0;
                  v94 = v164;
                  v183[0] = v165;
                  *(_QWORD *)((char *)v183 + 7) = *(_QWORD *)((char *)&v165 + 7);
                  v95 = HIBYTE(v165);
                  v96 = operator new(0x38uLL);
                  v96[1] = 0;
                  v96[2] = 0;
                  v96[3] = off_24EC1FA48;
                  *v96 = &off_24EC1F9F8;
                  v97 = v183[0];
                  v96[4] = v94;
                  v96[5] = v97;
                  *(_QWORD *)((char *)v96 + 47) = *(_QWORD *)((char *)v183 + 7);
                  *((_BYTE *)v96 + 55) = v95;
                  v183[0] = 0;
                  *(_QWORD *)((char *)v183 + 7) = 0;
                  v98 = v163;
                  v162 = (char *)(v96 + 3);
                  v163 = (std::__shared_weak_count *)v96;
                  if (v98)
                  {
                    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(p_shared_owners);
                    while (__stlxr(v100 - 1, p_shared_owners));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  *(_OWORD *)v179 = v160;
                  v101 = v162;
                  *(_QWORD *)&v179[16] = v161;
                  if (v161)
                  {
                    v102 = (unint64_t *)&v161->__shared_owners_;
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                  }
                  v104 = v163;
                  *(_QWORD *)&v179[24] = v101;
                  *(_QWORD *)&v179[32] = v163;
                  if (v163)
                  {
                    v105 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                    v180[0] = v101;
                    do
                      v107 = __ldaxr(v105);
                    while (__stlxr(v107 - 1, v105));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  else
                  {
                    v180[0] = v101;
                  }
                  v108 = v161;
                  if (v161)
                  {
                    v109 = (unint64_t *)&v161->__shared_owners_;
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (!v110)
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                  }
                  v111 = *(_QWORD *)v179;
                  if (*((char *)v180[0] + 31) >= 0)
                    v112 = (char *)v180[0] + 8;
                  else
                    v112 = (char *)*((_QWORD *)v180[0] + 1);
                  v113 = _os_log_pack_fill();
                  *(_DWORD *)v113 = 136315138;
                  *(_QWORD *)(v113 + 4) = v112;
                  v114 = operator new();
                  v115 = *(unsigned __int8 *)(v147 + 39);
                  v116 = v148;
                  if ((v115 & 0x80u) != 0)
                  {
                    v116 = *(const char **)(v147 + 16);
                    v115 = *(_QWORD *)(v147 + 24);
                  }
                  *(_QWORD *)v114 = v111;
                  *(_OWORD *)(v114 + 8) = *(_OWORD *)&v179[8];
                  *(_QWORD *)&v179[8] = 0;
                  *(_QWORD *)&v179[16] = 0;
                  *(_OWORD *)(v114 + 24) = *(_OWORD *)&v179[24];
                  *(_QWORD *)&v179[24] = 0;
                  *(_QWORD *)&v179[32] = 0;
                  *(_QWORD *)(v114 + 40) = v116;
                  *(_QWORD *)(v114 + 48) = v115;
                  *(_BYTE *)(v114 + 56) = 1;
                  v164 = 0;
                  *(_QWORD *)&v160 = v114;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), &v160);
                  v117 = v160;
                  *(_QWORD *)&v160 = 0;
                  v91 = v149;
                  if (v117)
                  {
                    v118 = *(std::__shared_weak_count **)(v117 + 32);
                    if (v118)
                    {
                      v119 = (unint64_t *)&v118->__shared_owners_;
                      do
                        v120 = __ldaxr(v119);
                      while (__stlxr(v120 - 1, v119));
                      if (!v120)
                      {
                        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                        std::__shared_weak_count::__release_weak(v118);
                      }
                    }
                    v121 = *(std::__shared_weak_count **)(v117 + 16);
                    if (v121)
                    {
                      v122 = (unint64_t *)&v121->__shared_owners_;
                      do
                        v123 = __ldaxr(v122);
                      while (__stlxr(v123 - 1, v122));
                      if (!v123)
                      {
                        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                        std::__shared_weak_count::__release_weak(v121);
                      }
                    }
                    MEMORY[0x227684CE8](v117, 0x10F0C40B62ED6C6);
                    v124 = v164;
                    v164 = 0;
                    if (v124)
                    {
                      v125 = (std::__shared_weak_count *)v124[4];
                      if (v125)
                      {
                        v126 = (unint64_t *)&v125->__shared_owners_;
                        do
                          v127 = __ldaxr(v126);
                        while (__stlxr(v127 - 1, v126));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                          std::__shared_weak_count::__release_weak(v125);
                        }
                      }
                      v128 = (std::__shared_weak_count *)v124[2];
                      if (v128)
                      {
                        v129 = (unint64_t *)&v128->__shared_owners_;
                        do
                          v130 = __ldaxr(v129);
                        while (__stlxr(v130 - 1, v129));
                        if (!v130)
                        {
                          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                          std::__shared_weak_count::__release_weak(v128);
                        }
                      }
                      MEMORY[0x227684CE8](v124, 0x10F0C40B62ED6C6);
                    }
                  }
                  v131 = *(std::__shared_weak_count **)&v179[32];
                  if (*(_QWORD *)&v179[32])
                  {
                    v132 = (unint64_t *)(*(_QWORD *)&v179[32] + 8);
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  v134 = *(std::__shared_weak_count **)&v179[16];
                  if (*(_QWORD *)&v179[16])
                  {
                    v135 = (unint64_t *)(*(_QWORD *)&v179[16] + 8);
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
LABEL_211:
                  if (v91)
                  {
                    v137 = (const char *)__dst;
                    if (v158 < 0)
                      v137 = (const char *)__dst[0];
                    sub_22322C138((uint64_t)&__p, "%s", v137);
                    sub_223182C08((uint64_t)&__p);
                  }
                  sub_223182C08((uint64_t)&__p);
                  v138 = v156;
                  if (v156)
                  {
                    v139 = (unint64_t *)&v156->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  if (SHIBYTE(v158) < 0)
                    operator delete(__dst[0]);
                  v166[0] = *MEMORY[0x24BEDB7F0];
                  v141 = *(const char **)(MEMORY[0x24BEDB7F0] + 72);
                  *(uint64_t *)((char *)v166 + *(_QWORD *)(v166[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v167 = v141;
                  v168 = MEMORY[0x24BEDB848] + 16;
                  if (v175 < 0)
                    operator delete(v174);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x227684BE0](&v178);
                  goto LABEL_225;
                }
              }
              memcpy(v89, v69, v88);
              goto LABEL_152;
            }
          }
          memmove(v77, v75, v76);
          goto LABEL_123;
        }
      }
      memmove(v60, v66, v59);
      goto LABEL_102;
    }
  }
LABEL_225:
  v142 = *(_QWORD *)(a1 + 23440);
  *(_QWORD *)(a1 + 23440) = 0;
  if (v142)
  {
    v143 = *(std::__shared_weak_count **)(v142 + 80);
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    MEMORY[0x227684CE8](v142, 0x10F0C401ED89F8CLL);
  }
  result = *(_QWORD *)(a1 + 21520);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_223AF2334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 168) && *(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  if (a31 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_223AF24A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AF24D8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCDD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCDD8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCDD0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCDD8);
  }
  *a1 = qword_2540CCDD0;
}

void sub_223AF2574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCDD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCDD8);
  _Unwind_Resume(a1);
}

BOOL sub_223AF25CC(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  unint64_t v5;
  signed int v6;
  signed int v7;
  signed int v8;
  uint64_t v9;
  int *v10;
  int v11;
  signed int v12;
  signed int v13;
  int v14;
  BOOL v15;
  signed int v17;
  signed int v18;
  signed int v19;
  _DWORD *v20;
  BOOL v21;
  int v23;
  int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  _QWORD *v29;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 176);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_27;
  v6 = *a3 & 0xFFFFFFF8;
  v7 = a3[1] & 0xFFFFFFF8;
  v8 = a3[2] & 0xFFFFFFF8;
  v9 = *(_QWORD *)(a1 + 184);
  v10 = (int *)(v9 + 4488 * (v5 & 0xFFFFFFFFCFFFFFFFLL));
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v6 - *v10;
  v15 = v6 < *v10 || v7 < v12;
  if (v15 || v8 < v13)
    goto LABEL_27;
  v17 = v10[3];
  v20 = v10 + 4;
  v19 = v10[4];
  v18 = v20[1];
  v21 = v6 < v17 && v7 < v19;
  if (!v21 || v8 >= v18)
    goto LABEL_27;
  v23 = v7 - v12;
  v24 = v8 - v13;
  for (i = v17 - v11; ; v24 -= i & v24)
  {
    i >>= 1;
    v5 = *(unsigned int *)(v9
                         + 4488 * (v5 & 0xCFFFFFFF)
                         + 4 * ((4 * ((i & v14) != 0)) | (2 * ((i & v23) != 0)) | ((i & v24) != 0))
                         + 24);
    if (i == *(_DWORD *)(a1 + 136) || v5 >> 30)
      break;
    v14 -= i & v14;
    v23 -= i & v23;
  }
  if ((v5 & 0x80000000) != 0)
  {
LABEL_27:
    v27 = a1 + 20872;
    v32 = *((_BYTE *)a2 + 16);
    v31 = *a2;
    if (!v32)
    {
LABEL_26:
      v28 = *(_DWORD *)(v27 + 40);
      return v28 >= 0;
    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 20920);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 20928) - v26) >> 4) <= v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v26 = *(_QWORD *)(a1 + 20920);
    }
    v27 = v26 + 48 * v5;
    v32 = *((_BYTE *)a2 + 16);
    v31 = *a2;
    if (!v32)
      goto LABEL_26;
  }
  v29 = sub_223340F28((_QWORD *)v27, (uint64_t)&v31);
  if (v29)
    v28 = *((_DWORD *)v29 + 8);
  else
    v28 = 0x80000000;
  return v28 >= 0;
}

uint64_t sub_223AF27E4(uint64_t result, uint64_t a2, int *a3, uint64_t a4, float32x4_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  uint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  signed int v16;
  signed int v17;
  uint64_t v18;
  _DWORD *v19;
  signed int v20;
  signed int v21;
  int v22;
  BOOL v23;
  int v25;
  int v26;
  uint64_t v27;
  size_t v28;
  void **v29;
  signed int v30;
  int v31;
  int v32;
  int i;
  uint64_t v34;
  uint64_t v35;
  uint64_t *j;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t k;
  void *v46;
  char *v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  const void **v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  size_t v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  size_t v76;
  size_t v77;
  _QWORD *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  const char *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  _DWORD *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  int v146;
  const char *v147;
  uint64_t v148;
  const char *v149;
  _QWORD v150[3];
  int v151;
  const char *v152;
  int v153;
  const char *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void *__dst[2];
  int64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  _QWORD v164[3];
  uint64_t v165;
  unint64_t v166;
  void *__p;
  char v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  char *v181;
  std::__shared_weak_count *v182;
  _QWORD *v183;
  __int128 v184;
  _BYTE v185[24];
  __int128 v186;
  void *v187[2];
  unint64_t v188;
  char v189;
  _QWORD v190[5];

  v5 = result;
  v190[2] = *MEMORY[0x24BDAC8D0];
  v178 = a4;
  v6 = vmulq_n_f32(a5, *(float *)(a2 + 132));
  v7 = -(uint64_t)*(unsigned __int16 *)(a2 + 136);
  v8 = (int)vcvtms_s32_f32(v6.f32[2]) & (unint64_t)v7;
  v9 = vand_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v6.f32)));
  *(int8x8_t *)(a2 + 260) = v9;
  *(_DWORD *)(a2 + 268) = v8;
  v10 = *(_DWORD *)(a2 + 176);
  if (v10 < 0)
    goto LABEL_188;
  v12 = *(_DWORD *)(a2 + 180);
  if (v12 <= *(_DWORD *)(a2 + 148))
    goto LABEL_188;
  v13 = a3[1];
  v14 = *a3 - (uint64_t)v9.i32[0];
  *(_QWORD *)v185 = a2;
  v150[0] = v14 * v14 + (v13 - v9.i32[1]) * (v13 - v9.i32[1]) + (a3[2] - v8) * (a3[2] - v8);
  LOBYTE(v175) = 0;
  v177 = 0;
  v159 = a2;
  v160 = (uint64_t *)v185;
  v161 = v150;
  v162 = (uint64_t)a3;
  v163 = &v175;
  result = sub_223E97E00(a2, v12, v10, (_DWORD *)a2, (uint64_t)&v159);
  if (!v177)
    goto LABEL_188;
  v173 = v175;
  v174 = v176;
  v15 = *(unsigned int *)(a2 + 176);
  if ((v15 & 0x80000000) != 0)
    goto LABEL_13;
  v16 = HIDWORD(v173) & 0xFFFFFFF8;
  v17 = v176 & 0xFFFFFFF8;
  v18 = *(_QWORD *)(a2 + 184);
  v19 = (_DWORD *)(v18 + 4488 * (v15 & 0xFFFFFFFFCFFFFFFFLL));
  v20 = v19[1];
  v21 = v19[2];
  v22 = (v175 & 0xFFFFFFF8) - *v19;
  v23 = (v175 & 0xFFFFFFF8) < *v19 || v16 < v20;
  if (v23 || v17 < v21)
    goto LABEL_13;
  v30 = v19[3];
  if ((v175 & 0xFFFFFFF8) >= v30 || v16 >= v19[4] || v17 >= v19[5])
    goto LABEL_13;
  v31 = v16 - v20;
  v32 = v17 - v21;
  for (i = v30 - *v19; ; v32 -= i & v32)
  {
    i >>= 1;
    v15 = *(unsigned int *)(v18
                          + 4488 * (v15 & 0xCFFFFFFF)
                          + 4 * ((4 * ((i & v22) != 0)) | (2 * ((i & v31) != 0)) | ((i & v32) != 0))
                          + 24);
    if (i == *(_DWORD *)(a2 + 136) || v15 >> 30)
      break;
    v22 -= i & v22;
    v31 -= i & v31;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_13:
    sub_223B26168(&v172);
    result = v172;
    if (**(int **)(v172 + 56) <= 4)
    {
      v25 = *(unsigned __int8 *)(v172 + 72);
      v26 = *(_BYTE *)(v172 + 72) != 0;
      result = sub_22322F254(v172, "OSLogSurrogateAppender", 1, 0);
      v27 = result;
      if (((result == 0) & ~v26) == 0)
      {
        sub_223195210((uint64_t)&v159);
        sub_2231813E8(&v161, (uint64_t)"Tried deallocating unknown block", 32);
        if ((v170 & 0x10) != 0)
        {
          v50 = v169;
          if (v169 < v166)
          {
            v169 = v166;
            v50 = v166;
          }
          v51 = (const void **)&v165;
        }
        else
        {
          if ((v170 & 8) == 0)
          {
            v28 = 0;
            HIBYTE(v158) = 0;
            v29 = __dst;
            goto LABEL_58;
          }
          v51 = (const void **)v164;
          v50 = v164[2];
        }
        v52 = *v51;
        v28 = v50 - (_QWORD)*v51;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v28 >= 0x17)
        {
          v53 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v53 = v28 | 7;
          v54 = v53 + 1;
          v29 = (void **)operator new(v53 + 1);
          __dst[1] = (void *)v28;
          v158 = v54 | 0x8000000000000000;
          __dst[0] = v29;
        }
        else
        {
          HIBYTE(v158) = v50 - *(_BYTE *)v51;
          v29 = __dst;
          if (!v28)
          {
LABEL_58:
            *((_BYTE *)v29 + v28) = 0;
            v150[0] = &v172;
            v150[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v150[2] = std::chrono::system_clock::now().__d_.__rep_;
            v151 = 4;
            v152 = "unknown file";
            v153 = 330;
            v155 = 0;
            v156 = 0;
            v154 = "unknown function";
            if (v158 >= 0)
              v55 = (const char *)__dst;
            else
              v55 = (const char *)__dst[0];
            v56 = *(_QWORD *)v150[0];
            v57 = (const char *)(*(_QWORD *)v150[0] + 16);
            v149 = v57;
            if (*(char *)(*(_QWORD *)v150[0] + 39) < 0)
            {
              v57 = *(const char **)(v56 + 16);
              v58 = *(_QWORD *)(v56 + 24);
            }
            else
            {
              v58 = *(unsigned __int8 *)(*(_QWORD *)v150[0] + 39);
            }
            v59 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v185);
              sub_223199C58("com.apple.cv3d", (unint64_t)v185, byte_255788F40);
              if ((_BYTE)v186 && (v185[23] & 0x80000000) != 0)
                operator delete(*(void **)v185);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F40[23] >= 0)
              v60 = byte_255788F40;
            else
              v60 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v61 = byte_255788F40[23];
            else
              v61 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)v185 = os_log_create(v60, v57);
            v62 = &v185[8];
            if (v61 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v61 >= 0x17)
            {
              v147 = v57;
              v63 = v27;
              v64 = v56;
              v65 = v55;
              v66 = v25;
              v67 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v61 | 7) != 0x17)
                v67 = v61 | 7;
              v68 = v67 + 1;
              v62 = operator new(v67 + 1);
              *(_QWORD *)&v185[16] = v61;
              *(_QWORD *)&v186 = v68 | 0x8000000000000000;
              *(_QWORD *)&v185[8] = v62;
              v25 = v66;
              v55 = v65;
              v56 = v64;
              v27 = v63;
              v57 = v147;
            }
            else
            {
              BYTE7(v186) = v61;
              if (!v61)
              {
LABEL_79:
                v62[v61] = 0;
                BYTE8(v186) = 1;
                v69 = v187;
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v58 >= 0x17)
                {
                  v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v70 = v58 | 7;
                  v71 = v70 + 1;
                  v69 = (void **)operator new(v70 + 1);
                  v187[1] = (void *)v58;
                  v188 = v71 | 0x8000000000000000;
                  v187[0] = v69;
                }
                else
                {
                  HIBYTE(v188) = v58;
                  if (!v58)
                  {
LABEL_87:
                    *((_BYTE *)v69 + v58) = 0;
                    v189 = 1;
                    v72 = *(NSObject **)v185;
                    if (SHIBYTE(v188) < 0)
                      operator delete(v187[0]);
                    if (BYTE8(v186) && SBYTE7(v186) < 0)
                      operator delete(*(void **)&v185[8]);
                    if (*(_QWORD *)v185)
                      os_release(*(void **)v185);
                    if (!v27 || !*(_QWORD *)(v27 + 24))
                    {
                      os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v185 = 136315138;
                      *(_QWORD *)&v185[4] = v55;
                      v79 = (void *)_os_log_send_and_compose_impl();
                      if (v79)
                        free(v79);
                      goto LABEL_174;
                    }
                    v73 = _os_log_pack_size();
                    v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
                    v75 = (std::__shared_weak_count *)operator new();
                    v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v75->__shared_owners_ = 0;
                    v75->__shared_weak_owners_ = 0;
                    v75[1].__vftable = v74;
                    *(_QWORD *)&v179 = v74;
                    *((_QWORD *)&v179 + 1) = v74;
                    v181 = 0;
                    v182 = 0;
                    v180 = v75;
                    v76 = strlen(v55);
                    if (v76 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v77 = v76;
                    if (v76 >= 0x17)
                    {
                      v86 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v76 | 7) != 0x17)
                        v86 = v76 | 7;
                      v87 = v86 + 1;
                      v78 = operator new(v86 + 1);
                      *(_QWORD *)&v184 = v77;
                      *((_QWORD *)&v184 + 1) = v87 | 0x8000000000000000;
                      v183 = v78;
                    }
                    else
                    {
                      HIBYTE(v184) = v76;
                      v78 = &v183;
                      if (!v76)
                      {
LABEL_115:
                        *((_BYTE *)v78 + v77) = 0;
                        v88 = v183;
                        v190[0] = v184;
                        *(_QWORD *)((char *)v190 + 7) = *(_QWORD *)((char *)&v184 + 7);
                        v89 = HIBYTE(v184);
                        v90 = operator new(0x38uLL);
                        v90[1] = 0;
                        v90[2] = 0;
                        v90[3] = off_24EC1FA48;
                        *v90 = &off_24EC1F9F8;
                        v91 = v190[0];
                        v90[4] = v88;
                        v90[5] = v91;
                        *(_QWORD *)((char *)v90 + 47) = *(_QWORD *)((char *)v190 + 7);
                        *((_BYTE *)v90 + 55) = v89;
                        v190[0] = 0;
                        *(_QWORD *)((char *)v190 + 7) = 0;
                        v92 = v182;
                        v181 = (char *)(v90 + 3);
                        v182 = (std::__shared_weak_count *)v90;
                        if (v92)
                        {
                          p_shared_owners = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldaxr(p_shared_owners);
                          while (__stlxr(v94 - 1, p_shared_owners));
                          if (!v94)
                          {
                            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                            std::__shared_weak_count::__release_weak(v92);
                          }
                        }
                        *(_OWORD *)v185 = v179;
                        v95 = v181;
                        *(_QWORD *)&v185[16] = v180;
                        if (v180)
                        {
                          v96 = (unint64_t *)&v180->__shared_owners_;
                          do
                            v97 = __ldxr(v96);
                          while (__stxr(v97 + 1, v96));
                        }
                        v98 = v182;
                        *(_QWORD *)&v186 = v95;
                        *((_QWORD *)&v186 + 1) = v182;
                        if (v182)
                        {
                          v99 = (unint64_t *)&v182->__shared_owners_;
                          do
                            v100 = __ldxr(v99);
                          while (__stxr(v100 + 1, v99));
                          v187[0] = v95;
                          do
                            v101 = __ldaxr(v99);
                          while (__stlxr(v101 - 1, v99));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                            std::__shared_weak_count::__release_weak(v98);
                          }
                        }
                        else
                        {
                          v187[0] = v95;
                        }
                        v102 = v180;
                        if (v180)
                        {
                          v103 = (unint64_t *)&v180->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        v105 = *(_QWORD *)v185;
                        if (*((char *)v187[0] + 31) >= 0)
                          v106 = (char *)v187[0] + 8;
                        else
                          v106 = (char *)*((_QWORD *)v187[0] + 1);
                        v107 = _os_log_pack_fill();
                        *(_DWORD *)v107 = 136315138;
                        *(_QWORD *)(v107 + 4) = v106;
                        v108 = operator new();
                        v109 = *(unsigned __int8 *)(v56 + 39);
                        v110 = v149;
                        if ((v109 & 0x80u) != 0)
                        {
                          v110 = *(const char **)(v56 + 16);
                          v109 = *(_QWORD *)(v56 + 24);
                        }
                        *(_QWORD *)v108 = v105;
                        *(_OWORD *)(v108 + 8) = *(_OWORD *)&v185[8];
                        *(_QWORD *)&v185[8] = 0;
                        *(_QWORD *)&v185[16] = 0;
                        *(_OWORD *)(v108 + 24) = v186;
                        v186 = 0uLL;
                        *(_QWORD *)(v108 + 40) = v110;
                        *(_QWORD *)(v108 + 48) = v109;
                        *(_BYTE *)(v108 + 56) = 16;
                        v183 = 0;
                        *(_QWORD *)&v179 = v108;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), &v179);
                        v111 = v179;
                        *(_QWORD *)&v179 = 0;
                        if (v111)
                        {
                          v112 = *(std::__shared_weak_count **)(v111 + 32);
                          if (v112)
                          {
                            v113 = (unint64_t *)&v112->__shared_owners_;
                            do
                              v114 = __ldaxr(v113);
                            while (__stlxr(v114 - 1, v113));
                            if (!v114)
                            {
                              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                              std::__shared_weak_count::__release_weak(v112);
                            }
                          }
                          v115 = *(std::__shared_weak_count **)(v111 + 16);
                          if (v115)
                          {
                            v116 = (unint64_t *)&v115->__shared_owners_;
                            do
                              v117 = __ldaxr(v116);
                            while (__stlxr(v117 - 1, v116));
                            if (!v117)
                            {
                              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                              std::__shared_weak_count::__release_weak(v115);
                            }
                          }
                          MEMORY[0x227684CE8](v111, 0x10F0C40B62ED6C6);
                          v118 = v183;
                          v183 = 0;
                          if (v118)
                          {
                            v119 = (std::__shared_weak_count *)v118[4];
                            if (v119)
                            {
                              v120 = (unint64_t *)&v119->__shared_owners_;
                              do
                                v121 = __ldaxr(v120);
                              while (__stlxr(v121 - 1, v120));
                              if (!v121)
                              {
                                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                                std::__shared_weak_count::__release_weak(v119);
                              }
                            }
                            v122 = (std::__shared_weak_count *)v118[2];
                            if (v122)
                            {
                              v123 = (unint64_t *)&v122->__shared_owners_;
                              do
                                v124 = __ldaxr(v123);
                              while (__stlxr(v124 - 1, v123));
                              if (!v124)
                              {
                                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                                std::__shared_weak_count::__release_weak(v122);
                              }
                            }
                            MEMORY[0x227684CE8](v118, 0x10F0C40B62ED6C6);
                          }
                        }
                        v125 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
                        if (*((_QWORD *)&v186 + 1))
                        {
                          v126 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        v128 = *(std::__shared_weak_count **)&v185[16];
                        if (*(_QWORD *)&v185[16])
                        {
                          v129 = (unint64_t *)(*(_QWORD *)&v185[16] + 8);
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
LABEL_174:
                        if (v25)
                        {
                          v131 = (const char *)__dst;
                          if (v158 < 0)
                            v131 = (const char *)__dst[0];
                          sub_22322C138((uint64_t)v150, "%s", v131);
                          sub_223182C08((uint64_t)v150);
                        }
                        sub_223182C08((uint64_t)v150);
                        v132 = v156;
                        if (v156)
                        {
                          v133 = (unint64_t *)&v156->__shared_owners_;
                          do
                            v134 = __ldaxr(v133);
                          while (__stlxr(v134 - 1, v133));
                          if (!v134)
                          {
                            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                            std::__shared_weak_count::__release_weak(v132);
                          }
                        }
                        if (SHIBYTE(v158) < 0)
                          operator delete(__dst[0]);
                        v159 = *MEMORY[0x24BEDB7F0];
                        v135 = *(uint64_t **)(MEMORY[0x24BEDB7F0] + 72);
                        *(uint64_t *)((char *)&v159 + *(_QWORD *)(v159 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v161 = v135;
                        v162 = MEMORY[0x24BEDB848] + 16;
                        if (v168 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        result = MEMORY[0x227684BE0](&v171);
                        goto LABEL_188;
                      }
                    }
                    memcpy(v78, v55, v77);
                    goto LABEL_115;
                  }
                }
                memmove(v69, v57, v58);
                goto LABEL_87;
              }
            }
            memmove(v62, v60, v61);
            goto LABEL_79;
          }
        }
        memmove(v29, v52, v28);
        goto LABEL_58;
      }
    }
LABEL_188:
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 12) = 0;
    return result;
  }
  v159 = a2;
  v160 = &v178;
  v161 = &v173;
  v34 = *(_QWORD *)(a2 + 20920);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 20928) - v34) >> 4) <= v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1051, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid info index", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v34 = *(_QWORD *)(a2 + 20920);
  }
  v148 = v34;
  v35 = v34 + 48 * v15;
  for (j = *(uint64_t **)(v35 + 16); j; j = (uint64_t *)*j)
  {
    v37 = *((_DWORD *)j + 8);
    if ((v37 & 0x80000000) != 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 926, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223B2625C(&v159, v37);
  }
  v38 = v148 + 48 * v15;
  v41 = *(_DWORD *)(v38 + 40);
  v40 = (_DWORD *)(v38 + 40);
  v39 = v41;
  if ((v41 & 0x80000000) == 0)
    sub_223B2625C(&v159, v39);
  if (*(_QWORD *)(v35 + 24))
  {
    v42 = *(_QWORD **)(v35 + 16);
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        operator delete(v42);
        v42 = v43;
      }
      while (v43);
    }
    *(_QWORD *)(v35 + 16) = 0;
    v44 = *(_QWORD *)(v35 + 8);
    if (v44)
    {
      for (k = 0; k != v44; ++k)
        *(_QWORD *)(*(_QWORD *)v35 + 8 * k) = 0;
    }
    *(_QWORD *)(v35 + 24) = 0;
  }
  v46 = *(void **)v35;
  *(_QWORD *)v35 = 0;
  if (v46)
    operator delete(v46);
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 32) = 1065353216;
  *v40 = 0x80000000;
  v47 = *(char **)(a2 + 20952);
  v48 = *(_QWORD *)(a2 + 20960);
  if ((unint64_t)v47 >= v48)
  {
    v80 = *(char **)(a2 + 20944);
    v81 = (v47 - v80) >> 2;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 62)
      sub_22316E078();
    v83 = v48 - (_QWORD)v80;
    if (v83 >> 1 > v82)
      v82 = v83 >> 1;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
      v84 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    if (v84)
    {
      if (v84 >> 62)
        sub_223174E94();
      v85 = operator new(4 * v84);
    }
    else
    {
      v85 = 0;
    }
    v136 = &v85[4 * v81];
    v137 = &v85[4 * v84];
    *v136 = v15;
    v49 = v136 + 1;
    if (v47 != v80)
    {
      v138 = v47 - v80 - 4;
      if (v138 < 0x2C)
        goto LABEL_215;
      if ((unint64_t)(v80 - v85) < 0x20)
        goto LABEL_215;
      v139 = (v138 >> 2) + 1;
      v140 = 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
      v141 = &v47[-v140];
      v136 = (_DWORD *)((char *)v136 - v140);
      v142 = &v85[4 * v81 - 16];
      v143 = v47 - 16;
      v144 = v139 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v145 = *(_OWORD *)v143;
        *(v142 - 1) = *((_OWORD *)v143 - 1);
        *v142 = v145;
        v142 -= 2;
        v143 -= 32;
        v144 -= 8;
      }
      while (v144);
      v47 = v141;
      if (v139 != (v139 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_215:
        do
        {
          v146 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *--v136 = v146;
        }
        while (v47 != v80);
      }
    }
    *(_QWORD *)(a2 + 20944) = v136;
    *(_QWORD *)(a2 + 20952) = v49;
    *(_QWORD *)(a2 + 20960) = v137;
    if (v80)
      operator delete(v80);
  }
  else
  {
    *(_DWORD *)v47 = v15;
    v49 = v47 + 4;
  }
  *(_QWORD *)(a2 + 20952) = v49;
  *(_QWORD *)v185 = v173 & 0xFFFFFFF8FFFFFFF8;
  *(_DWORD *)&v185[8] = v174 & 0xFFFFFFF8;
  result = sub_223E8AD00(a2, (int8x8_t *)v185, 0x80000000);
  *(_QWORD *)v5 = v173;
  *(_DWORD *)(v5 + 8) = v174;
  *(_BYTE *)(v5 + 12) = 1;
  return result;
}

void sub_223AF36D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_223AF3824(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, float32x2_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  _QWORD *v32;
  size_t v33;
  size_t v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v35;
  int v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  std::string::size_type v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  const char *v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  std::string::size_type v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::size_type v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  int v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  char v156;
  uint64_t v157;
  int32x4_t v158;
  uint64_t v159;
  int32x4_t v160;
  float32x2_t v161;
  float32x4_t v162;
  __int128 v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  unsigned __int32 v167;
  __int128 v168;
  char *v169;
  char *v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  const char *v175;
  size_t v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  const char *v179;
  size_t v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  size_t v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  std::string::size_type v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::string::size_type v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  char *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  int8x16_t v244;
  float32x4_t v245;
  int8x16_t v246;
  int8x16_t v247;
  float32x2_t v248;
  int32x4_t v249;
  int8x16_t v250;
  _QWORD *v251;
  char *v252;
  char *v253;
  _QWORD *v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  _QWORD *v263;
  int32x4_t v264;
  int32x4_t v265;
  float32x2_t v266;
  float32x4_t v267;
  int8x8_t v268;
  unint64_t v269;
  uint8x8_t v270;
  unint64_t v271;
  uint64_t ***v272;
  uint64_t **v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  int8x16_t *v277;
  int8x16_t v278;
  uint64_t v279;
  uint64_t v280;
  int8x16_t *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  int8x16_t *v288;
  _OWORD *v289;
  float32x4_t v290;
  int8x16_t v291;
  int8x16_t v292;
  float32x4_t v293;
  int32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  int8x16_t v297;
  float32x2_t v298;
  float32x2_t v299;
  float32x2_t v300;
  float **v301;
  float32x2_t v302;
  float v303;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  unint64_t v310;
  const char *v311;
  size_t v312;
  unsigned __int8 v313;
  char v314;
  unsigned __int8 v315;
  const char *v316;
  size_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  _BYTE *v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  NSObject *v325;
  size_t v326;
  void *v327;
  _QWORD *v328;
  size_t v329;
  size_t v330;
  uint64_t *p_s;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  _QWORD *v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  std::string::size_type v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  float32x2_t v381;
  float32x2_t v382;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float v390;
  uint64_t v391;
  int v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  std::mutex *v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  _BYTE *v400;
  _BYTE *v401;
  uint64_t v402;
  uint64_t *v403;
  int *v404;
  _QWORD *v405;
  uint64_t v406;
  unsigned __int8 *v407;
  unint64_t v408;
  char v409;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t i;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  std::mutex *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE *v422;
  uint64_t v423;
  _BYTE *v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  std::mutex *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  std::string *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  _QWORD *v440;
  int8x16_t v441;
  float32x2_t v442;
  float32x2_t v443;
  float32x2_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  float32x2_t v448;
  float32x2_t v449;
  int v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v454;
  const char *v455;
  size_t v456;
  unsigned __int8 v457;
  unsigned __int8 v458;
  const char *v459;
  size_t v460;
  _BYTE *v461;
  uint64_t v462;
  uint64_t v463;
  _BYTE *v464;
  NSObject *v465;
  uint64_t v466;
  uint64_t v467;
  size_t v468;
  void *v469;
  _QWORD *v470;
  size_t v471;
  size_t v472;
  uint64_t *v473;
  int v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char v479;
  _QWORD *v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  const char *v500;
  std::string::size_type v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  uint8x8_t v526;
  unint64_t v527;
  uint64_t ***v528;
  uint64_t **v529;
  unint64_t v530;
  uint64_t *v531;
  uint64_t **v532;
  uint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  _QWORD *v536;
  float v537;
  float v538;
  _BOOL8 v539;
  unint64_t v540;
  unint64_t v541;
  size_t prime;
  unint64_t v543;
  uint8x8_t v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD *v547;
  unint64_t v548;
  uint64_t v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t j;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  float v556;
  float v557;
  float v558;
  float v559;
  float v560;
  float v561;
  uint64_t v562;
  int v563;
  float *v564;
  float v565;
  uint64_t v566;
  int v567;
  float *v568;
  float v569;
  _QWORD *v570;
  uint64_t *k;
  int32x2_t v572;
  uint64_t **v573;
  uint64_t *v574;
  int v575;
  unint64_t v576;
  uint64_t v577;
  unsigned __int8 v578;
  uint64_t m;
  uint64_t v580;
  unsigned __int8 v581;
  uint64_t v582;
  unint64_t v583;
  float32x2_t v584;
  float32x2_t v585;
  float32x2_t v586;
  int8x8_t v587;
  float32x2_t v588;
  unint64_t v589;
  float32x2_t **v590;
  float32x2_t *v591;
  uint64_t v592;
  float32x2_t v593;
  float32x2_t v595;
  float v598;
  float v599;
  _QWORD *v600;
  uint64_t v601;
  _QWORD *v602;
  void *v603;
  float v604;
  uint64_t v605;
  char v606;
  int32x4_t v607;
  __n128 v608;
  double v609;
  double v610;
  double v611;
  float32x2_t v612;
  int32x4_t v613;
  char v614;
  uint64_t *v615;
  int v616;
  int v617;
  int v618;
  char v619;
  uint64_t v620;
  uint64_t v621;
  void *v622;
  uint64_t v623;
  void *v624;
  void *v625;
  __int128 *v626;
  unint64_t v627;
  unint64_t v628;
  uint8x8_t v629;
  __int128 *v630;
  __int128 *v631;
  __int128 *v632;
  unint64_t v633;
  __int128 *v634;
  unint64_t v635;
  unint64_t v636;
  float v637;
  float v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float v643;
  float32x4_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  const char *v649;
  const char *v650;
  void *v651;
  const char *v652;
  void *v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  void *v657;
  uint64_t v658;
  void *v659;
  void *v660;
  float v661;
  float v662;
  float v663;
  int v664;
  unint64_t v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float v670;
  float v671;
  float v672;
  float v673;
  float v674;
  float v675;
  float v676;
  float v677;
  uint64_t v678;
  uint64_t v679;
  unsigned __int8 v680;
  const char *v681;
  size_t v682;
  const char *v683;
  _BYTE *v684;
  uint64_t v685;
  uint64_t v686;
  size_t v687;
  _BYTE *v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  size_t v692;
  std::__shared_weak_count_vtbl *v693;
  std::__shared_weak_count *v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  unint64_t v698;
  std::string::size_type v699;
  uint64_t v700;
  int v701;
  int v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  __int128 v708;
  uint64_t v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  std::__shared_weak_count *v713;
  unint64_t *v714;
  unint64_t v715;
  uint64_t v716;
  std::__shared_weak_count *v717;
  unint64_t *v718;
  unint64_t v719;
  std::__shared_weak_count *v720;
  unint64_t *v721;
  unint64_t v722;
  char *v723;
  std::__shared_weak_count *v724;
  unint64_t *v725;
  unint64_t v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  std::__shared_weak_count *v730;
  unint64_t *v731;
  unint64_t v732;
  std::__shared_weak_count *v733;
  unint64_t *v734;
  unint64_t v735;
  int v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t v739;
  const char *v740;
  size_t v741;
  unsigned __int8 v742;
  const char *v743;
  size_t v744;
  _BYTE *v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  _BYTE *v749;
  uint64_t v750;
  uint64_t v751;
  NSObject *v752;
  size_t v753;
  std::__shared_weak_count_vtbl *v754;
  std::__shared_weak_count *v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  const char *v764;
  std::string::size_type v765;
  std::__shared_weak_count *v766;
  unint64_t *v767;
  unint64_t v768;
  std::__shared_weak_count *v769;
  unint64_t *v770;
  unint64_t v771;
  std::string::size_type v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  void *v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int n;
  int v797;
  int v798;
  unint64_t v799;
  _QWORD **v800;
  uint64_t v802;
  size_t v803;
  uint64_t v804;
  uint64_t v805;
  unsigned __int8 v806;
  const char *v807;
  size_t v808;
  _BYTE *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  _BYTE *v814;
  uint64_t v815;
  uint64_t v816;
  NSObject *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  size_t v821;
  std::__shared_weak_count_vtbl *v822;
  std::__shared_weak_count *v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  unint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  std::string::size_type v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::string::size_type v842;
  std::__shared_weak_count *v843;
  unint64_t *v844;
  unint64_t v845;
  std::__shared_weak_count *v846;
  unint64_t *v847;
  unint64_t v848;
  std::__shared_weak_count *v849;
  int v850;
  unint64_t *v851;
  unint64_t v852;
  std::__shared_weak_count *v853;
  unint64_t *v854;
  unint64_t v855;
  int v856;
  int v857;
  void *v858;
  std::__shared_weak_count *v859;
  unint64_t *v860;
  unint64_t v861;
  char *v862;
  void *v863;
  std::__shared_weak_count *v864;
  unint64_t *v865;
  unint64_t v866;
  _BYTE *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  NSObject *oslog;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v876;
  unsigned int v877;
  int v879;
  uint64_t v881;
  int v883[2];
  int __lena;
  size_t __lenb;
  const char *v888;
  float v889;
  _QWORD **v890;
  float v891;
  int v892;
  _QWORD **v893;
  _QWORD *v894;
  unint64_t v895;
  uint64_t v896;
  unsigned __int8 *v897;
  unint64_t v898;
  uint64_t v899;
  int v900;
  const char *__dst;
  void *__dsta;
  char v903;
  unsigned __int8 *v904;
  unint64_t category;
  const char *categorya;
  uint64_t categoryb;
  int v908[2];
  uint64_t *v909;
  int v910[2];
  const char *v911;
  const char *v912;
  uint64_t v913;
  const char *v914;
  uint64_t v915;
  _QWORD *v916;
  const char *v917;
  uint64_t v918;
  float32x2_t v919;
  uint64_t v920;
  float32x2_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int v925;
  int v926;
  float32x2_t v927;
  int v928;
  _QWORD *v929;
  uint64_t v930;
  uint64_t v931;
  const char *v932;
  uint64_t v933;
  char *v934;
  uint64_t v935;
  float v936;
  unint64_t v937;
  float32x2_t v938;
  int v939;
  uint64_t v940;
  const char *v941;
  uint64_t v942;
  uint64_t v944;
  uint64_t v945;
  __int32 v946;
  void *v947;
  __int128 v948;
  void *__p;
  char *v950;
  char *v951;
  void *v952;
  __int128 v953;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __int128 v955;
  uint64_t v956;
  std::string v957;
  __int128 v958;
  char *v959;
  uint64_t *v960;
  uint64_t *v961;
  uint64_t v962;
  int v963;
  uint64_t v964;
  int v965;
  uint64_t v966;
  int v967;
  __int128 v968;
  __int128 v969;
  int v970;
  _BYTE v971[32];
  const char *v972;
  int v973;
  uint64_t *v974;
  uint64_t *v975;
  std::__shared_weak_count *v976;
  uint64_t v977;
  int v978;
  uint64_t v979;
  int v980;
  uint64_t v981;
  int v982;
  __int128 v983;
  __int128 v984;
  int v985;
  uint64_t *__s;
  __int128 v987;
  std::string __src;
  char *v989;
  std::__shared_weak_count *v990;
  uint64_t v991[2];
  _BYTE v992[104];
  _BYTE v993[20];
  __int128 v994;
  int v995;
  __int128 v996;
  _QWORD v997[4];
  uint64_t v998[6];
  _OWORD v999[3];
  _OWORD v1000[2];
  _BYTE v1001[20];
  __int128 v1002;
  int v1003;
  _QWORD v1004[6];
  __int128 v1005;
  __int128 v1006;
  int v1007;
  int v1008;
  uint64_t v1009;
  char v1010;
  char v1011;
  uint64_t v1012;

  v7 = a1;
  v1012 = *MEMORY[0x24BDAC8D0];
  v8 = a2[1];
  *(_QWORD *)v883 = a2 + 1;
  v9 = *a2;
  if (*a2 != v8)
  {
    v916 = (_QWORD *)(a1 + 64);
    v897 = a2[1];
    while (1)
    {
      sub_223AF0EC4(&__p);
      if (**((int **)__p + 7) <= 3)
      {
        v10 = *((unsigned __int8 *)__p + 72);
        v11 = sub_22322F254((uint64_t)__p, "OSLogSurrogateAppender", 1, 0);
        v12 = v11;
        _ZF = !v10 && v11 == 0;
        if (!_ZF)
          break;
      }
LABEL_3:
      v9 += 248;
      if (v9 == v8)
        goto LABEL_155;
    }
    *(_QWORD *)v971 = &__p;
    *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v971[24] = 3;
    v972 = "unknown file";
    v973 = 295;
    v974 = (uint64_t *)"unknown function";
    v975 = 0;
    v976 = 0;
    sub_2245664AC(v9, &__s);
    v925 = v10;
    v14 = sub_223340F28(v916, (uint64_t)v9);
    if (v14)
    {
      v15 = "new";
      if (*((_BYTE *)v14 + 610))
        v15 = "exists";
    }
    else
    {
      v15 = "new";
    }
    v932 = v15;
    v16 = **(_QWORD **)v971;
    v17 = (const char *)(**(_QWORD **)v971 + 16);
    v911 = v17;
    *(_QWORD *)v908 = **(_QWORD **)v971;
    if (*(char *)(**(_QWORD **)v971 + 39) < 0)
    {
      v17 = *(const char **)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v20 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v18 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
      v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v19 & 1) != 0)
        goto LABEL_18;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v957);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v957, byte_255788F40);
      if ((_BYTE)v958 && SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v957.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v8 = v897;
    }
LABEL_18:
    if (byte_255788F40[23] >= 0)
      v21 = byte_255788F40;
    else
      v21 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v22 = byte_255788F40[23];
    else
      v22 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v992 = os_log_create(v21, v17);
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&v992[16] = v22;
      *(_QWORD *)&v992[24] = v25 | 0x8000000000000000;
      *(_QWORD *)&v992[8] = v23;
      v8 = v897;
    }
    else
    {
      v992[31] = v22;
      v23 = &v992[8];
      if (!v22)
      {
LABEL_32:
        v23[v22] = 0;
        v992[32] = 1;
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v18 >= 0x17)
        {
          v28 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v28 = v18 | 7;
          v29 = v28 + 1;
          v26 = operator new(v28 + 1);
          *(_QWORD *)&v992[48] = v18;
          *(_QWORD *)&v992[56] = v29 | 0x8000000000000000;
          *(_QWORD *)&v992[40] = v26;
        }
        else
        {
          v992[63] = v18;
          v26 = &v992[40];
          if (!v18)
          {
            v992[40] = 0;
            v992[64] = 1;
            v27 = *(NSObject **)v992;
            if ((v992[63] & 0x80000000) == 0)
              goto LABEL_36;
            goto LABEL_42;
          }
        }
        memmove(v26, v17, v18);
        v26[v18] = 0;
        v992[64] = 1;
        v27 = *(NSObject **)v992;
        if ((v992[63] & 0x80000000) == 0)
        {
LABEL_36:
          if (!v992[32])
            goto LABEL_45;
          goto LABEL_43;
        }
LABEL_42:
        operator delete(*(void **)&v992[40]);
        if (!v992[32])
          goto LABEL_45;
LABEL_43:
        if ((v992[31] & 0x80000000) != 0)
          operator delete(*(void **)&v992[8]);
LABEL_45:
        if (*(_QWORD *)v992)
          os_release(*(void **)v992);
        if (!v12 || !*(_QWORD *)(v12 + 24))
        {
          os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
          v36 = v9[240];
          *(_DWORD *)v992 = 136315650;
          *(_QWORD *)&v992[4] = &__s;
          *(_WORD *)&v992[12] = 1024;
          *(_DWORD *)&v992[14] = v36;
          *(_WORD *)&v992[18] = 2080;
          *(_QWORD *)&v992[20] = v932;
          LODWORD(v868) = 28;
          v867 = v992;
          v37 = (void *)_os_log_send_and_compose_impl();
          v7 = a1;
          v38 = v925;
          if (v37)
          {
            free(v37);
            if (v925)
            {
LABEL_135:
              sub_2245664AC(v9, v992);
              v91 = v9[240];
              v92 = sub_223340F28(v916, (uint64_t)v9);
              if (v92)
              {
                v93 = "new";
                if (*((_BYTE *)v92 + 610))
                  v93 = "exists";
              }
              else
              {
                v93 = "new";
              }
              sub_22322C138((uint64_t)v971, "Keyframe in KeyframeBundleList: %s -> %i (%s)", v992, v91, v93);
              sub_223182C08((uint64_t)v971);
            }
LABEL_141:
            sub_223182C08((uint64_t)v971);
            v94 = v976;
            if (v976)
            {
              p_shared_owners = (unint64_t *)&v976->__shared_owners_;
              do
                v96 = __ldaxr(p_shared_owners);
              while (__stlxr(v96 - 1, p_shared_owners));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            goto LABEL_3;
          }
          goto LABEL_134;
        }
        v30 = _os_log_pack_size();
        v7 = a1;
        v31 = operator new(v30, (std::align_val_t)8uLL);
        v32 = (_QWORD *)operator new();
        *v32 = &off_24EC1F7F0;
        v32[1] = 0;
        v32[2] = 0;
        v32[3] = v31;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        __src.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
        __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
        v989 = 0;
        v990 = 0;
        v33 = strlen((const char *)&__s);
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v34 = v33;
        if (v33 >= 0x17)
        {
          v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v39 = v33 | 7;
          v40 = v39 + 1;
          v35 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)operator new(v39 + 1);
          *((_QWORD *)&v955 + 1) = v40 | 0x8000000000000000;
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v35;
          *(_QWORD *)&v955 = v34;
        }
        else
        {
          HIBYTE(v955) = v33;
          v35 = &rep;
          if (!v33)
          {
LABEL_60:
            *((_BYTE *)v35 + v34) = 0;
            v41 = strlen(v932);
            if (v41 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v42 = v41;
            if (v41 >= 0x17)
            {
              v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v41 | 7) != 0x17)
                v44 = v41 | 7;
              v45 = v44 + 1;
              v43 = operator new(v44 + 1);
              *((_QWORD *)&v953 + 1) = v45 | 0x8000000000000000;
              v952 = v43;
              *(_QWORD *)&v953 = v42;
            }
            else
            {
              HIBYTE(v953) = v41;
              v43 = &v952;
              if (!v41)
                goto LABEL_68;
            }
            memcpy(v43, v932, v42);
LABEL_68:
            *((_BYTE *)v43 + v42) = 0;
            *(_QWORD *)&v992[16] = v955;
            *(_QWORD *)&v992[23] = *(_QWORD *)((char *)&v955 + 7);
            *(_QWORD *)&v992[40] = v953;
            *(_QWORD *)&v992[47] = *(_QWORD *)((char *)&v953 + 7);
            *(_QWORD *)v992 = off_24EC580F8;
            *(_QWORD *)&v992[8] = rep;
            v992[31] = HIBYTE(v955);
            *(_QWORD *)&v992[32] = v952;
            v992[55] = HIBYTE(v953);
            v46 = (char *)operator new(0x50uLL);
            *((_QWORD *)v46 + 1) = 0;
            *((_QWORD *)v46 + 2) = 0;
            *((_QWORD *)v46 + 3) = off_24EC580F8;
            *(_QWORD *)v46 = &off_24EC580A8;
            *((_OWORD *)v46 + 2) = *(_OWORD *)&v992[8];
            *((_QWORD *)v46 + 6) = *(_QWORD *)&v992[24];
            memset(&v992[8], 0, 24);
            *(_OWORD *)(v46 + 56) = *(_OWORD *)&v992[32];
            *((_QWORD *)v46 + 9) = *(_QWORD *)&v992[48];
            memset(&v992[32], 0, 24);
            v47 = v990;
            v989 = v46 + 24;
            v990 = (std::__shared_weak_count *)v46;
            if (!v47)
              goto LABEL_72;
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
              if ((v992[55] & 0x80000000) == 0)
              {
LABEL_73:
                if ((v992[31] & 0x80000000) == 0)
                  goto LABEL_74;
                goto LABEL_78;
              }
            }
            else
            {
LABEL_72:
              if ((v992[55] & 0x80000000) == 0)
                goto LABEL_73;
            }
            operator delete(*(void **)&v992[32]);
            if ((v992[31] & 0x80000000) == 0)
            {
LABEL_74:
              v50 = v989;
              v957 = __src;
              v51 = __src.__r_.__value_.__r.__words[2];
              if (!__src.__r_.__value_.__r.__words[2])
                goto LABEL_81;
              goto LABEL_79;
            }
LABEL_78:
            operator delete(*(void **)&v992[8]);
            v50 = v989;
            v957 = __src;
            v51 = __src.__r_.__value_.__r.__words[2];
            if (!__src.__r_.__value_.__r.__words[2])
              goto LABEL_81;
LABEL_79:
            v52 = (unint64_t *)(v51 + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
LABEL_81:
            v54 = v990;
            *(_QWORD *)&v958 = v50;
            *((_QWORD *)&v958 + 1) = v990;
            if (v990)
            {
              v55 = (unint64_t *)&v990->__shared_owners_;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
              v959 = v50;
              do
                v57 = __ldaxr(v55);
              while (__stlxr(v57 - 1, v55));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            else
            {
              v959 = v50;
            }
            v58 = (std::__shared_weak_count *)__src.__r_.__value_.__r.__words[2];
            if (__src.__r_.__value_.__r.__words[2])
            {
              v59 = (unint64_t *)(__src.__r_.__value_.__r.__words[2] + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            if (v959[31] >= 0)
              v61 = v959 + 8;
            else
              v61 = (char *)*((_QWORD *)v959 + 1);
            if (v959[55] >= 0)
              v62 = v959 + 32;
            else
              v62 = (char *)*((_QWORD *)v959 + 4);
            v63 = v957.__r_.__value_.__r.__words[0];
            v64 = _os_log_pack_fill();
            v65 = v9[240];
            *(_DWORD *)v64 = 136315650;
            *(_QWORD *)(v64 + 4) = v61;
            *(_WORD *)(v64 + 12) = 1024;
            *(_DWORD *)(v64 + 14) = v65;
            *(_WORD *)(v64 + 18) = 2080;
            *(_QWORD *)(v64 + 20) = v62;
            v66 = operator new();
            v67 = *(unsigned __int8 *)(*(_QWORD *)v908 + 39);
            v68 = *(const char **)(*(_QWORD *)v908 + 16);
            v69 = *(_QWORD *)(*(_QWORD *)v908 + 24);
            v70 = v958;
            *(_OWORD *)(v66 + 8) = *(_OWORD *)&v957.__r_.__value_.__r.__words[1];
            if ((v67 & 0x80u) != 0)
              v67 = v69;
            else
              v68 = v911;
            *(_QWORD *)v66 = v63;
            *(_OWORD *)&v957.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v66 + 24) = v70;
            v958 = 0uLL;
            *(_QWORD *)(v66 + 40) = v68;
            *(_QWORD *)(v66 + 48) = v67;
            *(_BYTE *)(v66 + 56) = 1;
            __src.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v992 = v66;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), v992);
            v71 = *(_QWORD *)v992;
            *(_QWORD *)v992 = 0;
            if (v71)
            {
              v72 = *(std::__shared_weak_count **)(v71 + 32);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)(v71 + 16);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x227684CE8](v71, 0x10F0C40B62ED6C6);
              v78 = __src.__r_.__value_.__r.__words[0];
              __src.__r_.__value_.__r.__words[0] = 0;
              if (v78)
              {
                v79 = *(std::__shared_weak_count **)(v78 + 32);
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                v82 = *(std::__shared_weak_count **)(v78 + 16);
                if (v82)
                {
                  v83 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                MEMORY[0x227684CE8](v78, 0x10F0C40B62ED6C6);
              }
            }
            v85 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
            v38 = v925;
            if (!*((_QWORD *)&v958 + 1))
              goto LABEL_130;
            v86 = (unint64_t *)(*((_QWORD *)&v958 + 1) + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
              v88 = (std::__shared_weak_count *)v957.__r_.__value_.__r.__words[2];
              if (v957.__r_.__value_.__r.__words[2])
                goto LABEL_131;
            }
            else
            {
LABEL_130:
              v88 = (std::__shared_weak_count *)v957.__r_.__value_.__r.__words[2];
              if (v957.__r_.__value_.__r.__words[2])
              {
LABEL_131:
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                  if (v925)
                    goto LABEL_135;
                  goto LABEL_141;
                }
              }
            }
LABEL_134:
            if (v38)
              goto LABEL_135;
            goto LABEL_141;
          }
        }
        memcpy(v35, &__s, v34);
        goto LABEL_60;
      }
    }
    memmove(v23, v21, v22);
    goto LABEL_32;
  }
LABEL_155:
  sub_223AF0EC4(&__s);
  if (*(int *)__s[7] <= 3)
  {
    v97 = *((unsigned __int8 *)__s + 72);
    v98 = sub_22322F254((uint64_t)__s, "OSLogSurrogateAppender", 1, 0);
    v99 = v98;
    if (v97 || v98 != 0)
    {
      v926 = v97;
      *(_QWORD *)v971 = &__s;
      *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v971[24] = 3;
      v972 = "unknown file";
      v973 = 297;
      v975 = 0;
      v976 = 0;
      v974 = (uint64_t *)"unknown function";
      v933 = *(_QWORD *)(v7 + 20992);
      v101 = *(_QWORD *)(v7 + 20984);
      v102 = **(_QWORD **)v971;
      v103 = (const char *)(**(_QWORD **)v971 + 16);
      v917 = v103;
      if (*(char *)(**(_QWORD **)v971 + 39) < 0)
      {
        v103 = *(const char **)(v102 + 16);
        v104 = *(_QWORD *)(v102 + 24);
        v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v106 & 1) != 0)
          goto LABEL_164;
      }
      else
      {
        v104 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
        v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v105 & 1) != 0)
          goto LABEL_164;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v992);
        sub_223199C58("com.apple.cv3d", (unint64_t)v992, byte_255788F40);
        if (v992[24] && (v992[23] & 0x80000000) != 0)
          operator delete(*(void **)v992);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_164:
      if (byte_255788F40[23] >= 0)
        v107 = byte_255788F40;
      else
        v107 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v108 = byte_255788F40[23];
      else
        v108 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v992 = os_log_create(v107, v103);
      v109 = &v992[8];
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v108 >= 0x17)
      {
        v110 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v110 = v108 | 7;
        v111 = v110 + 1;
        v109 = operator new(v110 + 1);
        *(_QWORD *)&v992[16] = v108;
        *(_QWORD *)&v992[24] = v111 | 0x8000000000000000;
        *(_QWORD *)&v992[8] = v109;
      }
      else
      {
        v992[31] = v108;
        if (!v108)
        {
LABEL_178:
          v109[v108] = 0;
          v992[32] = 1;
          v112 = &v992[40];
          if (v104 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v104 >= 0x17)
          {
            v114 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v104 | 7) != 0x17)
              v114 = v104 | 7;
            v115 = v114 + 1;
            v112 = operator new(v114 + 1);
            *(_QWORD *)&v992[48] = v104;
            *(_QWORD *)&v992[56] = v115 | 0x8000000000000000;
            *(_QWORD *)&v992[40] = v112;
          }
          else
          {
            v992[63] = v104;
            if (!v104)
            {
              v992[40] = 0;
              v992[64] = 1;
              v113 = *(NSObject **)v992;
              if ((v992[63] & 0x80000000) == 0)
                goto LABEL_182;
              goto LABEL_188;
            }
          }
          memmove(v112, v103, v104);
          v112[v104] = 0;
          v992[64] = 1;
          v113 = *(NSObject **)v992;
          if ((v992[63] & 0x80000000) == 0)
          {
LABEL_182:
            if (!v992[32])
              goto LABEL_191;
            goto LABEL_189;
          }
LABEL_188:
          operator delete(*(void **)&v992[40]);
          if (!v992[32])
          {
LABEL_191:
            if (*(_QWORD *)v992)
              os_release(*(void **)v992);
            v116 = -858993459 * ((unint64_t)(v933 - v101) >> 12);
            if (v99 && *(_QWORD *)(v99 + 24))
            {
              v117 = _os_log_pack_size();
              v7 = a1;
              v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
              v119 = (std::__shared_weak_count *)operator new();
              v120 = v119;
              v119->__shared_owners_ = 0;
              v121 = (unint64_t *)&v119->__shared_owners_;
              v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v119->__shared_weak_owners_ = 0;
              v119[1].__vftable = v118;
              *(_QWORD *)v992 = v118;
              *(_QWORD *)&v992[8] = v118;
              *(_QWORD *)&v992[16] = v119;
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
              memset(&v992[24], 0, 24);
              do
                v123 = __ldaxr(v121);
              while (__stlxr(v123 - 1, v121));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v120);
              }
              v124 = *(_QWORD *)v992;
              v125 = (_DWORD *)_os_log_pack_fill();
              *v125 = 67109120;
              v125[1] = v116;
              v126 = operator new();
              v127 = *(unsigned __int8 *)(v102 + 39);
              v128 = v917;
              if ((v127 & 0x80u) != 0)
              {
                v128 = *(const char **)(v102 + 16);
                v127 = *(_QWORD *)(v102 + 24);
              }
              *(_QWORD *)v126 = v124;
              *(_OWORD *)(v126 + 8) = *(_OWORD *)&v992[8];
              *(_QWORD *)&v992[8] = 0;
              *(_QWORD *)&v992[16] = 0;
              *(_OWORD *)(v126 + 24) = *(_OWORD *)&v992[24];
              *(_QWORD *)&v992[24] = 0;
              *(_QWORD *)&v992[32] = 0;
              *(_QWORD *)(v126 + 40) = v128;
              *(_QWORD *)(v126 + 48) = v127;
              *(_BYTE *)(v126 + 56) = 1;
              __src.__r_.__value_.__r.__words[0] = 0;
              v957.__r_.__value_.__r.__words[0] = v126;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v99 + 24) + 40))(*(_QWORD *)(v99 + 24), &v957);
              v129 = v957.__r_.__value_.__r.__words[0];
              v957.__r_.__value_.__r.__words[0] = 0;
              if (v129)
              {
                v130 = *(std::__shared_weak_count **)(v129 + 32);
                if (v130)
                {
                  v131 = (unint64_t *)&v130->__shared_owners_;
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = *(std::__shared_weak_count **)(v129 + 16);
                if (v133)
                {
                  v134 = (unint64_t *)&v133->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
                MEMORY[0x227684CE8](v129, 0x10F0C40B62ED6C6);
                v136 = __src.__r_.__value_.__r.__words[0];
                __src.__r_.__value_.__r.__words[0] = 0;
                if (v136)
                {
                  v137 = *(std::__shared_weak_count **)(v136 + 32);
                  if (v137)
                  {
                    v138 = (unint64_t *)&v137->__shared_owners_;
                    do
                      v139 = __ldaxr(v138);
                    while (__stlxr(v139 - 1, v138));
                    if (!v139)
                    {
                      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                      std::__shared_weak_count::__release_weak(v137);
                    }
                  }
                  v140 = *(std::__shared_weak_count **)(v136 + 16);
                  if (v140)
                  {
                    v141 = (unint64_t *)&v140->__shared_owners_;
                    do
                      v142 = __ldaxr(v141);
                    while (__stlxr(v142 - 1, v141));
                    if (!v142)
                    {
                      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                      std::__shared_weak_count::__release_weak(v140);
                    }
                  }
                  MEMORY[0x227684CE8](v136, 0x10F0C40B62ED6C6);
                }
              }
              v143 = *(std::__shared_weak_count **)&v992[32];
              v144 = v926;
              if (*(_QWORD *)&v992[32])
              {
                v145 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v147 = *(std::__shared_weak_count **)&v992[16];
              if (*(_QWORD *)&v992[16])
              {
                v148 = (unint64_t *)(*(_QWORD *)&v992[16] + 8);
                do
                  v149 = __ldaxr(v148);
                while (__stlxr(v149 - 1, v148));
                if (!v149)
                {
                  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                  std::__shared_weak_count::__release_weak(v147);
                }
              }
            }
            else
            {
              os_log_type_enabled(v113, OS_LOG_TYPE_INFO);
              *(_DWORD *)v992 = 67109120;
              *(_DWORD *)&v992[4] = -858993459 * ((unint64_t)(v933 - v101) >> 12);
              LODWORD(v868) = 8;
              v867 = v992;
              v150 = (void *)_os_log_send_and_compose_impl();
              v7 = a1;
              v144 = v926;
              if (v150)
                free(v150);
            }
            if (v144)
            {
              sub_22322C138((uint64_t)v971, "Allocated blocks before update: %i", -858993459 * ((uint64_t)(*(_QWORD *)(v7 + 20992) - *(_QWORD *)(v7 + 20984)) >> 12));
              sub_223182C08((uint64_t)v971);
            }
            sub_223182C08((uint64_t)v971);
            v151 = v976;
            if (v976)
            {
              v152 = (unint64_t *)&v976->__shared_owners_;
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            goto LABEL_245;
          }
LABEL_189:
          if ((v992[31] & 0x80000000) != 0)
            operator delete(*(void **)&v992[8]);
          goto LABEL_191;
        }
      }
      memmove(v109, v107, v108);
      goto LABEL_178;
    }
  }
LABEL_245:
  *(_QWORD *)&v955 = 0;
  rep = 0;
  BYTE8(v955) = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  BYTE8(v955) = 1;
  kdebug_trace();
  v154 = v7 + 21344;
  if (*(_BYTE *)(v7 + 23432))
    v155 = 1;
  else
    v155 = *a4 == 0;
  v156 = !v155;
  *a4 = v156;
  v953 = 0uLL;
  v952 = 0;
  v950 = 0;
  __p = 0;
  v951 = 0;
  *(_DWORD *)(v7 + 22960) = 0;
  v948 = 0uLL;
  v947 = 0;
  v157 = *(_QWORD *)(v7 + 21520);
  v874 = v7 + 21344;
  if (!v157)
  {
    v170 = 0;
    goto LABEL_346;
  }
  v158 = (int32x4_t)((__n128 (*)(uint64_t, unsigned __int8 **, uint64_t))*(_QWORD *)(*(_QWORD *)v157 + 40))(v157, a2, 1);
  v159 = *(_QWORD *)(v7 + 21520);
  v158.i64[0] = *(_QWORD *)a5;
  v158.i32[2] = *(_DWORD *)(a5 + 8);
  v160.i64[0] = *(_QWORD *)(a5 + 16);
  v160.i32[2] = *(_DWORD *)(a5 + 24);
  v161.i32[0] = *(_DWORD *)(a5 + 40);
  v162.i64[0] = *(_QWORD *)(a5 + 48);
  v162.i32[2] = *(_DWORD *)(a5 + 56);
  *(_QWORD *)&v163 = vzip1q_s32(v158, v160).u64[0];
  v164 = (int8x16_t)vnegq_f32(v162);
  v165 = (int8x16_t)vtrn2q_s32(v158, v160);
  v165.i32[2] = HIDWORD(*(_QWORD *)(a5 + 32));
  v166 = (int8x16_t)vzip2q_s32(v158, v160);
  v166.i32[2] = v161.i32[0];
  v167 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a5 + 32), *(float32x2_t *)v164.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a5 + 32), 1), *(float32x2_t *)v162.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL), v161).u32[0];
  *((_QWORD *)&v163 + 1) = *(_QWORD *)(a5 + 32);
  HIDWORD(v168) = 0;
  LODWORD(v168) = vdupq_lane_s32(*(int32x2_t *)&v165, 0).i32[3];
  *(_QWORD *)((char *)&v168 + 4) = vextq_s8(v165, v166, 4uLL).u64[0];
  v166.i64[1] = vdupq_laneq_s32((int32x4_t)v166, 2).u32[0];
  *(_OWORD *)&v992[16] = v168;
  *(int8x16_t *)&v992[32] = v166;
  *(_OWORD *)v992 = v163;
  *(float32x2_t *)&v992[48] = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v163, *(float *)v164.i32), *(float32x2_t *)v165.i8, *(float32x2_t *)v162.f32, 1), *(float32x2_t *)v166.i8, v162, 2);
  *(_DWORD *)&v992[56] = v167;
  *(_DWORD *)&v992[60] = 1065353216;
  *(_OWORD *)&v957.__r_.__value_.__r.__words[1] = 0uLL;
  v957.__r_.__value_.__r.__words[0] = (std::string::size_type)&v957.__r_.__value_.__l.__size_;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, _BYTE *, uint64_t, std::string *, uint64_t))(*(_QWORD *)v159 + 48))(v971, v159, 4, v992, 1, &v957, a3);
  v169 = *(char **)v971;
  v947 = *(void **)v971;
  v934 = *(char **)&v971[8];
  v948 = *(_OWORD *)&v971[8];
  memset(v971, 0, 24);
  sub_223198030((uint64_t)&v957, (_QWORD *)v957.__r_.__value_.__l.__size_);
  sub_223AF0EC4(&__s);
  v170 = v934;
  if (*(int *)__s[7] <= 3)
  {
    v171 = *((unsigned __int8 *)__s + 72);
    v172 = sub_22322F254((uint64_t)__s, "OSLogSurrogateAppender", 1, 0);
    v173 = v172;
    if (v171 || v172)
    {
      *(_QWORD *)v971 = &__s;
      *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v971[24] = 3;
      v972 = "unknown file";
      v973 = 320;
      v975 = 0;
      v976 = 0;
      v974 = (uint64_t *)"unknown function";
      v935 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 21520) + 72))(*(_QWORD *)(v7 + 21520));
      v918 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 21520) + 72))(*(_QWORD *)(v7 + 21520));
      v174 = **(_QWORD **)v971;
      v175 = (const char *)(**(_QWORD **)v971 + 16);
      v912 = v175;
      if (*(char *)(**(_QWORD **)v971 + 39) < 0)
      {
        v175 = *(const char **)(v174 + 16);
        v176 = *(_QWORD *)(v174 + 24);
        v178 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v178 & 1) != 0)
          goto LABEL_260;
      }
      else
      {
        v176 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
        v177 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v177 & 1) != 0)
          goto LABEL_260;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v992);
        sub_223199C58("com.apple.cv3d", (unint64_t)v992, byte_255788F40);
        if (v992[24] && (v992[23] & 0x80000000) != 0)
          operator delete(*(void **)v992);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_260:
      if (byte_255788F40[23] >= 0)
        v179 = byte_255788F40;
      else
        v179 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v180 = byte_255788F40[23];
      else
        v180 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v992 = os_log_create(v179, v175);
      v181 = &v992[8];
      if (v180 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v180 >= 0x17)
      {
        v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v180 | 7) != 0x17)
          v182 = v180 | 7;
        v183 = v182 + 1;
        v181 = operator new(v182 + 1);
        *(_QWORD *)&v992[16] = v180;
        *(_QWORD *)&v992[24] = v183 | 0x8000000000000000;
        *(_QWORD *)&v992[8] = v181;
      }
      else
      {
        v992[31] = v180;
        if (!v180)
        {
LABEL_274:
          v181[v180] = 0;
          v992[32] = 1;
          v184 = &v992[40];
          if (v176 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v7 = a1;
          v154 = v874;
          if (v176 >= 0x17)
          {
            v185 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v176 | 7) != 0x17)
              v185 = v176 | 7;
            v186 = v185 + 1;
            v184 = operator new(v185 + 1);
            *(_QWORD *)&v992[48] = v176;
            *(_QWORD *)&v992[56] = v186 | 0x8000000000000000;
            *(_QWORD *)&v992[40] = v184;
          }
          else
          {
            v992[63] = v176;
            if (!v176)
              goto LABEL_282;
          }
          memmove(v184, v175, v176);
LABEL_282:
          v184[v176] = 0;
          v992[64] = 1;
          v187 = *(NSObject **)v992;
          if ((v992[63] & 0x80000000) != 0)
            operator delete(*(void **)&v992[40]);
          if (v992[32] && (v992[31] & 0x80000000) != 0)
            operator delete(*(void **)&v992[8]);
          if (*(_QWORD *)v992)
            os_release(*(void **)v992);
          if (v173 && *(_QWORD *)(v173 + 24))
          {
            v188 = _os_log_pack_size();
            v189 = (std::__shared_weak_count_vtbl *)operator new(v188, (std::align_val_t)8uLL);
            v190 = (std::__shared_weak_count *)operator new();
            v191 = v190;
            v190->__shared_owners_ = 0;
            v192 = (unint64_t *)&v190->__shared_owners_;
            v190->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v190->__shared_weak_owners_ = 0;
            v190[1].__vftable = v189;
            *(_QWORD *)v992 = v189;
            *(_QWORD *)&v992[8] = v189;
            *(_QWORD *)&v992[16] = v190;
            do
              v193 = __ldxr(v192);
            while (__stxr(v193 + 1, v192));
            memset(&v992[24], 0, 24);
            do
              v194 = __ldaxr(v192);
            while (__stlxr(v194 - 1, v192));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v191);
            }
            v195 = *(_QWORD *)v992;
            v196 = _os_log_pack_fill();
            v197 = *(_QWORD *)(v935 + 24);
            v198 = *(_QWORD *)(v918 + 16);
            *(_DWORD *)v196 = 134218240;
            *(_QWORD *)(v196 + 4) = v197;
            *(_WORD *)(v196 + 12) = 2048;
            *(_QWORD *)(v196 + 14) = v198;
            v199 = operator new();
            v200 = *(unsigned __int8 *)(v174 + 39);
            v201 = v912;
            if ((v200 & 0x80u) != 0)
            {
              v201 = *(const char **)(v174 + 16);
              v200 = *(_QWORD *)(v174 + 24);
            }
            *(_QWORD *)v199 = v195;
            *(_OWORD *)(v199 + 8) = *(_OWORD *)&v992[8];
            *(_QWORD *)&v992[8] = 0;
            *(_QWORD *)&v992[16] = 0;
            *(_OWORD *)(v199 + 24) = *(_OWORD *)&v992[24];
            *(_QWORD *)&v992[24] = 0;
            *(_QWORD *)&v992[32] = 0;
            *(_QWORD *)(v199 + 40) = v201;
            *(_QWORD *)(v199 + 48) = v200;
            *(_BYTE *)(v199 + 56) = 1;
            __src.__r_.__value_.__r.__words[0] = 0;
            v957.__r_.__value_.__r.__words[0] = v199;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v173 + 24) + 40))(*(_QWORD *)(v173 + 24), &v957);
            v202 = v957.__r_.__value_.__r.__words[0];
            v957.__r_.__value_.__r.__words[0] = 0;
            if (v202)
            {
              v203 = *(std::__shared_weak_count **)(v202 + 32);
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              v206 = *(std::__shared_weak_count **)(v202 + 16);
              if (v206)
              {
                v207 = (unint64_t *)&v206->__shared_owners_;
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
              MEMORY[0x227684CE8](v202, 0x10F0C40B62ED6C6);
              v209 = __src.__r_.__value_.__r.__words[0];
              __src.__r_.__value_.__r.__words[0] = 0;
              if (v209)
              {
                v210 = *(std::__shared_weak_count **)(v209 + 32);
                if (v210)
                {
                  v211 = (unint64_t *)&v210->__shared_owners_;
                  do
                    v212 = __ldaxr(v211);
                  while (__stlxr(v212 - 1, v211));
                  if (!v212)
                  {
                    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                    std::__shared_weak_count::__release_weak(v210);
                  }
                }
                v213 = *(std::__shared_weak_count **)(v209 + 16);
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                MEMORY[0x227684CE8](v209, 0x10F0C40B62ED6C6);
              }
            }
            v216 = *(std::__shared_weak_count **)&v992[32];
            if (*(_QWORD *)&v992[32])
            {
              v217 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            v219 = *(std::__shared_weak_count **)&v992[16];
            if (*(_QWORD *)&v992[16])
            {
              v220 = (unint64_t *)(*(_QWORD *)&v992[16] + 8);
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
          }
          else
          {
            os_log_type_enabled(v187, OS_LOG_TYPE_INFO);
            v222 = *(_QWORD *)(v935 + 24);
            v223 = *(_QWORD *)(v918 + 16);
            *(_DWORD *)v992 = 134218240;
            *(_QWORD *)&v992[4] = v222;
            *(_WORD *)&v992[12] = 2048;
            *(_QWORD *)&v992[14] = v223;
            LODWORD(v868) = 22;
            v867 = v992;
            v224 = (void *)_os_log_send_and_compose_impl();
            if (v224)
              free(v224);
          }
          if (v171)
          {
            v225 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 21520) + 72))(*(_QWORD *)(a1 + 21520))
                             + 24);
            v226 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 21520) + 72))(*(_QWORD *)(a1 + 21520));
            sub_22322C138((uint64_t)v971, "Backlogged %llu frames; Updated %llu frames.", v225, *(_QWORD *)(v226 + 16));
            sub_223182C08((uint64_t)v971);
          }
          sub_223182C08((uint64_t)v971);
          v227 = v976;
          if (v976)
          {
            v228 = (unint64_t *)&v976->__shared_owners_;
            do
              v229 = __ldaxr(v228);
            while (__stlxr(v229 - 1, v228));
            if (!v229)
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
            }
          }
          v169 = (char *)v947;
          v170 = (char *)v948;
          goto LABEL_342;
        }
      }
      memmove(v181, v179, v180);
      goto LABEL_274;
    }
  }
LABEL_342:
  if (v169 != v170)
  {
    v230 = v169;
    do
    {
      v231 = *(_OWORD *)a6->f32;
      v232 = *(_OWORD *)a6[2].f32;
      v233 = *(_OWORD *)a6[6].f32;
      *((_OWORD *)v230 + 13) = *(_OWORD *)a6[4].f32;
      *((_OWORD *)v230 + 14) = v233;
      *((_OWORD *)v230 + 11) = v231;
      *((_OWORD *)v230 + 12) = v232;
      v230 += 248;
    }
    while (v230 != v170);
    v170 = v169;
  }
LABEL_346:
  if (*(_QWORD *)(v7 + 21520))
    v234 = (uint64_t *)&v947;
  else
    v234 = (uint64_t *)a2;
  if (*(_QWORD *)(v7 + 21520))
    v235 = (uint64_t *)&v948;
  else
    v235 = *(uint64_t **)v883;
  v236 = *v234;
  v237 = v234[1];
  if (*v234 == v237)
  {
    a7[2] = 0;
    a7[1] = 0;
    *a7 = (uint64_t)(a7 + 1);
    if (v170)
      goto LABEL_1401;
    goto LABEL_1411;
  }
  v238 = *(float32x4_t *)(v154 + 184);
  v239 = *(float32x4_t *)(v154 + 200);
  v240 = *(float32x4_t *)(v154 + 216);
  v241 = *(float32x4_t *)(v154 + 232);
  v242 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v238, COERCE_FLOAT(*(_OWORD *)a6->f32)), v239, *a6, 1), v240, *(float32x4_t *)a6->f32, 2), v241, *(float32x4_t *)a6->f32, 3);
  v243 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v238, COERCE_FLOAT(*(_OWORD *)a6[2].f32)), v239, a6[2], 1), v240, *(float32x4_t *)a6[2].f32, 2), v241, *(float32x4_t *)a6[2].f32, 3);
  v244 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v238, COERCE_FLOAT(*(_OWORD *)a6[4].f32)), v239, a6[4], 1), v240, *(float32x4_t *)a6[4].f32, 2), v241, *(float32x4_t *)a6[4].f32, 3);
  v245 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v238, COERCE_FLOAT(*(_OWORD *)a6[6].f32)), v239, a6[6], 1), v240, *(float32x4_t *)a6[6].f32, 2), v241, *(float32x4_t *)a6[6].f32, 3);
  v249 = vtrn2q_s32((int32x4_t)v242, (int32x4_t)v243);
  v246 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v249.i8, 1);
  v241.i64[0] = vzip2q_s32((int32x4_t)v242, (int32x4_t)v243).u64[0];
  v247 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v249.i8, 0);
  *(int32x2_t *)v243.f32 = vzip1_s32(*(int32x2_t *)v242.f32, *(int32x2_t *)v243.f32);
  *(float32x2_t *)v242.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v243.f32, COERCE_FLOAT(v245.i32[0] ^ 0x80000000)), *(float32x2_t *)v249.i8, (float32x2_t)(v245.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v241.f32, COERCE_FLOAT(v245.i32[2] ^ 0x80000000));
  v248 = (float32x2_t)vextq_s8(v244, v244, 8uLL).u64[0];
  *(float32x2_t *)v249.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v244.i8, (float32x2_t)(v245.i64[0] ^ 0x8000000080000000)), (float32x2_t)vdup_lane_s32((int32x2_t)(v245.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v244.i8, 1), (float32x2_t)(v245.i64[1] ^ 0xFFFFFFFF80000000), v248);
  v245.i64[0] = vextq_s8(v247, v246, 0xCuLL).u64[0];
  v242.i64[1] = v249.i64[0];
  v249.i64[0] = *(_QWORD *)(a5 + 48);
  v246.i32[0] = *(_DWORD *)(a5 + 56);
  *(float32x2_t *)v243.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v243.f32, *(float *)v249.i32), *(float32x2_t *)v245.f32, *(float32x2_t *)v249.i8, 1), *(float32x2_t *)v241.f32, *(float *)v246.i32);
  *(float32x2_t *)&v243.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v244.i8, *(float32x2_t *)v249.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v249.i8, 1), *(float32x2_t *)v244.i8, 1), *(float32x2_t *)v246.i8, v248);
  v250 = (int8x16_t)vaddq_f32(v243, v242);
  v946 = v250.i32[2];
  v945 = v250.i64[0];
  if (*(_BYTE *)v154)
  {
    if (v236 != v237)
    {
LABEL_355:
      v879 = 0;
      v251 = (_QWORD *)(v7 + 64);
      v913 = v7 + 23376;
      do
      {
        if (!*(_BYTE *)(v236 + 240))
        {
          v254 = sub_223340F28(v251, v236);
          if ((!v254 || !*((_BYTE *)v254 + 610))
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 348, (uint64_t)"KeyframeIsIntegrated(keyframe_data.uuid)", 40, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          goto LABEL_356;
        }
        sub_223AFB008(v7, v236);
        if ((*(_BYTE *)(v236 + 240) & 0x30) == 0)
          goto LABEL_383;
        v252 = v950;
        if (v950 < v951)
        {
          *(_OWORD *)v950 = *(_OWORD *)v236;
          v253 = v252 + 16;
          goto LABEL_382;
        }
        v255 = (char *)__p;
        v256 = (v950 - (_BYTE *)__p) >> 4;
        v257 = v256 + 1;
        if ((unint64_t)(v256 + 1) >> 60)
          sub_22316E078();
        v258 = v951 - (_BYTE *)__p;
        if ((v951 - (_BYTE *)__p) >> 3 > v257)
          v257 = v258 >> 3;
        if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF0)
          v259 = 0xFFFFFFFFFFFFFFFLL;
        else
          v259 = v257;
        if (v259)
        {
          if (v259 >> 60)
            sub_223174E94();
          v260 = (char *)operator new(16 * v259);
          v261 = &v260[16 * v256];
          *(_OWORD *)v261 = *(_OWORD *)v236;
          v262 = v261;
          if (v252 == v255)
          {
LABEL_380:
            v253 = v261 + 16;
            __p = v262;
            v951 = &v260[16 * v259];
            if (!v252)
              goto LABEL_382;
LABEL_381:
            operator delete(v252);
            goto LABEL_382;
          }
        }
        else
        {
          v260 = 0;
          v261 = (char *)(16 * v256);
          *(_OWORD *)(16 * v256) = *(_OWORD *)v236;
          v262 = (char *)(16 * v256);
          if (v252 == v255)
            goto LABEL_380;
        }
        do
        {
          *((_OWORD *)v262 - 1) = *((_OWORD *)v252 - 1);
          v262 -= 16;
          v252 -= 16;
        }
        while (v252 != v255);
        v252 = (char *)__p;
        v253 = v261 + 16;
        __p = v262;
        v951 = &v260[16 * v259];
        if (v252)
          goto LABEL_381;
LABEL_382:
        v950 = v253;
        if ((*(_BYTE *)(v236 + 240) & 0x30) != 0)
          goto LABEL_356;
LABEL_383:
        if (!*(_QWORD *)(v236 + 16))
          goto LABEL_356;
        sub_223AFE31C(v7, (uint64_t)&v945, v236);
        v263 = sub_22342DA5C(v251, v236);
        ++v879;
        if (*(_BYTE *)(v154 + 2088) || *a4 || !v263)
          goto LABEL_356;
        v268 = *(int8x8_t *)(v7 + 21600);
        if (v268)
        {
          v269 = *((unsigned __int16 *)v263 + 304);
          v270 = (uint8x8_t)vcnt_s8(v268);
          v270.i16[0] = vaddlv_u8(v270);
          if (v270.u32[0] > 1uLL)
          {
            v271 = *((unsigned __int16 *)v263 + 304);
            if (*(_QWORD *)&v268 <= v269)
              v271 = v269 % *(_QWORD *)&v268;
          }
          else
          {
            v271 = (v268.i32[0] - 1) & v269;
          }
          v272 = *(uint64_t ****)(*(_QWORD *)(v7 + 21592) + 8 * v271);
          if (v272)
          {
            v273 = *v272;
            if (v273)
            {
              if (v270.u32[0] < 2uLL)
              {
                v274 = *(_QWORD *)&v268 - 1;
                while (1)
                {
                  v276 = v273[1];
                  if (v276 == (uint64_t *)v269)
                  {
                    if (*((unsigned __int16 *)v273 + 8) == (_DWORD)v269)
                      goto LABEL_356;
                  }
                  else if (((unint64_t)v276 & v274) != v271)
                  {
                    goto LABEL_407;
                  }
                  v273 = (uint64_t **)*v273;
                  if (!v273)
                    goto LABEL_407;
                }
              }
              do
              {
                v275 = (unint64_t)v273[1];
                if (v275 == v269)
                {
                  if (*((unsigned __int16 *)v273 + 8) == (_DWORD)v269)
                    goto LABEL_356;
                }
                else
                {
                  if (v275 >= *(_QWORD *)&v268)
                    v275 %= *(_QWORD *)&v268;
                  if (v275 != v271)
                    break;
                }
                v273 = (uint64_t **)*v273;
              }
              while (v273);
            }
          }
        }
LABEL_407:
        v277 = (int8x16_t *)v953;
        if ((unint64_t)v953 < *((_QWORD *)&v953 + 1))
        {
          v278 = *(int8x16_t *)v236;
          *(_OWORD *)v953 = *(_OWORD *)v236;
          *(_QWORD *)&v953 = v277 + 1;
          v279 = *(_QWORD *)(v7 + 21496);
          v280 = *(_QWORD *)(v7 + 21504);
          if (v279 == v280)
            goto LABEL_440;
          goto LABEL_427;
        }
        v281 = (int8x16_t *)v952;
        v282 = (uint64_t)(v953 - (_QWORD)v952) >> 4;
        v283 = v282 + 1;
        if ((unint64_t)(v282 + 1) >> 60)
          sub_22316E078();
        v284 = *((_QWORD *)&v953 + 1) - (_QWORD)v952;
        if ((uint64_t)(*((_QWORD *)&v953 + 1) - (_QWORD)v952) >> 3 > v283)
          v283 = v284 >> 3;
        if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF0)
          v285 = 0xFFFFFFFFFFFFFFFLL;
        else
          v285 = v283;
        if (v285)
        {
          if (v285 >> 60)
            sub_223174E94();
          v286 = (char *)operator new(16 * v285);
          v287 = &v286[16 * v282];
          v278 = *(int8x16_t *)v236;
          *(_OWORD *)v287 = *(_OWORD *)v236;
          v288 = (int8x16_t *)v287;
          if (v277 == v281)
          {
LABEL_424:
            v289 = v287 + 16;
            v952 = v288;
            *((_QWORD *)&v953 + 1) = &v286[16 * v285];
            if (!v277)
              goto LABEL_426;
LABEL_425:
            operator delete(v277);
            goto LABEL_426;
          }
        }
        else
        {
          v286 = 0;
          v287 = (char *)(16 * v282);
          v278 = *(int8x16_t *)v236;
          *(_OWORD *)(16 * v282) = *(_OWORD *)v236;
          v288 = (int8x16_t *)(16 * v282);
          if (v277 == v281)
            goto LABEL_424;
        }
        do
        {
          v278 = v277[-1];
          v288[-1] = v278;
          --v288;
          --v277;
        }
        while (v277 != v281);
        v277 = (int8x16_t *)v952;
        v289 = v287 + 16;
        v952 = v288;
        *((_QWORD *)&v953 + 1) = &v286[16 * v285];
        if (v277)
          goto LABEL_425;
LABEL_426:
        *(_QWORD *)&v953 = v289;
        v279 = *(_QWORD *)(v7 + 21496);
        v280 = *(_QWORD *)(v7 + 21504);
        if (v279 == v280)
        {
LABEL_440:
          v306 = 0;
          goto LABEL_441;
        }
LABEL_427:
        v264.i64[0] = *(_QWORD *)(v236 + 176);
        v264.i32[2] = *(_DWORD *)(v236 + 184);
        v265.i64[0] = *(_QWORD *)(v236 + 192);
        v265.i32[2] = *(_DWORD *)(v236 + 200);
        v266.i32[0] = *(_DWORD *)(v236 + 216);
        v290.i64[0] = vzip1q_s32(v264, v265).u64[0];
        v267.i64[0] = *(_QWORD *)(v236 + 224);
        v267.i32[2] = *(_DWORD *)(v236 + 232);
        v291 = (int8x16_t)vnegq_f32(v267);
        v292 = (int8x16_t)vtrn2q_s32(v264, v265);
        v292.i32[2] = HIDWORD(*(_QWORD *)(v236 + 208));
        v293 = (float32x4_t)vzip2q_s32(v264, v265);
        *(float32x2_t *)v278.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v290.f32, *(float *)v291.i32), *(float32x2_t *)v292.i8, *(float32x2_t *)v267.f32, 1), *(float32x2_t *)v293.f32, v267, 2);
        v293.i32[2] = v266.i32[0];
        v294 = vdupq_lane_s32(*(int32x2_t *)v292.i8, 0);
        v292.i64[0] = vextq_s8(v292, v278, 4uLL).u64[0];
        v278.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v236 + 208), *(float32x2_t *)v291.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v236 + 208), 1), *(float32x2_t *)v267.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL), v266).u32[0]);
        v290.i64[1] = *(_QWORD *)(v236 + 208);
        v295.i32[3] = 0;
        v295.i32[0] = v294.i32[3];
        *(uint64_t *)((char *)v295.i64 + 4) = v292.i64[0];
        v293.i64[1] = vdupq_laneq_s32((int32x4_t)v293, 2).u32[0];
        v296 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)(v236 + 128))), v295, *(float32x2_t *)(v236 + 128), 1), v293, *(float32x4_t *)(v236 + 128), 2), (float32x4_t)v278, *(float32x4_t *)(v236 + 128), 3);
        v297 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)(v236 + 112))), v295, *(float32x2_t *)(v236 + 112), 1), v293, *(float32x4_t *)(v236 + 112), 2), (float32x4_t)v278, *(float32x4_t *)(v236 + 112), 3), COERCE_FLOAT(*(_OWORD *)(v236 + 80))), v296, *(float32x2_t *)(v236 + 80),
                                1),
                              vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)(v236 + 144))), v295, *(float32x2_t *)(v236 + 144), 1), v293, *(float32x4_t *)(v236 + 144), 2), (float32x4_t)v278, *(float32x4_t *)(v236 + 144), 3), *(float32x4_t *)(v236 + 80), 2), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)(v236 + 160))), v295,
                                  *(float32x2_t *)(v236 + 160),
                                  1),
                                v293,
                                *(float32x4_t *)(v236 + 160),
                                2),
                              (float32x4_t)v278,
                              *(float32x4_t *)(v236 + 160),
                              3),
                            *(float32x4_t *)(v236 + 80),
                            3);
        v298 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v297.i8, 1);
        v299 = (float32x2_t)vdup_laneq_s32((int32x4_t)v297, 2);
        v300 = (float32x2_t)vextq_s8(v297, v297, 8uLL).u64[0];
        v919 = v300;
        v927 = *(float32x2_t *)v297.i8;
        while (1)
        {
          v300.i32[0] = *(_DWORD *)(v279 + 124);
          v297.i32[0] = *(_DWORD *)(v279 + 136);
          v296.i32[0] = *(_DWORD *)(v279 + 148);
          *(float32x2_t *)v992 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v279 + 116), v927.f32[0]), v298, *(float32x2_t *)(v279 + 128)), v299, *(float32x2_t *)(v279 + 140));
          v301 = *(float ***)(v279 + 176);
          if (v301)
            break;
LABEL_428:
          v279 += 368;
          if (v279 == v280)
            goto LABEL_440;
        }
        v302 = vmla_f32(vmul_f32(v300, v927), v298, *(float32x2_t *)v297.i8);
        v300.i32[1] = v919.i32[1];
        LODWORD(v303) = vmla_f32(v302, v919, *(float32x2_t *)v296.f32).u32[0];
        v936 = v303;
        while (1)
        {
          if (*((_BYTE *)v301 + 24)
            && *((_DWORD *)v301 + 75)
            && *((float *)v301 + 60) < v303
            && *((float *)v301 + 61) > v303)
          {
            v305 = sub_223EA98C0((float *)v992, v301 + 6);
            v303 = v936;
            if ((v305 & 0x80000000) == 0)
              break;
          }
          v301 = (float **)*v301;
          if (!v301)
            goto LABEL_428;
        }
        v306 = 1;
LABEL_441:
        v307 = *(unsigned __int8 *)(*(_QWORD *)(sub_2231D04FC(*(_QWORD *)(v236 + 16)) + 40) + 164);
        v308 = (v307 != 2) & ~v306;
        *a4 = v308;
        if (v308 != 1)
        {
          if (v307 == 2)
            v314 = v306;
          else
            v314 = 1;
          if ((v314 & 1) == 0)
          {
            *(_QWORD *)v992 = v236;
            sub_223AEF408(v913, v236, (uint64_t)&unk_2245BA939, (_OWORD **)v992)[4] = 0;
          }
          goto LABEL_356;
        }
        sub_223AF0EC4(&v944);
        if (**(int **)(v944 + 56) <= 3)
        {
          v309 = *(unsigned __int8 *)(v944 + 72);
          v310 = sub_22322F254(v944, "OSLogSurrogateAppender", 1, 0);
          if (v309 || v310)
          {
            v937 = v310;
            *(_QWORD *)v971 = &v944;
            *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v971[24] = 3;
            v972 = "unknown file";
            v973 = 400;
            v974 = (uint64_t *)"unknown function";
            v975 = 0;
            v976 = 0;
            sub_2245664AC((unsigned __int8 *)v236, &__src);
            v311 = (const char *)(**(_QWORD **)v971 + 16);
            v920 = **(_QWORD **)v971;
            v888 = v311;
            if (*(char *)(**(_QWORD **)v971 + 39) < 0)
            {
              v311 = *(const char **)(v920 + 16);
              v312 = *(_QWORD *)(v920 + 24);
              v928 = v309;
              v315 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v315 & 1) == 0)
              {
LABEL_561:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&v957);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&v957, byte_255788F40);
                  if ((_BYTE)v958 && SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v957.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                  v154 = v874;
                }
              }
            }
            else
            {
              v312 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
              v928 = v309;
              v313 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v313 & 1) == 0)
                goto LABEL_561;
            }
            if (byte_255788F40[23] >= 0)
              v316 = byte_255788F40;
            else
              v316 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v317 = byte_255788F40[23];
            else
              v317 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)v992 = os_log_create(v316, v311);
            if (v317 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v317 >= 0x17)
            {
              v319 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v317 | 7) != 0x17)
                v319 = v317 | 7;
              v320 = v319 + 1;
              v318 = operator new(v319 + 1);
              *(_QWORD *)&v992[16] = v317;
              *(_QWORD *)&v992[24] = v320 | 0x8000000000000000;
              *(_QWORD *)&v992[8] = v318;
              v154 = v874;
            }
            else
            {
              v992[31] = v317;
              v318 = &v992[8];
              if (!v317)
              {
LABEL_468:
                v318[v317] = 0;
                v992[32] = 1;
                if (v312 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v7 = a1;
                if (v312 >= 0x17)
                {
                  v323 = (v312 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v312 | 7) != 0x17)
                    v323 = v312 | 7;
                  v324 = v323 + 1;
                  v321 = operator new(v323 + 1);
                  *(_QWORD *)&v992[48] = v312;
                  *(_QWORD *)&v992[56] = v324 | 0x8000000000000000;
                  *(_QWORD *)&v992[40] = v321;
                  v322 = v928;
                }
                else
                {
                  v992[63] = v312;
                  v321 = &v992[40];
                  v322 = v928;
                  if (!v312)
                  {
LABEL_476:
                    v321[v312] = 0;
                    v992[64] = 1;
                    v325 = *(NSObject **)v992;
                    if ((v992[63] & 0x80000000) != 0)
                      operator delete(*(void **)&v992[40]);
                    if (v992[32] && (v992[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v992[8]);
                    if (*(_QWORD *)v992)
                      os_release(*(void **)v992);
                    if (v937 && *(_QWORD *)(v937 + 24))
                    {
                      v326 = _os_log_pack_size();
                      v327 = operator new(v326, (std::align_val_t)8uLL);
                      v328 = (_QWORD *)operator new();
                      *v328 = &off_24EC1F7F0;
                      v328[1] = 0;
                      v328[2] = 0;
                      v328[3] = v327;
                      v957.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
                      v957.__r_.__value_.__l.__size_ = (std::string::size_type)v327;
                      v957.__r_.__value_.__r.__words[2] = (std::string::size_type)v328;
                      v958 = 0uLL;
                      v329 = strlen((const char *)&__src);
                      if (v329 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v330 = v329;
                      if (v329 >= 0x17)
                      {
                        v333 = (v329 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v329 | 7) != 0x17)
                          v333 = v329 | 7;
                        v334 = v333 + 1;
                        p_s = (uint64_t *)operator new(v333 + 1);
                        *(_QWORD *)&v987 = v330;
                        *((_QWORD *)&v987 + 1) = v334 | 0x8000000000000000;
                        __s = p_s;
                      }
                      else
                      {
                        HIBYTE(v987) = v329;
                        p_s = (uint64_t *)&__s;
                        if (!v329)
                          goto LABEL_495;
                      }
                      memcpy(p_s, &__src, v330);
LABEL_495:
                      *((_BYTE *)p_s + v330) = 0;
                      v335 = (uint64_t)__s;
                      v991[0] = v987;
                      *(uint64_t *)((char *)v991 + 7) = *(_QWORD *)((char *)&v987 + 7);
                      v336 = HIBYTE(v987);
                      v337 = operator new(0x38uLL);
                      v337[1] = 0;
                      v337[2] = 0;
                      v337[3] = off_24EC1FA48;
                      *v337 = &off_24EC1F9F8;
                      v338 = v991[0];
                      v337[4] = v335;
                      v337[5] = v338;
                      *(_QWORD *)((char *)v337 + 47) = *(uint64_t *)((char *)v991 + 7);
                      *((_BYTE *)v337 + 55) = v336;
                      memset(v991, 0, 15);
                      v339 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
                      *(_QWORD *)&v958 = v337 + 3;
                      *((_QWORD *)&v958 + 1) = v337;
                      if (v339)
                      {
                        v340 = (unint64_t *)&v339->__shared_owners_;
                        do
                          v341 = __ldaxr(v340);
                        while (__stlxr(v341 - 1, v340));
                        if (!v341)
                        {
                          ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                          std::__shared_weak_count::__release_weak(v339);
                        }
                      }
                      *(std::string *)v992 = v957;
                      v342 = v958;
                      if (v957.__r_.__value_.__r.__words[2])
                      {
                        v343 = (unint64_t *)(v957.__r_.__value_.__r.__words[2] + 8);
                        do
                          v344 = __ldxr(v343);
                        while (__stxr(v344 + 1, v343));
                      }
                      v345 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
                      *(_QWORD *)&v992[24] = v342;
                      *(_QWORD *)&v992[32] = *((_QWORD *)&v958 + 1);
                      if (*((_QWORD *)&v958 + 1))
                      {
                        v346 = (unint64_t *)(*((_QWORD *)&v958 + 1) + 8);
                        do
                          v347 = __ldxr(v346);
                        while (__stxr(v347 + 1, v346));
                        *(_QWORD *)&v992[40] = v342;
                        do
                          v348 = __ldaxr(v346);
                        while (__stlxr(v348 - 1, v346));
                        if (!v348)
                        {
                          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                          std::__shared_weak_count::__release_weak(v345);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v992[40] = v342;
                      }
                      v349 = (std::__shared_weak_count *)v957.__r_.__value_.__r.__words[2];
                      if (v957.__r_.__value_.__r.__words[2])
                      {
                        v350 = (unint64_t *)(v957.__r_.__value_.__r.__words[2] + 8);
                        do
                          v351 = __ldaxr(v350);
                        while (__stlxr(v351 - 1, v350));
                        if (!v351)
                        {
                          ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                          std::__shared_weak_count::__release_weak(v349);
                        }
                      }
                      if (*(char *)(*(_QWORD *)&v992[40] + 31) >= 0)
                        v352 = *(_QWORD *)&v992[40] + 8;
                      else
                        v352 = *(_QWORD *)(*(_QWORD *)&v992[40] + 8);
                      v353 = *(_QWORD *)v992;
                      v354 = _os_log_pack_fill();
                      *(_DWORD *)v354 = 136315138;
                      *(_QWORD *)(v354 + 4) = v352;
                      v355 = operator new();
                      v356 = *(unsigned __int8 *)(v920 + 39);
                      v357 = v888;
                      if ((v356 & 0x80u) != 0)
                      {
                        v357 = *(const char **)(v920 + 16);
                        v356 = *(_QWORD *)(v920 + 24);
                      }
                      *(_QWORD *)v355 = v353;
                      *(_OWORD *)(v355 + 8) = *(_OWORD *)&v992[8];
                      *(_QWORD *)&v992[8] = 0;
                      *(_QWORD *)&v992[16] = 0;
                      *(_OWORD *)(v355 + 24) = *(_OWORD *)&v992[24];
                      *(_QWORD *)&v992[24] = 0;
                      *(_QWORD *)&v992[32] = 0;
                      *(_QWORD *)(v355 + 40) = v357;
                      *(_QWORD *)(v355 + 48) = v356;
                      *(_BYTE *)(v355 + 56) = 1;
                      __s = 0;
                      v957.__r_.__value_.__r.__words[0] = v355;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v937 + 24) + 40))(*(_QWORD *)(v937 + 24), &v957);
                      v358 = v957.__r_.__value_.__r.__words[0];
                      v957.__r_.__value_.__r.__words[0] = 0;
                      v322 = v928;
                      if (v358)
                      {
                        v359 = *(std::__shared_weak_count **)(v358 + 32);
                        if (v359)
                        {
                          v360 = (unint64_t *)&v359->__shared_owners_;
                          do
                            v361 = __ldaxr(v360);
                          while (__stlxr(v361 - 1, v360));
                          if (!v361)
                          {
                            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                            std::__shared_weak_count::__release_weak(v359);
                          }
                        }
                        v362 = *(std::__shared_weak_count **)(v358 + 16);
                        if (v362)
                        {
                          v363 = (unint64_t *)&v362->__shared_owners_;
                          do
                            v364 = __ldaxr(v363);
                          while (__stlxr(v364 - 1, v363));
                          if (!v364)
                          {
                            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                            std::__shared_weak_count::__release_weak(v362);
                          }
                        }
                        MEMORY[0x227684CE8](v358, 0x10F0C40B62ED6C6);
                        v365 = (uint64_t)__s;
                        __s = 0;
                        if (v365)
                        {
                          v366 = *(std::__shared_weak_count **)(v365 + 32);
                          if (v366)
                          {
                            v367 = (unint64_t *)&v366->__shared_owners_;
                            do
                              v368 = __ldaxr(v367);
                            while (__stlxr(v368 - 1, v367));
                            if (!v368)
                            {
                              ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                              std::__shared_weak_count::__release_weak(v366);
                            }
                          }
                          v369 = *(std::__shared_weak_count **)(v365 + 16);
                          if (v369)
                          {
                            v370 = (unint64_t *)&v369->__shared_owners_;
                            do
                              v371 = __ldaxr(v370);
                            while (__stlxr(v371 - 1, v370));
                            if (!v371)
                            {
                              ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                              std::__shared_weak_count::__release_weak(v369);
                            }
                          }
                          MEMORY[0x227684CE8](v365, 0x10F0C40B62ED6C6);
                        }
                      }
                      v372 = *(std::__shared_weak_count **)&v992[32];
                      if (*(_QWORD *)&v992[32])
                      {
                        v373 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
                        do
                          v374 = __ldaxr(v373);
                        while (__stlxr(v374 - 1, v373));
                        if (!v374)
                        {
                          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                          std::__shared_weak_count::__release_weak(v372);
                        }
                      }
                      v375 = *(std::__shared_weak_count **)&v992[16];
                      if (*(_QWORD *)&v992[16])
                      {
                        v376 = (unint64_t *)(*(_QWORD *)&v992[16] + 8);
                        do
                          v377 = __ldaxr(v376);
                        while (__stlxr(v377 - 1, v376));
                        if (!v377)
                        {
                          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                          std::__shared_weak_count::__release_weak(v375);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v325, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v992 = 136315138;
                      *(_QWORD *)&v992[4] = &__src;
                      LODWORD(v868) = 12;
                      v867 = v992;
                      v332 = (void *)_os_log_send_and_compose_impl();
                      if (v332)
                        free(v332);
                    }
                    if (v322)
                    {
                      sub_2245664AC((unsigned __int8 *)v236, v992);
                      sub_22322C138((uint64_t)v971, "New keyframe %s outside current boundaries triggered clustering recompute", v992);
                      sub_223182C08((uint64_t)v971);
                    }
                    sub_223182C08((uint64_t)v971);
                    v378 = v976;
                    if (v976)
                    {
                      v379 = (unint64_t *)&v976->__shared_owners_;
                      do
                        v380 = __ldaxr(v379);
                      while (__stlxr(v380 - 1, v379));
                      if (!v380)
                      {
                        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                        std::__shared_weak_count::__release_weak(v378);
                      }
                    }
                    goto LABEL_356;
                  }
                }
                memmove(v321, v311, v312);
                goto LABEL_476;
              }
            }
            memmove(v318, v316, v317);
            goto LABEL_468;
          }
        }
LABEL_356:
        v236 += 248;
      }
      while (v236 != v237);
    }
  }
  else
  {
    *(float32x2_t *)v250.i8 = *a6;
    *(float32x2_t *)v249.i8 = a6[2];
    v381 = (float32x2_t)vzip1_s32((int32x2_t)*a6, *(int32x2_t *)v249.i8);
    v250.i32[2] = a6[1].i32[0];
    v249.i32[2] = a6[3].i32[0];
    v244.i32[0] = a6[5].i32[0];
    v249.i64[0] = vtrn2q_s32((int32x4_t)v250, v249).u64[0];
    v250.i32[3] = v249.i32[2];
    v382 = vmla_f32(vmul_f32(v381, 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v249.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v249.i8, 1), 0xCuLL));
    __asm { FMOV            V1.2S, #-1.0 }
    *(float32x2_t *)v387.f32 = vmla_f32(v382, _D1, (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL));
    *(float32x2_t *)&v387.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a6[4], 0), 0, a6[4], 1), _D1, *(float32x2_t *)v244.i8);
    v388 = vnegq_f32(v387);
    LODWORD(__src.__r_.__value_.__r.__words[1]) = v388.i32[2];
    __src.__r_.__value_.__r.__words[0] = v388.i64[0];
    v389 = vabsq_f32(v387);
    v390 = v389.f32[1];
    v391 = v389.f32[1] > v389.f32[0];
    if (v389.f32[1] <= v389.f32[0])
      v390 = v389.f32[0];
    if (v390 < v389.f32[2])
      v391 = 2;
    if (v391 == 1)
    {
      if (v388.f32[1] < 0.0)
        v392 = 2;
      else
        v392 = 3;
    }
    else if (v391)
    {
      if (*(float *)((unint64_t)&__src | (4 * v391)) < 0.0)
        v392 = 4;
      else
        v392 = 5;
    }
    else
    {
      v392 = v388.f32[0] >= 0.0;
    }
    *(_DWORD *)(v154 + 4) = v392;
    *(_BYTE *)v154 = 1;
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v393 = sub_2241471F8();
      v394 = v393[2];
      if (!v394)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v394 = v393[2];
      }
      v395 = *(_QWORD *)(v394 + 64);
      v396 = (std::mutex *)(v395 + 32);
      std::mutex::lock((std::mutex *)(v395 + 32));
      v398 = *(_QWORD *)(v395 + 96);
      v397 = *(_QWORD *)(v395 + 104);
      std::mutex::unlock(v396);
      if (v398 != v397)
      {
        *(_QWORD *)v992 = "cv3d.recon.";
        *(_QWORD *)&v992[8] = 11;
        *(_QWORD *)&v992[16] = "Stats.KeyframeOccupancy.MeshingWorldUp";
        *(_QWORD *)&v992[24] = 38;
        sub_2231A9820((uint64_t)v992, (uint64_t)&v992[32], 0, 0, (std::string *)v971);
        v399 = v971[23];
        v400 = *(_BYTE **)v971;
        sub_2241471F8();
        if (v399 >= 0)
          v401 = v971;
        else
          v401 = v400;
        v402 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v401);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v402 + 24))(v402))
        {
          memset(v992, 0, 32);
          *(_DWORD *)&v992[32] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v402 + 24))(v402))
          {
            v957.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v957.__r_.__value_.__l.__size_ = 2;
            v403 = sub_2241471F8();
            sub_223B26574((uint64_t)v403, v402, (uint64_t *)&__src, (__int128 *)&v957);
          }
          kdebug_trace();
        }
        if ((v971[23] & 0x80000000) != 0)
          operator delete(*(void **)v971);
      }
    }
    v236 = *v234;
    v237 = *v235;
    if (*v234 != *v235)
      goto LABEL_355;
  }
  v405 = (_QWORD *)(v7 + 160);
  v404 = *(int **)(v7 + 160);
  a7[2] = 0;
  a7[1] = 0;
  *a7 = (uint64_t)(a7 + 1);
  v406 = v7 + 168;
  sub_2235246CC(a7, v404, (int *)(v7 + 168));
  if (*(unsigned __int8 *)(v154 + 2088) | *a4)
  {
    if (*(_QWORD *)(v7 + 23400))
    {
      v411 = *(_QWORD **)(v7 + 23392);
      if (v411)
      {
        do
        {
          v412 = (_QWORD *)*v411;
          operator delete(v411);
          v411 = v412;
        }
        while (v412);
      }
      *(_QWORD *)(v7 + 23392) = 0;
      v413 = *(_QWORD *)(v7 + 23384);
      if (v413)
      {
        for (i = 0; i != v413; ++i)
          *(_QWORD *)(*(_QWORD *)(v7 + 23376) + 8 * i) = 0;
      }
      *(_QWORD *)(v7 + 23400) = 0;
    }
    if (*(_QWORD *)(v7 + 152))
    {
      sub_223B02F4C(v7, (_QWORD *)(v7 + 136));
      if (*a4)
        sub_223B059B8();
      sub_223198030(v7 + 136, *(_QWORD **)(v7 + 144));
      *(_QWORD *)(v7 + 136) = v7 + 144;
      *(_QWORD *)(v7 + 144) = 0;
      *(_QWORD *)(v7 + 152) = 0;
    }
    if (!*(_QWORD *)(v7 + 176))
      goto LABEL_1205;
    sub_224569D7C();
    sub_224569A80();
    if (!os_variant_has_internal_diagnostics())
    {
LABEL_646:
      sub_223198030((uint64_t)v405, *(_QWORD **)(v7 + 168));
      *(_QWORD *)(v7 + 168) = 0;
      *(_QWORD *)(v7 + 176) = 0;
      *(_QWORD *)(v7 + 160) = v406;
      goto LABEL_1205;
    }
    v415 = sub_2241471F8();
    v416 = v415[2];
    if (!v416)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1462;
      }
      v416 = v415[2];
    }
    v417 = *(_QWORD *)(v416 + 64);
    v418 = (std::mutex *)(v417 + 32);
    std::mutex::lock((std::mutex *)(v417 + 32));
    v420 = *(_QWORD *)(v417 + 96);
    v419 = *(_QWORD *)(v417 + 104);
    std::mutex::unlock(v418);
    if (v420 == v419)
      goto LABEL_646;
    *(_QWORD *)v992 = "cv3d.recon.";
    *(_QWORD *)&v992[8] = 11;
    *(_QWORD *)&v992[16] = "ObservationMapping.Res.Mesh";
    *(_QWORD *)&v992[24] = 27;
    sub_2231A9820((uint64_t)v992, (uint64_t)&v992[32], 0, 0, (std::string *)v971);
    v421 = v971[23];
    v422 = *(_BYTE **)v971;
    v423 = *(_QWORD *)&v971[8];
    sub_2241471F8();
    if ((v421 & 0x80u) == 0)
      v424 = v971;
    else
      v424 = v422;
    if ((v421 & 0x80u) == 0)
      v425 = v421;
    else
      v425 = v423;
    v426 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v424, v425);
    v427 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v426 + 24))(v426);
    if ((v971[23] & 0x80000000) != 0)
      operator delete(*(void **)v971);
    v7 = a1;
    if (!v427)
      goto LABEL_646;
    *(_QWORD *)&v971[8] = 0;
    *(std::chrono::steady_clock::time_point *)v971 = std::chrono::steady_clock::now();
    v971[16] = 1;
    kdebug_trace();
    sub_224569D7C();
    sub_224569A80();
    if (!os_variant_has_internal_diagnostics())
      goto LABEL_642;
    v428 = sub_2241471F8();
    v429 = v428[2];
    if (v429)
    {
LABEL_629:
      v430 = *(_QWORD *)(v429 + 64);
      v431 = (std::mutex *)(v430 + 32);
      std::mutex::lock((std::mutex *)(v430 + 32));
      v433 = *(_QWORD *)(v430 + 96);
      v432 = *(_QWORD *)(v430 + 104);
      std::mutex::unlock(v431);
      _ZF = v433 == v432;
      v7 = a1;
      if (!_ZF)
      {
        *(_QWORD *)v992 = "cv3d.recon.";
        *(_QWORD *)&v992[8] = 11;
        *(_QWORD *)&v992[16] = "ObservationMapping.Res.Mesh";
        *(_QWORD *)&v992[24] = 27;
        sub_2231A9820((uint64_t)v992, (uint64_t)&v992[32], 0, 0, &v957);
        v434 = HIBYTE(v957.__r_.__value_.__r.__words[2]);
        v435 = *(_OWORD *)&v957.__r_.__value_.__l.__data_;
        sub_2241471F8();
        if ((v434 & 0x80u) == 0)
          v436 = &v957;
        else
          v436 = (std::string *)v435;
        if ((v434 & 0x80u) == 0)
          v437 = v434;
        else
          v437 = *((_QWORD *)&v435 + 1);
        v438 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v436, v437);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v438 + 24))(v438))
        {
          memset(v992, 0, 32);
          *(_DWORD *)&v992[32] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v438 + 24))(v438))
          {
            __src.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            __src.__r_.__value_.__l.__size_ = 2;
            v439 = sub_2241471F8();
            sub_223B675E0((uint64_t)v439, v438, v405, a1, (__int128 *)&__src);
          }
          kdebug_trace();
        }
        if (SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v957.__r_.__value_.__l.__data_);
      }
LABEL_642:
      kdebug_trace();
      v992[23] = 12;
      strcpy(v992, "GenerateMesh");
      *((_BYTE *)&v957.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v957, "KeyframeOccupancy");
      sub_22391CC34((uint64_t *)v992, (uint64_t *)&v957, (uint64_t)v971);
      if (SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v957.__r_.__value_.__l.__data_);
      if ((v992[23] & 0x80000000) != 0)
        operator delete(*(void **)v992);
      goto LABEL_646;
    }
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v429 = v428[2];
      goto LABEL_629;
    }
LABEL_1462:
    abort();
  }
  v407 = (unsigned __int8 *)v952;
  v408 = v953;
  if (v952 == (void *)v953)
    goto LABEL_1205;
  v409 = 0;
  v410 = (_QWORD *)(v7 + 64);
  v909 = (uint64_t *)(v7 + 21592);
  v894 = (_QWORD *)(v7 + 21608);
  v929 = (_QWORD *)(v7 + 64);
  category = v953;
LABEL_649:
  v903 = v409;
  do
  {
    v440 = sub_223340F28(v410, (uint64_t)v407);
    if (v440)
      v445 = v440 + 4;
    else
      v445 = 0;
    if (v440)
    {
      v446 = *(_QWORD *)(v7 + 21496);
      v447 = *(_QWORD *)(v7 + 21504);
      if (v446 != v447)
      {
        v441.i64[0] = v445[8];
        v441.i32[2] = *((_DWORD *)v445 + 18);
        v448 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v441.i8, 1);
        v449 = (float32x2_t)vdup_laneq_s32((int32x4_t)v441, 2);
        v938 = *(float32x2_t *)v441.i8;
        v921 = (float32x2_t)vextq_s8(v441, v441, 8uLL).u64[0];
        while (1)
        {
          v442.i32[0] = *(_DWORD *)(v446 + 124);
          v443.i32[0] = *(_DWORD *)(v446 + 136);
          v444.i32[0] = *(_DWORD *)(v446 + 148);
          *(float32x2_t *)v992 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v446 + 116), v938.f32[0]), v448, *(float32x2_t *)(v446 + 128)), v449, *(float32x2_t *)(v446 + 140));
          if (sub_223AD552C(v446, *((_WORD *)v445 + 288), (float *)v992, vmla_f32(vmla_f32(vmul_f32(v442, v938), v448, v443), v921, v444).f32[0]))break;
          v446 += 368;
          if (v446 == v447)
            goto LABEL_660;
        }
        v524 = *((unsigned __int16 *)v445 + 288);
        v525 = *(_QWORD *)(v7 + 21600);
        if (v525)
        {
          v526 = (uint8x8_t)vcnt_s8((int8x8_t)v525);
          v526.i16[0] = vaddlv_u8(v526);
          v408 = category;
          if (v526.u32[0] > 1uLL)
          {
            v527 = v524;
            if (v525 <= v524)
              v527 = v524 % v525;
          }
          else
          {
            v527 = ((_DWORD)v525 - 1) & v524;
          }
          v528 = *(uint64_t ****)(*v909 + 8 * v527);
          if (v528)
          {
            v529 = *v528;
            if (v529)
            {
              if (v526.u32[0] < 2uLL)
              {
                while (1)
                {
                  v531 = v529[1];
                  if (v531 == (uint64_t *)v524)
                  {
                    if (*((unsigned __int16 *)v529 + 8) == (_DWORD)v524)
                      goto LABEL_648;
                  }
                  else if (((unint64_t)v531 & (v525 - 1)) != v527)
                  {
                    goto LABEL_804;
                  }
                  v529 = (uint64_t **)*v529;
                  if (!v529)
                    goto LABEL_804;
                }
              }
              do
              {
                v530 = (unint64_t)v529[1];
                if (v530 == v524)
                {
                  if (*((unsigned __int16 *)v529 + 8) == (_DWORD)v524)
                  {
LABEL_648:
                    v407 += 16;
                    v409 = 1;
                    if (v407 == (unsigned __int8 *)v408)
                      goto LABEL_863;
                    goto LABEL_649;
                  }
                }
                else
                {
                  if (v530 >= v525)
                    v530 %= v525;
                  if (v530 != v527)
                    break;
                }
                v529 = (uint64_t **)*v529;
              }
              while (v529);
            }
          }
LABEL_804:
          if (v526.u32[0] > 1uLL)
          {
            v408 = v524;
            if (v525 <= v524)
              v408 = v524 % v525;
          }
          else
          {
            v408 = ((_DWORD)v525 - 1) & v524;
          }
          v532 = *(uint64_t ***)(*v909 + 8 * v408);
          if (v532)
          {
            v533 = *v532;
            if (v533)
            {
              if (v526.u32[0] < 2uLL)
              {
                while (1)
                {
                  v535 = v533[1];
                  if (v535 == v524)
                  {
                    if (*((unsigned __int16 *)v533 + 8) == (_DWORD)v524)
                      goto LABEL_647;
                  }
                  else if ((v535 & (v525 - 1)) != v408)
                  {
                    goto LABEL_823;
                  }
                  v533 = (uint64_t *)*v533;
                  if (!v533)
                    goto LABEL_823;
                }
              }
              do
              {
                v534 = v533[1];
                if (v534 == v524)
                {
                  if (*((unsigned __int16 *)v533 + 8) == (_DWORD)v524)
                  {
LABEL_647:
                    *(uint64_t *)((char *)v533 + 20) = 0;
                    v408 = category;
                    goto LABEL_648;
                  }
                }
                else
                {
                  if (v534 >= v525)
                    v534 %= v525;
                  if (v534 != v408)
                    break;
                }
                v533 = (uint64_t *)*v533;
              }
              while (v533);
            }
          }
        }
LABEL_823:
        v536 = operator new(0x20uLL);
        *v536 = 0;
        v536[1] = v524;
        *((_WORD *)v536 + 8) = v524;
        *(_QWORD *)((char *)v536 + 20) = 0;
        v537 = (float)(unint64_t)(*(_QWORD *)(v7 + 21616) + 1);
        v538 = *(float *)(v154 + 280);
        if (v525 && (float)(v538 * (float)v525) >= v537)
        {
          v524 = v408;
          v408 = category;
        }
        else
        {
          v539 = (v525 & (v525 - 1)) != 0;
          if (v525 < 3)
            v539 = 1;
          v540 = v539 | (2 * v525);
          v541 = vcvtps_u32_f32(v537 / v538);
          if (v540 <= v541)
            prime = v541;
          else
            prime = v540;
          if (prime == 1)
          {
            prime = 2;
            v408 = category;
          }
          else
          {
            v408 = category;
            if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v525 = *(_QWORD *)(a1 + 21600);
            }
          }
          if (prime > v525)
            goto LABEL_836;
          if (prime < v525)
          {
            v543 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 21616) / *(float *)(v154 + 280));
            if (v525 < 3
              || (v544 = (uint8x8_t)vcnt_s8((int8x8_t)v525), v544.i16[0] = vaddlv_u8(v544), v544.u32[0] > 1uLL))
            {
              v543 = std::__next_prime(v543);
            }
            else
            {
              v545 = 1 << -(char)__clz(v543 - 1);
              if (v543 >= 2)
                v543 = v545;
            }
            if (prime <= v543)
              prime = v543;
            if (prime < v525)
LABEL_836:
              sub_2231B0668((uint64_t)v909, prime);
          }
          v7 = a1;
          v525 = *(_QWORD *)(a1 + 21600);
          if ((v525 & (v525 - 1)) != 0)
          {
            if (v525 <= v524)
              v524 %= v525;
          }
          else
          {
            v524 = ((_DWORD)v525 - 1) & v524;
          }
        }
        v546 = *v909;
        v547 = *(_QWORD **)(*v909 + 8 * v524);
        if (v547)
        {
          *v536 = *v547;
          goto LABEL_859;
        }
        *v536 = *v894;
        *v894 = v536;
        *(_QWORD *)(v546 + 8 * v524) = v894;
        if (*v536)
        {
          v548 = *(_QWORD *)(*v536 + 8);
          if ((v525 & (v525 - 1)) != 0)
          {
            if (v548 >= v525)
              v548 %= v525;
          }
          else
          {
            v548 &= v525 - 1;
          }
          v547 = (_QWORD *)(*v909 + 8 * v548);
LABEL_859:
          *v547 = v536;
        }
        ++*(_QWORD *)(v7 + 21616);
        v407 += 16;
        v409 = 1;
        if (v407 == (unsigned __int8 *)v408)
          goto LABEL_863;
        goto LABEL_649;
      }
LABEL_660:
      sub_223AF0EC4(&v944);
      if (**(int **)(v944 + 56) > 3)
        goto LABEL_650;
      v450 = *(unsigned __int8 *)(v944 + 72);
      v451 = sub_22322F254(v944, "OSLogSurrogateAppender", 1, 0);
      v452 = v451;
      if (!v450 && v451 == 0)
        goto LABEL_650;
      *(_QWORD *)v971 = &v944;
      *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v971[24] = 3;
      v972 = "unknown file";
      v973 = 491;
      v974 = (uint64_t *)"unknown function";
      v975 = 0;
      v976 = 0;
      sub_2245664AC(v407, &__src);
      v454 = **(_QWORD **)v971;
      v455 = (const char *)(**(_QWORD **)v971 + 16);
      __dst = v455;
      if (*(char *)(**(_QWORD **)v971 + 39) < 0)
      {
        v455 = *(const char **)(v454 + 16);
        v456 = *(_QWORD *)(v454 + 24);
        v922 = **(_QWORD **)v971;
        v458 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v939 = v450;
        if ((v458 & 1) != 0)
          goto LABEL_669;
      }
      else
      {
        v456 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
        v922 = **(_QWORD **)v971;
        v457 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v939 = v450;
        if ((v457 & 1) != 0)
          goto LABEL_669;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v957);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v957, byte_255788F40);
        if ((_BYTE)v958 && SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v957.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_669:
      if (byte_255788F40[23] >= 0)
        v459 = byte_255788F40;
      else
        v459 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v460 = byte_255788F40[23];
      else
        v460 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v992 = os_log_create(v459, v455);
      if (v460 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v460 >= 0x17)
      {
        v462 = (v460 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v460 | 7) != 0x17)
          v462 = v460 | 7;
        v463 = v462 + 1;
        v461 = operator new(v462 + 1);
        *(_QWORD *)&v992[16] = v460;
        *(_QWORD *)&v992[24] = v463 | 0x8000000000000000;
        *(_QWORD *)&v992[8] = v461;
      }
      else
      {
        v992[31] = v460;
        v461 = &v992[8];
        if (!v460)
        {
LABEL_683:
          v461[v460] = 0;
          v992[32] = 1;
          if (v456 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v410 = v929;
          v408 = category;
          if (v456 >= 0x17)
          {
            v466 = (v456 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v456 | 7) != 0x17)
              v466 = v456 | 7;
            v467 = v466 + 1;
            v464 = operator new(v466 + 1);
            *(_QWORD *)&v992[48] = v456;
            *(_QWORD *)&v992[56] = v467 | 0x8000000000000000;
            *(_QWORD *)&v992[40] = v464;
          }
          else
          {
            v992[63] = v456;
            v464 = &v992[40];
            if (!v456)
            {
              v992[40] = 0;
              v992[64] = 1;
              v465 = *(NSObject **)v992;
              if ((v992[63] & 0x80000000) == 0)
                goto LABEL_687;
              goto LABEL_693;
            }
          }
          memmove(v464, v455, v456);
          v464[v456] = 0;
          v992[64] = 1;
          v465 = *(NSObject **)v992;
          if ((v992[63] & 0x80000000) == 0)
          {
LABEL_687:
            v154 = v874;
            if (!v992[32])
              goto LABEL_696;
            goto LABEL_694;
          }
LABEL_693:
          operator delete(*(void **)&v992[40]);
          v154 = v874;
          if (!v992[32])
            goto LABEL_696;
LABEL_694:
          if ((v992[31] & 0x80000000) != 0)
            operator delete(*(void **)&v992[8]);
LABEL_696:
          if (*(_QWORD *)v992)
            os_release(*(void **)v992);
          if (!v452 || !*(_QWORD *)(v452 + 24))
          {
            os_log_type_enabled(v465, OS_LOG_TYPE_INFO);
            v474 = v939;
            *(_DWORD *)v992 = 136315138;
            *(_QWORD *)&v992[4] = &__src;
            LODWORD(v868) = 12;
            v867 = v992;
            v475 = (void *)_os_log_send_and_compose_impl();
            if (v475)
            {
              free(v475);
              if (!v939)
                goto LABEL_770;
              goto LABEL_769;
            }
            goto LABEL_768;
          }
          v468 = _os_log_pack_size();
          v469 = operator new(v468, (std::align_val_t)8uLL);
          v470 = (_QWORD *)operator new();
          *v470 = &off_24EC1F7F0;
          v470[1] = 0;
          v470[2] = 0;
          v470[3] = v469;
          v957.__r_.__value_.__r.__words[0] = (std::string::size_type)v469;
          v957.__r_.__value_.__l.__size_ = (std::string::size_type)v469;
          v957.__r_.__value_.__r.__words[2] = (std::string::size_type)v470;
          v958 = 0uLL;
          v471 = strlen((const char *)&__src);
          if (v471 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v472 = v471;
          if (v471 >= 0x17)
          {
            v476 = (v471 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v471 | 7) != 0x17)
              v476 = v471 | 7;
            v477 = v476 + 1;
            v473 = (uint64_t *)operator new(v476 + 1);
            *(_QWORD *)&v987 = v472;
            *((_QWORD *)&v987 + 1) = v477 | 0x8000000000000000;
            __s = v473;
          }
          else
          {
            HIBYTE(v987) = v471;
            v473 = (uint64_t *)&__s;
            if (!v471)
              goto LABEL_711;
          }
          memcpy(v473, &__src, v472);
LABEL_711:
          *((_BYTE *)v473 + v472) = 0;
          v478 = (uint64_t)__s;
          v991[0] = v987;
          *(uint64_t *)((char *)v991 + 7) = *(_QWORD *)((char *)&v987 + 7);
          v479 = HIBYTE(v987);
          v480 = operator new(0x38uLL);
          v480[1] = 0;
          v480[2] = 0;
          v480[3] = off_24EC1FA48;
          *v480 = &off_24EC1F9F8;
          v481 = v991[0];
          v480[4] = v478;
          v480[5] = v481;
          *(_QWORD *)((char *)v480 + 47) = *(uint64_t *)((char *)v991 + 7);
          *((_BYTE *)v480 + 55) = v479;
          memset(v991, 0, 15);
          v482 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
          *(_QWORD *)&v958 = v480 + 3;
          *((_QWORD *)&v958 + 1) = v480;
          if (v482)
          {
            v483 = (unint64_t *)&v482->__shared_owners_;
            do
              v484 = __ldaxr(v483);
            while (__stlxr(v484 - 1, v483));
            if (!v484)
            {
              ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
              std::__shared_weak_count::__release_weak(v482);
            }
          }
          *(std::string *)v992 = v957;
          v485 = v958;
          if (v957.__r_.__value_.__r.__words[2])
          {
            v486 = (unint64_t *)(v957.__r_.__value_.__r.__words[2] + 8);
            do
              v487 = __ldxr(v486);
            while (__stxr(v487 + 1, v486));
          }
          v488 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
          *(_QWORD *)&v992[24] = v485;
          *(_QWORD *)&v992[32] = *((_QWORD *)&v958 + 1);
          if (*((_QWORD *)&v958 + 1))
          {
            v489 = (unint64_t *)(*((_QWORD *)&v958 + 1) + 8);
            do
              v490 = __ldxr(v489);
            while (__stxr(v490 + 1, v489));
            *(_QWORD *)&v992[40] = v485;
            do
              v491 = __ldaxr(v489);
            while (__stlxr(v491 - 1, v489));
            if (!v491)
            {
              ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
              std::__shared_weak_count::__release_weak(v488);
            }
          }
          else
          {
            *(_QWORD *)&v992[40] = v485;
          }
          v492 = (std::__shared_weak_count *)v957.__r_.__value_.__r.__words[2];
          if (v957.__r_.__value_.__r.__words[2])
          {
            v493 = (unint64_t *)(v957.__r_.__value_.__r.__words[2] + 8);
            do
              v494 = __ldaxr(v493);
            while (__stlxr(v494 - 1, v493));
            if (!v494)
            {
              ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
              std::__shared_weak_count::__release_weak(v492);
            }
          }
          if (*(char *)(*(_QWORD *)&v992[40] + 31) >= 0)
            v495 = *(_QWORD *)&v992[40] + 8;
          else
            v495 = *(_QWORD *)(*(_QWORD *)&v992[40] + 8);
          v496 = *(_QWORD *)v992;
          v497 = _os_log_pack_fill();
          *(_DWORD *)v497 = 136315138;
          *(_QWORD *)(v497 + 4) = v495;
          v498 = operator new();
          v499 = *(unsigned __int8 *)(v922 + 39);
          v500 = __dst;
          if ((v499 & 0x80u) != 0)
          {
            v500 = *(const char **)(v922 + 16);
            v499 = *(_QWORD *)(v922 + 24);
          }
          *(_QWORD *)v498 = v496;
          *(_OWORD *)(v498 + 8) = *(_OWORD *)&v992[8];
          *(_QWORD *)&v992[8] = 0;
          *(_QWORD *)&v992[16] = 0;
          *(_OWORD *)(v498 + 24) = *(_OWORD *)&v992[24];
          *(_QWORD *)&v992[24] = 0;
          *(_QWORD *)&v992[32] = 0;
          *(_QWORD *)(v498 + 40) = v500;
          *(_QWORD *)(v498 + 48) = v499;
          *(_BYTE *)(v498 + 56) = 1;
          __s = 0;
          v957.__r_.__value_.__r.__words[0] = v498;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v452 + 24) + 40))(*(_QWORD *)(v452 + 24), &v957);
          v501 = v957.__r_.__value_.__r.__words[0];
          v957.__r_.__value_.__r.__words[0] = 0;
          v408 = category;
          if (v501)
          {
            v502 = *(std::__shared_weak_count **)(v501 + 32);
            if (v502)
            {
              v503 = (unint64_t *)&v502->__shared_owners_;
              do
                v504 = __ldaxr(v503);
              while (__stlxr(v504 - 1, v503));
              if (!v504)
              {
                ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                std::__shared_weak_count::__release_weak(v502);
              }
            }
            v505 = *(std::__shared_weak_count **)(v501 + 16);
            if (v505)
            {
              v506 = (unint64_t *)&v505->__shared_owners_;
              do
                v507 = __ldaxr(v506);
              while (__stlxr(v507 - 1, v506));
              if (!v507)
              {
                ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                std::__shared_weak_count::__release_weak(v505);
              }
            }
            MEMORY[0x227684CE8](v501, 0x10F0C40B62ED6C6);
            v508 = (uint64_t)__s;
            __s = 0;
            if (v508)
            {
              v509 = *(std::__shared_weak_count **)(v508 + 32);
              if (v509)
              {
                v510 = (unint64_t *)&v509->__shared_owners_;
                do
                  v511 = __ldaxr(v510);
                while (__stlxr(v511 - 1, v510));
                if (!v511)
                {
                  ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                  std::__shared_weak_count::__release_weak(v509);
                }
              }
              v512 = *(std::__shared_weak_count **)(v508 + 16);
              if (v512)
              {
                v513 = (unint64_t *)&v512->__shared_owners_;
                do
                  v514 = __ldaxr(v513);
                while (__stlxr(v514 - 1, v513));
                if (!v514)
                {
                  ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                  std::__shared_weak_count::__release_weak(v512);
                }
              }
              MEMORY[0x227684CE8](v508, 0x10F0C40B62ED6C6);
            }
          }
          v515 = *(std::__shared_weak_count **)&v992[32];
          if (!*(_QWORD *)&v992[32])
            goto LABEL_764;
          v516 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
          do
            v517 = __ldaxr(v516);
          while (__stlxr(v517 - 1, v516));
          if (!v517)
          {
            ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
            std::__shared_weak_count::__release_weak(v515);
            v518 = *(std::__shared_weak_count **)&v992[16];
            v474 = v939;
            if (!*(_QWORD *)&v992[16])
              goto LABEL_768;
          }
          else
          {
LABEL_764:
            v518 = *(std::__shared_weak_count **)&v992[16];
            v474 = v939;
            if (!*(_QWORD *)&v992[16])
              goto LABEL_768;
          }
          v519 = (unint64_t *)&v518->__shared_owners_;
          do
            v520 = __ldaxr(v519);
          while (__stlxr(v520 - 1, v519));
          if (!v520)
          {
            ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
            std::__shared_weak_count::__release_weak(v518);
            if (!v474)
              goto LABEL_770;
            goto LABEL_769;
          }
LABEL_768:
          if (!v474)
          {
LABEL_770:
            sub_223182C08((uint64_t)v971);
            v521 = v976;
            if (v976)
            {
              v522 = (unint64_t *)&v976->__shared_owners_;
              do
                v523 = __ldaxr(v522);
              while (__stlxr(v523 - 1, v522));
              if (!v523)
              {
                ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
                std::__shared_weak_count::__release_weak(v521);
              }
            }
LABEL_650:
            v7 = a1;
            goto LABEL_651;
          }
LABEL_769:
          sub_2245664AC(v407, v992);
          sub_22322C138((uint64_t)v971, "New keyframe %s was not added to any boundary", v992);
          sub_223182C08((uint64_t)v971);
          goto LABEL_770;
        }
      }
      memmove(v461, v459, v460);
      goto LABEL_683;
    }
LABEL_651:
    v407 += 16;
  }
  while (v407 != (unsigned __int8 *)v408);
  if ((v903 & 1) != 0)
  {
LABEL_863:
    v876 = v7 + 22832;
    sub_223B7F834(v7 + 22832);
    v549 = *(_QWORD *)(v7 + 21496);
    v873 = *(_QWORD *)(v7 + 21504);
    if (v549 != v873)
    {
      v550 = 0;
      do
      {
        v551 = *(_QWORD *)(v7 + 21472);
        __src.__r_.__value_.__l.__size_ = 0;
        __src.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::steady_clock::now().__d_.__rep_;
        __src.__r_.__value_.__s.__data_[16] = 1;
        kdebug_trace();
        v553 = *(_QWORD *)(v549 + 328);
        for (j = *(_QWORD *)(v549 + 336); j != v553; j = sub_22388925C(j - 464))
          ;
        *(_QWORD *)(v549 + 336) = v553;
        LODWORD(v944) = 0;
        v956 = 0;
        v554 = *(uint64_t **)(v549 + 176);
        v877 = v550;
        if (v554)
        {
          v555 = v551 + 16 * v550;
          v556 = *(float *)(v549 + 152);
          v557 = v556 * (float)*(int *)(v555 + 12);
          v558 = v556 * (float)(*(_DWORD *)(v555 + 8) + 1);
          v559 = 1.1755e-38;
          v560 = 3.4028e38;
          v895 = -1;
          v898 = 0;
          v561 = 0.0;
          v889 = 0.0;
          v891 = 1.1755e-38;
          *(float *)&__lena = 1.1755e-38;
          v7 = a1;
          do
          {
            if (*((_BYTE *)v554 + 24))
            {
              LODWORD(v957.__r_.__value_.__l.__data_) = 0;
              sub_223ACB9B0((uint64_t)(v554 + 52), (uint64_t)v992);
              v563 = sub_223ACBC74(v562, v992, (float *)v971, (float *)&v957);
              v564 = (float *)v554 + 61;
              if (v563)
                v564 = (float *)&v957;
              v565 = *v564;
              *(_DWORD *)v971 = 0;
              sub_223ACB9B0((uint64_t)(v554 + 47), (uint64_t)v992);
              v567 = sub_223ACBC74(v566, v992, (float *)v971, (float *)&v957);
              v568 = (float *)(v554 + 30);
              if (v567)
                v568 = (float *)v971;
              v569 = *v568;
              memset(v992, 0, 72);
              *(_OWORD *)&v992[72] = xmmword_224656660;
              *(_OWORD *)&v992[88] = xmmword_224660CB0;
              *(_QWORD *)v993 = 0x3F80000000000005;
              *(_DWORD *)&v993[16] = 0;
              v994 = 0x3F800000uLL;
              *(_QWORD *)&v993[8] = 0;
              v995 = 1065353216;
              v996 = 0u;
              memset(v997, 0, sizeof(v997));
              memset(v998, 0, sizeof(v998));
              memset(v999, 0, sizeof(v999));
              v1000[0] = xmmword_224656660;
              v1000[1] = xmmword_224660CB0;
              *(_QWORD *)v1001 = 0x3F80000000000005;
              *(_DWORD *)&v1001[16] = 0;
              v1002 = 0x3F800000uLL;
              *(_QWORD *)&v1001[8] = 0;
              v1003 = 1065353216;
              memset(v1004, 0, sizeof(v1004));
              v1005 = 0u;
              v1006 = 0u;
              v1007 = 1065353216;
              v1008 = 0;
              v1009 = 0;
              v1011 = 0;
              memset(v971, 0, sizeof(v971));
              LODWORD(v972) = 1065353216;
              v570 = (_QWORD *)v554[33];
              if (v570)
              {
                do
                {
                  for (k = (uint64_t *)v570[6]; k; k = (uint64_t *)*k)
                  {
                    v572 = *(int32x2_t *)((char *)k + 20);
                    v957.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
                    v573 = sub_223AEF740((uint64_t)v971, (unsigned __int16 *)k + 8, (uint64_t)&unk_2245BA939, &v957);
                    *(uint64_t **)((char *)v573 + 20) = (uint64_t *)vadd_s32(*(int32x2_t *)((char *)v573 + 20), v572);
                  }
                  v570 = (_QWORD *)*v570;
                }
                while (v570);
                v574 = *(uint64_t **)&v971[16];
                if (!*(_QWORD *)&v971[16])
                {
                  v575 = 0;
                  v601 = (uint64_t)(v554 + 47);
                  v603 = *(void **)v971;
                  *(_QWORD *)v971 = 0;
                  if (v603)
                    goto LABEL_941;
                  goto LABEL_942;
                }
                v575 = 0;
                while (1)
                {
                  v576 = *((unsigned __int16 *)v574 + 8);
                  v577 = *(_QWORD *)(a1 + 104);
                  if (v576 >= (*(_QWORD *)(a1 + 112) - v577) >> 4)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 128, (uint64_t)"index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
                    v578 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v578 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v580 = qword_255795648;
                      for (m = qword_255795650; v580 != m; v580 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v580)(*(_QWORD *)(v580 + 8), "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
                    }
                    v581 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v581 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v410 = v929;
                    if (!byte_255795670)
                      goto LABEL_1417;
                    qword_255795660(*(_QWORD *)algn_255795668, "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
                    v577 = *(_QWORD *)(a1 + 104);
                  }
                  v582 = v577 + 16 * v576;
                  v583 = sub_22456636C((unsigned __int8 *)v582);
                  v587 = *(int8x8_t *)(a1 + 72);
                  if (!*(_QWORD *)&v587)
                    goto LABEL_1416;
                  v588 = (float32x2_t)vcnt_s8(v587);
                  v588.i16[0] = vaddlv_u8((uint8x8_t)v588);
                  if (v588.u32[0] > 1uLL)
                  {
                    v589 = v583;
                    if (v583 >= *(_QWORD *)&v587)
                      v589 = v583 % *(_QWORD *)&v587;
                  }
                  else
                  {
                    v589 = (*(_QWORD *)&v587 - 1) & v583;
                  }
                  v590 = *(float32x2_t ***)(*v410 + 8 * v589);
                  if (!v590 || (v591 = *v590) == 0)
                  {
LABEL_1416:
                    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 522, (uint64_t)"kf_info_opt.has_value() && \"Keyframe pose not found\"", 52, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
LABEL_1417:
                    abort();
                  }
                  if (v588.u32[0] < 2uLL)
                  {
                    v592 = *(_QWORD *)&v587 - 1;
                    while (1)
                    {
                      v595 = v591[1];
                      if (v583 == *(_QWORD *)&v595)
                      {
                        if (*(_QWORD *)&v591[2] == *(_QWORD *)v582 && *(_QWORD *)&v591[3] == *(_QWORD *)(v582 + 8))
                          goto LABEL_923;
                      }
                      else if ((*(_QWORD *)&v595 & v592) != v589)
                      {
                        goto LABEL_1416;
                      }
                      v591 = (float32x2_t *)*v591;
                      if (!v591)
                        goto LABEL_1416;
                    }
                  }
                  while (1)
                  {
                    v593 = v591[1];
                    if (v583 == *(_QWORD *)&v593)
                      break;
                    if (*(_QWORD *)&v593 >= *(_QWORD *)&v587)
                      *(_QWORD *)&v593 %= *(_QWORD *)&v587;
                    if (*(_QWORD *)&v593 != v589)
                      goto LABEL_1416;
LABEL_905:
                    v591 = (float32x2_t *)*v591;
                    if (!v591)
                      goto LABEL_1416;
                  }
                  if (*(_QWORD *)&v591[2] != *(_QWORD *)v582 || *(_QWORD *)&v591[3] != *(_QWORD *)(v582 + 8))
                    goto LABEL_905;
LABEL_923:
                  v584.i32[0] = v591[13].i32[0];
                  v588.i32[0] = *(_DWORD *)(v549 + 124);
                  v585.i32[0] = *(_DWORD *)(v549 + 136);
                  v586.i32[0] = *(_DWORD *)(v549 + 148);
                  v588.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v588, v591[12]), v585, v591[12], 1), v584, v586).f32[0];
                  if (v588.f32[0] < v557 && v588.f32[0] > v558)
                  {
                    v598 = *(float *)(v549 + 152) * 0.4;
                    if (v565 < (float)(v588.f32[0] + v598))
                      v565 = v588.f32[0] + v598;
                    v599 = v588.f32[0] - v598;
                    if (v599 < v569)
                      v569 = v599;
                  }
                  v957.__r_.__value_.__r.__words[0] = v582;
                  sub_223AEF408((uint64_t)&v1005, v582, (uint64_t)&unk_2245BA939, &v957)[4] = *(uint64_t *)((char *)v574 + 20);
                  v575 += *((_DWORD *)v574 + 6);
                  v574 = (uint64_t *)*v574;
                  if (!v574)
                  {
                    v600 = *(_QWORD **)&v971[16];
                    if (*(_QWORD *)&v971[16])
                    {
                      v601 = (uint64_t)(v554 + 47);
                      do
                      {
                        v602 = (_QWORD *)*v600;
                        operator delete(v600);
                        v600 = v602;
                      }
                      while (v602);
                      v603 = *(void **)v971;
                      *(_QWORD *)v971 = 0;
                      if (v603)
LABEL_941:
                        operator delete(v603);
                    }
                    else
                    {
                      v601 = (uint64_t)(v554 + 47);
                      v603 = *(void **)v971;
                      *(_QWORD *)v971 = 0;
                      if (v603)
                        goto LABEL_941;
                    }
LABEL_942:
                    if (!v575)
                    {
                      v7 = a1;
                      break;
                    }
                    v604 = v565 - v569;
                    if ((float)(v565 - v569) < v560)
                      v560 = v565 - v569;
                    if (v559 < v604)
                      v559 = v565 - v569;
                    sub_223EB22AC((uint64_t)&v957, (uint64_t)(v554 + 6), *(_DWORD *)v549, v569, v604);
                    LODWORD(__s) = 0;
                    LODWORD(v991[0]) = 0;
                    sub_223ACB9B0(v601, (uint64_t)v971);
                    v606 = sub_223ACBC74(v605, v971, (float *)&__s, (float *)v991);
                    v613.i32[0] = 1.0;
                    if ((float)(*(float *)v991 - *(float *)&__s) > 1.0)
                      v614 = v606;
                    else
                      v614 = 0;
                    v1011 = v614;
                    if (*((_BYTE *)v554 + 464))
                    {
                      v1010 = 1;
                      v615 = &v956;
                      v7 = a1;
                      goto LABEL_965;
                    }
                    *(float *)v607.i32 = *(float *)v991 - *(float *)&__s;
                    v616 = sub_223B7FA80(v876, (uint64_t)&v957, v607, v613, v608, v609, v610, v611, v612);
                    v7 = a1;
                    v1010 = v616;
                    if (v616)
                    {
                      if (v616 == 2)
                        goto LABEL_956;
LABEL_964:
                      v615 = &v944;
                    }
                    else
                    {
                      v617 = *((_DWORD *)v554 + 115);
                      v618 = *((_DWORD *)v554 + 114);
                      if (v617 == v618)
                        goto LABEL_964;
                      v619 = v617 <= v618 ? 1 : 2;
                      v1010 = v619;
                      if (v619 != 2)
                        goto LABEL_964;
LABEL_956:
                      v615 = (uint64_t *)((char *)&v956 + 4);
                    }
LABEL_965:
                    ++*(_DWORD *)v615;
                    sub_2233320C8(v992, v957.__r_.__value_.__l.__data_, (char *)v957.__r_.__value_.__l.__size_, (uint64_t)(v957.__r_.__value_.__l.__size_ - v957.__r_.__value_.__r.__words[0]) >> 3);
                    sub_22362017C((uint64_t)&v992[24], (char **)v958, *((uint64_t *)&v958 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v958 + 1) - v958) >> 3));
                    sub_223B26850((char **)&v992[48], v960, v961, ((char *)v961 - (char *)v960) >> 5);
                    *(_QWORD *)&v992[72] = v962;
                    *(_DWORD *)&v992[80] = v963;
                    *(_QWORD *)&v992[84] = v964;
                    *(_DWORD *)&v992[92] = v965;
                    *(_QWORD *)&v992[96] = v966;
                    *(_DWORD *)v993 = v967;
                    *(_OWORD *)&v993[4] = v968;
                    v994 = v969;
                    v995 = v970;
                    sub_223EB2DE0((uint64_t)v971, (uint64_t)&v957);
                    v620 = v996;
                    if ((_QWORD)v996)
                    {
                      v621 = *((_QWORD *)&v996 + 1);
                      v622 = (void *)v996;
                      if (*((_QWORD *)&v996 + 1) != (_QWORD)v996)
                      {
                        v623 = *((_QWORD *)&v996 + 1);
                        do
                        {
                          v625 = *(void **)(v623 - 24);
                          v623 -= 24;
                          v624 = v625;
                          if (v625)
                          {
                            *(_QWORD *)(v621 - 16) = v624;
                            operator delete(v624);
                          }
                          v621 = v623;
                        }
                        while (v623 != v620);
                        v622 = (void *)v996;
                      }
                      *((_QWORD *)&v996 + 1) = v620;
                      operator delete(v622);
                    }
                    v996 = *(_OWORD *)v971;
                    v997[0] = *(_QWORD *)&v971[16];
                    if (&v997[1] != v554 + 12)
                      sub_22342D7E8(&v997[1], (char *)v554[12], (char *)v554[13], (v554[13] - v554[12]) >> 2);
                    if (v998 != v554 + 15)
                      sub_22342D7E8(v998, (char *)v554[15], (char *)v554[16], (v554[16] - v554[15]) >> 2);
                    sub_223EB22AC((uint64_t)v971, (uint64_t)(v554 + 18), *(_DWORD *)v549, *(float *)&v966, *((float *)&v966 + 1));
                    sub_2233320C8(&v998[3], *(char **)v971, *(char **)&v971[8], (uint64_t)(*(_QWORD *)&v971[8] - *(_QWORD *)v971) >> 3);
                    sub_22362017C((uint64_t)v999, *(char ***)&v971[24], (uint64_t)v972, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v972[-*(_QWORD *)&v971[24]] >> 3));
                    sub_223B26850((char **)&v999[1] + 1, v974, v975, ((char *)v975 - (char *)v974) >> 5);
                    *(_QWORD *)&v1000[0] = v977;
                    DWORD2(v1000[0]) = v978;
                    *(_QWORD *)((char *)v1000 + 12) = v979;
                    DWORD1(v1000[1]) = v980;
                    *((_QWORD *)&v1000[1] + 1) = v981;
                    *(_DWORD *)v1001 = v982;
                    v1003 = v985;
                    *(_OWORD *)&v1001[4] = v983;
                    v1002 = v984;
                    if (v1004 != v554 + 24)
                      sub_22342D7E8(v1004, (char *)v554[24], (char *)v554[25], (v554[25] - v554[24]) >> 2);
                    if (&v1004[3] != v554 + 27)
                      sub_22342D7E8(&v1004[3], (char *)v554[27], (char *)v554[28], (v554[28] - v554[27]) >> 2);
                    v1008 = *((_DWORD *)v554 + 75);
                    v1009 = v554[46];
                    v626 = (__int128 *)v1006;
                    if (!(_QWORD)v1006)
                    {
LABEL_1014:
                      v637 = sub_223B7EE5C((uint64_t *)v992);
                      if (v561 < v637)
                        v561 = v637;
                      v638 = sub_223B7EE5C(&v998[3]);
                      v639 = v889;
                      v640.i64[0] = *(_QWORD *)&v992[84];
                      v640.i32[2] = *(_DWORD *)&v992[92];
                      v641.i64[0] = *(_QWORD *)&v992[72];
                      v641.i32[2] = *(_DWORD *)&v992[80];
                      if (v889 < v638)
                        v639 = v638;
                      v889 = v639;
                      v642 = vsubq_f32(v640, v641);
                      if (v642.f32[0] < v642.f32[1])
                        v642.f32[0] = v642.f32[1];
                      if (v642.f32[0] < v642.f32[2])
                        v642.f32[0] = v642.f32[2];
                      v643 = v891;
                      v640.i64[0] = *(_QWORD *)((char *)v1000 + 12);
                      v640.i32[2] = DWORD1(v1000[1]);
                      v641.i64[0] = *(_QWORD *)&v1000[0];
                      v641.i32[2] = DWORD2(v1000[0]);
                      if (v891 < v642.f32[0])
                        v643 = v642.f32[0];
                      v644 = vsubq_f32(v640, v641);
                      if (v644.f32[0] < v644.f32[1])
                        v644.f32[0] = v644.f32[1];
                      if (v644.f32[0] < v644.f32[2])
                        v644.f32[0] = v644.f32[2];
                      v891 = v643;
                      if (v643 >= v644.f32[0])
                        v644.f32[0] = v643;
                      __lena = v644.i32[0];
                      if (*((_QWORD *)&v1006 + 1) >= v895)
                        v645 = v895;
                      else
                        v645 = *((_QWORD *)&v1006 + 1);
                      v646 = v898;
                      if (v898 <= *((_QWORD *)&v1006 + 1))
                        v646 = *((_QWORD *)&v1006 + 1);
                      v895 = v645;
                      v898 = v646;
                      v647 = *(_QWORD *)(v549 + 336);
                      if (v647 >= *(_QWORD *)(v549 + 344))
                      {
                        v648 = sub_223B2455C((uint64_t *)(v549 + 328), (uint64_t *)v992);
                      }
                      else
                      {
                        sub_223B246DC(*(_QWORD **)(v549 + 336), (uint64_t *)v992);
                        v648 = (char *)(v647 + 464);
                        *(_QWORD *)(v549 + 336) = v647 + 464;
                      }
                      *(_QWORD *)(v549 + 336) = v648;
                      if (v974)
                      {
                        v975 = v974;
                        operator delete(v974);
                      }
                      v649 = *(const char **)&v971[24];
                      if (*(_QWORD *)&v971[24])
                      {
                        v650 = v972;
                        v651 = *(void **)&v971[24];
                        if (v972 != *(const char **)&v971[24])
                        {
                          v652 = v972;
                          do
                          {
                            v654 = (void *)*((_QWORD *)v652 - 3);
                            v652 -= 24;
                            v653 = v654;
                            if (v654)
                            {
                              *((_QWORD *)v650 - 2) = v653;
                              operator delete(v653);
                            }
                            v650 = v652;
                          }
                          while (v652 != v649);
                          v651 = *(void **)&v971[24];
                        }
                        v972 = v649;
                        operator delete(v651);
                      }
                      if (*(_QWORD *)v971)
                      {
                        *(_QWORD *)&v971[8] = *(_QWORD *)v971;
                        operator delete(*(void **)v971);
                      }
                      if (v960)
                      {
                        v961 = v960;
                        operator delete(v960);
                      }
                      v655 = v958;
                      if ((_QWORD)v958)
                      {
                        v656 = *((_QWORD *)&v958 + 1);
                        v657 = (void *)v958;
                        if (*((_QWORD *)&v958 + 1) != (_QWORD)v958)
                        {
                          v658 = *((_QWORD *)&v958 + 1);
                          do
                          {
                            v660 = *(void **)(v658 - 24);
                            v658 -= 24;
                            v659 = v660;
                            if (v660)
                            {
                              *(_QWORD *)(v656 - 16) = v659;
                              operator delete(v659);
                            }
                            v656 = v658;
                          }
                          while (v658 != v655);
                          v657 = (void *)v958;
                        }
                        *((_QWORD *)&v958 + 1) = v655;
                        operator delete(v657);
                      }
                      if (v957.__r_.__value_.__r.__words[0])
                      {
                        v957.__r_.__value_.__l.__size_ = v957.__r_.__value_.__r.__words[0];
                        operator delete(v957.__r_.__value_.__l.__data_);
                      }
                      break;
                    }
                    while (2)
                    {
                      while (*((_DWORD *)v626 + 9) || !*((_DWORD *)v626 + 8))
                      {
                        v626 = *(__int128 **)v626;
                        if (!v626)
                          goto LABEL_1014;
                      }
                      v627 = *((_QWORD *)&v1005 + 1);
                      v628 = *((_QWORD *)v626 + 1);
                      v629 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v1005 + 8));
                      v629.i16[0] = vaddlv_u8(v629);
                      if (v629.u32[0] > 1uLL)
                      {
                        if (v628 >= *((_QWORD *)&v1005 + 1))
                          v628 %= *((_QWORD *)&v1005 + 1);
                      }
                      else
                      {
                        v628 &= *((_QWORD *)&v1005 + 1) - 1;
                      }
                      v630 = *(__int128 **)v626;
                      v631 = *(__int128 **)(v1005 + 8 * v628);
                      do
                      {
                        v632 = v631;
                        v631 = *(__int128 **)v631;
                      }
                      while (v631 != v626);
                      if (v632 == &v1006)
                        goto LABEL_1466;
                      v633 = *((_QWORD *)v632 + 1);
                      if (v629.u32[0] > 1uLL)
                      {
                        if (v633 >= *((_QWORD *)&v1005 + 1))
                          v633 %= *((_QWORD *)&v1005 + 1);
                      }
                      else
                      {
                        v633 &= *((_QWORD *)&v1005 + 1) - 1;
                      }
                      v634 = *(__int128 **)v626;
                      if (v633 == v628)
                      {
LABEL_1005:
                        if (v634)
                        {
                          v635 = *((_QWORD *)v634 + 1);
                          goto LABEL_1007;
                        }
                      }
                      else
                      {
LABEL_1466:
                        if (!v630)
                          goto LABEL_1004;
                        v635 = *((_QWORD *)v630 + 1);
                        if (v629.u32[0] > 1uLL)
                        {
                          v636 = *((_QWORD *)v630 + 1);
                          if (v635 >= *((_QWORD *)&v1005 + 1))
                            v636 = v635 % *((_QWORD *)&v1005 + 1);
                        }
                        else
                        {
                          v636 = v635 & (*((_QWORD *)&v1005 + 1) - 1);
                        }
                        v634 = *(__int128 **)v626;
                        if (v636 != v628)
                        {
LABEL_1004:
                          *(_QWORD *)(v1005 + 8 * v628) = 0;
                          v634 = *(__int128 **)v626;
                          goto LABEL_1005;
                        }
LABEL_1007:
                        if (v629.u32[0] > 1uLL)
                        {
                          if (v635 >= v627)
                            v635 %= v627;
                        }
                        else
                        {
                          v635 &= v627 - 1;
                        }
                        if (v635 != v628)
                        {
                          *(_QWORD *)(v1005 + 8 * v635) = v632;
                          v634 = *(__int128 **)v626;
                        }
                      }
                      *(_QWORD *)v632 = v634;
                      *(_QWORD *)v626 = 0;
                      --*((_QWORD *)&v1006 + 1);
                      operator delete(v626);
                      v626 = v630;
                      if (!v630)
                        goto LABEL_1014;
                      continue;
                    }
                  }
                }
              }
              sub_22388925C((uint64_t)v992);
            }
            v554 = (uint64_t *)*v554;
          }
          while (v554);
          v661 = v891;
          v662 = v889;
          v663 = *(float *)&__lena;
        }
        else
        {
          v895 = -1;
          v898 = 0;
          v561 = 0.0;
          v559 = 1.1755e-38;
          v560 = 3.4028e38;
          v662 = 0.0;
          v661 = 1.1755e-38;
          v663 = 1.1755e-38;
          v7 = a1;
        }
        kdebug_trace();
        v992[23] = 18;
        strcpy(v992, "ComputeOutputAreas");
        v971[23] = 17;
        strcpy(v971, "KeyframeOccupancy");
        sub_22391CC34((uint64_t *)v992, (uint64_t *)v971, (uint64_t)&__src);
        if ((v971[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v971);
          if ((v992[23] & 0x80000000) != 0)
LABEL_1102:
            operator delete(*(void **)v992);
        }
        else if ((v992[23] & 0x80000000) != 0)
        {
          goto LABEL_1102;
        }
        sub_223AF24D8(v991);
        if (**(int **)(v991[0] + 56) <= 3)
        {
          v664 = *(unsigned __int8 *)(v991[0] + 72);
          v665 = sub_22322F254(v991[0], "OSLogSurrogateAppender", 1, 0);
          if (v664 || v665)
          {
            v892 = v664;
            v890 = (_QWORD **)v665;
            *(_QWORD *)v971 = v991;
            *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v971[24] = 3;
            v972 = "unknown file";
            v973 = 675;
            v974 = (uint64_t *)"unknown function";
            v975 = 0;
            v976 = 0;
            v666 = v560 * 100.0;
            if ((float)(v560 * 100.0) > 1073700000.0)
              v666 = 1073700000.0;
            if (v666 >= -1073700000.0)
              v667 = v666;
            else
              v667 = -1073700000.0;
            v668 = v559 * 100.0;
            if ((float)(v559 * 100.0) > 1073700000.0)
              v668 = 1073700000.0;
            if (v668 >= -1073700000.0)
              v669 = v668;
            else
              v669 = -1073700000.0;
            v670 = v561 * 100.0;
            if ((float)(v561 * 100.0) > 1073700000.0)
              v670 = 1073700000.0;
            if (v670 >= -1073700000.0)
              v671 = v670;
            else
              v671 = -1073700000.0;
            v672 = v662 * 100.0;
            if ((float)(v662 * 100.0) > 1073700000.0)
              v672 = 1073700000.0;
            if (v672 >= -1073700000.0)
              v673 = v672;
            else
              v673 = -1073700000.0;
            v674 = v661 * 100.0;
            if ((float)(v661 * 100.0) > 1073700000.0)
              v674 = 1073700000.0;
            if (v674 >= -1073700000.0)
              v675 = v674;
            else
              v675 = -1073700000.0;
            v676 = v663 * 100.0;
            if ((float)(v663 * 100.0) > 1073700000.0)
              v676 = 1073700000.0;
            if (v676 >= -1073700000.0)
              v677 = v676;
            else
              v677 = -1073700000.0;
            v678 = **(_QWORD **)v971;
            v679 = **(_QWORD **)v971 + 16;
            v870 = **(_QWORD **)v971;
            if (*(char *)(**(_QWORD **)v971 + 39) < 0)
            {
              categorya = *(const char **)(v678 + 16);
              __lenb = *(_QWORD *)(v678 + 24);
            }
            else
            {
              __lenb = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
              categorya = (const char *)(v678 + 16);
            }
            v881 = *(_QWORD *)(v549 + 336);
            v872 = *(_QWORD *)(v549 + 328);
            v680 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v680 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v957);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v957, byte_255788F40);
              if ((_BYTE)v958 && SHIBYTE(v957.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v957.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              v410 = v929;
            }
            if (byte_255788F40[23] >= 0)
              v681 = byte_255788F40;
            else
              v681 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v682 = byte_255788F40[23];
            else
              v682 = *(_QWORD *)&byte_255788F40[8];
            v683 = v681;
            *(_QWORD *)v992 = os_log_create(v681, categorya);
            if (v682 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v869 = v679;
            if (v682 >= 0x17)
            {
              v685 = (v682 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v682 | 7) != 0x17)
                v685 = v682 | 7;
              v686 = v685 + 1;
              v684 = operator new(v685 + 1);
              *(_QWORD *)&v992[16] = v682;
              *(_QWORD *)&v992[24] = v686 | 0x8000000000000000;
              *(_QWORD *)&v992[8] = v684;
            }
            else
            {
              v992[31] = v682;
              v684 = &v992[8];
              if (!v682)
              {
LABEL_1119:
                v684[v682] = 0;
                v992[32] = 1;
                v687 = __lenb;
                if (__lenb > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (__lenb >= 0x17)
                {
                  v690 = (__lenb & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__lenb | 7) != 0x17)
                    v690 = __lenb | 7;
                  v691 = v690 + 1;
                  v688 = operator new(v690 + 1);
                  *(_QWORD *)&v992[48] = __lenb;
                  *(_QWORD *)&v992[56] = v691 | 0x8000000000000000;
                  *(_QWORD *)&v992[40] = v688;
                  v687 = __lenb;
                  v689 = v892;
                }
                else
                {
                  v992[63] = __lenb;
                  v688 = &v992[40];
                  v689 = v892;
                  if (!__lenb)
                  {
LABEL_1127:
                    v688[v687] = 0;
                    v992[64] = 1;
                    oslog = *(NSObject **)v992;
                    if ((v992[63] & 0x80000000) != 0)
                      operator delete(*(void **)&v992[40]);
                    if (v992[32] && (v992[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v992[8]);
                    if (*(_QWORD *)v992)
                      os_release(*(void **)v992);
                    if (v890 && v890[3])
                    {
                      v692 = _os_log_pack_size();
                      v693 = (std::__shared_weak_count_vtbl *)operator new(v692, (std::align_val_t)8uLL);
                      v694 = (std::__shared_weak_count *)operator new();
                      v695 = v694;
                      v694->__shared_owners_ = 0;
                      v696 = (unint64_t *)&v694->__shared_owners_;
                      v694->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                      v694->__shared_weak_owners_ = 0;
                      v694[1].__vftable = v693;
                      v957.__r_.__value_.__r.__words[0] = (std::string::size_type)v693;
                      v957.__r_.__value_.__l.__size_ = (std::string::size_type)v693;
                      v957.__r_.__value_.__r.__words[2] = (std::string::size_type)v694;
                      do
                        v697 = __ldxr(v696);
                      while (__stxr(v697 + 1, v696));
                      v958 = 0uLL;
                      v959 = 0;
                      do
                        v698 = __ldaxr(v696);
                      while (__stlxr(v698 - 1, v696));
                      if (!v698)
                      {
                        ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
                        std::__shared_weak_count::__release_weak(v695);
                      }
                      v699 = v957.__r_.__value_.__r.__words[0];
                      v700 = _os_log_pack_fill();
                      v701 = v944;
                      v703 = v956;
                      v702 = HIDWORD(v956);
                      *(_DWORD *)v700 = 134220801;
                      *(_QWORD *)(v700 + 4) = 0x34F72C234F72C235 * ((v881 - v872) >> 4);
                      *(_WORD *)(v700 + 12) = 1024;
                      *(_DWORD *)(v700 + 14) = v701;
                      *(_WORD *)(v700 + 18) = 1024;
                      *(_DWORD *)(v700 + 20) = v702;
                      *(_WORD *)(v700 + 24) = 1024;
                      *(_DWORD *)(v700 + 26) = v703;
                      *(_WORD *)(v700 + 30) = 2048;
                      *(_QWORD *)(v700 + 32) = v895;
                      *(_WORD *)(v700 + 40) = 2048;
                      *(_QWORD *)(v700 + 42) = v898;
                      *(_WORD *)(v700 + 50) = 1025;
                      *(_DWORD *)(v700 + 52) = (int)v667;
                      *(_WORD *)(v700 + 56) = 1025;
                      *(_DWORD *)(v700 + 58) = (int)v669;
                      *(_WORD *)(v700 + 62) = 1025;
                      *(_DWORD *)(v700 + 64) = (int)v671;
                      *(_WORD *)(v700 + 68) = 1025;
                      *(_DWORD *)(v700 + 70) = (int)v673;
                      *(_WORD *)(v700 + 74) = 1025;
                      *(_DWORD *)(v700 + 76) = (int)v675;
                      *(_WORD *)(v700 + 80) = 1025;
                      *(_DWORD *)(v700 + 82) = (int)v677;
                      v704 = operator new();
                      v705 = *(unsigned __int8 *)(v870 + 39);
                      v706 = *(_QWORD *)(v870 + 16);
                      v707 = *(_QWORD *)(v870 + 24);
                      v708 = v958;
                      *(_OWORD *)(v704 + 8) = *(_OWORD *)&v957.__r_.__value_.__r.__words[1];
                      if ((v705 & 0x80u) != 0)
                        v705 = v707;
                      else
                        v706 = v869;
                      *(_QWORD *)v704 = v699;
                      *(_OWORD *)&v957.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v704 + 24) = v708;
                      v958 = 0uLL;
                      *(_QWORD *)(v704 + 40) = v706;
                      *(_QWORD *)(v704 + 48) = v705;
                      *(_BYTE *)(v704 + 56) = 1;
                      __s = 0;
                      *(_QWORD *)v992 = v704;
                      (*(void (**)(_QWORD *, _BYTE *))(*v890[3] + 40))(v890[3], v992);
                      v709 = *(_QWORD *)v992;
                      *(_QWORD *)v992 = 0;
                      v7 = a1;
                      if (v709)
                      {
                        v710 = *(std::__shared_weak_count **)(v709 + 32);
                        if (v710)
                        {
                          v711 = (unint64_t *)&v710->__shared_owners_;
                          do
                            v712 = __ldaxr(v711);
                          while (__stlxr(v712 - 1, v711));
                          if (!v712)
                          {
                            ((void (*)(std::__shared_weak_count *))v710->__on_zero_shared)(v710);
                            std::__shared_weak_count::__release_weak(v710);
                          }
                        }
                        v713 = *(std::__shared_weak_count **)(v709 + 16);
                        if (v713)
                        {
                          v714 = (unint64_t *)&v713->__shared_owners_;
                          do
                            v715 = __ldaxr(v714);
                          while (__stlxr(v715 - 1, v714));
                          if (!v715)
                          {
                            ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
                            std::__shared_weak_count::__release_weak(v713);
                          }
                        }
                        MEMORY[0x227684CE8](v709, 0x10F0C40B62ED6C6);
                        v716 = (uint64_t)__s;
                        __s = 0;
                        if (v716)
                        {
                          v717 = *(std::__shared_weak_count **)(v716 + 32);
                          if (v717)
                          {
                            v718 = (unint64_t *)&v717->__shared_owners_;
                            do
                              v719 = __ldaxr(v718);
                            while (__stlxr(v719 - 1, v718));
                            if (!v719)
                            {
                              ((void (*)(std::__shared_weak_count *))v717->__on_zero_shared)(v717);
                              std::__shared_weak_count::__release_weak(v717);
                            }
                          }
                          v720 = *(std::__shared_weak_count **)(v716 + 16);
                          if (v720)
                          {
                            v721 = (unint64_t *)&v720->__shared_owners_;
                            do
                              v722 = __ldaxr(v721);
                            while (__stlxr(v722 - 1, v721));
                            if (!v722)
                            {
                              ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
                              std::__shared_weak_count::__release_weak(v720);
                            }
                          }
                          MEMORY[0x227684CE8](v716, 0x10F0C40B62ED6C6);
                        }
                      }
                      if (v892)
                      {
                        *(_DWORD *)v992 = 134220801;
                        *(_QWORD *)&v992[4] = 0x34F72C234F72C235 * ((v881 - v872) >> 4);
                        *(_WORD *)&v992[12] = 1024;
                        *(_DWORD *)&v992[14] = v944;
                        *(_WORD *)&v992[18] = 1024;
                        *(_DWORD *)&v992[20] = HIDWORD(v956);
                        *(_WORD *)&v992[24] = 1024;
                        *(_DWORD *)&v992[26] = v956;
                        *(_WORD *)&v992[30] = 2048;
                        *(_QWORD *)&v992[32] = v895;
                        *(_WORD *)&v992[40] = 2048;
                        *(_QWORD *)&v992[42] = v898;
                        *(_WORD *)&v992[50] = 1025;
                        *(_DWORD *)&v992[52] = (int)v667;
                        *(_WORD *)&v992[56] = 1025;
                        *(_DWORD *)&v992[58] = (int)v669;
                        *(_WORD *)&v992[62] = 1025;
                        *(_DWORD *)&v992[64] = (int)v671;
                        *(_WORD *)&v992[68] = 1025;
                        *(_DWORD *)&v992[70] = (int)v673;
                        *(_WORD *)&v992[74] = 1025;
                        *(_DWORD *)&v992[76] = (int)v675;
                        *(_WORD *)&v992[80] = 1025;
                        *(_DWORD *)&v992[82] = (int)v677;
                        LODWORD(v868) = 86;
                        v867 = v992;
                        v723 = (char *)_os_log_send_and_compose_impl();
                        v724 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
                        if (!*((_QWORD *)&v958 + 1))
                          goto LABEL_1180;
LABEL_1176:
                        v725 = (unint64_t *)&v724->__shared_owners_;
                        do
                          v726 = __ldaxr(v725);
                        while (__stlxr(v726 - 1, v725));
                        if (!v726)
                        {
                          ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
                          std::__shared_weak_count::__release_weak(v724);
                        }
                      }
                      else
                      {
                        v723 = 0;
                        v724 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
                        if (*((_QWORD *)&v958 + 1))
                          goto LABEL_1176;
                      }
LABEL_1180:
                      v727 = (std::__shared_weak_count *)v957.__r_.__value_.__r.__words[2];
                      if (v957.__r_.__value_.__r.__words[2])
                      {
                        v728 = (unint64_t *)(v957.__r_.__value_.__r.__words[2] + 8);
                        do
                          v729 = __ldaxr(v728);
                        while (__stlxr(v729 - 1, v728));
                        if (!v729)
                        {
                          ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
                          std::__shared_weak_count::__release_weak(v727);
                        }
                      }
                      if (v892)
                      {
                        sub_22322C138((uint64_t)v971, v723, v867, v868);
LABEL_1187:
                        sub_223182C08((uint64_t)v971);
                      }
                      if (v723)
                        goto LABEL_1189;
                    }
                    else
                    {
                      os_log_type_enabled(oslog, OS_LOG_TYPE_INFO);
                      if (v689)
                      {
                        *(_DWORD *)v992 = 134220801;
                        *(_QWORD *)&v992[4] = 0x34F72C234F72C235 * ((v881 - v872) >> 4);
                        *(_WORD *)&v992[12] = 1024;
                        *(_DWORD *)&v992[14] = v944;
                        *(_WORD *)&v992[18] = 1024;
                        *(_DWORD *)&v992[20] = HIDWORD(v956);
                        *(_WORD *)&v992[24] = 1024;
                        *(_DWORD *)&v992[26] = v956;
                        *(_WORD *)&v992[30] = 2048;
                        *(_QWORD *)&v992[32] = v895;
                        *(_WORD *)&v992[40] = 2048;
                        *(_QWORD *)&v992[42] = v898;
                        *(_WORD *)&v992[50] = 1025;
                        *(_DWORD *)&v992[52] = (int)v667;
                        *(_WORD *)&v992[56] = 1025;
                        *(_DWORD *)&v992[58] = (int)v669;
                        *(_WORD *)&v992[62] = 1025;
                        *(_DWORD *)&v992[64] = (int)v671;
                        *(_WORD *)&v992[68] = 1025;
                        *(_DWORD *)&v992[70] = (int)v673;
                        *(_WORD *)&v992[74] = 1025;
                        *(_DWORD *)&v992[76] = (int)v675;
                        *(_WORD *)&v992[80] = 1025;
                        *(_DWORD *)&v992[82] = (int)v677;
                        LODWORD(v868) = 86;
                        v723 = (char *)_os_log_send_and_compose_impl();
                        v7 = a1;
                        sub_22322C138((uint64_t)v971, v723, v992, v868);
                        goto LABEL_1187;
                      }
                      *(_DWORD *)v992 = 134220801;
                      *(_QWORD *)&v992[4] = 0x34F72C234F72C235 * ((v881 - v872) >> 4);
                      *(_WORD *)&v992[12] = 1024;
                      *(_DWORD *)&v992[14] = v944;
                      *(_WORD *)&v992[18] = 1024;
                      *(_DWORD *)&v992[20] = HIDWORD(v956);
                      *(_WORD *)&v992[24] = 1024;
                      *(_DWORD *)&v992[26] = v956;
                      *(_WORD *)&v992[30] = 2048;
                      *(_QWORD *)&v992[32] = v895;
                      *(_WORD *)&v992[40] = 2048;
                      *(_QWORD *)&v992[42] = v898;
                      *(_WORD *)&v992[50] = 1025;
                      *(_DWORD *)&v992[52] = (int)v667;
                      *(_WORD *)&v992[56] = 1025;
                      *(_DWORD *)&v992[58] = (int)v669;
                      *(_WORD *)&v992[62] = 1025;
                      *(_DWORD *)&v992[64] = (int)v671;
                      *(_WORD *)&v992[68] = 1025;
                      *(_DWORD *)&v992[70] = (int)v673;
                      *(_WORD *)&v992[74] = 1025;
                      *(_DWORD *)&v992[76] = (int)v675;
                      *(_WORD *)&v992[80] = 1025;
                      *(_DWORD *)&v992[82] = (int)v677;
                      LODWORD(v868) = 86;
                      v867 = v992;
                      v723 = (char *)_os_log_send_and_compose_impl();
                      v7 = a1;
                      if (v723)
LABEL_1189:
                        free(v723);
                    }
                    sub_223182C08((uint64_t)v971);
                    v730 = v976;
                    if (v976)
                    {
                      v731 = (unint64_t *)&v976->__shared_owners_;
                      do
                        v732 = __ldaxr(v731);
                      while (__stlxr(v732 - 1, v731));
                      if (!v732)
                      {
                        ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
                        std::__shared_weak_count::__release_weak(v730);
                      }
                    }
                    goto LABEL_865;
                  }
                }
                memmove(v688, categorya, v687);
                goto LABEL_1127;
              }
            }
            memmove(v684, v683, v682);
            goto LABEL_1119;
          }
        }
LABEL_865:
        v550 = v877 + 1;
        v549 += 368;
      }
      while (v549 != v873);
    }
    v733 = *(std::__shared_weak_count **)(v7 + 22952);
    *(_QWORD *)(v7 + 22944) = 0;
    *(_QWORD *)(v7 + 22952) = 0;
    if (v733)
    {
      v734 = (unint64_t *)&v733->__shared_owners_;
      do
        v735 = __ldaxr(v734);
      while (__stlxr(v735 - 1, v734));
      if (!v735)
      {
        ((void (*)(std::__shared_weak_count *))v733->__on_zero_shared)(v733);
        std::__shared_weak_count::__release_weak(v733);
      }
    }
  }
LABEL_1205:
  kdebug_trace();
  *(_QWORD *)v992 = operator new(0x20uLL);
  *(_OWORD *)&v992[8] = xmmword_2245B8D70;
  strcpy(*(char **)v992, "KeyframeObservationMapping");
  v971[23] = 17;
  strcpy(v971, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)v992, (uint64_t *)v971, (uint64_t)&rep);
  if ((v971[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v971);
    if ((v992[23] & 0x80000000) == 0)
      goto LABEL_1207;
LABEL_1213:
    operator delete(*(void **)v992);
    goto LABEL_1207;
  }
  if ((v992[23] & 0x80000000) != 0)
    goto LABEL_1213;
LABEL_1207:
  sub_223AF0EC4(&__s);
  if (*(int *)__s[7] > 3)
    goto LABEL_1297;
  v736 = *((unsigned __int8 *)__s + 72);
  v737 = sub_22322F254((uint64_t)__s, "OSLogSurrogateAppender", 1, 0);
  v738 = v737;
  if (!v736 && !v737)
    goto LABEL_1297;
  *(_QWORD *)v971 = &__s;
  *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v971[24] = 3;
  v972 = "unknown file";
  v973 = 541;
  v975 = 0;
  v976 = 0;
  v974 = (uint64_t *)"unknown function";
  v739 = **(_QWORD **)v971;
  v740 = (const char *)(**(_QWORD **)v971 + 16);
  v914 = v740;
  if (*(char *)(**(_QWORD **)v971 + 39) < 0)
  {
    v740 = *(const char **)(v739 + 16);
    v741 = *(_QWORD *)(v739 + 24);
  }
  else
  {
    v741 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
  }
  v940 = *(_QWORD *)(v7 + 20992);
  v930 = *(_QWORD *)(v7 + 20984);
  v923 = *(_QWORD *)(v7 + 152);
  v742 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v742 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v992);
    sub_223199C58("com.apple.cv3d", (unint64_t)v992, byte_255788F40);
    if (v992[24] && (v992[23] & 0x80000000) != 0)
      operator delete(*(void **)v992);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v743 = byte_255788F40;
  else
    v743 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v744 = byte_255788F40[23];
  else
    v744 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v992 = os_log_create(v743, v740);
  v745 = &v992[8];
  if (v744 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v744 >= 0x17)
  {
    v746 = v736;
    v747 = (v744 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v744 | 7) != 0x17)
      v747 = v744 | 7;
    v748 = v747 + 1;
    v745 = operator new(v747 + 1);
    *(_QWORD *)&v992[16] = v744;
    *(_QWORD *)&v992[24] = v748 | 0x8000000000000000;
    *(_QWORD *)&v992[8] = v745;
    v736 = v746;
    goto LABEL_1229;
  }
  v992[31] = v744;
  if (v744)
LABEL_1229:
    memmove(v745, v743, v744);
  v745[v744] = 0;
  v992[32] = 1;
  v749 = &v992[40];
  v7 = a1;
  if (v741 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v741 >= 0x17)
  {
    v750 = (v741 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v741 | 7) != 0x17)
      v750 = v741 | 7;
    v751 = v750 + 1;
    v749 = operator new(v750 + 1);
    *(_QWORD *)&v992[48] = v741;
    *(_QWORD *)&v992[56] = v751 | 0x8000000000000000;
    *(_QWORD *)&v992[40] = v749;
    goto LABEL_1237;
  }
  v992[63] = v741;
  if (v741)
LABEL_1237:
    memmove(v749, v740, v741);
  v749[v741] = 0;
  v992[64] = 1;
  v752 = *(NSObject **)v992;
  if ((v992[63] & 0x80000000) != 0)
    operator delete(*(void **)&v992[40]);
  if (v992[32] && (v992[31] & 0x80000000) != 0)
    operator delete(*(void **)&v992[8]);
  if (*(_QWORD *)v992)
    os_release(*(void **)v992);
  if (v738 && *(_QWORD *)(v738 + 24))
  {
    v753 = _os_log_pack_size();
    v754 = (std::__shared_weak_count_vtbl *)operator new(v753, (std::align_val_t)8uLL);
    v755 = (std::__shared_weak_count *)operator new();
    v756 = v755;
    v755->__shared_owners_ = 0;
    v757 = (unint64_t *)&v755->__shared_owners_;
    v755->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v755->__shared_weak_owners_ = 0;
    v755[1].__vftable = v754;
    *(_QWORD *)v992 = v754;
    *(_QWORD *)&v992[8] = v754;
    *(_QWORD *)&v992[16] = v755;
    do
      v758 = __ldxr(v757);
    while (__stxr(v758 + 1, v757));
    memset(&v992[24], 0, 24);
    do
      v759 = __ldaxr(v757);
    while (__stlxr(v759 - 1, v757));
    if (!v759)
    {
      ((void (*)(std::__shared_weak_count *))v755->__on_zero_shared)(v755);
      std::__shared_weak_count::__release_weak(v756);
    }
    v760 = *(_QWORD *)v992;
    v761 = _os_log_pack_fill();
    *(_DWORD *)v761 = 134218240;
    *(_QWORD *)(v761 + 4) = v923;
    *(_WORD *)(v761 + 12) = 1024;
    *(_DWORD *)(v761 + 14) = -858993459 * ((unint64_t)(v940 - v930) >> 12);
    v762 = operator new();
    v763 = *(unsigned __int8 *)(v739 + 39);
    v764 = v914;
    if ((v763 & 0x80u) != 0)
    {
      v764 = *(const char **)(v739 + 16);
      v763 = *(_QWORD *)(v739 + 24);
    }
    *(_QWORD *)v762 = v760;
    *(_OWORD *)(v762 + 8) = *(_OWORD *)&v992[8];
    *(_QWORD *)&v992[8] = 0;
    *(_QWORD *)&v992[16] = 0;
    *(_OWORD *)(v762 + 24) = *(_OWORD *)&v992[24];
    *(_QWORD *)&v992[24] = 0;
    *(_QWORD *)&v992[32] = 0;
    *(_QWORD *)(v762 + 40) = v764;
    *(_QWORD *)(v762 + 48) = v763;
    *(_BYTE *)(v762 + 56) = 1;
    __src.__r_.__value_.__r.__words[0] = 0;
    v957.__r_.__value_.__r.__words[0] = v762;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v738 + 24) + 40))(*(_QWORD *)(v738 + 24), &v957);
    v765 = v957.__r_.__value_.__r.__words[0];
    v957.__r_.__value_.__r.__words[0] = 0;
    if (v765)
    {
      v766 = *(std::__shared_weak_count **)(v765 + 32);
      if (v766)
      {
        v767 = (unint64_t *)&v766->__shared_owners_;
        do
          v768 = __ldaxr(v767);
        while (__stlxr(v768 - 1, v767));
        if (!v768)
        {
          ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
          std::__shared_weak_count::__release_weak(v766);
        }
      }
      v769 = *(std::__shared_weak_count **)(v765 + 16);
      if (v769)
      {
        v770 = (unint64_t *)&v769->__shared_owners_;
        do
          v771 = __ldaxr(v770);
        while (__stlxr(v771 - 1, v770));
        if (!v771)
        {
          ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
          std::__shared_weak_count::__release_weak(v769);
        }
      }
      MEMORY[0x227684CE8](v765, 0x10F0C40B62ED6C6);
      v772 = __src.__r_.__value_.__r.__words[0];
      __src.__r_.__value_.__r.__words[0] = 0;
      if (v772)
      {
        v773 = *(std::__shared_weak_count **)(v772 + 32);
        if (v773)
        {
          v774 = (unint64_t *)&v773->__shared_owners_;
          do
            v775 = __ldaxr(v774);
          while (__stlxr(v775 - 1, v774));
          if (!v775)
          {
            ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
            std::__shared_weak_count::__release_weak(v773);
          }
        }
        v776 = *(std::__shared_weak_count **)(v772 + 16);
        if (v776)
        {
          v777 = (unint64_t *)&v776->__shared_owners_;
          do
            v778 = __ldaxr(v777);
          while (__stlxr(v778 - 1, v777));
          if (!v778)
          {
            ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
            std::__shared_weak_count::__release_weak(v776);
          }
        }
        MEMORY[0x227684CE8](v772, 0x10F0C40B62ED6C6);
      }
    }
    v779 = *(std::__shared_weak_count **)&v992[32];
    if (*(_QWORD *)&v992[32])
    {
      v780 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
      do
        v781 = __ldaxr(v780);
      while (__stlxr(v781 - 1, v780));
      if (!v781)
      {
        ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
        std::__shared_weak_count::__release_weak(v779);
      }
    }
    v782 = *(std::__shared_weak_count **)&v992[16];
    if (*(_QWORD *)&v992[16])
    {
      v783 = (unint64_t *)(*(_QWORD *)&v992[16] + 8);
      do
        v784 = __ldaxr(v783);
      while (__stlxr(v784 - 1, v783));
      if (!v784)
      {
        ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
        std::__shared_weak_count::__release_weak(v782);
      }
    }
  }
  else
  {
    os_log_type_enabled(v752, OS_LOG_TYPE_INFO);
    *(_DWORD *)v992 = 134218240;
    *(_QWORD *)&v992[4] = v923;
    *(_WORD *)&v992[12] = 1024;
    *(_DWORD *)&v992[14] = -858993459 * ((unint64_t)(v940 - v930) >> 12);
    v785 = (void *)_os_log_send_and_compose_impl();
    if (v785)
      free(v785);
  }
  if (v736)
  {
    sub_22322C138((uint64_t)v971, "Updated %lu voxel blocks (allocated blocks after update: %i)", *(_QWORD *)(a1 + 152), -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 20992) - *(_QWORD *)(a1 + 20984)) >> 12));
    sub_223182C08((uint64_t)v971);
  }
  sub_223182C08((uint64_t)v971);
  v786 = v976;
  if (v976)
  {
    v787 = (unint64_t *)&v976->__shared_owners_;
    do
      v788 = __ldaxr(v787);
    while (__stlxr(v788 - 1, v787));
    if (!v788)
    {
      ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
      std::__shared_weak_count::__release_weak(v786);
    }
  }
LABEL_1297:
  v789 = *(_QWORD *)(v7 + 21496);
  v790 = *(_QWORD *)(v7 + 21504);
  if (v789 == v790)
  {
    v791 = 0;
    v792 = 0;
  }
  else
  {
    v791 = 0;
    v792 = 0;
    v793 = *(_QWORD *)(v789 + 328);
    v794 = *(_QWORD *)(v789 + 336);
    v795 = 0;
    n = 0;
    if (v793 != v794)
      goto LABEL_1301;
    while (1)
    {
      v789 += 368;
      if (v789 == v790)
        break;
      v793 = *(_QWORD *)(v789 + 328);
      v794 = *(_QWORD *)(v789 + 336);
      v795 = v792;
      for (n = v791; v793 != v794; v793 += 464)
      {
LABEL_1301:
        v797 = *(_DWORD *)(v793 + 448);
        if (v797)
          v792 = v795 + 1;
        else
          v791 = ++n;
        if (v797)
          ++v795;
      }
    }
  }
  sub_223AF24D8(&__s);
  if (*(int *)__s[7] <= 3)
  {
    v798 = *((unsigned __int8 *)__s + 72);
    v799 = sub_22322F254((uint64_t)__s, "OSLogSurrogateAppender", 1, 0);
    v800 = (_QWORD **)v799;
    if (v798 || v799 != 0)
    {
      v900 = v798;
      *(_QWORD *)v971 = &__s;
      *(std::chrono::steady_clock::time_point *)&v971[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v971[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v971[24] = 3;
      v972 = "unknown file";
      v973 = 637;
      v975 = 0;
      v976 = 0;
      v974 = (uint64_t *)"unknown function";
      v802 = **(_QWORD **)v971;
      v896 = **(_QWORD **)v971 + 16;
      v899 = **(_QWORD **)v971;
      if (*(char *)(**(_QWORD **)v971 + 39) < 0)
      {
        v803 = *(_QWORD *)(v802 + 24);
        v941 = *(const char **)(v802 + 16);
      }
      else
      {
        v803 = *(unsigned __int8 *)(**(_QWORD **)v971 + 39);
        v941 = (const char *)(v802 + 16);
      }
      v915 = *(_QWORD *)(a1 + 20992);
      categoryb = *(_QWORD *)(a1 + 20984);
      *(_QWORD *)v910 = a2[1];
      v804 = *(_QWORD *)(a1 + 112);
      v924 = *(_QWORD *)(a1 + 104);
      v805 = *(_QWORD *)(a1 + 21480);
      v931 = *(_QWORD *)(a1 + 21472);
      __dsta = (void *)a7[2];
      v904 = *a2;
      v806 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v806 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v992);
        sub_223199C58("com.apple.cv3d", (unint64_t)v992, byte_255788F40);
        if (v992[24] && (v992[23] & 0x80000000) != 0)
          operator delete(*(void **)v992);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v807 = byte_255788F40;
      else
        v807 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v808 = byte_255788F40[23];
      else
        v808 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v992 = os_log_create(v807, v941);
      v809 = &v992[8];
      if (v808 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v808 >= 0x17)
      {
        v893 = v800;
        v810 = v804;
        v811 = v805;
        v812 = (v808 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v808 | 7) != 0x17)
          v812 = v808 | 7;
        v813 = v812 + 1;
        v809 = operator new(v812 + 1);
        *(_QWORD *)&v992[16] = v808;
        *(_QWORD *)&v992[24] = v813 | 0x8000000000000000;
        *(_QWORD *)&v992[8] = v809;
        v805 = v811;
        v804 = v810;
        v800 = v893;
      }
      else
      {
        v992[31] = v808;
        if (!v808)
        {
LABEL_1333:
          v809[v808] = 0;
          v992[32] = 1;
          v814 = &v992[40];
          if (v803 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v803 >= 0x17)
          {
            v815 = (v803 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v803 | 7) != 0x17)
              v815 = v803 | 7;
            v816 = v815 + 1;
            v814 = operator new(v815 + 1);
            *(_QWORD *)&v992[48] = v803;
            *(_QWORD *)&v992[56] = v816 | 0x8000000000000000;
            *(_QWORD *)&v992[40] = v814;
          }
          else
          {
            v992[63] = v803;
            if (!v803)
            {
LABEL_1341:
              v814[v803] = 0;
              v992[64] = 1;
              v817 = *(NSObject **)v992;
              if ((v992[63] & 0x80000000) != 0)
                operator delete(*(void **)&v992[40]);
              if (v992[32] && (v992[31] & 0x80000000) != 0)
                operator delete(*(void **)&v992[8]);
              if (*(_QWORD *)v992)
                os_release(*(void **)v992);
              v818 = v805 - v931;
              v819 = (v804 - v924) >> 4;
              v820 = v818 >> 4;
              if (v800 && v800[3])
              {
                v942 = v818 >> 4;
                v821 = _os_log_pack_size();
                v822 = (std::__shared_weak_count_vtbl *)operator new(v821, (std::align_val_t)8uLL);
                v823 = (std::__shared_weak_count *)operator new();
                v824 = v823;
                v823->__shared_owners_ = 0;
                v825 = (unint64_t *)&v823->__shared_owners_;
                v823->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v823->__shared_weak_owners_ = 0;
                v823[1].__vftable = v822;
                *(_QWORD *)v992 = v822;
                *(_QWORD *)&v992[8] = v822;
                *(_QWORD *)&v992[16] = v823;
                do
                  v826 = __ldxr(v825);
                while (__stxr(v826 + 1, v825));
                memset(&v992[24], 0, 24);
                do
                  v827 = __ldaxr(v825);
                while (__stlxr(v827 - 1, v825));
                if (!v827)
                {
                  ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                  std::__shared_weak_count::__release_weak(v824);
                }
                v828 = *(_QWORD *)v992;
                v829 = _os_log_pack_fill();
                v830 = *(unsigned __int8 *)(v874 + 2088);
                v831 = *a4;
                *(_DWORD *)v829 = 134220288;
                *(_QWORD *)(v829 + 4) = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)v910 - (_QWORD)v904) >> 3);
                *(_WORD *)(v829 + 12) = 2048;
                *(_QWORD *)(v829 + 14) = v819;
                *(_WORD *)(v829 + 22) = 2048;
                *(_QWORD *)(v829 + 24) = __dsta;
                *(_WORD *)(v829 + 32) = 1024;
                *(_DWORD *)(v829 + 34) = -858993459 * ((unint64_t)(v915 - categoryb) >> 12);
                *(_WORD *)(v829 + 38) = 1024;
                *(_DWORD *)(v829 + 40) = v830;
                *(_WORD *)(v829 + 44) = 1024;
                *(_DWORD *)(v829 + 46) = v831;
                *(_WORD *)(v829 + 50) = 2048;
                *(_QWORD *)(v829 + 52) = v942;
                *(_WORD *)(v829 + 60) = 1024;
                *(_DWORD *)(v829 + 62) = 0;
                *(_WORD *)(v829 + 66) = 1024;
                *(_DWORD *)(v829 + 68) = v792;
                *(_WORD *)(v829 + 72) = 1024;
                *(_DWORD *)(v829 + 74) = v791;
                v832 = operator new();
                v833 = *(unsigned __int8 *)(v899 + 39);
                v834 = v896;
                if ((v833 & 0x80u) != 0)
                {
                  v834 = *(_QWORD *)(v899 + 16);
                  v833 = *(_QWORD *)(v899 + 24);
                }
                *(_QWORD *)v832 = v828;
                *(_OWORD *)(v832 + 8) = *(_OWORD *)&v992[8];
                *(_QWORD *)&v992[8] = 0;
                *(_QWORD *)&v992[16] = 0;
                *(_OWORD *)(v832 + 24) = *(_OWORD *)&v992[24];
                *(_QWORD *)&v992[24] = 0;
                *(_QWORD *)&v992[32] = 0;
                *(_QWORD *)(v832 + 40) = v834;
                *(_QWORD *)(v832 + 48) = v833;
                *(_BYTE *)(v832 + 56) = 1;
                __src.__r_.__value_.__r.__words[0] = 0;
                v957.__r_.__value_.__r.__words[0] = v832;
                (*(void (**)(_QWORD *, std::string *))(*v800[3] + 40))(v800[3], &v957);
                v835 = v957.__r_.__value_.__r.__words[0];
                v957.__r_.__value_.__r.__words[0] = 0;
                if (v835)
                {
                  v836 = *(std::__shared_weak_count **)(v835 + 32);
                  if (v836)
                  {
                    v837 = (unint64_t *)&v836->__shared_owners_;
                    do
                      v838 = __ldaxr(v837);
                    while (__stlxr(v838 - 1, v837));
                    if (!v838)
                    {
                      ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                      std::__shared_weak_count::__release_weak(v836);
                    }
                  }
                  v839 = *(std::__shared_weak_count **)(v835 + 16);
                  if (v839)
                  {
                    v840 = (unint64_t *)&v839->__shared_owners_;
                    do
                      v841 = __ldaxr(v840);
                    while (__stlxr(v841 - 1, v840));
                    if (!v841)
                    {
                      ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
                      std::__shared_weak_count::__release_weak(v839);
                    }
                  }
                  MEMORY[0x227684CE8](v835, 0x10F0C40B62ED6C6);
                  v842 = __src.__r_.__value_.__r.__words[0];
                  __src.__r_.__value_.__r.__words[0] = 0;
                  if (v842)
                  {
                    v843 = *(std::__shared_weak_count **)(v842 + 32);
                    if (v843)
                    {
                      v844 = (unint64_t *)&v843->__shared_owners_;
                      do
                        v845 = __ldaxr(v844);
                      while (__stlxr(v845 - 1, v844));
                      if (!v845)
                      {
                        ((void (*)(std::__shared_weak_count *))v843->__on_zero_shared)(v843);
                        std::__shared_weak_count::__release_weak(v843);
                      }
                    }
                    v846 = *(std::__shared_weak_count **)(v842 + 16);
                    if (v846)
                    {
                      v847 = (unint64_t *)&v846->__shared_owners_;
                      do
                        v848 = __ldaxr(v847);
                      while (__stlxr(v848 - 1, v847));
                      if (!v848)
                      {
                        ((void (*)(std::__shared_weak_count *))v846->__on_zero_shared)(v846);
                        std::__shared_weak_count::__release_weak(v846);
                      }
                    }
                    MEMORY[0x227684CE8](v842, 0x10F0C40B62ED6C6);
                  }
                }
                v849 = *(std::__shared_weak_count **)&v992[32];
                v850 = v900;
                if (*(_QWORD *)&v992[32])
                {
                  v851 = (unint64_t *)(*(_QWORD *)&v992[32] + 8);
                  do
                    v852 = __ldaxr(v851);
                  while (__stlxr(v852 - 1, v851));
                  if (!v852)
                  {
                    ((void (*)(std::__shared_weak_count *))v849->__on_zero_shared)(v849);
                    std::__shared_weak_count::__release_weak(v849);
                  }
                }
                v853 = *(std::__shared_weak_count **)&v992[16];
                if (*(_QWORD *)&v992[16])
                {
                  v854 = (unint64_t *)(*(_QWORD *)&v992[16] + 8);
                  do
                    v855 = __ldaxr(v854);
                  while (__stlxr(v855 - 1, v854));
                  if (!v855)
                  {
                    ((void (*)(std::__shared_weak_count *))v853->__on_zero_shared)(v853);
                    std::__shared_weak_count::__release_weak(v853);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v817, OS_LOG_TYPE_INFO);
                v856 = *(unsigned __int8 *)(v874 + 2088);
                v857 = *a4;
                *(_DWORD *)v992 = 134220288;
                *(_QWORD *)&v992[4] = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)v910 - (_QWORD)v904) >> 3);
                *(_WORD *)&v992[12] = 2048;
                *(_QWORD *)&v992[14] = v819;
                *(_WORD *)&v992[22] = 2048;
                *(_QWORD *)&v992[24] = __dsta;
                *(_WORD *)&v992[32] = 1024;
                *(_DWORD *)&v992[34] = -858993459 * ((unint64_t)(v915 - categoryb) >> 12);
                *(_WORD *)&v992[38] = 1024;
                *(_DWORD *)&v992[40] = v856;
                *(_WORD *)&v992[44] = 1024;
                *(_DWORD *)&v992[46] = v857;
                *(_WORD *)&v992[50] = 2048;
                *(_QWORD *)&v992[52] = v820;
                *(_WORD *)&v992[60] = 1024;
                *(_DWORD *)&v992[62] = 0;
                *(_WORD *)&v992[66] = 1024;
                *(_DWORD *)&v992[68] = v792;
                *(_WORD *)&v992[72] = 1024;
                *(_DWORD *)&v992[74] = v791;
                v858 = (void *)_os_log_send_and_compose_impl();
                v850 = v900;
                if (v858)
                  free(v858);
              }
              if (v850)
              {
                sub_22322C138((uint64_t)v971, "KFOS: ukf:%lu tkf:%lu ub:%lu ab:%u tm:%d rb:%d f:%lu fc:%d rwkf:%u rwokf:%u", 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4, a7[2], -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 20992) - *(_QWORD *)(a1 + 20984)) >> 12), *(unsigned __int8 *)(v874 + 2088), *a4, (uint64_t)(*(_QWORD *)(a1 + 21480) - *(_QWORD *)(a1 + 21472)) >> 4, 0, v792, v791);
                sub_223182C08((uint64_t)v971);
              }
              sub_223182C08((uint64_t)v971);
              v859 = v976;
              if (v976)
              {
                v860 = (unint64_t *)&v976->__shared_owners_;
                do
                  v861 = __ldaxr(v860);
                while (__stlxr(v861 - 1, v860));
                if (!v861)
                {
                  ((void (*)(std::__shared_weak_count *))v859->__on_zero_shared)(v859);
                  std::__shared_weak_count::__release_weak(v859);
                }
              }
              goto LABEL_1400;
            }
          }
          memmove(v814, v941, v803);
          goto LABEL_1341;
        }
      }
      memmove(v809, v807, v808);
      goto LABEL_1333;
    }
  }
LABEL_1400:
  v170 = (char *)v947;
  if (v947)
  {
LABEL_1401:
    v862 = (char *)v948;
    v863 = v170;
    if ((char *)v948 != v170)
    {
      do
      {
        v864 = (std::__shared_weak_count *)*((_QWORD *)v862 - 28);
        if (v864)
        {
          v865 = (unint64_t *)&v864->__shared_owners_;
          do
            v866 = __ldaxr(v865);
          while (__stlxr(v866 - 1, v865));
          if (!v866)
          {
            ((void (*)(std::__shared_weak_count *))v864->__on_zero_shared)(v864);
            std::__shared_weak_count::__release_weak(v864);
          }
        }
        v862 -= 248;
      }
      while (v862 != v170);
      v863 = v947;
    }
    *(_QWORD *)&v948 = v170;
    operator delete(v863);
  }
LABEL_1411:
  if (__p)
    operator delete(__p);
  if (v952)
    operator delete(v952);
}

void sub_223AFA61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  if (LOBYTE(STACK[0x4B8]) && SLOBYTE(STACK[0x4B7]) < 0)
    operator delete(*(void **)(v35 + 64));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x390]);
  sub_223198030(a35, *(_QWORD **)(a35 + 8));
  sub_223473EA8((void **)&STACK[0x298]);
  v38 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v38;
    operator delete(v38);
    v37 = (void *)STACK[0x2C8];
    if (!STACK[0x2C8])
LABEL_9:
      _Unwind_Resume(a1);
  }
  else
  {
    v37 = (void *)STACK[0x2C8];
    if (!STACK[0x2C8])
      goto LABEL_9;
  }
  STACK[0x2D0] = (unint64_t)v37;
  operator delete(v37);
  _Unwind_Resume(a1);
}

void sub_223AFB008(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  const char *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *p_p;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  void *v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  uint64_t *p_dst;
  void *v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  size_t v59;
  void *v60;
  _QWORD *v61;
  size_t v62;
  size_t v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  void *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  const char *v176;
  size_t v177;
  signed int v178;
  signed int v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int *v183;
  signed int v184;
  int v185;
  signed int v186;
  int v187;
  BOOL v188;
  BOOL v189;
  signed int v190;
  signed int v191;
  signed int v192;
  _DWORD *v193;
  BOOL v194;
  BOOL v195;
  int v196;
  int v197;
  int i;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  uint64_t j;
  unsigned __int8 v203;
  uint64_t v204;
  signed int v205;
  signed int v206;
  uint64_t v207;
  int *v208;
  int v209;
  signed int v210;
  signed int v211;
  unsigned int v212;
  BOOL v213;
  BOOL v214;
  signed int v215;
  signed int v216;
  signed int v217;
  _DWORD *v218;
  BOOL v219;
  BOOL v220;
  unsigned int v221;
  unsigned __int8 v222;
  uint64_t v223;
  uint64_t m;
  unsigned __int8 v225;
  unsigned int v226;
  uint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  uint64_t n;
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _WORD *v237;
  unsigned int v238;
  _BYTE *v239;
  uint64_t v240;
  int v241;
  int v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  _BOOL4 v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  char v254;
  char v255;
  _QWORD *v256;
  _QWORD **v257;
  _QWORD *v258;
  int v259;
  int v260;
  int v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _BYTE *v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  int k;
  _QWORD *v277;
  uint64_t v278;
  unsigned __int8 v279;
  const char *v280;
  size_t v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  NSObject *v288;
  size_t v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _DWORD *v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  void *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  std::mutex *v330;
  uint64_t v331;
  uint64_t v332;
  _OWORD *v333;
  __int128 v334;
  _OWORD *v335;
  void *v336;
  __int128 v337;
  _BYTE *v338;
  uint64_t v339;
  _BYTE *v340;
  uint64_t v341;
  uint64_t *v342;
  float32x4_t v343;
  uint64_t v344;
  int32x2_t v349;
  int v350;
  float32x4_t v351;
  uint64_t v352;
  uint64_t v353;
  float32x4_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD **v358;
  uint64_t v359;
  uint64_t v360;
  const float *v361;
  float32x4_t v362;
  int64x2_t v363;
  uint64_t *v364;
  std::__shared_weak_count *v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  __int128 v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  uint64_t v391;
  signed int v392;
  signed int v393;
  signed int v394;
  signed int v395;
  int v396;
  uint64_t v397;
  signed int v398;
  signed int v399;
  const char *v400;
  signed int v401;
  const char *__src;
  uint64_t v403;
  std::string v404;
  _QWORD **v405;
  _QWORD *v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  _BYTE v411[24];
  char *v412;
  __int128 v413;
  const char *v414;
  uint64_t v415;
  int v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  __int128 v421;
  uint64_t v422;
  uint64_t v423;
  __int128 v424;
  uint64_t v425;
  uint64_t v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  __int128 v430;
  uint64_t v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  int v440;
  __int128 v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int v448;
  char v449;
  uint64_t *__dst;
  __int128 v451;
  _BYTE v452[32];
  __int128 v453;
  const char *v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  __int128 v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  uint64_t v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  uint64_t v469;
  __int128 v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  __int128 v478;
  uint64_t v479;
  int v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  int v488;
  char v489;
  char __s[16];
  __int128 v491;
  int v492;
  __int128 v493;
  char v494;
  uint64_t v495;
  __int16 v496;
  _BYTE object[40];
  void *__p;
  size_t v499;
  unint64_t v500;
  int v501;
  uint64_t v502;

  v2 = (unsigned __int8 *)a2;
  v502 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 64);
  v5 = sub_223340F28((_QWORD *)(a1 + 64), a2);
  if (!v5 || !*((_BYTE *)v5 + 610))
  {
    sub_223AF0EC4(&v405);
    if (*(int *)v405[7] > 3)
      return;
    v15 = *((unsigned __int8 *)v405 + 72);
    v16 = sub_22322F254((uint64_t)v405, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (!v15 && v16 == 0)
      return;
    *(_QWORD *)v452 = &v405;
    *(std::chrono::steady_clock::time_point *)&v452[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v452[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v452[24] = 3;
    *(_QWORD *)&v453 = "unknown file";
    DWORD2(v453) = 1304;
    v456 = 0;
    v454 = "unknown function";
    v455 = 0;
    sub_2245664AC(v2, __s);
    v19 = **(_QWORD **)v452;
    v20 = **(_QWORD **)v452 + 16;
    if (*(char *)(**(_QWORD **)v452 + 39) < 0)
    {
      v22 = *(const char **)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      v390 = v2;
      v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v24 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v21 = *(unsigned __int8 *)(**(_QWORD **)v452 + 39);
      v22 = (const char *)(**(_QWORD **)v452 + 16);
      v390 = v2;
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_20;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_20:
    if (byte_255788F40[23] >= 0)
      v25 = byte_255788F40;
    else
      v25 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v26 = byte_255788F40[23];
    else
      v26 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v25, v22);
    v27 = &object[8];
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v26 >= 0x17)
    {
      v28 = v20;
      v29 = v15;
      v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v30 = v26 | 7;
      v31 = v30 + 1;
      v27 = operator new(v30 + 1);
      *(_QWORD *)&object[24] = v31 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v27;
      *(_QWORD *)&object[16] = v26;
      v15 = v29;
      v20 = v28;
    }
    else
    {
      object[31] = v26;
      if (!v26)
      {
LABEL_34:
        v27[v26] = 0;
        object[32] = 1;
        p_p = &__p;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v21 >= 0x17)
        {
          v34 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v34 = v21 | 7;
          v35 = v34 + 1;
          p_p = operator new(v34 + 1);
          v500 = v35 | 0x8000000000000000;
          __p = p_p;
          v499 = v21;
          v33 = v390;
        }
        else
        {
          HIBYTE(v500) = v21;
          v33 = v390;
          if (!v21)
          {
LABEL_42:
            *((_BYTE *)p_p + v21) = 0;
            LOBYTE(v501) = 1;
            v36 = *(NSObject **)object;
            if (SHIBYTE(v500) < 0)
              operator delete(__p);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = __s;
              v43 = (void *)_os_log_send_and_compose_impl();
              if (v43)
                free(v43);
              goto LABEL_159;
            }
            v37 = _os_log_pack_size();
            v38 = operator new(v37, (std::align_val_t)8uLL);
            v39 = (_QWORD *)operator new();
            *v39 = &off_24EC1F7F0;
            v39[1] = 0;
            v39[2] = 0;
            v39[3] = v38;
            *(_QWORD *)v411 = v38;
            *(_QWORD *)&v411[8] = v38;
            v412 = 0;
            *(_QWORD *)&v413 = 0;
            *(_QWORD *)&v411[16] = v39;
            v40 = strlen(__s);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v66 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v66 = v40 | 7;
              v67 = v66 + 1;
              p_dst = (uint64_t *)operator new(v66 + 1);
              *((_QWORD *)&v451 + 1) = v67 | 0x8000000000000000;
              __dst = p_dst;
              *(_QWORD *)&v451 = v41;
              v33 = v390;
            }
            else
            {
              HIBYTE(v451) = v40;
              p_dst = (uint64_t *)&__dst;
              if (!v40)
              {
LABEL_99:
                *((_BYTE *)p_dst + v41) = 0;
                v68 = (uint64_t)__dst;
                *(_QWORD *)&v493 = v451;
                *(_QWORD *)((char *)&v493 + 7) = *(_QWORD *)((char *)&v451 + 7);
                v69 = HIBYTE(v451);
                v70 = operator new(0x38uLL);
                v70[1] = 0;
                v70[2] = 0;
                v70[3] = off_24EC1FA48;
                *v70 = &off_24EC1F9F8;
                v71 = v493;
                v70[4] = v68;
                v70[5] = v71;
                *(_QWORD *)((char *)v70 + 47) = *(_QWORD *)((char *)&v493 + 7);
                *((_BYTE *)v70 + 55) = v69;
                *(_QWORD *)&v493 = 0;
                *(_QWORD *)((char *)&v493 + 7) = 0;
                v72 = (std::__shared_weak_count *)v413;
                v412 = (char *)(v70 + 3);
                *(_QWORD *)&v413 = v70;
                if (v72)
                {
                  p_shared_owners = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldaxr(p_shared_owners);
                  while (__stlxr(v74 - 1, p_shared_owners));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v411;
                v75 = v412;
                *(_QWORD *)&object[16] = *(_QWORD *)&v411[16];
                if (*(_QWORD *)&v411[16])
                {
                  v76 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
                  do
                    v77 = __ldxr(v76);
                  while (__stxr(v77 + 1, v76));
                }
                v78 = (std::__shared_weak_count *)v413;
                *(_QWORD *)&object[24] = v75;
                *(_QWORD *)&object[32] = v413;
                if ((_QWORD)v413)
                {
                  v79 = (unint64_t *)(v413 + 8);
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                  __p = v75;
                  do
                    v81 = __ldaxr(v79);
                  while (__stlxr(v81 - 1, v79));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                else
                {
                  __p = v75;
                }
                v82 = *(std::__shared_weak_count **)&v411[16];
                if (*(_QWORD *)&v411[16])
                {
                  v83 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                v85 = *(_QWORD *)object;
                if (*((char *)__p + 31) >= 0)
                  v86 = (char *)__p + 8;
                else
                  v86 = (char *)*((_QWORD *)__p + 1);
                v87 = _os_log_pack_fill();
                *(_DWORD *)v87 = 136315138;
                *(_QWORD *)(v87 + 4) = v86;
                v88 = operator new();
                v89 = *(unsigned __int8 *)(v19 + 39);
                v90 = *(_QWORD *)(v19 + 16);
                v91 = *(_QWORD *)(v19 + 24);
                v92 = *(_OWORD *)&object[24];
                *(_OWORD *)(v88 + 8) = *(_OWORD *)&object[8];
                if ((v89 & 0x80u) != 0)
                  v89 = v91;
                else
                  v90 = v20;
                *(_QWORD *)v88 = v85;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v88 + 24) = v92;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v88 + 40) = v90;
                *(_QWORD *)(v88 + 48) = v89;
                *(_BYTE *)(v88 + 56) = 1;
                __dst = 0;
                *(_QWORD *)v411 = v88;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v411);
                v93 = *(_QWORD *)v411;
                *(_QWORD *)v411 = 0;
                if (v93)
                {
                  v94 = *(std::__shared_weak_count **)(v93 + 32);
                  if (v94)
                  {
                    v95 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  v97 = *(std::__shared_weak_count **)(v93 + 16);
                  if (v97)
                  {
                    v98 = (unint64_t *)&v97->__shared_owners_;
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 - 1, v98));
                    if (!v99)
                    {
                      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                      std::__shared_weak_count::__release_weak(v97);
                    }
                  }
                  MEMORY[0x227684CE8](v93, 0x10F0C40B62ED6C6);
                  v100 = (uint64_t)__dst;
                  __dst = 0;
                  if (v100)
                  {
                    v101 = *(std::__shared_weak_count **)(v100 + 32);
                    if (v101)
                    {
                      v102 = (unint64_t *)&v101->__shared_owners_;
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                    v104 = *(std::__shared_weak_count **)(v100 + 16);
                    if (v104)
                    {
                      v105 = (unint64_t *)&v104->__shared_owners_;
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
                  }
                }
                v107 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v108 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                v110 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v111 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                }
LABEL_159:
                if (v15)
                {
                  sub_2245664AC(v33, object);
                  sub_22322C138((uint64_t)v452, "Deintegrating keyframe %s - nothing to do\n", object);
                  sub_223182C08((uint64_t)v452);
                }
                sub_223182C08((uint64_t)v452);
                v113 = v456;
                if (v456)
                {
                  v114 = (unint64_t *)&v456->__shared_owners_;
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
                return;
              }
            }
            memcpy(p_dst, __s, v41);
            goto LABEL_99;
          }
        }
        memmove(p_p, v22, v21);
        goto LABEL_42;
      }
    }
    memmove(v27, v25, v26);
    goto LABEL_34;
  }
  sub_223AF0EC4(&v405);
  v403 = a1;
  if (*(int *)v405[7] > 3)
    goto LABEL_237;
  v6 = *((unsigned __int8 *)v405 + 72);
  v7 = sub_22322F254((uint64_t)v405, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  _ZF = !v6 && v7 == 0;
  if (_ZF)
    goto LABEL_237;
  *(_QWORD *)v452 = &v405;
  *(std::chrono::steady_clock::time_point *)&v452[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v452[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v452[24] = 3;
  *(_QWORD *)&v453 = "unknown file";
  DWORD2(v453) = 1307;
  v456 = 0;
  v454 = "unknown function";
  v455 = 0;
  sub_2245664AC(v2, __s);
  v10 = **(_QWORD **)v452;
  v11 = **(_QWORD **)v452 + 16;
  if (*(char *)(**(_QWORD **)v452 + 39) < 0)
  {
    v13 = *(const char **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    v389 = v2;
    v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v44 & 1) != 0)
      goto LABEL_58;
  }
  else
  {
    v12 = *(unsigned __int8 *)(**(_QWORD **)v452 + 39);
    v13 = (const char *)(**(_QWORD **)v452 + 16);
    v389 = v2;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_58;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_58:
  if (byte_255788F40[23] >= 0)
    v45 = byte_255788F40;
  else
    v45 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v46 = byte_255788F40[23];
  else
    v46 = *(_QWORD *)&byte_255788F40[8];
  __src = v13;
  *(_QWORD *)object = os_log_create(v45, v13);
  v47 = &object[8];
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v46 >= 0x17)
  {
    v48 = v8;
    v49 = v10;
    v50 = v11;
    v51 = v6;
    v52 = v4;
    v53 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v53 = v46 | 7;
    v54 = v53 + 1;
    v47 = operator new(v53 + 1);
    *(_QWORD *)&object[24] = v54 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v47;
    *(_QWORD *)&object[16] = v46;
    v4 = v52;
    v6 = v51;
    v11 = v50;
    v10 = v49;
    v8 = v48;
    goto LABEL_71;
  }
  object[31] = v46;
  if (v46)
LABEL_71:
    memmove(v47, v45, v46);
  v47[v46] = 0;
  object[32] = 1;
  v55 = &__p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v56 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v56 = v12 | 7;
    v57 = v56 + 1;
    v55 = operator new(v56 + 1);
    v500 = v57 | 0x8000000000000000;
    __p = v55;
    v499 = v12;
    goto LABEL_79;
  }
  HIBYTE(v500) = v12;
  if (v12)
LABEL_79:
    memmove(v55, __src, v12);
  *((_BYTE *)v55 + v12) = 0;
  LOBYTE(v501) = 1;
  v58 = *(NSObject **)object;
  if (SHIBYTE(v500) < 0)
    operator delete(__p);
  v2 = v389;
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v58, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = __s;
    v65 = (void *)_os_log_send_and_compose_impl();
    if (v65)
      free(v65);
    goto LABEL_230;
  }
  v59 = _os_log_pack_size();
  v60 = operator new(v59, (std::align_val_t)8uLL);
  v61 = (_QWORD *)operator new();
  *v61 = &off_24EC1F7F0;
  v61[1] = 0;
  v61[2] = 0;
  v61[3] = v60;
  *(_QWORD *)v411 = v60;
  *(_QWORD *)&v411[8] = v60;
  v412 = 0;
  *(_QWORD *)&v413 = 0;
  *(_QWORD *)&v411[16] = v61;
  v62 = strlen(__s);
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v63 = v62;
  if (v62 >= 0x17)
  {
    v116 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v116 = v62 | 7;
    v117 = v116 + 1;
    v64 = (uint64_t *)operator new(v116 + 1);
    *((_QWORD *)&v451 + 1) = v117 | 0x8000000000000000;
    __dst = v64;
    *(_QWORD *)&v451 = v63;
    goto LABEL_169;
  }
  HIBYTE(v451) = v62;
  v64 = (uint64_t *)&__dst;
  if (v62)
LABEL_169:
    memcpy(v64, __s, v63);
  *((_BYTE *)v64 + v63) = 0;
  v118 = (uint64_t)__dst;
  *(_QWORD *)&v493 = v451;
  *(_QWORD *)((char *)&v493 + 7) = *(_QWORD *)((char *)&v451 + 7);
  v119 = HIBYTE(v451);
  v120 = operator new(0x38uLL);
  v120[1] = 0;
  v120[2] = 0;
  v120[3] = off_24EC1FA48;
  *v120 = &off_24EC1F9F8;
  v121 = v493;
  v120[4] = v118;
  v120[5] = v121;
  *(_QWORD *)((char *)v120 + 47) = *(_QWORD *)((char *)&v493 + 7);
  *((_BYTE *)v120 + 55) = v119;
  *(_QWORD *)&v493 = 0;
  *(_QWORD *)((char *)&v493 + 7) = 0;
  v122 = (std::__shared_weak_count *)v413;
  v412 = (char *)(v120 + 3);
  *(_QWORD *)&v413 = v120;
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v411;
  v125 = v412;
  *(_QWORD *)&object[16] = *(_QWORD *)&v411[16];
  if (*(_QWORD *)&v411[16])
  {
    v126 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  v128 = (std::__shared_weak_count *)v413;
  *(_QWORD *)&object[24] = v125;
  *(_QWORD *)&object[32] = v413;
  if ((_QWORD)v413)
  {
    v129 = (unint64_t *)(v413 + 8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
    __p = v125;
    do
      v131 = __ldaxr(v129);
    while (__stlxr(v131 - 1, v129));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  else
  {
    __p = v125;
  }
  v132 = *(std::__shared_weak_count **)&v411[16];
  if (*(_QWORD *)&v411[16])
  {
    v133 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = *(_QWORD *)object;
  if (*((char *)__p + 31) >= 0)
    v136 = (char *)__p + 8;
  else
    v136 = (char *)*((_QWORD *)__p + 1);
  v137 = _os_log_pack_fill();
  *(_DWORD *)v137 = 136315138;
  *(_QWORD *)(v137 + 4) = v136;
  v138 = operator new();
  v139 = *(unsigned __int8 *)(v10 + 39);
  v140 = *(_QWORD *)(v10 + 16);
  v141 = *(_QWORD *)(v10 + 24);
  v142 = *(_OWORD *)&object[24];
  *(_OWORD *)(v138 + 8) = *(_OWORD *)&object[8];
  if ((v139 & 0x80u) != 0)
    v139 = v141;
  else
    v140 = v11;
  *(_QWORD *)v138 = v135;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v138 + 24) = v142;
  *(_QWORD *)&object[24] = 0;
  *(_QWORD *)&object[32] = 0;
  *(_QWORD *)(v138 + 40) = v140;
  *(_QWORD *)(v138 + 48) = v139;
  *(_BYTE *)(v138 + 56) = 1;
  __dst = 0;
  *(_QWORD *)v411 = v138;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v411);
  v2 = v389;
  v143 = *(_QWORD *)v411;
  *(_QWORD *)v411 = 0;
  if (v143)
  {
    v144 = *(std::__shared_weak_count **)(v143 + 32);
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = *(std::__shared_weak_count **)(v143 + 16);
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    MEMORY[0x227684CE8](v143, 0x10F0C40B62ED6C6);
    v150 = (uint64_t)__dst;
    __dst = 0;
    if (v150)
    {
      v151 = *(std::__shared_weak_count **)(v150 + 32);
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = *(std::__shared_weak_count **)(v150 + 16);
      if (v154)
      {
        v155 = (unint64_t *)&v154->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      MEMORY[0x227684CE8](v150, 0x10F0C40B62ED6C6);
    }
  }
  v157 = *(std::__shared_weak_count **)&object[32];
  if (*(_QWORD *)&object[32])
  {
    v158 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v161 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
LABEL_230:
  if (v6)
  {
    sub_2245664AC(v2, object);
    sub_22322C138((uint64_t)v452, "Deintegrating keyframe %s\n", object);
    sub_223182C08((uint64_t)v452);
  }
  sub_223182C08((uint64_t)v452);
  v163 = v456;
  if (v456)
  {
    v164 = (unint64_t *)&v456->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
LABEL_237:
  v493 = 0uLL;
  v494 = 0;
  *(std::chrono::steady_clock::time_point *)&v493 = std::chrono::steady_clock::now();
  v494 = 1;
  kdebug_trace();
  v166 = sub_22342DA5C((_QWORD *)(v403 + 22848), (uint64_t)v2);
  if (v166)
  {
    sub_2231AFBB8((_QWORD *)(v403 + 22848), v166, (uint64_t)object);
    v167 = *(void **)object;
    *(_QWORD *)object = 0;
    if (v167)
      operator delete(v167);
  }
  v168 = sub_22342DA5C(v4, (uint64_t)v2);
  if (v168)
    v169 = v168 + 4;
  else
    v169 = 0;
  if (v168)
  {
    v391 = (uint64_t)v2;
    v406 = 0;
    v407 = 0;
    v405 = &v406;
    v393 = *((_DWORD *)v169 + 41) & 0xFFFFFFF8;
    if ((int)(v169[19] & 0xFFFFFFF8) > v393)
    {
      v396 = 0;
LABEL_246:
      if (!sub_223340F28(v4, v391)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 178, (uint64_t)"KeyframeInfoExists(uuid)", 24, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_598;
      }
      v170 = sub_22342DA5C(v4, v391);
      v171 = v170;
      if (!v170)
        sub_223198218("unordered_map::at: key not found");
      if (!*((_BYTE *)v170 + 610)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 180, (uint64_t)"integrated", 10, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_598;
      }
      *((_BYTE *)v171 + 610) = 0;
      kdebug_trace();
      object[23] = 13;
      strcpy(object, "DeintegrateKF");
      v452[23] = 17;
      strcpy(v452, "KeyframeOccupancy");
      sub_22391CC34((uint64_t *)object, (uint64_t *)v452, (uint64_t)&v493);
      if ((v452[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v452);
        if ((object[23] & 0x80000000) == 0)
          goto LABEL_253;
      }
      else if ((object[23] & 0x80000000) == 0)
      {
LABEL_253:
        sub_223AF0EC4(&__dst);
        if (*(int *)__dst[7] > 3
          || (v172 = *((unsigned __int8 *)__dst + 72),
              v173 = sub_22322F254((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0),
              v174 = v173,
              !v172)
          && !v173)
        {
LABEL_509:
          sub_224569D7C();
          sub_224569A80();
          if (!os_variant_has_internal_diagnostics())
          {
LABEL_593:
            sub_223198030((uint64_t)&v405, v406);
            return;
          }
          v327 = sub_2241471F8();
          v328 = v327[2];
          if (v328)
          {
LABEL_513:
            v329 = *(_QWORD *)(v328 + 64);
            v330 = (std::mutex *)(v329 + 32);
            std::mutex::lock((std::mutex *)(v329 + 32));
            v332 = *(_QWORD *)(v329 + 96);
            v331 = *(_QWORD *)(v329 + 104);
            std::mutex::unlock(v330);
            if (v332 != v331)
            {
              v411[23] = 3;
              strcpy(v411, "Obs");
              sub_2245664AC((unsigned __int8 *)v169, object);
              v333 = operator new(0x28uLL);
              v334 = *(_OWORD *)&object[16];
              *v333 = *(_OWORD *)object;
              v333[1] = v334;
              *((_DWORD *)v333 + 8) = *(_DWORD *)&object[32];
              *((_BYTE *)v333 + 36) = 0;
              *((_BYTE *)v333 + 8) = 0;
              sub_2245664AC((unsigned __int8 *)v169, object);
              v335 = operator new(0x28uLL);
              v336 = v335;
              v337 = *(_OWORD *)&object[16];
              *v335 = *(_OWORD *)object;
              v335[1] = v337;
              *((_DWORD *)v335 + 8) = *(_DWORD *)&object[32];
              *((_BYTE *)v335 + 36) = 0;
              *((_BYTE *)v335 + 8) = 0;
              v338 = v411;
              if (v411[23] < 0)
                v338 = *(_BYTE **)v411;
              sub_22456D250("ObservationMapping.KFs.KF-%s.%s-%s", (std::string *)v452, v333, v335, v338);
              operator delete(v336);
              operator delete(v333);
              *(_QWORD *)object = "cv3d.recon.";
              *(_QWORD *)&object[8] = 11;
              v339 = v452[23];
              if (v452[23] >= 0)
                v340 = v452;
              else
                v340 = *(_BYTE **)v452;
              if (v452[23] < 0)
                v339 = *(_QWORD *)&v452[8];
              *(_QWORD *)&object[16] = v340;
              *(_QWORD *)&object[24] = v339;
              sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v404);
              if ((v452[23] & 0x80000000) != 0)
                operator delete(*(void **)v452);
              if ((v411[23] & 0x80000000) != 0)
                operator delete(*(void **)v411);
              sub_2241471F8();
              v341 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v341 + 24))(v341))
              {
                *(_OWORD *)__s = 0u;
                v491 = 0u;
                v492 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v341 + 24))(v341))
                {
                  *(_QWORD *)&v408 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v408 + 1) = 2;
                  v342 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v341 + 24))(v341))
                  {
                    sub_2241498F4((uint64_t)v452, 0);
                    v344 = (uint64_t)v405;
                    if (v405 != &v406)
                    {
                      __asm { FMOV            V8.2S, #1.0 }
                      do
                      {
                        v349 = *(int32x2_t *)(v344 + 28);
                        v350 = *(_DWORD *)(v344 + 36);
                        v409 = _D8;
                        LODWORD(v410) = 1065353216;
                        sub_22414CF6C(0, (uint64_t)object);
                        v352 = *(_QWORD *)object;
                        v353 = *(_QWORD *)&object[8];
                        if (*(_QWORD *)object == *(_QWORD *)&object[8])
                          goto LABEL_538;
                        v354.i64[0] = 0x4100000041000000;
                        v354.i64[1] = 0x4100000041000000;
                        do
                        {
                          v351.i64[0] = *(_QWORD *)v352;
                          v351.i32[2] = *(_DWORD *)(v352 + 8);
                          v351 = vmulq_f32(v351, v354);
                          *(_DWORD *)(v352 + 8) = v351.i32[2];
                          *(_QWORD *)v352 = v351.i64[0];
                          v352 += 12;
                        }
                        while (v352 != v353);
                        v352 = *(_QWORD *)object;
                        v355 = *(_QWORD *)&object[8];
                        if (*(_QWORD *)object == *(_QWORD *)&object[8])
                        {
LABEL_538:
                          v356 = v352;
                        }
                        else
                        {
                          *(float32x2_t *)v351.f32 = vcvt_f32_s32(v349);
                          do
                          {
                            v354.i64[0] = *(_QWORD *)v352;
                            v354.i32[2] = *(_DWORD *)(v352 + 8);
                            v351.f32[2] = (float)v350;
                            v354 = vaddq_f32(v351, v354);
                            *(_DWORD *)(v352 + 8) = v354.i32[2];
                            *(_QWORD *)v352 = v354.i64[0];
                            v352 += 12;
                          }
                          while (v352 != v355);
                          v356 = *(_QWORD *)&object[8];
                          v352 = *(_QWORD *)object;
                        }
                        sub_22339E688((uint64_t)&object[32], 0xAAAAAAAAAAAAAAABLL * ((v356 - v352) >> 2), &v409);
                        v501 = 1;
                        sub_22414E9E0((uint64_t)v452, (uint64_t)object);
                        sub_22316F8F4((uint64_t *)object);
                        v357 = *(_QWORD **)(v344 + 8);
                        if (v357)
                        {
                          do
                          {
                            v358 = (_QWORD **)v357;
                            v357 = (_QWORD *)*v357;
                          }
                          while (v357);
                        }
                        else
                        {
                          do
                          {
                            v358 = *(_QWORD ***)(v344 + 16);
                            _ZF = *v358 == (_QWORD *)v344;
                            v344 = (uint64_t)v358;
                          }
                          while (!_ZF);
                        }
                        v344 = (uint64_t)v358;
                      }
                      while (v358 != &v406);
                    }
                    v359 = *(_QWORD *)v452;
                    v360 = *(_QWORD *)&v452[8];
                    if (*(_QWORD *)v452 == *(_QWORD *)&v452[8])
                    {
                      v363 = vdupq_n_s64(*(unint64_t *)v452);
                    }
                    else
                    {
                      v361 = (const float *)(v403 + 312);
                      v362 = vld1q_dup_f32(v361);
                      do
                      {
                        v343.i64[0] = *(_QWORD *)v359;
                        v343.i32[2] = *(_DWORD *)(v359 + 8);
                        v343 = vmulq_f32(v362, v343);
                        *(_DWORD *)(v359 + 8) = v343.i32[2];
                        *(_QWORD *)v359 = v343.i64[0];
                        v359 += 12;
                      }
                      while (v359 != v360);
                      v363 = *(int64x2_t *)v452;
                    }
                    *(int64x2_t *)v411 = v363;
                    *(_QWORD *)&v411[16] = *(_QWORD *)&v452[16];
                    v412 = *(char **)&v452[24];
                    memset(v452, 0, 24);
                    v413 = v453;
                    v414 = v454;
                    v415 = v455;
                    v453 = 0uLL;
                    v454 = 0;
                    v416 = (int)v456;
                    v417 = v457;
                    v418 = v458;
                    v419 = v459;
                    v457 = 0uLL;
                    v420 = v460;
                    v421 = v461;
                    v422 = v462;
                    v423 = v463;
                    v458 = 0;
                    v461 = 0uLL;
                    v462 = 0;
                    v424 = v464;
                    v425 = v465;
                    v426 = v466;
                    v464 = 0uLL;
                    v427 = v467;
                    v428 = v468;
                    v429 = v469;
                    v465 = 0;
                    v467 = 0uLL;
                    v468 = 0;
                    v430 = v470;
                    v431 = v471;
                    v432 = v472;
                    v470 = 0uLL;
                    v433 = v473;
                    v434 = v474;
                    v435 = v475;
                    v471 = 0;
                    v473 = 0uLL;
                    v474 = 0;
                    v436 = v476;
                    v439 = v479;
                    v437 = v477;
                    v438 = v478;
                    v477 = 0;
                    v478 = 0uLL;
                    v440 = v480;
                    v441 = v481;
                    v443 = v483;
                    v442 = v482;
                    v481 = 0uLL;
                    v482 = 0;
                    v444 = v484;
                    LOBYTE(v445) = 0;
                    v449 = 0;
                    if (v489)
                    {
                      v446 = v486;
                      v445 = v485;
                      v447 = v487;
                      v448 = v488;
                      v449 = 1;
                    }
                    sub_22316F8F4((uint64_t *)v452);
                    strcpy(v452, "deintegrated");
                    *(_QWORD *)&v452[13] = v495;
                    *(_WORD *)&v452[21] = v496;
                    *(_WORD *)&v452[23] = 268;
                    v495 = 0;
                    v496 = 0;
                    sub_22329F414((uint64_t)v411, (__int128 *)v452, &v408, &__dst);
                    if (v452[24] && (v452[23] & 0x80000000) != 0)
                      operator delete(*(void **)v452);
                    sub_22316F8F4((uint64_t *)v411);
                    v364 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v341 + 56))(v341);
                    v366 = *v364;
                    v365 = (std::__shared_weak_count *)v364[1];
                    v409 = *v364;
                    v410 = v365;
                    if (v365)
                    {
                      v367 = (unint64_t *)&v365->__shared_owners_;
                      do
                        v368 = __ldxr(v367);
                      while (__stxr(v368 + 1, v367));
                    }
                    v369 = v451;
                    *(_QWORD *)v411 = &off_24EC6A3B8;
                    *(_OWORD *)&v411[8] = v451;
                    v451 = 0uLL;
                    *(_QWORD *)object = v366;
                    *(_QWORD *)&object[8] = v365;
                    if (v365)
                    {
                      v370 = (unint64_t *)&v365->__shared_owners_;
                      do
                        v371 = __ldxr(v370);
                      while (__stxr(v371 + 1, v370));
                    }
                    *(_QWORD *)&object[16] = &off_24EC6A3B8;
                    *(_OWORD *)&object[24] = v369;
                    if (*((_QWORD *)&v369 + 1))
                    {
                      v372 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
                      do
                        v373 = __ldxr(v372);
                      while (__stxr(v373 + 1, v372));
                    }
                    (*(void (**)(uint64_t *, _BYTE *))(*v342 + 16))(v342, object);
                    v374 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v375 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v376 = __ldaxr(v375);
                      while (__stlxr(v376 - 1, v375));
                      if (!v376)
                      {
                        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                        std::__shared_weak_count::__release_weak(v374);
                      }
                    }
                    v377 = *(std::__shared_weak_count **)&object[8];
                    if (*(_QWORD *)&object[8])
                    {
                      v378 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
                      do
                        v379 = __ldaxr(v378);
                      while (__stlxr(v379 - 1, v378));
                      if (!v379)
                      {
                        ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                        std::__shared_weak_count::__release_weak(v377);
                      }
                    }
                    v380 = *(std::__shared_weak_count **)&v411[16];
                    if (*(_QWORD *)&v411[16])
                    {
                      v381 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
                      do
                        v382 = __ldaxr(v381);
                      while (__stlxr(v382 - 1, v381));
                      if (!v382)
                      {
                        ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                        std::__shared_weak_count::__release_weak(v380);
                      }
                    }
                    v383 = v410;
                    if (v410)
                    {
                      v384 = (unint64_t *)&v410->__shared_owners_;
                      do
                        v385 = __ldaxr(v384);
                      while (__stlxr(v385 - 1, v384));
                      if (!v385)
                      {
                        ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                        std::__shared_weak_count::__release_weak(v383);
                      }
                    }
                    v386 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
                    if (*((_QWORD *)&v451 + 1))
                    {
                      v387 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
                      do
                        v388 = __ldaxr(v387);
                      while (__stlxr(v388 - 1, v387));
                      if (!v388)
                      {
                        ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                        std::__shared_weak_count::__release_weak(v386);
                      }
                    }
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v404.__r_.__value_.__l.__data_);
            }
            goto LABEL_593;
          }
          if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            v328 = v327[2];
            goto LABEL_513;
          }
LABEL_598:
          abort();
        }
        *(_QWORD *)v452 = &__dst;
        *(std::chrono::steady_clock::time_point *)&v452[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v452[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v452[24] = 3;
        *(_QWORD *)&v453 = "unknown file";
        DWORD2(v453) = 1370;
        v456 = 0;
        v454 = "unknown function";
        v455 = 0;
        v175 = **(_QWORD **)v452;
        v176 = (const char *)(**(_QWORD **)v452 + 16);
        v400 = v176;
        if (*(char *)(**(_QWORD **)v452 + 39) < 0)
        {
          v176 = *(const char **)(v175 + 16);
          v177 = *(_QWORD *)(v175 + 24);
        }
        else
        {
          v177 = *(unsigned __int8 *)(**(_QWORD **)v452 + 39);
        }
        v279 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v279 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v280 = byte_255788F40;
        else
          v280 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v281 = byte_255788F40[23];
        else
          v281 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)object = os_log_create(v280, v176);
        v282 = &object[8];
        if (v281 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v281 >= 0x17)
        {
          v283 = (v281 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v281 | 7) != 0x17)
            v283 = v281 | 7;
          v284 = v283 + 1;
          v282 = operator new(v283 + 1);
          *(_QWORD *)&object[24] = v284 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v282;
          *(_QWORD *)&object[16] = v281;
        }
        else
        {
          object[31] = v281;
          if (!v281)
          {
LABEL_441:
            v282[v281] = 0;
            object[32] = 1;
            v285 = &__p;
            if (v177 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v177 >= 0x17)
            {
              v286 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v177 | 7) != 0x17)
                v286 = v177 | 7;
              v287 = v286 + 1;
              v285 = operator new(v286 + 1);
              v500 = v287 | 0x8000000000000000;
              __p = v285;
              v499 = v177;
            }
            else
            {
              HIBYTE(v500) = v177;
              if (!v177)
                goto LABEL_449;
            }
            memmove(v285, v176, v177);
LABEL_449:
            *((_BYTE *)v285 + v177) = 0;
            LOBYTE(v501) = 1;
            v288 = *(NSObject **)object;
            if (SHIBYTE(v500) < 0)
              operator delete(__p);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v174 && *(_QWORD *)(v174 + 24))
            {
              v289 = _os_log_pack_size();
              v290 = (std::__shared_weak_count_vtbl *)operator new(v289, (std::align_val_t)8uLL);
              v291 = (std::__shared_weak_count *)operator new();
              v292 = v291;
              v291->__shared_owners_ = 0;
              v293 = (unint64_t *)&v291->__shared_owners_;
              v291->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v291->__shared_weak_owners_ = 0;
              v291[1].__vftable = v290;
              *(_QWORD *)object = v290;
              *(_QWORD *)&object[8] = v290;
              *(_QWORD *)&object[16] = v291;
              do
                v294 = __ldxr(v293);
              while (__stxr(v294 + 1, v293));
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)&object[24] = 0;
              __p = 0;
              do
                v295 = __ldaxr(v293);
              while (__stlxr(v295 - 1, v293));
              if (!v295)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v292);
              }
              v296 = *(_QWORD *)object;
              v297 = (_DWORD *)_os_log_pack_fill();
              *v297 = 67109120;
              v297[1] = v396;
              v298 = operator new();
              v299 = *(unsigned __int8 *)(v175 + 39);
              v300 = *(const char **)(v175 + 16);
              v301 = *(_QWORD *)(v175 + 24);
              v302 = *(_OWORD *)&object[24];
              *(_OWORD *)(v298 + 8) = *(_OWORD *)&object[8];
              if ((v299 & 0x80u) != 0)
                v299 = v301;
              else
                v300 = v400;
              *(_QWORD *)v298 = v296;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v298 + 24) = v302;
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v298 + 40) = v300;
              *(_QWORD *)(v298 + 48) = v299;
              *(_BYTE *)(v298 + 56) = 1;
              *(_QWORD *)__s = 0;
              *(_QWORD *)v411 = v298;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v174 + 24) + 40))(*(_QWORD *)(v174 + 24), v411);
              v303 = *(_QWORD *)v411;
              *(_QWORD *)v411 = 0;
              if (v303)
              {
                v304 = *(std::__shared_weak_count **)(v303 + 32);
                if (v304)
                {
                  v305 = (unint64_t *)&v304->__shared_owners_;
                  do
                    v306 = __ldaxr(v305);
                  while (__stlxr(v306 - 1, v305));
                  if (!v306)
                  {
                    ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                    std::__shared_weak_count::__release_weak(v304);
                  }
                }
                v307 = *(std::__shared_weak_count **)(v303 + 16);
                if (v307)
                {
                  v308 = (unint64_t *)&v307->__shared_owners_;
                  do
                    v309 = __ldaxr(v308);
                  while (__stlxr(v309 - 1, v308));
                  if (!v309)
                  {
                    ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                    std::__shared_weak_count::__release_weak(v307);
                  }
                }
                MEMORY[0x227684CE8](v303, 0x10F0C40B62ED6C6);
                v310 = *(_QWORD *)__s;
                *(_QWORD *)__s = 0;
                if (v310)
                {
                  v311 = *(std::__shared_weak_count **)(v310 + 32);
                  if (v311)
                  {
                    v312 = (unint64_t *)&v311->__shared_owners_;
                    do
                      v313 = __ldaxr(v312);
                    while (__stlxr(v313 - 1, v312));
                    if (!v313)
                    {
                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                      std::__shared_weak_count::__release_weak(v311);
                    }
                  }
                  v314 = *(std::__shared_weak_count **)(v310 + 16);
                  if (v314)
                  {
                    v315 = (unint64_t *)&v314->__shared_owners_;
                    do
                      v316 = __ldaxr(v315);
                    while (__stlxr(v316 - 1, v315));
                    if (!v316)
                    {
                      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                      std::__shared_weak_count::__release_weak(v314);
                    }
                  }
                  MEMORY[0x227684CE8](v310, 0x10F0C40B62ED6C6);
                }
              }
              v317 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v318 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v319 = __ldaxr(v318);
                while (__stlxr(v319 - 1, v318));
                if (!v319)
                {
                  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                  std::__shared_weak_count::__release_weak(v317);
                }
              }
              v320 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v321 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v322 = __ldaxr(v321);
                while (__stlxr(v322 - 1, v321));
                if (!v322)
                {
                  ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                  std::__shared_weak_count::__release_weak(v320);
                }
              }
            }
            else
            {
              os_log_type_enabled(v288, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 67109120;
              *(_DWORD *)&object[4] = v396;
              v323 = (void *)_os_log_send_and_compose_impl();
              if (v323)
                free(v323);
            }
            if (v172)
            {
              sub_22322C138((uint64_t)v452, "Deintegrated %i observation blocks", v396);
              sub_223182C08((uint64_t)v452);
            }
            sub_223182C08((uint64_t)v452);
            v324 = v456;
            if (v456)
            {
              v325 = (unint64_t *)&v456->__shared_owners_;
              do
                v326 = __ldaxr(v325);
              while (__stlxr(v326 - 1, v325));
              if (!v326)
              {
                ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                std::__shared_weak_count::__release_weak(v324);
              }
            }
            goto LABEL_509;
          }
        }
        memmove(v282, v280, v281);
        goto LABEL_441;
      }
      operator delete(*(void **)object);
      goto LABEL_253;
    }
    v396 = 0;
    v392 = *((_DWORD *)v169 + 37) & 0xFFFFFFF8;
    v395 = v169[20] & 0xFFFFFFF8;
    if (v392 > v395)
      goto LABEL_246;
    v399 = v169[19] & 0xFFFFFFF8;
    v394 = v169[18] & 0xFFFFFFF8;
    v398 = *((_DWORD *)v169 + 39) & 0xFFFFFFF8;
    if (v394 > v398)
      goto LABEL_246;
    v396 = 0;
    v397 = v403 + 184;
LABEL_262:
    v178 = v392;
LABEL_264:
    v179 = v394;
    v401 = v178;
LABEL_271:
    *(_QWORD *)v411 = __PAIR64__(v178, v179);
    *(_DWORD *)&v411[8] = v399;
    v180 = v403 + 21056;
    v181 = *(unsigned int *)(v403 + 360);
    if ((v181 & 0x80000000) == 0)
    {
      v182 = *(_QWORD *)(v403 + 368);
      v183 = (int *)(v182 + 4488 * (v181 & 0xFFFFFFFFCFFFFFFFLL));
      v185 = *v183;
      v184 = v183[1];
      v186 = v183[2];
      v187 = v179 - *v183;
      v188 = v179 < *v183 || v178 < v184;
      v189 = v188 || v399 < v186;
      v180 = v403 + 21056;
      if (!v189)
      {
        v190 = v183[3];
        v193 = v183 + 4;
        v192 = v183[4];
        v191 = v193[1];
        v194 = v179 < v190 && v178 < v192;
        v195 = v194 && v399 < v191;
        v180 = v403 + 21056;
        if (v195)
        {
          v196 = v178 - v184;
          v197 = v399 - v186;
          for (i = v190 - v185; ; v197 -= i & v197)
          {
            i >>= 1;
            v181 = *(unsigned int *)(v182
                                   + 4488 * (v181 & 0xCFFFFFFF)
                                   + 4 * ((4 * ((i & v187) != 0)) | (2 * ((i & v196) != 0)) | ((i & v197) != 0))
                                   + 24);
            if (i == *(_DWORD *)(v403 + 320) || v181 >> 30)
              break;
            v187 -= i & v187;
            v196 -= i & v196;
          }
          v180 = v403 + 21056;
          if ((v181 & 0x80000000) == 0)
          {
            v199 = *(_QWORD *)(v403 + 21104);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v403 + 21112) - v199) >> 4) <= v181)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C);
              v200 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v201 = qword_255795648;
                for (j = qword_255795650; v201 != j; v201 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v201)(*(_QWORD *)(v201 + 8), "info_index < allocated_voxel_block_infos_.size()", 48, "Invalid map index", 17);
              }
              v203 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "info_index < allocated_voxel_block_infos_.size()", 48, "Invalid map index", 17);
              v199 = *(_QWORD *)(v403 + 21104);
            }
            v180 = v199 + 48 * v181;
          }
        }
      }
    }
    if ((*(_DWORD *)(v180 + 40) & 0x80000000) != 0)
      goto LABEL_270;
    v204 = *(unsigned int *)(v403 + 360);
    if ((v204 & 0x80000000) != 0)
      goto LABEL_318;
    v205 = *(_DWORD *)&v411[4] & 0xFFFFFFF8;
    v206 = *(_DWORD *)&v411[8] & 0xFFFFFFF8;
    v207 = *(_QWORD *)(v403 + 368);
    v208 = (int *)(v207 + 4488 * (v204 & 0xFFFFFFFFCFFFFFFFLL));
    v209 = *v208;
    v210 = v208[1];
    v211 = v208[2];
    v212 = (*(_DWORD *)v411 & 0xFFFFFFF8) - *v208;
    v213 = (int)(*(_DWORD *)v411 & 0xFFFFFFF8) < *v208 || v205 < v210;
    v214 = v213 || v206 < v211;
    if (v214
      || ((v215 = v208[3], v218 = v208 + 4, v217 = v208[4], v216 = v218[1], (int)(*(_DWORD *)v411 & 0xFFFFFFF8) < v215)
        ? (v219 = v205 < v217)
        : (v219 = 0),
          v219 ? (v220 = v206 < v216) : (v220 = 0),
          !v220))
    {
LABEL_318:
      LODWORD(v204) = 0x80000000;
    }
    else
    {
      v274 = v205 - v210;
      v275 = v206 - v211;
      for (k = v215 - v209; ; v275 -= k & v275)
      {
        k >>= 1;
        LODWORD(v204) = *(_DWORD *)(v207
                                  + 4488 * (v204 & 0xCFFFFFFF)
                                  + 4 * ((4 * ((k & v212) != 0)) | (2 * ((k & v274) != 0)) | ((k & v275) != 0))
                                  + 24);
        if (k == *(_DWORD *)(v403 + 320) || v204 >> 30)
          break;
        v212 -= k & v212;
        v274 -= k & v274;
      }
    }
    *(_DWORD *)__s = v204;
    object[0] = 0;
    object[16] = 0;
    v221 = sub_223B61034(v397, (__int128 *)object, (unsigned int *)__s);
    if ((_DWORD)v204 != *(_DWORD *)__s)
    {
      *(_QWORD *)v452 = *(_QWORD *)v411 & 0xFFFFFFF8FFFFFFF8;
      *(_DWORD *)&v452[8] = *(_DWORD *)&v411[8] & 0xFFFFFFF8;
      sub_223E8AD00(v397, (int8x8_t *)v452, *(unsigned int *)__s);
    }
    if ((v221 & 0x80000000) != 0)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 194, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C);
      v222 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v222 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v223 = qword_255795648;
        for (m = qword_255795650; v223 != m; v223 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v223)(*(_QWORD *)(v223 + 8), "!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, "Unknown block index", 19);
      }
      v225 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v225 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        goto LABEL_595;
      qword_255795660(*(_QWORD *)algn_255795668, "!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, "Unknown block index", 19);
    }
    v226 = v221;
    v227 = *(_QWORD *)(v403 + 20984);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v403 + 20992) - v227) >> 12) > v221)
    {
LABEL_339:
      v232 = 0;
      v233 = 0;
      v234 = 0;
      v235 = v227 + 20480 * v226;
      v236 = v235;
      while (1)
      {
        v240 = v235 + v232;
        if ((*(char *)(v235 + v232 + 6) & 0x80000000) == 0)
        {
          v241 = *(unsigned __int16 *)(v240 + 8);
          v242 = *((unsigned __int16 *)v169 + 288);
          v243 = v241 == v242;
          if (v241 == v242)
            v244 = 1 << (v234 >> 3);
          else
            v244 = 0;
          v233 |= v244;
          if (v243)
          {
            *(_BYTE *)(v240 + 6) = 0x80;
            *(_WORD *)(v240 + 8) = -1;
            v245 = v235 + v232;
            *(_BYTE *)(v235 + v232) = 0;
            v246 = *(unsigned __int8 *)(v235 + v232 + 10);
            v247 = *(unsigned __int8 *)(v235 + v232 + 20);
            if (v247 <= v246)
              v248 = *(unsigned __int8 *)(v235 + v232 + 10);
            else
              v248 = *(unsigned __int8 *)(v235 + v232 + 20);
            v249 = *(unsigned __int8 *)(v245 + 30);
            if (v249 | v248)
            {
              v250 = v246 != 0;
              v188 = v247 > v246;
              v251 = 2;
              if (!v188)
                v251 = v250;
              if (v249 > v248)
                v251 = 3;
              v252 = v245 + 10 * v251;
              *(_WORD *)object = *(_WORD *)v240;
              object[2] = *(_BYTE *)(v240 + 2);
              *(_WORD *)&object[3] = *(_WORD *)(v245 + 3);
              object[5] = *(_BYTE *)(v245 + 5);
              v253 = *(_DWORD *)(v240 + 6);
              v254 = *(_BYTE *)(v252 + 2);
              *(_WORD *)v240 = *(_WORD *)v252;
              *(_BYTE *)(v240 + 2) = v254;
              v255 = *(_BYTE *)(v252 + 5);
              *(_WORD *)(v245 + 3) = *(_WORD *)(v252 + 3);
              *(_BYTE *)(v245 + 5) = v255;
              *(_DWORD *)(v240 + 6) = *(_DWORD *)(v252 + 6);
              *(_WORD *)v252 = *(_WORD *)object;
              *(_BYTE *)(v252 + 2) = object[2];
              *(_BYTE *)(v252 + 5) = object[5];
              *(_WORD *)(v252 + 3) = *(_WORD *)&object[3];
              *(_DWORD *)(v252 + 6) = v253;
            }
            goto LABEL_342;
          }
          if (*(unsigned __int16 *)(v235 + v232 + 18) == v242)
          {
            v237 = (_WORD *)(v236 + 18);
            v238 = 1;
          }
          else if (*(unsigned __int16 *)(v235 + v232 + 28) == v242)
          {
            v237 = (_WORD *)(v236 + 28);
            v238 = 2;
          }
          else
          {
            v237 = (_WORD *)(v235 + v232 + 38);
            if ((unsigned __int16)*v237 != v242)
              goto LABEL_342;
            v238 = 3;
          }
          v239 = (_BYTE *)(v235 + 10 * v238 + v232);
          v239[6] = 0x80;
          *v237 = -1;
          *v239 = 0;
        }
LABEL_342:
        ++v234;
        v236 = v235 + 40 * v234;
        v232 += 40;
        if (v232 == 20480)
        {
          if (v233)
          {
            v256 = v406;
            v257 = &v406;
            v258 = &v406;
            if (v406)
            {
              while (1)
              {
                while (1)
                {
                  v257 = (_QWORD **)v256;
                  v259 = *((_DWORD *)v256 + 7);
                  if (*(_DWORD *)v411 == v259)
                    break;
                  if (*(int *)v411 >= v259)
                  {
                    if (v259 >= *(int *)v411)
                      goto LABEL_269;
                    goto LABEL_377;
                  }
LABEL_366:
                  v256 = *v257;
                  v258 = v257;
                  if (!*v257)
                    goto LABEL_379;
                }
                v260 = *((_DWORD *)v257 + 8);
                if (*(_DWORD *)&v411[4] != v260)
                {
                  if (*(int *)&v411[4] >= v260)
                  {
                    if (v260 >= *(int *)&v411[4])
                      goto LABEL_269;
                    goto LABEL_377;
                  }
                  goto LABEL_366;
                }
                v261 = *((_DWORD *)v257 + 9);
                if (*(int *)&v411[8] < v261)
                  goto LABEL_366;
                if (v261 >= *(int *)&v411[8])
                  goto LABEL_269;
LABEL_377:
                v256 = v257[1];
                if (!v256)
                {
                  v258 = v257 + 1;
                  break;
                }
              }
            }
LABEL_379:
            v262 = operator new(0x28uLL);
            *(_QWORD *)((char *)v262 + 28) = *(_QWORD *)v411;
            *((_DWORD *)v262 + 9) = *(_DWORD *)&v411[8];
            *v262 = 0;
            v262[1] = 0;
            v262[2] = v257;
            *v258 = v262;
            if (*v405)
            {
              v405 = (_QWORD **)*v405;
              v262 = (_QWORD *)*v258;
            }
            v263 = v406;
            _ZF = v262 == v406;
            *((_BYTE *)v262 + 24) = v262 == v406;
            if (!_ZF)
            {
              do
              {
                v264 = v262[2];
                if (*(_BYTE *)(v264 + 24))
                  break;
                v265 = *(_QWORD **)(v264 + 16);
                v266 = *v265;
                if (*v265 == v264)
                {
                  v269 = v265[1];
                  if (!v269 || (v270 = *(unsigned __int8 *)(v269 + 24), v267 = (_BYTE *)(v269 + 24), v270))
                  {
                    if (*(_QWORD **)v264 == v262)
                    {
                      *(_BYTE *)(v264 + 24) = 1;
                      *((_BYTE *)v265 + 24) = 0;
                      v273 = *(_QWORD *)(v264 + 8);
                      *v265 = v273;
                      if (v273)
                        goto LABEL_396;
                    }
                    else
                    {
                      v271 = *(uint64_t **)(v264 + 8);
                      v272 = *v271;
                      *(_QWORD *)(v264 + 8) = *v271;
                      if (v272)
                      {
                        *(_QWORD *)(v272 + 16) = v264;
                        v265 = *(_QWORD **)(v264 + 16);
                      }
                      v271[2] = (uint64_t)v265;
                      *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v271;
                      *v271 = v264;
                      *(_QWORD *)(v264 + 16) = v271;
                      v265 = (_QWORD *)v271[2];
                      v264 = *v265;
                      *((_BYTE *)v271 + 24) = 1;
                      *((_BYTE *)v265 + 24) = 0;
                      v273 = *(_QWORD *)(v264 + 8);
                      *v265 = v273;
                      if (v273)
LABEL_396:
                        *(_QWORD *)(v273 + 16) = v265;
                    }
                    *(_QWORD *)(v264 + 16) = v265[2];
                    *(_QWORD *)(v265[2] + 8 * (*(_QWORD *)v265[2] != (_QWORD)v265)) = v264;
                    *(_QWORD *)(v264 + 8) = v265;
LABEL_267:
                    v265[2] = v264;
                    break;
                  }
                }
                else if (!v266 || (v268 = *(unsigned __int8 *)(v266 + 24), v267 = (_BYTE *)(v266 + 24), v268))
                {
                  if (*(_QWORD **)v264 == v262)
                  {
                    v278 = v262[1];
                    *(_QWORD *)v264 = v278;
                    if (v278)
                    {
                      *(_QWORD *)(v278 + 16) = v264;
                      v265 = *(_QWORD **)(v264 + 16);
                    }
                    v262[2] = v265;
                    *(_QWORD *)(*(_QWORD *)(v264 + 16) + 8 * (**(_QWORD **)(v264 + 16) != v264)) = v262;
                    v262[1] = v264;
                    *(_QWORD *)(v264 + 16) = v262;
                    v265 = (_QWORD *)v262[2];
                    *((_BYTE *)v262 + 24) = 1;
                    *((_BYTE *)v265 + 24) = 0;
                    v264 = v265[1];
                    v277 = *(_QWORD **)v264;
                    v265[1] = *(_QWORD *)v264;
                    if (!v277)
                      goto LABEL_266;
                  }
                  else
                  {
                    *(_BYTE *)(v264 + 24) = 1;
                    *((_BYTE *)v265 + 24) = 0;
                    v264 = v265[1];
                    v277 = *(_QWORD **)v264;
                    v265[1] = *(_QWORD *)v264;
                    if (!v277)
                      goto LABEL_266;
                  }
                  v277[2] = v265;
LABEL_266:
                  *(_QWORD *)(v264 + 16) = v265[2];
                  *(_QWORD *)(v265[2] + 8 * (*(_QWORD *)v265[2] != (_QWORD)v265)) = v264;
                  *(_QWORD *)v264 = v265;
                  goto LABEL_267;
                }
                *(_BYTE *)(v264 + 24) = 1;
                v262 = v265;
                *((_BYTE *)v265 + 24) = v265 == v263;
                *v267 = 1;
              }
              while (v265 != v263);
            }
            ++v407;
LABEL_269:
            sub_223B1D134(v411, v233, (uint64_t **)(v403 + 136), (uint64_t **)(v403 + 160));
            ++v396;
          }
LABEL_270:
          v179 += 8;
          v178 = v401;
          if (v179 <= v398)
            goto LABEL_271;
          v178 = v401 + 8;
          if (v401 + 8 <= v395)
            goto LABEL_264;
          v399 += 8;
          if (v399 > v393)
            goto LABEL_246;
          goto LABEL_262;
        }
      }
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 195, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    v228 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v229 = qword_255795648;
      for (n = qword_255795650; v229 != n; v229 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v229)(*(_QWORD *)(v229 + 8), "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
    }
    v231 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v231 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
    {
      qword_255795660(*(_QWORD *)algn_255795668, "block_index < allocated_voxel_blocks_.size()", 44, "Invalid block index", 19);
      v227 = *(_QWORD *)(v403 + 20984);
      goto LABEL_339;
    }
LABEL_595:
    abort();
  }
}

void sub_223AFDE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  if (LOBYTE(STACK[0x458]))
  {
    if (SLOBYTE(STACK[0x457]) < 0)
      operator delete((void *)STACK[0x440]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x270]);
  sub_223198030((uint64_t)&a28, (_QWORD *)a29);
  _Unwind_Resume(a1);
}

void sub_223AFE108(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_223AFE128(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_223AFE13C(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_223AFE188(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x460]) && SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  if (STACK[0x440])
    os_release((void *)STACK[0x440]);
  sub_223182DAC((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_223AFE248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x457]) < 0)
  {
    operator delete((void *)STACK[0x440]);
    sub_223198030((uint64_t)&a28, (_QWORD *)a29);
    _Unwind_Resume(a1);
  }
  sub_223198030((uint64_t)&a28, (_QWORD *)a29);
  _Unwind_Resume(a1);
}

void sub_223AFE288()
{
  sub_22316F8F4((uint64_t *)&STACK[0x440]);
  JUMPOUT(0x223AFE294);
}

void sub_223AFE2C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AFE31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  uint64_t (***p_dst)();
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  char v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t (**v59)();
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  float32x2_t *v76;
  void **v77;
  _QWORD *v78;
  int32x4_t v79;
  int32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  const char *v89;
  size_t v90;
  uint64_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  BOOL v104;
  BOOL v105;
  _BOOL4 v106;
  _QWORD *v107;
  float32x2_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x2_t v113;
  unsigned int v114;
  __int16 v115;
  float32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  float32x4_t v131;
  __int128 v132;
  int8x16_t v133;
  int32x4_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  _OWORD *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  _QWORD *v162;
  int32x4_t v163;
  __int128 v164;
  int32x4_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int8x16_t v182;
  int32x4_t v183;
  uint64_t v184;
  unsigned int v185;
  _QWORD *v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  uint8x8_t v190;
  unint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  unint64_t v194;
  uint64_t v196;
  void *v198;
  float v199;
  float v200;
  _BOOL8 v201;
  unint64_t v202;
  unint64_t v203;
  size_t prime;
  void *v205;
  void *v206;
  uint64_t v207;
  _QWORD *v208;
  size_t v209;
  size_t v210;
  size_t v211;
  _QWORD *i;
  size_t v213;
  uint64_t v214;
  unint64_t v215;
  uint8x8_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  size_t v220;
  unint64_t v221;
  uint8x8_t v222;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  float v227;
  float v228;
  int32x4_t v229;
  int32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  int8x16_t v233;
  float v234;
  float v235;
  int8x16_t v236;
  float32x2_t v237;
  int8x16_t v238;
  unsigned __int32 v239;
  int8x16_t v240;
  char *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  __int16 v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  __int16 v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  __int16 v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  int32x4_t v278;
  int32x4_t v279;
  float32x2_t v280;
  float32x4_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  float32x4_t v301;
  int8x16_t v302;
  int8x16_t v303;
  float32x4_t v304;
  int8x16_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  __int128 v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  int32x4_t v326;
  int32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  int8x16_t v331;
  int8x16_t v332;
  float32x4_t v333;
  int8x16_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  __int16 v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  __int16 v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  __int16 v366;
  unint64_t v367;
  char *v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  __int16 v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  float v412;
  float32x4_t v413;
  uint64_t v414;
  unsigned __int8 *v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  float v425;
  int32x2_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _DWORD *v430;
  unsigned int v431;
  int v432;
  BOOL v433;
  int v434;
  int v435;
  int v436;
  signed int v437;
  int j;
  uint64_t v439;
  int v440;
  int v441;
  float32x4_t v442;
  unsigned __int32 v443;
  unsigned int v444;
  float32x4_t v445;
  int8x16_t v446;
  float32x4_t v447;
  float32x4_t v448;
  int v449;
  float v450;
  float v451;
  float v452;
  float v453;
  unsigned int v454;
  float v455;
  unsigned int v456;
  int v457;
  float32x4_t v458;
  unsigned __int8 v459;
  uint64_t v460;
  unsigned __int8 v461;
  uint64_t v462;
  uint64_t v463;
  unsigned __int8 v464;
  unsigned __int8 *v465;
  int v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  int v476;
  int v477;
  unsigned __int8 *v478;
  __int16 v479;
  __int16 v480;
  int v481;
  __int16 v482;
  unsigned int v483;
  int v484;
  unsigned __int8 *v485;
  __int16 v486;
  __int16 v487;
  int v488;
  __int16 v489;
  unsigned __int8 *v490;
  unsigned __int8 v491;
  uint64_t v492;
  uint64_t k;
  unsigned __int8 v494;
  uint64_t v495;
  _QWORD *v496;
  int v497;
  int v498;
  int v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  const char *v503;
  size_t v504;
  unsigned __int8 v505;
  unsigned __int8 v506;
  const char *v507;
  size_t v508;
  _BYTE *v509;
  uint64_t v510;
  uint64_t v511;
  _BYTE *v512;
  NSObject *v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  size_t v517;
  std::__shared_weak_count_vtbl *v518;
  std::__shared_weak_count *v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  const char *v528;
  uint64_t v529;
  int v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  void *v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  _QWORD *v554;
  _QWORD *v555;
  void *v556;
  uint64_t v557;
  unsigned __int8 v558;
  const char *v559;
  size_t v560;
  _BYTE *v561;
  uint64_t v562;
  uint64_t v563;
  _BYTE *v564;
  uint64_t v565;
  uint64_t v566;
  NSObject *v567;
  uint64_t v568;
  size_t v569;
  std::__shared_weak_count_vtbl *v570;
  std::__shared_weak_count *v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  uint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  int v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  void *v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  float32x4_t v612;
  uint64_t **v613;
  uint64_t **v614;
  _QWORD *v616;
  uint64_t v617;
  int v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  int v624;
  _QWORD *v625;
  unsigned __int8 v626;
  unsigned __int8 v627;
  float32x4_t v628;
  int v629;
  int v630;
  const char *v631;
  uint64_t v632;
  const char *v633;
  int v634;
  float32x4_t v635;
  uint64_t v636;
  int v637;
  const char *v638;
  float32x4_t v639;
  unsigned int v640;
  uint64_t v641;
  _BYTE v642[24];
  char *v643;
  __int128 v644;
  __int128 v645;
  std::__shared_weak_count *v646;
  __int16 v647;
  std::__shared_weak_count *v648;
  std::__shared_weak_count *v649;
  void *v650;
  uint64_t v651;
  _BYTE v652[32];
  _QWORD v653[2];
  char v654;
  int8x16_t v655;
  int8x16_t v656;
  int8x16_t v657;
  float32x4_t v658;
  int *v659;
  int *v660;
  int v661;
  int v662;
  _QWORD v663[2];
  char v664;
  uint64_t (**__dst)();
  _BYTE v666[24];
  float32x4_t v667;
  float32x4_t v668;
  uint64_t v669;
  __int16 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int16 v674;
  uint64_t (**v675)();
  uint64_t v676;
  unsigned __int128 v677;
  __int128 v678;
  __int16 v679;
  uint64_t (**v680)();
  uint64_t v681;
  unsigned __int128 v682;
  __int128 v683;
  __int16 v684;
  _QWORD v685[2];
  char v686;
  _BYTE oslog[72];
  __int16 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int16 v693;
  __int128 v694;
  _OWORD v695[7];
  uint64_t v696;
  uint64_t v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  int v701;
  __int128 v702;
  uint64_t v703;
  uint64_t v704;
  _OWORD v705[2];
  uint64_t v706;
  __int128 v707;
  __int128 v708;
  uint64_t v709;
  __int128 v710;
  _OWORD v711[2];
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  uint64_t v716;
  __int16 v717;
  _BYTE object[80];
  _BYTE v719[72];
  unsigned int v720;
  _BYTE v721[12];
  __int128 v722;
  _BYTE v723[26];
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  uint64_t (**v728)();
  uint64_t (**v729)(_QWORD);
  uint64_t v730;
  uint64_t v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  int v735;
  __int128 v736;
  uint64_t (**v737)();
  uint64_t v738;
  uint64_t v739;
  _OWORD v740[2];
  uint64_t v741;
  __int128 v742;
  __int128 v743;
  uint64_t v744;
  __int128 v745;
  _OWORD v746[2];
  char v747;
  __int16 v748;
  char v749;
  char __s[16];
  unsigned __int128 v751;
  float32x4_t v752;
  float32x4_t v753;
  uint64_t v754;
  __int16 v755;
  uint64_t v756;

  v756 = *MEMORY[0x24BDAC8D0];
  sub_223AF0EC4(&v650);
  v3 = a1;
  v4 = (unsigned __int8 *)a3;
  if (**((int **)v650 + 7) > 3)
    goto LABEL_117;
  v5 = *((unsigned __int8 *)v650 + 72);
  v6 = sub_22322F254((uint64_t)v650, "OSLogSurrogateAppender", 1, 0);
  v7 = v6;
  if (!v5 && v6 == 0)
    goto LABEL_117;
  *(_QWORD *)oslog = &v650;
  *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
  *(_DWORD *)&oslog[24] = 3;
  *(_QWORD *)&oslog[32] = "unknown file";
  *(_DWORD *)&oslog[40] = 1390;
  *(_QWORD *)&oslog[64] = 0;
  *(_QWORD *)&oslog[48] = "unknown function";
  *(_QWORD *)&oslog[56] = 0;
  sub_2245664AC((unsigned __int8 *)a3, __s);
  v9 = **(_QWORD **)oslog;
  v10 = (const char *)(**(_QWORD **)oslog + 16);
  v638 = v10;
  if (*(char *)(**(_QWORD **)oslog + 39) < 0)
  {
    v10 = *(const char **)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
    v3 = a1;
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40;
  else
    v14 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v15 = byte_255788F40[23];
  else
    v15 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v14, v10);
  v16 = &object[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&object[24] = v18 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v16;
    *(_QWORD *)&object[16] = v15;
    v3 = a1;
    goto LABEL_23;
  }
  object[31] = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  object[32] = 1;
  v19 = &object[40];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v21 = v11 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    *(_QWORD *)&object[56] = v22 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v19;
    *(_QWORD *)&object[48] = v11;
    v4 = (unsigned __int8 *)a3;
  }
  else
  {
    object[63] = v11;
    v4 = (unsigned __int8 *)a3;
    if (!v11)
    {
      object[40] = 0;
      object[64] = 1;
      v20 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v19, v10, v11);
  v19[v11] = 0;
  object[64] = 1;
  v20 = *(NSObject **)object;
  if ((object[63] & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[32])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_37;
LABEL_35:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v7 || !*(_QWORD *)(v7 + 24))
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = __s;
    v29 = (void *)_os_log_send_and_compose_impl();
    if (v29)
      free(v29);
    goto LABEL_110;
  }
  v23 = _os_log_pack_size();
  v24 = operator new(v23, (std::align_val_t)8uLL);
  v25 = (_QWORD *)operator new();
  *v25 = &off_24EC1F7F0;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v24;
  *(_QWORD *)v642 = v24;
  *(_QWORD *)&v642[8] = v24;
  v643 = 0;
  *(_QWORD *)&v644 = 0;
  *(_QWORD *)&v642[16] = v25;
  v26 = strlen(__s);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = (uint64_t (***)())operator new(v30 + 1);
    *(_QWORD *)&v666[8] = v31 | 0x8000000000000000;
    __dst = (uint64_t (**)())p_dst;
    *(_QWORD *)v666 = v27;
    v4 = (unsigned __int8 *)a3;
    goto LABEL_50;
  }
  v666[15] = v26;
  p_dst = &__dst;
  if (v26)
LABEL_50:
    memcpy(p_dst, __s, v27);
  *((_BYTE *)p_dst + v27) = 0;
  v32 = __dst;
  v712.i64[0] = *(_QWORD *)v666;
  *(uint64_t *)((char *)v712.i64 + 7) = *(_QWORD *)&v666[7];
  v33 = v666[15];
  v34 = operator new(0x38uLL);
  v34[1] = 0;
  v34[2] = 0;
  v34[3] = off_24EC1FA48;
  *v34 = &off_24EC1F9F8;
  v35 = v712.i64[0];
  v34[4] = v32;
  v34[5] = v35;
  *(_QWORD *)((char *)v34 + 47) = *(uint64_t *)((char *)v712.i64 + 7);
  *((_BYTE *)v34 + 55) = v33;
  v712.i64[0] = 0;
  *(uint64_t *)((char *)v712.i64 + 7) = 0;
  v36 = (std::__shared_weak_count *)v644;
  v643 = (char *)(v34 + 3);
  *(_QWORD *)&v644 = v34;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v642;
  *(_QWORD *)&object[16] = *(_QWORD *)&v642[16];
  if (*(_QWORD *)&v642[16])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v642[16] + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)&object[24] = v643;
  *(_QWORD *)&object[32] = v644;
  if ((_QWORD)v644)
  {
    v41 = (unint64_t *)(v644 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    *(_QWORD *)&object[40] = v643;
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (!v43)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v644 + 16))(v644);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v644);
    }
  }
  else
  {
    *(_QWORD *)&object[40] = v643;
  }
  if (*(_QWORD *)&v642[16])
  {
    v44 = (unint64_t *)(*(_QWORD *)&v642[16] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v642[16] + 16))(*(_QWORD *)&v642[16]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v642[16]);
    }
  }
  v46 = *(_QWORD *)object;
  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
    v47 = *(_QWORD *)&object[40] + 8;
  else
    v47 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
  v48 = _os_log_pack_fill();
  *(_DWORD *)v48 = 136315138;
  *(_QWORD *)(v48 + 4) = v47;
  v49 = operator new();
  v50 = *(unsigned __int8 *)(v9 + 39);
  v51 = v638;
  if ((v50 & 0x80u) != 0)
  {
    v51 = *(const char **)(v9 + 16);
    v50 = *(_QWORD *)(v9 + 24);
  }
  *(_QWORD *)v49 = v46;
  *(_OWORD *)(v49 + 8) = *(_OWORD *)&object[8];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v49 + 24) = *(_OWORD *)&object[24];
  *(_QWORD *)&object[24] = 0;
  *(_QWORD *)&object[32] = 0;
  *(_QWORD *)(v49 + 40) = v51;
  *(_QWORD *)(v49 + 48) = v50;
  *(_BYTE *)(v49 + 56) = 1;
  __dst = 0;
  *(_QWORD *)v642 = v49;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v642);
  v52 = *(_QWORD *)v642;
  *(_QWORD *)v642 = 0;
  if (v52)
  {
    v53 = *(std::__shared_weak_count **)(v52 + 32);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)(v52 + 16);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
    v59 = __dst;
    __dst = 0;
    if (v59)
    {
      v60 = (std::__shared_weak_count *)v59[4];
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)v59[2];
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
    }
  }
  v66 = *(std::__shared_weak_count **)&object[32];
  if (*(_QWORD *)&object[32])
  {
    v67 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v70 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
LABEL_110:
  if (v5)
  {
    sub_2245664AC(v4, object);
    sub_22322C138((uint64_t)oslog, "Integrating keyframe %s", object);
    sub_223182C08((uint64_t)oslog);
  }
  sub_223182C08((uint64_t)oslog);
  v72 = *(std::__shared_weak_count **)&oslog[64];
  if (*(_QWORD *)&oslog[64])
  {
    v73 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
LABEL_117:
  v663[1] = 0;
  v663[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v664 = 1;
  kdebug_trace();
  sub_223B80174(v3 + 22832, (uint64_t)v4);
  v75 = sub_2231D021C(*(_QWORD *)(a3 + 16));
  v76 = (float32x2_t *)sub_2231D0224(*(_QWORD *)(a3 + 16));
  sub_223AED5BC(a1 + 21152, v75, v76);
  v77 = (void **)(a1 + 64);
  v78 = sub_223340F28((_QWORD *)(a1 + 64), a3);
  v83 = a1;
  if (!v78
    && (unint64_t)(((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4) - 65534) <= 0xFFFFFFFFFFFF0000)
  {
    sub_223AF24D8(&__dst);
    v84 = a1;
    if (*(int *)__dst[7] > 3)
      return;
    v85 = *((unsigned __int8 *)__dst + 72);
    v86 = sub_22322F254((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
    v87 = v86;
    if (!v85 && !v86)
      return;
    v634 = v85;
    *(_QWORD *)oslog = &__dst;
    *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
    *(_DWORD *)&oslog[24] = 3;
    *(_QWORD *)&oslog[32] = "unknown file";
    *(_DWORD *)&oslog[40] = 1406;
    *(_QWORD *)&oslog[64] = 0;
    *(_QWORD *)&oslog[48] = "unknown function";
    *(_QWORD *)&oslog[56] = 0;
    v88 = **(_QWORD **)oslog;
    v89 = (const char *)(**(_QWORD **)oslog + 16);
    v631 = v89;
    if (*(char *)(**(_QWORD **)oslog + 39) < 0)
    {
      v89 = *(const char **)(v88 + 16);
      v90 = *(_QWORD *)(v88 + 24);
    }
    else
    {
      v90 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
    }
    v557 = *(_QWORD *)(a1 + 104);
    v641 = *(_QWORD *)(a1 + 112);
    v558 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v558 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v84 = a1;
    }
    if (byte_255788F40[23] >= 0)
      v559 = byte_255788F40;
    else
      v559 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v560 = byte_255788F40[23];
    else
      v560 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)object = os_log_create(v559, v89);
    v561 = &object[8];
    if (v560 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v560 >= 0x17)
    {
      v562 = (v560 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v560 | 7) != 0x17)
        v562 = v560 | 7;
      v563 = v562 + 1;
      v561 = operator new(v562 + 1);
      *(_QWORD *)&object[24] = v563 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v561;
      *(_QWORD *)&object[16] = v560;
      v84 = a1;
    }
    else
    {
      object[31] = v560;
      if (!v560)
      {
LABEL_733:
        v561[v560] = 0;
        object[32] = 1;
        v564 = &object[40];
        if (v90 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v90 >= 0x17)
        {
          v565 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v90 | 7) != 0x17)
            v565 = v90 | 7;
          v566 = v565 + 1;
          v564 = operator new(v565 + 1);
          *(_QWORD *)&object[56] = v566 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v564;
          *(_QWORD *)&object[48] = v90;
        }
        else
        {
          object[63] = v90;
          if (!v90)
            goto LABEL_741;
        }
        memmove(v564, v89, v90);
LABEL_741:
        v564[v90] = 0;
        object[64] = 1;
        v567 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v568 = (v641 - v557) >> 4;
        if (v87 && *(_QWORD *)(v87 + 24))
        {
          v569 = _os_log_pack_size();
          v570 = (std::__shared_weak_count_vtbl *)operator new(v569, (std::align_val_t)8uLL);
          v571 = (std::__shared_weak_count *)operator new();
          v572 = v571;
          v571->__shared_owners_ = 0;
          v573 = (unint64_t *)&v571->__shared_owners_;
          v571->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v571->__shared_weak_owners_ = 0;
          v571[1].__vftable = v570;
          *(_QWORD *)object = v570;
          *(_QWORD *)&object[8] = v570;
          *(_QWORD *)&object[16] = v571;
          do
            v574 = __ldxr(v573);
          while (__stxr(v574 + 1, v573));
          memset(&object[24], 0, 24);
          do
            v575 = __ldaxr(v573);
          while (__stlxr(v575 - 1, v573));
          if (!v575)
          {
            ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
            std::__shared_weak_count::__release_weak(v572);
          }
          v576 = *(_QWORD *)object;
          v577 = _os_log_pack_fill();
          *(_DWORD *)v577 = 134217984;
          *(_QWORD *)(v577 + 4) = v568;
          v578 = operator new();
          v579 = *(unsigned __int8 *)(v88 + 39);
          v580 = v631;
          if ((v579 & 0x80u) != 0)
          {
            v580 = *(const char **)(v88 + 16);
            v579 = *(_QWORD *)(v88 + 24);
          }
          *(_QWORD *)v578 = v576;
          *(_OWORD *)(v578 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v578 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v578 + 40) = v580;
          *(_QWORD *)(v578 + 48) = v579;
          *(_BYTE *)(v578 + 56) = 1;
          *(_QWORD *)__s = 0;
          *(_QWORD *)v642 = v578;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v87 + 24) + 40))(*(_QWORD *)(v87 + 24), v642);
          v581 = *(_QWORD *)v642;
          *(_QWORD *)v642 = 0;
          if (v581)
          {
            v582 = *(std::__shared_weak_count **)(v581 + 32);
            if (v582)
            {
              v583 = (unint64_t *)&v582->__shared_owners_;
              do
                v584 = __ldaxr(v583);
              while (__stlxr(v584 - 1, v583));
              if (!v584)
              {
                ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
                std::__shared_weak_count::__release_weak(v582);
              }
            }
            v585 = *(std::__shared_weak_count **)(v581 + 16);
            if (v585)
            {
              v586 = (unint64_t *)&v585->__shared_owners_;
              do
                v587 = __ldaxr(v586);
              while (__stlxr(v587 - 1, v586));
              if (!v587)
              {
                ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                std::__shared_weak_count::__release_weak(v585);
              }
            }
            MEMORY[0x227684CE8](v581, 0x10F0C40B62ED6C6);
            v588 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (v588)
            {
              v589 = *(std::__shared_weak_count **)(v588 + 32);
              if (v589)
              {
                v590 = (unint64_t *)&v589->__shared_owners_;
                do
                  v591 = __ldaxr(v590);
                while (__stlxr(v591 - 1, v590));
                if (!v591)
                {
                  ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                  std::__shared_weak_count::__release_weak(v589);
                }
              }
              v592 = *(std::__shared_weak_count **)(v588 + 16);
              if (v592)
              {
                v593 = (unint64_t *)&v592->__shared_owners_;
                do
                  v594 = __ldaxr(v593);
                while (__stlxr(v594 - 1, v593));
                if (!v594)
                {
                  ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                  std::__shared_weak_count::__release_weak(v592);
                }
              }
              MEMORY[0x227684CE8](v588, 0x10F0C40B62ED6C6);
            }
          }
          v595 = *(std::__shared_weak_count **)&object[32];
          v596 = v634;
          if (*(_QWORD *)&object[32])
          {
            v597 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v598 = __ldaxr(v597);
            while (__stlxr(v598 - 1, v597));
            if (!v598)
            {
              ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
              std::__shared_weak_count::__release_weak(v595);
            }
          }
          v599 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v600 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v601 = __ldaxr(v600);
            while (__stlxr(v601 - 1, v600));
            if (!v601)
            {
              ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
              std::__shared_weak_count::__release_weak(v599);
            }
          }
        }
        else
        {
          os_log_type_enabled(v567, OS_LOG_TYPE_INFO);
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v568;
          v602 = (void *)_os_log_send_and_compose_impl();
          v596 = v634;
          if (v602)
            free(v602);
        }
        if (v596)
        {
          sub_22322C138((uint64_t)oslog, "KFOS:IKF kf:%lu", (uint64_t)(*(_QWORD *)(v84 + 112) - *(_QWORD *)(v84 + 104)) >> 4);
          sub_223182C08((uint64_t)oslog);
        }
        sub_223182C08((uint64_t)oslog);
        v603 = *(std::__shared_weak_count **)&oslog[64];
        if (*(_QWORD *)&oslog[64])
        {
          v604 = (unint64_t *)(*(_QWORD *)&oslog[64] + 8);
          do
            v605 = __ldaxr(v604);
          while (__stlxr(v605 - 1, v604));
          if (!v605)
          {
            ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
            std::__shared_weak_count::__release_weak(v603);
          }
        }
        return;
      }
    }
    memmove(v561, v559, v560);
    goto LABEL_733;
  }
  v91 = a3;
  v79.i64[0] = *(_QWORD *)(a3 + 176);
  v79.i32[2] = *(_DWORD *)(a3 + 184);
  v80.i64[0] = *(_QWORD *)(a3 + 192);
  v80.i32[2] = *(_DWORD *)(a3 + 200);
  v81.i32[0] = *(_DWORD *)(a3 + 216);
  v82.i64[0] = *(_QWORD *)(a3 + 224);
  v82.i32[2] = *(_DWORD *)(a3 + 232);
  v92.i64[0] = vzip1q_s32(v79, v80).u64[0];
  v93 = (int8x16_t)vnegq_f32(v82);
  v94 = (int8x16_t)vtrn2q_s32(v79, v80);
  v94.i32[2] = HIDWORD(*(_QWORD *)(a3 + 208));
  v95 = (float32x4_t)vzip2q_s32(v79, v80);
  *(float32x2_t *)v96.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v92.f32, *(float *)v93.i32), *(float32x2_t *)v94.i8, *(float32x2_t *)v82.f32, 1), *(float32x2_t *)v95.f32, v82, 2);
  v95.i32[2] = v81.i32[0];
  v96.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 208), *(float32x2_t *)v93.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a3 + 208), 1), *(float32x2_t *)v82.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), v81);
  v92.i64[1] = *(_QWORD *)(a3 + 208);
  v97.i32[3] = 0;
  v97.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v94, 0).i32[3];
  *(uint64_t *)((char *)v97.i64 + 4) = vextq_s8(v94, v96, 4uLL).u64[0];
  v95.i64[1] = vdupq_laneq_s32((int32x4_t)v95, 2).u32[0];
  v96.i32[3] = 1.0;
  v98 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)(a3 + 112))), v97, *(float32x2_t *)(a3 + 112), 1), v95, *(float32x4_t *)(a3 + 112), 2), (float32x4_t)v96, *(float32x4_t *)(a3 + 112), 3);
  v99 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)(a3 + 128))), v97, *(float32x2_t *)(a3 + 128), 1), v95, *(float32x4_t *)(a3 + 128), 2), (float32x4_t)v96, *(float32x4_t *)(a3 + 128), 3);
  v100 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)(a3 + 144))), v97, *(float32x2_t *)(a3 + 144), 1), v95, *(float32x4_t *)(a3 + 144), 2), (float32x4_t)v96, *(float32x4_t *)(a3 + 144), 3);
  v101 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)(a3 + 160))), v97, *(float32x2_t *)(a3 + 160), 1), v95, *(float32x4_t *)(a3 + 160), 2), (float32x4_t)v96, *(float32x4_t *)(a3 + 160), 3);
  v102 = *(float32x4_t *)(a3 + 80);
  v103 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v102.f32[0]), v99, *(float32x2_t *)v102.f32, 1), v100, v102, 2), v101, v102, 3);
  v639 = v103;
  v104 = (v103.i32[2] & 0x7FFFFFFFu) < 0x7F800000;
  if ((v103.i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    v104 = (v103.i32[1] & 0x7FFFFFFFu) < 0x7F800000;
  if ((v103.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v105 = v104;
  else
    v105 = (v103.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  if (!v105)
  {
    v106 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C);
    v83 = a1;
    v91 = a3;
    if (v106)
      abort();
  }
  v102.i32[0] = *(_DWORD *)(v83 + 316);
  v635 = v102;
  v107 = sub_22342DA5C(v77, v91);
  v110 = v107;
  v111.i32[3] = v635.i32[3];
  v112 = (int32x4_t)vmulq_n_f32(v639, v635.f32[0]);
  v113 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v112.i8));
  v114 = vcvtms_s32_f32(*(float *)&v112.i32[2]);
  if (v107)
  {
    v115 = *((_WORD *)v107 + 304);
    v112.i64[0] = *(_QWORD *)(a3 + 176);
    v112.i32[2] = *(_DWORD *)(a3 + 184);
    v111.i64[0] = *(_QWORD *)(a3 + 192);
    v111.i32[2] = *(_DWORD *)(a3 + 200);
    v108.i32[0] = *(_DWORD *)(a3 + 216);
    v109.i64[0] = *(_QWORD *)(a3 + 224);
    v109.i32[2] = *(_DWORD *)(a3 + 232);
    v116.i64[0] = vzip1q_s32(v112, v111).u64[0];
    v117 = (int8x16_t)vnegq_f32(v109);
    v118 = (int8x16_t)vtrn2q_s32(v112, v111);
    v118.i32[2] = HIDWORD(*(_QWORD *)(a3 + 208));
    v119 = (int8x16_t)vzip2q_s32(v112, v111);
    *(float32x2_t *)v120.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v116.f32, *(float *)v117.i32), *(float32x2_t *)v118.i8, *(float32x2_t *)v109.f32, 1), *(float32x2_t *)v119.i8, v109, 2);
    v121 = (float32x4_t)v119;
    v121.i32[2] = v108.i32[0];
    v122 = vextq_s8(v118, v119, 4uLL).u64[0];
    v120.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 208), *(float32x2_t *)v117.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a3 + 208), 1), *(float32x2_t *)v109.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL), v108).u32[0]);
    v116.i64[1] = *(_QWORD *)(a3 + 208);
    v119.i32[3] = 0;
    v123.i32[3] = 0;
    v123.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v118, 0).i32[3];
    *(uint64_t *)((char *)v123.i64 + 4) = v122;
    v121.i64[1] = vdupq_laneq_s32((int32x4_t)v121, 2).u32[0];
    v124 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v116, COERCE_FLOAT(*(_OWORD *)(a3 + 112))), v123, *(float32x2_t *)(a3 + 112), 1), v121, *(float32x4_t *)(a3 + 112), 2), v120, *(float32x4_t *)(a3 + 112), 3);
    v125 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v116, COERCE_FLOAT(*(_OWORD *)(a3 + 128))), v123, *(float32x2_t *)(a3 + 128), 1), v121, *(float32x4_t *)(a3 + 128), 2), v120, *(float32x4_t *)(a3 + 128), 3);
    v126 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v116, COERCE_FLOAT(*(_OWORD *)(a3 + 144))), v123, *(float32x2_t *)(a3 + 144), 1), v121, *(float32x4_t *)(a3 + 144), 2), v120, *(float32x4_t *)(a3 + 144), 3);
    v127 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v116, COERCE_FLOAT(*(_OWORD *)(a3 + 160))), v123, *(float32x2_t *)(a3 + 160), 1), v121, *(float32x4_t *)(a3 + 160), 2), v120, *(float32x4_t *)(a3 + 160), 3);
    v128 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, COERCE_FLOAT(*(_OWORD *)(a3 + 32))), v125, *(float32x2_t *)(a3 + 32), 1), v126, *(float32x4_t *)(a3 + 32), 2), v127, *(float32x4_t *)(a3 + 32), 3);
    v129 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, COERCE_FLOAT(*(_OWORD *)(a3 + 48))), v125, *(float32x2_t *)(a3 + 48), 1), v126, *(float32x4_t *)(a3 + 48), 2), v127, *(float32x4_t *)(a3 + 48), 3);
    v130 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, COERCE_FLOAT(*(_OWORD *)(a3 + 64))), v125, *(float32x2_t *)(a3 + 64), 1), v126, *(float32x4_t *)(a3 + 64), 2), v127, *(float32x4_t *)(a3 + 64), 3);
    v131 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, COERCE_FLOAT(*(_OWORD *)(a3 + 80))), v125, *(float32x2_t *)(a3 + 80), 1), v126, *(float32x4_t *)(a3 + 80), 2), v127, *(float32x4_t *)(a3 + 80), 3);
    *(_OWORD *)object = *(_OWORD *)a3;
    *(int32x4_t *)&object[16] = v128;
    *(int32x4_t *)&object[32] = v129;
    *(int8x16_t *)&object[48] = v130;
    *(float32x4_t *)&object[64] = v131;
    *(_QWORD *)&v132 = vzip1q_s32(v128, v129).u64[0];
    *((_QWORD *)&v132 + 1) = v130.u32[0];
    v133 = (int8x16_t)vtrn2q_s32(v128, v129);
    v133.i32[2] = v130.i32[1];
    v134 = vzip2q_s32(v128, v129);
    v134.i32[2] = v130.i32[2];
    v119.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v133, 0).i32[3];
    *(uint64_t *)((char *)v119.i64 + 4) = vextq_s8(v133, (int8x16_t)0, 4uLL).u64[0];
    v134.i64[1] = vdupq_laneq_s32(v134, 2).u32[0];
    *(int32x4_t *)&v719[32] = v134;
    *(_OWORD *)v719 = v132;
    *(int8x16_t *)&v719[16] = v119;
    *(float32x2_t *)&v719[48] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v132, COERCE_FLOAT(v131.i32[0] ^ 0x80000000)), *(float32x2_t *)v133.i8, (float32x2_t)(v131.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v134.i8, COERCE_FLOAT(v131.i32[2] ^ 0x80000000));
    *(_DWORD *)&v719[56] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v130.i8, (float32x2_t)(v131.i64[0] ^ 0x8000000080000000)), (float32x2_t)vdup_lane_s32((int32x2_t)(v131.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v130.i8, 1), (float32x2_t)(v131.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)).u32[0];
    *(_DWORD *)&v719[60] = 1065353216;
    *(int32x2_t *)&v719[64] = v113;
    *(int32x2_t *)v721 = vadd_s32(v113, (int32x2_t)0x100000001);
    v720 = v114;
    *(_DWORD *)&v721[8] = v114 + 1;
    v135 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)&v722 = *(_QWORD *)(a3 + 104);
    *((_QWORD *)&v722 + 1) = *(_QWORD *)(sub_2231D0224(v135) + 16);
    v723[0] = 0;
    sub_2241498F4((uint64_t)&v723[8], 0);
    v748 = v115;
    v749 = 0;
    v136 = sub_2231D04FC(*(_QWORD *)(a3 + 16));
    v137 = v110;
    v138 = v110 + 76;
    v139 = a1;
    v140 = a3;
    if (*(_DWORD *)v136 == 1
      && *(_DWORD *)(v136 + 4) == 1
      && *(unsigned __int8 *)(*(_QWORD *)(v136 + 40) + 164) <= 2u)
    {
      v723[0] = *(_BYTE *)(*(_QWORD *)(v136 + 40) + 164);
    }
    *((_OWORD *)v137 + 2) = *(_OWORD *)object;
    v142 = *(_OWORD *)&object[48];
    v141 = *(_OWORD *)&object[64];
    v143 = *(_OWORD *)&object[32];
    *((_OWORD *)v137 + 3) = *(_OWORD *)&object[16];
    *((_OWORD *)v137 + 4) = v143;
    *((_OWORD *)v137 + 5) = v142;
    *((_OWORD *)v137 + 6) = v141;
    v145 = *(_OWORD *)&v719[32];
    v144 = *(_OWORD *)&v719[48];
    v146 = *(_OWORD *)&v719[16];
    *((_OWORD *)v137 + 7) = *(_OWORD *)v719;
    *((_OWORD *)v137 + 8) = v146;
    *((_OWORD *)v137 + 9) = v145;
    *((_OWORD *)v137 + 10) = v144;
    v147 = *(_QWORD *)&v719[64];
    *((_DWORD *)v137 + 46) = v720;
    v137[22] = v147;
    v148 = *(_QWORD *)v721;
    *((_DWORD *)v137 + 49) = *(_DWORD *)&v721[8];
    *(_QWORD *)((char *)v137 + 188) = v148;
    *(_OWORD *)(v137 + 25) = v722;
    *((_BYTE *)v137 + 216) = v723[0];
    sub_2237C2E74(v137 + 28, (uint64_t)&v723[8]);
    *(_WORD *)v138 = v748;
    *((_BYTE *)v138 + 2) = v749;
    sub_22316F8F4((uint64_t *)&v723[8]);
    goto LABEL_254;
  }
  v149 = a1;
  v151 = *(char **)(a1 + 104);
  v150 = *(char **)(a1 + 112);
  v152 = v150 - v151;
  if ((unint64_t)(v150 - v151) >= 0xFFFF0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 151, (uint64_t)"keyframe_uuids_.size() < kInvalidKeyframeIndex", 46, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v149 = a1;
    v151 = *(char **)(a1 + 104);
    v150 = *(char **)(a1 + 112);
    v152 = v150 - v151;
  }
  v153 = *(_QWORD *)(v149 + 120);
  if ((unint64_t)v150 < v153)
  {
    *(_OWORD *)v150 = *(_OWORD *)a3;
    v154 = v150 + 16;
    goto LABEL_157;
  }
  v155 = (v152 >> 4) + 1;
  if (v155 >> 60)
    sub_22316E078();
  v156 = v153 - (_QWORD)v151;
  if (v156 >> 3 > v155)
    v155 = v156 >> 3;
  if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0)
    v157 = 0xFFFFFFFFFFFFFFFLL;
  else
    v157 = v155;
  if (v157)
  {
    if (v157 >> 60)
      sub_223174E94();
    v158 = (char *)operator new(16 * v157);
  }
  else
  {
    v158 = 0;
  }
  v159 = &v158[16 * (v152 >> 4)];
  v160 = &v158[16 * v157];
  *(_OWORD *)v159 = *(_OWORD *)a3;
  v154 = v159 + 16;
  if (v150 == v151)
  {
    v149 = a1;
    *(_QWORD *)(a1 + 104) = v159;
    *(_QWORD *)(a1 + 112) = v154;
    *(_QWORD *)(a1 + 120) = v160;
    if (!v151)
      goto LABEL_157;
    goto LABEL_156;
  }
  v149 = a1;
  do
  {
    *((_OWORD *)v159 - 1) = *((_OWORD *)v150 - 1);
    v159 -= 16;
    v150 -= 16;
  }
  while (v150 != v151);
  v151 = *(char **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v159;
  *(_QWORD *)(a1 + 112) = v154;
  *(_QWORD *)(a1 + 120) = v160;
  if (v151)
LABEL_156:
    operator delete(v151);
LABEL_157:
  *(_QWORD *)(v149 + 112) = v154;
  v161 = (char *)operator new(0x268uLL);
  v139 = a1;
  v162 = (_QWORD *)(a1 + 80);
  *(_QWORD *)object = v161;
  *(_QWORD *)&object[8] = a1 + 80;
  object[16] = 0;
  *(_QWORD *)v161 = 0;
  *((_QWORD *)v161 + 1) = 0;
  v163.i64[0] = *(_QWORD *)(a3 + 176);
  v163.i32[2] = *(_DWORD *)(a3 + 184);
  v164 = *(_OWORD *)a3;
  v165.i64[0] = *(_QWORD *)(a3 + 192);
  v165.i32[2] = *(_DWORD *)(a3 + 200);
  v166.i64[0] = *(_QWORD *)(a3 + 208);
  v167.i32[0] = *(_DWORD *)(a3 + 216);
  v168.i64[0] = vzip1q_s32(v163, v165).u64[0];
  v169.i64[0] = *(_QWORD *)(a3 + 224);
  v169.i32[2] = *(_DWORD *)(a3 + 232);
  v170 = (int8x16_t)vnegq_f32(v169);
  v171 = (int8x16_t)vtrn2q_s32(v163, v165);
  v171.i32[2] = v166.i32[1];
  v172 = (int8x16_t)vzip2q_s32(v163, v165);
  *(float32x2_t *)v173.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v168.f32, *(float *)v170.i32), *(float32x2_t *)v171.i8, *(float32x2_t *)v169.f32, 1), *(float32x2_t *)v172.i8, v169, 2);
  v174 = (float32x4_t)v172;
  v174.i32[2] = v167.i32[0];
  *((_OWORD *)v161 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v161 + 2) = v164;
  *(_QWORD *)&v164 = vextq_s8(v171, v172, 4uLL).u64[0];
  v173.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v170.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v166.f32, 1), *(float32x2_t *)v169.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL), v167).u32[0]);
  v168.i64[1] = v166.u32[0];
  v172.i32[3] = 0;
  v166.i32[3] = 0;
  v166.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v171, 0).i32[3];
  *(uint64_t *)((char *)v166.i64 + 4) = v164;
  v174.i64[1] = vdupq_laneq_s32((int32x4_t)v174, 2).u32[0];
  v175 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, COERCE_FLOAT(*(_OWORD *)(a3 + 112))), v166, *(float32x2_t *)(a3 + 112), 1), v174, *(float32x4_t *)(a3 + 112), 2), v173, *(float32x4_t *)(a3 + 112), 3);
  v176 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, COERCE_FLOAT(*(_OWORD *)(a3 + 128))), v166, *(float32x2_t *)(a3 + 128), 1), v174, *(float32x4_t *)(a3 + 128), 2), v173, *(float32x4_t *)(a3 + 128), 3);
  v177 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, COERCE_FLOAT(*(_OWORD *)(a3 + 144))), v166, *(float32x2_t *)(a3 + 144), 1), v174, *(float32x4_t *)(a3 + 144), 2), v173, *(float32x4_t *)(a3 + 144), 3);
  v178 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, COERCE_FLOAT(*(_OWORD *)(a3 + 160))), v166, *(float32x2_t *)(a3 + 160), 1), v174, *(float32x4_t *)(a3 + 160), 2), v173, *(float32x4_t *)(a3 + 160), 3);
  v179 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)(a3 + 48))), v176, *(float32x2_t *)(a3 + 48), 1), v177, *(float32x4_t *)(a3 + 48), 2), v178, *(float32x4_t *)(a3 + 48), 3);
  v180 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)(a3 + 64))), v176, *(float32x2_t *)(a3 + 64), 1), v177, *(float32x4_t *)(a3 + 64), 2), v178, *(float32x4_t *)(a3 + 64), 3);
  v181 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)(a3 + 80))), v176, *(float32x2_t *)(a3 + 80), 1), v177, *(float32x4_t *)(a3 + 80), 2), v178, *(float32x4_t *)(a3 + 80), 3);
  *((float32x4_t *)v161 + 3) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)(a3 + 32))), v176, *(float32x2_t *)(a3 + 32), 1), v177, *(float32x4_t *)(a3 + 32), 2), v178, *(float32x4_t *)(a3 + 32), 3);
  *((int32x4_t *)v161 + 4) = v179;
  *((float32x4_t *)v161 + 5) = v180;
  *((float32x4_t *)v161 + 6) = v181;
  v179.i64[0] = *((_QWORD *)v161 + 6);
  v179.i32[2] = *((_DWORD *)v161 + 14);
  v176.i64[0] = *((_QWORD *)v161 + 8);
  v176.i32[2] = *((_DWORD *)v161 + 18);
  v177.i32[0] = *((_DWORD *)v161 + 22);
  v178.i64[0] = vzip1q_s32(v179, (int32x4_t)v176).u64[0];
  v181.i64[0] ^= 0x8000000080000000;
  v182 = (int8x16_t)vtrn2q_s32(v179, (int32x4_t)v176);
  v182.i32[2] = HIDWORD(*((_QWORD *)v161 + 10));
  v183 = vzip2q_s32(v179, (int32x4_t)v176);
  *(float32x2_t *)v169.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v178.f32, v181.f32[0]), *(float32x2_t *)v182.i8, *(float32x2_t *)v181.f32, 1), *(float32x2_t *)v183.i8, COERCE_FLOAT(v181.i32[2] ^ 0x80000000));
  v183.i32[2] = v177.i32[0];
  v178.i64[1] = *((_QWORD *)v161 + 10);
  v172.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v182, 0).i32[3];
  *(uint64_t *)((char *)v172.i64 + 4) = vextq_s8(v182, (int8x16_t)0, 4uLL).u64[0];
  v183.i64[1] = vdupq_laneq_s32(v183, 2).u32[0];
  v181.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v161 + 80), *(float32x2_t *)v181.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v181.f32, 1), *(float32x2_t *)(v161 + 80), 1), (float32x2_t)(v181.i64[1] ^ 0xFFFFFFFF80000000), *(float32x2_t *)v177.f32).u32[0];
  *((int8x16_t *)v161 + 8) = v172;
  *((int32x4_t *)v161 + 9) = v183;
  *((float32x4_t *)v161 + 7) = v178;
  *((_QWORD *)v161 + 20) = v169.i64[0];
  *((_DWORD *)v161 + 42) = v181.i32[0];
  *((_DWORD *)v161 + 43) = 1065353216;
  *((int32x2_t *)v161 + 22) = v113;
  *((_DWORD *)v161 + 46) = v114;
  *(int32x2_t *)(v161 + 188) = vadd_s32(v113, (int32x2_t)0x100000001);
  *((_DWORD *)v161 + 49) = v114 + 1;
  *((_QWORD *)v161 + 25) = *(_QWORD *)(a3 + 104);
  *((_QWORD *)v161 + 26) = *(_QWORD *)(sub_2231D0224(*(_QWORD *)(a3 + 16)) + 16);
  v161[216] = 0;
  sub_2241498F4((uint64_t)(v161 + 224), 0);
  *((_WORD *)v161 + 304) = (unint64_t)v152 >> 4;
  v161[610] = 0;
  v184 = sub_2231D04FC(*(_QWORD *)(a3 + 16));
  if (*(_DWORD *)v184 == 1 && *(_DWORD *)(v184 + 4) == 1)
  {
    v185 = *(unsigned __int8 *)(*(_QWORD *)(v184 + 40) + 164);
    if (v185 <= 2)
      v161[216] = v185;
  }
  object[16] = 1;
  *((_QWORD *)v161 + 1) = sub_22456636C((unsigned __int8 *)v161 + 16);
  v186 = *(_QWORD **)object;
  v187 = (_QWORD *)(*(_QWORD *)object + 16);
  v188 = sub_22456636C((unsigned __int8 *)(*(_QWORD *)object + 16));
  v140 = a3;
  v137 = v186;
  v186[1] = v188;
  v189 = *(_QWORD *)(a1 + 72);
  if (!v189)
    goto LABEL_193;
  v190 = (uint8x8_t)vcnt_s8((int8x8_t)v189);
  v190.i16[0] = vaddlv_u8(v190);
  if (v190.u32[0] > 1uLL)
  {
    v191 = v188;
    if (v189 <= v188)
      v191 = v188 % v189;
  }
  else
  {
    v191 = (v189 - 1) & v188;
  }
  v192 = (_QWORD *)*((_QWORD *)*v77 + v191);
  if (!v192 || (v193 = (_QWORD *)*v192) == 0)
  {
LABEL_193:
    v199 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    v200 = *(float *)(a1 + 96);
    if (!v189 || (float)(v200 * (float)v189) < v199)
    {
      v201 = 1;
      if (v189 >= 3)
        v201 = (v189 & (v189 - 1)) != 0;
      v202 = v201 | (2 * v189);
      v203 = vcvtps_u32_f32(v199 / v200);
      if (v202 <= v203)
        prime = v203;
      else
        prime = v202;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v189 = *(_QWORD *)(a1 + 72);
      }
      if (prime > v189)
        goto LABEL_205;
      if (prime >= v189)
        goto LABEL_240;
      v215 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v189 < 3 || (v216 = (uint8x8_t)vcnt_s8((int8x8_t)v189), v216.i16[0] = vaddlv_u8(v216), v216.u32[0] > 1uLL))
      {
        v215 = std::__next_prime(v215);
      }
      else
      {
        v217 = 1 << -(char)__clz(v215 - 1);
        if (v215 >= 2)
          v215 = v217;
      }
      if (prime <= v215)
        prime = v215;
      if (prime >= v189)
      {
        v189 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_205:
          if (prime >> 61)
            sub_223174E94();
          v205 = operator new(8 * prime);
          v206 = *v77;
          *v77 = v205;
          if (v206)
            operator delete(v206);
          v207 = 0;
          *(_QWORD *)(a1 + 72) = prime;
          do
            *((_QWORD *)*v77 + v207++) = 0;
          while (prime != v207);
          v208 = (_QWORD *)*v162;
          if (!*v162)
            goto LABEL_239;
          v209 = v208[1];
          v210 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v211 = v209 & v210;
            *((_QWORD *)*v77 + v211) = v162;
            for (i = (_QWORD *)*v208; *v208; i = (_QWORD *)*v208)
            {
              v213 = i[1] & v210;
              if (v213 == v211)
              {
                v208 = i;
              }
              else if (*((_QWORD *)*v77 + v213))
              {
                *v208 = *i;
                v214 = 8 * v213;
                *i = **(_QWORD **)((char *)*v77 + v214);
                **(_QWORD **)((char *)*v77 + v214) = i;
              }
              else
              {
                *((_QWORD *)*v77 + v213) = v208;
                v208 = i;
                v211 = v213;
              }
            }
LABEL_239:
            v189 = prime;
            goto LABEL_240;
          }
          if (v209 >= prime)
            v209 %= prime;
          *((_QWORD *)*v77 + v209) = v162;
          v218 = (_QWORD *)*v208;
          if (!*v208)
            goto LABEL_239;
          while (1)
          {
            v220 = v218[1];
            if (v220 >= prime)
              v220 %= prime;
            if (v220 == v209)
              goto LABEL_233;
            if (*((_QWORD *)*v77 + v220))
            {
              *v208 = *v218;
              v219 = 8 * v220;
              *v218 = **(_QWORD **)((char *)*v77 + v219);
              **(_QWORD **)((char *)*v77 + v219) = v218;
              v218 = v208;
LABEL_233:
              v208 = v218;
              v218 = (_QWORD *)*v218;
              if (!v218)
                goto LABEL_239;
            }
            else
            {
              *((_QWORD *)*v77 + v220) = v208;
              v208 = v218;
              v218 = (_QWORD *)*v218;
              v209 = v220;
              if (!v218)
                goto LABEL_239;
            }
          }
        }
        v556 = *v77;
        *v77 = 0;
        if (v556)
          operator delete(v556);
        v189 = 0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
LABEL_240:
    v221 = v137[1];
    v222 = (uint8x8_t)vcnt_s8((int8x8_t)v189);
    v222.i16[0] = vaddlv_u8(v222);
    if (v222.u32[0] > 1uLL)
    {
      if (v221 >= v189)
        v221 %= v189;
    }
    else
    {
      v221 &= v189 - 1;
    }
    v223 = (_QWORD *)*((_QWORD *)*v77 + v221);
    if (v223)
    {
      v224 = v137;
      *v137 = *v223;
    }
    else
    {
      *v137 = *v162;
      *v162 = v137;
      *((_QWORD *)*v77 + v221) = v162;
      if (!*v137)
      {
LABEL_253:
        ++*(_QWORD *)(a1 + 88);
        goto LABEL_254;
      }
      v225 = *(_QWORD *)(*v137 + 8);
      if (v222.u32[0] > 1uLL)
      {
        if (v225 >= v189)
          v225 %= v189;
      }
      else
      {
        v225 &= v189 - 1;
      }
      v223 = (char *)*v77 + 8 * v225;
      v224 = v137;
    }
    *v223 = v224;
    goto LABEL_253;
  }
  if (v190.u32[0] < 2uLL)
  {
    while (1)
    {
      v196 = v193[1];
      if (v196 == v188)
      {
        if (v193[2] == *v187 && v193[3] == v187[1])
          goto LABEL_189;
      }
      else if ((v196 & (v189 - 1)) != v191)
      {
        goto LABEL_193;
      }
      v193 = (_QWORD *)*v193;
      if (!v193)
        goto LABEL_193;
    }
  }
  while (1)
  {
    v194 = v193[1];
    if (v194 == v188)
      break;
    if (v194 >= v189)
      v194 %= v189;
    if (v194 != v191)
      goto LABEL_193;
LABEL_171:
    v193 = (_QWORD *)*v193;
    if (!v193)
      goto LABEL_193;
  }
  if (v193[2] != *v187 || v193[3] != v187[1])
    goto LABEL_171;
LABEL_189:
  v137 = v193;
  v198 = *(void **)object;
  if (*(_QWORD *)object)
  {
    if (object[16])
      sub_22316F8F4((uint64_t *)(*(_QWORD *)object + 224));
    operator delete(v198);
  }
LABEL_254:
  v621 = v139 + 21164;
  v226 = *(_QWORD *)(v139 + 128);
  if (v226 <= v137[25])
    v226 = v137[25];
  *(_QWORD *)(v139 + 128) = v226;
  v662 = 1;
  v661 = 255;
  v659 = &v662;
  v660 = &v661;
  v227 = *(float *)(v139 + 312);
  v228 = logf(v227);
  v229.i64[0] = v137[6];
  v229.i32[2] = *((_DWORD *)v137 + 14);
  v230.i64[0] = v137[8];
  v230.i32[2] = *((_DWORD *)v137 + 18);
  v231.i64[0] = vzip1q_s32(v229, v230).u64[0];
  v232.i64[0] = v137[12];
  v232.i32[2] = *((_DWORD *)v137 + 26);
  v233 = (int8x16_t)vnegq_f32(v232);
  v234 = *((float *)v137 + 52);
  v235 = *((float *)v137 + 53);
  v236 = (int8x16_t)vtrn2q_s32(v229, v230);
  v236.i32[2] = HIDWORD(v137[10]);
  v625 = v137;
  v237.i32[0] = *((_DWORD *)v137 + 22);
  v238 = (int8x16_t)vzip2q_s32(v229, v230);
  v238.i32[2] = v237.i32[0];
  v231.i64[1] = v137[10];
  v239 = vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)v137[10], *(float32x2_t *)v233.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v137[10], 1), *(float32x2_t *)v232.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v233, v233, 8uLL), v237).u32[0];
  v240.i32[3] = 0;
  v240.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v236, 0).i32[3];
  *(uint64_t *)((char *)v240.i64 + 4) = vextq_s8(v236, v238, 4uLL).u64[0];
  v238.i64[1] = vdupq_laneq_s32((int32x4_t)v238, 2).u32[0];
  v656 = v240;
  v657 = v238;
  v655 = v231;
  *(float32x2_t *)v658.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v231.i8, *(float *)v233.i32), *(float32x2_t *)v236.i8, *(float32x2_t *)v232.f32, 1), *(float32x2_t *)v238.i8, v232, 2);
  v658.i64[1] = v239 | 0x3F80000000000000;
  if (*(_QWORD *)(v139 + 23440))
  {
LABEL_257:
    object[0] = 0;
    v747 = 0;
    goto LABEL_258;
  }
  if ((*(_BYTE *)(v139 + 48) & 8) == 0 || !*(_BYTE *)(v139 + 21344))
  {
    object[0] = 0;
    v747 = 0;
    goto LABEL_367;
  }
  v252 = operator new();
  sub_223CC8D74(v252, *(_DWORD *)(v139 + 21348), *(_BYTE *)(a1 + 48));
  v253 = *(_QWORD *)(a1 + 23440);
  *(_QWORD *)(a1 + 23440) = v252;
  v140 = a3;
  if (!v253)
    goto LABEL_257;
  v254 = *(std::__shared_weak_count **)(v253 + 80);
  if (v254)
  {
    v255 = (unint64_t *)&v254->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  MEMORY[0x227684CE8](v253, 0x10F0C401ED89F8CLL);
  v257 = *(_QWORD *)(a1 + 23440);
  object[0] = 0;
  v747 = 0;
  if (v257)
  {
LABEL_258:
    v671 = 0u;
    v672 = 0u;
    LODWORD(v673) = 728335832;
    kdebug_trace();
    v241 = (char *)operator new(0x28uLL);
    strcpy(v241, "KeyframeOccupancyDepthCorrection");
    sub_223197FA4(&v650, v241, 0x20uLL);
    strcpy(&v652[8], "KeyframeOccupancy");
    v652[31] = 17;
    v653[1] = 0;
    v653[0] = 0;
    v654 = 0;
    v653[0] = std::chrono::steady_clock::now().__d_.__rep_;
    v654 = 1;
    operator delete(v241);
    sub_2231CDAE0(*(_QWORD *)(v140 + 16), (uint64_t)__s);
    *(_QWORD *)oslog = &off_24EC204C0;
    v242 = *(_QWORD *)&__s[8];
    v243 = (std::__shared_weak_count *)v751;
    if ((_QWORD)v751)
    {
      v244 = (unint64_t *)(v751 + 8);
      do
        v245 = __ldxr(v244);
      while (__stxr(v245 + 1, v244));
      v246 = v755;
      do
        v247 = __ldxr(v244);
      while (__stxr(v247 + 1, v244));
      v248 = *((_QWORD *)&v751 + 1);
      *(float32x4_t *)&oslog[32] = v752;
      *(float32x4_t *)&oslog[48] = v753;
      *(_QWORD *)&oslog[64] = v754;
      do
        v249 = __ldxr(v244);
      while (__stxr(v249 + 1, v244));
      *(_QWORD *)&oslog[8] = v242;
      *(_QWORD *)&oslog[16] = v243;
      *(_QWORD *)&oslog[24] = v248;
      v688 = v246;
      do
        v250 = __ldaxr(v244);
      while (__stlxr(v250 - 1, v244));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
      do
        v251 = __ldaxr(v244);
      while (__stlxr(v251 - 1, v244));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    else
    {
      *(_QWORD *)&oslog[8] = *(_QWORD *)&__s[8];
      *(_OWORD *)&oslog[16] = __PAIR128__(*((unint64_t *)&v751 + 1), 0);
      *(float32x4_t *)&oslog[32] = v752;
      *(float32x4_t *)&oslog[48] = v753;
      *(_QWORD *)&oslog[64] = v754;
      v688 = v755;
    }
    sub_2231CDCA4(*(_QWORD *)(v140 + 16), (uint64_t)&v712);
    __dst = &off_24EC204C0;
    v258 = v712.i64[1];
    v259 = (std::__shared_weak_count *)v713.i64[0];
    if (v713.i64[0])
    {
      v260 = (unint64_t *)(v713.i64[0] + 8);
      do
        v261 = __ldxr(v260);
      while (__stxr(v261 + 1, v260));
      v262 = v717;
      do
        v263 = __ldxr(v260);
      while (__stxr(v263 + 1, v260));
      v264 = v713.i64[1];
      v667 = v714;
      v668 = v715;
      v669 = v716;
      do
        v265 = __ldxr(v260);
      while (__stxr(v265 + 1, v260));
      *(_QWORD *)v666 = v258;
      *(_QWORD *)&v666[8] = v259;
      *(_QWORD *)&v666[16] = v264;
      v670 = v262;
      do
        v266 = __ldaxr(v260);
      while (__stlxr(v266 - 1, v260));
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
      do
        v267 = __ldaxr(v260);
      while (__stlxr(v267 - 1, v260));
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    else
    {
      *(_QWORD *)v666 = v712.i64[1];
      *(_OWORD *)&v666[8] = __PAIR128__(v713.u64[1], 0);
      v667 = v714;
      v668 = v715;
      v669 = v716;
      v670 = v717;
    }
    sub_2231CC34C(*(_QWORD *)(v140 + 16), (uint64_t)&v675);
    v680 = &off_24EC200A8;
    v268 = v676;
    v269 = (std::__shared_weak_count *)v677;
    if ((_QWORD)v677)
    {
      v270 = (unint64_t *)(v677 + 8);
      do
        v271 = __ldxr(v270);
      while (__stxr(v271 + 1, v270));
      v272 = v679;
      do
        v273 = __ldxr(v270);
      while (__stxr(v273 + 1, v270));
      v274 = *((_QWORD *)&v677 + 1);
      v683 = v678;
      do
        v275 = __ldxr(v270);
      while (__stxr(v275 + 1, v270));
      v681 = v268;
      *(_QWORD *)&v682 = v269;
      *((_QWORD *)&v682 + 1) = v274;
      v684 = v272;
      do
        v276 = __ldaxr(v270);
      while (__stlxr(v276 - 1, v270));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
      do
        v277 = __ldaxr(v270);
      while (__stlxr(v277 - 1, v270));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    else
    {
      v681 = v676;
      v682 = __PAIR128__(*((unint64_t *)&v677 + 1), 0);
      v683 = v678;
      v684 = v679;
    }
    sub_223936990((uint64_t)v642, (uint64_t)oslog, (uint64_t)&__dst, (uint64_t)&v680);
    v282 = (std::__shared_weak_count *)v682;
    if ((_QWORD)v682)
    {
      v283 = (unint64_t *)(v682 + 8);
      do
        v284 = __ldaxr(v283);
      while (__stlxr(v284 - 1, v283));
      if (!v284)
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
    }
    v285 = (std::__shared_weak_count *)v677;
    if ((_QWORD)v677)
    {
      v286 = (unint64_t *)(v677 + 8);
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
    v288 = *(std::__shared_weak_count **)&v666[8];
    if (*(_QWORD *)&v666[8])
    {
      v289 = (unint64_t *)(*(_QWORD *)&v666[8] + 8);
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      if (!v290)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
      }
    }
    v291 = (std::__shared_weak_count *)v713.i64[0];
    if (v713.i64[0])
    {
      v292 = (unint64_t *)(v713.i64[0] + 8);
      do
        v293 = __ldaxr(v292);
      while (__stlxr(v293 - 1, v292));
      if (!v293)
      {
        ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
        std::__shared_weak_count::__release_weak(v291);
      }
    }
    v294 = *(std::__shared_weak_count **)&oslog[16];
    if (*(_QWORD *)&oslog[16])
    {
      v295 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
      do
        v296 = __ldaxr(v295);
      while (__stlxr(v296 - 1, v295));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
        std::__shared_weak_count::__release_weak(v294);
      }
    }
    v297 = (std::__shared_weak_count *)v751;
    if ((_QWORD)v751)
    {
      v298 = (unint64_t *)(v751 + 8);
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
    v300 = *(_QWORD *)(a1 + 23440);
    v278.i64[0] = *(_QWORD *)(v140 + 176);
    v278.i32[2] = *(_DWORD *)(v140 + 184);
    v279.i64[0] = *(_QWORD *)(v140 + 192);
    v279.i32[2] = *(_DWORD *)(v140 + 200);
    v280.i32[0] = *(_DWORD *)(v140 + 216);
    v281.i64[0] = *(_QWORD *)(v140 + 224);
    v281.i32[2] = *(_DWORD *)(v140 + 232);
    v301.i64[0] = vzip1q_s32(v278, v279).u64[0];
    v302 = (int8x16_t)vnegq_f32(v281);
    v303 = (int8x16_t)vtrn2q_s32(v278, v279);
    v303.i32[2] = HIDWORD(*(_QWORD *)(v140 + 208));
    v304 = (float32x4_t)vzip2q_s32(v278, v279);
    *(float32x2_t *)v305.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v301.f32, *(float *)v302.i32), *(float32x2_t *)v303.i8, *(float32x2_t *)v281.f32, 1), *(float32x2_t *)v304.f32, v281, 2);
    v304.i32[2] = v280.i32[0];
    v305.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v140 + 208), *(float32x2_t *)v302.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v140 + 208), 1), *(float32x2_t *)v281.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v302, v302, 8uLL), v280);
    v301.i64[1] = *(_QWORD *)(v140 + 208);
    v306.i32[3] = 0;
    v306.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v303, 0).i32[3];
    *(uint64_t *)((char *)v306.i64 + 4) = vextq_s8(v303, v305, 4uLL).u64[0];
    v304.i64[1] = vdupq_laneq_s32((int32x4_t)v304, 2).u32[0];
    v305.i32[3] = 1.0;
    v307 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v301, COERCE_FLOAT(*(_OWORD *)(v140 + 112))), v306, *(float32x2_t *)(v140 + 112), 1), v304, *(float32x4_t *)(v140 + 112), 2), (float32x4_t)v305, *(float32x4_t *)(v140 + 112), 3);
    v308 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v301, COERCE_FLOAT(*(_OWORD *)(v140 + 128))), v306, *(float32x2_t *)(v140 + 128), 1), v304, *(float32x4_t *)(v140 + 128), 2), (float32x4_t)v305, *(float32x4_t *)(v140 + 128), 3);
    v309 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v301, COERCE_FLOAT(*(_OWORD *)(v140 + 144))), v306, *(float32x2_t *)(v140 + 144), 1), v304, *(float32x4_t *)(v140 + 144), 2), (float32x4_t)v305, *(float32x4_t *)(v140 + 144), 3);
    v310 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v301, COERCE_FLOAT(*(_OWORD *)(v140 + 160))), v306, *(float32x2_t *)(v140 + 160), 1), v304, *(float32x4_t *)(v140 + 160), 2), (float32x4_t)v305, *(float32x4_t *)(v140 + 160), 3);
    v311 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v307, COERCE_FLOAT(*(_OWORD *)(v140 + 48))), v308, *(float32x2_t *)(v140 + 48), 1), v309, *(float32x4_t *)(v140 + 48), 2), v310, *(float32x4_t *)(v140 + 48), 3);
    v312 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v307, COERCE_FLOAT(*(_OWORD *)(v140 + 64))), v308, *(float32x2_t *)(v140 + 64), 1), v309, *(float32x4_t *)(v140 + 64), 2), v310, *(float32x4_t *)(v140 + 64), 3);
    v313 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v307, COERCE_FLOAT(*(_OWORD *)(v140 + 80))), v308, *(float32x2_t *)(v140 + 80), 1), v309, *(float32x4_t *)(v140 + 80), 2), v310, *(float32x4_t *)(v140 + 80), 3);
    *(float32x4_t *)__s = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v307, COERCE_FLOAT(*(_OWORD *)(v140 + 32))), v308, *(float32x2_t *)(v140 + 32), 1), v309, *(float32x4_t *)(v140 + 32), 2), v310, *(float32x4_t *)(v140 + 32), 3);
    v751 = (unsigned __int128)v311;
    v752 = v312;
    v753 = v313;
    v314 = sub_2231D0224(*(_QWORD *)(v140 + 16));
    sub_223CC8F3C(v300, (uint64_t)v642, (float32x2_t *)__s, v314, (uint64_t)oslog);
    if (v747)
    {
      sub_223936D84((uint64_t)object, (uint64_t)oslog);
      sub_223937070(oslog);
      v315 = v649;
      if (!v649)
        goto LABEL_351;
    }
    else
    {
      *(_QWORD *)object = &off_24EC204C0;
      *(_OWORD *)&object[8] = *(_OWORD *)&oslog[8];
      *(_QWORD *)&oslog[8] = 0;
      *(_QWORD *)&oslog[16] = 0;
      *(_OWORD *)&object[24] = *(_OWORD *)&oslog[24];
      *(_OWORD *)&object[40] = *(_OWORD *)&oslog[40];
      *(_OWORD *)&object[56] = *(_OWORD *)&oslog[56];
      *(_WORD *)&object[72] = v688;
      *(_QWORD *)v719 = &off_24EC204C0;
      *(_OWORD *)&v719[8] = v689;
      v689 = 0uLL;
      LOWORD(v720) = v693;
      *(_OWORD *)&v719[56] = v692;
      *(_OWORD *)&v719[40] = v691;
      *(_OWORD *)&v719[24] = v690;
      v722 = v694;
      v694 = 0uLL;
      *(_OWORD *)&v723[10] = *(_OWORD *)((char *)v695 + 10);
      *(_OWORD *)v723 = v695[0];
      v727 = v695[5];
      v726 = v695[4];
      v725 = v695[3];
      v724 = v695[2];
      v729 = &off_24EC20868;
      v730 = v696;
      v731 = v697;
      v733 = v699;
      v734 = v700;
      v732 = v698;
      v735 = v701;
      *(_QWORD *)&v721[4] = &off_24EC200A8;
      v728 = &off_24EC207B8;
      v736 = v702;
      v316 = v704;
      v737 = &off_24EC22138;
      v738 = v703;
      v703 = 0;
      v704 = 0;
      *(_OWORD *)((char *)v740 + 10) = *(_OWORD *)((char *)v705 + 10);
      v740[0] = v705[0];
      v739 = v316;
      v741 = v706;
      v317 = v707;
      v706 = 0;
      v707 = 0uLL;
      v742 = v317;
      v743 = v708;
      v744 = v709;
      v708 = 0uLL;
      v709 = 0;
      *(_OWORD *)((char *)v746 + 9) = *(_OWORD *)((char *)v711 + 9);
      v745 = v710;
      v746[0] = v711[0];
      v747 = 1;
      sub_223937070(oslog);
      v315 = v649;
      if (!v649)
        goto LABEL_351;
    }
    v318 = (unint64_t *)&v315->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
LABEL_351:
    v320 = v648;
    if (v648)
    {
      v321 = (unint64_t *)&v648->__shared_owners_;
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    v323 = *(std::__shared_weak_count **)&v642[16];
    if (*(_QWORD *)&v642[16])
    {
      v324 = (unint64_t *)(*(_QWORD *)&v642[16] + 8);
      do
        v325 = __ldaxr(v324);
      while (__stlxr(v325 - 1, v324));
      if (!v325)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    sub_22391CC34((uint64_t *)&v650, (uint64_t *)&v652[8], (uint64_t)v653);
    if ((v652[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v652[8]);
      if ((v652[7] & 0x80000000) == 0)
        goto LABEL_363;
    }
    else if ((v652[7] & 0x80000000) == 0)
    {
LABEL_363:
      kdebug_trace();
      goto LABEL_367;
    }
    operator delete(v650);
    goto LABEL_363;
  }
LABEL_367:
  v685[1] = 0;
  v685[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v686 = 1;
  kdebug_trace();
  v326.i64[0] = *(_QWORD *)(v140 + 176);
  v326.i32[2] = *(_DWORD *)(v140 + 184);
  v327.i64[0] = *(_QWORD *)(v140 + 192);
  v327.i32[2] = *(_DWORD *)(v140 + 200);
  v328.i32[0] = *(_DWORD *)(v140 + 216);
  v329.i64[0] = *(_QWORD *)(v140 + 224);
  v329.i32[2] = *(_DWORD *)(v140 + 232);
  v330.i64[0] = vzip1q_s32(v326, v327).u64[0];
  v331 = (int8x16_t)vnegq_f32(v329);
  v332 = (int8x16_t)vtrn2q_s32(v326, v327);
  v332.i32[2] = HIDWORD(*(_QWORD *)(v140 + 208));
  v333 = (float32x4_t)vzip2q_s32(v326, v327);
  *(float32x2_t *)v334.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v330.f32, *(float *)v331.i32), *(float32x2_t *)v332.i8, *(float32x2_t *)v329.f32, 1), *(float32x2_t *)v333.f32, v329, 2);
  v333.i32[2] = v328.i32[0];
  v334.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v140 + 208), *(float32x2_t *)v331.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v140 + 208), 1), *(float32x2_t *)v329.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v331, v331, 8uLL), *(float32x2_t *)v328.f32);
  v330.i64[1] = *(_QWORD *)(v140 + 208);
  v328.i32[3] = 0;
  v328.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v332, 0).i32[3];
  *(uint64_t *)((char *)v328.i64 + 4) = vextq_s8(v332, v334, 4uLL).u64[0];
  v333.i64[1] = vdupq_laneq_s32((int32x4_t)v333, 2).u32[0];
  v334.i32[3] = 1.0;
  v335 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v330, COERCE_FLOAT(*(_OWORD *)(v140 + 112))), v328, *(float32x2_t *)(v140 + 112), 1), v333, *(float32x4_t *)(v140 + 112), 2), (float32x4_t)v334, *(float32x4_t *)(v140 + 112), 3);
  v336 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v330, COERCE_FLOAT(*(_OWORD *)(v140 + 128))), v328, *(float32x2_t *)(v140 + 128), 1), v333, *(float32x4_t *)(v140 + 128), 2), (float32x4_t)v334, *(float32x4_t *)(v140 + 128), 3);
  v337 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v330, COERCE_FLOAT(*(_OWORD *)(v140 + 144))), v328, *(float32x2_t *)(v140 + 144), 1), v333, *(float32x4_t *)(v140 + 144), 2), (float32x4_t)v334, *(float32x4_t *)(v140 + 144), 3);
  v338 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v330, COERCE_FLOAT(*(_OWORD *)(v140 + 160))), v328, *(float32x2_t *)(v140 + 160), 1), v333, *(float32x4_t *)(v140 + 160), 2), (float32x4_t)v334, *(float32x4_t *)(v140 + 160), 3);
  v339 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v335, COERCE_FLOAT(*(_OWORD *)(v140 + 48))), v336, *(float32x2_t *)(v140 + 48), 1), v337, *(float32x4_t *)(v140 + 48), 2), v338, *(float32x4_t *)(v140 + 48), 3);
  v340 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v335, COERCE_FLOAT(*(_OWORD *)(v140 + 64))), v336, *(float32x2_t *)(v140 + 64), 1), v337, *(float32x4_t *)(v140 + 64), 2), v338, *(float32x4_t *)(v140 + 64), 3);
  v341 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v335, COERCE_FLOAT(*(_OWORD *)(v140 + 80))), v336, *(float32x2_t *)(v140 + 80), 1), v337, *(float32x4_t *)(v140 + 80), 2), v338, *(float32x4_t *)(v140 + 80), 3);
  v712 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v335, COERCE_FLOAT(*(_OWORD *)(v140 + 32))), v336, *(float32x2_t *)(v140 + 32), 1), v337, *(float32x4_t *)(v140 + 32), 2), v338, *(float32x4_t *)(v140 + 32), 3);
  v713 = v339;
  v714 = v340;
  v715 = v341;
  sub_2231CC34C(*(_QWORD *)(v140 + 16), (uint64_t)&v680);
  v650 = &off_24EC200A8;
  v342 = v681;
  v343 = (std::__shared_weak_count *)v682;
  if ((_QWORD)v682)
  {
    v344 = (unint64_t *)(v682 + 8);
    do
      v345 = __ldxr(v344);
    while (__stxr(v345 + 1, v344));
    v346 = v684;
    do
      v347 = __ldxr(v344);
    while (__stxr(v347 + 1, v344));
    v348 = *((_QWORD *)&v682 + 1);
    *(_OWORD *)&v652[16] = v683;
    do
      v349 = __ldxr(v344);
    while (__stxr(v349 + 1, v344));
    v651 = v342;
    *(_QWORD *)v652 = v343;
    *(_QWORD *)&v652[8] = v348;
    LOWORD(v653[0]) = v346;
    do
      v350 = __ldaxr(v344);
    while (__stlxr(v350 - 1, v344));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
    do
      v351 = __ldaxr(v344);
    while (__stlxr(v351 - 1, v344));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  else
  {
    v651 = v681;
    *(_OWORD *)v652 = __PAIR128__(*((unint64_t *)&v682 + 1), 0);
    *(_OWORD *)&v652[16] = v683;
    LOWORD(v653[0]) = v684;
  }
  sub_2231CC3F0(*(_QWORD *)(v140 + 16), (uint64_t)&v671);
  v675 = &off_24EC200A8;
  v352 = *((_QWORD *)&v671 + 1);
  v353 = (std::__shared_weak_count *)v672;
  if ((_QWORD)v672)
  {
    v354 = (unint64_t *)(v672 + 8);
    do
      v355 = __ldxr(v354);
    while (__stxr(v355 + 1, v354));
    v356 = v674;
    do
      v357 = __ldxr(v354);
    while (__stxr(v357 + 1, v354));
    v358 = *((_QWORD *)&v672 + 1);
    v678 = v673;
    do
      v359 = __ldxr(v354);
    while (__stxr(v359 + 1, v354));
    v676 = v352;
    *(_QWORD *)&v677 = v353;
    *((_QWORD *)&v677 + 1) = v358;
    v679 = v356;
    do
      v360 = __ldaxr(v354);
    while (__stlxr(v360 - 1, v354));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
    do
      v361 = __ldaxr(v354);
    while (__stlxr(v361 - 1, v354));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  else
  {
    v676 = *((_QWORD *)&v671 + 1);
    v677 = __PAIR128__(*((unint64_t *)&v672 + 1), 0);
    v678 = v673;
    v679 = v674;
  }
  sub_2231CDAE0(*(_QWORD *)(v140 + 16), (uint64_t)v642);
  *(_QWORD *)oslog = &off_24EC204C0;
  v362 = *(_QWORD *)&v642[8];
  v363 = *(std::__shared_weak_count **)&v642[16];
  if (*(_QWORD *)&v642[16])
  {
    v364 = (unint64_t *)(*(_QWORD *)&v642[16] + 8);
    do
      v365 = __ldxr(v364);
    while (__stxr(v365 + 1, v364));
    v366 = v647;
    do
      v367 = __ldxr(v364);
    while (__stxr(v367 + 1, v364));
    v368 = v643;
    *(_OWORD *)&oslog[32] = v644;
    *(_OWORD *)&oslog[48] = v645;
    *(_QWORD *)&oslog[64] = v646;
    do
      v369 = __ldxr(v364);
    while (__stxr(v369 + 1, v364));
    *(_QWORD *)&oslog[8] = v362;
    *(_QWORD *)&oslog[16] = v363;
    *(_QWORD *)&oslog[24] = v368;
    v688 = v366;
    do
      v370 = __ldaxr(v364);
    while (__stlxr(v370 - 1, v364));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
    do
      v371 = __ldaxr(v364);
    while (__stlxr(v371 - 1, v364));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  else
  {
    *(_QWORD *)&oslog[8] = *(_QWORD *)&v642[8];
    *(_OWORD *)&oslog[16] = __PAIR128__((unint64_t)v643, 0);
    *(_OWORD *)&oslog[32] = v644;
    *(_OWORD *)&oslog[48] = v645;
    *(_QWORD *)&oslog[64] = v646;
    v688 = v647;
  }
  sub_2231CDCA4(*(_QWORD *)(v140 + 16), (uint64_t)&__dst);
  *(_QWORD *)__s = &off_24EC204C0;
  v372 = *(_QWORD *)v666;
  v373 = *(std::__shared_weak_count **)&v666[8];
  if (*(_QWORD *)&v666[8])
  {
    v374 = (unint64_t *)(*(_QWORD *)&v666[8] + 8);
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
    v376 = v670;
    do
      v377 = __ldxr(v374);
    while (__stxr(v377 + 1, v374));
    v378 = *(_QWORD *)&v666[16];
    v752 = v667;
    v753 = v668;
    v754 = v669;
    do
      v379 = __ldxr(v374);
    while (__stxr(v379 + 1, v374));
    *(_QWORD *)&__s[8] = v372;
    *(_QWORD *)&v751 = v373;
    *((_QWORD *)&v751 + 1) = v378;
    v755 = v376;
    do
      v380 = __ldaxr(v374);
    while (__stlxr(v380 - 1, v374));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
    do
      v381 = __ldaxr(v374);
    while (__stlxr(v381 - 1, v374));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  else
  {
    *(_QWORD *)&__s[8] = *(_QWORD *)v666;
    v751 = __PAIR128__(*(unint64_t *)&v666[16], 0);
    v752 = v667;
    v753 = v668;
    v754 = v669;
    v755 = v670;
  }
  sub_223AEDC28(a1 + 21152, (float32x2_t *)&v712, (uint64_t)&v650, (uint64_t)&v675, (uint64_t)oslog, (uint64_t)__s, *((unsigned __int8 *)v625 + 216), (uint64_t)object, *(float *)(v139 + 21640));
  v382 = (std::__shared_weak_count *)v751;
  if ((_QWORD)v751)
  {
    v383 = (unint64_t *)(v751 + 8);
    do
      v384 = __ldaxr(v383);
    while (__stlxr(v384 - 1, v383));
    if (!v384)
    {
      ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
      std::__shared_weak_count::__release_weak(v382);
    }
  }
  v385 = *(std::__shared_weak_count **)&v666[8];
  if (*(_QWORD *)&v666[8])
  {
    v386 = (unint64_t *)(*(_QWORD *)&v666[8] + 8);
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v388 = *(std::__shared_weak_count **)&oslog[16];
  if (*(_QWORD *)&oslog[16])
  {
    v389 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v391 = *(std::__shared_weak_count **)&v642[16];
  if (*(_QWORD *)&v642[16])
  {
    v392 = (unint64_t *)(*(_QWORD *)&v642[16] + 8);
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
  v394 = (std::__shared_weak_count *)v677;
  if ((_QWORD)v677)
  {
    v395 = (unint64_t *)(v677 + 8);
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }
  v397 = (std::__shared_weak_count *)v672;
  if ((_QWORD)v672)
  {
    v398 = (unint64_t *)(v672 + 8);
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v606 = (uint64_t)(v625 + 4);
  v400 = *(std::__shared_weak_count **)v652;
  if (*(_QWORD *)v652)
  {
    v401 = (unint64_t *)(*(_QWORD *)v652 + 8);
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v403 = (std::__shared_weak_count *)v682;
  if ((_QWORD)v682)
  {
    v404 = (unint64_t *)(v682 + 8);
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
      std::__shared_weak_count::__release_weak(v403);
    }
  }
  if (!sub_223340F28(v77, v606)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 136, (uint64_t)"KeyframeInfoExists(uuid)", 24, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_800;
  }
  v406 = sub_22342DA5C(v77, v606);
  if (!v406)
    sub_223198218("unordered_map::at: key not found");
  *((_OWORD *)v406 + 11) = xmmword_224660C30;
  v616 = v406;
  v406[24] = 0x8000000080000000;
  __dst = (uint64_t (**)())0x8000000080000000;
  *(_DWORD *)v666 = 0x7FFFFFFF;
  v407 = a1;
  if (!*(_DWORD *)v621 || !*(_DWORD *)(v139 + 21168))
  {
    v407 = a1;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/FrameVoxelCollector.hpp", 33, (uint64_t)"size_[0] > 0 && size_[1] > 0", 28, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
    {
LABEL_800:
      abort();
    }
  }
  v408 = *(_QWORD *)(v407 + 21264) - *(_QWORD *)(v407 + 21256);
  if (!v408)
  {
    v497 = 0;
    LODWORD(v410) = 0;
    v409 = 0;
    v495 = a3;
    v496 = (_QWORD *)(a1 + 64);
    goto LABEL_603;
  }
  v409 = 0;
  v632 = 0;
  v636 = 0;
  v410 = 0;
  v411 = 0;
  v412 = v234 * v235;
  v609 = v408 >> 1;
  v613 = (uint64_t **)(v407 + 160);
  v614 = (uint64_t **)(v407 + 136);
  v617 = v407 + 184;
  v618 = 0;
  v611 = v407 + 21056;
  v620 = v407 + 21792;
  v413 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v612 = v413;
  while (2)
  {
    v623 = *(unsigned __int16 *)(*(_QWORD *)(v407 + 21256) + 2 * (unsigned __int16)v411);
    v610 = v411;
    if (*(_WORD *)(*(_QWORD *)(v407 + 21256) + 2 * (unsigned __int16)v411))
    {
      v414 = 0;
      v622 = (unint64_t)(unsigned __int16)v411 << 6;
      do
      {
        v420 = *(unsigned __int16 *)(*(_QWORD *)(v407 + 21280) + 2 * (v414 + v622));
        v421 = *(_QWORD *)(v407 + 21224);
        v422 = *(_QWORD *)(v407 + 21200) + 16 * v420;
        *(_QWORD *)__s = *(_QWORD *)v422;
        v423 = *(_DWORD *)(v422 + 8);
        *(_DWORD *)&__s[8] = v423;
        v424 = v421 + 68 * v420;
        v640 = *(unsigned __int16 *)(v424 + 32);
        v425 = *(float *)(v424 + 36);
        v626 = *(_BYTE *)(v424 + 67);
        v627 = *(_BYTE *)(v424 + 66);
        v413.i64[0] = *(_QWORD *)__s;
        v628 = v413;
        *(_QWORD *)v642 = *(_QWORD *)__s & 0xFFFFFFF8FFFFFFF8;
        *(_DWORD *)&v642[8] = v423 & 0xFFFFFFF8;
        v426 = vceq_s32((int32x2_t)(*(_QWORD *)__s & 0xFFFFFFF8FFFFFFF8), (int32x2_t)__dst);
        if ((v426.i8[0] & 1) == 0 || (v426.i8[4] & 1) == 0 || (v423 & 0xFFFFFFF8) != *(_DWORD *)v666)
        {
          if (v636)
            sub_223B1D134((char *)&__dst, v636, v614, v613);
          __dst = *(uint64_t (***)())v642;
          *(_DWORD *)v666 = *(_DWORD *)&v642[8];
          if (!*(_DWORD *)(v407 + 8)
            || -858993459 * ((*(_QWORD *)(v407 + 21000) - *(_QWORD *)(v407 + 20984)) >> 12)
             + 858993459 * ((*(_QWORD *)(v407 + 20992) - *(_QWORD *)(v407 + 20984)) >> 12)
             + ((*(_QWORD *)(v407 + 21040) - *(_QWORD *)(v407 + 21032)) >> 2))
          {
            goto LABEL_505;
          }
          v427 = *(unsigned int *)(v407 + 360);
          v428 = v611;
          if ((v427 & 0x80000000) == 0)
          {
            v429 = *(_QWORD *)(v407 + 368);
            v430 = (_DWORD *)(v429 + 4488 * (v427 & 0xFFFFFFFFCFFFFFFFLL));
            v428 = v611;
            v431 = (*(_DWORD *)v642 & 0xFFFFFFF8) - *v430;
            if ((signed int)(*(_DWORD *)v642 & 0xFFFFFFF8) >= *v430)
            {
              v432 = v430[1];
              v428 = v611;
              v433 = __OFSUB__(*(_DWORD *)&v642[4] & 0xFFFFFFF8, v432);
              v434 = (*(_DWORD *)&v642[4] & 0xFFFFFFF8) - v432;
              if (v434 < 0 == v433)
              {
                v435 = v430[2];
                v428 = v611;
                v433 = __OFSUB__(*(_DWORD *)&v642[8] & 0xFFFFFFF8, v435);
                v436 = (*(_DWORD *)&v642[8] & 0xFFFFFFF8) - v435;
                if (v436 < 0 == v433)
                {
                  v437 = v430[3];
                  v428 = v611;
                  if ((int)(*(_DWORD *)v642 & 0xFFFFFFF8) < v437)
                  {
                    v428 = v611;
                    if ((signed int)(*(_DWORD *)&v642[4] & 0xFFFFFFF8) < v430[4])
                    {
                      v428 = v611;
                      if ((signed int)(*(_DWORD *)&v642[8] & 0xFFFFFFF8) < v430[5])
                      {
                        for (j = v437 - *v430; ; v436 -= j & v436)
                        {
                          j >>= 1;
                          v427 = *(unsigned int *)(v429
                                                 + 4488 * (v427 & 0xCFFFFFFF)
                                                 + 4
                                                 * ((4 * ((j & v431) != 0)) | (2 * ((j & v434) != 0)) | ((j & v436) != 0))
                                                 + 24);
                          if (j == *(_DWORD *)(v407 + 320) || v427 >> 30)
                            break;
                          v431 -= j & v431;
                          v434 -= j & v434;
                        }
                        v428 = v611;
                        if ((v427 & 0x80000000) == 0)
                        {
                          v439 = *(_QWORD *)(v407 + 21104);
                          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v407 + 21112) - v439) >> 4) <= v427)
                          {
                            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 1042, (uint64_t)"info_index < allocated_voxel_block_infos_.size()", 48, (uint64_t)"Invalid map index", 17, (void (*)(void **))sub_22457406C))
                            {
                              goto LABEL_800;
                            }
                            v439 = *(_QWORD *)(v407 + 21104);
                          }
                          v428 = v439 + 48 * v427;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((*(_DWORD *)(v428 + 40) & 0x80000000) != 0
            && (v413.i64[0] = *(_QWORD *)a2,
                v413.i32[2] = *(_DWORD *)(a2 + 8),
                sub_223AF27E4((uint64_t)oslog, v617, (int *)v642, v407, v413),
                !oslog[12]))
          {
            v632 = 0;
          }
          else
          {
LABEL_505:
            oslog[0] = 0;
            oslog[16] = 0;
            v632 = sub_223B1CF00(v617, (uint64_t)oslog, __s);
          }
          v636 = 0;
          v440 = *((_DWORD *)v616 + 46);
          if (v423 < v440)
            v440 = v423;
          *((_DWORD *)v616 + 46) = v440;
          v441 = *((_DWORD *)v616 + 49);
          if (v441 <= v423)
            v441 = v423;
          *((_DWORD *)v616 + 49) = v441;
          v410 = (v410 + 1);
          v616[22] = vmin_s32(*(int32x2_t *)v628.f32, (int32x2_t)v616[22]);
          *(int32x2_t *)((char *)v616 + 188) = vmax_s32(*(int32x2_t *)((char *)v616 + 188), *(int32x2_t *)v628.f32);
        }
        if (!v632)
          goto LABEL_479;
        v442.i32[3] = v628.i32[3];
        v443 = (16 * v628.i32[0]) & 0x20 | ((((unsigned __int32)v628.i32[0] >> 2) & 1) << 8);
        v624 = (4 * v423) & 8;
        v444 = (v423 & 1 | (4 * (v628.i8[0] & 1)) & 0x2F | (2 * (v628.i8[4] & 1)) & 0x2F | v443 | ((((unsigned __int32)v628.i32[1] >> 2) & 1) << 7) | (16 * (((unsigned __int32)v628.i32[1] >> 1) & 1)) & 0xFFFFFFBF | (((v423 >> 2) & 1) << 6))
             + v624;
        *(float32x2_t *)v442.f32 = vcvt_f32_s32(*(int32x2_t *)v628.f32);
        v442.f32[2] = (float)v423;
        v445.i64[0] = 0x3F0000003F000000;
        v445.i64[1] = 0x3F0000003F000000;
        v446 = (int8x16_t)vmulq_n_f32(vaddq_f32(v442, v445), *(float *)(v407 + 312));
        *(float32x2_t *)v447.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v655.i8, *(float *)v446.i32), *(float32x2_t *)v656.i8, *(float32x2_t *)v446.i8, 1), *(float32x2_t *)v657.i8, (float32x4_t)v446, 2);
        *(float32x2_t *)&v447.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v655, v655, 8uLL), *(float32x2_t *)v446.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v656, v656, 8uLL), *(float32x2_t *)v446.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v446, v446, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v657, v657, 8uLL));
        v448 = vaddq_f32(v658, v447);
        v449 = (int)(float)((float)(v425 * 255.0) / (float)v640);
        if (v449 >= 255)
          v449 = 255;
        if (v449 <= 1)
          v449 = 1;
        v450 = *(float *)(v621 + 1648);
        v451 = *(float *)(v620 + 4 * v449) - v450;
        v452 = fmaxf(v448.f32[2], 0.1);
        v453 = (float)(vmla_lane_f32(vmul_f32(*(float32x2_t *)v448.f32, *(float32x2_t *)v448.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v448.f32, 1), *(float32x2_t *)v448.f32, 1).f32[0]/ v452)* -0.6;
        v454 = (float)((float)(v227 / v452) * (float)(v412 * (float)(v227 / v452)));
        v455 = fminf((float)(v228 - *(float *)(v621 + 1652)) + (float)(*(float *)(v621 + 636) * 0.5), 0.0)
             - vmuls_lane_f32((float)(v228 * -0.0722) + 0.2272, v448, 2);
        if (v454 <= 1)
          v454 = 1;
        if (v454 >= 0xFF)
          v454 = 255;
        v456 = 255 * v640 / v454;
        if (v456 >= 0xFF)
          v456 = 255;
        v457 = (int)(float)(expf((float)((float)(v455+ (float)(v451 + (float)((float)(*(float *)(v620 + 4 * v456) - v450) * 0.5)))+ v453)* 0.1)* 255.0);
        if (*v660 < v457)
          v457 = *v660;
        if (*v659 <= v457)
          v459 = v457;
        else
          v459 = *v659;
        if (v444 >= 0x200)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 839, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C);
          v629 = v409;
          v460 = v410;
          v461 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v461 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v462 = qword_255795648;
            v463 = qword_255795650;
            while (v462 != v463)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v462)(*(_QWORD *)(v462 + 8), "index < voxel_block.size()", 26, "Invalid grid index", 18);
              v462 += 16;
            }
          }
          v464 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v464 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v407 = a1;
          v410 = v460;
          v409 = v629;
          if (!byte_255795670)
            goto LABEL_800;
          qword_255795660(*(_QWORD *)algn_255795668, "index < voxel_block.size()", 26, "Invalid grid index", 18);
        }
        v465 = (unsigned __int8 *)(v632 + 40 * v444);
        v466 = *((unsigned __int16 *)v625 + 304);
        if (*((unsigned __int16 *)v465 + 4) == v466)
          v467 = 0;
        else
          v467 = -1;
        v468 = *v465;
        if (*((unsigned __int16 *)v465 + 9) == v466)
          v467 = 1;
        v469 = v465[10];
        if (*((unsigned __int16 *)v465 + 14) == v466)
          v470 = 2;
        else
          v470 = v467;
        v471 = v465[20];
        if (*((unsigned __int16 *)v465 + 19) == v466)
          v472 = 3;
        else
          v472 = v470;
        v473 = v465[30];
        if (v472)
        {
          if (v472 == 255)
          {
            v474 = v459;
            if (v468 >= v459)
            {
              v475 = -1;
            }
            else
            {
              v474 = *v465;
              v475 = 0;
            }
            if (v469 >= v474)
            {
              v476 = v475;
            }
            else
            {
              v474 = v465[10];
              v476 = 1;
            }
            if (v471 >= v474)
            {
              v477 = v476;
            }
            else
            {
              v474 = v465[20];
              v477 = 2;
            }
            v472 = v473 >= v474 ? v477 : 3;
            if (v472 == -1)
              goto LABEL_479;
          }
          if (v468 < v459 && (_BYTE)v472)
          {
            v478 = &v465[10 * v472];
            v479 = *(_WORD *)v465;
            v712.i8[2] = v465[2];
            v712.i16[0] = v479;
            v480 = *(_WORD *)(v465 + 3);
            v712.i8[5] = v465[5];
            *(__int16 *)((char *)&v712.i16[1] + 1) = v480;
            v481 = *(_DWORD *)(v465 + 6);
            *(_WORD *)v465 = *(_WORD *)v478;
            v465[2] = v478[2];
            *(_WORD *)(v465 + 3) = *(_WORD *)(v478 + 3);
            v465[5] = v478[5];
            *(_DWORD *)(v465 + 6) = *(_DWORD *)(v478 + 6);
            v482 = v712.i16[0];
            v478[2] = v712.u8[2];
            *(_WORD *)v478 = v482;
            LOBYTE(v482) = v712.i8[5];
            *(_WORD *)(v478 + 3) = *(__int16 *)((char *)&v712.i16[1] + 1);
            v478[5] = v482;
            *(_DWORD *)(v478 + 6) = v481;
          }
          else if ((_BYTE)v472)
          {
            goto LABEL_579;
          }
        }
        else if (v468 > v459)
        {
          v483 = v459;
          v484 = v469 > v459;
          if (v469 > v459)
            v483 = v465[10];
          if (v471 > v483)
          {
            v483 = v465[20];
            v484 = 2;
          }
          if (v473 <= v483)
            v472 = v484;
          else
            v472 = 3;
          if (v472)
          {
            v485 = &v465[10 * v472];
            v486 = *(_WORD *)v465;
            v712.i8[2] = v465[2];
            v712.i16[0] = v486;
            v487 = *(_WORD *)(v465 + 3);
            v712.i8[5] = v465[5];
            *(__int16 *)((char *)&v712.i16[1] + 1) = v487;
            v488 = *(_DWORD *)(v465 + 6);
            *(_WORD *)v465 = *(_WORD *)v485;
            v465[2] = v485[2];
            *(_WORD *)(v465 + 3) = *(_WORD *)(v485 + 3);
            v465[5] = v485[5];
            *(_DWORD *)(v465 + 6) = *(_DWORD *)(v485 + 6);
            v489 = v712.i16[0];
            v485[2] = v712.u8[2];
            *(_WORD *)v485 = v489;
            LOBYTE(v489) = v712.i8[5];
            *(_WORD *)(v485 + 3) = *(__int16 *)((char *)&v712.i16[1] + 1);
            v485[5] = v489;
            *(_DWORD *)(v485 + 6) = v488;
          }
          goto LABEL_578;
        }
        LOBYTE(v472) = 0;
LABEL_578:
        v636 |= 1 << ((v443 | (32 * v628.i32[1]) & 0x80 | (8 * v628.i32[1]) & 0x10 | (16 * v423) & 0x40 | v624) >> 3);
LABEL_579:
        v490 = &v465[10 * v472];
        if (*v490 < v459)
        {
          ++v618;
          v415 = &v465[10 * v472];
          *((_WORD *)v415 + 4) = *((_WORD *)v625 + 304);
          v415[6] = 0;
          *v490 = v459;
          v415[1] = v627;
          v415[2] = v626;
          *(float32x2_t *)v413.f32 = vcvt_f32_s32(*(int32x2_t *)__s);
          v413.f32[2] = (float)*(int *)&__s[8];
          v458.i32[0] = *(_DWORD *)(v407 + 312);
          v416.i64[0] = 0x3F0000003F000000;
          v416.i64[1] = 0x3F0000003F000000;
          v417 = vaddq_f32(v413, v416);
          v418 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v458.f32, 0);
          v419 = vmulq_n_f32(v417, v458.f32[0]);
          v458.i64[0] = *(_QWORD *)(v424 + 52);
          v458.i32[2] = *(_DWORD *)(v424 + 60);
          v413 = vdivq_f32(vmulq_f32(vsubq_f32(v458, v419), v612), v418);
          *(int32x2_t *)v413.f32 = vcvt_s32_f32(*(float32x2_t *)v413.f32);
          v415[4] = v413.u8[4];
          v415[3] = v413.i8[0];
          v415[5] = (int)v413.f32[2];
          v415[7] = *((_BYTE *)v625 + 216);
        }
        else if (*(unsigned __int16 *)&v465[10 * v472 + 8] != *((unsigned __int16 *)v625 + 304))
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 1884, (uint64_t)"obs.keyframe_index == kf_info.index", 35, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
          v491 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v491 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v492 = qword_255795648;
            for (k = qword_255795650; v492 != k; v492 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v492)(*(_QWORD *)(v492 + 8), "obs.keyframe_index == kf_info.index", 35, &unk_2245A1559, 0);
          }
          v494 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v494 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            goto LABEL_800;
          qword_255795660(*(_QWORD *)algn_255795668, "obs.keyframe_index == kf_info.index", 35, &unk_2245A1559, 0);
        }
LABEL_479:
        v409 += v640;
        ++v414;
      }
      while (v414 != v623);
    }
    v411 = v610 + 1;
    if (v610 + 1 != v609)
      continue;
    break;
  }
  v495 = a3;
  v496 = (_QWORD *)(a1 + 64);
  if (v636)
    sub_223B1D134((char *)&__dst, v636, v614, v613);
  v497 = v618;
LABEL_603:
  kdebug_trace();
  oslog[23] = 20;
  strcpy(oslog, "IntegrateDepthPoints");
  v642[23] = 17;
  strcpy(v642, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)oslog, (uint64_t *)v642, (uint64_t)v685);
  if ((v642[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v642);
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_605;
LABEL_612:
    operator delete(*(void **)oslog);
    goto LABEL_605;
  }
  if ((oslog[23] & 0x80000000) != 0)
    goto LABEL_612;
LABEL_605:
  sub_223AF0EC4(&v650);
  v498 = v410;
  if (**((int **)v650 + 7) > 3)
    goto LABEL_695;
  v499 = *((unsigned __int8 *)v650 + 72);
  v500 = sub_22322F254((uint64_t)v650, "OSLogSurrogateAppender", 1, 0);
  v501 = v500;
  if (!v499 && !v500)
    goto LABEL_695;
  v637 = v499;
  v630 = v409;
  *(_QWORD *)v642 = &v650;
  *(std::chrono::steady_clock::time_point *)&v642[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v642[16] = std::chrono::system_clock::now();
  LODWORD(v643) = 3;
  *(_QWORD *)&v644 = "unknown file";
  DWORD2(v644) = 1948;
  *((_QWORD *)&v645 + 1) = 0;
  v646 = 0;
  *(_QWORD *)&v645 = "unknown function";
  v502 = **(_QWORD **)v642;
  v503 = (const char *)(**(_QWORD **)v642 + 16);
  v633 = v503;
  if (*(char *)(**(_QWORD **)v642 + 39) < 0)
  {
    v503 = *(const char **)(v502 + 16);
    v504 = *(_QWORD *)(v502 + 24);
    v619 = v497;
    v506 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v506 & 1) == 0)
    {
LABEL_812:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)oslog);
        sub_223199C58("com.apple.cv3d", (unint64_t)oslog, byte_255788F40);
        if (oslog[24] && (oslog[23] & 0x80000000) != 0)
          operator delete(*(void **)oslog);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v504 = *(unsigned __int8 *)(**(_QWORD **)v642 + 39);
    v619 = v497;
    v505 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v505 & 1) == 0)
      goto LABEL_812;
  }
  if (byte_255788F40[23] >= 0)
    v507 = byte_255788F40;
  else
    v507 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v508 = byte_255788F40[23];
  else
    v508 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)oslog = os_log_create(v507, v503);
  v509 = &oslog[8];
  if (v508 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v508 >= 0x17)
  {
    v510 = (v508 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v508 | 7) != 0x17)
      v510 = v508 | 7;
    v511 = v510 + 1;
    v509 = operator new(v510 + 1);
    *(_QWORD *)&oslog[24] = v511 | 0x8000000000000000;
    *(_QWORD *)&oslog[8] = v509;
    *(_QWORD *)&oslog[16] = v508;
    goto LABEL_627;
  }
  oslog[31] = v508;
  if (v508)
LABEL_627:
    memmove(v509, v507, v508);
  v509[v508] = 0;
  oslog[32] = 1;
  v512 = &oslog[40];
  if (v504 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v504 >= 0x17)
  {
    v515 = (v504 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v504 | 7) != 0x17)
      v515 = v504 | 7;
    v516 = v515 + 1;
    v512 = operator new(v515 + 1);
    *(_QWORD *)&oslog[56] = v516 | 0x8000000000000000;
    *(_QWORD *)&oslog[40] = v512;
    *(_QWORD *)&oslog[48] = v504;
    v495 = a3;
  }
  else
  {
    oslog[63] = v504;
    v495 = a3;
    if (!v504)
    {
      oslog[40] = 0;
      oslog[64] = 1;
      v513 = *(NSObject **)oslog;
      if ((oslog[63] & 0x80000000) == 0)
        goto LABEL_632;
LABEL_638:
      operator delete(*(void **)&oslog[40]);
      v514 = v619;
      if (oslog[32])
        goto LABEL_639;
      goto LABEL_641;
    }
  }
  memmove(v512, v503, v504);
  v512[v504] = 0;
  oslog[64] = 1;
  v513 = *(NSObject **)oslog;
  if ((oslog[63] & 0x80000000) != 0)
    goto LABEL_638;
LABEL_632:
  v514 = v619;
  if (oslog[32])
  {
LABEL_639:
    if ((oslog[31] & 0x80000000) != 0)
      operator delete(*(void **)&oslog[8]);
  }
LABEL_641:
  if (*(_QWORD *)oslog)
    os_release(*(void **)oslog);
  if (v501 && *(_QWORD *)(v501 + 24))
  {
    v517 = _os_log_pack_size();
    v518 = (std::__shared_weak_count_vtbl *)operator new(v517, (std::align_val_t)8uLL);
    v519 = (std::__shared_weak_count *)operator new();
    v520 = v519;
    v519->__shared_owners_ = 0;
    v521 = (unint64_t *)&v519->__shared_owners_;
    v519->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v519->__shared_weak_owners_ = 0;
    v519[1].__vftable = v518;
    *(_QWORD *)oslog = v518;
    *(_QWORD *)&oslog[8] = v518;
    *(_QWORD *)&oslog[16] = v519;
    do
      v522 = __ldxr(v521);
    while (__stxr(v522 + 1, v521));
    memset(&oslog[24], 0, 24);
    do
      v523 = __ldaxr(v521);
    while (__stlxr(v523 - 1, v521));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
      std::__shared_weak_count::__release_weak(v520);
    }
    v524 = *(_QWORD *)oslog;
    v525 = _os_log_pack_fill();
    *(_DWORD *)v525 = 67109888;
    *(_DWORD *)(v525 + 4) = v619;
    *(_WORD *)(v525 + 8) = 1024;
    *(_DWORD *)(v525 + 10) = v498;
    *(_WORD *)(v525 + 14) = 1024;
    *(_DWORD *)(v525 + 16) = v630;
    *(_WORD *)(v525 + 20) = 1024;
    *(_DWORD *)(v525 + 22) = 0;
    v526 = operator new();
    v527 = *(unsigned __int8 *)(v502 + 39);
    v528 = v633;
    if ((v527 & 0x80u) != 0)
    {
      v528 = *(const char **)(v502 + 16);
      v527 = *(_QWORD *)(v502 + 24);
    }
    *(_QWORD *)v526 = v524;
    *(_OWORD *)(v526 + 8) = *(_OWORD *)&oslog[8];
    *(_QWORD *)&oslog[8] = 0;
    *(_QWORD *)&oslog[16] = 0;
    *(_OWORD *)(v526 + 24) = *(_OWORD *)&oslog[24];
    *(_QWORD *)&oslog[24] = 0;
    *(_QWORD *)&oslog[32] = 0;
    *(_QWORD *)(v526 + 40) = v528;
    *(_QWORD *)(v526 + 48) = v527;
    *(_BYTE *)(v526 + 56) = 1;
    v712.i64[0] = 0;
    *(_QWORD *)__s = v526;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v501 + 24) + 40))(*(_QWORD *)(v501 + 24), __s);
    v529 = *(_QWORD *)__s;
    *(_QWORD *)__s = 0;
    v495 = a3;
    v496 = (_QWORD *)(a1 + 64);
    v514 = v619;
    v530 = v637;
    if (v529)
    {
      v531 = *(std::__shared_weak_count **)(v529 + 32);
      if (v531)
      {
        v532 = (unint64_t *)&v531->__shared_owners_;
        do
          v533 = __ldaxr(v532);
        while (__stlxr(v533 - 1, v532));
        if (!v533)
        {
          ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
          std::__shared_weak_count::__release_weak(v531);
        }
      }
      v534 = *(std::__shared_weak_count **)(v529 + 16);
      if (v534)
      {
        v535 = (unint64_t *)&v534->__shared_owners_;
        do
          v536 = __ldaxr(v535);
        while (__stlxr(v536 - 1, v535));
        if (!v536)
        {
          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
          std::__shared_weak_count::__release_weak(v534);
        }
      }
      MEMORY[0x227684CE8](v529, 0x10F0C40B62ED6C6);
      v537 = v712.i64[0];
      v712.i64[0] = 0;
      if (v537)
      {
        v538 = *(std::__shared_weak_count **)(v537 + 32);
        if (v538)
        {
          v539 = (unint64_t *)&v538->__shared_owners_;
          do
            v540 = __ldaxr(v539);
          while (__stlxr(v540 - 1, v539));
          if (!v540)
          {
            ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
            std::__shared_weak_count::__release_weak(v538);
          }
        }
        v541 = *(std::__shared_weak_count **)(v537 + 16);
        if (v541)
        {
          v542 = (unint64_t *)&v541->__shared_owners_;
          do
            v543 = __ldaxr(v542);
          while (__stlxr(v543 - 1, v542));
          if (!v543)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
        }
        MEMORY[0x227684CE8](v537, 0x10F0C40B62ED6C6);
      }
    }
    v544 = *(std::__shared_weak_count **)&oslog[32];
    if (*(_QWORD *)&oslog[32])
    {
      v545 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
      do
        v546 = __ldaxr(v545);
      while (__stlxr(v546 - 1, v545));
      if (!v546)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
      }
    }
    v547 = *(std::__shared_weak_count **)&oslog[16];
    if (*(_QWORD *)&oslog[16])
    {
      v548 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
      do
        v549 = __ldaxr(v548);
      while (__stlxr(v549 - 1, v548));
      if (!v549)
      {
        ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
        std::__shared_weak_count::__release_weak(v547);
      }
    }
  }
  else
  {
    os_log_type_enabled(v513, OS_LOG_TYPE_INFO);
    *(_DWORD *)oslog = 67109888;
    *(_DWORD *)&oslog[4] = v514;
    *(_WORD *)&oslog[8] = 1024;
    *(_DWORD *)&oslog[10] = v498;
    *(_WORD *)&oslog[14] = 1024;
    *(_DWORD *)&oslog[16] = v630;
    *(_WORD *)&oslog[20] = 1024;
    *(_DWORD *)&oslog[22] = 0;
    v550 = (void *)_os_log_send_and_compose_impl();
    v496 = (_QWORD *)(a1 + 64);
    v530 = v637;
    if (v550)
      free(v550);
  }
  if (v530)
  {
    sub_22322C138((uint64_t)v642, "Integrated %i occupied voxels into %i blocks (%i total contributing points, %i voxels visited multiple times)", v514, v498, v630, 0);
    sub_223182C08((uint64_t)v642);
  }
  sub_223182C08((uint64_t)v642);
  v551 = v646;
  if (v646)
  {
    v552 = (unint64_t *)&v646->__shared_owners_;
    do
      v553 = __ldaxr(v552);
    while (__stlxr(v553 - 1, v552));
    if (!v553)
    {
      ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
      std::__shared_weak_count::__release_weak(v551);
    }
  }
LABEL_695:
  sub_223B1D2F8();
  if (!sub_223340F28(v496, v495)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 170, (uint64_t)"KeyframeInfoExists(uuid)", 24, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_803;
  }
  v554 = sub_22342DA5C(v496, v495);
  v555 = v554;
  if (!v554)
    sub_223198218("unordered_map::at: key not found");
  if (*((_BYTE *)v554 + 610)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 172, (uint64_t)"!integrated", 11, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_803:
    abort();
  }
  *((_BYTE *)v555 + 610) = 1;
  kdebug_trace();
  oslog[23] = 11;
  strcpy(oslog, "IntegrateKF");
  v642[23] = 17;
  strcpy(v642, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)oslog, (uint64_t *)v642, (uint64_t)v663);
  if ((v642[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v642);
    if ((oslog[23] & 0x80000000) != 0)
      goto LABEL_705;
LABEL_702:
    if (v747)
LABEL_706:
      sub_223937070(object);
  }
  else
  {
    if ((oslog[23] & 0x80000000) == 0)
      goto LABEL_702;
LABEL_705:
    operator delete(*(void **)oslog);
    if (v747)
      goto LABEL_706;
  }
}

void sub_223B029CC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x688]))
  {
    if (SLOBYTE(STACK[0x687]) < 0)
      operator delete((void *)STACK[0x670]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  sub_22319A054(&a51);
  sub_22319A054((uint64_t *)(v51 - 256));
  sub_223199DE8((uint64_t)&STACK[0x670]);
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02A74(_Unwind_Exception *a1)
{
  sub_223199DE8((uint64_t)&STACK[0x670]);
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02C38(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_223182DAC(&a51);
  if (!LOBYTE(STACK[0x888]))
    JUMPOUT(0x223B02F44);
  JUMPOUT(0x223B02F28);
}

void sub_223B02C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (LOBYTE(STACK[0x420]) && SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (STACK[0x400])
    os_release((void *)STACK[0x400]);
  sub_223182DAC((uint64_t)&a51);
  if (!LOBYTE(STACK[0x888]))
    JUMPOUT(0x223B02F44);
  JUMPOUT(0x223B02F28);
}

void sub_223B02CA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  sub_223B26124((uint64_t)&STACK[0x670]);
  _Unwind_Resume(a1);
}

void sub_223B02CC4(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02CD8(_Unwind_Exception *a1)
{
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02CEC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x690]) && SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (STACK[0x670])
    os_release((void *)STACK[0x670]);
  sub_223182DAC((uint64_t)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_223B02D30(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02D44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223B02D58(_Unwind_Exception *a1)
{
  sub_223B26124((uint64_t)&STACK[0x670]);
  _Unwind_Resume(a1);
}

void sub_223B02D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319EF60((uint64_t)&STACK[0x3B0]);
  sub_2231BD974((uint64_t)&STACK[0x378]);
  sub_22319F500((uint64_t)&STACK[0x2F0]);
  sub_2231CDC3C((uint64_t)&STACK[0x620]);
  sub_22319F500((uint64_t)&STACK[0x400]);
  sub_2231CDC3C(v1 - 256);
  sub_22392AA18((uint64_t)&STACK[0x228]);
  sub_2231874DC((uint64_t)&STACK[0x340]);
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02DBC()
{
  sub_22392AA18(&STACK[0x228]);
  sub_2231874DC(&STACK[0x340]);
  if (!LOBYTE(STACK[0x888]))
    JUMPOUT(0x223B02F44);
  JUMPOUT(0x223B02F28);
}

void sub_223B02DC4()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x223B02ED4);
}

void sub_223B02DD4()
{
  JUMPOUT(0x223B02ED4);
}

void sub_223B02DE0(_Unwind_Exception *a1)
{
  sub_223B26124((uint64_t)&STACK[0x670]);
  _Unwind_Resume(a1);
}

void sub_223B02DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
  {
    operator delete(__p);
    if ((SLOBYTE(STACK[0x417]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x417]) & 0x80000000) == 0)
  {
LABEL_3:
    if (!LOBYTE(STACK[0x888]))
LABEL_8:
      _Unwind_Resume(a1);
LABEL_7:
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x400]);
  if (!LOBYTE(STACK[0x888]))
    goto LABEL_8;
  goto LABEL_7;
}

void sub_223B02E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_22319F500(v51 - 256);
  sub_2231CDC3C((uint64_t)&STACK[0x2F0]);
  sub_22319F500((uint64_t)&STACK[0x400]);
  sub_2231CDC3C((uint64_t)&a51);
  sub_22319EF60((uint64_t)&STACK[0x378]);
  sub_2231BD974((uint64_t)&STACK[0x340]);
  sub_22319EF60((uint64_t)&STACK[0x228]);
  sub_2231BD974((uint64_t)&STACK[0x3B0]);
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02EB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223B02EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_223937214(&a51);
  JUMPOUT(0x223B02ECCLL);
}

void sub_223B02EE8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02EFC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02F0C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x888]))
  {
    sub_223937070(&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B02F1C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x888]))
    JUMPOUT(0x223B02F28);
  _Unwind_Resume(a1);
}

void sub_223B02F38(_Unwind_Exception *a1)
{
  if (!LOBYTE(STACK[0x888]))
    JUMPOUT(0x223B02F44);
  sub_223937070(&STACK[0x670]);
  _Unwind_Resume(a1);
}

void sub_223B02F4C(uint64_t a1, _QWORD *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int8x8_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  __int8 *v72;
  uint32x2_t v73;
  int8x8_t v74;
  int8x8_t v75;
  int8x8_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t **v83;
  uint64_t **v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  signed int v97;
  signed int v98;
  signed int v99;
  uint64_t v100;
  int *v101;
  int v102;
  signed int v103;
  signed int v104;
  int v105;
  BOOL v106;
  BOOL v107;
  signed int v108;
  signed int v109;
  signed int v110;
  _DWORD *v111;
  BOOL v112;
  BOOL v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  signed int v118;
  signed int v119;
  signed int v120;
  uint64_t v121;
  int *v122;
  int v123;
  signed int v124;
  signed int v125;
  int v126;
  BOOL v127;
  BOOL v128;
  signed int v129;
  signed int v130;
  signed int v131;
  _DWORD *v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t **v138;
  void **v139;
  int32x4_t *v140;
  float *v141;
  int32x4_t *v142;
  unsigned __int32 v143;
  unsigned __int32 v144;
  unsigned __int32 v145;
  unsigned __int32 v146;
  uint64_t *k;
  int32x2_t v148;
  uint64_t **v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  uint8x8_t v155;
  int32x4_t **v156;
  int32x4_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165;
  uint64_t v166;
  unint64_t v167;
  __int128 v168;
  int8x8_t v169;
  uint8x8_t v170;
  unint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  unint64_t v176;
  uint64_t v178;
  BOOL v179;
  float32x4_t v180;
  int32x2_t v181;
  int32x2_t v182;
  int32x2_t v183;
  signed int v184;
  int v185;
  int32x2_t v186;
  unsigned int v187;
  _QWORD *v188;
  int v189;
  float v190;
  float v191;
  int32x4_t **v192;
  void **v193;
  _BOOL8 v194;
  unint64_t v195;
  unint64_t v196;
  size_t prime;
  void *v198;
  void *v199;
  uint64_t v200;
  int32x4_t *v201;
  size_t v202;
  size_t v203;
  size_t v204;
  int32x4_t *m;
  size_t v206;
  uint64_t v207;
  unint64_t v208;
  uint8x8_t v209;
  uint64_t v210;
  int v211;
  int v212;
  int i;
  int v214;
  int v215;
  int j;
  int32x4_t *v217;
  void *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  size_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t n;
  char *v233;
  char *v234;
  _DWORD *v235;
  uint64_t v236;
  char *v237;
  _QWORD *v238;
  _QWORD *v239;
  void *v240;
  _QWORD *v241;
  _QWORD *v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  size_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 v251;
  const char *v252;
  size_t v253;
  uint64_t *v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  NSObject *v262;
  int v263;
  size_t v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int8x8_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  __int32 v297;
  void *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v303;
  void **v304;
  uint64_t v305;
  int32x4_t **v306;
  uint64_t v307;
  float *v308;
  int *v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  const char *__src;
  void *__srca[2];
  const char *__srcb;
  __int8 __src_4;
  uint64_t v322;
  _QWORD v323[2];
  char v324;
  uint64_t *v325;
  unsigned int v326;
  uint64_t v327;
  int32x4_t object[3];
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  __int128 v336;
  __int128 v337;
  int v338;
  int32x2_t v339;
  _BYTE v340[24];
  int v341;
  const char *v342;
  int v343;
  const char *v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  uint64_t v347;

  v347 = *MEMORY[0x24BDAC8D0];
  sub_223AF0EC4(&v327);
  v310 = a1;
  if (**(int **)(v327 + 56) > 3)
    goto LABEL_90;
  v3 = *(unsigned __int8 *)(v327 + 72);
  v4 = sub_22322F254(v327, "OSLogSurrogateAppender", 1, 0);
  v5 = v4;
  v6 = !v3 && v4 == 0;
  if (v6)
    goto LABEL_90;
  *(_QWORD *)v340 = &v327;
  *(std::chrono::steady_clock::time_point *)&v340[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v340[16] = std::chrono::system_clock::now();
  v341 = 3;
  v342 = "unknown file";
  v343 = 2218;
  v345 = 0;
  v346 = 0;
  v344 = "unknown function";
  v7 = **(_QWORD **)v340;
  if (*(char *)(**(_QWORD **)v340 + 39) < 0)
  {
    v9 = *(const char **)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
  }
  else
  {
    v8 = *(unsigned __int8 *)(**(_QWORD **)v340 + 39);
    v9 = (const char *)(v7 + 16);
  }
  v10 = *(_QWORD *)(a1 + 20992);
  v11 = *(_QWORD *)(a1 + 20984);
  v313 = v7 + 16;
  v315 = a2[2];
  v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if (object[1].i8[8] && object[1].i8[7] < 0)
      operator delete((void *)object[0].i64[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40;
  else
    v13 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40[23];
  else
    v14 = *(_QWORD *)&byte_255788F40[8];
  __src = v9;
  object[0].i64[0] = (uint64_t)os_log_create(v13, v9);
  v15 = &object[0].i64[1];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v311 = v11;
    v16 = v7;
    v17 = v3;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = (uint64_t *)operator new(v18 + 1);
    object[1].i64[0] = v14;
    object[1].i64[1] = v19 | 0x8000000000000000;
    object[0].i64[1] = (uint64_t)v15;
    v3 = v17;
    v7 = v16;
    v11 = v311;
    goto LABEL_23;
  }
  object[1].i8[15] = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  *((_BYTE *)v15 + v14) = 0;
  object[2].i8[0] = 1;
  v20 = &object[2].i64[1];
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v22 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v22 = v8 | 7;
    v23 = v22 + 1;
    v20 = (uint64_t *)operator new(v22 + 1);
    v329.i64[0] = v8;
    v329.i64[1] = v23 | 0x8000000000000000;
    object[2].i64[1] = (uint64_t)v20;
  }
  else
  {
    v329.i8[15] = v8;
    if (!v8)
    {
      object[2].i8[8] = 0;
      v330.i8[0] = 1;
      v21 = object[0].i64[0];
      if ((v329.i8[15] & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, __src, v8);
  *((_BYTE *)v20 + v8) = 0;
  v330.i8[0] = 1;
  v21 = object[0].i64[0];
  if ((v329.i8[15] & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[2].i8[0])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete((void *)object[2].i64[1]);
  if (!object[2].i8[0])
    goto LABEL_37;
LABEL_35:
  if (object[1].i8[15] < 0)
    operator delete((void *)object[0].i64[1]);
LABEL_37:
  if (object[0].i64[0])
    os_release((void *)object[0].i64[0]);
  v24 = -858993459 * ((unint64_t)(v10 - v11) >> 12);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    object[0].i64[0] = (uint64_t)v26;
    object[0].i64[1] = (uint64_t)v26;
    object[1].i64[0] = (uint64_t)v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    memset(&object[1].u64[1], 0, 24);
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = object[0].i64[0];
    v33 = _os_log_pack_fill();
    *(_DWORD *)v33 = 134218240;
    *(_QWORD *)(v33 + 4) = v315;
    *(_WORD *)(v33 + 12) = 1024;
    *(_DWORD *)(v33 + 14) = v24;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v7 + 39);
    v36 = v313;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(_QWORD *)(v7 + 16);
      v35 = *(_QWORD *)(v7 + 24);
    }
    *(_QWORD *)v34 = v32;
    *(int32x4_t *)(v34 + 8) = *(int32x4_t *)((char *)object + 8);
    object[0].i64[1] = 0;
    object[1].i64[0] = 0;
    *(int32x4_t *)(v34 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
    object[1].i64[1] = 0;
    object[2].i64[0] = 0;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v325 = 0;
    v323[0] = v34;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v323);
    v37 = v323[0];
    v323[0] = 0;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
      v44 = (int8x8_t)v325;
      v325 = 0;
      if (v44)
      {
        v45 = *(std::__shared_weak_count **)(*(_QWORD *)&v44 + 32);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = *(std::__shared_weak_count **)(*(_QWORD *)&v44 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x227684CE8](*(_QWORD *)&v44, 0x10F0C40B62ED6C6);
      }
    }
    v51 = (std::__shared_weak_count *)object[2].i64[0];
    if (object[2].i64[0])
    {
      v52 = (unint64_t *)(object[2].i64[0] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)object[1].i64[0];
    if (object[1].i64[0])
    {
      v55 = (unint64_t *)(object[1].i64[0] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    object[0].i32[0] = 134218240;
    *(uint64_t *)((char *)object[0].i64 + 4) = v315;
    object[0].i16[6] = 1024;
    *(__int32 *)((char *)&object[0].i32[3] + 2) = -858993459 * ((unint64_t)(v10 - v11) >> 12);
    v57 = (void *)_os_log_send_and_compose_impl();
    if (v57)
      free(v57);
  }
  if (v3)
  {
    sub_22322C138((uint64_t)v340, "Synthesizing results for %lu blocks (%i blocks allocated)", a2[2], -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 20992) - *(_QWORD *)(a1 + 20984)) >> 12));
    sub_223182C08((uint64_t)v340);
  }
  sub_223182C08((uint64_t)v340);
  v58 = v346;
  if (v346)
  {
    v59 = (unint64_t *)&v346->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      if (!a2[2])
        return;
      goto LABEL_91;
    }
  }
LABEL_90:
  if (!a2[2])
    return;
LABEL_91:
  if (!*(_BYTE *)(a1 + 21344)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2226, (uint64_t)"height_axis_dir_computed_", 25, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v61 = *(int *)(a1 + 21348);
  if (v61 > 4)
    v62 = 2;
  else
    v62 = qword_224666C80[v61];
  v323[0] = 0;
  v323[1] = 0;
  v324 = 0;
  v323[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v324 = 1;
  kdebug_trace();
  v63 = (_QWORD *)*a2;
  v308 = (float *)(a1 + 21344);
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v64 = a1 + 184;
    v303 = a1 + 500;
    v316 = (uint64_t *)(a1 + 21592);
    v306 = (int32x4_t **)(a1 + 21368);
    v307 = a1 + 184;
    v304 = (void **)(a1 + 21352);
    v305 = a1 + 21416;
    do
    {
      kdebug_trace();
      object[0].i8[0] = 0;
      object[1].i8[0] = 0;
      v309 = (int *)v63 + 7;
      v65 = sub_223950A98(v64, (__int128 *)object[0].i8, (_DWORD *)v63 + 7);
      v66 = v303;
      if ((v65 & 0x80000000) == 0)
      {
        v67 = v65;
        v68 = *(_QWORD *)(a1 + 20984);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 20992) - v68) >> 12) <= v65)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v68 = *(_QWORD *)(a1 + 20984);
        }
        v66 = v68 + 20480 * v67;
      }
      v312 = 0uLL;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v336 = 0u;
      v337 = 0u;
      v334 = 0u;
      v335 = 0u;
      v332 = 0u;
      v333 = 0u;
      v331 = 0u;
      v329 = 0u;
      v330 = 0u;
      memset(object, 0, sizeof(object));
      v339 = 0;
      v338 = 1065353216;
      do
      {
        if (*(_BYTE *)v66)
        {
          v73 = (uint32x2_t)vdup_n_s32(v71);
          v74 = (int8x8_t)vshl_u32(v73, (uint32x2_t)0xFFFFFFFDFFFFFFFALL);
          v75 = (int8x8_t)vshl_u32(v73, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL);
          v76 = (int8x8_t)vshl_u32(v73, (uint32x2_t)-2);
          __src_4 = v74.i8[4];
          *(int8x8_t *)v340 = vorr_s8(vorr_s8(vand_s8(v75, (int8x8_t)0x400000002), vand_s8(v74, (int8x8_t)0x200000004)), vand_s8(v76, (int8x8_t)0x100000001));
          *(_DWORD *)&v340[8] = v76.i8[0] & 2 | v71 & 1 | v75.i8[0] & 4;
          v77 = *(_DWORD *)&v340[4 * v62];
          if (v77 >= 8)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2257, (uint64_t)"rel_pos_height < current_block_stats.voxel_heights.size()", 57, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
            v78 = v62;
            v79 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v80 = qword_255795648;
              v81 = qword_255795650;
              while (v80 != v81)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v80)(*(_QWORD *)(v80 + 8), "rel_pos_height < current_block_stats.voxel_heights.size()", 57, &unk_2245A1559, 0);
                v80 += 16;
              }
            }
            v82 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            v62 = v78;
            qword_255795660(*(_QWORD *)algn_255795668, "rel_pos_height < current_block_stats.voxel_heights.size()", 57, &unk_2245A1559, 0);
            a1 = v310;
          }
          if (*(_BYTE *)(v66 + 6))
          {
            if (*(char *)(v66 + 6) >= 1)
            {
              LOWORD(v327) = *(_WORD *)(v66 + 8);
              v325 = &v327;
              v83 = sub_223AEF740((uint64_t)&v336, (unsigned __int16 *)&v327, (uint64_t)&unk_2245BA939, (_WORD **)&v325);
              ++v70;
              *((_QWORD *)&v312 + 1) |= 1 << __src_4;
              ++*((_DWORD *)v83 + 6);
              if (*(_BYTE *)(v66 + 7) != 2)
              {
                v72 = &object[0].i8[20 * v77 + 12];
                goto LABEL_106;
              }
            }
          }
          else
          {
            LOWORD(v327) = *(_WORD *)(v66 + 8);
            v325 = &v327;
            v84 = sub_223AEF740((uint64_t)&v336, (unsigned __int16 *)&v327, (uint64_t)&unk_2245BA939, (_WORD **)&v325);
            ++v69;
            *(_QWORD *)&v312 = (1 << __src_4) | v312;
            ++*((_DWORD *)v84 + 5);
            if (*(_BYTE *)(v66 + 7) != 2)
            {
              ++object[0].i32[5 * v77 + 2];
              v85 = *(unsigned __int8 *)(v66 + 1);
              if (v85 == 1)
              {
                v72 = &object[0].i8[20 * v77];
LABEL_106:
                ++*(_DWORD *)v72;
                goto LABEL_107;
              }
              if (v85 == 3)
              {
                v72 = &object[0].i8[20 * v77 + 4];
                goto LABEL_106;
              }
            }
          }
        }
LABEL_107:
        v66 += 40;
        ++v71;
      }
      while (v71 != 512);
      v339 = (int32x2_t)__PAIR64__(v70, v69);
      kdebug_trace();
      v86 = v307;
      kdebug_trace();
      v340[0] = 0;
      v340[16] = 0;
      v87 = sub_223950A98(v307, (__int128 *)v340, v309);
      if ((v87 & 0x80000000) != 0)
      {
        v90 = 0;
        goto LABEL_137;
      }
      v88 = v87;
      v89 = *(_QWORD *)(a1 + 21008);
      if (v87 < (unint64_t)((*(_QWORD *)(a1 + 21016) - v89) >> 4))
        goto LABEL_135;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 223, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_491;
      }
      v89 = *(_QWORD *)(a1 + 21008);
LABEL_135:
      v90 = *(_QWORD *)(v89 + 16 * v88);
LABEL_137:
      v340[0] = 0;
      v340[16] = 0;
      v91 = sub_223950A98(v307, (__int128 *)v340, v309);
      if ((v91 & 0x80000000) != 0)
      {
        v94 = 0;
        goto LABEL_143;
      }
      v92 = v91;
      v93 = *(_QWORD *)(a1 + 21008);
      if (v91 < (unint64_t)((*(_QWORD *)(a1 + 21016) - v93) >> 4))
        goto LABEL_141;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 241, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
      {
LABEL_491:
        abort();
      }
      v93 = *(_QWORD *)(a1 + 21008);
LABEL_141:
      v94 = *(_QWORD *)(v93 + 16 * v92 + 8);
LABEL_143:
      v95 = (uint8x8_t)vcnt_s8((int8x8_t)((v312 | *((_QWORD *)&v312 + 1)) & ~(v94 | v90)));
      v95.i16[0] = vaddlv_u8(v95);
      *((_DWORD *)v308 + 404) += 8 * v95.i32[0];
      if (v312 == 0 && (v340[0] = 0, v340[16] = 0, !sub_223AF25CC(v307, (__int128 *)v340, v309)))
      {
        v138 = (uint64_t **)v337;
        if ((_QWORD)v337)
          goto LABEL_233;
      }
      else
      {
        v96 = *(unsigned int *)(a1 + 360);
        if ((v96 & 0x80000000) != 0)
          goto LABEL_160;
        v97 = *((_DWORD *)v63 + 7) & 0xFFFFFFF8;
        v98 = v63[4] & 0xFFFFFFF8;
        v99 = *((_DWORD *)v63 + 9) & 0xFFFFFFF8;
        v100 = *(_QWORD *)(a1 + 368);
        v101 = (int *)(v100 + 4488 * (v96 & 0xFFFFFFFFCFFFFFFFLL));
        v102 = *v101;
        v103 = v101[1];
        v104 = v101[2];
        v105 = v97 - *v101;
        v106 = v97 < *v101 || v98 < v103;
        v107 = v106 || v99 < v104;
        if (v107
          || ((v108 = v101[3], v111 = v101 + 4, v110 = v101[4], v109 = v111[1], v97 < v108)
            ? (v112 = v98 < v110)
            : (v112 = 0),
              v112 ? (v113 = v99 < v109) : (v113 = 0),
              !v113))
        {
LABEL_160:
          LODWORD(v96) = 0x80000000;
        }
        else
        {
          v211 = v98 - v103;
          v212 = v99 - v104;
          for (i = v108 - v102; ; v212 -= i & v212)
          {
            i >>= 1;
            LODWORD(v96) = *(_DWORD *)(v100
                                     + 4488 * (v96 & 0xCFFFFFFF)
                                     + 4 * ((4 * ((i & v105) != 0)) | (2 * ((i & v211) != 0)) | ((i & v212) != 0))
                                     + 24);
            if (i == *(_DWORD *)(a1 + 320) || v96 >> 30)
              break;
            v105 -= i & v105;
            v211 -= i & v211;
          }
        }
        LODWORD(v327) = v96;
        v340[0] = 0;
        v340[16] = 0;
        v114 = sub_223B61034(v307, (__int128 *)v340, (unsigned int *)&v327);
        if ((_DWORD)v96 != (_DWORD)v327)
        {
          v115 = *((_DWORD *)v63 + 9) & 0xFFFFFFF8;
          v325 = (uint64_t *)(*(_QWORD *)((char *)v63 + 28) & 0xFFFFFFF8FFFFFFF8);
          v326 = v115;
          sub_223E8AD00(v307, (int8x8_t *)&v325, v327);
        }
        if ((v114 & 0x80000000) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 212, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown mask index", 18, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_490;
        }
        v116 = *(_QWORD *)(a1 + 21008);
        if (v114 >= (unint64_t)((*(_QWORD *)(a1 + 21016) - v116) >> 4))
        {
          if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 213, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
          {
            v116 = *(_QWORD *)(a1 + 21008);
            goto LABEL_168;
          }
LABEL_490:
          abort();
        }
LABEL_168:
        *(_QWORD *)(v116 + 16 * v114) = v312;
        v117 = *(unsigned int *)(a1 + 360);
        if ((v117 & 0x80000000) != 0)
          goto LABEL_183;
        v118 = *((_DWORD *)v63 + 7) & 0xFFFFFFF8;
        v119 = v63[4] & 0xFFFFFFF8;
        v120 = *((_DWORD *)v63 + 9) & 0xFFFFFFF8;
        v121 = *(_QWORD *)(a1 + 368);
        v122 = (int *)(v121 + 4488 * (v117 & 0xFFFFFFFFCFFFFFFFLL));
        v123 = *v122;
        v124 = v122[1];
        v125 = v122[2];
        v126 = v118 - *v122;
        v127 = v118 < *v122 || v119 < v124;
        v128 = v127 || v120 < v125;
        if (v128
          || ((v129 = v122[3], v132 = v122 + 4, v131 = v122[4], v130 = v132[1], v118 < v129)
            ? (v133 = v119 < v131)
            : (v133 = 0),
              v133 ? (v134 = v120 < v130) : (v134 = 0),
              !v134))
        {
LABEL_183:
          LODWORD(v117) = 0x80000000;
        }
        else
        {
          v214 = v119 - v124;
          v215 = v120 - v125;
          for (j = v129 - v123; ; v215 -= j & v215)
          {
            j >>= 1;
            LODWORD(v117) = *(_DWORD *)(v121
                                      + 4488 * (v117 & 0xCFFFFFFF)
                                      + 4 * ((4 * ((j & v126) != 0)) | (2 * ((j & v214) != 0)) | ((j & v215) != 0))
                                      + 24);
            if (j == *(_DWORD *)(a1 + 320) || v117 >> 30)
              break;
            v126 -= j & v126;
            v214 -= j & v214;
          }
        }
        LODWORD(v327) = v117;
        v340[0] = 0;
        v340[16] = 0;
        v135 = sub_223B61034(v307, (__int128 *)v340, (unsigned int *)&v327);
        if ((_DWORD)v117 != (_DWORD)v327)
        {
          v136 = *((_DWORD *)v63 + 9) & 0xFFFFFFF8;
          v325 = (uint64_t *)(*(_QWORD *)((char *)v63 + 28) & 0xFFFFFFF8FFFFFFF8);
          v326 = v136;
          sub_223E8AD00(v307, (int8x8_t *)&v325, v327);
        }
        if ((v135 & 0x80000000) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 230, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown mask index", 18, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_490;
        }
        v137 = *(_QWORD *)(a1 + 21008);
        if (v135 >= (unint64_t)((*(_QWORD *)(a1 + 21016) - v137) >> 4))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 231, (uint64_t)"block_index < allocated_voxel_masks_.size()", 43, (uint64_t)"Invalid mask index", 18, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_490;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 21008) + 16 * v135 + 8) = *((_QWORD *)&v312 + 1);
          v138 = (uint64_t **)v337;
          if ((_QWORD)v337)
            goto LABEL_233;
        }
        else
        {
          *(_QWORD *)(v137 + 16 * v135 + 8) = *((_QWORD *)&v312 + 1);
          v138 = (uint64_t **)v337;
          if (!(_QWORD)v337)
            goto LABEL_195;
          do
          {
LABEL_233:
            v160 = *((unsigned __int16 *)v138 + 8);
            v161 = *(_QWORD *)(a1 + 104);
            if (v160 >= (*(_QWORD *)(a1 + 112) - v161) >> 4)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 128, (uint64_t)"index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
              v162 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v163 = qword_255795648;
                v164 = qword_255795650;
                while (v163 != v164)
                {
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v163)(*(_QWORD *)(v163 + 8), "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
                  v163 += 16;
                }
              }
              v165 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
              v161 = *(_QWORD *)(a1 + 104);
            }
            v166 = v161 + 16 * v160;
            v167 = sub_22456636C((unsigned __int8 *)v166);
            v169 = *(int8x8_t *)(a1 + 72);
            if (v169)
            {
              v170 = (uint8x8_t)vcnt_s8(v169);
              v170.i16[0] = vaddlv_u8(v170);
              if (v170.u32[0] > 1uLL)
              {
                v171 = v167;
                if (v167 >= *(_QWORD *)&v169)
                  v171 = v167 % *(_QWORD *)&v169;
              }
              else
              {
                v171 = (*(_QWORD *)&v169 - 1) & v167;
              }
              v172 = *(uint64_t ***)(*(_QWORD *)(a1 + 64) + 8 * v171);
              if (v172)
              {
                v173 = *v172;
                if (v173)
                {
                  if (v170.u32[0] < 2uLL)
                  {
                    v174 = *(_QWORD *)&v169 - 1;
                    while (1)
                    {
                      v178 = v173[1];
                      if (v167 == v178)
                      {
                        if (v173[2] == *(_QWORD *)v166 && v173[3] == *(_QWORD *)(v166 + 8))
                          goto LABEL_270;
                      }
                      else if ((v178 & v174) != v171)
                      {
                        goto LABEL_232;
                      }
                      v173 = (uint64_t *)*v173;
                      if (!v173)
                        goto LABEL_232;
                    }
                  }
                  do
                  {
                    v176 = v173[1];
                    if (v167 == v176)
                    {
                      if (v173[2] == *(_QWORD *)v166 && v173[3] == *(_QWORD *)(v166 + 8))
                      {
LABEL_270:
                        *(_QWORD *)&v168 = v173[12];
                        DWORD2(v168) = *((_DWORD *)v173 + 26);
                        v179 = ((_DWORD)v173[12] & 0x7FFFFFFFu) < 0x7F800000;
                        *(_OWORD *)__srca = v168;
                        if (((_DWORD)v173[12] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                        {
                          if ((DWORD1(v168) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                            v179 = (DWORD2(v168) & 0x7FFFFFFFu) < 0x7F800000;
                          else
                            v179 = (DWORD1(v168) & 0x7FFFFFFFu) < 0x7F800000;
                        }
                        if (!v179
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
                        {
                          abort();
                        }
                        v180 = vmulq_n_f32(*(float32x4_t *)__srca, *(float *)(a1 + 316));
                        v181 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v180.f32));
                        v182 = *(int32x2_t *)((char *)v63 + 28);
                        v183 = vcgt_s32(v182, v181);
                        if ((v183.i8[0] & 1) == 0 && (v183.i8[4] & 1) == 0)
                        {
                          v184 = vcvtms_s32_f32(v180.f32[2]);
                          v185 = *((_DWORD *)v63 + 9);
                          if (v184 >= v185)
                          {
                            v186 = vcgt_s32(vadd_s32(v182, (int32x2_t)0x800000008), v181);
                            if ((v186.i8[0] & 1) != 0 && (v186.i8[4] & 1) != 0 && v185 + 8 > v184)
                            {
                              *(int32x2_t *)v340 = vsub_s32(v181, v182);
                              *(_DWORD *)&v340[8] = v184 - v185;
                              v187 = *(_DWORD *)&v340[4 * v62];
                              if (v187 >= 8
                                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2334, (uint64_t)"relative_pose_h >= 0 && relative_pose_h < MultiVoxelStore::BlockWidth()", 71, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
                              {
                                abort();
                              }
                              ++object[1].i32[5 * v187];
                            }
                          }
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v176 >= *(_QWORD *)&v169)
                        v176 %= *(_QWORD *)&v169;
                      if (v176 != v171)
                        break;
                    }
                    v173 = (uint64_t *)*v173;
                  }
                  while (v173);
                }
              }
            }
LABEL_232:
            v138 = (uint64_t **)*v138;
          }
          while (v138);
        }
      }
LABEL_195:
      v139 = v304;
      v140 = (int32x4_t *)sub_22393835C(v304, v309);
      v141 = v308;
      if (v140)
      {
        v142 = v140;
        sub_223B67B70(v305, v309[v62], v140 + 2);
        sub_223B67B70(v305, v309[v62] + 1, (int32x4_t *)((char *)v142 + 52));
        sub_223B67B70(v305, v309[v62] + 2, (int32x4_t *)((char *)v142 + 72));
        sub_223B67B70(v305, v309[v62] + 3, (int32x4_t *)((char *)v142 + 92));
        sub_223B67B70(v305, v309[v62] + 4, v142 + 7);
        sub_223B67B70(v305, v309[v62] + 5, (int32x4_t *)((char *)v142 + 132));
        sub_223B67B70(v305, v309[v62] + 6, (int32x4_t *)((char *)v142 + 152));
        sub_223B67B70(v305, v309[v62] + 7, (int32x4_t *)((char *)v142 + 172));
        sub_223AEF26C(v316, (uint64_t)v142[12].i64);
        v143 = *((_DWORD *)v308 + 72);
        v144 = v142[14].u32[2];
        if (v143 >= v144)
          goto LABEL_199;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2357, (uint64_t)"global_occupied_voxels_ >= stats_it->second.count_occupied", 58, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_492;
        }
        v144 = v142[14].u32[2];
        v143 = *((_DWORD *)v308 + 72);
LABEL_199:
        *((_DWORD *)v308 + 72) = v143 - v144;
        v145 = *((_DWORD *)v308 + 73);
        v146 = v142[14].u32[3];
        if (v145 < v146)
        {
          if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2359, (uint64_t)"global_free_voxels_ >= stats_it->second.count_free", 50, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
          {
            v146 = v142[14].u32[3];
            v145 = *((_DWORD *)v308 + 73);
            goto LABEL_202;
          }
LABEL_492:
          abort();
        }
LABEL_202:
        *((_DWORD *)v308 + 73) = v145 - v146;
      }
      sub_223B67CB0(v305, v309[v62], object);
      sub_223B67CB0(v305, v309[v62] + 1, (int32x4_t *)((char *)object[1].i64 + 4));
      sub_223B67CB0(v305, v309[v62] + 2, (int32x4_t *)&object[2].u64[1]);
      sub_223B67CB0(v305, v309[v62] + 3, (int32x4_t *)((char *)&v329.u64[1] + 4));
      sub_223B67CB0(v305, v309[v62] + 4, &v331);
      sub_223B67CB0(v305, v309[v62] + 5, (int32x4_t *)((char *)v332.i64 + 4));
      sub_223B67CB0(v305, v309[v62] + 6, (int32x4_t *)&v333.u64[1]);
      sub_223B67CB0(v305, v309[v62] + 7, (int32x4_t *)((char *)&v334.u64[1] + 4));
      for (k = (uint64_t *)v337; k; k = (uint64_t *)*k)
      {
        v148 = *(int32x2_t *)((char *)k + 20);
        *(_QWORD *)v340 = k + 2;
        v149 = sub_223AEF740((uint64_t)v316, (unsigned __int16 *)k + 8, (uint64_t)&unk_2245BA939, (_WORD **)v340);
        *(uint64_t **)((char *)v149 + 20) = (uint64_t *)vadd_s32(*(int32x2_t *)((char *)v149 + 20), v148);
      }
      *(int32x2_t *)(a1 + 21632) = vadd_s32(*(int32x2_t *)(a1 + 21632), v339);
      v150 = *((_DWORD *)v63 + 7);
      v151 = *((_DWORD *)v63 + 8);
      v152 = *((_DWORD *)v63 + 9);
      v153 = (19349669 * v151) ^ (73856093 * v150) ^ (83492791 * v152);
      v154 = *(_QWORD *)(a1 + 21360);
      if (v154)
      {
        v155 = (uint8x8_t)vcnt_s8((int8x8_t)v154);
        v155.i16[0] = vaddlv_u8(v155);
        if (v155.u32[0] > 1uLL)
        {
          v86 = (19349669 * v151) ^ (73856093 * v150) ^ (83492791 * v152);
          if (v153 >= v154)
            v86 = v153 % v154;
        }
        else
        {
          v86 = v153 & (v154 - 1);
        }
        v156 = (int32x4_t **)*((_QWORD *)*v304 + v86);
        if (v156)
        {
          v157 = *v156;
          if (*v156)
          {
            if (v155.u32[0] < 2uLL)
            {
              while (1)
              {
                v159 = v157->i64[1];
                if (v159 == v153)
                {
                  if (v157[1].i32[0] == v150 && v157[1].i32[1] == v151 && v157[1].i32[2] == v152)
                    goto LABEL_372;
                }
                else if ((v159 & (v154 - 1)) != v86)
                {
                  goto LABEL_230;
                }
                v157 = (int32x4_t *)v157->i64[0];
                if (!v157)
                  goto LABEL_230;
              }
            }
            do
            {
              v158 = v157->u64[1];
              if (v158 == v153)
              {
                if (v157[1].i32[0] == v150 && v157[1].i32[1] == v151 && v157[1].i32[2] == v152)
                  goto LABEL_372;
              }
              else
              {
                if (v158 >= v154)
                  v158 %= v154;
                if (v158 != v86)
                  break;
              }
              v157 = (int32x4_t *)v157->i64[0];
            }
            while (v157);
          }
LABEL_230:
          v141 = v308;
          v139 = v304;
        }
        else
        {
          v141 = v308;
        }
      }
      v188 = operator new(0xF0uLL);
      *(_QWORD *)v340 = v188;
      *(_QWORD *)&v340[8] = v306;
      *v188 = 0;
      v188[1] = v153;
      v189 = *((_DWORD *)v63 + 9);
      v188[2] = *(_QWORD *)v309;
      *((_DWORD *)v188 + 6) = v189;
      v188[28] = 0;
      v188[29] = 0;
      *((_OWORD *)v188 + 2) = 0u;
      *((_OWORD *)v188 + 3) = 0u;
      *((_OWORD *)v188 + 4) = 0u;
      *((_OWORD *)v188 + 5) = 0u;
      *((_OWORD *)v188 + 6) = 0u;
      *((_OWORD *)v188 + 7) = 0u;
      *((_OWORD *)v188 + 8) = 0u;
      *((_OWORD *)v188 + 9) = 0u;
      *((_OWORD *)v188 + 10) = 0u;
      *((_OWORD *)v188 + 11) = 0u;
      *((_OWORD *)v188 + 12) = 0u;
      *((_OWORD *)v188 + 13) = 0u;
      *((_DWORD *)v188 + 56) = 1065353216;
      v340[16] = 1;
      v190 = (float)(unint64_t)(*(_QWORD *)(a1 + 21376) + 1);
      v191 = v141[10];
      if (!v154 || (float)(v191 * (float)v154) < v190)
      {
        v194 = v154 < 3 || (v154 & (v154 - 1)) != 0;
        v195 = v194 | (2 * v154);
        v196 = vcvtps_u32_f32(v190 / v191);
        if (v195 <= v196)
          prime = v196;
        else
          prime = v195;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v154 = *(_QWORD *)(a1 + 21360);
        }
        if (prime <= v154)
        {
          if (prime >= v154)
            goto LABEL_349;
          v208 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 21376) / v141[10]);
          if (v154 < 3
            || (v209 = (uint8x8_t)vcnt_s8((int8x8_t)v154), v209.i16[0] = vaddlv_u8(v209), v209.u32[0] > 1uLL))
          {
            v208 = std::__next_prime(v208);
          }
          else
          {
            v210 = 1 << -(char)__clz(v208 - 1);
            if (v208 >= 2)
              v208 = v210;
          }
          if (prime <= v208)
            prime = v208;
          if (prime < v154)
          {
            if (prime)
              goto LABEL_305;
            v218 = *v139;
            *v139 = 0;
            if (v218)
              operator delete(v218);
            v154 = 0;
            *(_QWORD *)(a1 + 21360) = 0;
            v219 = -1;
            goto LABEL_350;
          }
          v154 = *(_QWORD *)(a1 + 21360);
          v219 = v154 - 1;
          if ((v154 & (v154 - 1)) == 0)
            goto LABEL_350;
          goto LABEL_362;
        }
LABEL_305:
        if (prime >> 61)
          sub_223174E94();
        v198 = operator new(8 * prime);
        v199 = *v139;
        *v139 = v198;
        if (v199)
          operator delete(v199);
        v200 = 0;
        *(_QWORD *)(a1 + 21360) = prime;
        do
          *((_QWORD *)*v139 + v200++) = 0;
        while (prime != v200);
        v201 = *v306;
        if (!*v306)
        {
LABEL_361:
          v154 = prime;
          v219 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_350;
          goto LABEL_362;
        }
        v202 = v201->u64[1];
        v203 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v204 = v202 & v203;
          *((_QWORD *)*v139 + v204) = v306;
          for (m = (int32x4_t *)v201->i64[0]; v201->i64[0]; m = (int32x4_t *)v201->i64[0])
          {
            v206 = m->i64[1] & v203;
            if (v206 == v204)
            {
              v201 = m;
            }
            else if (*((_QWORD *)*v139 + v206))
            {
              v201->i64[0] = m->i64[0];
              v207 = 8 * v206;
              m->i64[0] = **(_QWORD **)((char *)*v139 + v207);
              **(_QWORD **)((char *)*v139 + v207) = m;
            }
            else
            {
              *((_QWORD *)*v139 + v206) = v201;
              v201 = m;
              v204 = v206;
            }
          }
          goto LABEL_361;
        }
        if (v202 < prime)
        {
          *((_QWORD *)*v139 + v202) = v306;
          v217 = (int32x4_t *)v201->i64[0];
          if (v201->i64[0])
            goto LABEL_356;
LABEL_348:
          v154 = prime;
LABEL_349:
          v219 = v154 - 1;
          if ((v154 & (v154 - 1)) == 0)
          {
LABEL_350:
            v86 = v219 & v153;
            v192 = (int32x4_t **)*((_QWORD *)*v139 + (v219 & v153));
            v193 = v139;
            v157 = *(int32x4_t **)v340;
            if (!v192)
              goto LABEL_351;
LABEL_293:
            v157->i64[0] = (uint64_t)*v192;
            goto LABEL_370;
          }
LABEL_362:
          if (v153 >= v154)
          {
            v86 = v153 % v154;
            v192 = (int32x4_t **)*((_QWORD *)*v139 + v153 % v154);
            v193 = v139;
            v157 = *(int32x4_t **)v340;
            if (!v192)
              goto LABEL_351;
          }
          else
          {
            v86 = v153;
            v192 = (int32x4_t **)*((_QWORD *)*v139 + v153);
            v193 = v139;
            v157 = *(int32x4_t **)v340;
            if (!v192)
              goto LABEL_351;
          }
          goto LABEL_293;
        }
        v202 %= prime;
        *((_QWORD *)*v139 + v202) = v306;
        v217 = (int32x4_t *)v201->i64[0];
        if (!v201->i64[0])
          goto LABEL_348;
        while (1)
        {
LABEL_356:
          v222 = v217->u64[1];
          if (v222 >= prime)
            v222 %= prime;
          if (v222 == v202)
            goto LABEL_355;
          if (*((_QWORD *)*v139 + v222))
            break;
          *((_QWORD *)*v139 + v222) = v201;
          v201 = v217;
          v217 = (int32x4_t *)v217->i64[0];
          v202 = v222;
          if (!v217)
            goto LABEL_361;
        }
        v201->i64[0] = v217->i64[0];
        v221 = 8 * v222;
        v217->i64[0] = **(_QWORD **)((char *)*v139 + v221);
        **(_QWORD **)((char *)*v139 + v221) = v217;
        v217 = v201;
LABEL_355:
        v201 = v217;
        v217 = (int32x4_t *)v217->i64[0];
        if (!v217)
          goto LABEL_361;
        goto LABEL_356;
      }
      v192 = (int32x4_t **)*((_QWORD *)*v139 + v86);
      v193 = v139;
      v157 = *(int32x4_t **)v340;
      if (v192)
        goto LABEL_293;
LABEL_351:
      v157->i64[0] = (uint64_t)*v306;
      *v306 = v157;
      *((_QWORD *)*v193 + v86) = v306;
      if (v157->i64[0])
      {
        v220 = *(_QWORD *)(v157->i64[0] + 8);
        if ((v154 & (v154 - 1)) != 0)
        {
          if (v220 >= v154)
            v220 %= v154;
        }
        else
        {
          v220 &= v154 - 1;
        }
        v192 = (int32x4_t **)((char *)*v304 + 8 * v220);
LABEL_370:
        *v192 = v157;
      }
      ++*(_QWORD *)(a1 + 21376);
LABEL_372:
      v224 = v334;
      v223 = v335;
      v225 = v333;
      v226 = v331;
      v157[8] = v332;
      v157[9] = v225;
      v157[10] = v224;
      v157[11] = v223;
      v228 = v329;
      v227 = v330;
      v157[4] = object[2];
      v157[5] = v228;
      v157[6] = v227;
      v157[7] = v226;
      v229 = object[1];
      v157[2] = object[0];
      v157[3] = v229;
      if (&v157[2] != object)
      {
        v157[14].i32[0] = v338;
        v230 = (uint64_t *)v337;
        v231 = v157[12].i64[1];
        if (!v231)
          goto LABEL_379;
        for (n = 0; n != v231; ++n)
          *(_QWORD *)(v157[12].i64[0] + 8 * n) = 0;
        v233 = (char *)v157[13].i64[0];
        v157[13].i64[0] = 0;
        v157[13].i64[1] = 0;
        if (v233)
        {
          while (v230)
          {
            *((_WORD *)v233 + 8) = *((_WORD *)v230 + 8);
            *(_QWORD *)(v233 + 20) = *(uint64_t *)((char *)v230 + 20);
            v234 = *(char **)v233;
            sub_223B254BC((uint64_t)v157[12].i64, (uint64_t)v233);
            v230 = (uint64_t *)*v230;
            v233 = v234;
            if (!v234)
              goto LABEL_379;
          }
          do
          {
            v237 = *(char **)v233;
            operator delete(v233);
            v233 = v237;
          }
          while (v237);
        }
        else
        {
LABEL_379:
          while (v230)
          {
            v235 = operator new(0x20uLL);
            *(_QWORD *)v235 = 0;
            v236 = v230[2];
            v235[6] = *((_DWORD *)v230 + 6);
            *((_QWORD *)v235 + 1) = (unsigned __int16)v236;
            *((_QWORD *)v235 + 2) = v236;
            sub_223B254BC((uint64_t)v157[12].i64, (uint64_t)v235);
            v230 = (uint64_t *)*v230;
          }
        }
      }
      v157[14].u64[1] = (unint64_t)v339;
      kdebug_trace();
      v238 = (_QWORD *)v337;
      v64 = v307;
      if ((_QWORD)v337)
      {
        do
        {
          v239 = (_QWORD *)*v238;
          operator delete(v238);
          v238 = v239;
        }
        while (v239);
      }
      v240 = (void *)v336;
      *(_QWORD *)&v336 = 0;
      if (v240)
        operator delete(v240);
      v241 = (_QWORD *)v63[1];
      if (v241)
      {
        do
        {
          v242 = v241;
          v241 = (_QWORD *)*v241;
        }
        while (v241);
      }
      else
      {
        do
        {
          v242 = (_QWORD *)v63[2];
          v6 = *v242 == (_QWORD)v63;
          v63 = v242;
        }
        while (!v6);
      }
      v63 = v242;
    }
    while (v242 != a2 + 1);
  }
  kdebug_trace();
  object[1].i8[7] = 10;
  strcpy(object[0].i8, "Synthesize");
  v340[23] = 17;
  strcpy(v340, "KeyframeOccupancy");
  sub_22391CC34(object[0].i64, (uint64_t *)v340, (uint64_t)v323);
  if ((v340[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v340);
    if ((object[1].i8[7] & 0x80000000) == 0)
      goto LABEL_395;
LABEL_401:
    operator delete((void *)object[0].i64[0]);
    goto LABEL_395;
  }
  if (object[1].i8[7] < 0)
    goto LABEL_401;
LABEL_395:
  sub_223AF0EC4(&v322);
  if (**(int **)(v322 + 56) > 3)
    return;
  v243 = *(unsigned __int8 *)(v322 + 72);
  v244 = sub_22322F254(v322, "OSLogSurrogateAppender", 1, 0);
  v245 = v244;
  if (!v243 && !v244)
    return;
  *(_QWORD *)v340 = &v322;
  *(std::chrono::steady_clock::time_point *)&v340[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v340[16] = std::chrono::system_clock::now();
  v341 = 3;
  v342 = "unknown file";
  v343 = 2385;
  v345 = 0;
  v346 = 0;
  v344 = "unknown function";
  v246 = **(_QWORD **)v340;
  if (*(char *)(**(_QWORD **)v340 + 39) < 0)
  {
    v248 = *(const char **)(v246 + 16);
    v247 = *(_QWORD *)(v246 + 24);
  }
  else
  {
    v247 = *(unsigned __int8 *)(**(_QWORD **)v340 + 39);
    v248 = (const char *)(v246 + 16);
  }
  v317 = v246 + 16;
  v249 = *(_QWORD *)(a1 + 20992);
  v250 = *(_QWORD *)(a1 + 20984);
  v251 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if (object[1].i8[8] && object[1].i8[7] < 0)
      operator delete((void *)object[0].i64[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
    a1 = v310;
  }
  if (byte_255788F40[23] >= 0)
    v252 = byte_255788F40;
  else
    v252 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v253 = byte_255788F40[23];
  else
    v253 = *(_QWORD *)&byte_255788F40[8];
  __srcb = v248;
  object[0].i64[0] = (uint64_t)os_log_create(v252, v248);
  v254 = &object[0].i64[1];
  if (v253 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v253 >= 0x17)
  {
    v314 = v250;
    v255 = v246;
    v256 = v243;
    v257 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v257 = v253 | 7;
    v258 = v257 + 1;
    v254 = (uint64_t *)operator new(v257 + 1);
    object[1].i64[0] = v253;
    object[1].i64[1] = v258 | 0x8000000000000000;
    object[0].i64[1] = (uint64_t)v254;
    v243 = v256;
    v246 = v255;
    v250 = v314;
    goto LABEL_419;
  }
  object[1].i8[15] = v253;
  if (v253)
LABEL_419:
    memmove(v254, v252, v253);
  *((_BYTE *)v254 + v253) = 0;
  object[2].i8[0] = 1;
  v259 = &object[2].i64[1];
  if (v247 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v247 >= 0x17)
  {
    v260 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v247 | 7) != 0x17)
      v260 = v247 | 7;
    v261 = v260 + 1;
    v259 = (uint64_t *)operator new(v260 + 1);
    v329.i64[0] = v247;
    v329.i64[1] = v261 | 0x8000000000000000;
    object[2].i64[1] = (uint64_t)v259;
  }
  else
  {
    v329.i8[15] = v247;
    if (!v247)
      goto LABEL_428;
  }
  memmove(v259, __srcb, v247);
LABEL_428:
  *((_BYTE *)v259 + v247) = 0;
  v330.i8[0] = 1;
  v262 = object[0].i64[0];
  if (v329.i8[15] < 0)
    operator delete((void *)object[2].i64[1]);
  if (object[2].i8[0] && object[1].i8[15] < 0)
    operator delete((void *)object[0].i64[1]);
  if (object[0].i64[0])
    os_release((void *)object[0].i64[0]);
  v263 = -858993459 * ((unint64_t)(v249 - v250) >> 12);
  if (v245 && *(_QWORD *)(v245 + 24))
  {
    v264 = _os_log_pack_size();
    v265 = (std::__shared_weak_count_vtbl *)operator new(v264, (std::align_val_t)8uLL);
    v266 = (std::__shared_weak_count *)operator new();
    v267 = v266;
    v266->__shared_owners_ = 0;
    v268 = (unint64_t *)&v266->__shared_owners_;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v265;
    object[0].i64[0] = (uint64_t)v265;
    object[0].i64[1] = (uint64_t)v265;
    object[1].i64[0] = (uint64_t)v266;
    do
      v269 = __ldxr(v268);
    while (__stxr(v269 + 1, v268));
    memset(&object[1].u64[1], 0, 24);
    do
      v270 = __ldaxr(v268);
    while (__stlxr(v270 - 1, v268));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v267);
    }
    v271 = object[0].i64[0];
    v272 = _os_log_pack_fill();
    v273 = *((_DWORD *)v308 + 404);
    *(_DWORD *)v272 = 67109376;
    *(_DWORD *)(v272 + 4) = v263;
    *(_WORD *)(v272 + 8) = 1024;
    *(_DWORD *)(v272 + 10) = v273;
    v274 = operator new();
    v275 = *(unsigned __int8 *)(v246 + 39);
    v276 = v317;
    if ((v275 & 0x80u) != 0)
    {
      v276 = *(_QWORD *)(v246 + 16);
      v275 = *(_QWORD *)(v246 + 24);
    }
    *(_QWORD *)v274 = v271;
    *(int32x4_t *)(v274 + 8) = *(int32x4_t *)((char *)object + 8);
    object[0].i64[1] = 0;
    object[1].i64[0] = 0;
    *(int32x4_t *)(v274 + 24) = *(int32x4_t *)((char *)&object[1] + 8);
    object[1].i64[1] = 0;
    object[2].i64[0] = 0;
    *(_QWORD *)(v274 + 40) = v276;
    *(_QWORD *)(v274 + 48) = v275;
    *(_BYTE *)(v274 + 56) = 1;
    v327 = 0;
    v325 = (uint64_t *)v274;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v245 + 24) + 40))(*(_QWORD *)(v245 + 24), &v325);
    v277 = (int8x8_t)v325;
    v325 = 0;
    if (v277)
    {
      v278 = *(std::__shared_weak_count **)(*(_QWORD *)&v277 + 32);
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      v281 = *(std::__shared_weak_count **)(*(_QWORD *)&v277 + 16);
      if (v281)
      {
        v282 = (unint64_t *)&v281->__shared_owners_;
        do
          v283 = __ldaxr(v282);
        while (__stlxr(v283 - 1, v282));
        if (!v283)
        {
          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
          std::__shared_weak_count::__release_weak(v281);
        }
      }
      MEMORY[0x227684CE8](*(_QWORD *)&v277, 0x10F0C40B62ED6C6);
      v284 = v327;
      v327 = 0;
      if (v284)
      {
        v285 = *(std::__shared_weak_count **)(v284 + 32);
        if (v285)
        {
          v286 = (unint64_t *)&v285->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        v288 = *(std::__shared_weak_count **)(v284 + 16);
        if (v288)
        {
          v289 = (unint64_t *)&v288->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        MEMORY[0x227684CE8](v284, 0x10F0C40B62ED6C6);
      }
    }
    v291 = (std::__shared_weak_count *)object[2].i64[0];
    if (object[2].i64[0])
    {
      v292 = (unint64_t *)(object[2].i64[0] + 8);
      do
        v293 = __ldaxr(v292);
      while (__stlxr(v293 - 1, v292));
      if (!v293)
      {
        ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
        std::__shared_weak_count::__release_weak(v291);
      }
    }
    v294 = (std::__shared_weak_count *)object[1].i64[0];
    if (object[1].i64[0])
    {
      v295 = (unint64_t *)(object[1].i64[0] + 8);
      do
        v296 = __ldaxr(v295);
      while (__stlxr(v296 - 1, v295));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
        std::__shared_weak_count::__release_weak(v294);
      }
    }
  }
  else
  {
    os_log_type_enabled(v262, OS_LOG_TYPE_INFO);
    v297 = *((_DWORD *)v308 + 404);
    object[0].i32[0] = 67109376;
    object[0].i32[1] = -858993459 * ((unint64_t)(v249 - v250) >> 12);
    object[0].i16[4] = 1024;
    *(__int32 *)((char *)&object[0].i32[2] + 2) = v297;
    v298 = (void *)_os_log_send_and_compose_impl();
    if (v298)
      free(v298);
  }
  if (v243)
  {
    sub_22322C138((uint64_t)v340, "Synthesized results (%i blocks allocated, %i newly discovered voxels after synthesis)", -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 20992) - *(_QWORD *)(a1 + 20984)) >> 12), *((_DWORD *)v308 + 404));
    sub_223182C08((uint64_t)v340);
  }
  sub_223182C08((uint64_t)v340);
  v299 = v346;
  if (v346)
  {
    v300 = (unint64_t *)&v346->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
}

void sub_223B056AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;

  if (a49)
  {
    if (a48 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v49 - 240);
  _Unwind_Resume(a1);
}

void sub_223B056F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_22319A054(&a40);
  sub_22319A054(&a42);
  sub_223199DE8((uint64_t)&a43);
  sub_223182DAC(v43 - 240);
  _Unwind_Resume(a1);
}

void sub_223B05720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_223199DE8((uint64_t)&a43);
  sub_223182DAC(v43 - 240);
  _Unwind_Resume(a1);
}

void sub_223B057B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_223B057D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_223B057E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *object,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  uint64_t v50;

  if (a50 && a49 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC(v50 - 240);
  _Unwind_Resume(a1);
}

void sub_223B05880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 217) < 0)
    operator delete(*(void **)(v48 - 240));
  if (a48 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223B058BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_223B622CC(v43 - 240);
  sub_223B20604((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223B05914(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_223B05940()
{
  __cxa_end_catch();
  JUMPOUT(0x223B059A8);
}

void sub_223B0594C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223B05978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;

  operator delete(v43);
  sub_223B20604((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223B059A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_223B20604((uint64_t)&a43);
  JUMPOUT(0x223B059B0);
}

void sub_223B059B8()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  BOOL v12;
  float32x4_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __n128 *v41;
  size_t v42;
  __int128 v43;
  unint64_t v44;
  std::mutex *v45;
  __int128 *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  char *v56;
  size_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  std::mutex *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  __n128 *v90;
  size_t v91;
  __int128 v92;
  unint64_t v93;
  std::mutex *v94;
  __int128 *v95;
  size_t v96;
  int v97;
  unsigned int *v98;
  unsigned int *i;
  std::string *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  std::string *v104;
  std::string::size_type size;
  size_t v106;
  void **p_dst;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  size_t v114;
  const char *v115;
  char *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  const char *v119;
  size_t v120;
  std::string::size_type *p_size;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  size_t v128;
  void *v129;
  _QWORD *v130;
  size_t v131;
  size_t v132;
  int32x2_t *v133;
  void *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int32x2_t v138;
  char v139;
  char *v140;
  std::string::size_type v141;
  std::__shared_weak_count *v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::string::size_type v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  int32x2_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  const char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *j;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  float v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  _QWORD *v257;
  _QWORD *v258;
  void *v259;
  _QWORD *v260;
  _QWORD *v261;
  void *v262;
  _OWORD *v263;
  unint64_t v264;
  _BYTE *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  void *v284;
  void *v285;
  float v286;
  float v287;
  float v288;
  float v289;
  uint64_t v290;
  _DWORD *v291;
  int8x8_t *v292;
  int8x8_t *v293;
  int v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  const char *v299;
  size_t v300;
  char *v301;
  unsigned __int8 v302;
  unsigned __int8 v303;
  const char *v304;
  size_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  NSObject *v312;
  size_t v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _DWORD *v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  std::string::size_type v326;
  int v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  void *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  BOOL v354;
  uint64_t v355;
  const char *v356;
  size_t v357;
  char *v358;
  unsigned __int8 v359;
  unsigned __int8 v360;
  const char *v361;
  size_t v362;
  _BYTE *v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  NSObject *v369;
  size_t v370;
  std::__shared_weak_count_vtbl *v371;
  std::__shared_weak_count *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  std::string::size_type v383;
  int v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  void *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  _QWORD *v408;
  _QWORD *k;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  std::mutex *v413;
  uint64_t v414;
  uint64_t v415;
  char v416;
  std::string *v417;
  std::string *v418;
  uint64_t v419;
  uint64_t *v420;
  std::string::size_type v421;
  std::string *p_p;
  std::string::size_type v423;
  std::string::size_type v424;
  int v425;
  __n128 *v428;
  size_t v429;
  __int128 v430;
  unint64_t v431;
  std::mutex *v432;
  std::string *v433;
  size_t v434;
  unint64_t v435;
  int v436;
  int v437;
  std::string::size_type v438;
  unsigned int v439;
  unsigned int v440;
  uint64_t v441;
  int v442;
  char *v443;
  uint64_t v444;
  int v445;
  _BYTE *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  int *v453;
  int v454;
  int v455;
  int v456;
  unsigned __int32 v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _BYTE *v465;
  std::string::value_type *v466;
  uint32x2_t v467;
  int8x8_t v468;
  int8x8_t v469;
  int8x8_t v470;
  unsigned __int32 v471;
  int v472;
  float32x4_t v473;
  int8x8_t v474;
  int8x8_t v475;
  int v476;
  int v477;
  unsigned __int8 v478;
  uint64_t m;
  uint64_t v480;
  unsigned __int8 v481;
  signed __int32 v482;
  unsigned int v483;
  BOOL v484;
  signed int v485;
  char v486;
  unint64_t v487;
  unsigned __int8 *v488;
  int v489;
  int v490;
  int v491;
  _DWORD *v492;
  int v493;
  char v494;
  int v495;
  _BYTE *v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  int v502;
  _BYTE *v503;
  char v504;
  signed int v505;
  unsigned __int8 v506;
  uint64_t v507;
  uint64_t n;
  unsigned __int8 v509;
  unint64_t v510;
  unsigned __int8 *v511;
  int v512;
  int v513;
  int v514;
  _DWORD *v515;
  int v516;
  int v517;
  char *v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  int v525;
  std::string *v526;
  char *v527;
  unint64_t v528;
  uint64_t v529;
  unsigned __int8 v530;
  uint64_t v531;
  uint64_t nn;
  unsigned __int8 v533;
  uint64_t v534;
  unint64_t v535;
  float32x4_t v536;
  int8x8_t v537;
  uint8x8_t v538;
  unint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  unint64_t v543;
  uint64_t v545;
  _QWORD *v546;
  BOOL v547;
  unsigned __int8 v548;
  uint64_t v549;
  uint64_t i1;
  unsigned __int8 v551;
  float32x4_t v552;
  int32x2_t v553;
  int32x2_t v554;
  int32x2_t v555;
  signed int v556;
  signed int v557;
  int32x2_t v558;
  unsigned __int32 v559;
  unsigned __int8 v560;
  uint64_t v561;
  uint64_t i2;
  unsigned __int8 v563;
  int v564;
  int v565;
  _BYTE *v566;
  int *v567;
  uint64_t v568;
  uint64_t *v569;
  uint64_t *v570;
  std::string::size_type v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  _QWORD *v577;
  _QWORD *v578;
  unint64_t v579;
  uint64_t v580;
  int v581;
  std::string::size_type v582;
  int v583;
  int ii;
  int jj;
  uint64_t v586;
  int *v587;
  uint64_t *v588;
  uint64_t *v589;
  std::string::size_type v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  _QWORD *v596;
  char *v597;
  unint64_t v598;
  char *v599;
  uint64_t v600;
  int v601;
  std::string::size_type v602;
  int v603;
  int kk;
  int mm;
  std::string *v606;
  std::string *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  std::mutex *v617;
  uint64_t v618;
  uint64_t v619;
  char v620;
  std::string::size_type v621;
  std::string *v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t v625;
  int v626;
  float32x4_t v627;
  float32x2_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x2_t v631;
  float32x4_t v632;
  float32x2_t *v633;
  float32x2_t *v634;
  float32x2_t v639;
  unint64_t v640;
  float32x2_t *v641;
  unint64_t v642;
  uint64_t v643;
  float *v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x2_t *v649;
  uint64_t v650;
  uint64_t i3;
  int v652;
  float32x4_t v653;
  float32x2_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x2_t v657;
  float32x4_t v658;
  float32x2_t *v659;
  float32x2_t *v660;
  float32x2_t v661;
  unint64_t v662;
  float32x2_t *v663;
  unint64_t v664;
  uint64_t v665;
  float *v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x2_t *v671;
  uint64_t *v672;
  std::__shared_weak_count *v673;
  uint64_t v674;
  unint64_t *v675;
  unint64_t v676;
  __int128 v677;
  unint64_t *v678;
  unint64_t v679;
  unint64_t *v680;
  unint64_t v681;
  std::__shared_weak_count *v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  std::__shared_weak_count *v694;
  unint64_t *v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  unsigned int v699;
  _QWORD *v700;
  uint64_t v701;
  uint64_t v702;
  void **v703;
  float32x4_t v704;
  uint64_t v705;
  __int128 v706;
  unint64_t v707;
  signed int v708;
  signed __int32 v709;
  signed __int32 v710;
  int v711;
  int v712;
  std::string::size_type v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  char *v717;
  const char *v718;
  int *v719;
  uint64_t v720;
  int v721;
  float32x4_t v722;
  int v723;
  int v724;
  _BYTE *v725;
  int v726;
  uint64_t v727;
  const char *v728;
  uint64_t v729;
  _BOOL4 v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  unsigned __int32 v734;
  uint64_t *v735;
  uint64_t v736;
  int v737;
  char *__dst;
  size_t v739;
  int64_t v740;
  std::string v741;
  void *v742;
  void *v743;
  char *v744;
  _DWORD v745[4];
  int32x2_t v746;
  unsigned int v747;
  char v748[4];
  int v749;
  _BYTE v750[36];
  float32x2_t v751;
  __int32 v752;
  float32x2_t v753;
  __int32 v754;
  float32x2_t v755;
  __int32 v756;
  _QWORD v757[2];
  char v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  std::__shared_weak_count *v762;
  uint64_t v763;
  std::__shared_weak_count *v764;
  int32x2_t *v765;
  __int128 v766;
  std::string v767;
  std::string __p;
  _BYTE v769[24];
  const char *v770;
  unint64_t v771;
  std::__shared_weak_count *v772;
  __int128 v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  __int128 v777;
  uint64_t v778;
  uint64_t v779;
  __int128 v780;
  uint64_t v781;
  uint64_t v782;
  __int128 v783;
  uint64_t v784;
  uint64_t v785;
  __int128 v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  uint64_t v793;
  __int128 v794;
  uint64_t v795;
  int v796;
  __int128 v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  int v804;
  char v805;
  _DWORD v806[4];
  _BYTE object[40];
  void *v808;
  size_t v809;
  unint64_t v810;
  void *v811;
  unint64_t v812;
  void *v813;
  char v814;
  unint64_t v815;
  int v816;
  uint64_t v817;
  _DWORD v818[4];
  std::string v819;
  uint64_t v820;
  __int128 v821;
  const char *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  __int128 v829;
  uint64_t v830;
  uint64_t v831;
  __int128 v832;
  uint64_t v833;
  uint64_t v834;
  __int128 v835;
  uint64_t v836;
  uint64_t v837;
  __int128 v838;
  uint64_t v839;
  uint64_t v840;
  __int128 v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  uint64_t v845;
  __int128 v846;
  uint64_t v847;
  int v848;
  __int128 v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  int v856;
  char v857;
  uint64_t v858;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v858 = *MEMORY[0x24BDAC8D0];
  v757[1] = 0;
  v757[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v758 = 1;
  kdebug_trace();
  if (!*(_BYTE *)(v7 + 21344)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2396, (uint64_t)"height_axis_dir_computed_", 25, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v731 = v7 + 21344;
  v8 = *(int *)(v7 + 21348);
  if (v8 > 4)
  {
    v9 = 1;
    v10 = 2;
  }
  else
  {
    v9 = dword_224666C68[v8];
    v10 = qword_224666C80[v8];
  }
  v715 = v10;
  sub_223AD47EC((uint64_t)v748, v8, *(_DWORD *)(v7 + 24));
  v12 = (*v4 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*v4 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v12 = (v4[1] & 0x7FFFFFFFu) < 0x7F800000;
    if ((v4[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v12 = (v4[2] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v12
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v11.i64[0] = *(_QWORD *)v4;
  v11.i32[2] = v4[2];
  v13 = vmulq_n_f32(v11, *(float *)(v7 + 316));
  v746 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v13.f32));
  v747 = vcvtms_s32_f32(v13.f32[2]);
  *(_QWORD *)object = v750;
  *(_QWORD *)&object[8] = &v746;
  sub_223AE5064((int *)&__p, (int **)object);
  v14 = *(_DWORD *)(v7 + 44);
  v15 = SLODWORD(__p.__r_.__value_.__l.__data_) / v749 - v14;
  v16 = SHIDWORD(__p.__r_.__value_.__r.__words[0]) / v749 - v14;
  v723 = v14;
  v17 = v14 + 1;
  v18 = v17 + SLODWORD(__p.__r_.__value_.__l.__data_) / v749;
  v19 = v17 + SHIDWORD(__p.__r_.__value_.__r.__words[0]) / v749;
  if (v18 >= v15)
    v20 = v15;
  else
    v20 = v17 + SLODWORD(__p.__r_.__value_.__l.__data_) / v749;
  if (v15 > v18)
    v18 = v15;
  if (v19 >= v16)
    v21 = v16;
  else
    v21 = v19;
  v745[0] = v20;
  v745[1] = v21;
  if (v16 > v19)
    v19 = v16;
  v745[2] = v18;
  v745[3] = v19;
  sub_223B67D98((float *)(v7 + 21416), v9, v746.i32[v715]);
  if (((*(_QWORD *)(v7 + 21456) - *(_QWORD *)(v7 + 21448)) & 0xFFFFFFFF0) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2419, (uint64_t)"floor_detection_.GetFloorCount() > 0 && \"Must detect at least 1 floor\"", 70, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.KeyframeOccupancy.FloorCount";
  *(_QWORD *)&object[24] = 34;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)&v760);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v22 = sub_2241471F8();
    v23 = v22[2];
    if (!v23)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v23 = v22[2];
    }
    v24 = *(_QWORD *)(v23 + 64);
    v25 = (std::mutex *)(v24 + 32);
    std::mutex::lock((std::mutex *)(v24 + 32));
    v27 = *(_QWORD *)(v24 + 96);
    v26 = *(_QWORD *)(v24 + 104);
    std::mutex::unlock(v25);
    if (v27 != v26)
    {
      sub_2241471F8();
      v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        LODWORD(v742) = (*(_QWORD *)(v7 + 21456) - *(_QWORD *)(v7 + 21448)) >> 4;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
        {
          v765 = (int32x2_t *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v766 = 2;
          v29 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
          {
            v30 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
            __p.__r_.__value_.__s.__data_[0] = 0;
            v769[0] = 0;
            sub_2235353F4((int *)&v742, (__int128 *)&__p, (__int128 *)&v765, &v819);
            sub_2231AA5A4((uint64_t)v29, v30, (uint64_t)&v819);
            v31 = (std::__shared_weak_count *)v819.__r_.__value_.__r.__words[2];
            if (v819.__r_.__value_.__r.__words[2])
            {
              v32 = (unint64_t *)(v819.__r_.__value_.__r.__words[2] + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (v769[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v34 = BYTE7(v761);
  if (SBYTE7(v761) < 0)
    v34 = *((_QWORD *)&v760 + 1);
  if (v34 >= 0x11)
  {
    v35 = &v760;
    if (SBYTE7(v761) < 0)
      v35 = (__int128 *)v760;
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    v38 = *((unsigned __int8 *)v35 + 16);
    _ZF = v36 == 0x6365722E64337663 && v37 == 0x73746174532E6E6FLL;
    if (_ZF && v38 == 46)
    {
      v41 = sub_223187510();
      v42 = BYTE7(v761);
      v43 = v760;
      LODWORD(__p.__r_.__value_.__l.__data_) = (*(_QWORD *)(v7 + 21456) - *(_QWORD *)(v7 + 21448)) >> 4;
      v44 = v41->n128_u64[0];
      v45 = (std::mutex *)(v41->n128_u64[0] + 152);
      std::mutex::lock(v45);
      if ((v42 & 0x80u) == 0)
        v46 = &v760;
      else
        v46 = (__int128 *)v43;
      if ((v42 & 0x80u) == 0)
        v47 = v42;
      else
        v47 = *((_QWORD *)&v43 + 1);
      sub_223FD45A8(v44 + 32, v46, v47, (unsigned int *)&__p);
      std::mutex::unlock(v45);
    }
  }
  kdebug_trace();
  if (SBYTE7(v761) < 0)
    operator delete((void *)v760);
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325632;
  kdebug_trace();
  v48 = *(_QWORD *)(v7 + 21456);
  v49 = *(_QWORD *)(v7 + 21448);
  mach_absolute_time();
  v50 = atomic_load((unsigned __int8 *)&qword_255795560);
  v714 = v7;
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v698) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v697) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v697 / (double)v698;
    __cxa_guard_release(&qword_255795560);
  }
  v51 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_223B62338((uint64_t)&qword_25578BBD0, (unint64_t)(v48 - v49) >> 4);
  kdebug_trace();
  v742 = 0;
  v743 = 0;
  v744 = 0;
  v52 = *(_BYTE **)(v7 + 21448);
  v53 = *(_BYTE **)(v7 + 21456);
  v54 = v53 - v52;
  if (v53 == v52)
  {
    v55 = 0;
    v56 = 0;
  }
  else
  {
    if (v54 < 0)
      sub_22316E078();
    v55 = (char *)operator new(v53 - v52);
    v56 = &v55[16 * (v54 >> 4)];
    v742 = v55;
    v744 = v56;
    memcpy(v55, v52, v54);
    v743 = v56;
  }
  *v2 = 0;
  v57 = v56 - v55;
  v58 = (v56 - v55) >> 4;
  v703 = (void **)(v7 + 21472);
  v59 = *(char **)(v7 + 21480);
  v60 = *(char **)(v7 + 21472);
  v61 = (v59 - v60) >> 4;
  if (v58 != v61)
  {
    *v2 = 1;
    if (v703 == &v742)
      goto LABEL_102;
LABEL_80:
    v64 = *(_QWORD *)(v7 + 21488);
    if (v58 > (v64 - (uint64_t)v60) >> 4)
    {
      if (v60)
      {
        *(_QWORD *)(v7 + 21480) = v60;
        operator delete(v60);
        v64 = 0;
        *v703 = 0;
        *(_QWORD *)(v7 + 21480) = 0;
        *(_QWORD *)(v7 + 21488) = 0;
      }
      if ((v57 & 0x8000000000000000) != 0)
        goto LABEL_996;
      v65 = v64 >> 3;
      if (v64 >> 3 <= v58)
        v65 = (v56 - v55) >> 4;
      v66 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v65;
      if (v66 >> 60)
LABEL_996:
        sub_22316E078();
      v67 = (char *)operator new(16 * v66);
      v60 = v67;
      *(_QWORD *)(v7 + 21472) = v67;
      *(_QWORD *)(v7 + 21480) = v67;
      *(_QWORD *)(v7 + 21488) = &v67[16 * v66];
      if (v56 != v55)
        memcpy(v67, v55, v56 - v55);
      goto LABEL_101;
    }
    if (v61 >= v58)
    {
      if (v56 != v55)
      {
        v69 = v60;
        v70 = v55;
LABEL_100:
        memmove(v69, v70, v57);
      }
    }
    else
    {
      v68 = &v55[16 * v61];
      if (v59 != v60)
      {
        memmove(v60, v55, v59 - v60);
        v60 = *(char **)(v7 + 21480);
        v57 = v56 - v68;
        if (v56 == v68)
          goto LABEL_101;
        goto LABEL_99;
      }
      v60 = v59;
      v57 = v56 - v68;
      if (v56 != v68)
      {
LABEL_99:
        v69 = v60;
        v70 = v68;
        goto LABEL_100;
      }
    }
LABEL_101:
    *(_QWORD *)(v7 + 21480) = &v60[v57];
    goto LABEL_102;
  }
  if (v59 != v60)
  {
    v62 = 0;
    do
    {
      v63 = 16 * v62;
      if (*(_DWORD *)&v60[v63] != *(_DWORD *)&v55[v63]
        || *(_DWORD *)&v60[v63 + 4] != *(_DWORD *)&v55[v63 + 4]
        || *(_DWORD *)&v60[v63 + 8] != *(_DWORD *)&v55[v63 + 8]
        || *(_DWORD *)&v60[v63 + 12] != *(_DWORD *)&v55[v63 + 12])
      {
        *v2 = 1;
      }
      ++v62;
    }
    while (v58 != v62);
  }
  if (v703 != &v742)
    goto LABEL_80;
LABEL_102:
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.KeyframeOccupancy.FloorsChanged";
  *(_QWORD *)&object[24] = 37;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)&v760);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v71 = sub_2241471F8();
    v72 = v71[2];
    if (!v72)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v72 = v71[2];
    }
    v73 = *(_QWORD *)(v72 + 64);
    v74 = (std::mutex *)(v73 + 32);
    std::mutex::lock((std::mutex *)(v73 + 32));
    v76 = *(_QWORD *)(v73 + 96);
    v75 = *(_QWORD *)(v73 + 104);
    std::mutex::unlock(v74);
    if (v76 != v75)
    {
      sub_2241471F8();
      v77 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77))
        {
          v765 = (int32x2_t *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v766 = 2;
          v78 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77))
          {
            v79 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 56))(v77);
            __p.__r_.__value_.__s.__data_[0] = 0;
            v769[0] = 0;
            sub_22393B020(v2, (__int128 *)&__p, (__int128 *)&v765, &v819);
            sub_2231AA5A4((uint64_t)v78, v79, (uint64_t)&v819);
            v80 = (std::__shared_weak_count *)v819.__r_.__value_.__r.__words[2];
            if (v819.__r_.__value_.__r.__words[2])
            {
              v81 = (unint64_t *)(v819.__r_.__value_.__r.__words[2] + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            if (v769[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v83 = BYTE7(v761);
  if (SBYTE7(v761) < 0)
    v83 = *((_QWORD *)&v760 + 1);
  if (v83 >= 0x11)
  {
    v84 = &v760;
    if (SBYTE7(v761) < 0)
      v84 = (__int128 *)v760;
    v85 = *(_QWORD *)v84;
    v86 = *((_QWORD *)v84 + 1);
    v87 = *((unsigned __int8 *)v84 + 16);
    if (v85 == 0x6365722E64337663 && v86 == 0x73746174532E6E6FLL && v87 == 46)
    {
      v90 = sub_223187510();
      v91 = BYTE7(v761);
      v92 = v760;
      v93 = v90->n128_u64[0];
      v94 = (std::mutex *)(v90->n128_u64[0] + 152);
      std::mutex::lock(v94);
      if ((v91 & 0x80u) == 0)
        v95 = &v760;
      else
        v95 = (__int128 *)v92;
      if ((v91 & 0x80u) == 0)
        v96 = v91;
      else
        v96 = *((_QWORD *)&v92 + 1);
      sub_223FD42F8(v93 + 104, v95, v96, v2);
      std::mutex::unlock(v94);
    }
  }
  kdebug_trace();
  v720 = v6;
  if (SBYTE7(v761) < 0)
  {
    operator delete((void *)v760);
    v97 = *v2;
    if (!*v2)
      goto LABEL_385;
  }
  else
  {
    v97 = *v2;
    if (!*v2)
      goto LABEL_385;
  }
  sub_22456D250("Updated floor information: %lu floors ", &v741, (uint64_t)(*(_QWORD *)(v7 + 21480) - *(_QWORD *)(v7 + 21472)) >> 4);
  v98 = *(unsigned int **)(v7 + 21472);
  for (i = *(unsigned int **)(v7 + 21480); v98 != i; v98 += 4)
  {
    v100 = (std::string *)v741.__r_.__value_.__r.__words[0];
    if ((v741.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = &v741;
    sub_22456D250("%s (min-max %i to %i, floor %i, ceiling %i)", (std::string *)object, v100, *v98, v98[1], v98[2], v98[3]);
    if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v741.__r_.__value_.__l.__data_);
    v741 = *(std::string *)object;
  }
  sub_223AF0EC4(&v763);
  if (**(int **)(v763 + 56) <= 3)
  {
    v101 = *(unsigned __int8 *)(v763 + 72);
    v102 = sub_22322F254(v763, "OSLogSurrogateAppender", 1, 0);
    v103 = v102;
    if (v101 || v102)
    {
      sub_223195210((uint64_t)object);
      if ((v741.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v104 = &v741;
      else
        v104 = (std::string *)v741.__r_.__value_.__r.__words[0];
      if ((v741.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v741.__r_.__value_.__r.__words[2]);
      else
        size = v741.__r_.__value_.__l.__size_;
      sub_2231813E8(&object[16], (uint64_t)v104, size);
      v726 = v101;
      if ((v816 & 0x10) != 0)
      {
        v108 = v815;
        if (v815 < v812)
        {
          v815 = v812;
          v108 = v812;
        }
        v109 = v811;
        v106 = v108 - (_QWORD)v811;
        if (v108 - (unint64_t)v811 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_217;
      }
      else
      {
        if ((v816 & 8) == 0)
        {
          v106 = 0;
          HIBYTE(v740) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_172;
        }
        v109 = v808;
        v106 = v810 - (_QWORD)v808;
        if (v810 - (unint64_t)v808 > 0x7FFFFFFFFFFFFFF7)
LABEL_217:
          sub_22316DBC0();
      }
      if (v106 >= 0x17)
      {
        v110 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v106 | 7) != 0x17)
          v110 = v106 | 7;
        v111 = v110 + 1;
        p_dst = (void **)operator new(v110 + 1);
        v739 = v106;
        v740 = v111 | 0x8000000000000000;
        __dst = (char *)p_dst;
      }
      else
      {
        HIBYTE(v740) = v106;
        p_dst = (void **)&__dst;
        if (!v106)
        {
LABEL_172:
          *((_BYTE *)p_dst + v106) = 0;
          v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&v763;
          v819.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v819.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v820) = 3;
          *(_QWORD *)&v821 = "unknown file";
          DWORD2(v821) = 2461;
          v824 = 0;
          v822 = "unknown function";
          v823 = 0;
          if (v740 >= 0)
            v112 = (const char *)&__dst;
          else
            v112 = __dst;
          v113 = *(_QWORD *)v819.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v819.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v115 = *(const char **)(v113 + 16);
            v114 = *(_QWORD *)(v113 + 24);
            v716 = *(_QWORD *)v819.__r_.__value_.__l.__data_ + 16;
            v116 = v2;
            v118 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v118 & 1) != 0)
              goto LABEL_179;
          }
          else
          {
            v114 = *(unsigned __int8 *)(*(_QWORD *)v819.__r_.__value_.__l.__data_ + 39);
            v115 = (const char *)(*(_QWORD *)v819.__r_.__value_.__l.__data_ + 16);
            v716 = (uint64_t)v115;
            v116 = v2;
            v117 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v117 & 1) != 0)
              goto LABEL_179;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&__p);
            sub_223199C58("com.apple.cv3d", (unint64_t)&__p, byte_255788F40);
            if (v769[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_179:
          if (byte_255788F40[23] >= 0)
            v119 = byte_255788F40;
          else
            v119 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v120 = byte_255788F40[23];
          else
            v120 = *(_QWORD *)&byte_255788F40[8];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v119, v115);
          p_size = &__p.__r_.__value_.__l.__size_;
          if (v120 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v120 >= 0x17)
          {
            v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v120 | 7) != 0x17)
              v122 = v120 | 7;
            v123 = v122 + 1;
            p_size = (std::string::size_type *)operator new(v122 + 1);
            *(_QWORD *)v769 = v123 | 0x8000000000000000;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            __p.__r_.__value_.__r.__words[2] = v120;
          }
          else
          {
            v769[7] = v120;
            if (!v120)
            {
LABEL_193:
              *((_BYTE *)p_size + v120) = 0;
              v769[8] = 1;
              v124 = &v769[16];
              if (v114 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v2 = v116;
              if (v114 >= 0x17)
              {
                v125 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v114 | 7) != 0x17)
                  v125 = v114 | 7;
                v126 = v125 + 1;
                v124 = operator new(v125 + 1);
                v771 = v126 | 0x8000000000000000;
                *(_QWORD *)&v769[16] = v124;
                v770 = (const char *)v114;
              }
              else
              {
                HIBYTE(v771) = v114;
                if (!v114)
                {
LABEL_201:
                  v124[v114] = 0;
                  LOBYTE(v772) = 1;
                  v127 = __p.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v771) < 0)
                    operator delete(*(void **)&v769[16]);
                  v7 = v714;
                  if (v769[8] && (v769[7] & 0x80000000) != 0)
                    operator delete((void *)__p.__r_.__value_.__l.__size_);
                  if (__p.__r_.__value_.__r.__words[0])
                    os_release(__p.__r_.__value_.__l.__data_);
                  if (!v103 || !*(_QWORD *)(v103 + 24))
                  {
                    os_log_type_enabled(v127, OS_LOG_TYPE_INFO);
                    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v112;
                    v134 = (void *)_os_log_send_and_compose_impl();
                    v135 = v726;
                    if (v134)
                      free(v134);
                    goto LABEL_281;
                  }
                  v128 = _os_log_pack_size();
                  v129 = operator new(v128, (std::align_val_t)8uLL);
                  v130 = (_QWORD *)operator new();
                  *v130 = &off_24EC1F7F0;
                  v130[1] = 0;
                  v130[2] = 0;
                  v130[3] = v129;
                  *(_QWORD *)&v760 = v129;
                  *((_QWORD *)&v760 + 1) = v129;
                  v762 = 0;
                  v761 = (unint64_t)v130;
                  v131 = strlen(v112);
                  if (v131 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v132 = v131;
                  if (v131 >= 0x17)
                  {
                    v136 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v131 | 7) != 0x17)
                      v136 = v131 | 7;
                    v137 = v136 + 1;
                    v133 = (int32x2_t *)operator new(v136 + 1);
                    *((_QWORD *)&v766 + 1) = v137 | 0x8000000000000000;
                    v765 = v133;
                    *(_QWORD *)&v766 = v132;
                  }
                  else
                  {
                    HIBYTE(v766) = v131;
                    v133 = (int32x2_t *)&v765;
                    if (!v131)
                    {
LABEL_222:
                      v133->i8[v132] = 0;
                      v138 = (int32x2_t)v765;
                      v767.__r_.__value_.__r.__words[0] = v766;
                      *(std::string::size_type *)((char *)v767.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v766 + 7);
                      v139 = HIBYTE(v766);
                      v140 = (char *)operator new(0x38uLL);
                      *((_QWORD *)v140 + 1) = 0;
                      *((_QWORD *)v140 + 2) = 0;
                      *((_QWORD *)v140 + 3) = off_24EC1FA48;
                      *(_QWORD *)v140 = &off_24EC1F9F8;
                      v141 = v767.__r_.__value_.__r.__words[0];
                      *((int32x2_t *)v140 + 4) = v138;
                      *((_QWORD *)v140 + 5) = v141;
                      *(_QWORD *)(v140 + 47) = *(std::string::size_type *)((char *)v767.__r_.__value_.__r.__words + 7);
                      v140[55] = v139;
                      v767.__r_.__value_.__r.__words[0] = 0;
                      *(std::string::size_type *)((char *)v767.__r_.__value_.__r.__words + 7) = 0;
                      v142 = v762;
                      *((_QWORD *)&v761 + 1) = v140 + 24;
                      v762 = (std::__shared_weak_count *)v140;
                      v7 = v714;
                      if (v142)
                      {
                        p_shared_owners = (unint64_t *)&v142->__shared_owners_;
                        do
                          v144 = __ldaxr(p_shared_owners);
                        while (__stlxr(v144 - 1, p_shared_owners));
                        if (!v144)
                        {
                          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                          std::__shared_weak_count::__release_weak(v142);
                        }
                      }
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v760;
                      v145 = *((_QWORD *)&v761 + 1);
                      __p.__r_.__value_.__r.__words[2] = v761;
                      if ((_QWORD)v761)
                      {
                        v146 = (unint64_t *)(v761 + 8);
                        do
                          v147 = __ldxr(v146);
                        while (__stxr(v147 + 1, v146));
                      }
                      v148 = v762;
                      *(_QWORD *)v769 = v145;
                      *(_QWORD *)&v769[8] = v762;
                      if (v762)
                      {
                        v149 = (unint64_t *)&v762->__shared_owners_;
                        do
                          v150 = __ldxr(v149);
                        while (__stxr(v150 + 1, v149));
                        *(_QWORD *)&v769[16] = v145;
                        do
                          v151 = __ldaxr(v149);
                        while (__stlxr(v151 - 1, v149));
                        if (!v151)
                        {
                          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                          std::__shared_weak_count::__release_weak(v148);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v769[16] = v145;
                      }
                      v152 = (std::__shared_weak_count *)v761;
                      if ((_QWORD)v761)
                      {
                        v153 = (unint64_t *)(v761 + 8);
                        do
                          v154 = __ldaxr(v153);
                        while (__stlxr(v154 - 1, v153));
                        if (!v154)
                        {
                          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                          std::__shared_weak_count::__release_weak(v152);
                        }
                      }
                      v155 = __p.__r_.__value_.__r.__words[0];
                      if (*(char *)(*(_QWORD *)&v769[16] + 31) >= 0)
                        v156 = *(_QWORD *)&v769[16] + 8;
                      else
                        v156 = *(_QWORD *)(*(_QWORD *)&v769[16] + 8);
                      v157 = _os_log_pack_fill();
                      *(_DWORD *)v157 = 136315138;
                      *(_QWORD *)(v157 + 4) = v156;
                      v158 = operator new();
                      v159 = *(unsigned __int8 *)(v113 + 39);
                      v160 = v716;
                      if ((v159 & 0x80u) != 0)
                      {
                        v160 = *(_QWORD *)(v113 + 16);
                        v159 = *(_QWORD *)(v113 + 24);
                      }
                      *(_QWORD *)v158 = v155;
                      *(_OWORD *)(v158 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v158 + 24) = *(_OWORD *)v769;
                      *(_QWORD *)v769 = 0;
                      *(_QWORD *)&v769[8] = 0;
                      *(_QWORD *)(v158 + 40) = v160;
                      *(_QWORD *)(v158 + 48) = v159;
                      *(_BYTE *)(v158 + 56) = 1;
                      v765 = 0;
                      *(_QWORD *)&v760 = v158;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v103 + 24) + 40))(*(_QWORD *)(v103 + 24), &v760);
                      v161 = v760;
                      *(_QWORD *)&v760 = 0;
                      v135 = v726;
                      if (v161)
                      {
                        v162 = *(std::__shared_weak_count **)(v161 + 32);
                        if (v162)
                        {
                          v163 = (unint64_t *)&v162->__shared_owners_;
                          do
                            v164 = __ldaxr(v163);
                          while (__stlxr(v164 - 1, v163));
                          if (!v164)
                          {
                            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                            std::__shared_weak_count::__release_weak(v162);
                          }
                        }
                        v165 = *(std::__shared_weak_count **)(v161 + 16);
                        if (v165)
                        {
                          v166 = (unint64_t *)&v165->__shared_owners_;
                          do
                            v167 = __ldaxr(v166);
                          while (__stlxr(v167 - 1, v166));
                          if (!v167)
                          {
                            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                            std::__shared_weak_count::__release_weak(v165);
                          }
                        }
                        MEMORY[0x227684CE8](v161, 0x10F0C40B62ED6C6);
                        v168 = (int32x2_t)v765;
                        v765 = 0;
                        if (v168)
                        {
                          v169 = *(std::__shared_weak_count **)(*(_QWORD *)&v168 + 32);
                          if (v169)
                          {
                            v170 = (unint64_t *)&v169->__shared_owners_;
                            do
                              v171 = __ldaxr(v170);
                            while (__stlxr(v171 - 1, v170));
                            if (!v171)
                            {
                              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                              std::__shared_weak_count::__release_weak(v169);
                            }
                          }
                          v172 = *(std::__shared_weak_count **)(*(_QWORD *)&v168 + 16);
                          if (v172)
                          {
                            v173 = (unint64_t *)&v172->__shared_owners_;
                            do
                              v174 = __ldaxr(v173);
                            while (__stlxr(v174 - 1, v173));
                            if (!v174)
                            {
                              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                              std::__shared_weak_count::__release_weak(v172);
                            }
                          }
                          MEMORY[0x227684CE8](*(_QWORD *)&v168, 0x10F0C40B62ED6C6);
                        }
                      }
                      v175 = *(std::__shared_weak_count **)&v769[8];
                      if (*(_QWORD *)&v769[8])
                      {
                        v176 = (unint64_t *)(*(_QWORD *)&v769[8] + 8);
                        do
                          v177 = __ldaxr(v176);
                        while (__stlxr(v177 - 1, v176));
                        if (!v177)
                        {
                          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                          std::__shared_weak_count::__release_weak(v175);
                        }
                      }
                      v178 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                      if (__p.__r_.__value_.__r.__words[2])
                      {
                        v179 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                        do
                          v180 = __ldaxr(v179);
                        while (__stlxr(v180 - 1, v179));
                        if (!v180)
                        {
                          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                          std::__shared_weak_count::__release_weak(v178);
                        }
                      }
LABEL_281:
                      if (v135)
                      {
                        v181 = (const char *)&__dst;
                        if (v740 < 0)
                          v181 = __dst;
                        sub_22322C138((uint64_t)&v819, "%s", v181);
                        sub_223182C08((uint64_t)&v819);
                      }
                      sub_223182C08((uint64_t)&v819);
                      v182 = v824;
                      if (v824)
                      {
                        v183 = (unint64_t *)&v824->__shared_owners_;
                        do
                          v184 = __ldaxr(v183);
                        while (__stlxr(v184 - 1, v183));
                        if (!v184)
                        {
                          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                          std::__shared_weak_count::__release_weak(v182);
                        }
                      }
                      if (SHIBYTE(v740) < 0)
                        operator delete(__dst);
                      *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                      v185 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&object[16] = v185;
                      *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
                      if (v814 < 0)
                        operator delete(v813);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x227684BE0](&v817);
                      goto LABEL_295;
                    }
                  }
                  memcpy(v133, v112, v132);
                  goto LABEL_222;
                }
              }
              memmove(v124, v115, v114);
              goto LABEL_201;
            }
          }
          memmove(p_size, v119, v120);
          goto LABEL_193;
        }
      }
      memmove(p_dst, v109, v106);
      goto LABEL_172;
    }
  }
LABEL_295:
  v186 = *(_QWORD **)(v7 + 21504);
  for (j = *(_QWORD **)(v7 + 21496); v186 != j; v186 = sub_22388AEE8(v186 - 46))
    ;
  v717 = v2;
  *(_QWORD *)(v7 + 21504) = j;
  v188 = *(_QWORD **)(v7 + 21400);
  v189 = *(_QWORD **)(v7 + 21392);
  while (v188 != v189)
  {
    v190 = (_QWORD *)*(v188 - 3);
    if (v190)
    {
      do
      {
        v191 = (_QWORD *)*v190;
        operator delete(v190);
        v190 = v191;
      }
      while (v191);
    }
    v193 = (void *)*(v188 - 5);
    v188 -= 5;
    v192 = v193;
    *v188 = 0;
    if (v193)
      operator delete(v192);
  }
  *(_QWORD *)(v7 + 21400) = v189;
  v194 = *(_QWORD *)(v7 + 21480) - *(_QWORD *)(v7 + 21472);
  if (v194)
  {
    v195 = 0;
    v196 = v194 >> 4;
    v727 = v7 + 21512;
    do
    {
      v198 = *(float *)(v7 + 312);
      v199 = *(_QWORD *)(v7 + 21472) + 16 * v195;
      v200 = v7;
      v201 = *(_QWORD *)(v7 + 21504);
      v202 = *(_QWORD *)(v200 + 21512);
      v203 = *(_DWORD *)(v200 + 24);
      v204 = *(_DWORD *)(v200 + 40);
      v206 = *(_DWORD *)(v199 + 8);
      v205 = *(_DWORD *)(v199 + 12);
      if (v201 >= v202)
      {
        v209 = *(_QWORD *)(v200 + 21496);
        v210 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v201 - v209) >> 4);
        v211 = v210 + 1;
        if (v210 + 1 > 0xB21642C8590B21)
          sub_22316E078();
        v212 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v202 - v209) >> 4);
        if (2 * v212 > v211)
          v211 = 2 * v212;
        if (v212 >= 0x590B21642C8590)
          v213 = 0xB21642C8590B21;
        else
          v213 = v211;
        *(_QWORD *)&object[32] = v727;
        if (v213)
        {
          if (v213 > 0xB21642C8590B21)
            sub_223174E94();
          v214 = (char *)operator new(368 * v213);
        }
        else
        {
          v214 = 0;
        }
        *(_QWORD *)object = v214;
        *(_QWORD *)&object[8] = &v214[368 * v210];
        *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
        *(_QWORD *)&object[24] = &v214[368 * v213];
        sub_223AD5364(*(uint64_t *)&object[8], v203, v204, v206, v205, 3, v198);
        v215 = *(_QWORD *)&object[8];
        v208 = *(_QWORD *)&object[16] + 368;
        v7 = v714;
        v216 = *(char **)(v714 + 21504);
        v217 = *(char **)(v714 + 21496);
        if (v216 == v217)
        {
          *(_QWORD *)(v714 + 21496) = *(_QWORD *)&object[8];
          *(_QWORD *)(v714 + 21504) = v208;
          *(_QWORD *)(v714 + 21512) = *(_QWORD *)&object[24];
        }
        else
        {
          v218 = 0;
          do
          {
            v228 = v215 + v218;
            v229 = &v216[v218];
            *(_QWORD *)(v215 + v218 - 368) = *(_QWORD *)&v216[v218 - 368];
            v230 = v215 + v218 - 360;
            v231 = *(_OWORD *)&v216[v218 - 360];
            v232 = *(_OWORD *)&v216[v218 - 344];
            *(_DWORD *)(v230 + 32) = *(_DWORD *)&v216[v218 - 328];
            *(_OWORD *)v230 = v231;
            *(_OWORD *)(v230 + 16) = v232;
            v233 = v215 + v218 - 324;
            v234 = *(_OWORD *)&v216[v218 - 324];
            v235 = *(_OWORD *)&v216[v218 - 308];
            *(_DWORD *)(v233 + 32) = *(_DWORD *)&v216[v218 - 292];
            *(_OWORD *)v233 = v234;
            *(_OWORD *)(v233 + 16) = v235;
            v236 = (_OWORD *)(v215 + v218 - 288);
            v237 = *(_OWORD *)&v216[v218 - 288];
            v238 = *(_OWORD *)&v216[v218 - 272];
            *(_DWORD *)(v228 - 256) = *(_DWORD *)&v216[v218 - 256];
            *v236 = v237;
            v236[1] = v238;
            v239 = *(_OWORD *)&v216[v218 - 252];
            v240 = *(_OWORD *)&v216[v218 - 236];
            *(_DWORD *)(v228 - 220) = *(_DWORD *)&v216[v218 - 220];
            *(_OWORD *)(v228 - 236) = v240;
            *(_OWORD *)(v228 - 252) = v239;
            *(_DWORD *)(v228 - 216) = *(_DWORD *)&v216[v218 - 216];
            v241 = *(_QWORD *)&v216[v218 - 208];
            *((_QWORD *)v229 - 26) = 0;
            *(_QWORD *)(v228 - 208) = v241;
            *(_QWORD *)(v228 - 200) = *(_QWORD *)&v216[v218 - 200];
            *((_QWORD *)v229 - 25) = 0;
            v242 = *(_QWORD *)&v216[v218 - 192];
            *(_QWORD *)(v215 + v218 - 192) = v242;
            v243 = *(_QWORD *)&v216[v218 - 184];
            *(_QWORD *)(v228 - 184) = v243;
            *(_DWORD *)(v228 - 176) = *(_DWORD *)&v216[v218 - 176];
            if (v243)
            {
              v244 = *(_QWORD *)(v242 + 8);
              v245 = *(_QWORD *)(v228 - 200);
              if ((v245 & (v245 - 1)) != 0)
              {
                if (v244 >= v245)
                  v244 %= v245;
              }
              else
              {
                v244 &= v245 - 1;
              }
              *(_QWORD *)(v241 + 8 * v244) = v215 + v218 - 192;
              *(_QWORD *)&v216[v218 - 192] = 0;
              *(_QWORD *)&v216[v218 - 184] = 0;
            }
            *(_DWORD *)(v228 - 168) = *((_DWORD *)v229 - 42);
            v246 = *((_QWORD *)v229 - 20);
            *((_QWORD *)v229 - 20) = 0;
            *(_QWORD *)(v228 - 160) = v246;
            *(_QWORD *)(v228 - 152) = *((_QWORD *)v229 - 19);
            *((_QWORD *)v229 - 19) = 0;
            v249 = *((_QWORD *)v229 - 18);
            v247 = v229 - 144;
            v248 = v249;
            *(_QWORD *)(v228 - 144) = v249;
            v250 = v228 - 144;
            v251 = *((_QWORD *)v247 + 1);
            *(_QWORD *)(v228 - 136) = v251;
            *(_DWORD *)(v228 - 128) = *((_DWORD *)v247 + 4);
            if (v251)
            {
              v219 = *(_QWORD *)(v248 + 8);
              v252 = *(_QWORD *)(v228 - 152);
              if ((v252 & (v252 - 1)) != 0)
              {
                if (v219 >= v252)
                  v219 %= v252;
              }
              else
              {
                v219 &= v252 - 1;
              }
              *(_QWORD *)(v246 + 8 * v219) = v250;
              *(_QWORD *)v247 = 0;
              *((_QWORD *)v247 + 1) = 0;
            }
            v220 = v215 + v218;
            v221 = &v216[v218];
            *(_DWORD *)(v220 - 120) = *(_DWORD *)&v216[v218 - 120];
            v222 = *(_OWORD *)&v216[v218 - 116];
            *(_DWORD *)(v220 - 100) = *(_DWORD *)&v216[v218 - 100];
            *(_OWORD *)(v220 - 116) = v222;
            v223 = *(_QWORD *)&v216[v218 - 96];
            *(_DWORD *)(v220 - 88) = *(_DWORD *)&v216[v218 - 88];
            *(_QWORD *)(v220 - 96) = v223;
            v224 = *(_OWORD *)&v216[v218 - 84];
            *(_DWORD *)(v220 - 68) = *(_DWORD *)&v216[v218 - 68];
            *(_OWORD *)(v220 - 84) = v224;
            v225 = *(_QWORD *)&v216[v218 - 64];
            *(_DWORD *)(v220 - 56) = *(_DWORD *)&v216[v218 - 56];
            *(_QWORD *)(v220 - 64) = v225;
            v226 = *(_QWORD *)&v216[v218 - 52];
            *(_BYTE *)(v220 - 44) = v216[v218 - 44];
            *(_QWORD *)(v220 - 52) = v226;
            *(_QWORD *)(v220 - 32) = 0;
            *(_QWORD *)(v220 - 24) = 0;
            *(_QWORD *)(v220 - 40) = 0;
            *(_OWORD *)(v220 - 40) = *(_OWORD *)&v216[v218 - 40];
            *(_QWORD *)(v220 - 24) = *(_QWORD *)&v216[v218 - 24];
            *((_QWORD *)v221 - 5) = 0;
            *((_QWORD *)v221 - 4) = 0;
            *((_QWORD *)v221 - 3) = 0;
            v227 = *(_QWORD *)&v216[v218 - 16];
            *(_DWORD *)(v220 - 8) = *(_DWORD *)&v216[v218 - 8];
            *(_QWORD *)(v220 - 16) = v227;
            v218 -= 368;
          }
          while (&v216[v218] != v217);
          v216 = *(char **)(v714 + 21496);
          v253 = *(char **)(v714 + 21504);
          *(_QWORD *)(v714 + 21496) = v215 + v218;
          *(_QWORD *)(v714 + 21504) = v208;
          *(_QWORD *)(v714 + 21512) = *(_QWORD *)&object[24];
          while (v253 != v216)
          {
            v254 = *((_QWORD *)v253 - 5);
            if (v254)
            {
              v255 = *((_QWORD *)v253 - 4);
              v256 = (void *)*((_QWORD *)v253 - 5);
              if (v255 != v254)
              {
                do
                  v255 = sub_22388925C(v255 - 464);
                while (v255 != v254);
                v256 = (void *)*((_QWORD *)v253 - 5);
              }
              *((_QWORD *)v253 - 4) = v254;
              operator delete(v256);
            }
            v257 = (_QWORD *)*((_QWORD *)v253 - 18);
            if (v257)
            {
              do
              {
                v258 = (_QWORD *)*v257;
                operator delete(v257);
                v257 = v258;
              }
              while (v258);
            }
            v259 = (void *)*((_QWORD *)v253 - 20);
            *((_QWORD *)v253 - 20) = 0;
            if (v259)
              operator delete(v259);
            v260 = (_QWORD *)*((_QWORD *)v253 - 24);
            if (v260)
            {
              do
              {
                v261 = (_QWORD *)*v260;
                sub_22388AFA4(v260 + 3);
                operator delete(v260);
                v260 = v261;
              }
              while (v261);
            }
            v262 = (void *)*((_QWORD *)v253 - 26);
            *((_QWORD *)v253 - 26) = 0;
            if (v262)
              operator delete(v262);
            v253 -= 368;
          }
        }
        if (v216)
          operator delete(v216);
      }
      else
      {
        sub_223AD47EC(v201, 5u, *(_DWORD *)(v200 + 24));
        *(_OWORD *)(v201 + 248) = 0u;
        v207 = v201 + 248;
        *(float *)(v207 - 96) = v198;
        *(_OWORD *)(v207 - 88) = 0u;
        *(_OWORD *)(v207 - 72) = 0u;
        *(_DWORD *)(v207 - 56) = 1065353216;
        *(_DWORD *)(v207 - 48) = 0;
        *(_OWORD *)(v207 - 40) = 0u;
        *(_OWORD *)(v207 - 24) = 0u;
        *(_DWORD *)(v207 - 8) = 1065353216;
        *(_OWORD *)(v207 + 16) = 0u;
        *(_OWORD *)(v207 + 32) = 0u;
        *(_WORD *)(v207 + 48) = 3341;
        *(_BYTE *)(v207 + 50) = 13;
        *(_DWORD *)(v207 + 52) = -1;
        *(_DWORD *)(v207 + 72) = 0;
        *(_BYTE *)(v207 + 76) = 0;
        *(_QWORD *)(v207 + 56) = 0;
        *(_QWORD *)(v207 + 61) = 0;
        *(_QWORD *)(v207 + 80) = 0;
        *(_QWORD *)(v207 + 88) = 0;
        *(_QWORD *)(v207 + 96) = 0;
        *(_DWORD *)(v207 + 108) = v206;
        *(_DWORD *)(v207 + 112) = v205;
        *(float *)(v207 + 104) = fminf(fmaxf((float)((float)v204 * 0.025) + 0.025, 0.025), 0.4);
        v208 = v207 + 120;
        v7 = v714;
        *(_QWORD *)(v714 + 21504) = v208;
      }
      *(_QWORD *)(v7 + 21504) = v208;
      sub_223AD5250((unsigned int *)(v208 - 368), *(_DWORD *)(v731 + 4));
      v263 = *(_OWORD **)(v7 + 21400);
      v264 = *(_QWORD *)(v7 + 21408);
      if ((unint64_t)v263 < v264)
      {
        *v263 = 0u;
        v263[1] = 0u;
        v197 = (char *)v263 + 40;
        *((_DWORD *)v263 + 8) = 1065353216;
      }
      else
      {
        v265 = *(_BYTE **)(v7 + 21392);
        v266 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v263 - v265) >> 3) + 1;
        if (v266 > 0x666666666666666)
          sub_22316E078();
        v267 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v264 - (_QWORD)v265) >> 3);
        if (2 * v267 > v266)
          v266 = 2 * v267;
        if (v267 >= 0x333333333333333)
          v268 = 0x666666666666666;
        else
          v268 = v266;
        if (v268)
        {
          if (v268 > 0x666666666666666)
            sub_223174E94();
          v269 = (char *)operator new(40 * v268);
        }
        else
        {
          v269 = 0;
        }
        v270 = &v269[8 * (((char *)v263 - v265) >> 3)];
        v271 = &v269[40 * v268];
        *(_OWORD *)v270 = 0u;
        *((_OWORD *)v270 + 1) = 0u;
        *((_DWORD *)v270 + 8) = 1065353216;
        v197 = v270 + 40;
        if (v263 == (_OWORD *)v265)
        {
          *(_QWORD *)(v7 + 21392) = v270;
          *(_QWORD *)(v7 + 21400) = v197;
          *(_QWORD *)(v7 + 21408) = v271;
        }
        else
        {
          v272 = 0;
          do
          {
            v274 = &v270[v272];
            v275 = (char *)v263 + v272;
            v276 = *(_QWORD *)((char *)v263 + v272 - 40);
            *((_QWORD *)v275 - 5) = 0;
            *((_QWORD *)v274 - 5) = v276;
            v277 = *(_QWORD *)((char *)v263 + v272 - 32);
            *((_QWORD *)v274 - 4) = v277;
            *((_QWORD *)v275 - 4) = 0;
            v278 = *(_QWORD *)((char *)v263 + v272 - 24);
            *((_QWORD *)v274 - 3) = v278;
            v279 = (uint64_t)&v270[v272 - 24];
            v280 = *(_QWORD *)((char *)v263 + v272 - 16);
            *(_QWORD *)(v279 + 8) = v280;
            *(_DWORD *)(v279 + 16) = *(_DWORD *)((char *)v263 + v272 - 8);
            if (v280)
            {
              v273 = *(_QWORD *)(v278 + 8);
              if ((v277 & (v277 - 1)) != 0)
              {
                if (v273 >= v277)
                  v273 %= v277;
              }
              else
              {
                v273 &= v277 - 1;
              }
              *(_QWORD *)(v276 + 8 * v273) = v279;
              *(_QWORD *)((char *)v263 + v272 - 24) = 0;
              *(_QWORD *)((char *)v263 + v272 - 16) = 0;
            }
            v272 -= 40;
          }
          while ((char *)v263 + v272 != v265);
          v263 = *(_OWORD **)(v7 + 21392);
          v281 = *(_QWORD **)(v7 + 21400);
          *(_QWORD *)(v7 + 21392) = &v270[v272];
          *(_QWORD *)(v7 + 21400) = v197;
          *(_QWORD *)(v7 + 21408) = v271;
          while (v281 != (_QWORD *)v263)
          {
            v282 = (_QWORD *)*(v281 - 3);
            if (v282)
            {
              do
              {
                v283 = (_QWORD *)*v282;
                operator delete(v282);
                v282 = v283;
              }
              while (v283);
            }
            v285 = (void *)*(v281 - 5);
            v281 -= 5;
            v284 = v285;
            *v281 = 0;
            if (v285)
              operator delete(v284);
          }
        }
        if (v263)
          operator delete(v263);
      }
      *(_QWORD *)(v7 + 21400) = v197;
      ++v195;
    }
    while (v195 != v196);
  }
  if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v741.__r_.__value_.__l.__data_);
  v2 = v717;
  v97 = *v717;
LABEL_385:
  v286 = *(float *)(v7 + 52);
  if (v286 <= 4.0)
    v287 = *(float *)(v7 + 52);
  else
    v287 = 4.0;
  v288 = *(float *)(v7 + 312);
  if (v286 >= 4.0)
    v289 = *(float *)(v7 + 52);
  else
    v289 = 4.0;
  v290 = (v723 > 0) & (v97 == 0);
  _ZF = (_DWORD)v290 == 0;
  *((_QWORD *)&v706 + 1) = v290;
  v291 = v745;
  if (_ZF)
    v291 = 0;
  *(_QWORD *)&v706 = v291;
  v737 = 0;
  v292 = *(int8x8_t **)(v7 + 21496);
  v293 = *(int8x8_t **)(v7 + 21504);
  if (v292 != v293)
  {
    do
    {
      *(_QWORD *)object = operator new(0x28uLL);
      *(_OWORD *)&object[8] = xmmword_2245B8D40;
      strcpy(*(char **)object, "ComputeRoomBoundaries-BeforeUpdate");
      sub_223AD5BA8(v292, (uint64_t)object, 0, 0);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      v294 = v737 + sub_223AD56D8(v292, (int *)v706, SBYTE8(v706));
      v737 = v294;
      v292 += 46;
    }
    while (v292 != v293);
    if (v294)
    {
      sub_223AF0EC4(&v765);
      if (**(int **)&v765[7] > 5)
        goto LABEL_487;
      v295 = v765[9].u8[0];
      v296 = sub_22322F254((uint64_t)v765, "OSLogSurrogateAppender", 1, 0);
      v297 = v296;
      if (!v295 && !v296)
        goto LABEL_487;
      v732 = v295;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      *(_DWORD *)v769 = 5;
      *(_QWORD *)&v769[8] = "unknown file";
      *(_DWORD *)&v769[16] = 2498;
      v772 = 0;
      v770 = "unknown function";
      v771 = 0;
      v298 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v299 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
      v728 = v299;
      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v299 = *(const char **)(v298 + 16);
        v300 = *(_QWORD *)(v298 + 24);
        v301 = v2;
        v303 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v303 & 1) != 0)
          goto LABEL_406;
      }
      else
      {
        v300 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
        v301 = v2;
        v302 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v302 & 1) != 0)
          goto LABEL_406;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_406:
      if (byte_255788F40[23] >= 0)
        v304 = byte_255788F40;
      else
        v304 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v305 = byte_255788F40[23];
      else
        v305 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)object = os_log_create(v304, v299);
      v306 = &object[8];
      if (v305 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v305 >= 0x17)
      {
        v307 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v305 | 7) != 0x17)
          v307 = v305 | 7;
        v308 = v307 + 1;
        v306 = operator new(v307 + 1);
        *(_QWORD *)&object[24] = v308 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v306;
        *(_QWORD *)&object[16] = v305;
      }
      else
      {
        object[31] = v305;
        if (!v305)
        {
LABEL_420:
          v306[v305] = 0;
          object[32] = 1;
          v309 = &v808;
          if (v300 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v7 = v714;
          v2 = v301;
          if (v300 >= 0x17)
          {
            v310 = (v300 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v300 | 7) != 0x17)
              v310 = v300 | 7;
            v311 = v310 + 1;
            v309 = operator new(v310 + 1);
            v810 = v311 | 0x8000000000000000;
            v808 = v309;
            v809 = v300;
          }
          else
          {
            HIBYTE(v810) = v300;
            if (!v300)
              goto LABEL_428;
          }
          memmove(v309, v299, v300);
LABEL_428:
          *((_BYTE *)v309 + v300) = 0;
          LOBYTE(v811) = 1;
          v312 = *(NSObject **)object;
          if (SHIBYTE(v810) < 0)
            operator delete(v808);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v297 && *(_QWORD *)(v297 + 24))
          {
            v313 = _os_log_pack_size();
            v314 = (std::__shared_weak_count_vtbl *)operator new(v313, (std::align_val_t)8uLL);
            v315 = (std::__shared_weak_count *)operator new();
            v316 = v315;
            v315->__shared_owners_ = 0;
            v317 = (unint64_t *)&v315->__shared_owners_;
            v315->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v315->__shared_weak_owners_ = 0;
            v315[1].__vftable = v314;
            *(_QWORD *)object = v314;
            *(_QWORD *)&object[8] = v314;
            *(_QWORD *)&object[16] = v315;
            do
              v318 = __ldxr(v317);
            while (__stxr(v318 + 1, v317));
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)&object[24] = 0;
            v808 = 0;
            do
              v319 = __ldaxr(v317);
            while (__stlxr(v319 - 1, v317));
            if (!v319)
            {
              ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
              std::__shared_weak_count::__release_weak(v316);
            }
            v320 = *(_QWORD *)object;
            v321 = (_DWORD *)_os_log_pack_fill();
            v322 = v737;
            *v321 = 67109120;
            v321[1] = v322;
            v323 = operator new();
            v324 = *(unsigned __int8 *)(v298 + 39);
            v325 = v728;
            if ((v324 & 0x80u) != 0)
            {
              v325 = *(const char **)(v298 + 16);
              v324 = *(_QWORD *)(v298 + 24);
            }
            *(_QWORD *)v323 = v320;
            *(_OWORD *)(v323 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v323 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v323 + 40) = v325;
            *(_QWORD *)(v323 + 48) = v324;
            *(_BYTE *)(v323 + 56) = 16;
            *(_QWORD *)&v760 = 0;
            v819.__r_.__value_.__r.__words[0] = v323;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v297 + 24) + 40))(*(_QWORD *)(v297 + 24), &v819);
            v326 = v819.__r_.__value_.__r.__words[0];
            v819.__r_.__value_.__r.__words[0] = 0;
            v327 = v732;
            if (v326)
            {
              v328 = *(std::__shared_weak_count **)(v326 + 32);
              if (v328)
              {
                v329 = (unint64_t *)&v328->__shared_owners_;
                do
                  v330 = __ldaxr(v329);
                while (__stlxr(v330 - 1, v329));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                  std::__shared_weak_count::__release_weak(v328);
                }
              }
              v331 = *(std::__shared_weak_count **)(v326 + 16);
              if (v331)
              {
                v332 = (unint64_t *)&v331->__shared_owners_;
                do
                  v333 = __ldaxr(v332);
                while (__stlxr(v333 - 1, v332));
                if (!v333)
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
              }
              MEMORY[0x227684CE8](v326, 0x10F0C40B62ED6C6);
              v334 = v760;
              *(_QWORD *)&v760 = 0;
              if (v334)
              {
                v335 = *(std::__shared_weak_count **)(v334 + 32);
                if (v335)
                {
                  v336 = (unint64_t *)&v335->__shared_owners_;
                  do
                    v337 = __ldaxr(v336);
                  while (__stlxr(v337 - 1, v336));
                  if (!v337)
                  {
                    ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                    std::__shared_weak_count::__release_weak(v335);
                  }
                }
                v338 = *(std::__shared_weak_count **)(v334 + 16);
                if (v338)
                {
                  v339 = (unint64_t *)&v338->__shared_owners_;
                  do
                    v340 = __ldaxr(v339);
                  while (__stlxr(v340 - 1, v339));
                  if (!v340)
                  {
                    ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                    std::__shared_weak_count::__release_weak(v338);
                  }
                }
                MEMORY[0x227684CE8](v334, 0x10F0C40B62ED6C6);
              }
            }
            v341 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v342 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v343 = __ldaxr(v342);
              while (__stlxr(v343 - 1, v342));
              if (!v343)
              {
                ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                std::__shared_weak_count::__release_weak(v341);
              }
            }
            v344 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v345 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v346 = __ldaxr(v345);
              while (__stlxr(v346 - 1, v345));
              if (!v346)
              {
                ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                std::__shared_weak_count::__release_weak(v344);
              }
            }
          }
          else
          {
            os_log_type_enabled(v312, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 67109120;
            *(_DWORD *)&object[4] = v737;
            v347 = (void *)_os_log_send_and_compose_impl();
            v327 = v732;
            if (v347)
              free(v347);
          }
          if (v327)
          {
            sub_22322C138((uint64_t)&__p, "Invalid voxels in incremental clustering %d", v737);
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182C08((uint64_t)&__p);
          v348 = v772;
          if (v772)
          {
            v349 = (unint64_t *)&v772->__shared_owners_;
            do
              v350 = __ldaxr(v349);
            while (__stlxr(v350 - 1, v349));
            if (!v350)
            {
              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
              std::__shared_weak_count::__release_weak(v348);
            }
          }
LABEL_487:
          sub_223AF24D8(&v765);
          if (**(int **)&v765[7] > 3
            || ((v351 = v765[9].u8[0],
                 v352 = sub_22322F254((uint64_t)v765, "OSLogSurrogateAppender", 1, 0),
                 v353 = v352,
                 !v351)
              ? (v354 = v352 == 0)
              : (v354 = 0),
                v354))
          {
LABEL_577:
            v408 = *(_QWORD **)(v7 + 21496);
            for (k = *(_QWORD **)(v7 + 21504); v408 != k; v408 += 46)
              sub_223AD56D8(v408, 0, 0);
            v706 = 0uLL;
            goto LABEL_580;
          }
          v724 = v351;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          *(_DWORD *)v769 = 3;
          *(_QWORD *)&v769[8] = "unknown file";
          *(_DWORD *)&v769[16] = 2499;
          v772 = 0;
          v770 = "unknown function";
          v771 = 0;
          v729 = *(_QWORD *)(v7 + 21496);
          v733 = *(_QWORD *)(v7 + 21504);
          v355 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v356 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v718 = v356;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v356 = *(const char **)(v355 + 16);
            v357 = *(_QWORD *)(v355 + 24);
            v358 = v2;
            v360 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v360 & 1) != 0)
              goto LABEL_496;
          }
          else
          {
            v357 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v358 = v2;
            v359 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v359 & 1) != 0)
              goto LABEL_496;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)object);
            sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_496:
          if (byte_255788F40[23] >= 0)
            v361 = byte_255788F40;
          else
            v361 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v362 = byte_255788F40[23];
          else
            v362 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)object = os_log_create(v361, v356);
          v363 = &object[8];
          if (v362 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v362 >= 0x17)
          {
            v364 = (v362 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v362 | 7) != 0x17)
              v364 = v362 | 7;
            v365 = v364 + 1;
            v363 = operator new(v364 + 1);
            *(_QWORD *)&object[24] = v365 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v363;
            *(_QWORD *)&object[16] = v362;
          }
          else
          {
            object[31] = v362;
            if (!v362)
            {
LABEL_510:
              v363[v362] = 0;
              object[32] = 1;
              v366 = &v808;
              if (v357 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v7 = v714;
              v2 = v358;
              if (v357 >= 0x17)
              {
                v367 = (v357 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v357 | 7) != 0x17)
                  v367 = v357 | 7;
                v368 = v367 + 1;
                v366 = operator new(v367 + 1);
                v810 = v368 | 0x8000000000000000;
                v808 = v366;
                v809 = v357;
              }
              else
              {
                HIBYTE(v810) = v357;
                if (!v357)
                  goto LABEL_518;
              }
              memmove(v366, v356, v357);
LABEL_518:
              *((_BYTE *)v366 + v357) = 0;
              LOBYTE(v811) = 1;
              v369 = *(NSObject **)object;
              if (SHIBYTE(v810) < 0)
                operator delete(v808);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v353 && *(_QWORD *)(v353 + 24))
              {
                v370 = _os_log_pack_size();
                v371 = (std::__shared_weak_count_vtbl *)operator new(v370, (std::align_val_t)8uLL);
                v372 = (std::__shared_weak_count *)operator new();
                v373 = v372;
                v372->__shared_owners_ = 0;
                v374 = (unint64_t *)&v372->__shared_owners_;
                v372->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v372->__shared_weak_owners_ = 0;
                v372[1].__vftable = v371;
                *(_QWORD *)object = v371;
                *(_QWORD *)&object[8] = v371;
                *(_QWORD *)&object[16] = v372;
                do
                  v375 = __ldxr(v374);
                while (__stxr(v375 + 1, v374));
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)&object[24] = 0;
                v808 = 0;
                do
                  v376 = __ldaxr(v374);
                while (__stlxr(v376 - 1, v374));
                if (!v376)
                {
                  ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                  std::__shared_weak_count::__release_weak(v373);
                }
                v377 = *(_QWORD *)object;
                v378 = _os_log_pack_fill();
                v379 = v737;
                *(_DWORD *)v378 = 67109376;
                *(_DWORD *)(v378 + 4) = v379;
                *(_WORD *)(v378 + 8) = 2048;
                *(_QWORD *)(v378 + 10) = 0xD37A6F4DE9BD37A7 * ((v733 - v729) >> 4);
                v380 = operator new();
                v381 = *(unsigned __int8 *)(v355 + 39);
                v382 = v718;
                if ((v381 & 0x80u) != 0)
                {
                  v382 = *(const char **)(v355 + 16);
                  v381 = *(_QWORD *)(v355 + 24);
                }
                *(_QWORD *)v380 = v377;
                *(_OWORD *)(v380 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v380 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v380 + 40) = v382;
                *(_QWORD *)(v380 + 48) = v381;
                *(_BYTE *)(v380 + 56) = 1;
                *(_QWORD *)&v760 = 0;
                v819.__r_.__value_.__r.__words[0] = v380;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v353 + 24) + 40))(*(_QWORD *)(v353 + 24), &v819);
                v383 = v819.__r_.__value_.__r.__words[0];
                v819.__r_.__value_.__r.__words[0] = 0;
                v384 = v724;
                if (v383)
                {
                  v385 = *(std::__shared_weak_count **)(v383 + 32);
                  if (v385)
                  {
                    v386 = (unint64_t *)&v385->__shared_owners_;
                    do
                      v387 = __ldaxr(v386);
                    while (__stlxr(v387 - 1, v386));
                    if (!v387)
                    {
                      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                      std::__shared_weak_count::__release_weak(v385);
                    }
                  }
                  v388 = *(std::__shared_weak_count **)(v383 + 16);
                  if (v388)
                  {
                    v389 = (unint64_t *)&v388->__shared_owners_;
                    do
                      v390 = __ldaxr(v389);
                    while (__stlxr(v390 - 1, v389));
                    if (!v390)
                    {
                      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                      std::__shared_weak_count::__release_weak(v388);
                    }
                  }
                  MEMORY[0x227684CE8](v383, 0x10F0C40B62ED6C6);
                  v391 = v760;
                  *(_QWORD *)&v760 = 0;
                  if (v391)
                  {
                    v392 = *(std::__shared_weak_count **)(v391 + 32);
                    if (v392)
                    {
                      v393 = (unint64_t *)&v392->__shared_owners_;
                      do
                        v394 = __ldaxr(v393);
                      while (__stlxr(v394 - 1, v393));
                      if (!v394)
                      {
                        ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                        std::__shared_weak_count::__release_weak(v392);
                      }
                    }
                    v395 = *(std::__shared_weak_count **)(v391 + 16);
                    if (v395)
                    {
                      v396 = (unint64_t *)&v395->__shared_owners_;
                      do
                        v397 = __ldaxr(v396);
                      while (__stlxr(v397 - 1, v396));
                      if (!v397)
                      {
                        ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                        std::__shared_weak_count::__release_weak(v395);
                      }
                    }
                    MEMORY[0x227684CE8](v391, 0x10F0C40B62ED6C6);
                  }
                }
                v398 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v399 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v400 = __ldaxr(v399);
                  while (__stlxr(v400 - 1, v399));
                  if (!v400)
                  {
                    ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                    std::__shared_weak_count::__release_weak(v398);
                  }
                }
                v401 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v402 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v403 = __ldaxr(v402);
                  while (__stlxr(v403 - 1, v402));
                  if (!v403)
                  {
                    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                    std::__shared_weak_count::__release_weak(v401);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v369, OS_LOG_TYPE_INFO);
                *(_DWORD *)object = 67109376;
                *(_DWORD *)&object[4] = v737;
                *(_WORD *)&object[8] = 2048;
                *(_QWORD *)&object[10] = 0xD37A6F4DE9BD37A7 * ((v733 - v729) >> 4);
                v404 = (void *)_os_log_send_and_compose_impl();
                v384 = v724;
                if (v404)
                  free(v404);
              }
              if (v384)
              {
                sub_22322C138((uint64_t)&__p, "KFOS:IV iv:%d f:%lu", v737, 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v714 + 21504) - *(_QWORD *)(v714 + 21496)) >> 4));
                sub_223182C08((uint64_t)&__p);
              }
              sub_223182C08((uint64_t)&__p);
              v405 = v772;
              if (v772)
              {
                v406 = (unint64_t *)&v772->__shared_owners_;
                do
                  v407 = __ldaxr(v406);
                while (__stlxr(v407 - 1, v406));
                if (!v407)
                {
                  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                  std::__shared_weak_count::__release_weak(v405);
                }
              }
              goto LABEL_577;
            }
          }
          memmove(v363, v361, v362);
          goto LABEL_510;
        }
      }
      memmove(v306, v304, v305);
      goto LABEL_420;
    }
  }
LABEL_580:
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.KeyframeOccupancy.InvalidVoxels";
  *(_QWORD *)&object[24] = 37;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v410 = sub_2241471F8();
    v411 = v410[2];
    if (!v411)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v411 = v410[2];
    }
    v412 = *(_QWORD *)(v411 + 64);
    v413 = (std::mutex *)(v412 + 32);
    std::mutex::lock((std::mutex *)(v412 + 32));
    v415 = *(_QWORD *)(v412 + 96);
    v414 = *(_QWORD *)(v412 + 104);
    std::mutex::unlock(v413);
    if (v415 != v414)
    {
      v416 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v417 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v418 = v416 >= 0 ? &__p : v417;
      v419 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v418);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v419 + 24))(v419))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v419 + 24))(v419))
        {
          v819.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v819.__r_.__value_.__l.__size_ = 2;
          v420 = sub_2241471F8();
          sub_223895BA0((uint64_t)v420, v419, &v737, (uint64_t)&unk_2245C9EFE, (__int128 *)&v819);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  v421 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v421 = __p.__r_.__value_.__l.__size_;
  if (v421 >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v423 = p_p->__r_.__value_.__r.__words[0];
    v424 = p_p->__r_.__value_.__l.__size_;
    v425 = p_p->__r_.__value_.__s.__data_[16];
    if (v423 == 0x6365722E64337663 && v424 == 0x73746174532E6E6FLL && v425 == 46)
    {
      v428 = sub_223187510();
      v429 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v430 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v431 = v428->n128_u64[0];
      v432 = (std::mutex *)(v428->n128_u64[0] + 152);
      std::mutex::lock(v432);
      if ((v429 & 0x80u) == 0)
        v433 = &__p;
      else
        v433 = (std::string *)v430;
      if ((v429 & 0x80u) == 0)
        v434 = v429;
      else
        v434 = *((_QWORD *)&v430 + 1);
      sub_223FD45A8(v431 + 32, v433, v434, (unsigned int *)&v737);
      std::mutex::unlock(v432);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v435 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v7 + 21504) - *(_QWORD *)(v7 + 21496)) >> 4);
  if (v435 != (uint64_t)(*(_QWORD *)(v7 + 21480) - *(_QWORD *)(v7 + 21472)) >> 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2508, (uint64_t)"cluster_maps_.size() == floor_infos_.size()", 43, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_994;
    }
    v435 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v7 + 21504) - *(_QWORD *)(v7 + 21496)) >> 4);
  }
  if (v435 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v7 + 21400) - *(_QWORD *)(v7 + 21392)) >> 3)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2509, (uint64_t)"cluster_maps_.size() == cluster_grid_block_maps_.size()", 55, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_994:
    abort();
  }
  v702 = v7 + 184;
  if (*v2)
  {
    *(_OWORD *)&v741.__r_.__value_.__r.__words[1] = 0uLL;
    v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v741.__r_.__value_.__l.__size_;
    v819.__r_.__value_.__s.__data_[0] = 0;
    v819.__r_.__value_.__s.__data_[16] = 0;
    *(_QWORD *)&v760 = &v741;
    __p.__r_.__value_.__r.__words[0] = v7 + 184;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v819;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v760;
    LOBYTE(__dst) = 1;
    v436 = *(_DWORD *)(v7 + 360);
    if ((v436 & 0x80000000) == 0)
    {
      v437 = *(_DWORD *)(v7 + 364);
      *(_QWORD *)object = &v765;
      *(_QWORD *)&object[8] = &__p;
      *(_QWORD *)&object[16] = &__dst;
      sub_223B25A6C((char *)(v7 + 184), v437, v436, (uint64_t)object);
    }
  }
  else
  {
    *(_OWORD *)&v741.__r_.__value_.__r.__words[1] = 0uLL;
    v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v741.__r_.__value_.__l.__size_;
    sub_2235246CC((uint64_t *)&v741, *(int **)v720, (int *)(v720 + 8));
  }
  v438 = v741.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v741.__r_.__value_.__l.__data_ != &v741.__r_.__value_.__r.__words[1])
  {
    v700 = (_QWORD *)(v7 + 21352);
    v701 = v7 + 500;
    v704 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v708 = vcvtps_s32_f32(v287 / v288);
    v699 = vcvtps_s32_f32(v289 / v288);
    while (1)
    {
      object[0] = 0;
      object[16] = 0;
      v719 = (int *)(v438 + 28);
      v439 = sub_223950A98(v702, (__int128 *)object, (_DWORD *)(v438 + 28));
      v725 = (_BYTE *)v701;
      if ((v439 & 0x80000000) == 0)
      {
        v440 = v439;
        v441 = *(_QWORD *)(v7 + 20984);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v7 + 20992) - v441) >> 12) <= v439)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.hpp", 205, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v441 = *(_QWORD *)(v7 + 20984);
        }
        v725 = (_BYTE *)(v441 + 20480 * v440);
      }
      v442 = *(_DWORD *)(v7 + 24);
      v443 = (char *)&v808 + 4;
      v444 = 64;
      do
      {
        *((_OWORD *)v443 - 1) = 0uLL;
        *(_OWORD *)(v443 - 28) = 0uLL;
        *(_OWORD *)(v443 - 44) = 0uLL;
        *(_WORD *)v443 = 3341;
        v443[2] = 13;
        *((_DWORD *)v443 + 1) = -1;
        *((_DWORD *)v443 + 6) = 0;
        v443[28] = 0;
        *((_QWORD *)v443 + 1) = 0;
        *(_QWORD *)(v443 + 13) = 0;
        v443 += 76;
        --v444;
      }
      while (v444);
      v445 = 8 / v442;
      v818[0] = v445;
      v446 = &v769[20];
      v447 = 64;
      do
      {
        *((_OWORD *)v446 - 1) = 0uLL;
        *(_OWORD *)(v446 - 28) = 0uLL;
        *(_OWORD *)(v446 - 44) = 0uLL;
        *(_WORD *)v446 = 3341;
        v446[2] = 13;
        *((_DWORD *)v446 + 1) = -1;
        *((_DWORD *)v446 + 6) = 0;
        v446[28] = 0;
        *((_QWORD *)v446 + 1) = 0;
        *(_QWORD *)(v446 + 13) = 0;
        v446 += 76;
        --v447;
      }
      while (v447);
      v806[0] = v445;
      v448 = *(_QWORD *)(v7 + 21472);
      v449 = *(_QWORD *)(v7 + 21480) - v448;
      v450 = v449 >> 4;
      v451 = (v449 >> 4) - 1;
      if ((unint64_t)v449 < 0x11)
      {
        v734 = 0;
        v730 = 1;
        LODWORD(v450) = (v449 >> 4) - 1;
        v453 = (int *)(v438 + 28);
      }
      else
      {
        v452 = v450 - 1;
        v453 = (int *)(v438 + 28);
        if (v450 == 1)
        {
          v734 = 0;
LABEL_648:
          v730 = v450;
          LODWORD(v450) = v451;
        }
        else
        {
          v450 = 0;
          v454 = v719[v715];
          v455 = v454 + 8;
          while (1)
          {
            v456 = *(_DWORD *)(v448 + 16 * v450 + 4);
            if (v456 >= v454 && *(_DWORD *)(v448 + 16 * v450) < v455)
              break;
            if (v452 == ++v450)
            {
              v734 = 0;
              LODWORD(v450) = 1;
              goto LABEL_648;
            }
          }
          v451 = v450 + 1;
          v730 = v456 >= v455;
          if (v456 < v455)
            v457 = v456 - v454;
          else
            v457 = 0;
          v734 = v457;
        }
      }
      v458 = v450;
      v459 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v7 + 21504) - *(_QWORD *)(v7 + 21496)) >> 4);
      v707 = v458;
      if (v459 <= v458)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2554, (uint64_t)"floor_index_low < cluster_maps_.size()", 38, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_984;
        }
        v459 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v7 + 21504) - *(_QWORD *)(v7 + 21496)) >> 4);
      }
      if (v459 <= v451
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2555, (uint64_t)"floor_index_high < cluster_maps_.size()", 39, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
      {
LABEL_984:
        abort();
      }
      v705 = v451;
      v460 = sub_22393835C(v700, v453);
      if (v460)
      {
        v461 = v460[26];
        if (v461)
          break;
      }
LABEL_656:
      v462 = 0;
      v463 = (uint64_t)*v703 + 16 * v707;
      v464 = (uint64_t)*v703 + 16 * v705;
      v711 = *(_DWORD *)(v464 + 8);
      v712 = *(_DWORD *)(v463 + 8);
      v709 = *(_DWORD *)(v464 + 12);
      v710 = *(_DWORD *)(v463 + 12);
      v465 = v725;
      v713 = v438;
      do
      {
        if (*v465)
        {
          v467 = (uint32x2_t)vdup_n_s32(v462);
          v468 = (int8x8_t)vshl_u32(v467, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL);
          v469 = vorr_s8(vand_s8(v468, (int8x8_t)0x400000002), vand_s8((int8x8_t)vshl_u32(v467, (uint32x2_t)0xFFFFFFFDFFFFFFFALL), (int8x8_t)0x200000004));
          v470 = (int8x8_t)vshl_u32(v467, (uint32x2_t)-2);
          v765 = (int32x2_t *)vorr_s8(v469, vand_s8(v470, (int8x8_t)0x100000001));
          LODWORD(v766) = v470.i8[0] & 2 | v462 & 1 | v468.i8[0] & 4;
          v471 = *((_DWORD *)&v765 + v715);
          v472 = v719[v715];
          v819.__r_.__value_.__r.__words[0] = (std::string::size_type)v750;
          v819.__r_.__value_.__l.__size_ = (std::string::size_type)&v765;
          sub_223AE5064((int *)&v760, (int **)&v819);
          v476 = (int)v760 / v749;
          v477 = SDWORD1(v760) / v749;
          v721 = (SDWORD1(v760) / v749) | ((int)v760 / v749);
          if (v721 < 0 || v818[0] <= v476 || v818[0] <= v477)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterVoxel.h", 143, (uint64_t)"x >= 0 && y >= 0 && x < width_ && y < width_", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
            v478 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v478 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v480 = qword_255795648;
              for (m = qword_255795650; v480 != m; v480 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v480)(*(_QWORD *)(v480 + 8), "x >= 0 && y >= 0 && x < width_ && y < width_", 44, &unk_2245A1559, 0);
            }
            v481 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v481 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v438 = v713;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "x >= 0 && y >= 0 && x < width_ && y < width_", 44, &unk_2245A1559, 0);
          }
          v482 = v472 + v471;
          v483 = v476 + 8 * v477;
          v484 = !v730;
          if (v471 <= v734)
            v484 = 0;
          if (!v484)
          {
            v485 = v482 - v712;
            if (v482 >= v712 && v482 <= v710)
            {
              if (v465[6])
              {
                v486 = v730;
                if (v471 < v734)
                  v486 = 1;
                if ((v486 & 1) == 0)
                  goto LABEL_701;
                if ((char)v465[6] >= 1 && v485 <= v708)
                  ++*(_WORD *)&object[76 * v483 + 2];
              }
              else
              {
                v487 = v465[1];
                if (v487 > 0x29)
                {
                  v489 = 0;
                  v490 = 0;
                  v491 = 0;
                }
                else
                {
                  v488 = (unsigned __int8 *)&unk_224693EF9 + 3 * v487;
                  v489 = *v488;
                  v490 = v488[1];
                  v491 = v488[2];
                }
                v492 = &object[76 * v483];
                v493 = v492[14] + v490;
                v492[13] += v489;
                v492[14] = v493;
                v492[15] += v491;
                v494 = v730;
                if (v471 < v734)
                  v494 = 1;
                if ((v494 & 1) == 0)
                  goto LABEL_701;
                ++*(_WORD *)&object[76 * v483];
                if (v485 <= v708)
                {
                  if (v487 > 0x29)
                    v495 = 0;
                  else
                    v495 = (int)(dword_224660CE0[v487] * v699) / v708;
                  v496 = &object[76 * v483];
                  *((_WORD *)v496 + 2) += v495;
                  *(float32x2_t *)v473.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)(v438 + 28), (int32x2_t)v765));
                  v473.f32[2] = (float)(*(_DWORD *)(v438 + 36) + v766);
                  v497.i64[0] = 0x3F0000003F000000;
                  v497.i64[1] = 0x3F0000003F000000;
                  v498 = vaddq_f32(v473, v497);
                  v497.i8[0] = v465[3];
                  v499 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v497.f32));
                  v499.f32[0] = (float)v499.i32[0];
                  v474.i8[0] = v465[4];
                  v475.i8[0] = v465[5];
                  v475 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v475)).u64[0];
                  v499.f32[1] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v474)).i32[0];
                  v499.f32[2] = (float)v475.i32[0];
                  v474.i32[1] = v704.i32[1];
                  v500 = vmulq_f32(v499, v704);
                  *(float *)v474.i32 = (float)v495;
                  v473 = vaddq_f32(v498, v500);
                  v500.i64[0] = *(_QWORD *)(v496 + 20);
                  v500.i32[2] = *((_DWORD *)v496 + 7);
                  v501 = vaddq_f32(v500, vmulq_n_f32(vmulq_n_f32(v473, *(float *)(v714 + 312)), (float)v495));
                  *((_DWORD *)v496 + 7) = v501.i32[2];
                  *(_QWORD *)(v496 + 20) = v501.i64[0];
                }
              }
              v502 = v465[7];
              if (v502 == 2)
              {
                v503 = &object[76 * v483 + 16];
              }
              else
              {
                if (v502 != 1)
                  goto LABEL_701;
                v503 = &object[76 * v483 + 12];
              }
              ++*(_DWORD *)v503;
            }
          }
LABEL_701:
          v504 = v730;
          if (v471 < v734)
            v504 = 1;
          if ((v504 & 1) != 0)
            goto LABEL_659;
          v505 = v482 - v711;
          if (v482 < v711 || v482 > v709)
            goto LABEL_659;
          if (v721 < 0 || v806[0] <= v476 || v806[0] <= v477)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterVoxel.h", 143, (uint64_t)"x >= 0 && y >= 0 && x < width_ && y < width_", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
            v506 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v506 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v507 = qword_255795648;
              for (n = qword_255795650; v507 != n; v507 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v507)(*(_QWORD *)(v507 + 8), "x >= 0 && y >= 0 && x < width_ && y < width_", 44, &unk_2245A1559, 0);
            }
            v509 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v509 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v438 = v713;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "x >= 0 && y >= 0 && x < width_ && y < width_", 44, &unk_2245A1559, 0);
          }
          if (v465[6])
          {
            if (v471 <= v734)
              goto LABEL_659;
            if ((char)v465[6] >= 1 && v505 <= v708)
              ++*(_WORD *)&__p.__r_.__value_.__s.__data_[76 * v483 + 2];
          }
          else
          {
            v510 = v465[1];
            if (v510 > 0x29)
            {
              v512 = 0;
              v513 = 0;
              v514 = 0;
            }
            else
            {
              v511 = (unsigned __int8 *)&unk_224693EF9 + 3 * v510;
              v512 = *v511;
              v513 = v511[1];
              v514 = v511[2];
            }
            v515 = (_DWORD *)((char *)&__p + 76 * v483);
            v516 = v515[14] + v513;
            v515[13] += v512;
            v515[14] = v516;
            v515[15] += v514;
            if (v471 <= v734)
              goto LABEL_659;
            ++*((_WORD *)&__p.__r_.__value_.__l.__data_ + 38 * v483);
            if (v505 <= v708)
            {
              if (v510 > 0x29)
                v517 = 0;
              else
                v517 = (int)(dword_224660CE0[v510] * v699) / v708;
              v518 = (char *)&__p + 76 * v483;
              *((_WORD *)v518 + 2) += v517;
              *(float32x2_t *)v473.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)(v438 + 28), (int32x2_t)v765));
              v473.f32[2] = (float)(*(_DWORD *)(v438 + 36) + v766);
              v519.i64[0] = 0x3F0000003F000000;
              v519.i64[1] = 0x3F0000003F000000;
              v520 = vaddq_f32(v473, v519);
              v519.i8[0] = v465[3];
              v521 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v519.f32));
              v521.f32[0] = (float)v521.i32[0];
              v474.i8[0] = v465[4];
              v475.i8[0] = v465[5];
              v521.f32[1] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v474)).i32[0];
              v521.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v475)).i32[0];
              v522 = vmulq_f32(v521, v704);
              v523 = vaddq_f32(v520, v522);
              v522.i64[0] = *(_QWORD *)(v518 + 20);
              v522.i32[2] = *((_DWORD *)v518 + 7);
              v524 = vaddq_f32(v522, vmulq_n_f32(vmulq_n_f32(v523, *(float *)(v714 + 312)), (float)v517));
              *((_DWORD *)v518 + 7) = v524.i32[2];
              *(_QWORD *)(v518 + 20) = v524.i64[0];
            }
          }
          v525 = v465[7];
          if (v525 == 2)
          {
            v466 = &__p.__r_.__value_.__s.__data_[76 * v483 + 16];
          }
          else
          {
            if (v525 != 1)
              goto LABEL_659;
            v466 = &__p.__r_.__value_.__s.__data_[76 * v483 + 12];
          }
          ++*(_DWORD *)v466;
LABEL_659:
          v7 = v714;
        }
        ++v462;
        v465 = &v725[40 * v462];
      }
      while (v462 != 512);
      v567 = v719;
      v819.__r_.__value_.__r.__words[0] = (std::string::size_type)v750;
      v819.__r_.__value_.__l.__size_ = (std::string::size_type)v719;
      sub_223AE5064((int *)&v760, (int **)&v819);
      LODWORD(v765) = (int)v760 / v749;
      HIDWORD(v765) = SDWORD1(v760) / v749;
      LODWORD(v766) = 0;
      v568 = *(_QWORD *)(v7 + 21392);
      v569 = sub_22393835C((_QWORD *)(v568 + 40 * v707), v719);
      if (v569)
      {
        v570 = v569;
        v571 = *(_QWORD *)(v7 + 21496) + 368 * v707;
        v760 = v706;
        v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
        v819.__r_.__value_.__l.__size_ = v571;
        v819.__r_.__value_.__r.__words[2] = (std::string::size_type)&v760;
        v572 = *((_DWORD *)v569 + 1223);
        if (v572)
        {
          v573 = 0;
          v574 = 0;
          v575 = *((_DWORD *)v569 + 1223);
LABEL_846:
          v576 = 0;
          do
          {
            sub_223B62440((uint64_t)&v819, v576, v574, (__int16 *)v570 + 38 * (v573 + v576) + 14);
            ++v576;
          }
          while (v575 != v576);
          v573 += v576;
          while (++v574 != v572)
          {
            v575 = *((_DWORD *)v570 + 1223);
            if (v575)
              goto LABEL_846;
          }
          v438 = v713;
          v7 = v714;
          v568 = *(_QWORD *)(v714 + 21392);
          v567 = v719;
        }
      }
      v577 = sub_223B63C7C((float *)(v568 + 40 * v707), v567, (uint64_t)v567);
      v578 = v577 + 6;
      v579 = -4864;
      do
      {
        *(_OWORD *)((char *)v578 - 20) = *(_OWORD *)&v818[v579 / 4];
        *((_DWORD *)v578 - 1) = *(_DWORD *)((char *)&v819.__r_.__value_.__l.__data_ + v579);
        *v578 = *(std::string::size_type *)((char *)v819.__r_.__value_.__r.__words + v579 + 4);
        *((_DWORD *)v578 + 2) = *(_DWORD *)((char *)&v819.__r_.__value_.__r.__words[1] + v579 + 4);
        *(_OWORD *)((char *)v578 + 12) = *(_OWORD *)((char *)&v819.__r_.__value_.__r.__words[2] + v579);
        *((_DWORD *)v578 + 7) = *(_DWORD *)((char *)&v821 + v579);
        *((_DWORD *)v578 + 10) = *(_DWORD *)((char *)&v821 + v579 + 12);
        v578[4] = *(_QWORD *)((char *)&v821 + v579 + 4);
        v580 = *(uint64_t *)((char *)&v822 + v579);
        *((_BYTE *)v578 + 52) = *((_BYTE *)&v823 + v579);
        *(_QWORD *)((char *)v578 + 44) = v580;
        v578 = (_QWORD *)((char *)v578 + 76);
        v579 += 76;
      }
      while (v579);
      v581 = v818[0];
      *((_DWORD *)v577 + 1223) = v818[0];
      v582 = *(_QWORD *)(v7 + 21496) + 368 * v707;
      v760 = v706;
      v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
      v819.__r_.__value_.__l.__size_ = v582;
      v819.__r_.__value_.__r.__words[2] = (std::string::size_type)&v760;
      if (v581)
      {
        v583 = 0;
        for (ii = 0; ii != v581; ++ii)
        {
          for (jj = 0; jj != v581; ++jj)
            sub_223B641E8(&v819, jj, ii, (__int16 *)&object[76 * (v583 + jj)]);
          v583 += jj;
        }
      }
      if (!v730)
      {
        v586 = *(_QWORD *)(v7 + 21392);
        v587 = v719;
        v588 = sub_22393835C((_QWORD *)(v586 + 40 * v705), v719);
        if (v588)
        {
          v589 = v588;
          v590 = *(_QWORD *)(v7 + 21496) + 368 * v705;
          v760 = v706;
          v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
          v819.__r_.__value_.__l.__size_ = v590;
          v819.__r_.__value_.__r.__words[2] = (std::string::size_type)&v760;
          v591 = *((_DWORD *)v588 + 1223);
          if (v591)
          {
            v592 = 0;
            v593 = 0;
            v594 = *((_DWORD *)v588 + 1223);
LABEL_863:
            v595 = 0;
            do
            {
              sub_223B62440((uint64_t)&v819, v595, v593, (__int16 *)v589 + 38 * (v592 + v595) + 14);
              ++v595;
            }
            while (v594 != v595);
            v592 += v595;
            while (++v593 != v591)
            {
              v594 = *((_DWORD *)v589 + 1223);
              if (v594)
                goto LABEL_863;
            }
            v438 = v713;
            v7 = v714;
            v586 = *(_QWORD *)(v714 + 21392);
            v587 = v719;
          }
        }
        v596 = sub_223B63C7C((float *)(v586 + 40 * v705), v587, (uint64_t)v587);
        v597 = (char *)v596 + 92;
        v598 = -4864;
        do
        {
          v599 = &v597[v598];
          *((_OWORD *)v599 + 300) = *(_OWORD *)&v806[v598 / 4];
          *((_DWORD *)v599 + 1204) = *(_DWORD *)&object[v598];
          *(_QWORD *)(v599 + 4820) = *(_QWORD *)&object[v598 + 4];
          *((_DWORD *)v599 + 1207) = *(_DWORD *)&object[v598 + 12];
          *((_OWORD *)v599 + 302) = *(_OWORD *)&object[v598 + 16];
          *((_DWORD *)v599 + 1212) = *(_DWORD *)&object[v598 + 32];
          *(_QWORD *)(v599 + 4852) = *(_QWORD *)&object[v598 + 36];
          *((_DWORD *)v599 + 1215) = *(_DWORD *)((char *)&v808 + v598 + 4);
          v600 = *(size_t *)((char *)&v809 + v598);
          v597[v598 + 4872] = *((_BYTE *)&v810 + v598);
          *((_QWORD *)v599 + 608) = v600;
          v598 += 76;
        }
        while (v598);
        v601 = v806[0];
        *((_DWORD *)v596 + 1223) = v806[0];
        v602 = *(_QWORD *)(v7 + 21496) + 368 * v705;
        v760 = v706;
        v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&v765;
        v819.__r_.__value_.__l.__size_ = v602;
        v819.__r_.__value_.__r.__words[2] = (std::string::size_type)&v760;
        if (v601)
        {
          v603 = 0;
          for (kk = 0; kk != v601; ++kk)
          {
            for (mm = 0; mm != v601; ++mm)
              sub_223B641E8(&v819, mm, kk, (__int16 *)&__p + 38 * (v603 + mm));
            v603 += mm;
          }
        }
      }
      v606 = *(std::string **)(v438 + 8);
      if (v606)
      {
        do
        {
          v607 = v606;
          v606 = (std::string *)v606->__r_.__value_.__r.__words[0];
        }
        while (v606);
      }
      else
      {
        do
        {
          v607 = *(std::string **)(v438 + 16);
          _ZF = v607->__r_.__value_.__r.__words[0] == v438;
          v438 = (std::string::size_type)v607;
        }
        while (!_ZF);
      }
      v438 = (std::string::size_type)v607;
      if (v607 == (std::string *)&v741.__r_.__value_.__r.__words[1])
        goto LABEL_881;
    }
    while (1)
    {
      v528 = *(unsigned __int16 *)(v461 + 16);
      v529 = *(_QWORD *)(v7 + 104);
      if (v528 >= (*(_QWORD *)(v7 + 112) - v529) >> 4)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 128, (uint64_t)"index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
        v530 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v530 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v531 = qword_255795648;
          for (nn = qword_255795650; v531 != nn; v531 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v531)(*(_QWORD *)(v531 + 8), "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
        }
        v533 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v533 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "index < keyframe_uuids_.size() && \"No UUID for keyframe index\"", 62, &unk_2245A1559, 0);
        v529 = *(_QWORD *)(v7 + 104);
      }
      v534 = v529 + 16 * v528;
      v535 = sub_22456636C((unsigned __int8 *)v534);
      v537 = *(int8x8_t *)(v7 + 72);
      if (v537)
      {
        v538 = (uint8x8_t)vcnt_s8(v537);
        v538.i16[0] = vaddlv_u8(v538);
        if (v538.u32[0] > 1uLL)
        {
          v539 = v535;
          if (v535 >= *(_QWORD *)&v537)
            v539 = v535 % *(_QWORD *)&v537;
        }
        else
        {
          v539 = (*(_QWORD *)&v537 - 1) & v535;
        }
        v540 = *(_QWORD **)(*(_QWORD *)(v7 + 64) + 8 * v539);
        if (v540)
        {
          v540 = (_QWORD *)*v540;
          if (v540)
          {
            if (v538.u32[0] < 2uLL)
            {
              v541 = *(_QWORD *)&v537 - 1;
              while (1)
              {
                v545 = v540[1];
                if (v535 == v545)
                {
                  if (v540[2] == *(_QWORD *)v534 && v540[3] == *(_QWORD *)(v534 + 8))
                    goto LABEL_781;
                }
                else if ((v545 & v541) != v539)
                {
                  goto LABEL_780;
                }
                v540 = (_QWORD *)*v540;
                if (!v540)
                  goto LABEL_781;
              }
            }
            do
            {
              v543 = v540[1];
              if (v535 == v543)
              {
                if (v540[2] == *(_QWORD *)v534 && v540[3] == *(_QWORD *)(v534 + 8))
                  break;
              }
              else
              {
                if (v543 >= *(_QWORD *)&v537)
                  v543 %= *(_QWORD *)&v537;
                if (v543 != v539)
                  goto LABEL_780;
              }
              v540 = (_QWORD *)*v540;
            }
            while (v540);
          }
        }
      }
      else
      {
LABEL_780:
        v540 = 0;
      }
LABEL_781:
      if (v540)
        v546 = v540 + 4;
      else
        v546 = 0;
      v536.i64[0] = v546[8];
      v536.i32[2] = *((_DWORD *)v546 + 18);
      v547 = (v536.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
      v722 = v536;
      if ((v536.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        if ((v536.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v547 = (v536.i32[2] & 0x7FFFFFFFu) < 0x7F800000;
        else
          v547 = (v536.i32[1] & 0x7FFFFFFFu) < 0x7F800000;
      }
      if (!v547)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/MultiVoxelStore.h", 173, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C);
        v548 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v548 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v549 = qword_255795648;
          for (i1 = qword_255795650; v549 != i1; v549 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v549)(*(_QWORD *)(v549 + 8), "math::IsFinite(pos)", 19, "Converting nan value to voxel position", 38);
        }
        v551 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v551 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "math::IsFinite(pos)", 19, "Converting nan value to voxel position", 38);
      }
      v552 = vmulq_n_f32(v722, *(float *)(v7 + 316));
      v553 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v552.f32));
      v554 = *(int32x2_t *)(v438 + 28);
      v555 = vcgt_s32(v554, v553);
      if ((v555.i8[0] & 1) != 0)
        goto LABEL_744;
      if ((v555.i8[4] & 1) != 0)
        goto LABEL_744;
      v556 = vcvtms_s32_f32(v552.f32[2]);
      v557 = *(_DWORD *)(v438 + 36);
      if (v556 < v557)
        goto LABEL_744;
      v558 = vcgt_s32(vadd_s32(v554, (int32x2_t)0x800000008), v553);
      if ((v558.i8[0] & 1) == 0 || (v558.i8[4] & 1) == 0 || v557 + 8 <= v556)
        goto LABEL_744;
      v765 = (int32x2_t *)vsub_s32(v553, v554);
      LODWORD(v766) = v556 - v557;
      v559 = *((_DWORD *)&v765 + v715);
      if (v559 >= 8)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/src/KeyframeObservationStore.cpp", 2576, (uint64_t)"relative_pose_h >= 0 && relative_pose_h < MultiVoxelStore::BlockWidth()", 71, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C);
        v560 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v560 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v561 = qword_255795648;
          for (i2 = qword_255795650; v561 != i2; v561 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v561)(*(_QWORD *)(v561 + 8), "relative_pose_h >= 0 && relative_pose_h < MultiVoxelStore::BlockWidth()", 71, &unk_2245A1559, 0);
        }
        v563 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v563 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "relative_pose_h >= 0 && relative_pose_h < MultiVoxelStore::BlockWidth()", 71, &unk_2245A1559, 0);
      }
      v819.__r_.__value_.__r.__words[0] = (std::string::size_type)v750;
      v819.__r_.__value_.__l.__size_ = (std::string::size_type)&v765;
      sub_223AE5064((int *)&v760, (int **)&v819);
      v564 = (int)v760 / v749;
      v565 = SDWORD1(v760) / v749;
      if (v730)
        break;
      if (v559 <= v734)
      {
        if (((v565 | v564) < 0 || v818[0] <= v564 || v818[0] <= v565)
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterVoxel.h", 143, (uint64_t)"x >= 0 && y >= 0 && x < width_ && y < width_", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
LABEL_982:
          abort();
        }
        v566 = &object[76 * (v564 + 8 * v565)];
        ++*((_WORD *)v566 + 3);
      }
      if (v559 >= v734)
      {
        if (((v565 | v564) < 0 || v806[0] <= v564 || v806[0] <= v565)
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterVoxel.h", 143, (uint64_t)"x >= 0 && y >= 0 && x < width_ && y < width_", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_982;
        }
        v526 = &__p;
        goto LABEL_743;
      }
LABEL_744:
      v461 = *(_QWORD *)v461;
      if (!v461)
        goto LABEL_656;
    }
    if (((v565 | v564) < 0 || v818[0] <= v564 || v818[0] <= v565)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframeOccupancy/include/Reconstruction/KeyframeOccupancy/ClusterVoxel.h", 143, (uint64_t)"x >= 0 && y >= 0 && x < width_ && y < width_", 44, (uint64_t)&unk_2245A1559, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_982;
    }
    v526 = (std::string *)object;
LABEL_743:
    v527 = (char *)v526 + 76 * (v564 + 8 * v565);
    ++*((_WORD *)v527 + 3);
    goto LABEL_744;
  }
LABEL_881:
  kdebug_trace();
  *(_QWORD *)object = operator new(0x20uLL);
  *(_OWORD *)&object[8] = xmmword_2245B8D00;
  strcpy(*(char **)object, "UpdateClusterObservations");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)object, (uint64_t *)&__p, (uint64_t)v757);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((object[23] & 0x80000000) == 0)
      goto LABEL_883;
  }
  else if ((object[23] & 0x80000000) == 0)
  {
    goto LABEL_883;
  }
  operator delete(*(void **)object);
LABEL_883:
  __dst = 0;
  v739 = 0;
  LOBYTE(v740) = 0;
  __dst = (char *)std::chrono::steady_clock::now().__d_.__rep_;
  LOBYTE(v740) = 1;
  kdebug_trace();
  sub_223B7F834(v7 + 22832);
  v736 = 0;
  v608 = *(_QWORD *)(v7 + 21472);
  v609 = *(_QWORD *)(v7 + 21480);
  if (v608 != v609)
  {
    v610 = 0;
    do
    {
      kdebug_trace();
      sub_223B2064C((int8x8_t *)(*(_QWORD *)(v7 + 21496) + 368 * v610), v610, v608, v7 + 22832, (int32x2_t *)v706, *((uint64_t *)&v706 + 1), *(unsigned int *)(v7 + 21616), &v741, (_QWORD *)v7, &v736, v7, &v736);
      kdebug_trace();
      v610 = (v610 + 1);
      v608 += 16;
    }
    while (v608 != v609);
  }
  v611 = *(std::__shared_weak_count **)(v7 + 22952);
  *(_QWORD *)(v7 + 22944) = 0;
  *(_QWORD *)(v7 + 22952) = 0;
  if (v611)
  {
    v612 = (unint64_t *)&v611->__shared_owners_;
    do
      v613 = __ldaxr(v612);
    while (__stlxr(v613 - 1, v612));
    if (!v613)
    {
      ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
      std::__shared_weak_count::__release_weak(v611);
    }
  }
  kdebug_trace();
  object[23] = 21;
  strcpy(object, "ComputeRoomBoundaries");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "KeyframeOccupancy");
  sub_22391CC34((uint64_t *)object, (uint64_t *)&__p, (uint64_t)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((object[23] & 0x80000000) == 0)
      goto LABEL_893;
  }
  else if ((object[23] & 0x80000000) == 0)
  {
    goto LABEL_893;
  }
  operator delete(*(void **)object);
LABEL_893:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v614 = sub_2241471F8();
    v615 = v614[2];
    if (!v615)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v615 = v614[2];
    }
    v616 = *(_QWORD *)(v615 + 64);
    v617 = (std::mutex *)(v616 + 32);
    std::mutex::lock((std::mutex *)(v616 + 32));
    v619 = *(_QWORD *)(v616 + 96);
    v618 = *(_QWORD *)(v616 + 104);
    std::mutex::unlock(v617);
    if (v619 != v618)
    {
      *(_QWORD *)object = "cv3d.recon.";
      *(_QWORD *)&object[8] = 11;
      *(_QWORD *)&object[16] = "ObservationMapping.Res.FloorInfo";
      *(_QWORD *)&object[24] = 32;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v767);
      v620 = HIBYTE(v767.__r_.__value_.__r.__words[2]);
      v621 = v767.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      if (v620 >= 0)
        v622 = &v767;
      else
        v622 = (std::string *)v621;
      v623 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v622);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v623 + 24))(v623))
      {
        v760 = 0u;
        v761 = 0u;
        LODWORD(v762) = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v623 + 24))(v623))
        {
          *(_QWORD *)&v759 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v759 + 1) = 2;
          v624 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v623 + 24))(v623))
          {
            v735 = v624;
            sub_2241498F4((uint64_t)&__p, 0);
            v625 = *(_QWORD *)(v7 + 21472);
            if (v625 != *(_QWORD *)(v7 + 21480))
            {
              v626 = *(_DWORD *)(v625 + 8);
              sub_22414CE34(0, (uint64_t)object);
              v633 = *(float32x2_t **)object;
              v634 = *(float32x2_t **)&object[8];
              __asm { FMOV            V8.2S, #10.0 }
              if (*(_QWORD *)object != *(_QWORD *)&object[8])
              {
                v628.i32[0] = v752;
                v629.i32[0] = v754;
                v630.i32[1] = v755.i32[1];
                v631.i32[0] = v756;
                v632.f32[0] = *(float *)(v714 + 312) * 0.5;
                v639 = vmla_n_f32(vmla_f32(vmul_f32(v751, _D8), _D8, v753), v755, v632.f32[0]);
                *(float32x2_t *)v627.f32 = vmla_f32(vmla_f32(vmul_f32(v628, _D8), _D8, *(float32x2_t *)v629.f32), *(float32x2_t *)v632.f32, v631);
                v640 = *(_QWORD *)&object[8] - *(_QWORD *)object - 12;
                v641 = *(float32x2_t **)object;
                if (v640 < 0x24)
                  goto LABEL_1028;
                v642 = v640 / 0xC + 1;
                v641 = (float32x2_t *)(*(_QWORD *)object + 12 * (v642 & 0x3FFFFFFFFFFFFFFCLL));
                v643 = v642 & 0x3FFFFFFFFFFFFFFCLL;
                v644 = *(float **)object;
                do
                {
                  *(float32x4x3_t *)(&v629 - 1) = vld3q_f32(v644);
                  v646 = vmulq_n_f32(v645, v639.f32[0]);
                  v632 = vmulq_lane_f32(v629, v639, 1);
                  v647 = vmulq_n_f32(v630, v627.f32[0]);
                  vst3q_f32(v644, *(float32x4x3_t *)(&v632 - 1));
                  v644 += 12;
                  v643 -= 4;
                }
                while (v643);
                if (v642 != (v642 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1028:
                  do
                  {
                    *v641 = vmul_f32(v639, *v641);
                    v641[1].f32[0] = v627.f32[0] * v641[1].f32[0];
                    v641 = (float32x2_t *)((char *)v641 + 12);
                  }
                  while (v641 != v634);
                }
              }
              if (v633 == v634)
              {
                v649 = v633;
              }
              else
              {
                v627.f32[0] = (float)((float)v626 + 0.5) * *(float *)(v714 + 312);
                v629.i32[0] = v752;
                v630.i32[0] = v754;
                v632.i32[0] = v756;
                *(float32x2_t *)v648.f32 = vmla_n_f32(vmla_f32(vmul_f32(v751, 0), 0, v753), v755, v627.f32[0]);
                *(float32x2_t *)&v648.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v629.f32, 0), 0, *(float32x2_t *)v630.f32), *(float32x2_t *)v627.f32, *(float32x2_t *)v632.f32);
                do
                {
                  *(float32x2_t *)v627.f32 = *v633;
                  v627.i32[2] = v633[1].i32[0];
                  v627 = vaddq_f32(v648, v627);
                  v633[1].i32[0] = v627.i32[2];
                  *v633 = *(float32x2_t *)v627.f32;
                  v633 = (float32x2_t *)((char *)v633 + 12);
                }
                while (v633 != v634);
                v649 = *(float32x2_t **)&object[8];
                v633 = *(float32x2_t **)object;
              }
              LODWORD(v764) = 0;
              v763 = 1065353216;
              sub_22339E688((uint64_t)&object[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v649 - (char *)v633) >> 2), &v763);
              LODWORD(v811) = 1;
              sub_22414E9E0((uint64_t)&__p, (uint64_t)object);
              sub_22316F8F4((uint64_t *)object);
              v650 = *(_QWORD *)(v714 + 21472);
              for (i3 = *(_QWORD *)(v714 + 21480); v650 != i3; v650 += 16)
              {
                v652 = *(_DWORD *)(v650 + 12);
                sub_22414CE34(0, (uint64_t)object);
                v659 = *(float32x2_t **)object;
                v660 = *(float32x2_t **)&object[8];
                if (*(_QWORD *)object != *(_QWORD *)&object[8])
                {
                  v654.i32[0] = v752;
                  v655.i32[0] = v754;
                  v656.i32[1] = v755.i32[1];
                  v657.i32[0] = v756;
                  v658.f32[0] = *(float *)(v714 + 312) * 0.5;
                  v661 = vmla_n_f32(vmla_f32(vmul_f32(v751, _D8), _D8, v753), v755, v658.f32[0]);
                  *(float32x2_t *)v653.f32 = vmla_f32(vmla_f32(vmul_f32(v654, _D8), _D8, *(float32x2_t *)v655.f32), *(float32x2_t *)v658.f32, v657);
                  v662 = *(_QWORD *)&object[8] - *(_QWORD *)object - 12;
                  v663 = *(float32x2_t **)object;
                  if (v662 < 0x24)
                    goto LABEL_1029;
                  v664 = v662 / 0xC + 1;
                  v663 = (float32x2_t *)(*(_QWORD *)object + 12 * (v664 & 0x3FFFFFFFFFFFFFFCLL));
                  v665 = v664 & 0x3FFFFFFFFFFFFFFCLL;
                  v666 = *(float **)object;
                  do
                  {
                    *(float32x4x3_t *)(&v655 - 1) = vld3q_f32(v666);
                    v668 = vmulq_n_f32(v667, v661.f32[0]);
                    v658 = vmulq_lane_f32(v655, v661, 1);
                    v669 = vmulq_n_f32(v656, v653.f32[0]);
                    vst3q_f32(v666, *(float32x4x3_t *)(&v658 - 1));
                    v666 += 12;
                    v665 -= 4;
                  }
                  while (v665);
                  if (v664 != (v664 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_1029:
                    do
                    {
                      *v663 = vmul_f32(v661, *v663);
                      v663[1].f32[0] = v653.f32[0] * v663[1].f32[0];
                      v663 = (float32x2_t *)((char *)v663 + 12);
                    }
                    while (v663 != v660);
                  }
                }
                if (v659 == v660)
                {
                  v671 = v659;
                }
                else
                {
                  v653.f32[0] = (float)((float)v652 + 0.5) * *(float *)(v714 + 312);
                  v655.i32[0] = v752;
                  v656.i32[0] = v754;
                  v658.i32[0] = v756;
                  *(float32x2_t *)v670.f32 = vmla_n_f32(vmla_f32(vmul_f32(v751, 0), 0, v753), v755, v653.f32[0]);
                  *(float32x2_t *)&v670.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v655.f32, 0), 0, *(float32x2_t *)v656.f32), *(float32x2_t *)v653.f32, *(float32x2_t *)v658.f32);
                  do
                  {
                    *(float32x2_t *)v653.f32 = *v659;
                    v653.i32[2] = v659[1].i32[0];
                    v653 = vaddq_f32(v670, v653);
                    v659[1].i32[0] = v653.i32[2];
                    *v659 = *(float32x2_t *)v653.f32;
                    v659 = (float32x2_t *)((char *)v659 + 12);
                  }
                  while (v659 != v660);
                  v671 = *(float32x2_t **)&object[8];
                  v659 = *(float32x2_t **)object;
                }
                LODWORD(v764) = 0;
                v763 = 1065353216;
                sub_22339E688((uint64_t)&object[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v671 - (char *)v659) >> 2), &v763);
                LODWORD(v811) = 1;
                sub_22414E9E0((uint64_t)&__p, (uint64_t)object);
                sub_22316F8F4((uint64_t *)object);
              }
            }
            v819 = __p;
            v820 = *(_QWORD *)v769;
            memset(&__p, 0, sizeof(__p));
            v821 = *(_OWORD *)&v769[8];
            v823 = v771;
            v822 = v770;
            *(_QWORD *)&v769[8] = 0;
            *(_QWORD *)&v769[16] = 0;
            v770 = 0;
            LODWORD(v824) = (_DWORD)v772;
            v825 = v773;
            v827 = v775;
            v826 = v774;
            v773 = 0uLL;
            v828 = v776;
            v829 = v777;
            v831 = v779;
            v830 = v778;
            v774 = 0;
            v777 = 0uLL;
            v778 = 0;
            v832 = v780;
            v834 = v782;
            v833 = v781;
            v780 = 0uLL;
            v835 = v783;
            v837 = v785;
            v836 = v784;
            v781 = 0;
            v783 = 0uLL;
            v784 = 0;
            v838 = v786;
            v840 = v788;
            v839 = v787;
            v786 = 0uLL;
            v841 = v789;
            v843 = v791;
            v842 = v790;
            v787 = 0;
            v789 = 0uLL;
            v790 = 0;
            v844 = v792;
            v847 = v795;
            v845 = v793;
            v846 = v794;
            v793 = 0;
            v794 = 0uLL;
            v848 = v796;
            v849 = v797;
            v851 = v799;
            v850 = v798;
            v797 = 0uLL;
            v798 = 0;
            v852 = v800;
            LOBYTE(v853) = 0;
            v857 = 0;
            if (v805)
            {
              v854 = v802;
              v853 = v801;
              v855 = v803;
              v856 = v804;
              v857 = 1;
            }
            sub_22316F8F4((uint64_t *)&__p);
            __p.__r_.__value_.__s.__data_[0] = 0;
            v769[0] = 0;
            sub_22329F414((uint64_t)&v819, (__int128 *)&__p, &v759, &v765);
            if (v769[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_22316F8F4((uint64_t *)&v819);
            v672 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v623 + 56))(v623);
            v674 = *v672;
            v673 = (std::__shared_weak_count *)v672[1];
            v763 = *v672;
            v764 = v673;
            if (v673)
            {
              v675 = (unint64_t *)&v673->__shared_owners_;
              do
                v676 = __ldxr(v675);
              while (__stxr(v676 + 1, v675));
            }
            v677 = v766;
            v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v819.__r_.__value_.__r.__words[1] = v766;
            v766 = 0uLL;
            *(_QWORD *)object = v674;
            *(_QWORD *)&object[8] = v673;
            if (v673)
            {
              v678 = (unint64_t *)&v673->__shared_owners_;
              do
                v679 = __ldxr(v678);
              while (__stxr(v679 + 1, v678));
            }
            *(_QWORD *)&object[16] = &off_24EC6A3B8;
            *(_OWORD *)&object[24] = v677;
            if (*((_QWORD *)&v677 + 1))
            {
              v680 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
              do
                v681 = __ldxr(v680);
              while (__stxr(v681 + 1, v680));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v735 + 16))(v735, object);
            v682 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v683 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v684 = __ldaxr(v683);
              while (__stlxr(v684 - 1, v683));
              if (!v684)
              {
                ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
                std::__shared_weak_count::__release_weak(v682);
              }
            }
            v685 = *(std::__shared_weak_count **)&object[8];
            if (*(_QWORD *)&object[8])
            {
              v686 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
              do
                v687 = __ldaxr(v686);
              while (__stlxr(v687 - 1, v686));
              if (!v687)
              {
                ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
                std::__shared_weak_count::__release_weak(v685);
              }
            }
            v688 = (std::__shared_weak_count *)v819.__r_.__value_.__r.__words[2];
            if (v819.__r_.__value_.__r.__words[2])
            {
              v689 = (unint64_t *)(v819.__r_.__value_.__r.__words[2] + 8);
              do
                v690 = __ldaxr(v689);
              while (__stlxr(v690 - 1, v689));
              if (!v690)
              {
                ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
                std::__shared_weak_count::__release_weak(v688);
              }
            }
            v691 = v764;
            if (v764)
            {
              v692 = (unint64_t *)&v764->__shared_owners_;
              do
                v693 = __ldaxr(v692);
              while (__stlxr(v693 - 1, v692));
              if (!v693)
              {
                ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
                std::__shared_weak_count::__release_weak(v691);
              }
            }
            v694 = (std::__shared_weak_count *)*((_QWORD *)&v766 + 1);
            if (*((_QWORD *)&v766 + 1))
            {
              v695 = (unint64_t *)(*((_QWORD *)&v766 + 1) + 8);
              do
                v696 = __ldaxr(v695);
              while (__stlxr(v696 - 1, v695));
              if (!v696)
              {
                ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
                std::__shared_weak_count::__release_weak(v694);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
    }
  }
  sub_223198030((uint64_t)&v741, (_QWORD *)v741.__r_.__value_.__l.__size_);
  if (v742)
  {
    v743 = v742;
    operator delete(v742);
  }
}

