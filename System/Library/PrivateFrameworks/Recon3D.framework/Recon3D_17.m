void sub_2237ABC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 152))
  {
    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a23);
  sub_2234791DC((uint64_t)&a33);
  sub_223473EA8((void **)(v33 - 216));
  _Unwind_Resume(a1);
}

void sub_2237ABDD0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237ABDE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223473EA8((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_2237ABE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_2234791DC((uint64_t)&a33);
  sub_223473EA8((void **)(v33 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_2237ABE4C(_QWORD ***a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*a2, ***a1, *(*a1)[1], (*a1)[1][1]);
}

uint64_t sub_2237ABE6C(_QWORD ***a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*a2, ***a1, *(*a1)[1], (*a1)[1][1]);
}

uint64_t sub_2237ABE8C(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237ABEA4(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237ABEBC(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237ABED4(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237ABEEC(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237ABF04(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237ABF1C(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

uint64_t sub_2237ABF34(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

uint64_t sub_2237ABF4C(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, **a1);
}

uint64_t sub_2237ABF64(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, **a1);
}

uint64_t sub_2237ABF7C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
}

uint64_t sub_2237ABF8C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
}

void sub_2237ABF9C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  size_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  _QWORD v76[3];
  int v77;
  const char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  _QWORD v84[2];
  std::__shared_weak_count *v85;
  char *v86;
  char *v87;
  uint64_t __dst;
  _BYTE v89[15];
  char v90;
  _BYTE object[24];
  __int128 v92;
  void *__p[2];
  unint64_t v94;
  char v95;
  _QWORD v96[5];

  v96[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v83);
  if (**(int **)(v83 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v83 + 72);
  v6 = sub_22322F254(v83, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v76[0] = &v83;
  v76[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v76[2] = std::chrono::system_clock::now().__d_.__rep_;
  v77 = 3;
  v78 = "unknown file";
  v79 = 34;
  v81 = 0;
  v82 = 0;
  v80 = "unknown function";
  v9 = "yes";
  if (!a4)
    v9 = "no";
  v74 = a4;
  v75 = v9;
  v10 = *(_QWORD *)v76[0];
  v11 = (const char *)(*(_QWORD *)v76[0] + 16);
  v73 = v11;
  if (*(char *)(*(_QWORD *)v76[0] + 39) < 0)
  {
    v11 = *(const char **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v76[0] + 39);
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_12;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v92 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_12:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v15, v11);
  v17 = &object[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    *(_QWORD *)&object[16] = v16;
    *(_QWORD *)&v92 = v19 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v17;
    goto LABEL_25;
  }
  BYTE7(v92) = v16;
  if (v16)
LABEL_25:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  BYTE8(v92) = 1;
  v20 = __p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v22 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v22 = v12 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v12;
    v94 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v94) = v12;
    if (!v12)
    {
      LOBYTE(__p[0]) = 0;
      v95 = 1;
      v21 = *(NSObject **)object;
      if ((SHIBYTE(v94) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  memmove(v20, v11, v12);
  *((_BYTE *)v20 + v12) = 0;
  v95 = 1;
  v21 = *(NSObject **)object;
  if ((SHIBYTE(v94) & 0x80000000) == 0)
  {
LABEL_30:
    if (!BYTE8(v92))
      goto LABEL_39;
LABEL_37:
    if (SBYTE7(v92) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_39;
  }
LABEL_36:
  operator delete(__p[0]);
  if (BYTE8(v92))
    goto LABEL_37;
LABEL_39:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v24 = _os_log_pack_size();
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    v84[0] = v25;
    v84[1] = v25;
    v86 = 0;
    v87 = 0;
    v85 = v26;
    if (v74)
      v28 = 3;
    else
      v28 = 2;
    v90 = v28;
    memcpy(&__dst, v75, v28);
    *(_BYTE *)((unint64_t)&__dst | v28) = 0;
    v29 = __dst;
    v96[0] = *(_QWORD *)v89;
    *(_QWORD *)((char *)v96 + 7) = *(_QWORD *)&v89[7];
    v30 = v90;
    v31 = (char *)operator new(0x38uLL);
    v32 = (std::__shared_weak_count *)v31;
    *((_QWORD *)v31 + 1) = 0;
    v33 = (unint64_t *)(v31 + 8);
    *((_QWORD *)v31 + 2) = 0;
    *(_QWORD *)v31 = &off_24EC1F9F8;
    *((_QWORD *)v31 + 3) = off_24EC1FA48;
    v34 = v96[0];
    *((_QWORD *)v31 + 4) = v29;
    *((_QWORD *)v31 + 5) = v34;
    *(_QWORD *)(v31 + 47) = *(_QWORD *)((char *)v96 + 7);
    v31[55] = v30;
    v86 = v31 + 24;
    v87 = v31;
    *(_QWORD *)object = v25;
    *(_QWORD *)&object[8] = v25;
    *(_QWORD *)&object[16] = v26;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    *(_QWORD *)&v92 = v31 + 24;
    *((_QWORD *)&v92 + 1) = v31;
    do
      v36 = __ldxr(v33);
    while (__stxr(v36 + 1, v33));
    __p[0] = v31 + 24;
    do
      v37 = __ldaxr(v33);
    while (__stlxr(v37 - 1, v33));
    if (!v37)
    {
      (*(void (**)(char *))(*(_QWORD *)v31 + 16))(v31);
      std::__shared_weak_count::__release_weak(v32);
    }
    v38 = v85;
    if (v85)
    {
      v39 = (unint64_t *)&v85->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(_QWORD *)object;
    if (*((char *)__p[0] + 31) >= 0)
      v42 = (char *)__p[0] + 8;
    else
      v42 = (char *)*((_QWORD *)__p[0] + 1);
    v43 = _os_log_pack_fill();
    *(_DWORD *)v43 = 136315138;
    *(_QWORD *)(v43 + 4) = v42;
    v44 = operator new();
    v45 = *(unsigned __int8 *)(v10 + 39);
    v46 = *(const char **)(v10 + 16);
    v47 = *(_QWORD *)(v10 + 24);
    v48 = v92;
    *(_OWORD *)(v44 + 8) = *(_OWORD *)&object[8];
    if ((v45 & 0x80u) != 0)
      v45 = v47;
    else
      v46 = v73;
    *(_QWORD *)v44 = v41;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v44 + 24) = v48;
    v92 = 0uLL;
    *(_QWORD *)(v44 + 40) = v46;
    *(_QWORD *)(v44 + 48) = v45;
    *(_BYTE *)(v44 + 56) = 1;
    __dst = 0;
    v84[0] = v44;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v84);
    v49 = v84[0];
    v84[0] = 0;
    if (v49)
    {
      v50 = *(std::__shared_weak_count **)(v49 + 32);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)(v49 + 16);
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
      v56 = __dst;
      __dst = 0;
      if (v56)
      {
        v57 = *(std::__shared_weak_count **)(v56 + 32);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(std::__shared_weak_count **)(v56 + 16);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v67 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v75;
    v69 = (void *)_os_log_send_and_compose_impl();
    if (v69)
      free(v69);
  }
  if (v5)
  {
    sub_22322C138((uint64_t)v76, "Keyframe updates started (has input frame: %s)", v75);
    sub_223182C08((uint64_t)v76);
  }
  sub_223182C08((uint64_t)v76);
  v70 = v82;
  if (v82)
  {
    v71 = (unint64_t *)&v82->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_2237AC7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237AC800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_22319A054(&a25);
  sub_22319A054(&a30);
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237AC834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  int v25;
  void *v26;

  if (v25 < 0)
    operator delete(v26);
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237AC85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AC888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AC89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237AC914(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC570);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC570))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC568);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC570);
  }
  *a1 = qword_2540CC568;
}

void sub_2237AC9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC570);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC570);
  _Unwind_Resume(a1);
}

void sub_2237ACA08(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  size_t v30;
  size_t v31;
  _QWORD *p_dst;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *__src;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  char *v93;
  std::__shared_weak_count *v94;
  _QWORD *__dst;
  __int128 v96;
  char __s[37];
  _BYTE v98[24];
  __int128 v99;
  void *v100[2];
  unint64_t v101;
  char v102;
  _QWORD v103[5];

  v103[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v90);
  if (**(int **)(v90 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v90 + 72);
  v4 = sub_22322F254(v90, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v83[0] = &v90;
  v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v83[2] = std::chrono::system_clock::now().__d_.__rep_;
  v84 = 3;
  v85 = "unknown file";
  v86 = 38;
  v88 = 0;
  v89 = 0;
  v87 = "unknown function";
  sub_2245664AC(a2, __s);
  v7 = v90;
  v8 = v90 + 16;
  if (*(char *)(v90 + 39) < 0)
  {
    v10 = *(const char **)(v90 + 16);
    v9 = *(_QWORD *)(v90 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v9 = *(unsigned __int8 *)(v90 + 39);
    v10 = (const char *)(*(_QWORD *)v83[0] + 16);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v98);
    sub_223199C58("com.apple.cv3d", (unint64_t)v98, &xmmword_255788F40);
    if ((_BYTE)v99 && (v98[23] & 0x80000000) != 0)
      operator delete(*(void **)v98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v10;
  *(_QWORD *)v98 = os_log_create(v13, v10);
  v15 = &v98[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = a2;
    v20 = v3;
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&v98[16] = v14;
    *(_QWORD *)&v99 = v22 | 0x8000000000000000;
    *(_QWORD *)&v98[8] = v15;
    v3 = v20;
    a2 = v19;
    v8 = v18;
    v7 = v17;
    v6 = v16;
    goto LABEL_23;
  }
  BYTE7(v99) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v99) = 1;
  v23 = v100;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v25 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v25 = v9 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v100[1] = (void *)v9;
    v101 = v26 | 0x8000000000000000;
    v100[0] = v23;
  }
  else
  {
    HIBYTE(v101) = v9;
    if (!v9)
    {
      LOBYTE(v100[0]) = 0;
      v102 = 1;
      v24 = *(NSObject **)v98;
      if ((SHIBYTE(v101) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, __src, v9);
  *((_BYTE *)v23 + v9) = 0;
  v102 = 1;
  v24 = *(NSObject **)v98;
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v99))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v100[0]);
  if (!BYTE8(v99))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v99) < 0)
    operator delete(*(void **)&v98[8]);
LABEL_37:
  if (*(_QWORD *)v98)
    os_release(*(void **)v98);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_QWORD *)v98 = 0xD04100202;
    *(_WORD *)&v98[8] = 2080;
    *(_QWORD *)&v98[10] = __s;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_113;
  }
  v27 = _os_log_pack_size();
  v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
  v29 = (std::__shared_weak_count *)operator new();
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = v28;
  *(_QWORD *)&v91 = v28;
  *((_QWORD *)&v91 + 1) = v28;
  v93 = 0;
  v94 = 0;
  v92 = v29;
  v30 = strlen(__s);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v96 = v31;
    *((_QWORD *)&v96 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v96) = v30;
  p_dst = &__dst;
  if (v30)
LABEL_50:
    memcpy(p_dst, __s, v31);
  *((_BYTE *)p_dst + v31) = 0;
  v36 = __dst;
  v103[0] = v96;
  *(_QWORD *)((char *)v103 + 7) = *(_QWORD *)((char *)&v96 + 7);
  v37 = HIBYTE(v96);
  v38 = operator new(0x38uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1FA48;
  *v38 = &off_24EC1F9F8;
  v39 = v103[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v103 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v103[0] = 0;
  *(_QWORD *)((char *)v103 + 7) = 0;
  v40 = v94;
  v93 = (char *)(v38 + 3);
  v94 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v98 = v91;
  v43 = v93;
  *(_QWORD *)&v98[16] = v92;
  if (v92)
  {
    v44 = (unint64_t *)&v92->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v94;
  *(_QWORD *)&v99 = v43;
  *((_QWORD *)&v99 + 1) = v94;
  if (v94)
  {
    v47 = (unint64_t *)&v94->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v100[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v100[0] = v43;
  }
  v50 = v92;
  if (v92)
  {
    v51 = (unint64_t *)&v92->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_QWORD *)v98;
  if (*((char *)v100[0] + 31) >= 0)
    v54 = (char *)v100[0] + 8;
  else
    v54 = (char *)*((_QWORD *)v100[0] + 1);
  v55 = _os_log_pack_fill();
  *(_DWORD *)v55 = 68157954;
  *(_DWORD *)(v55 + 4) = 13;
  *(_WORD *)(v55 + 8) = 2080;
  *(_QWORD *)(v55 + 10) = v54;
  v56 = operator new();
  v57 = *(unsigned __int8 *)(v7 + 39);
  if ((v57 & 0x80u) == 0)
    v58 = v8;
  else
    v58 = *(_QWORD *)(v7 + 16);
  if ((v57 & 0x80u) != 0)
    v57 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)v56 = v53;
  *(_OWORD *)(v56 + 8) = *(_OWORD *)&v98[8];
  *(_QWORD *)&v98[8] = 0;
  *(_QWORD *)&v98[16] = 0;
  *(_OWORD *)(v56 + 24) = v99;
  v99 = 0uLL;
  *(_QWORD *)(v56 + 40) = v58;
  *(_QWORD *)(v56 + 48) = v57;
  *(_BYTE *)(v56 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v91 = v56;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v91);
  v59 = v91;
  *(_QWORD *)&v91 = 0;
  if (v59)
  {
    v60 = *(std::__shared_weak_count **)(v59 + 32);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(std::__shared_weak_count **)(v59 + 16);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
    v66 = __dst;
    __dst = 0;
    if (v66)
    {
      v67 = (std::__shared_weak_count *)v66[4];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v66[2];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)&v98[16];
  if (*(_QWORD *)&v98[16])
  {
    v77 = (unint64_t *)(*(_QWORD *)&v98[16] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_113:
  if (v3)
  {
    sub_2245664AC(a2, v98);
    sub_22322C138((uint64_t)v83, "KF %.13s was created", v98);
    sub_223182C08((uint64_t)v83);
  }
  sub_223182C08((uint64_t)v83);
  v79 = v89;
  if (v89)
  {
    v80 = (unint64_t *)&v89->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_2237AD318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AD38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AD3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AD40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AD468(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  size_t v28;
  size_t v29;
  _QWORD *p_dst;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD v86[3];
  int v87;
  const char *v88;
  int v89;
  const char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  char *v96;
  std::__shared_weak_count *v97;
  _QWORD *__dst;
  __int128 v99;
  char __s[37];
  _BYTE v101[24];
  __int128 v102;
  void *v103[2];
  unint64_t v104;
  char v105;
  _QWORD v106[5];

  v106[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v93);
  if (**(int **)(v93 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v93 + 72);
  v6 = sub_22322F254(v93, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v86[0] = &v93;
  v86[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v86[2] = std::chrono::system_clock::now().__d_.__rep_;
  v87 = 3;
  v88 = "unknown file";
  v89 = 45;
  v91 = 0;
  v92 = 0;
  v90 = "unknown function";
  sub_2245664AC(a2, __s);
  v9 = v93;
  v10 = (const char *)(v93 + 16);
  v84 = v93 + 16;
  if (*(char *)(v93 + 39) < 0)
  {
    v10 = *(const char **)(v93 + 16);
    v11 = *(_QWORD *)(v93 + 24);
    v85 = v5;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v93 + 39);
    v85 = v5;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v101);
    sub_223199C58("com.apple.cv3d", (unint64_t)v101, &xmmword_255788F40);
    if ((_BYTE)v102 && (v101[23] & 0x80000000) != 0)
      operator delete(*(void **)v101);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v14 = (const char *)&xmmword_255788F40;
  else
    v14 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v15 = byte_255788F57;
  else
    v15 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v101 = os_log_create(v14, v10);
  v16 = &v101[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = a2;
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&v101[16] = v15;
    *(_QWORD *)&v102 = v19 | 0x8000000000000000;
    *(_QWORD *)&v101[8] = v16;
    a2 = v17;
    goto LABEL_23;
  }
  BYTE7(v102) = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  BYTE8(v102) = 1;
  v20 = v103;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v23 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v23 = v11 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    v103[1] = (void *)v11;
    v104 = v24 | 0x8000000000000000;
    v103[0] = v20;
    v21 = v85;
  }
  else
  {
    HIBYTE(v104) = v11;
    v21 = v85;
    if (!v11)
    {
      LOBYTE(v103[0]) = 0;
      v105 = 1;
      v22 = *(NSObject **)v101;
      if ((SHIBYTE(v104) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v10, v11);
  *((_BYTE *)v20 + v11) = 0;
  v105 = 1;
  v22 = *(NSObject **)v101;
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v102))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v103[0]);
  if (!BYTE8(v102))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v102) < 0)
    operator delete(*(void **)&v101[8]);
LABEL_37:
  if (*(_QWORD *)v101)
    os_release(*(void **)v101);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    v31 = *a3;
    v32 = a3[1];
    *(_QWORD *)v101 = 0xD04100402;
    *(_WORD *)&v101[8] = 2080;
    *(_QWORD *)&v101[10] = __s;
    *(_WORD *)&v101[18] = 1024;
    *(_DWORD *)&v101[20] = v31;
    LOWORD(v102) = 1024;
    *(_DWORD *)((char *)&v102 + 2) = v32;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_110;
  }
  v25 = _os_log_pack_size();
  v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
  v27 = (std::__shared_weak_count *)operator new();
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = v26;
  *(_QWORD *)&v94 = v26;
  *((_QWORD *)&v94 + 1) = v26;
  v96 = 0;
  v97 = 0;
  v95 = v27;
  v28 = strlen(__s);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v34 = v28 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v99 = v29;
    *((_QWORD *)&v99 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    v21 = v85;
    goto LABEL_50;
  }
  HIBYTE(v99) = v28;
  p_dst = &__dst;
  if (v28)
LABEL_50:
    memcpy(p_dst, __s, v29);
  *((_BYTE *)p_dst + v29) = 0;
  v36 = __dst;
  v106[0] = v99;
  *(_QWORD *)((char *)v106 + 7) = *(_QWORD *)((char *)&v99 + 7);
  v37 = HIBYTE(v99);
  v38 = operator new(0x40uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1F890;
  *v38 = &off_24EC1F840;
  v39 = v106[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v106 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v106[0] = 0;
  *(_QWORD *)((char *)v106 + 7) = 0;
  v40 = v97;
  v96 = (char *)(v38 + 3);
  v97 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v101 = v94;
  v43 = v96;
  *(_QWORD *)&v101[16] = v95;
  if (v95)
  {
    v44 = (unint64_t *)&v95->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v97;
  *(_QWORD *)&v102 = v43;
  *((_QWORD *)&v102 + 1) = v97;
  if (v97)
  {
    v47 = (unint64_t *)&v97->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v103[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v103[0] = v43;
  }
  v50 = v95;
  if (v95)
  {
    v51 = (unint64_t *)&v95->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_QWORD *)v101;
  if (*((char *)v103[0] + 31) >= 0)
    v54 = (char *)v103[0] + 8;
  else
    v54 = (char *)*((_QWORD *)v103[0] + 1);
  v55 = _os_log_pack_fill();
  v56 = *a3;
  v57 = a3[1];
  *(_DWORD *)v55 = 68158466;
  *(_DWORD *)(v55 + 4) = 13;
  *(_WORD *)(v55 + 8) = 2080;
  *(_QWORD *)(v55 + 10) = v54;
  *(_WORD *)(v55 + 18) = 1024;
  *(_DWORD *)(v55 + 20) = v56;
  *(_WORD *)(v55 + 24) = 1024;
  *(_DWORD *)(v55 + 26) = v57;
  v58 = operator new();
  v59 = *(unsigned __int8 *)(v9 + 39);
  v60 = v84;
  if ((v59 & 0x80u) != 0)
  {
    v60 = *(_QWORD *)(v9 + 16);
    v59 = *(_QWORD *)(v9 + 24);
  }
  *(_QWORD *)v58 = v53;
  *(_OWORD *)(v58 + 8) = *(_OWORD *)&v101[8];
  *(_QWORD *)&v101[8] = 0;
  *(_QWORD *)&v101[16] = 0;
  *(_OWORD *)(v58 + 24) = v102;
  v102 = 0uLL;
  *(_QWORD *)(v58 + 40) = v60;
  *(_QWORD *)(v58 + 48) = v59;
  *(_BYTE *)(v58 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v94 = v58;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v94);
  v61 = v94;
  *(_QWORD *)&v94 = 0;
  if (v61)
  {
    v62 = *(std::__shared_weak_count **)(v61 + 32);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = *(std::__shared_weak_count **)(v61 + 16);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
    v68 = __dst;
    __dst = 0;
    if (v68)
    {
      v69 = (std::__shared_weak_count *)v68[4];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)v68[2];
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&v101[16];
  if (*(_QWORD *)&v101[16])
  {
    v79 = (unint64_t *)(*(_QWORD *)&v101[16] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_110:
  if (v21)
  {
    sub_2245664AC(a2, v101);
    sub_22322C138((uint64_t)v86, "KF %.13s relocalized (pose: %d, content: %d)", v101, *a3, a3[1]);
    sub_223182C08((uint64_t)v86);
  }
  sub_223182C08((uint64_t)v86);
  v81 = v92;
  if (v92)
  {
    v82 = (unint64_t *)&v92->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_2237ADDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237ADDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237ADE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  int v25;
  void *v26;

  if (v25 < 0)
    operator delete(v26);
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237ADE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237ADE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 160) && *(char *)(v7 - 161) < 0)
    operator delete(*(void **)(v7 - 184));
  v9 = *(void **)(v7 - 192);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237ADEF8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  size_t v28;
  size_t v29;
  _QWORD *p_dst;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD v86[3];
  int v87;
  const char *v88;
  int v89;
  const char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  char *v96;
  std::__shared_weak_count *v97;
  _QWORD *__dst;
  __int128 v99;
  char __s[37];
  _BYTE v101[24];
  __int128 v102;
  void *v103[2];
  unint64_t v104;
  char v105;
  _QWORD v106[5];

  v106[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v93);
  if (**(int **)(v93 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v93 + 72);
  v6 = sub_22322F254(v93, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v86[0] = &v93;
  v86[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v86[2] = std::chrono::system_clock::now().__d_.__rep_;
  v87 = 3;
  v88 = "unknown file";
  v89 = 52;
  v91 = 0;
  v92 = 0;
  v90 = "unknown function";
  sub_2245664AC(a2, __s);
  v9 = v93;
  v10 = (const char *)(v93 + 16);
  v84 = v93 + 16;
  if (*(char *)(v93 + 39) < 0)
  {
    v10 = *(const char **)(v93 + 16);
    v11 = *(_QWORD *)(v93 + 24);
    v85 = v5;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v93 + 39);
    v85 = v5;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v101);
    sub_223199C58("com.apple.cv3d", (unint64_t)v101, &xmmword_255788F40);
    if ((_BYTE)v102 && (v101[23] & 0x80000000) != 0)
      operator delete(*(void **)v101);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v14 = (const char *)&xmmword_255788F40;
  else
    v14 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v15 = byte_255788F57;
  else
    v15 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v101 = os_log_create(v14, v10);
  v16 = &v101[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = a2;
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&v101[16] = v15;
    *(_QWORD *)&v102 = v19 | 0x8000000000000000;
    *(_QWORD *)&v101[8] = v16;
    a2 = v17;
    goto LABEL_23;
  }
  BYTE7(v102) = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  BYTE8(v102) = 1;
  v20 = v103;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v23 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v23 = v11 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    v103[1] = (void *)v11;
    v104 = v24 | 0x8000000000000000;
    v103[0] = v20;
    v21 = v85;
  }
  else
  {
    HIBYTE(v104) = v11;
    v21 = v85;
    if (!v11)
    {
      LOBYTE(v103[0]) = 0;
      v105 = 1;
      v22 = *(NSObject **)v101;
      if ((SHIBYTE(v104) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v10, v11);
  *((_BYTE *)v20 + v11) = 0;
  v105 = 1;
  v22 = *(NSObject **)v101;
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v102))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v103[0]);
  if (!BYTE8(v102))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v102) < 0)
    operator delete(*(void **)&v101[8]);
LABEL_37:
  if (*(_QWORD *)v101)
    os_release(*(void **)v101);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    v31 = *a3;
    v32 = a3[1];
    *(_QWORD *)v101 = 0xD04100402;
    *(_WORD *)&v101[8] = 2080;
    *(_QWORD *)&v101[10] = __s;
    *(_WORD *)&v101[18] = 1024;
    *(_DWORD *)&v101[20] = v31;
    LOWORD(v102) = 1024;
    *(_DWORD *)((char *)&v102 + 2) = v32;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_110;
  }
  v25 = _os_log_pack_size();
  v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
  v27 = (std::__shared_weak_count *)operator new();
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = v26;
  *(_QWORD *)&v94 = v26;
  *((_QWORD *)&v94 + 1) = v26;
  v96 = 0;
  v97 = 0;
  v95 = v27;
  v28 = strlen(__s);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v34 = v28 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v99 = v29;
    *((_QWORD *)&v99 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    v21 = v85;
    goto LABEL_50;
  }
  HIBYTE(v99) = v28;
  p_dst = &__dst;
  if (v28)
LABEL_50:
    memcpy(p_dst, __s, v29);
  *((_BYTE *)p_dst + v29) = 0;
  v36 = __dst;
  v106[0] = v99;
  *(_QWORD *)((char *)v106 + 7) = *(_QWORD *)((char *)&v99 + 7);
  v37 = HIBYTE(v99);
  v38 = operator new(0x40uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1F890;
  *v38 = &off_24EC1F840;
  v39 = v106[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v106 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v106[0] = 0;
  *(_QWORD *)((char *)v106 + 7) = 0;
  v40 = v97;
  v96 = (char *)(v38 + 3);
  v97 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v101 = v94;
  v43 = v96;
  *(_QWORD *)&v101[16] = v95;
  if (v95)
  {
    v44 = (unint64_t *)&v95->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v97;
  *(_QWORD *)&v102 = v43;
  *((_QWORD *)&v102 + 1) = v97;
  if (v97)
  {
    v47 = (unint64_t *)&v97->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v103[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v103[0] = v43;
  }
  v50 = v95;
  if (v95)
  {
    v51 = (unint64_t *)&v95->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_QWORD *)v101;
  if (*((char *)v103[0] + 31) >= 0)
    v54 = (char *)v103[0] + 8;
  else
    v54 = (char *)*((_QWORD *)v103[0] + 1);
  v55 = _os_log_pack_fill();
  v56 = *a3;
  v57 = a3[1];
  *(_DWORD *)v55 = 68158466;
  *(_DWORD *)(v55 + 4) = 13;
  *(_WORD *)(v55 + 8) = 2080;
  *(_QWORD *)(v55 + 10) = v54;
  *(_WORD *)(v55 + 18) = 1024;
  *(_DWORD *)(v55 + 20) = v56;
  *(_WORD *)(v55 + 24) = 1024;
  *(_DWORD *)(v55 + 26) = v57;
  v58 = operator new();
  v59 = *(unsigned __int8 *)(v9 + 39);
  v60 = v84;
  if ((v59 & 0x80u) != 0)
  {
    v60 = *(_QWORD *)(v9 + 16);
    v59 = *(_QWORD *)(v9 + 24);
  }
  *(_QWORD *)v58 = v53;
  *(_OWORD *)(v58 + 8) = *(_OWORD *)&v101[8];
  *(_QWORD *)&v101[8] = 0;
  *(_QWORD *)&v101[16] = 0;
  *(_OWORD *)(v58 + 24) = v102;
  v102 = 0uLL;
  *(_QWORD *)(v58 + 40) = v60;
  *(_QWORD *)(v58 + 48) = v59;
  *(_BYTE *)(v58 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v94 = v58;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v94);
  v61 = v94;
  *(_QWORD *)&v94 = 0;
  if (v61)
  {
    v62 = *(std::__shared_weak_count **)(v61 + 32);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = *(std::__shared_weak_count **)(v61 + 16);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
    v68 = __dst;
    __dst = 0;
    if (v68)
    {
      v69 = (std::__shared_weak_count *)v68[4];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)v68[2];
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x227684CE8](v68, 0x10F0C40B62ED6C6);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&v101[16];
  if (*(_QWORD *)&v101[16])
  {
    v79 = (unint64_t *)(*(_QWORD *)&v101[16] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_110:
  if (v21)
  {
    sub_2245664AC(a2, v101);
    sub_22322C138((uint64_t)v86, "KF %.13s updated (pose: %d, content: %d)", v101, *a3, a3[1]);
    sub_223182C08((uint64_t)v86);
  }
  sub_223182C08((uint64_t)v86);
  v81 = v92;
  if (v92)
  {
    v82 = (unint64_t *)&v92->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_2237AE838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AE878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237AE8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  int v25;
  void *v26;

  if (v25 < 0)
    operator delete(v26);
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237AE908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AE92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 160) && *(char *)(v7 - 161) < 0)
    operator delete(*(void **)(v7 - 184));
  v9 = *(void **)(v7 - 192);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AE988(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  size_t v30;
  size_t v31;
  _QWORD *p_dst;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *__src;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  char *v93;
  std::__shared_weak_count *v94;
  _QWORD *__dst;
  __int128 v96;
  char __s[37];
  _BYTE v98[24];
  __int128 v99;
  void *v100[2];
  unint64_t v101;
  char v102;
  _QWORD v103[5];

  v103[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v90);
  if (**(int **)(v90 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v90 + 72);
  v4 = sub_22322F254(v90, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v83[0] = &v90;
  v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v83[2] = std::chrono::system_clock::now().__d_.__rep_;
  v84 = 3;
  v85 = "unknown file";
  v86 = 56;
  v88 = 0;
  v89 = 0;
  v87 = "unknown function";
  sub_2245664AC(a2, __s);
  v7 = v90;
  v8 = v90 + 16;
  if (*(char *)(v90 + 39) < 0)
  {
    v10 = *(const char **)(v90 + 16);
    v9 = *(_QWORD *)(v90 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v9 = *(unsigned __int8 *)(v90 + 39);
    v10 = (const char *)(*(_QWORD *)v83[0] + 16);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v98);
    sub_223199C58("com.apple.cv3d", (unint64_t)v98, &xmmword_255788F40);
    if ((_BYTE)v99 && (v98[23] & 0x80000000) != 0)
      operator delete(*(void **)v98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v10;
  *(_QWORD *)v98 = os_log_create(v13, v10);
  v15 = &v98[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = a2;
    v20 = v3;
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&v98[16] = v14;
    *(_QWORD *)&v99 = v22 | 0x8000000000000000;
    *(_QWORD *)&v98[8] = v15;
    v3 = v20;
    a2 = v19;
    v8 = v18;
    v7 = v17;
    v6 = v16;
    goto LABEL_23;
  }
  BYTE7(v99) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v99) = 1;
  v23 = v100;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v25 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v25 = v9 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v100[1] = (void *)v9;
    v101 = v26 | 0x8000000000000000;
    v100[0] = v23;
  }
  else
  {
    HIBYTE(v101) = v9;
    if (!v9)
    {
      LOBYTE(v100[0]) = 0;
      v102 = 1;
      v24 = *(NSObject **)v98;
      if ((SHIBYTE(v101) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, __src, v9);
  *((_BYTE *)v23 + v9) = 0;
  v102 = 1;
  v24 = *(NSObject **)v98;
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v99))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v100[0]);
  if (!BYTE8(v99))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v99) < 0)
    operator delete(*(void **)&v98[8]);
LABEL_37:
  if (*(_QWORD *)v98)
    os_release(*(void **)v98);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_QWORD *)v98 = 0xD04100202;
    *(_WORD *)&v98[8] = 2080;
    *(_QWORD *)&v98[10] = __s;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_113;
  }
  v27 = _os_log_pack_size();
  v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
  v29 = (std::__shared_weak_count *)operator new();
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = v28;
  *(_QWORD *)&v91 = v28;
  *((_QWORD *)&v91 + 1) = v28;
  v93 = 0;
  v94 = 0;
  v92 = v29;
  v30 = strlen(__s);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v96 = v31;
    *((_QWORD *)&v96 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v96) = v30;
  p_dst = &__dst;
  if (v30)
LABEL_50:
    memcpy(p_dst, __s, v31);
  *((_BYTE *)p_dst + v31) = 0;
  v36 = __dst;
  v103[0] = v96;
  *(_QWORD *)((char *)v103 + 7) = *(_QWORD *)((char *)&v96 + 7);
  v37 = HIBYTE(v96);
  v38 = operator new(0x38uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1FA48;
  *v38 = &off_24EC1F9F8;
  v39 = v103[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v103 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v103[0] = 0;
  *(_QWORD *)((char *)v103 + 7) = 0;
  v40 = v94;
  v93 = (char *)(v38 + 3);
  v94 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v98 = v91;
  v43 = v93;
  *(_QWORD *)&v98[16] = v92;
  if (v92)
  {
    v44 = (unint64_t *)&v92->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v94;
  *(_QWORD *)&v99 = v43;
  *((_QWORD *)&v99 + 1) = v94;
  if (v94)
  {
    v47 = (unint64_t *)&v94->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v100[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v100[0] = v43;
  }
  v50 = v92;
  if (v92)
  {
    v51 = (unint64_t *)&v92->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_QWORD *)v98;
  if (*((char *)v100[0] + 31) >= 0)
    v54 = (char *)v100[0] + 8;
  else
    v54 = (char *)*((_QWORD *)v100[0] + 1);
  v55 = _os_log_pack_fill();
  *(_DWORD *)v55 = 68157954;
  *(_DWORD *)(v55 + 4) = 13;
  *(_WORD *)(v55 + 8) = 2080;
  *(_QWORD *)(v55 + 10) = v54;
  v56 = operator new();
  v57 = *(unsigned __int8 *)(v7 + 39);
  if ((v57 & 0x80u) == 0)
    v58 = v8;
  else
    v58 = *(_QWORD *)(v7 + 16);
  if ((v57 & 0x80u) != 0)
    v57 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)v56 = v53;
  *(_OWORD *)(v56 + 8) = *(_OWORD *)&v98[8];
  *(_QWORD *)&v98[8] = 0;
  *(_QWORD *)&v98[16] = 0;
  *(_OWORD *)(v56 + 24) = v99;
  v99 = 0uLL;
  *(_QWORD *)(v56 + 40) = v58;
  *(_QWORD *)(v56 + 48) = v57;
  *(_BYTE *)(v56 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v91 = v56;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v91);
  v59 = v91;
  *(_QWORD *)&v91 = 0;
  if (v59)
  {
    v60 = *(std::__shared_weak_count **)(v59 + 32);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(std::__shared_weak_count **)(v59 + 16);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
    v66 = __dst;
    __dst = 0;
    if (v66)
    {
      v67 = (std::__shared_weak_count *)v66[4];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v66[2];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)&v98[16];
  if (*(_QWORD *)&v98[16])
  {
    v77 = (unint64_t *)(*(_QWORD *)&v98[16] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_113:
  if (v3)
  {
    sub_2245664AC(a2, v98);
    sub_22322C138((uint64_t)v83, "KF %.13s externalized", v98);
    sub_223182C08((uint64_t)v83);
  }
  sub_223182C08((uint64_t)v83);
  v79 = v89;
  if (v89)
  {
    v80 = (unint64_t *)&v89->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_2237AF298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AF2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AF30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AF368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AF3E8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  size_t v30;
  size_t v31;
  _QWORD *p_dst;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *__src;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  char *v93;
  std::__shared_weak_count *v94;
  _QWORD *__dst;
  __int128 v96;
  char __s[37];
  _BYTE v98[24];
  __int128 v99;
  void *v100[2];
  unint64_t v101;
  char v102;
  _QWORD v103[5];

  v103[2] = *MEMORY[0x24BDAC8D0];
  sub_2237AC914(&v90);
  if (**(int **)(v90 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v90 + 72);
  v4 = sub_22322F254(v90, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v83[0] = &v90;
  v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v83[2] = std::chrono::system_clock::now().__d_.__rep_;
  v84 = 3;
  v85 = "unknown file";
  v86 = 60;
  v88 = 0;
  v89 = 0;
  v87 = "unknown function";
  sub_2245664AC(a2, __s);
  v7 = v90;
  v8 = v90 + 16;
  if (*(char *)(v90 + 39) < 0)
  {
    v10 = *(const char **)(v90 + 16);
    v9 = *(_QWORD *)(v90 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v9 = *(unsigned __int8 *)(v90 + 39);
    v10 = (const char *)(*(_QWORD *)v83[0] + 16);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v98);
    sub_223199C58("com.apple.cv3d", (unint64_t)v98, &xmmword_255788F40);
    if ((_BYTE)v99 && (v98[23] & 0x80000000) != 0)
      operator delete(*(void **)v98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v10;
  *(_QWORD *)v98 = os_log_create(v13, v10);
  v15 = &v98[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = a2;
    v20 = v3;
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&v98[16] = v14;
    *(_QWORD *)&v99 = v22 | 0x8000000000000000;
    *(_QWORD *)&v98[8] = v15;
    v3 = v20;
    a2 = v19;
    v8 = v18;
    v7 = v17;
    v6 = v16;
    goto LABEL_23;
  }
  BYTE7(v99) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v99) = 1;
  v23 = v100;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v25 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v25 = v9 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v100[1] = (void *)v9;
    v101 = v26 | 0x8000000000000000;
    v100[0] = v23;
  }
  else
  {
    HIBYTE(v101) = v9;
    if (!v9)
    {
      LOBYTE(v100[0]) = 0;
      v102 = 1;
      v24 = *(NSObject **)v98;
      if ((SHIBYTE(v101) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, __src, v9);
  *((_BYTE *)v23 + v9) = 0;
  v102 = 1;
  v24 = *(NSObject **)v98;
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v99))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v100[0]);
  if (!BYTE8(v99))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v99) < 0)
    operator delete(*(void **)&v98[8]);
LABEL_37:
  if (*(_QWORD *)v98)
    os_release(*(void **)v98);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_QWORD *)v98 = 0xD04100202;
    *(_WORD *)&v98[8] = 2080;
    *(_QWORD *)&v98[10] = __s;
    v33 = (void *)_os_log_send_and_compose_impl();
    if (v33)
      free(v33);
    goto LABEL_113;
  }
  v27 = _os_log_pack_size();
  v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
  v29 = (std::__shared_weak_count *)operator new();
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = v28;
  *(_QWORD *)&v91 = v28;
  *((_QWORD *)&v91 + 1) = v28;
  v93 = 0;
  v94 = 0;
  v92 = v29;
  v30 = strlen(__s);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    *(_QWORD *)&v96 = v31;
    *((_QWORD *)&v96 + 1) = v35 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v96) = v30;
  p_dst = &__dst;
  if (v30)
LABEL_50:
    memcpy(p_dst, __s, v31);
  *((_BYTE *)p_dst + v31) = 0;
  v36 = __dst;
  v103[0] = v96;
  *(_QWORD *)((char *)v103 + 7) = *(_QWORD *)((char *)&v96 + 7);
  v37 = HIBYTE(v96);
  v38 = operator new(0x38uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = off_24EC1FA48;
  *v38 = &off_24EC1F9F8;
  v39 = v103[0];
  v38[4] = v36;
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 47) = *(_QWORD *)((char *)v103 + 7);
  *((_BYTE *)v38 + 55) = v37;
  v103[0] = 0;
  *(_QWORD *)((char *)v103 + 7) = 0;
  v40 = v94;
  v93 = (char *)(v38 + 3);
  v94 = (std::__shared_weak_count *)v38;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *(_OWORD *)v98 = v91;
  v43 = v93;
  *(_QWORD *)&v98[16] = v92;
  if (v92)
  {
    v44 = (unint64_t *)&v92->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v94;
  *(_QWORD *)&v99 = v43;
  *((_QWORD *)&v99 + 1) = v94;
  if (v94)
  {
    v47 = (unint64_t *)&v94->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v100[0] = v43;
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    v100[0] = v43;
  }
  v50 = v92;
  if (v92)
  {
    v51 = (unint64_t *)&v92->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_QWORD *)v98;
  if (*((char *)v100[0] + 31) >= 0)
    v54 = (char *)v100[0] + 8;
  else
    v54 = (char *)*((_QWORD *)v100[0] + 1);
  v55 = _os_log_pack_fill();
  *(_DWORD *)v55 = 68157954;
  *(_DWORD *)(v55 + 4) = 13;
  *(_WORD *)(v55 + 8) = 2080;
  *(_QWORD *)(v55 + 10) = v54;
  v56 = operator new();
  v57 = *(unsigned __int8 *)(v7 + 39);
  if ((v57 & 0x80u) == 0)
    v58 = v8;
  else
    v58 = *(_QWORD *)(v7 + 16);
  if ((v57 & 0x80u) != 0)
    v57 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)v56 = v53;
  *(_OWORD *)(v56 + 8) = *(_OWORD *)&v98[8];
  *(_QWORD *)&v98[8] = 0;
  *(_QWORD *)&v98[16] = 0;
  *(_OWORD *)(v56 + 24) = v99;
  v99 = 0uLL;
  *(_QWORD *)(v56 + 40) = v58;
  *(_QWORD *)(v56 + 48) = v57;
  *(_BYTE *)(v56 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v91 = v56;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v91);
  v59 = v91;
  *(_QWORD *)&v91 = 0;
  if (v59)
  {
    v60 = *(std::__shared_weak_count **)(v59 + 32);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(std::__shared_weak_count **)(v59 + 16);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
    v66 = __dst;
    __dst = 0;
    if (v66)
    {
      v67 = (std::__shared_weak_count *)v66[4];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v66[2];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)&v98[16];
  if (*(_QWORD *)&v98[16])
  {
    v77 = (unint64_t *)(*(_QWORD *)&v98[16] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_113:
  if (v3)
  {
    sub_2245664AC(a2, v98);
    sub_22322C138((uint64_t)v83, "KF %.13s deleted", v98);
    sub_223182C08((uint64_t)v83);
  }
  sub_223182C08((uint64_t)v83);
  v79 = v89;
  if (v89)
  {
    v80 = (unint64_t *)&v89->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_2237AFCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AFD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AFD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AFDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AFE48()
{
  int v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  const char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD v59[3];
  int v60;
  const char *v61;
  int v62;
  const char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  void *object;
  void *v68[2];
  __int128 v69;
  void *__p[2];
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;

  sub_2237AC914(&v66);
  if (**(int **)(v66 + 56) > 3)
    return;
  v0 = *(unsigned __int8 *)(v66 + 72);
  v1 = sub_22322F254(v66, "OSLogSurrogateAppender", 1, 0);
  if (!v0 && v1 == 0)
    return;
  v3 = v1;
  v59[0] = &v66;
  v59[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v59[2] = std::chrono::system_clock::now().__d_.__rep_;
  v60 = 3;
  v61 = "unknown file";
  v62 = 64;
  v64 = 0;
  v65 = 0;
  v63 = "unknown function";
  v4 = v66;
  v5 = v66 + 16;
  if (*(char *)(v66 + 39) < 0)
  {
    v7 = *(const char **)(v66 + 16);
    v6 = *(_QWORD *)(v66 + 24);
    v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v66 + 39);
    v7 = (const char *)(*(_QWORD *)v59[0] + 16);
    v8 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v8 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v69 && SHIBYTE(v68[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v10 = (const char *)&xmmword_255788F40;
  else
    v10 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v11 = byte_255788F57;
  else
    v11 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v10, v7);
  v12 = v68;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v13 = v3;
    v14 = v7;
    v15 = v4;
    v16 = v0;
    v17 = v5;
    v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v18 = v11 | 7;
    v19 = v18 + 1;
    v12 = operator new(v18 + 1);
    v68[1] = (void *)v11;
    *(_QWORD *)&v69 = v19 | 0x8000000000000000;
    v68[0] = v12;
    v5 = v17;
    v0 = v16;
    v4 = v15;
    v7 = v14;
    v3 = v13;
    goto LABEL_23;
  }
  BYTE7(v69) = v11;
  if (v11)
LABEL_23:
    memmove(v12, v10, v11);
  *((_BYTE *)v12 + v11) = 0;
  BYTE8(v69) = 1;
  v20 = __p;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v6 >= 0x17)
  {
    v22 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v22 = v6 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v6;
    v71 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v71) = v6;
    if (!v6)
    {
      LOBYTE(__p[0]) = 0;
      v72 = 1;
      v21 = object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v7, v6);
  *((_BYTE *)v20 + v6) = 0;
  v72 = 1;
  v21 = object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v69))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v69) < 0)
      operator delete(v68[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v69))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v24 = _os_log_pack_size();
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v27 = v26;
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    object = v25;
    v68[0] = v25;
    v68[1] = v26;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v69 = 0uLL;
    __p[0] = 0;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v32 = operator new();
    v33 = *(unsigned __int8 *)(v4 + 39);
    if ((v33 & 0x80u) == 0)
      v34 = v5;
    else
      v34 = *(_QWORD *)(v4 + 16);
    if ((v33 & 0x80u) != 0)
      v33 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)v32 = v31;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v68;
    v68[0] = 0;
    v68[1] = 0;
    *(_OWORD *)(v32 + 24) = v69;
    v69 = 0uLL;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    *(_BYTE *)(v32 + 56) = 1;
    v73 = 0;
    v74 = v32;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), &v74);
    v35 = v74;
    v74 = 0;
    if (v35)
    {
      v36 = *(std::__shared_weak_count **)(v35 + 32);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v35 + 16);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
      v42 = v73;
      v73 = 0;
      if (v42)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 32);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *(std::__shared_weak_count **)(v42 + 16);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x227684CE8](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)v68[1];
    if (v68[1])
    {
      v53 = (unint64_t *)((char *)v68[1] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    if (v55)
      free(v55);
  }
  if (v0)
  {
    sub_22322C138((uint64_t)v59, "Keyframe updates completed");
    sub_223182C08((uint64_t)v59);
  }
  sub_223182C08((uint64_t)v59);
  v56 = v65;
  if (v65)
  {
    v57 = (unint64_t *)&v65->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_2237B0528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2237B0568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B05C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B05E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B05F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2237B0640()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237B066C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64x2_t *v5;
  void **v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;
  BOOL (*v17)(double *);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void **v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL (*v28)(double *);
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL (*v34)(double *);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  int64x2_t *v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  void **v77;
  unint64_t v78;
  BOOL v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  int64x2_t *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  uint64_t v92;
  int64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  void **v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  void **v109;
  void **v110;
  __int128 v111;
  void **v112;
  void **v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  void **v121;
  void *v122;
  void **v123;
  void *v124;
  void *v125;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  int64x2_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  BOOL (*v141)(double *);
  uint64_t *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  void *__p;
  void **v148;
  void **v149;
  int64x2_t *v150;
  int64x2_t *v151;
  char *v152;
  void **v153;
  unsigned int *v154;
  void **p_p;
  void **v156;
  void **v157;
  _QWORD v158[2];
  uint64_t v159;
  BOOL (*v160)(double *);
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  v158[0] = a2;
  v159 = a2;
  v160 = sub_2237B15B0;
  v3 = *(_QWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  v151 = 0;
  v152 = 0;
  v150 = 0;
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v148 = 0;
    v149 = 0;
    __p = 0;
    goto LABEL_151;
  }
  if ((v4 & 0x8000000000000000) != 0)
    sub_22367C394();
  v5 = (int64x2_t *)operator new(v4 >> 3);
  v150 = v5;
  v152 = &v5->i8[8 * ((uint64_t)v4 >> 6)];
  bzero(v5, v4 >> 3);
  v151 = (int64x2_t *)((char *)v5 + (v4 >> 3));
  v6 = (void **)operator new[]();
  v153 = v6;
  v130 = v5;
  v7 = (unsigned int *)operator new();
  *((_QWORD *)v7 + 1) = 0x100000001;
  *(_QWORD *)v7 = &off_24EC57500;
  *((_QWORD *)v7 + 2) = v6;
  v154 = v7;
  v8 = *(_QWORD *)(v158[0] + 24);
  v9 = *(_QWORD *)(v158[0] + 32);
  v10 = v9 - v8;
  if (v9 == v8)
  {
    v131 = -1;
    goto LABEL_79;
  }
  bzero(v6, (v10 >> 4) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = 0;
  v12 = v10 >> 6;
  v131 = -1;
  v127 = v10 >> 6;
  while (2)
  {
    if (*((_DWORD *)v153 + v11))
      goto LABEL_6;
    v13 = v154;
    p_p = v153;
    v156 = (void **)v154;
    if (v154)
    {
      v14 = v154 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = v153;
    *((_DWORD *)v153 + v11) = 1;
    v5->i64[v11] = ++v131;
    v18 = v159;
    v17 = v160;
    v19 = (uint64_t *)(*(_QWORD *)(v158[0] + 24) + (v11 << 6));
    v21 = *v19;
    v20 = v19[1];
    if (*v19 != v20)
    {
      while ((((uint64_t (*)(uint64_t))v17)(*(_QWORD *)(v21 + 8) + 32) & 1) == 0)
      {
        v21 += 16;
        if (v21 == v20)
        {
          v21 = v20;
          break;
        }
      }
    }
    v129 = v13;
    v22 = (char *)operator new(0xB0uLL);
    *(_QWORD *)v22 = v11;
    v22[16] = 0;
    *((_QWORD *)v22 + 6) = v21;
    *((_QWORD *)v22 + 7) = v11;
    *((_QWORD *)v22 + 8) = v18;
    *((_QWORD *)v22 + 9) = v17;
    *((_QWORD *)v22 + 11) = v158;
    *((_QWORD *)v22 + 12) = v20;
    *((_QWORD *)v22 + 13) = v11;
    *((_QWORD *)v22 + 14) = v20;
    *((_QWORD *)v22 + 15) = v11;
    *((_QWORD *)v22 + 16) = v18;
    *((_QWORD *)v22 + 17) = v17;
    *((_QWORD *)v22 + 19) = v158;
    *((_QWORD *)v22 + 20) = v20;
    v23 = v22 + 176;
    v135 = v22 + 176;
    v128 = v11;
    *((_QWORD *)v22 + 21) = v11;
    v24 = v16;
    do
    {
      v25 = v23 - 176;
      v26 = (uint64_t *)*((_QWORD *)v23 - 16);
      v27 = *((_QWORD *)v23 - 15);
      v28 = (BOOL (*)(double *))*((_QWORD *)v23 - 13);
      v145 = *((_QWORD *)v23 - 14);
      v146 = *((_QWORD *)v23 - 22);
      v29 = (_QWORD *)*((_QWORD *)v23 - 11);
      v31 = (uint64_t *)*((_QWORD *)v23 - 10);
      v30 = *((_QWORD *)v23 - 9);
      v33 = (uint64_t *)*((_QWORD *)v23 - 8);
      v32 = *((_QWORD *)v23 - 7);
      v35 = *((_QWORD *)v23 - 6);
      v34 = (BOOL (*)(double *))*((_QWORD *)v23 - 5);
      v36 = (_QWORD *)*((_QWORD *)v23 - 3);
      v132 = *((_QWORD *)v23 - 4);
      v133 = *((_QWORD *)v23 - 12);
      v38 = (uint64_t *)*((_QWORD *)v23 - 2);
      v37 = *((_QWORD *)v23 - 1);
      if (*(v23 - 160))
        *(v23 - 160) = 0;
      if (v26 != v33)
      {
        v137 = v32;
        v138 = v36;
        v139 = v30;
        v140 = v35;
        v141 = v34;
        v142 = v38;
        v143 = v37;
        v144 = v29;
        while (1)
        {
          v39 = *v26;
          if (!*((_DWORD *)v24 + *v26))
            break;
          v26 += 2;
          if (v26 == v31)
          {
            v23 = v25;
            v26 = v31;
            v39 = v27;
          }
          else
          {
            v40 = v33;
            while ((((uint64_t (*)(uint64_t))v28)(v26[1] + 32) & 1) == 0)
            {
              v26 += 2;
              if (v26 == v31)
              {
                v23 = v25;
                v26 = v31;
                goto LABEL_40;
              }
            }
            v23 = v25;
LABEL_40:
            v39 = v27;
            v33 = v40;
          }
LABEL_23:
          v25 = v23;
          v27 = v39;
          if (v26 == v33)
            goto LABEL_17;
        }
        v134 = v24;
        v41 = v26[1];
        v42 = v26 + 2;
        v43 = v31;
        if (v42 != v31)
        {
          v44 = v33;
          v43 = v42;
          while ((((uint64_t (*)(uint64_t))v28)(v43[1] + 32) & 1) == 0)
          {
            v43 += 2;
            if (v43 == v31)
            {
              v43 = v31;
              break;
            }
          }
          v33 = v44;
        }
        v45 = v41 + 32;
        if (v25 < v135)
        {
          *(_QWORD *)v25 = v146;
          *((_QWORD *)v25 + 3) = v27;
          *((_QWORD *)v25 + 4) = v39;
          v25[16] = 1;
          *((_QWORD *)v25 + 5) = v45;
          *((_QWORD *)v25 + 6) = v43;
          *((_QWORD *)v25 + 7) = v27;
          *((_QWORD *)v25 + 8) = v145;
          v24 = v134;
          *((_QWORD *)v25 + 9) = v28;
          *((_QWORD *)v25 + 10) = v133;
          *((_QWORD *)v25 + 11) = v144;
          *((_QWORD *)v25 + 12) = v31;
          *((_QWORD *)v25 + 13) = v139;
          *((_QWORD *)v25 + 14) = v33;
          *((_QWORD *)v25 + 15) = v137;
          *((_QWORD *)v25 + 16) = v140;
          *((_QWORD *)v25 + 17) = v141;
          *((_QWORD *)v25 + 18) = v132;
          *((_QWORD *)v25 + 19) = v138;
          *((_QWORD *)v25 + 20) = v142;
          v23 = v25 + 176;
          *((_QWORD *)v25 + 21) = v143;
          v46 = v130;
LABEL_59:
          *((_DWORD *)v24 + v39) = 1;
          v46->i64[v39] = v131;
          v62 = v159;
          v28 = v160;
          v63 = *(_QWORD *)(v158[0] + 24) + (v39 << 6);
          v26 = *(uint64_t **)v63;
          v31 = *(uint64_t **)(v63 + 8);
          if (*(uint64_t **)v63 != v31)
          {
            while ((((uint64_t (*)(uint64_t))v28)(v26[1] + 32) & 1) == 0)
            {
              v26 += 2;
              if (v26 == v31)
              {
                v26 = v31;
                break;
              }
            }
          }
          v144 = v158;
          v145 = v62;
          v139 = v39;
          v140 = v62;
          v141 = v28;
          v142 = v31;
          v143 = v39;
          v137 = v39;
          v138 = v158;
          v33 = v31;
          v146 = v39;
          goto LABEL_23;
        }
        v47 = 0x2E8BA2E8BA2E8BA3 * ((v25 - v22) >> 4) + 1;
        if (v47 > 0x1745D1745D1745DLL)
          sub_22316E078();
        if (0x5D1745D1745D1746 * ((v135 - v22) >> 4) > v47)
          v47 = 0x5D1745D1745D1746 * ((v135 - v22) >> 4);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v135 - v22) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
          v47 = 0x1745D1745D1745DLL;
        if (v47 > 0x1745D1745D1745DLL)
          sub_223174E94();
        v48 = v33;
        v136 = v47;
        v49 = (char *)operator new(176 * v47);
        v50 = &v49[16 * ((v25 - v22) >> 4)];
        *(_QWORD *)v50 = v146;
        *((_QWORD *)v50 + 3) = v27;
        *((_QWORD *)v50 + 4) = v39;
        v50[16] = 1;
        *((_QWORD *)v50 + 5) = v45;
        *((_QWORD *)v50 + 6) = v43;
        *((_QWORD *)v50 + 7) = v27;
        *((_QWORD *)v50 + 8) = v145;
        *((_QWORD *)v50 + 9) = v28;
        *((_QWORD *)v50 + 10) = v133;
        *((_QWORD *)v50 + 11) = v144;
        *((_QWORD *)v50 + 12) = v31;
        *((_QWORD *)v50 + 13) = v139;
        *((_QWORD *)v50 + 14) = v48;
        *((_QWORD *)v50 + 15) = v137;
        *((_QWORD *)v50 + 16) = v140;
        *((_QWORD *)v50 + 17) = v141;
        *((_QWORD *)v50 + 18) = v132;
        *((_QWORD *)v50 + 19) = v138;
        *((_QWORD *)v50 + 20) = v142;
        *((_QWORD *)v50 + 21) = v143;
        if (v25 == v22)
        {
          v61 = &v49[16 * ((v25 - v22) >> 4)];
          v46 = v130;
          v24 = v134;
          v135 = &v49[176 * v136];
          v23 = v50 + 176;
          if (!v25)
            goto LABEL_58;
        }
        else
        {
          v51 = 0;
          v24 = v134;
          do
          {
            v58 = &v50[v51];
            v59 = &v25[v51];
            *((_QWORD *)v58 - 22) = *(_QWORD *)&v25[v51 - 176];
            *(v58 - 160) = 0;
            if (v25[v51 - 160])
            {
              v60 = *(_OWORD *)(v59 - 152);
              *((_QWORD *)v58 - 17) = *((_QWORD *)v59 - 17);
              *(_OWORD *)(v58 - 152) = v60;
              *(v58 - 160) = 1;
            }
            v52 = *((_OWORD *)v59 - 8);
            v53 = *((_OWORD *)v59 - 7);
            v54 = *((_OWORD *)v59 - 5);
            *((_OWORD *)v58 - 6) = *((_OWORD *)v59 - 6);
            *((_OWORD *)v58 - 5) = v54;
            *((_OWORD *)v58 - 8) = v52;
            *((_OWORD *)v58 - 7) = v53;
            v55 = *((_OWORD *)v59 - 4);
            v56 = *((_OWORD *)v59 - 3);
            v57 = *((_OWORD *)v59 - 1);
            *((_OWORD *)v58 - 2) = *((_OWORD *)v59 - 2);
            *((_OWORD *)v58 - 1) = v57;
            *((_OWORD *)v58 - 4) = v55;
            *((_OWORD *)v58 - 3) = v56;
            v51 -= 176;
          }
          while (&v25[v51] != v22);
          v61 = &v50[v51];
          v46 = v130;
          do
          {
            if (*(v25 - 160))
              *(v25 - 160) = 0;
            v25 -= 176;
          }
          while (v25 != v22);
          v25 = v22;
          v135 = &v49[176 * v136];
          v23 = v50 + 176;
          if (!v22)
            goto LABEL_58;
        }
        operator delete(v25);
        v24 = p_p;
LABEL_58:
        v22 = v61;
        goto LABEL_59;
      }
      v23 -= 176;
LABEL_17:
      *((_DWORD *)v24 + v146) = 4;
    }
    while (v22 != v23);
    if (v23)
      operator delete(v23);
    v5 = v130;
    v11 = v128;
    if (v129)
    {
      v64 = v129 + 2;
      v12 = v127;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 16))(v129);
        v67 = v129 + 3;
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
          (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 24))(v129);
      }
    }
    else
    {
      v12 = v127;
    }
LABEL_6:
    if (++v11 != v12)
      continue;
    break;
  }
  v7 = v154;
  if (v154)
  {
LABEL_79:
    v70 = v7 + 2;
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      v73 = v7 + 3;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
    }
  }
  p_p = 0;
  v156 = 0;
  v157 = 0;
  v76 = v131 + 1;
  if (v131 == -1)
  {
    __p = 0;
    v148 = 0;
    v149 = 0;
    goto LABEL_150;
  }
  if (v76 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v77 = (void **)operator new(24 * v76);
  v78 = 0;
  p_p = v77;
  v156 = v77;
  v157 = &v77[3 * v76];
  while (2)
  {
    v81 = (uint64_t *)v150;
    v80 = (uint64_t *)v151;
    if (v150 == v151)
    {
      v85 = 0;
      v86 = 0;
      v87 = 0;
      goto LABEL_129;
    }
    v82 = (char *)v151 - (char *)v150 - 8;
    if (v82 >= 0x18)
    {
      v88 = (v82 >> 3) + 1;
      v84 = (int64x2_t *)((char *)v150 + 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL));
      v89 = vdupq_n_s64(v78);
      v90 = v150 + 1;
      v91 = 0uLL;
      v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      v93 = 0uLL;
      do
      {
        v91 = vsubq_s64(v91, vceqq_s64(v90[-1], v89));
        v93 = vsubq_s64(v93, vceqq_s64(*v90, v89));
        v90 += 2;
        v92 -= 4;
      }
      while (v92);
      v83 = vaddvq_s64(vaddq_s64(v93, v91));
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_98;
    }
    else
    {
      v83 = 0;
      v84 = v150;
      do
      {
LABEL_98:
        v94 = v84->i64[0];
        v84 = (int64x2_t *)((char *)v84 + 8);
        if (v94 == v78)
          ++v83;
      }
      while (v84 != v151);
    }
    if (v83)
    {
      if (v83 >> 59)
        sub_22316E078();
      v85 = (char *)operator new(32 * v83, (std::align_val_t)0x20uLL);
      v87 = &v85[32 * v83];
    }
    else
    {
      v85 = 0;
      v87 = 0;
    }
    v95 = 0;
    v86 = v85;
    v96 = v85;
    while (2)
    {
      if (*v81 == v78)
      {
        v97 = (_OWORD *)(*(_QWORD *)(v158[0] + 24) + (v95 << 6) + 32);
        if (v86 < v87)
        {
          *((_OWORD *)v86 + 1) = *(_OWORD *)(*(_QWORD *)(v158[0] + 24) + (v95 << 6) + 48);
          *(_OWORD *)v86 = *v97;
          v86 += 32;
        }
        else
        {
          v98 = (v86 - v96) >> 5;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 59)
            sub_22316E078();
          if ((v87 - v96) >> 4 > v99)
            v99 = (v87 - v96) >> 4;
          if ((unint64_t)(v87 - v96) >= 0x7FFFFFFFFFFFFFE0)
            v100 = 0x7FFFFFFFFFFFFFFLL;
          else
            v100 = v99;
          if (v100)
          {
            if (v100 >> 59)
              sub_223174E94();
            v101 = (char *)operator new(32 * v100, (std::align_val_t)0x20uLL);
          }
          else
          {
            v101 = 0;
          }
          v102 = &v101[32 * v98];
          *((_OWORD *)v102 + 1) = v97[1];
          *(_OWORD *)v102 = *v97;
          if (v86 == v96)
          {
            v85 = &v101[32 * v98];
            v87 = &v101[32 * v100];
            v86 = v102 + 32;
            if (v96)
              goto LABEL_124;
          }
          else
          {
            v103 = &v101[32 * v98];
            do
            {
              v104 = *((_OWORD *)v86 - 2);
              v85 = v103 - 32;
              *((_QWORD *)v103 - 2) = *((_QWORD *)v86 - 2);
              *((_OWORD *)v103 - 2) = v104;
              v86 -= 32;
              v103 -= 32;
            }
            while (v86 != v96);
            v87 = &v101[32 * v100];
            v86 = v102 + 32;
            if (v96)
LABEL_124:
              MEMORY[0x227684CDC](v96, 32);
          }
          v96 = v85;
        }
      }
      ++v81;
      ++v95;
      if (v81 != v80)
        continue;
      break;
    }
    v77 = v156;
LABEL_129:
    if (v77 < v157)
    {
      *v77 = v85;
      v77[1] = v86;
      v77[2] = v87;
      v77 += 3;
      v156 = v77;
      v79 = v78++ == v131;
      if (!v79)
        continue;
    }
    else
    {
      v105 = p_p;
      v106 = 0xAAAAAAAAAAAAAAABLL * (v77 - p_p) + 1;
      if (v106 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * (v157 - p_p) > v106)
        v106 = 0x5555555555555556 * (v157 - p_p);
      if (0xAAAAAAAAAAAAAAABLL * (v157 - p_p) >= 0x555555555555555)
        v107 = 0xAAAAAAAAAAAAAAALL;
      else
        v107 = v106;
      if (v107 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v108 = (char *)operator new(24 * v107);
      v109 = (void **)&v108[8 * (v77 - p_p)];
      *v109 = v85;
      v109[1] = v86;
      v109[2] = v87;
      v110 = v109 + 3;
      if (v77 == v105)
      {
        p_p = v109;
        v156 = v109 + 3;
        v157 = (void **)&v108[24 * v107];
      }
      else
      {
        do
        {
          v111 = *(_OWORD *)(v77 - 3);
          v77 -= 3;
          *(_OWORD *)(v109 - 3) = v111;
          v109 -= 3;
          v109[2] = v77[2];
          *v77 = 0;
          v77[1] = 0;
          v77[2] = 0;
        }
        while (v77 != v105);
        v77 = p_p;
        v112 = v156;
        p_p = v109;
        v156 = v110;
        v157 = (void **)&v108[24 * v107];
        if (v112 != v77)
        {
          v113 = v112;
          do
          {
            v115 = *(v113 - 3);
            v113 -= 3;
            v114 = v115;
            if (v115)
            {
              *(v112 - 2) = v114;
              MEMORY[0x227684CDC]();
            }
            v112 = v113;
          }
          while (v113 != v77);
        }
      }
      if (v77)
        operator delete(v77);
      v77 = v110;
      v156 = v110;
      v79 = v78++ == v131;
      if (!v79)
        continue;
    }
    break;
  }
  v5 = v150;
  __p = p_p;
  v148 = v77;
  v149 = v157;
  if (v150)
LABEL_150:
    operator delete(v5);
LABEL_151:
  v116 = *(_QWORD *)(a1 + 16);
  if (v116)
  {
    v117 = *(_QWORD *)(a1 + 8);
    v118 = 24 * v116;
    do
    {
      p_p = &__p;
      v119 = *(unsigned int *)(v117 + 16);
      if ((_DWORD)v119 == -1)
        sub_22316DD70();
      v158[0] = &p_p;
      ((void (*)(_QWORD *, uint64_t))off_24EC58F70[v119])(v158, v117);
      v117 += 24;
      v118 -= 24;
    }
    while (v118);
  }
  v120 = (void **)__p;
  if (__p)
  {
    v121 = v148;
    v122 = __p;
    if (v148 != __p)
    {
      v123 = v148;
      do
      {
        v125 = *(v123 - 3);
        v123 -= 3;
        v124 = v125;
        if (v125)
        {
          *(v121 - 2) = v124;
          MEMORY[0x227684CDC]();
        }
        v121 = v123;
      }
      while (v123 != v120);
      v122 = __p;
    }
    v148 = v120;
    operator delete(v122);
  }
}

void sub_2237B1248(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_2237B13DC((void **)(v2 - 168));
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237B1264(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    MEMORY[0x227684CB8](v2, 0x1000C8052888210);
    __cxa_rethrow();
  }
  JUMPOUT(0x2237B1368);
}

void sub_2237B1294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  __cxa_end_catch();
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2237B12B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237B12C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2237B1368);
}

void sub_2237B12E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237B1370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  char *v13;
  char *v14;
  uint64_t v15;

  if (v13)
  {
    while (v14 != v13)
    {
      if (*(v14 - 160))
        *(v14 - 160) = 0;
      v14 -= 176;
    }
    operator delete(v13);
  }
  sub_2237B15C8(v15 - 168);
  sub_2237B15C8(v15 - 192);
  operator delete(a13);
  _Unwind_Resume(a1);
}

void **sub_2237B13DC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = *((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          MEMORY[0x227684CDC]();
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_2237B1454(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1];
    do
    {
      v4 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24EC58F60[v4])(&v7, v3);
      *(_DWORD *)(v3 + 16) = -1;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3])
  {
    v5 = (_QWORD *)a1[1];
    if (a1 + 4 != v5)
      operator delete(v5);
  }
  return a1;
}

uint64_t sub_2237B14F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1];
    do
    {
      v4 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24EC58F60[v4])(&v7, v3);
      *(_DWORD *)(v3 + 16) = -1;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3])
  {
    v5 = (_QWORD *)a1[1];
    if (a1 + 4 != v5)
      operator delete(v5);
  }
  return MEMORY[0x227684CE8](a1, 0x10A1C40DE82D69BLL);
}

BOOL sub_2237B15B0(double *a1)
{
  return *a1 >= 0.100000001;
}

uint64_t sub_2237B15C8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_2237B1648(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_2237B16A0(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, unint64_t))*a2)(*a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(**(_QWORD **)a1 + 8) - ***(_QWORD ***)a1) >> 3));
}

uint64_t sub_2237B16D0(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, unint64_t))*a2)(*a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(**(_QWORD **)a1 + 8) - ***(_QWORD ***)a1) >> 3));
}

uint64_t sub_2237B1700(uint64_t a1, uint64_t a2, std::string *a3, _QWORD **a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *data;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  std::string::size_type size;
  int v20;
  std::string *v21;
  uint64_t v22;
  _QWORD *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned __int8 v39;
  uint64_t v40;
  _QWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  std::string __p;
  std::string v46;
  std::__fs::filesystem::path __dst;

  *(_QWORD *)a1 = &off_24EC58F90;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 888);
  v8 = *(_OWORD *)(a2 + 904);
  v9 = *(_OWORD *)(a2 + 920);
  v10 = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  v11 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
  v12 = *(_OWORD *)&a3[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&a3->__r_.__value_.__r.__words[2];
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 96) = v11;
  data = a3 + 2;
  if (SHIBYTE(a3[2].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 144), a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&data->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)&a3[2].__r_.__value_.__l + 2);
    *(_OWORD *)(a1 + 144) = v14;
  }
  *(_QWORD *)(a1 + 168) = 0;
  v15 = (_QWORD *)operator new();
  v15[1] = 0;
  v15[2] = 0;
  *v15 = off_24EC58B70;
  *(_QWORD *)(a1 + 176) = v15;
  v16 = (_QWORD *)operator new();
  sub_2232D3688();
  v17 = (char *)operator new(0x20uLL);
  *(_QWORD *)v17 = &off_24EC59008;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  *v16 = v15;
  v16[4] = v17;
  *(_QWORD *)(a1 + 184) = v16;
  v18 = *a4;
  if (*a4)
  {
    *a4 = 0;
    goto LABEL_47;
  }
  if ((SHIBYTE(a3[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a3[2].__r_.__value_.__r.__words[2]);
    if (*(_BYTE *)(a2 + 72))
      goto LABEL_8;
LABEL_16:
    memset(&v46, 0, sizeof(v46));
    sub_2231816F0(&v46, (std::string *)"/memory-persistence", (std::string *)"");
    memset(&__p, 0, sizeof(__p));
    sub_2231816F0(&__p, data, (std::string *)((char *)data + size));
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    else
      __dst.__pn_ = v46;
    sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    sub_223701118((uint64_t *)&__p);
    sub_2242B6EF4(__p.__r_.__value_.__l.__data_, (uint64_t)&__dst);
    v18 = (_QWORD *)operator new();
    v25 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    v46.__r_.__value_.__r.__words[0] = v25;
    sub_2236E30B4((uint64_t)v18, &__dst, (uint64_t *)&v46);
    v26 = v46.__r_.__value_.__r.__words[0];
    v46.__r_.__value_.__r.__words[0] = 0;
    if (v26)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v26 + 8))(v26);
    *v18 = off_24EC58760;
    v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27)
    {
      v28 = *(std::__shared_weak_count **)(v27 + 64);
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (*(char *)(v27 + 55) < 0)
        operator delete(*(void **)(v27 + 32));
      sub_2242BAF30(v27 + 8, *(_QWORD *)(v27 + 16));
      MEMORY[0x227684CE8](v27, 0x10B3C4067016974);
    }
    goto LABEL_45;
  }
  data = (std::string *)a3[2].__r_.__value_.__l.__data_;
  size = a3[2].__r_.__value_.__l.__size_;
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_16;
LABEL_8:
  memset(&v46, 0, sizeof(v46));
  v20 = *(char *)(a2 + 71);
  if (v20 >= 0)
    v21 = (std::string *)(a2 + 48);
  else
    v21 = *(std::string **)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 71);
  sub_2231816F0(&v46, v21, (std::string *)((char *)v21 + v22));
  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, data, (std::string *)((char *)data + size));
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __dst.__pn_ = v46;
  sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
LABEL_21:
  v23 = (_QWORD *)operator new();
  *v23 = &off_24EC71718;
  v23[1] = 0;
  sub_2242AEF94((int)v23, &__dst);
  if (*(_BYTE *)(a2 + 45))
  {
    v18 = (_QWORD *)operator new();
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    sub_2236E30B4((uint64_t)v18, &__dst, (uint64_t *)&v46);
    v24 = v46.__r_.__value_.__r.__words[0];
    v46.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
    *v18 = off_24EC58760;
  }
  else
  {
    v18 = (_QWORD *)operator new();
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    sub_22374DAB8((uint64_t)v18, &__dst, (uint64_t *)&v46, 256, 5000, 1);
    if (v46.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v46.__r_.__value_.__l.__data_ + 8))(v46.__r_.__value_.__r.__words[0]);
  }
LABEL_45:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
LABEL_47:
  *(_QWORD *)(a1 + 192) = v18;
  v31 = (_QWORD *)operator new();
  *v31 = &off_24EC57CB0;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = v18;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v31;
  *(_QWORD *)(a1 + 216) = 0;
  v32 = *(_OWORD *)(a2 + 144);
  v33 = *(_OWORD *)(a2 + 160);
  v34 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 272) = v34;
  *(_OWORD *)(a1 + 224) = v32;
  *(_OWORD *)(a1 + 240) = v33;
  v36 = *(_OWORD *)(a2 + 240);
  v35 = *(_OWORD *)(a2 + 256);
  v37 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 304) = v37;
  *(_OWORD *)(a1 + 320) = v36;
  *(_OWORD *)(a1 + 336) = v35;
  if (!*(_BYTE *)(a2 + 968)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneDetector2.cpp", 118, (uint64_t)"config.plane_detection", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_BYTE *)(a2 + 880))
  {
    v38 = *(_OWORD *)(a2 + 720);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 736);
    *(_OWORD *)(a1 + 40) = v38;
  }
  v39 = atomic_load((unsigned __int8 *)&qword_255795030);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
  {
    sub_22379785C(&qword_255795020);
    __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
    __cxa_guard_release(&qword_255795030);
  }
  v40 = qword_255795020;
  v41 = (_QWORD *)(qword_255795020 + 80);
  sub_223198030(qword_255795020 + 72, *(_QWORD **)(qword_255795020 + 80));
  *(_QWORD *)(v40 + 72) = v41;
  *(_QWORD *)(v40 + 88) = 0;
  *v41 = 0;
  if (*(_BYTE *)(v40 + 160))
    *(_BYTE *)(v40 + 160) = 0;
  v42 = (_OWORD *)operator new();
  v42[1] = 0u;
  v42[2] = 0u;
  *v42 = 0u;
  v43 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v42;
  if (v43)
    MEMORY[0x227684CE8](v43, 0x1000C40E28D2BCALL);
  sub_2237B2090(a1);
  return a1;
}

void sub_2237B1D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void ***v28;
  void ***v29;
  uint64_t v30;
  uint64_t v32;
  void **v33;
  uint64_t v34;

  __cxa_guard_abort(&qword_255795030);
  v32 = *(_QWORD *)(v26 + 216);
  *(_QWORD *)(v26 + 216) = 0;
  if (v32)
    MEMORY[0x227684CE8](v32, 0x1000C40E28D2BCALL);
  v33 = *v29;
  *v29 = 0;
  if (v33)
    sub_2237B4D48(v33);
  sub_223167354(v30);
  sub_2237B387C((uint64_t *)(v26 + 184));
  v34 = *(_QWORD *)(v26 + 176);
  *(_QWORD *)(v26 + 176) = 0;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
    sub_2237B38F0(v28);
    if (*(char *)(v26 + 167) < 0)
    {
LABEL_7:
      operator delete(*v27);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_2237B38F0(v28);
    if (*(char *)(v26 + 167) < 0)
      goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2237B1F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v7;
  _OWORD v8[3];
  __int128 __p;
  uint64_t v10;

  v5 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a3 + 32);
  if (*(char *)(a3 + 71) < 0)
  {
    sub_223197FA4(&__p, *(void **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    __p = *(_OWORD *)(a3 + 48);
    v10 = *(_QWORD *)(a3 + 64);
  }
  v7 = 0;
  sub_2237B1700(a1, a2, (std::string *)v8, &v7);
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_2237B2050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237B2090(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::__shared_weak_count *v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  char *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  void **v165;
  unsigned int *v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  _QWORD *v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  char *v228;
  std::__shared_weak_count *v229;
  char *v230;
  std::__shared_weak_count *v231;
  char *v232;
  std::__shared_weak_count *v233;
  char *v234;
  std::__shared_weak_count *v235;
  char *v236;
  std::__shared_weak_count *v237;
  _QWORD *v238;
  std::__shared_weak_count *v239;
  char *v240;
  std::__shared_weak_count *v241;
  char *v242;
  std::__shared_weak_count *v243;
  _QWORD *v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  __int128 v247;
  int v248;

  v2 = operator new();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v247 = *(_QWORD *)(a1 + 192);
  *((_QWORD *)&v247 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2237C3590(v2, &v247);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  if (*((_QWORD *)&v247 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(void ***)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v3;
  if (v10)
  {
    sub_2237B4D48(v10);
    v3 = *(_QWORD *)(a1 + 208);
  }
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59140;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59BF0;
  v244 = &v11[1].__vftable;
  v245 = v11;
  v242 = 0;
  v243 = 0;
  *(_QWORD *)&v247 = v11 + 1;
  *((_QWORD *)&v247 + 1) = v11;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = 1;
  v248 = 1;
  v16 = *(_QWORD *)(v3 + 8);
  v17 = *(_QWORD *)v3 + 24 * v16;
  if (v16 != *(_QWORD *)(v3 + 16))
  {
    *(_QWORD *)v17 = v11 + 1;
    *(_QWORD *)(v17 + 8) = v11;
    v247 = 0uLL;
    *(_DWORD *)(v17 + 16) = 1;
    *(_QWORD *)(v3 + 8) = v16 + 1;
LABEL_15:
    ((void (*)(char **, __int128 *))off_24EC59088[v15])(&v240, &v247);
    goto LABEL_16;
  }
  sub_2237B5510(&v240, (void **)v3, (char *)v17, (uint64_t)&v247);
  v15 = v248;
  if (v248 != -1)
    goto LABEL_15;
  do
LABEL_16:
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v19 = v243;
  if (v243)
  {
    v20 = (unint64_t *)&v243->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = operator new(0xB0uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_24EC591A0;
  v22[4] = &unk_24EC59750;
  v22[5] = &unk_24EC59798;
  v23 = *(_OWORD *)(a1 + 240);
  *((_OWORD *)v22 + 3) = *(_OWORD *)(a1 + 224);
  *((_OWORD *)v22 + 4) = v23;
  v24 = *(_OWORD *)(a1 + 272);
  *((_OWORD *)v22 + 5) = *(_OWORD *)(a1 + 256);
  *((_OWORD *)v22 + 6) = v24;
  v25 = *(_OWORD *)(a1 + 288);
  v26 = *(_OWORD *)(a1 + 304);
  v27 = *(_OWORD *)(a1 + 336);
  *((_OWORD *)v22 + 9) = *(_OWORD *)(a1 + 320);
  *((_OWORD *)v22 + 10) = v27;
  *((_OWORD *)v22 + 7) = v25;
  *((_OWORD *)v22 + 8) = v26;
  v243 = (std::__shared_weak_count *)v22;
  v22[3] = off_24EC596D0;
  v242 = (char *)(v22 + 3);
  v28 = *(_QWORD *)(a1 + 184);
  v29 = (char *)operator new(0x130uLL);
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = &off_24EC591F0;
  *((_QWORD *)v29 + 4) = v29 + 56;
  *(_OWORD *)(v29 + 40) = xmmword_22464B030;
  *((_QWORD *)v29 + 3) = &off_24EC58BF0;
  *((_QWORD *)v29 + 31) = v28;
  *((_OWORD *)v29 + 16) = 0u;
  *((_OWORD *)v29 + 17) = 0u;
  *((_OWORD *)v29 + 18) = 0u;
  v240 = v29 + 24;
  v241 = (std::__shared_weak_count *)v29;
  v30 = (std::__shared_weak_count *)operator new(0x20uLL);
  v31 = v30;
  v30->__shared_owners_ = 0;
  v32 = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59240;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC58D38;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  *((_QWORD *)v29 + 7) = v30 + 1;
  *((_QWORD *)v29 + 8) = v30;
  *((_DWORD *)v29 + 18) = 1;
  *((_QWORD *)v29 + 5) = 1;
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 - 1, v32));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  v35 = v240;
  v36 = (std::__shared_weak_count *)operator new(0x20uLL);
  v37 = v36;
  v36->__shared_owners_ = 0;
  v38 = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC592B0;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC58DB0;
  v238 = &v36[1].__vftable;
  v239 = v36;
  v236 = 0;
  v237 = 0;
  *(_QWORD *)&v247 = v36 + 1;
  *((_QWORD *)&v247 + 1) = v36;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = 1;
  v248 = 1;
  v41 = *((_QWORD *)v35 + 2);
  v42 = *((_QWORD *)v35 + 1) + 24 * v41;
  if (v41 != *((_QWORD *)v35 + 3))
  {
    *(_QWORD *)v42 = v36 + 1;
    *(_QWORD *)(v42 + 8) = v36;
    v247 = 0uLL;
    *(_DWORD *)(v42 + 16) = 1;
    *((_QWORD *)v35 + 2) = v41 + 1;
LABEL_34:
    ((void (*)(char **, __int128 *))off_24EC59280[v40])(&v230, &v247);
    goto LABEL_35;
  }
  sub_2237B58D4(&v230, (void **)v35 + 1, (char *)v42, (uint64_t)&v247);
  v40 = v248;
  if (v248 != -1)
    goto LABEL_34;
  do
LABEL_35:
    v43 = __ldaxr(v38);
  while (__stlxr(v43 - 1, v38));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  v44 = v237;
  if (v237)
  {
    v45 = (unint64_t *)&v237->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v240;
  v48 = v243;
  if (v242)
    v49 = v242 + 16;
  else
    v49 = 0;
  v234 = v49;
  v235 = v243;
  if (v243)
  {
    v50 = (unint64_t *)&v243->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    *((_QWORD *)&v247 + 1) = v48;
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
  }
  else
  {
    *((_QWORD *)&v247 + 1) = 0;
  }
  *(_QWORD *)&v247 = v49;
  v53 = 1;
  v248 = 1;
  v54 = *((_QWORD *)v47 + 2);
  v55 = *((_QWORD *)v47 + 1) + 24 * v54;
  if (v54 == *((_QWORD *)v47 + 3))
  {
    sub_2237B58D4(&v236, (void **)v47 + 1, (char *)v55, (uint64_t)&v247);
    v53 = v248;
    if (v248 == -1)
      goto LABEL_56;
  }
  else
  {
    *(_QWORD *)v55 = v49;
    *(_QWORD *)(v55 + 8) = v48;
    v247 = 0uLL;
    *(_DWORD *)(v55 + 16) = 1;
    *((_QWORD *)v47 + 2) = v54 + 1;
  }
  ((void (*)(char **, __int128 *))off_24EC59280[v53])(&v236, &v247);
LABEL_56:
  if (v48)
  {
    v56 = (unint64_t *)&v48->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v58 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 2) = 0;
  *(_QWORD *)v58 = &off_24EC59300;
  *(_OWORD *)(v58 + 72) = 0u;
  *(_OWORD *)(v58 + 88) = 0u;
  *(_OWORD *)(v58 + 104) = 0u;
  *(_OWORD *)(v58 + 120) = 0u;
  *(_OWORD *)(v58 + 136) = 0u;
  *(_OWORD *)(v58 + 152) = 0u;
  *(_OWORD *)(v58 + 168) = 0u;
  *(_OWORD *)(v58 + 184) = 0u;
  *(_OWORD *)(v58 + 200) = 0u;
  *(_OWORD *)(v58 + 216) = 0u;
  *(_OWORD *)(v58 + 232) = 0u;
  *(_OWORD *)(v58 + 56) = 0u;
  *((_QWORD *)v58 + 4) = v58 + 56;
  *(_OWORD *)(v58 + 40) = xmmword_22464B030;
  *((_QWORD *)v58 + 3) = off_24EC58F00;
  v236 = v58 + 24;
  v237 = (std::__shared_weak_count *)v58;
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v60 = v59;
  v59->__shared_owners_ = 0;
  v61 = (unint64_t *)&v59->__shared_owners_;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59350;
  v59[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59C50;
  do
    v62 = __ldxr(v61);
  while (__stxr(v62 + 1, v61));
  *((_QWORD *)v58 + 7) = v59 + 1;
  *((_QWORD *)v58 + 8) = v59;
  *((_DWORD *)v58 + 18) = 1;
  *((_QWORD *)v58 + 5) = 1;
  do
    v63 = __ldaxr(v61);
  while (__stlxr(v63 - 1, v61));
  if (v63)
  {
    v64 = v236;
    v65 = v240;
    v66 = v241;
    v232 = v240;
    v233 = v241;
    if (v241)
      goto LABEL_67;
LABEL_73:
    *((_QWORD *)&v247 + 1) = 0;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v60);
  v64 = v236;
  v65 = v240;
  v66 = v241;
  v232 = v240;
  v233 = v241;
  if (!v241)
    goto LABEL_73;
LABEL_67:
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldxr(v67);
  while (__stxr(v68 + 1, v67));
  *((_QWORD *)&v247 + 1) = v66;
  do
    v69 = __ldxr(v67);
  while (__stxr(v69 + 1, v67));
LABEL_74:
  *(_QWORD *)&v247 = v65;
  v70 = 1;
  v248 = 1;
  v71 = *((_QWORD *)v64 + 2);
  v72 = *((_QWORD *)v64 + 1) + 24 * v71;
  if (v71 == *((_QWORD *)v64 + 3))
  {
    sub_2237B5C98(&v230, (void **)v64 + 1, (char *)v72, (uint64_t)&v247);
    v70 = v248;
    if (v248 == -1)
      goto LABEL_77;
  }
  else
  {
    *(_QWORD *)v72 = v65;
    *(_QWORD *)(v72 + 8) = v66;
    v247 = 0uLL;
    *(_DWORD *)(v72 + 16) = 1;
    *((_QWORD *)v64 + 2) = v71 + 1;
  }
  ((void (*)(char **, __int128 *))off_24EC59390[v70])(&v230, &v247);
LABEL_77:
  if (v66)
  {
    v73 = (unint64_t *)&v66->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v75 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v75 + 1) = 0;
  *((_QWORD *)v75 + 2) = 0;
  *(_QWORD *)v75 = &off_24EC593C0;
  *(_OWORD *)(v75 + 72) = 0u;
  *(_OWORD *)(v75 + 88) = 0u;
  *(_OWORD *)(v75 + 104) = 0u;
  *(_OWORD *)(v75 + 120) = 0u;
  *(_OWORD *)(v75 + 136) = 0u;
  *(_OWORD *)(v75 + 152) = 0u;
  *(_OWORD *)(v75 + 168) = 0u;
  *(_OWORD *)(v75 + 184) = 0u;
  *(_OWORD *)(v75 + 200) = 0u;
  *(_OWORD *)(v75 + 216) = 0u;
  *(_OWORD *)(v75 + 232) = 0u;
  *(_OWORD *)(v75 + 56) = 0u;
  *((_QWORD *)v75 + 4) = v75 + 56;
  *(_OWORD *)(v75 + 40) = xmmword_22464B030;
  *((_QWORD *)v75 + 3) = off_24EC59840;
  v230 = v75 + 24;
  v231 = (std::__shared_weak_count *)v75;
  v76 = (std::__shared_weak_count *)operator new(0x20uLL);
  v77 = v76;
  v76->__shared_owners_ = 0;
  v78 = (unint64_t *)&v76->__shared_owners_;
  v76->__shared_weak_owners_ = 0;
  v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59410;
  v76[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC598F0;
  do
    v79 = __ldxr(v78);
  while (__stxr(v79 + 1, v78));
  *((_QWORD *)v75 + 7) = v76 + 1;
  *((_QWORD *)v75 + 8) = v76;
  *((_DWORD *)v75 + 18) = 1;
  *((_QWORD *)v75 + 5) = 1;
  do
    v80 = __ldaxr(v78);
  while (__stlxr(v80 - 1, v78));
  if (v80)
  {
    v81 = v230;
    v82 = v236;
    v83 = v237;
    v228 = v236;
    v229 = v237;
    if (v237)
      goto LABEL_88;
LABEL_94:
    *((_QWORD *)&v247 + 1) = 0;
    goto LABEL_95;
  }
  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
  std::__shared_weak_count::__release_weak(v77);
  v81 = v230;
  v82 = v236;
  v83 = v237;
  v228 = v236;
  v229 = v237;
  if (!v237)
    goto LABEL_94;
LABEL_88:
  v84 = (unint64_t *)&v83->__shared_owners_;
  do
    v85 = __ldxr(v84);
  while (__stxr(v85 + 1, v84));
  *((_QWORD *)&v247 + 1) = v83;
  do
    v86 = __ldxr(v84);
  while (__stxr(v86 + 1, v84));
LABEL_95:
  *(_QWORD *)&v247 = v82;
  v87 = 1;
  v248 = 1;
  v88 = *((_QWORD *)v81 + 2);
  v89 = *((_QWORD *)v81 + 1) + 24 * v88;
  if (v88 == *((_QWORD *)v81 + 3))
  {
    sub_2237B6014(&v226, (void **)v81 + 1, (char *)v89, (uint64_t)&v247);
    v87 = v248;
    if (v248 == -1)
      goto LABEL_98;
  }
  else
  {
    *(_QWORD *)v89 = v82;
    *(_QWORD *)(v89 + 8) = v83;
    v247 = 0uLL;
    *(_DWORD *)(v89 + 16) = 1;
    *((_QWORD *)v81 + 2) = v88 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59450[v87])(&v226, &v247);
LABEL_98:
  if (v83)
  {
    v90 = (unint64_t *)&v83->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v92 = *(_QWORD *)(a1 + 208);
  v93 = *(_QWORD *)(a1 + 184);
  v94 = operator new(0x418uLL);
  *((_QWORD *)v94 + 1) = 0;
  *((_QWORD *)v94 + 2) = 0;
  *(_QWORD *)v94 = &off_24EC59480;
  v226 = sub_2237DDA0C((uint64_t)v94 + 24, (__int128 *)(a1 + 224), a1 + 16, v92, v93);
  v227 = (std::__shared_weak_count *)v94;
  v95 = (std::__shared_weak_count *)operator new(0x20uLL);
  v96 = v95;
  v95->__shared_owners_ = 0;
  v97 = (unint64_t *)&v95->__shared_owners_;
  v95->__shared_weak_owners_ = 0;
  v95->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC594D0;
  v95[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59A68;
  v224 = &v95[1].__vftable;
  v225 = v95;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v247 = v95 + 1;
  *((_QWORD *)&v247 + 1) = v95;
  do
    v98 = __ldxr(v97);
  while (__stxr(v98 + 1, v97));
  v99 = 1;
  v248 = 1;
  v100 = *((_QWORD *)v94 + 32);
  v101 = *((_QWORD *)v94 + 31) + 24 * v100;
  if (v100 != *((_QWORD *)v94 + 33))
  {
    *(_QWORD *)v101 = v95 + 1;
    *(_QWORD *)(v101 + 8) = v95;
    v247 = 0uLL;
    *(_DWORD *)(v101 + 16) = 1;
    *((_QWORD *)v94 + 32) = v100 + 1;
LABEL_107:
    ((void (*)(uint64_t *, __int128 *))off_24EC59510[v99])(&v246, &v247);
    goto LABEL_108;
  }
  sub_2237B63E8(&v246, (void **)v94 + 31, (char *)v101, (uint64_t)&v247);
  v99 = v248;
  if (v248 != -1)
    goto LABEL_107;
  do
LABEL_108:
    v102 = __ldaxr(v97);
  while (__stlxr(v102 - 1, v97));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  if (v223)
  {
    v103 = &v223->__shared_owners_;
    do
      v104 = __ldaxr((unint64_t *)v103);
    while (__stlxr(v104 - 1, (unint64_t *)v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v105 = v226;
  v106 = (std::__shared_weak_count *)operator new(0x38uLL);
  v107 = v106;
  v106->__shared_owners_ = 0;
  v108 = (unint64_t *)&v106->__shared_owners_;
  v106->__shared_weak_owners_ = 0;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59540;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59AF0;
  v106[1].__shared_weak_owners_ = 0;
  v106[2].__vftable = 0;
  v106[1].__shared_owners_ = 0;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v247 = v106 + 1;
  *((_QWORD *)&v247 + 1) = v106;
  do
    v109 = __ldxr(v108);
  while (__stxr(v109 + 1, v108));
  v110 = 1;
  v248 = 1;
  v111 = *(_QWORD *)(v105 + 16);
  v112 = *(_QWORD *)(v105 + 8) + 24 * v111;
  if (v111 != *(_QWORD *)(v105 + 24))
  {
    *(_QWORD *)v112 = v106 + 1;
    *(_QWORD *)(v112 + 8) = v106;
    v247 = 0uLL;
    *(_DWORD *)(v112 + 16) = 1;
    *(_QWORD *)(v105 + 16) = v111 + 1;
LABEL_120:
    ((void (*)(uint64_t *, __int128 *))off_24EC59580[v110])(&v246, &v247);
    goto LABEL_121;
  }
  sub_2237B67C8(&v246, (void **)(v105 + 8), (char *)v112, (uint64_t)&v247);
  v110 = v248;
  if (v248 != -1)
    goto LABEL_120;
  do
LABEL_121:
    v113 = __ldaxr(v108);
  while (__stlxr(v113 - 1, v108));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
  }
  if (v223)
  {
    v114 = &v223->__shared_owners_;
    do
      v115 = __ldaxr((unint64_t *)v114);
    while (__stlxr(v115 - 1, (unint64_t *)v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v116 = v226;
  v117 = v243;
  if (v242)
    v118 = v242 + 8;
  else
    v118 = 0;
  if (v243)
  {
    v119 = (unint64_t *)&v243->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
    *((_QWORD *)&v247 + 1) = v117;
    do
      v121 = __ldxr(v119);
    while (__stxr(v121 + 1, v119));
  }
  else
  {
    *((_QWORD *)&v247 + 1) = 0;
  }
  *(_QWORD *)&v247 = v118;
  v123 = *(_QWORD *)(v116 + 224);
  v122 = *(_QWORD *)(v116 + 232);
  v124 = 1;
  v248 = 1;
  v125 = v123 + 24 * v122;
  if (v122 == *(_QWORD *)(v116 + 240))
  {
    sub_2237B63E8(&v222, (void **)(v116 + 224), (char *)v125, (uint64_t)&v247);
    v124 = v248;
    if (v248 == -1)
      goto LABEL_142;
  }
  else
  {
    *(_QWORD *)v125 = v118;
    *(_QWORD *)(v125 + 8) = v117;
    v247 = 0uLL;
    *(_DWORD *)(v125 + 16) = 1;
    *(_QWORD *)(v116 + 232) = v122 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59510[v124])(&v222, &v247);
LABEL_142:
  if (v117)
  {
    v126 = (unint64_t *)&v117->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v128 = v226;
  v129 = (std::__shared_weak_count *)operator new(0x20uLL);
  v130 = v129;
  v129->__shared_owners_ = 0;
  v131 = (unint64_t *)&v129->__shared_owners_;
  v129->__shared_weak_owners_ = 0;
  v129->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC595B0;
  v129[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59940;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v247 = v129 + 1;
  *((_QWORD *)&v247 + 1) = v129;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
  v133 = 1;
  v248 = 1;
  v134 = *(_QWORD *)(v128 + 448);
  v135 = *(_QWORD *)(v128 + 440) + 24 * v134;
  if (v134 != *(_QWORD *)(v128 + 456))
  {
    *(_QWORD *)v135 = v129 + 1;
    *(_QWORD *)(v135 + 8) = v129;
    v247 = 0uLL;
    *(_DWORD *)(v135 + 16) = 1;
    *(_QWORD *)(v128 + 448) = v134 + 1;
LABEL_151:
    ((void (*)(uint64_t *, __int128 *))off_24EC595F0[v133])(&v246, &v247);
    goto LABEL_152;
  }
  sub_2237B6B50(&v246, (void **)(v128 + 440), (char *)v135, (uint64_t)&v247);
  v133 = v248;
  if (v248 != -1)
    goto LABEL_151;
  do
LABEL_152:
    v136 = __ldaxr(v131);
  while (__stlxr(v136 - 1, v131));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
  v137 = v223;
  if (v223)
  {
    v138 = &v223->__shared_owners_;
    do
      v139 = __ldaxr((unint64_t *)v138);
    while (__stlxr(v139 - 1, (unint64_t *)v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v226;
  v141 = (std::__shared_weak_count *)operator new(0x20uLL);
  v142 = v141;
  v141->__shared_owners_ = 0;
  v143 = (unint64_t *)&v141->__shared_owners_;
  v141->__shared_weak_owners_ = 0;
  v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59620;
  v141[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC59D20;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v247 = v141 + 1;
  *((_QWORD *)&v247 + 1) = v141;
  do
    v144 = __ldxr(v143);
  while (__stxr(v144 + 1, v143));
  v145 = 1;
  v248 = 1;
  v146 = *(_QWORD *)(v140 + 448);
  v147 = *(_QWORD *)(v140 + 440) + 24 * v146;
  if (v146 != *(_QWORD *)(v140 + 456))
  {
    *(_QWORD *)v147 = v141 + 1;
    *(_QWORD *)(v147 + 8) = v141;
    v247 = 0uLL;
    *(_DWORD *)(v147 + 16) = 1;
    *(_QWORD *)(v140 + 448) = v146 + 1;
LABEL_164:
    ((void (*)(uint64_t *, __int128 *))off_24EC595F0[v145])(&v246, &v247);
    goto LABEL_165;
  }
  sub_2237B6B50(&v246, (void **)(v140 + 440), (char *)v147, (uint64_t)&v247);
  v145 = v248;
  if (v248 != -1)
    goto LABEL_164;
  do
LABEL_165:
    v148 = __ldaxr(v143);
  while (__stlxr(v148 - 1, v143));
  if (v148)
  {
    v149 = v223;
    if (!v223)
      goto LABEL_173;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
    v149 = v223;
    if (!v223)
      goto LABEL_173;
  }
  v150 = (unint64_t *)&v149->__shared_owners_;
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
  if (v151)
  {
LABEL_173:
    v152 = v226;
    v153 = v230;
    v154 = v231;
    if (v231)
      goto LABEL_174;
LABEL_180:
    *((_QWORD *)&v247 + 1) = 0;
    goto LABEL_181;
  }
  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
  std::__shared_weak_count::__release_weak(v149);
  v152 = v226;
  v153 = v230;
  v154 = v231;
  if (!v231)
    goto LABEL_180;
LABEL_174:
  v155 = (unint64_t *)&v154->__shared_owners_;
  do
    v156 = __ldxr(v155);
  while (__stxr(v156 + 1, v155));
  *((_QWORD *)&v247 + 1) = v154;
  do
    v157 = __ldxr(v155);
  while (__stxr(v157 + 1, v155));
LABEL_181:
  *(_QWORD *)&v247 = v153;
  v159 = *(_QWORD *)(v152 + 224);
  v158 = *(_QWORD *)(v152 + 232);
  v160 = 1;
  v248 = 1;
  v161 = v159 + 24 * v158;
  if (v158 == *(_QWORD *)(v152 + 240))
  {
    sub_2237B63E8(&v222, (void **)(v152 + 224), (char *)v161, (uint64_t)&v247);
    v160 = v248;
    if (v248 == -1)
      goto LABEL_184;
  }
  else
  {
    *(_QWORD *)v161 = v153;
    *(_QWORD *)(v161 + 8) = v154;
    v247 = 0uLL;
    *(_DWORD *)(v161 + 16) = 1;
    *(_QWORD *)(v152 + 232) = v158 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59510[v160])(&v222, &v247);
LABEL_184:
  if (v154)
  {
    v162 = (unint64_t *)&v154->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v164 = operator new();
  *(_QWORD *)(v164 + 208) = 0;
  *(_OWORD *)(v164 + 176) = 0u;
  *(_OWORD *)(v164 + 192) = 0u;
  *(_OWORD *)(v164 + 144) = 0u;
  *(_OWORD *)(v164 + 160) = 0u;
  *(_OWORD *)(v164 + 112) = 0u;
  *(_OWORD *)(v164 + 128) = 0u;
  *(_OWORD *)(v164 + 80) = 0u;
  *(_OWORD *)(v164 + 96) = 0u;
  *(_OWORD *)(v164 + 48) = 0u;
  *(_OWORD *)(v164 + 64) = 0u;
  *(_OWORD *)(v164 + 16) = 0u;
  *(_OWORD *)(v164 + 32) = 0u;
  *(_QWORD *)v164 = v164 + 24;
  *(_OWORD *)(v164 + 8) = xmmword_22464B030;
  v165 = *(void ***)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v164;
  if (v165)
  {
    v166 = (unsigned int *)v165[1];
    if (v166)
    {
      v167 = (unsigned int *)*v165;
      do
      {
        v168 = v167[4];
        if ((_DWORD)v168 != -1)
          ((void (*)(__int128 *, unsigned int *))off_24EC59098[v168])(&v247, v167);
        v167[4] = -1;
        v167 += 6;
        v166 = (unsigned int *)((char *)v166 - 1);
      }
      while (v166);
    }
    if (v165[2] && v165 + 3 != *v165)
      operator delete(*v165);
    MEMORY[0x227684CE8](v165, 0x1020C409FAC40B2);
    v164 = *(_QWORD *)(a1 + 168);
    v169 = *(_QWORD *)(v164 + 8);
  }
  else
  {
    v169 = 0;
  }
  v170 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)&v247 = v170;
  v248 = 0;
  v171 = *(_QWORD *)v164 + 24 * v169;
  if (v169 == *(_QWORD *)(v164 + 16))
  {
    sub_2237B6E80(&v222, (void **)v164, (char *)v171, (uint64_t)&v247);
    v172 = v248;
    if (v248 == -1)
      goto LABEL_203;
  }
  else
  {
    v172 = 0;
    *(_QWORD *)v171 = v170;
    *(_DWORD *)(v171 + 16) = 0;
    *(_QWORD *)(v164 + 8) = v169 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59098[v172])(&v222, &v247);
LABEL_203:
  v173 = *(_QWORD *)(a1 + 168);
  v174 = (std::__shared_weak_count *)operator new(0x20uLL);
  v175 = v174;
  v174->__shared_owners_ = 0;
  v176 = (unint64_t *)&v174->__shared_owners_;
  v174->__shared_weak_owners_ = 0;
  v174->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59680;
  v174[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC58E80;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v247 = v174 + 1;
  *((_QWORD *)&v247 + 1) = v174;
  do
    v177 = __ldxr(v176);
  while (__stxr(v177 + 1, v176));
  v178 = 1;
  v248 = 1;
  v179 = *(_QWORD *)(v173 + 8);
  v180 = *(_QWORD *)v173 + 24 * v179;
  if (v179 != *(_QWORD *)(v173 + 16))
  {
    *(_QWORD *)v180 = v174 + 1;
    *(_QWORD *)(v180 + 8) = v174;
    v247 = 0uLL;
    *(_DWORD *)(v180 + 16) = 1;
    *(_QWORD *)(v173 + 8) = v179 + 1;
LABEL_207:
    ((void (*)(uint64_t *, __int128 *))off_24EC59098[v178])(&v246, &v247);
    goto LABEL_208;
  }
  sub_2237B6E80(&v246, (void **)v173, (char *)v180, (uint64_t)&v247);
  v178 = v248;
  if (v248 != -1)
    goto LABEL_207;
  do
LABEL_208:
    v181 = __ldaxr(v176);
  while (__stlxr(v181 - 1, v176));
  if (v181)
  {
    v182 = v223;
    if (!v223)
      goto LABEL_216;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
    v182 = v223;
    if (!v223)
      goto LABEL_216;
  }
  v183 = (unint64_t *)&v182->__shared_owners_;
  do
    v184 = __ldaxr(v183);
  while (__stlxr(v184 - 1, v183));
  if (v184)
  {
LABEL_216:
    v185 = *(_QWORD *)(a1 + 168);
    v186 = v226;
    v187 = v227;
    if (v227)
      goto LABEL_217;
LABEL_223:
    *((_QWORD *)&v247 + 1) = 0;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
  std::__shared_weak_count::__release_weak(v182);
  v185 = *(_QWORD *)(a1 + 168);
  v186 = v226;
  v187 = v227;
  if (!v227)
    goto LABEL_223;
LABEL_217:
  v188 = (unint64_t *)&v187->__shared_owners_;
  do
    v189 = __ldxr(v188);
  while (__stxr(v189 + 1, v188));
  *((_QWORD *)&v247 + 1) = v187;
  do
    v190 = __ldxr(v188);
  while (__stxr(v190 + 1, v188));
LABEL_224:
  *(_QWORD *)&v247 = v186;
  v191 = 1;
  v248 = 1;
  v192 = *(_QWORD *)(v185 + 8);
  v193 = *(_QWORD *)v185 + 24 * v192;
  if (v192 == *(_QWORD *)(v185 + 16))
  {
    sub_2237B6E80(&v222, (void **)v185, (char *)v193, (uint64_t)&v247);
    v191 = v248;
    if (v248 == -1)
      goto LABEL_227;
  }
  else
  {
    *(_QWORD *)v193 = v186;
    *(_QWORD *)(v193 + 8) = v187;
    v247 = 0uLL;
    *(_DWORD *)(v193 + 16) = 1;
    *(_QWORD *)(v185 + 8) = v192 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59098[v191])(&v222, &v247);
LABEL_227:
  if (!v187)
    goto LABEL_231;
  v194 = (unint64_t *)&v187->__shared_owners_;
  do
    v195 = __ldaxr(v194);
  while (__stlxr(v195 - 1, v194));
  if (v195)
  {
LABEL_231:
    v196 = *(_QWORD *)(a1 + 168);
    v197 = v242;
    v198 = v243;
    if (v243)
      goto LABEL_232;
LABEL_238:
    *((_QWORD *)&v247 + 1) = 0;
    goto LABEL_239;
  }
  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
  std::__shared_weak_count::__release_weak(v187);
  v196 = *(_QWORD *)(a1 + 168);
  v197 = v242;
  v198 = v243;
  if (!v243)
    goto LABEL_238;
LABEL_232:
  v199 = (unint64_t *)&v198->__shared_owners_;
  do
    v200 = __ldxr(v199);
  while (__stxr(v200 + 1, v199));
  *((_QWORD *)&v247 + 1) = v198;
  do
    v201 = __ldxr(v199);
  while (__stxr(v201 + 1, v199));
LABEL_239:
  *(_QWORD *)&v247 = v197;
  v202 = 1;
  v248 = 1;
  v203 = *(_QWORD *)(v196 + 8);
  v204 = *(_QWORD *)v196 + 24 * v203;
  if (v203 == *(_QWORD *)(v196 + 16))
  {
    sub_2237B6E80(&v222, (void **)v196, (char *)v204, (uint64_t)&v247);
    v202 = v248;
    if (v248 == -1)
      goto LABEL_242;
  }
  else
  {
    *(_QWORD *)v204 = v197;
    *(_QWORD *)(v204 + 8) = v198;
    v247 = 0uLL;
    *(_DWORD *)(v204 + 16) = 1;
    *(_QWORD *)(v196 + 8) = v203 + 1;
  }
  ((void (*)(uint64_t *, __int128 *))off_24EC59098[v202])(&v222, &v247);
LABEL_242:
  if (v198)
  {
    v205 = (unint64_t *)&v198->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v207 = v227;
  if (v227)
  {
    v208 = (unint64_t *)&v227->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v231;
  if (v231)
  {
    v211 = (unint64_t *)&v231->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v237;
  if (v237)
  {
    v214 = (unint64_t *)&v237->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = v241;
  if (v241)
  {
    v217 = (unint64_t *)&v241->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = v243;
  if (v243)
  {
    v220 = (unint64_t *)&v243->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
}

void sub_2237B3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_2237B4F90(v35 - 88);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a31);
  sub_223167354((uint64_t)&a35);
  sub_223167354(v35 - 176);
  sub_223167354(v35 - 144);
  sub_223167354(v35 - 128);
  _Unwind_Resume(a1);
}

void sub_2237B37E0()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x2237B37B8);
}

void sub_2237B37F4()
{
  JUMPOUT(0x2237B37B8);
}

void sub_2237B37FC()
{
  JUMPOUT(0x2237B37B8);
}

void sub_2237B3804()
{
  JUMPOUT(0x2237B37C0);
}

void sub_2237B380C()
{
  JUMPOUT(0x2237B37C0);
}

void sub_2237B3814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 144);
  sub_223167354(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_2237B3838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_2237B384C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223167354(v2 - 88);
  MEMORY[0x227684CE8](v1, 0x1020C40A049E775);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237B387C(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (v3 == (_QWORD *)(v2 + 8))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x227684CE8](v2, 0x1060C40C8AF3C64);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

void ***sub_2237B38F0(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unsigned int *)v2[1];
    if (v3)
    {
      v4 = (unsigned int *)*v2;
      do
      {
        v5 = v4[4];
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, unsigned int *))off_24EC59098[v5])(&v7, v4);
        v4[4] = -1;
        v4 += 6;
        v3 = (unsigned int *)((char *)v3 - 1);
      }
      while (v3);
    }
    if (v2[2] && v2 + 3 != *v2)
      operator delete(*v2);
    MEMORY[0x227684CE8](v2, 0x1020C409FAC40B2);
  }
  return a1;
}

uint64_t sub_2237B39B8(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  char v16;

  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C40E28D2BCALL);
  v3 = *(void ***)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v3)
    sub_2237B4D48(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v7)
  {
    v8 = *(_QWORD **)(v7 + 32);
    if (v8 == (_QWORD *)(v7 + 8))
    {
      v9 = 4;
      v8 = (_QWORD *)(v7 + 8);
    }
    else
    {
      if (!v8)
      {
LABEL_16:
        MEMORY[0x227684CE8](v7, 0x1060C40C8AF3C64);
        goto LABEL_17;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_16;
  }
LABEL_17:
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
  v11 = *(void ***)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v11)
  {
    v12 = (unsigned int *)v11[1];
    if (v12)
    {
      v13 = (unsigned int *)*v11;
      do
      {
        v14 = v13[4];
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, unsigned int *))off_24EC59098[v14])(&v16, v13);
        v13[4] = -1;
        v13 += 6;
        v12 = (unsigned int *)((char *)v12 - 1);
      }
      while (v12);
    }
    if (v11[2] && v11 + 3 != *v11)
      operator delete(*v11);
    MEMORY[0x227684CE8](v11, 0x1020C409FAC40B2);
  }
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  return a1;
}

void sub_2237B3B68(uint64_t a1)
{
  sub_2237B39B8(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B3B8C()
{
  return 1;
}

uint64_t sub_2237B3B94(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_2237B3BA0(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t *v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  void *object;
  void *v72[2];
  __int128 v73;
  void *__p[2];
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC580);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC580))
  {
    sub_22455F53C(v63);
    sub_223174DE4(&object, "cv3d.recon.kfplanes");
    sub_2232300E0(v63, (uint64_t)&object, &qword_2540CC578);
    if (SHIBYTE(v72[1]) < 0)
      operator delete(object);
    __cxa_guard_release(&qword_2540CC580);
  }
  v70 = qword_2540CC578;
  if (**(int **)(qword_2540CC578 + 56) <= 3)
  {
    v3 = *(unsigned __int8 *)(qword_2540CC578 + 72);
    v4 = sub_22322F254(qword_2540CC578, "OSLogSurrogateAppender", 1, 0);
    v5 = v4;
    if (v3 || v4 != 0)
    {
      v63[0] = &v70;
      v63[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v63[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v64 = 3;
      v65 = "unknown file";
      v66 = 143;
      v68 = 0;
      v69 = 0;
      v67 = "unknown function";
      v7 = *v63[0];
      if (*(char *)(*v63[0] + 39) < 0)
      {
        v9 = *(const char **)(v7 + 16);
        v8 = *(_QWORD *)(v7 + 24);
        v62 = *v63[0] + 16;
        v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v11 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        v8 = *(unsigned __int8 *)(*v63[0] + 39);
        v9 = (const char *)(*v63[0] + 16);
        v62 = (uint64_t)v9;
        v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v10 & 1) != 0)
          goto LABEL_11;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v73 && SHIBYTE(v72[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_11:
      if (byte_255788F57 >= 0)
        v12 = (const char *)&xmmword_255788F40;
      else
        v12 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v13 = byte_255788F57;
      else
        v13 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v12, v9);
      v14 = v72;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v13 >= 0x17)
      {
        v15 = v5;
        v16 = v9;
        v17 = v7;
        v18 = a1;
        v19 = v3;
        v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v20 = v13 | 7;
        v21 = v20 + 1;
        v14 = operator new(v20 + 1);
        v72[1] = (void *)v13;
        *(_QWORD *)&v73 = v21 | 0x8000000000000000;
        v72[0] = v14;
        v3 = v19;
        a1 = v18;
        v7 = v17;
        v9 = v16;
        v5 = v15;
      }
      else
      {
        BYTE7(v73) = v13;
        if (!v13)
        {
LABEL_25:
          *((_BYTE *)v14 + v13) = 0;
          BYTE8(v73) = 1;
          v22 = __p;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v24 = v8 | 7;
            v25 = v24 + 1;
            v22 = operator new(v24 + 1);
            __p[1] = (void *)v8;
            v75 = v25 | 0x8000000000000000;
            __p[0] = v22;
          }
          else
          {
            HIBYTE(v75) = v8;
            if (!v8)
            {
              LOBYTE(__p[0]) = 0;
              v76 = 1;
              v23 = object;
              if ((SHIBYTE(v75) & 0x80000000) == 0)
                goto LABEL_29;
              goto LABEL_35;
            }
          }
          memmove(v22, v9, v8);
          *((_BYTE *)v22 + v8) = 0;
          v76 = 1;
          v23 = object;
          if ((SHIBYTE(v75) & 0x80000000) == 0)
          {
LABEL_29:
            if (!BYTE8(v73))
              goto LABEL_38;
            goto LABEL_36;
          }
LABEL_35:
          operator delete(__p[0]);
          if (!BYTE8(v73))
          {
LABEL_38:
            if (object)
              os_release(object);
            if (v5 && *(_QWORD *)(v5 + 24))
            {
              v26 = _os_log_pack_size();
              v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
              v28 = (std::__shared_weak_count *)operator new();
              v29 = v28;
              v28->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v28->__shared_weak_owners_ = 0;
              v28[1].__vftable = v27;
              object = v27;
              v72[0] = v27;
              v72[1] = v28;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
              v73 = 0uLL;
              __p[0] = 0;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v29);
              }
              v33 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v34 = operator new();
              v35 = *(unsigned __int8 *)(v7 + 39);
              v36 = v62;
              if ((v35 & 0x80u) != 0)
              {
                v36 = *(_QWORD *)(v7 + 16);
                v35 = *(_QWORD *)(v7 + 24);
              }
              *(_QWORD *)v34 = v33;
              *(_OWORD *)(v34 + 8) = *(_OWORD *)v72;
              v72[0] = 0;
              v72[1] = 0;
              *(_OWORD *)(v34 + 24) = v73;
              v73 = 0uLL;
              *(_QWORD *)(v34 + 40) = v36;
              *(_QWORD *)(v34 + 48) = v35;
              *(_BYTE *)(v34 + 56) = 1;
              v77 = 0;
              v78 = v34;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v78);
              v37 = v78;
              v78 = 0;
              if (v37)
              {
                v38 = *(std::__shared_weak_count **)(v37 + 32);
                if (v38)
                {
                  v39 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                v41 = *(std::__shared_weak_count **)(v37 + 16);
                if (v41)
                {
                  v42 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
                v44 = v77;
                v77 = 0;
                if (v44)
                {
                  v45 = *(std::__shared_weak_count **)(v44 + 32);
                  if (v45)
                  {
                    v46 = (unint64_t *)&v45->__shared_owners_;
                    do
                      v47 = __ldaxr(v46);
                    while (__stlxr(v47 - 1, v46));
                    if (!v47)
                    {
                      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                      std::__shared_weak_count::__release_weak(v45);
                    }
                  }
                  v48 = *(std::__shared_weak_count **)(v44 + 16);
                  if (v48)
                  {
                    v49 = (unint64_t *)&v48->__shared_owners_;
                    do
                      v50 = __ldaxr(v49);
                    while (__stlxr(v50 - 1, v49));
                    if (!v50)
                    {
                      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                      std::__shared_weak_count::__release_weak(v48);
                    }
                  }
                  MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
                }
              }
              v51 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
              if (*((_QWORD *)&v73 + 1))
              {
                v52 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              v54 = (std::__shared_weak_count *)v72[1];
              if (v72[1])
              {
                v55 = (unint64_t *)((char *)v72[1] + 8);
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
            }
            else
            {
              os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v57 = (void *)_os_log_send_and_compose_impl();
              if (v57)
                free(v57);
            }
            if (v3)
            {
              sub_22322C138((uint64_t)v63, "Filesystem access granted");
              sub_223182C08((uint64_t)v63);
            }
            sub_223182C08((uint64_t)v63);
            v58 = v69;
            if (v69)
            {
              v59 = (unint64_t *)&v69->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192));
          }
LABEL_36:
          if (SBYTE7(v73) < 0)
            operator delete(v72[0]);
          goto LABEL_38;
        }
      }
      memmove(v14, v12, v13);
      goto LABEL_25;
    }
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192));
}

void sub_2237B430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237B434C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC580);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC580);
  _Unwind_Resume(a1);
}

void sub_2237B4390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B43C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B43F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B4420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_2237B4468(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_2237B4470(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = atomic_load((unsigned __int8 *)&qword_255795030);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
  {
    sub_22379785C(&qword_255795020);
    __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
    __cxa_guard_release(&qword_255795030);
  }
  v7 = qword_255795020;
  v8 = (_QWORD *)(qword_255795020 + 80);
  sub_223198030(qword_255795020 + 72, *(_QWORD **)(qword_255795020 + 80));
  *(_QWORD *)(v7 + 72) = v8;
  *(_QWORD *)(v7 + 88) = 0;
  *v8 = 0;
  if (*(_BYTE *)(v7 + 160))
    *(_BYTE *)(v7 + 160) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_DWORD *)(a3 + 112) = 1065353216;
  *(_BYTE *)(a3 + 368) = 0;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_QWORD *)a3 = *a2;
  sub_2237B2090(a1);
  *(_BYTE *)(a1 + 8) = 0;
}

void sub_2237B4588(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795030);
  _Unwind_Resume(a1);
}

void sub_2237B45A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

double *sub_2237B45B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double *v8;
  double *result;
  uint64_t v10;
  _OWORD v11[7];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[176];
  _BYTE v19[24];
  double *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = (double)*a2 / 1000000000.0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_24EC590B8;
  v8[1] = v6;
  *((_QWORD *)v8 + 2) = rep;
  v8[3] = 0.0;
  *((_BYTE *)v8 + 32) = 1;
  v20 = v8;
  sub_2237AAE4C(*(uint64_t **)(a1 + 168), (uint64_t)a2);
  if (*(_BYTE *)(a1 + 56))
    sub_2237C7490(*(uint64_t **)(a1 + 208), *(unsigned __int8 *)(a1 + 40), *a2, *(double *)(a1 + 48));
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  v18[168] = 0;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  memset(v18, 0, 25);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 56))(*(_QWORD *)(a1 + 192)))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 72))(*(_QWORD *)(a1 + 192), 32);
  sub_22327F72C(a3, (uint64_t)v11);
  *(_BYTE *)(a3 + 376) = 1;
  sub_22327F500((uint64_t)v11);
  if (!v20)
    sub_223198474();
  (*(void (**)(double *))(*(_QWORD *)v20 + 48))(v20);
  result = v20;
  if (v20 == (double *)v19)
  {
    v10 = 4;
    result = (double *)v19;
  }
  else
  {
    if (!v20)
      return result;
    v10 = 5;
  }
  return (double *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
}

void sub_2237B4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22327F500((uint64_t)&a9);
  sub_22318A1C8((_QWORD *)(v9 - 104));
  _Unwind_Resume(a1);
}

void sub_2237B4788(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

BOOL sub_2237B47A0(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 176);
  if (!*(_BYTE *)(v2 + 16))
    sub_22324A974();
  return sub_2237C7490(*(uint64_t **)(a1 + 208), a2, *(_QWORD *)(v2 + 8), *(double *)(a1 + 48));
}

void sub_2237B47CC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::exception_ptr v19;

  v5 = *(_QWORD *)(a1 + 176);
  if (!*(_BYTE *)(v5 + 16))
    sub_22324A974();
  if (sub_2237C7490(*(uint64_t **)(a1 + 208), a3, *(_QWORD *)(v5 + 8), *(double *)(a1 + 48)))
  {
    v8 = *(_QWORD *)(a1 + 208);
    memset(&__p, 0, sizeof(__p));
    v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (std::string *)a2;
    else
      v10 = *(std::string **)a2;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    sub_2231816F0(&__p, v10, (std::string *)((char *)v10 + v9));
    sub_2237C8BE4(v8, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = operator new();
    *(_QWORD *)(v11 + 24) = 850045863;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 80) = 0;
    *(_QWORD *)(v11 + 88) = 1018212795;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 124) = 0u;
    *(_QWORD *)v11 = &off_24EC557C0;
    v18 = v11;
    std::mutex::lock((std::mutex *)(v11 + 24));
    if ((*(_BYTE *)(v11 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v12 = *(_QWORD *)(v11 + 16), std::exception_ptr::~exception_ptr(&v19), v12))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v11 + 140) = 0;
    *(_DWORD *)(v11 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v11 + 88));
    std::mutex::unlock((std::mutex *)(v11 + 24));
    v13 = v18;
    if (!v18)
      sub_2233236D4(3u);
    *a4 = v18;
    std::mutex::lock((std::mutex *)(v13 + 24));
    v14 = *(_DWORD *)(v13 + 136);
    if ((v14 & 2) != 0)
      sub_2233236D4(1u);
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    *(_DWORD *)(v13 + 136) = v14 | 2;
    std::mutex::unlock((std::mutex *)(v13 + 24));
    sub_2234AB028(&v18);
  }
}

void sub_2237B49D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::mutex *v16;

  std::mutex::unlock(v16);
  sub_2234AB028(&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_2237B4A1C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC59008;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2237B4A90(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC59008;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2237B4B04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC59008;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2237B4B54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC59008;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2237B4B84(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2237B4BDC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

unint64_t sub_2237B4C44(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  sub_2232D69F0(&v3, &v2);
  return (v3 | ((unint64_t)v4 << 32) | ((unint64_t)BYTE1(v4) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v4) << 56) | ((unint64_t)(HIWORD(v4) & 0xF | 0x40) << 48);
}

uint64_t sub_2237B4CD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes2v211ItemFactory24MakeDefaultUUIDGeneratorEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes2v211ItemFactory24MakeDefaultUUIDGeneratorEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes2v211ItemFactory24MakeDefaultUUIDGeneratorEvEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes2v211ItemFactory24MakeDefaultUUIDGeneratorEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2237B4D3C()
{
  return &unk_24EC59078;
}

uint64_t sub_2237B4D48(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  char v9;

  sub_2237B4E4C((uint64_t)(a1 + 29), a1[30]);
  v2 = (std::__shared_weak_count *)a1[28];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (unsigned int *)a1[1];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (unsigned int *)a1[1];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unsigned int *)*a1;
  do
  {
    v7 = v6[4];
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, unsigned int *))off_24EC59088[v7])(&v9, v6);
    v6[4] = -1;
    v6 += 6;
    v5 = (unsigned int *)((char *)v5 - 1);
  }
  while (v5);
LABEL_11:
  if (a1[2] && a1 + 3 != *a1)
    operator delete(*a1);
  return MEMORY[0x227684CE8](a1, 0x1020C40A049E775);
}

uint64_t sub_2237B4E4C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v3 = result;
    sub_2237B4E4C(result, *a2);
    sub_2237B4E4C(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[58];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    v5 = a2[52];
    if (v5)
    {
      v6 = a2[53];
      v7 = (void *)a2[52];
      if (v6 != v5)
      {
        do
        {
          v6 -= 424;
          sub_2236EA79C(v6);
        }
        while (v6 != v5);
        v7 = (void *)a2[52];
      }
      a2[53] = v5;
      operator delete(v7);
    }
    JUMPOUT(0x227684CDCLL);
  }
  return result;
}

uint64_t sub_2237B4EDC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59088[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B4F38(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_2237B4F90(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59098[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B4FEC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2237B5048()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2237B505C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24EC590B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2237B50A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24EC590B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2237B50D4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  unint64_t v10;
  uint64_t *p_p;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __n128 *v17;
  void *v18;
  size_t v19;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20;
  float v21;
  void *__p;
  unint64_t v23;
  unsigned __int8 v24;

  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59118);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      sub_2241471F8();
      v8 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        kdebug_trace();
        if (*(_BYTE *)(a1 + 32))
          v9 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24);
        else
          v9 = *(_QWORD *)(a1 + 24);
        v21 = (float)v9 / 1000000.0;
        sub_223702A10(*(double *)(a1 + 8), (uint64_t)&qword_255788F20, v8, &v21, "ProcessKeyframeUpdates total runtime");
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  v10 = v24;
  if ((v24 & 0x80u) != 0)
    v10 = v23;
  if (v10 >= 0x11)
  {
    p_p = (uint64_t *)&__p;
    if ((v24 & 0x80u) != 0)
      p_p = (uint64_t *)__p;
    v12 = *p_p;
    v13 = p_p[1];
    v14 = *((unsigned __int8 *)p_p + 16);
    if (v12 == 0x6365722E64337663 && v13 == 0x73746174532E6E6FLL && v14 == 46)
    {
      v17 = sub_223187510();
      if ((v24 & 0x80u) == 0)
        v18 = &__p;
      else
        v18 = __p;
      if ((v24 & 0x80u) == 0)
        v19 = v24;
      else
        v19 = v23;
      if (*(_BYTE *)(a1 + 32))
        v20 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24);
      else
        v20 = *(_QWORD *)(a1 + 24);
      v21 = (float)v20 / 1000000.0;
      sub_2231897A8((uint64_t *)v17, v18, v19, &v21, (uint64_t)"ProcessKeyframeUpdates total runtime", 36);
    }
  }
  kdebug_trace();
  if ((char)v24 < 0)
    operator delete(__p);
}

void sub_2237B53D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kdebug_trace();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2237B5450(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes2v221KeyframePlaneDetector27Proces"
                     "sKeyframeEngineResultERKNS5_2kf20KeyframeEngineResultEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes2v221KeyframePlaneDetec"
                                "tor27ProcessKeyframeEngineResultERKNS5_2kf20KeyframeEngineResultEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes2v221KeyframePlaneDetector27ProcessKeyframeEngineResultERKNS5_2kf20KeyframeEngineResultEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes2v221KeyframePlaneDetector27ProcessKeyframeEngineResultERKNS5_2kf20KeyframeEngineResultEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2237B54BC()
{
  return &unk_24EC59120;
}

void sub_2237B54C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B54D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B5510(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59180[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59180[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59180[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59088[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B5780(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B578C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B579C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC591A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B57AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC591A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B57E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC591F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B57F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC591F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B5824(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void sub_2237B5834(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5844(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B587C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59280[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B58D4(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59290[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59290[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59290[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59280[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B5B44(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B5B50(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B5B60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC592B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5B70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC592B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B5BA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5BB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B5BE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void sub_2237B5BF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5C08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B5C40(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59390[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B5C98(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC593A0[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC593A0[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC593A0[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59390[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B5F08(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B5F14(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B5F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC593C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5F34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC593C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B5F64(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void sub_2237B5F74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B5F84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B5FBC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59450[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B6014(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59460[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59460[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59460[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59450[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B6288(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2237B62E0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B62EC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B62FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B630C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B633C(uint64_t a1)
{
  return sub_2237DDC8C(a1 + 24);
}

void sub_2237B6348(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC594D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B6358(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC594D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B6390(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59510[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B63E8(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59520[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59520[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59520[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59510[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B665C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2237B66B4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B66C0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B66D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B66E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B6710(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;

  v1 = *(uint64_t **)(a1 + 32);
  if (v1)
  {
    v3 = *(uint64_t **)(a1 + 40);
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = sub_22316F8F4(v3 - 48);
      while (v3 != v1);
      v4 = *(uint64_t **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v1;
    operator delete(v4);
  }
}

uint64_t sub_2237B6770(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC59580[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B67C8(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59590[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59590[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59590[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59580[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B6A3C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2237B6A94(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B6AA0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B6AB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC595B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B6AC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC595B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237B6AF8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC595F0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_2237B6B50(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59600[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59600[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59600[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC595F0[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B6DC4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2237B6E1C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B6E28(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B6E38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B6E48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B6E80(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *i;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned int *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v4 = (unsigned int *)a2[1];
  v5 = (unint64_t)a2[2];
  if (0x555555555555555 - v5 < (unint64_t)v4 - v5 + 1)
    goto LABEL_34;
  v6 = v5 >> 61;
  v7 = 8 * v5;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  if (v9 >= 0x555555555555555)
    v9 = 0x555555555555555;
  v10 = (unint64_t)v4 + 1 > v9 ? (unint64_t)v4 + 1 : v9;
  if (v10 > 0x555555555555555)
LABEL_34:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v28 = (char *)*a2;
  v29 = v10;
  v14 = (char *)operator new(24 * v10);
  v15 = v14;
  v16 = (unsigned int *)*a2;
  v31 = (unsigned int *)a2[1];
  v17 = v14;
  if (*a2 != a3)
  {
    v18 = (char *)*a2;
    v17 = v14;
    do
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = -1;
      v19 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59660[v19])(&v33, v17, v18);
        *((_DWORD *)v17 + 4) = v19;
      }
      v18 += 24;
      v17 += 24;
    }
    while (v18 != a3);
  }
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v20 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24EC59660[v20])(&v34, v17, a4);
    *((_DWORD *)v17 + 4) = v20;
  }
  v21 = (char *)&v16[6 * (_QWORD)v31];
  if (v21 != a3)
  {
    v22 = v17 + 24;
    v23 = a3;
    do
    {
      *v22 = 0;
      *((_DWORD *)v22 + 4) = -1;
      v24 = *((unsigned int *)v23 + 4);
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(char *, char *, char *))off_24EC59660[v24])(&v35, v22, v23);
        *((_DWORD *)v22 + 4) = v24;
      }
      v23 += 24;
      v22 += 24;
    }
    while (v23 != v21);
  }
  if (v16)
  {
    for (i = (unsigned int *)a2[1]; i; i = (unsigned int *)((char *)i - 1))
    {
      v26 = v16[4];
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59098[v26])(&v32, v16);
      v16[4] = -1;
      v16 += 6;
    }
    if (a2 + 3 != *a2)
      operator delete(*a2);
  }
  v27 = (uint64_t)a2[1] + 1;
  *a2 = v15;
  a2[1] = (void *)v27;
  a2[2] = (void *)v29;
  *a1 = &v15[a3 - v28];
}

void sub_2237B70F0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_2237B70FC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2237B710C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237B711C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC59680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237B7160()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237B7174()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237B718C()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237B71A4(float32x2_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  void **v20;
  void *v21;
  void *v22;
  int v23;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::mutex *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  float32x4_t v46;
  int has_internal_diagnostics;
  int8x16_t v48;
  float32x2_t v49;
  float v50;
  float32x4_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  std::mutex *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  _BYTE v88[7];
  void *__p[2];
  unsigned __int8 v90;
  _BYTE v91[40];
  void *v92[2];
  __int128 v93;
  __int16 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int16 v98;
  _BYTE v99[40];
  __int128 v100;
  __int128 v101;
  __int16 v102;
  __int128 v103;

  if (!a4)
    return;
  if (*(_BYTE *)(a3 + 440))
  {
    if (*(_DWORD *)(a3 + 416) && *(_DWORD *)(a3 + 420)
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      v6 = sub_223C3E368(a3 + 360, (uint64_t)v91);
      v7 = *(std::__shared_weak_count **)&v91[16];
      if (!*(_QWORD *)&v91[16])
        goto LABEL_10;
      v8 = (unint64_t *)(*(_QWORD *)&v91[16] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!*(_BYTE *)(a3 + 440))
          goto LABEL_16;
      }
      else
      {
LABEL_10:
        if (!*(_BYTE *)(a3 + 440))
        {
LABEL_16:
          *(_QWORD *)v99 = &off_24EC21DF8;
          *(__n128 *)&v99[8] = v6;
          *(_OWORD *)&v99[24] = v95;
          v100 = v96;
          v101 = v97;
          v102 = v98;
          sub_223CC580C((uint64_t)v99, (uint64_t)v91);
          sub_22328CE6C("cv3d.recon.", (const char *)off_24EC597D0);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v10 = sub_2241471F8();
            v11 = v10[2];
            if (!v11)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v11 = v10[2];
            }
            v12 = *(_QWORD *)(v11 + 64);
            v13 = (std::mutex *)(v12 + 32);
            std::mutex::lock((std::mutex *)(v12 + 32));
            v15 = *(_QWORD *)(v12 + 96);
            v14 = *(_QWORD *)(v12 + 104);
            std::mutex::unlock(v13);
            if (v15 != v14)
            {
              sub_2241471F8();
              v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
              {
                v95 = 0u;
                v96 = 0u;
                LODWORD(v97) = 728325608;
                kdebug_trace();
                v17 = *(_QWORD *)(a3 + 1232);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
                {
                  *(_QWORD *)&v103 = (uint64_t)((double)v17 / 1000000000.0 * 1000000000.0);
                  *((_QWORD *)&v103 + 1) = 2;
                  v18 = sub_2241471F8();
                  sub_22370472C((uint64_t)v18, v16, (uint64_t)v91, (uint64_t)&unk_2245C9EFE, &v103);
                }
                kdebug_trace();
              }
            }
          }
          v95 = 0u;
          v96 = 0u;
          LODWORD(v97) = 728325624;
          kdebug_trace();
          v19 = v90;
          if ((v90 & 0x80u) != 0)
            v19 = (unint64_t)__p[1];
          if (v19 >= 0x11)
          {
            v20 = __p;
            if ((v90 & 0x80u) != 0)
              v20 = (void **)__p[0];
            v21 = *v20;
            v22 = v20[1];
            v23 = *((unsigned __int8 *)v20 + 16);
            if (v21 == (void *)0x6365722E64337663 && v22 == (void *)0x73746174532E6E6FLL && v23 == 46)
              sub_223187510();
          }
          kdebug_trace();
          if ((char)v90 < 0)
            operator delete(__p[0]);
          v26 = *(std::__shared_weak_count **)&v91[16];
          if (*(_QWORD *)&v91[16])
          {
            v27 = (unint64_t *)(*(_QWORD *)&v91[16] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = *(std::__shared_weak_count **)&v99[16];
          if (*(_QWORD *)&v99[16])
          {
            v30 = (unint64_t *)(*(_QWORD *)&v99[16] + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          goto LABEL_51;
        }
      }
      if (*(_DWORD *)(a3 + 416) && *(_DWORD *)(a3 + 420)
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
      {
        sub_223C3E368(a3 + 360, (uint64_t)v91);
        v6 = *(__n128 *)&v91[8];
        v95 = *(_OWORD *)&v91[24];
        v96 = *(_OWORD *)v92;
        v97 = v93;
        v98 = v94;
        goto LABEL_16;
      }
    }
    abort();
  }
LABEL_51:
  sub_22328CE6C("cv3d.recon.", (const char *)off_24EC597D8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v32 = sub_2241471F8();
    v33 = v32[2];
    if (!v33)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v33 = v32[2];
    }
    v34 = *(_QWORD *)(v33 + 64);
    v35 = (std::mutex *)(v34 + 32);
    std::mutex::lock((std::mutex *)(v34 + 32));
    v37 = *(_QWORD *)(v34 + 96);
    v36 = *(_QWORD *)(v34 + 104);
    std::mutex::unlock(v35);
    if (v37 != v36)
    {
      sub_2241471F8();
      v38 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
      {
        memset(v91, 0, 32);
        *(_DWORD *)&v91[32] = 728325608;
        kdebug_trace();
        sub_223700708((double)*(uint64_t *)(a3 + 1232) / 1000000000.0, (uint64_t)&qword_255788F20, v38, a3 + 1240, "color_frame_cam");
        kdebug_trace();
      }
    }
  }
  memset(v91, 0, 32);
  *(_DWORD *)&v91[32] = 728325624;
  kdebug_trace();
  v39 = v99[23];
  if (v99[23] < 0)
    v39 = *(_QWORD *)&v99[8];
  if (v39 >= 0x11)
  {
    v40 = v99;
    if (v99[23] < 0)
      v40 = *(_BYTE **)v99;
    v41 = *(_QWORD *)v40;
    v42 = *((_QWORD *)v40 + 1);
    v43 = v40[16];
    if (v41 == 0x6365722E64337663 && v42 == 0x73746174532E6E6FLL && v43 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((v99[23] & 0x80000000) != 0)
    operator delete(*(void **)v99);
  v77 = a1[3];
  v80 = a1[4].f32[0];
  v76 = a1[5];
  v84 = a1[6].f32[0];
  *(float32x2_t *)v46.f32 = a1[7];
  v75 = *(float32x2_t *)v46.f32;
  v46.i32[0] = a1[8].i32[0];
  v86 = *(float32x2_t *)v46.f32;
  *(float32x2_t *)v46.f32 = a1[9];
  v46.i32[2] = a1[10].i32[0];
  v73 = v46;
  v79 = *(float32x4_t *)(a3 + 1336);
  v83 = *(float32x4_t *)(a3 + 1368);
  v81 = *(float32x4_t *)(a3 + 1352);
  v82 = *(float32x4_t *)(a3 + 1384);
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC597E0);
  sub_224569D7C();
  sub_224569A80();
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v48 = (int8x16_t)vnegq_f32(v73);
  v49 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v77, (int32x2_t)v76), *(float *)v48.i32), (float32x2_t)vzip2_s32((int32x2_t)v77, (int32x2_t)v76), *(float32x2_t *)v73.f32, 1), (float32x2_t)__PAIR64__(LODWORD(v84), LODWORD(v80)), v73, 2);
  LODWORD(v50) = vmla_f32(vmls_lane_f32(vmul_f32(v75, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v75, 1), *(float32x2_t *)v73.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), v86).u32[0];
  v74 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v79, v77.f32[0]), v81, v76.f32[0]), v83, v75.f32[0]), (float32x4_t)0, v82);
  v78 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v79, v77, 1), v81, v76, 1), v83, v75, 1), (float32x4_t)0, v82);
  v51 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v79, v80), v81, v84), v83, v86.f32[0]), (float32x4_t)0, v82);
  v85 = vaddq_f32(v82, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v79, v49.f32[0]), v81, v49, 1), v83, v50));
  v87 = v51;
  if (has_internal_diagnostics)
  {
    v52 = sub_2241471F8();
    v53 = v52[2];
    if (!v53)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v53 = v52[2];
    }
    v54 = *(_QWORD *)(v53 + 64);
    v55 = (std::mutex *)(v54 + 32);
    std::mutex::lock((std::mutex *)(v54 + 32));
    v57 = *(_QWORD *)(v54 + 96);
    v56 = *(_QWORD *)(v54 + 104);
    std::mutex::unlock(v55);
    if (v57 != v56)
    {
      sub_2241471F8();
      v58 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58))
      {
        memset(v99, 0, 32);
        *(_DWORD *)&v99[32] = 728325608;
        kdebug_trace();
        v59 = operator new();
        *(float32x4_t *)v59 = v74;
        *(float32x4_t *)(v59 + 16) = v78;
        *(float32x4_t *)(v59 + 32) = v87;
        *(float32x4_t *)(v59 + 48) = v85;
        *(_DWORD *)(v59 + 128) = 0;
        *(_BYTE *)(v59 + 136) = 4;
        v60 = operator new();
        *(_BYTE *)v60 = 0;
        *(_DWORD *)(v60 + 128) = -1;
        v61 = *(unsigned int *)(v59 + 128);
        if ((_DWORD)v61 != -1)
        {
          ((void (*)(void **, uint64_t, uint64_t))off_24EC6BD10[v61])(__p, v60, v59);
          *(_DWORD *)(v60 + 128) = v61;
        }
        *(_BYTE *)(v60 + 136) = *(_BYTE *)(v59 + 136);
        *(_QWORD *)v91 = v60;
        v91[8] = 0;
        v91[32] = 0;
        strcpy((char *)v92, "color_frame_cam");
        LODWORD(v93) = *(_DWORD *)v88;
        *(_DWORD *)((char *)&v93 + 3) = *(_DWORD *)&v88[3];
        *(_WORD *)((char *)&v93 + 7) = 271;
        sub_22370085C((double)*(uint64_t *)(a3 + 1232) / 1000000000.0, (uint64_t)&qword_255788F20, v58, (uint64_t)v91, "world_to_color_frame_cam");
        if (BYTE8(v93) && SBYTE7(v93) < 0)
          operator delete(v92[0]);
        if (v91[32] && (v91[31] & 0x80000000) != 0)
          operator delete(*(void **)&v91[8]);
        v62 = *(_QWORD *)v91;
        *(_QWORD *)v91 = 0;
        if (v62)
          MEMORY[0x227684CE8](v62, 0x1000C4072FAA15ELL);
        MEMORY[0x227684CE8](v59, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  memset(v91, 0, 32);
  *(_DWORD *)&v91[32] = 728325624;
  kdebug_trace();
  v63 = BYTE7(v96);
  if (SBYTE7(v96) < 0)
    v63 = *((_QWORD *)&v95 + 1);
  if (v63 >= 0x11)
  {
    v64 = &v95;
    if (SBYTE7(v96) < 0)
      v64 = (__int128 *)v95;
    v65 = *(_QWORD *)v64;
    v66 = *((_QWORD *)v64 + 1);
    v67 = *((unsigned __int8 *)v64 + 16);
    if (v65 == 0x6365722E64337663 && v66 == 0x73746174532E6E6FLL && v67 == 46)
    {
      sub_223187510();
      v70 = operator new();
      *(float32x4_t *)v70 = v74;
      *(float32x4_t *)(v70 + 16) = v78;
      *(float32x4_t *)(v70 + 32) = v87;
      *(float32x4_t *)(v70 + 48) = v85;
      *(_DWORD *)(v70 + 128) = 0;
      *(_BYTE *)(v70 + 136) = 4;
      v71 = operator new();
      *(_BYTE *)v71 = 0;
      *(_DWORD *)(v71 + 128) = -1;
      v72 = *(unsigned int *)(v70 + 128);
      if ((_DWORD)v72 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC6BD10[v72])(v99, v71, v70);
        *(_DWORD *)(v71 + 128) = v72;
      }
      *(_BYTE *)(v71 + 136) = *(_BYTE *)(v70 + 136);
      MEMORY[0x227684CE8](v71, 0x1000C4072FAA15ELL);
      MEMORY[0x227684CE8](v70, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SBYTE7(v96) < 0)
    operator delete((void *)v95);
}

void sub_2237B7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  MEMORY[0x227684CE8](v39, 0x1000C4072FAA15ELL);
  MEMORY[0x227684CE8](v38, 0x1000C4072FAA15ELL);
  sub_2231874DC(v40 - 192);
  if (*(char *)(v40 - 233) < 0)
    operator delete(*(void **)(v40 - 256));
  _Unwind_Resume(a1);
}

void sub_2237B7F08(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  char v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::string __p;
  void *v21[4];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v3 = sub_2241471F8();
    v4 = v3[2];
    if (!v4)
    {
      v5 = v3;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v5[2];
    }
    v6 = *(_QWORD *)(v4 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      v21[0] = "cv3d.recon.";
      v21[1] = (void *)11;
      v21[2] = "KeyframePlanes.GT";
      v21[3] = (void *)17;
      sub_2231A9820((uint64_t)v21, (uint64_t)&v22, 0, 0, &__p);
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v12 = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v12 != 1)
          return;
      }
      else if (v11 != 1)
      {
        return;
      }
      v13 = *(std::__shared_weak_count **)(a2 + 208);
      if (v13 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
      {
        v15 = v14;
        v16 = *(_QWORD *)(a2 + 200);
        v17 = v16 != 0;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
      v21[0] = *(void **)(a2 + 232);
      sub_223742C80((unsigned __int8 *)(a2 + 216), v21, 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3), *(_QWORD *)(a2 + 160), (float32x2_t *)(a2 + 96), a2, v16, v17);
    }
  }
}

void sub_2237B8140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237B8160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 1))
    sub_2237B7F08(a1, a2);
}

void sub_2237B8170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 1))
    sub_2237B7F08(a1, a2);
}

void sub_2237B8180(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD *v3;
  float32x4_t v4;
  float32x4_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned __int8 v18;
  uint64_t v19;
  int32x2_t v20;
  float32x2_t v21;
  _QWORD *v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float32x2_t v30;
  _DWORD v31[3];
  void *__p[3];
  float32x4_t v33[4];
  void *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  _BYTE __src[1020];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v36 = operator new(0x20uLL);
  v37 = xmmword_2245B8D50;
  strcpy((char *)v36, "KeyframePlanes.GlobalPlanes");
  sub_2245664AC(a2 + 56, __src);
  v3 = operator new(0x28uLL);
  v34 = v3;
  v35 = xmmword_2245C4640;
  v5 = *(float32x4_t *)__src;
  v4 = *(float32x4_t *)&__src[16];
  *v3 = *(_OWORD *)__src;
  v3[1] = v4;
  *((_DWORD *)v3 + 8) = *(_DWORD *)&__src[32];
  *((_BYTE *)v3 + 36) = 0;
  v5.f32[0] = fabsf(*((float *)a2 + 13));
  if (v5.f32[0] <= 0.052336)
    v6 = 2;
  else
    v6 = 4;
  v4.i32[0] = 1065330231;
  if (v5.f32[0] >= 0.99863)
    v7 = 1;
  else
    v7 = v6;
  sub_223F2B7AC((uint64_t)(a2 + 32), v7, v33, v5, v4);
  sub_2236ADE38((void ***)a2 + 1, (uint64_t)__p, 0.00097656);
  v9 = sub_22456636C(a2 + 56) % 0xFFuLL;
  v18 = atomic_load((unsigned __int8 *)&qword_255795018);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
  {
    bzero(__src, 0x3FCuLL);
    v19 = 0;
    v20 = (int32x2_t)0x100000000;
    v21 = (float32x2_t)vdup_n_s32(0x3E924745u);
    do
    {
      v22 = &__src[v19];
      v23 = vmul_f32(vcvt_f32_s32(v20), v21);
      v26 = v23.f32[0];
      v30 = vmul_f32(vcvt_f32_s32(vadd_s32(v20, (int32x2_t)0x200000002)), v21);
      v28 = fmodf(v23.f32[1], 1.0);
      *(float *)&v24 = fmodf(v26, 1.0);
      *((float *)&v24 + 1) = v28;
      v29 = v24;
      v27 = fmodf(v30.f32[1], 1.0);
      *(float *)&v25 = fmodf(v30.f32[0], 1.0);
      *((float *)&v25 + 1) = v27;
      *v22 = v29;
      v22[1] = v25;
      v20 = vadd_s32(v20, (int32x2_t)0x400000004);
      v19 += 16;
    }
    while (v19 != 1008);
    *(_QWORD *)&__src[1008] = 0x3E906F003F7F1400;
    *(_DWORD *)&__src[1016] = 1058102016;
    memcpy(dword_255794C18, __src, 0x3FCuLL);
    __cxa_guard_release(&qword_255795018);
  }
  LODWORD(v11) = dword_255794C18[(unsigned __int16)(2 * v9 + 85) % 0xFFu];
  LODWORD(v12) = dword_255794C18[(unsigned __int16)(3 * v9 + 170) % 0xFFu];
  v31[0] = dword_255794C18[v9];
  LODWORD(v10) = v31[0];
  v31[1] = LODWORD(v11);
  v31[2] = LODWORD(v12);
  sub_223739E78(1, (uint64_t)__p, (float32x2_t *)v33, (uint64_t)&v34, *a2, (uint64_t)v31, (const void **)&v36, v8, v10, v11, v12, v13, v14, v15, v16, v17, 0.0, 0);
  sub_22373A3E0((float32x2_t *)v33, (uint64_t)&v34, (const void **)&v36, 0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v36);
    return;
  }
  operator delete(v34);
  if (SHIBYTE(v37) < 0)
    goto LABEL_14;
}

void sub_2237B84EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  _Unwind_Resume(exception_object);
}

void sub_2237B856C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  void *v4;
  __int128 v5;
  _BYTE __p[32];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)(a2 + 56), __p);
  v2 = operator new(0x28uLL);
  v4 = v2;
  v5 = xmmword_2245C4640;
  v3 = *(_OWORD *)&__p[16];
  *v2 = *(_OWORD *)__p;
  v2[1] = v3;
  *((_DWORD *)v2 + 8) = v7;
  *((_BYTE *)v2 + 36) = 0;
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8D50;
  strcpy(*(char **)__p, "KeyframePlanes.GlobalPlanes");
  sub_22373AF04((uint64_t)&v4, (const void **)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v5) < 0)
    goto LABEL_5;
}

void sub_2237B8670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2237B86C8(_QWORD *a1, unsigned __int8 *a2)
{
  _OWORD *v3;
  __int128 v4;
  _QWORD *v5;
  _OWORD v7[2];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC(a2, v7);
  v3 = operator new(0x28uLL);
  v4 = v7[1];
  *v3 = v7[0];
  v3[1] = v4;
  *((_DWORD *)v3 + 8) = v8;
  *((_BYTE *)v3 + 36) = 0;
  v5 = sub_2231813E8(a1, (uint64_t)"KP_", 3);
  sub_2231813E8(v5, (uint64_t)v3, 13);
  operator delete(v3);
  return a1;
}

void sub_2237B8774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237B8788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2237B879C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t v6;
  double v7;
  float32x4_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  float32x4_t *v16;
  float32x4_t *v17;
  char *v18;
  char *v19;
  char *v20;
  float32x4_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _QWORD *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t *v40;
  float32x4_t *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float32x4_t *v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  unint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  float32x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  unint64_t v89;
  float32x4_t *v90;
  float32x4_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *result;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  float32x4_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v121 = &v121;
  v122 = &v121;
  v123 = 0u;
  v124 = 0u;
  v125 = operator new();
  v10 = a3 + 1;
  v9 = (_QWORD *)*a3;
  v120 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v11 = 0;
    do
    {
      v12 = (_QWORD *)v9[1];
      v13 = v9;
      if (v12)
      {
        do
        {
          v14 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v13[2];
          v15 = *v14 == (_QWORD)v13;
          v13 = v14;
        }
        while (!v15);
      }
      v11 += 0x21CFB2B78C13521DLL * ((uint64_t)(v9[53] - v9[52]) >> 3);
      v9 = v14;
    }
    while (v14 != v10);
    v16 = (float32x4_t *)*((_QWORD *)&v123 + 1);
    if (v11 > (uint64_t)(*((_QWORD *)&v124 + 1) - *((_QWORD *)&v123 + 1)) >> 6)
    {
      if (v11 >> 58)
LABEL_154:
        sub_22316E078();
      v17 = (float32x4_t *)v124;
      v18 = (char *)operator new(v11 << 6, (std::align_val_t)0x20uLL);
      v19 = &v18[(char *)v17 - (char *)v16];
      if (v17 == v16)
      {
        *((_QWORD *)&v123 + 1) = &v18[(char *)v17 - (char *)v16];
        *(_QWORD *)&v124 = *((_QWORD *)&v123 + 1);
        *((_QWORD *)&v124 + 1) = &v18[64 * v11];
        v10 = a3 + 1;
      }
      else
      {
        v20 = &v18[(char *)v17 - (char *)v16];
        v10 = a3 + 1;
        do
        {
          v21 = v17[-4];
          v17 -= 4;
          *((float32x4_t *)v20 - 4) = v21;
          v20 -= 64;
          *((_QWORD *)v20 + 2) = v17[1].i64[0];
          v17->i64[0] = 0;
          v17->i64[1] = 0;
          v17[1].i64[0] = 0;
          v4 = v17[2];
          v5 = v17[3];
          *((float32x4_t *)v20 + 2) = v4;
          *((float32x4_t *)v20 + 3) = v5;
        }
        while (v17 != v16);
        v16 = (float32x4_t *)*((_QWORD *)&v123 + 1);
        v22 = (float32x4_t *)v124;
        *((_QWORD *)&v123 + 1) = v20;
        *(_QWORD *)&v124 = v19;
        *((_QWORD *)&v124 + 1) = &v18[64 * v11];
        if (v22 != v16)
        {
          v23 = v22;
          do
          {
            v25 = (void *)v23[-4].i64[0];
            v23 -= 4;
            v24 = v25;
            if (v25)
            {
              v22[-4].i64[1] = (uint64_t)v24;
              operator delete(v24);
            }
            v22 = v23;
          }
          while (v23 != v16);
        }
      }
      if (v16)
        MEMORY[0x227684CDC](v16, 32);
    }
  }
  v26 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != v10)
  {
    do
    {
      v27 = (_OWORD *)v26[52];
      v28 = (_OWORD *)v26[53];
      if (v27 != v28)
      {
        v29 = v26 + 32;
        v30 = (float32x4_t *)v124;
        do
        {
          v128 = *(float32x4_t *)v27;
          if ((unint64_t)v30 < *((_QWORD *)&v124 + 1))
          {
            v30->i64[0] = 0;
            v30->i64[1] = 0;
            v30[1].i64[0] = 0;
            v4 = v128;
            v30[2] = v128;
            v30[3].i64[0] = (uint64_t)v29;
            v31 = v30 + 4;
          }
          else
          {
            v32 = (float32x4_t *)*((_QWORD *)&v123 + 1);
            v33 = ((uint64_t)v30 - *((_QWORD *)&v123 + 1)) >> 6;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 58)
              goto LABEL_154;
            v35 = *((_QWORD *)&v124 + 1) - *((_QWORD *)&v123 + 1);
            if ((uint64_t)(*((_QWORD *)&v124 + 1) - *((_QWORD *)&v123 + 1)) >> 5 > v34)
              v34 = v35 >> 5;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0)
              v36 = 0x3FFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              if (v36 >> 58)
LABEL_153:
                sub_223174E94();
              v37 = (char *)operator new(v36 << 6, (std::align_val_t)0x20uLL);
            }
            else
            {
              v37 = 0;
            }
            v38 = (float32x4_t *)&v37[64 * v33];
            v38->i64[0] = 0;
            v38->i64[1] = 0;
            v38[1].i64[0] = 0;
            v4 = v128;
            v38[2] = v128;
            v38[3].i64[0] = (uint64_t)v29;
            v31 = v38 + 4;
            if (v30 == v32)
            {
              *((_QWORD *)&v123 + 1) = v38;
              *(_QWORD *)&v124 = v38 + 4;
              *((_QWORD *)&v124 + 1) = &v37[64 * v36];
            }
            else
            {
              do
              {
                v38[-4].i64[0] = 0;
                v38[-4].i64[1] = 0;
                v38 -= 4;
                v38[1].i64[0] = 0;
                v39 = v30[-4];
                v30 -= 4;
                *v38 = v39;
                v38[1].i64[0] = v30[1].i64[0];
                v30->i64[0] = 0;
                v30->i64[1] = 0;
                v30[1].i64[0] = 0;
                v4 = v30[2];
                v5 = v30[3];
                v38[2] = v4;
                v38[3] = v5;
              }
              while (v30 != v32);
              v30 = (float32x4_t *)*((_QWORD *)&v123 + 1);
              v40 = (float32x4_t *)v124;
              *((_QWORD *)&v123 + 1) = v38;
              *(_QWORD *)&v124 = v31;
              *((_QWORD *)&v124 + 1) = &v37[64 * v36];
              if (v40 != v30)
              {
                v41 = v40;
                do
                {
                  v43 = (void *)v41[-4].i64[0];
                  v41 -= 4;
                  v42 = v43;
                  if (v43)
                  {
                    v40[-4].i64[1] = (uint64_t)v42;
                    operator delete(v42);
                  }
                  v40 = v41;
                }
                while (v41 != v30);
              }
            }
            if (v30)
              MEMORY[0x227684CDC](v30, 32);
          }
          *(_QWORD *)&v124 = v31;
          v27 = (_OWORD *)((char *)v27 + 424);
          v30 = v31;
        }
        while (v27 != v28);
      }
      v44 = (_QWORD *)v26[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v26[2];
          v15 = *v45 == (_QWORD)v26;
          v26 = v45;
        }
        while (!v15);
      }
      v26 = v45;
    }
    while (v45 != v120);
  }
  if ((_QWORD)v124 != *((_QWORD *)&v123 + 1))
  {
    v46 = 0;
    v47 = (uint64_t)(v124 - *((_QWORD *)&v123 + 1)) >> 6;
    do
    {
      v48 = 0;
      do
      {
        if (v46 != v48)
        {
          v50 = sub_2237B9DD4((_QWORD *)(*((_QWORD *)&v123 + 1) + (v46 << 6) + 32), (_QWORD *)(*((_QWORD *)&v123 + 1) + (v48 << 6) + 32), v4, *(float32x2_t *)v5.f32, v6, v7, v8);
          if (v51)
          {
            v52 = v50;
            if (v46 <= v48)
              v53 = v48;
            else
              v53 = v46;
            v55 = *((_QWORD *)&v123 + 1);
            v54 = (_QWORD *)v124;
            v56 = (uint64_t)(v124 - *((_QWORD *)&v123 + 1)) >> 6;
            if (v53 >= v56)
            {
              v64 = v53 + 1;
              v65 = v53 + 1 >= v56;
              v66 = v53 + 1 - v56;
              if (v66 != 0 && v65)
              {
                if (v66 <= (uint64_t)(*((_QWORD *)&v124 + 1) - v124) >> 6)
                {
                  v104 = (_QWORD *)(v124 + (v66 << 6));
                  do
                  {
                    *v54 = 0;
                    v54[1] = 0;
                    v54[2] = 0;
                    v54[5] = 0;
                    v54[6] = 0;
                    v54[4] = 0;
                    v54 += 8;
                  }
                  while (v54 != v104);
                  *(_QWORD *)&v124 = v104;
                }
                else
                {
                  if (v64 >> 58)
                    sub_22316E078();
                  v67 = (uint64_t)(*((_QWORD *)&v124 + 1) - *((_QWORD *)&v123 + 1)) >> 5;
                  if (v67 <= v64)
                    v67 = v64;
                  if (*((_QWORD *)&v124 + 1) - *((_QWORD *)&v123 + 1) >= 0x7FFFFFFFFFFFFFC0uLL)
                    v68 = 0x3FFFFFFFFFFFFFFLL;
                  else
                    v68 = v67;
                  if (v68 >> 58)
                    sub_223174E94();
                  v69 = (char *)operator new(v68 << 6, (std::align_val_t)0x20uLL);
                  v70 = &v69[64 * v56];
                  v71 = v70;
                  do
                  {
                    *(_QWORD *)v71 = 0;
                    *((_QWORD *)v71 + 1) = 0;
                    *((_QWORD *)v71 + 2) = 0;
                    *((_QWORD *)v71 + 5) = 0;
                    *((_QWORD *)v71 + 6) = 0;
                    *((_QWORD *)v71 + 4) = 0;
                    v71 += 64;
                  }
                  while (v71 != &v69[64 * v64]);
                  v72 = v124;
                  if ((_QWORD)v124 == v55)
                  {
                    *((_QWORD *)&v123 + 1) = &v69[64 * v56];
                    *(_QWORD *)&v124 = &v69[64 * v64];
                    *((_QWORD *)&v124 + 1) = &v69[64 * v68];
                  }
                  else
                  {
                    do
                    {
                      *((_QWORD *)v70 - 8) = 0;
                      *((_QWORD *)v70 - 7) = 0;
                      v70 -= 64;
                      *((_QWORD *)v70 + 2) = 0;
                      v73 = *(_OWORD *)(v72 - 64);
                      v72 -= 64;
                      *(_OWORD *)v70 = v73;
                      *((_QWORD *)v70 + 2) = *(_QWORD *)(v72 + 16);
                      *(_QWORD *)v72 = 0;
                      *(_QWORD *)(v72 + 8) = 0;
                      *(_QWORD *)(v72 + 16) = 0;
                      v74 = *(_OWORD *)(v72 + 48);
                      *((_OWORD *)v70 + 2) = *(_OWORD *)(v72 + 32);
                      *((_OWORD *)v70 + 3) = v74;
                    }
                    while (v72 != v55);
                    v55 = *((_QWORD *)&v123 + 1);
                    v75 = v124;
                    *((_QWORD *)&v123 + 1) = v70;
                    *(_QWORD *)&v124 = &v69[64 * v64];
                    *((_QWORD *)&v124 + 1) = &v69[64 * v68];
                    if (v75 != v55)
                    {
                      v76 = v75;
                      do
                      {
                        v78 = *(void **)(v76 - 64);
                        v76 -= 64;
                        v77 = v78;
                        if (v78)
                        {
                          *(_QWORD *)(v75 - 56) = v77;
                          operator delete(v77);
                        }
                        v75 = v76;
                      }
                      while (v76 != v55);
                    }
                  }
                  if (v55)
                    MEMORY[0x227684CDC](v55, 32);
                }
              }
              else if (!v65)
              {
                v99 = (_QWORD *)(*((_QWORD *)&v123 + 1) + (v64 << 6));
                if ((_QWORD *)v124 != v99)
                {
                  v100 = (_QWORD *)v124;
                  do
                  {
                    v102 = (void *)*(v100 - 8);
                    v100 -= 8;
                    v101 = v102;
                    if (v102)
                    {
                      *(v54 - 7) = v101;
                      operator delete(v101);
                    }
                    v54 = v100;
                  }
                  while (v100 != v99);
                }
                *(_QWORD *)&v124 = v99;
              }
            }
            v57 = operator new(0x28uLL);
            v58 = v57;
            v57[2] = v46;
            v57[3] = v48;
            v57[4] = v52;
            v59 = v121;
            *v57 = v121;
            v57[1] = &v121;
            v59[1] = v57;
            v121 = v57;
            *(_QWORD *)&v123 = v123 + 1;
            v60 = (uint64_t *)(*((_QWORD *)&v123 + 1) + (v46 << 6));
            v62 = (float32x4_t *)v60[1];
            v61 = v60[2];
            if ((unint64_t)v62 < v61)
            {
              v62->i64[0] = v48;
              v62->i64[1] = (uint64_t)v57;
              v63 = v62 + 1;
              goto LABEL_102;
            }
            v79 = (float32x4_t *)*v60;
            v80 = ((uint64_t)v62 - *v60) >> 4;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 60)
              goto LABEL_155;
            v82 = v61 - (_QWORD)v79;
            if (v82 >> 3 > v81)
              v81 = v82 >> 3;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
              v83 = 0xFFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              if (v83 >> 60)
                goto LABEL_153;
              v84 = (char *)operator new(16 * v83);
              v85 = &v84[16 * v80];
              *(_QWORD *)v85 = v48;
              *((_QWORD *)v85 + 1) = v58;
              v86 = (uint64_t)v85;
              if (v62 == v79)
              {
LABEL_100:
                v87 = &v84[16 * v83];
                v63 = (float32x4_t *)(v85 + 16);
                *v60 = v86;
                v60[1] = (uint64_t)(v85 + 16);
                v60[2] = (uint64_t)v87;
                if (v62)
                  goto LABEL_101;
                goto LABEL_102;
              }
            }
            else
            {
              v84 = 0;
              v85 = (char *)(16 * v80);
              *(_QWORD *)v85 = v48;
              *((_QWORD *)v85 + 1) = v58;
              v86 = 16 * v80;
              if (v62 == v79)
                goto LABEL_100;
            }
            do
            {
              v4 = v62[-1];
              *(float32x4_t *)(v86 - 16) = v4;
              v86 -= 16;
              --v62;
            }
            while (v62 != v79);
            v62 = (float32x4_t *)*v60;
            v103 = &v84[16 * v83];
            v63 = (float32x4_t *)(v85 + 16);
            *v60 = v86;
            v60[1] = (uint64_t)(v85 + 16);
            v60[2] = (uint64_t)v103;
            if (v62)
LABEL_101:
              operator delete(v62);
LABEL_102:
            v60[1] = (uint64_t)v63;
            v88 = (uint64_t *)(*((_QWORD *)&v123 + 1) + (v48 << 6));
            v90 = (float32x4_t *)v88[1];
            v89 = v88[2];
            if ((unint64_t)v90 >= v89)
            {
              v91 = (float32x4_t *)*v88;
              v92 = ((uint64_t)v90 - *v88) >> 4;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 60)
LABEL_155:
                sub_22316E078();
              v94 = v89 - (_QWORD)v91;
              if (v94 >> 3 > v93)
                v93 = v94 >> 3;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
                v95 = 0xFFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                if (v95 >> 60)
                  goto LABEL_153;
                v96 = (char *)operator new(16 * v95);
                v97 = &v96[16 * v92];
                *(_QWORD *)v97 = v46;
                *((_QWORD *)v97 + 1) = v58;
                v98 = (uint64_t)v97;
                if (v90 == v91)
                {
LABEL_112:
                  v49 = (float32x4_t *)(v97 + 16);
                  *v88 = v98;
                  v88[1] = (uint64_t)(v97 + 16);
                  v88[2] = (uint64_t)&v96[16 * v95];
                  if (!v90)
                    goto LABEL_62;
LABEL_127:
                  operator delete(v90);
LABEL_62:
                  v88[1] = (uint64_t)v49;
                  goto LABEL_63;
                }
              }
              else
              {
                v96 = 0;
                v97 = (char *)(16 * v92);
                *(_QWORD *)v97 = v46;
                *((_QWORD *)v97 + 1) = v58;
                v98 = 16 * v92;
                if (v90 == v91)
                  goto LABEL_112;
              }
              do
              {
                v4 = v90[-1];
                *(float32x4_t *)(v98 - 16) = v4;
                v98 -= 16;
                --v90;
              }
              while (v90 != v91);
              v90 = (float32x4_t *)*v88;
              v49 = (float32x4_t *)(v97 + 16);
              *v88 = v98;
              v88[1] = (uint64_t)(v97 + 16);
              v88[2] = (uint64_t)&v96[16 * v95];
              if (!v90)
                goto LABEL_62;
              goto LABEL_127;
            }
            v90->i64[0] = v46;
            v90->i64[1] = (uint64_t)v58;
            v49 = v90 + 1;
            goto LABEL_62;
          }
        }
LABEL_63:
        ++v48;
      }
      while (v48 != v47);
      ++v46;
    }
    while (v46 != v47);
  }
  v105 = *(_QWORD *)(a1 + 16);
  if (v105)
  {
    v106 = *(_QWORD *)(a1 + 8);
    v107 = 24 * v105;
    do
    {
      v126 = &v121;
      v108 = *(unsigned int *)(v106 + 16);
      if ((_DWORD)v108 == -1)
        sub_22316DD70();
      v127 = &v126;
      ((void (*)(_QWORD **, uint64_t))off_24EC598D0[v108])(&v127, v106);
      v106 += 24;
      v107 -= 24;
    }
    while (v107);
  }
  result = (_QWORD *)v125;
  if (v125)
    result = (_QWORD *)MEMORY[0x227684CE8](v125, 0xC400A2AC0F1);
  v110 = *((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v111 = v124;
    v112 = *((_QWORD *)&v123 + 1);
    if ((_QWORD)v124 != *((_QWORD *)&v123 + 1))
    {
      v113 = v124;
      do
      {
        v115 = *(void **)(v113 - 64);
        v113 -= 64;
        v114 = v115;
        if (v115)
        {
          *(_QWORD *)(v111 - 56) = v114;
          operator delete(v114);
        }
        v111 = v113;
      }
      while (v113 != v110);
      v112 = *((_QWORD *)&v123 + 1);
    }
    *(_QWORD *)&v124 = v110;
    result = (_QWORD *)MEMORY[0x227684CDC](v112, 32);
  }
  if ((_QWORD)v123)
  {
    v116 = v121;
    result = v122;
    v117 = *v122;
    *(_QWORD *)(v117 + 8) = v121[1];
    *(_QWORD *)v116[1] = v117;
    *(_QWORD *)&v123 = 0;
    if (result != &v121)
    {
      do
      {
        v118 = (_QWORD *)result[1];
        operator delete(result);
        result = v118;
      }
      while (v118 != &v121);
    }
  }
  return result;
}

void sub_2237B9070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v16 = a14;
  if (a14)
  {
    v17 = a15;
    v18 = a14;
    if (a15 != a14)
    {
      v19 = a15;
      do
      {
        v21 = *(void **)(v19 - 64);
        v19 -= 64;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 56) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = a14;
    }
    a15 = v16;
    MEMORY[0x227684CDC](v18, 32);
  }
  if (a13)
  {
    v23 = a11;
    v22 = a12;
    v24 = *a12;
    *(_QWORD *)(v24 + 8) = *(_QWORD *)(a11 + 8);
    **(_QWORD **)(v23 + 8) = v24;
    a13 = 0;
    if (v22 != &a11)
    {
      do
      {
        v25 = (uint64_t *)v22[1];
        operator delete(v22);
        v22 = v25;
      }
      while (v25 != &a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2237B9110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2237B9174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237B9124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2237B9174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237B9138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2237B9174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237B914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2237B9174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237B9160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2237B9174((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237B9174(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = a1[6];
  if (v2)
    MEMORY[0x227684CE8](v2, 0xC400A2AC0F1);
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = a1[3];
    if (v4 != v3)
    {
      v6 = a1[4];
      do
      {
        v8 = *(void **)(v6 - 64);
        v6 -= 64;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 56) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = a1[3];
    }
    a1[4] = v3;
    MEMORY[0x227684CDC](v5, 32);
  }
  if (a1[2])
  {
    v10 = *a1;
    v9 = (uint64_t *)a1[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
  return a1;
}

_QWORD *sub_2237B9244(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1];
    do
    {
      v4 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24EC598C0[v4])(&v7, v3);
      *(_DWORD *)(v3 + 16) = -1;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3])
  {
    v5 = (_QWORD *)a1[1];
    if (a1 + 4 != v5)
      operator delete(v5);
  }
  return a1;
}

uint64_t sub_2237B92E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[1];
    do
    {
      v4 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24EC598C0[v4])(&v7, v3);
      *(_DWORD *)(v3 + 16) = -1;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (a1[3])
  {
    v5 = (_QWORD *)a1[1];
    if (a1 + 4 != v5)
      operator delete(v5);
  }
  return MEMORY[0x227684CE8](a1, 0x10A1C40DE82D69BLL);
}

uint64_t sub_2237B93A0(_QWORD **a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD))*a2)(*a2, **a1);
}

uint64_t sub_2237B93B8(_QWORD **a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD))*a2)(*a2, **a1);
}

void sub_2237B93D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *__src;
  uint64_t *v74[3];
  int v75;
  const char *v76;
  int v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE object[24];
  __int128 v85;
  void *__p[2];
  unint64_t v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  if ((_QWORD *)v3 == a2)
  {
    v4 = 0;
    v5 = 0.0;
    v8 = atomic_load((unsigned __int8 *)&qword_2540CC590);
    if ((v8 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v6 = *(double *)(v3 + 32);
      if (v6 <= 0.0)
        v6 = -0.0;
      else
        ++v4;
      v5 = v5 + v6;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((_QWORD *)v3 != a2);
    v7 = atomic_load((unsigned __int8 *)&qword_2540CC590);
    if ((v7 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_2540CC590))
  {
    sub_22455F53C(v74);
    sub_223174DE4(object, "cv3d.recon.kfplanes");
    sub_2232300E0(v74, (uint64_t)object, &qword_2540CC588);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CC590);
  }
LABEL_10:
  v81 = qword_2540CC588;
  if (**(int **)(qword_2540CC588 + 56) > 3)
    return;
  v9 = *(unsigned __int8 *)(qword_2540CC588 + 72);
  v10 = sub_22322F254(qword_2540CC588, "OSLogSurrogateAppender", 1, 0);
  v11 = v10;
  if (!v9 && v10 == 0)
    return;
  v74[0] = &v81;
  v74[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
  v74[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
  v75 = 3;
  v76 = "unknown file";
  v77 = 46;
  v79 = 0;
  v80 = 0;
  v78 = "unknown function";
  if (v4 <= 1)
    v13 = 1;
  else
    v13 = v4;
  v14 = *v74[0];
  if (*(char *)(*v74[0] + 39) < 0)
  {
    v16 = *(const char **)(v14 + 16);
    v15 = *(_QWORD *)(v14 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(*v74[0] + 39);
    v16 = (const char *)(*v74[0] + 16);
  }
  v17 = a2[4];
  v72 = a2[3];
  v70 = *v74[0] + 16;
  v71 = a2[2];
  v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v85 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v19 = (const char *)&xmmword_255788F40;
  else
    v19 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v20 = byte_255788F57;
  else
    v20 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v16;
  *(_QWORD *)object = os_log_create(v19, v16);
  v21 = &object[8];
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v20 >= 0x17)
  {
    v69 = v17;
    v22 = v11;
    v23 = v13;
    v24 = v14;
    v25 = v9;
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    v21 = operator new(v26 + 1);
    *(_QWORD *)&object[16] = v20;
    *(_QWORD *)&v85 = v27 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v21;
    v9 = v25;
    v14 = v24;
    v13 = v23;
    v11 = v22;
    v17 = v69;
    goto LABEL_35;
  }
  BYTE7(v85) = v20;
  if (v20)
LABEL_35:
    memmove(v21, v19, v20);
  v21[v20] = 0;
  BYTE8(v85) = 1;
  v28 = __p;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v30 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v30 = v15 | 7;
    v31 = v30 + 1;
    v28 = operator new(v30 + 1);
    __p[1] = (void *)v15;
    v87 = v31 | 0x8000000000000000;
    __p[0] = v28;
  }
  else
  {
    HIBYTE(v87) = v15;
    if (!v15)
    {
      LOBYTE(__p[0]) = 0;
      v88 = 1;
      v29 = *(NSObject **)object;
      if ((SHIBYTE(v87) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_46;
    }
  }
  memmove(v28, __src, v15);
  *((_BYTE *)v28 + v15) = 0;
  v88 = 1;
  v29 = *(NSObject **)object;
  if ((SHIBYTE(v87) & 0x80000000) == 0)
  {
LABEL_40:
    if (!BYTE8(v85))
      goto LABEL_49;
LABEL_47:
    if (SBYTE7(v85) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_49;
  }
LABEL_46:
  operator delete(__p[0]);
  if (BYTE8(v85))
    goto LABEL_47;
LABEL_49:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v32 = v5 / (double)v13;
  if (v11 && *(_QWORD *)(v11 + 24))
  {
    v33 = _os_log_pack_size();
    v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
    v35 = (std::__shared_weak_count *)operator new();
    v36 = v35;
    v35->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v35->__shared_weak_owners_ = 0;
    v35[1].__vftable = v34;
    *(_QWORD *)object = v34;
    *(_QWORD *)&object[8] = v34;
    *(_QWORD *)&object[16] = v35;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    v85 = 0uLL;
    __p[0] = 0;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v36);
    }
    v40 = *(_QWORD *)object;
    v41 = _os_log_pack_fill();
    *(_DWORD *)v41 = 134218496;
    *(_QWORD *)(v41 + 4) = (v17 - v72) >> 6;
    *(_WORD *)(v41 + 12) = 2048;
    *(_QWORD *)(v41 + 14) = v71;
    *(_WORD *)(v41 + 22) = 2048;
    *(double *)(v41 + 24) = v32;
    v42 = operator new();
    v43 = *(unsigned __int8 *)(v14 + 39);
    v44 = v70;
    if ((v43 & 0x80u) != 0)
    {
      v44 = *(_QWORD *)(v14 + 16);
      v43 = *(_QWORD *)(v14 + 24);
    }
    *(_QWORD *)v42 = v40;
    *(_OWORD *)(v42 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v42 + 24) = v85;
    v85 = 0uLL;
    *(_QWORD *)(v42 + 40) = v44;
    *(_QWORD *)(v42 + 48) = v43;
    *(_BYTE *)(v42 + 56) = 1;
    v82 = 0;
    v83 = v42;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v83);
    v45 = v83;
    v83 = 0;
    if (v45)
    {
      v46 = *(std::__shared_weak_count **)(v45 + 32);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = *(std::__shared_weak_count **)(v45 + 16);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
      v52 = v82;
      v82 = 0;
      if (v52)
      {
        v53 = *(std::__shared_weak_count **)(v52 + 32);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = *(std::__shared_weak_count **)(v52 + 16);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
      }
    }
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v63 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  else
  {
    os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = (v17 - v72) >> 6;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v71;
    *(_WORD *)&object[22] = 2048;
    *(double *)&v85 = v32;
    v65 = (void *)_os_log_send_and_compose_impl();
    if (v65)
      free(v65);
  }
  if (v9)
  {
    sub_22322C138((uint64_t)v74, "Created KeyframePlaneGraph with %zu vertices, %zu edges. Average IoU %f.", (uint64_t)(a2[4] - a2[3]) >> 6, a2[2], v32);
    sub_223182C08((uint64_t)v74);
  }
  sub_223182C08((uint64_t)v74);
  v66 = v80;
  if (v80)
  {
    v67 = (unint64_t *)&v80->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_2237B9C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237B9C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC590);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC590);
  _Unwind_Resume(a1);
}

void sub_2237B9CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237B9D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B9D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237B9D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237B9DC0()
{
  JUMPOUT(0x227684CE8);
}

unint64_t sub_2237B9DD4(_QWORD *a1, _QWORD *a2, float32x4_t a3, float32x2_t a4, float32x2_t a5, double a6, float32x4_t a7)
{
  double v7;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  uint64_t v37;
  unint64_t v38;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  char *v55;
  char *v56;
  void *v57;
  char *v58;
  void *v59;
  void *v60;
  char *v61;
  char *v62;
  void *v63;
  char *v64;
  void *v65;
  void *v66;
  int v67;
  int v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int v75;
  int v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t *v92;
  uint64_t *v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  double v114;
  char v115;
  float v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  char *v122;
  char *v123;
  void *v124;
  char *v125;
  void *v126;
  void *v127;
  char *v128;
  char *v129;
  void *v130;
  char *v131;
  void *v132;
  void *v133;
  void *v134;
  char *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  void *v140;
  char *v141;
  uint64_t v142;
  __int32 v143;
  uint64_t v144;
  float v145;
  float32x4_t v146;
  _BYTE v147[32];
  float32x4_t v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  unint64_t v153;
  void *v154;
  void *v155;
  char v156;
  void *v157;
  char *v158;
  char v159;
  _QWORD v160[3];
  __int32 v161;
  float32x2_t v162;
  __int32 v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  char v171;
  void *__p;
  char *v173;
  char v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  v10 = a1[2];
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 160);
    v12 = *(_QWORD **)(v10 + 168);
    if ((_QWORD *)v11 != v12)
      goto LABEL_6;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 79, (uint64_t)"vertex.kf_seg_ref != nullptr", 28, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_190;
    }
    v10 = a1[2];
    v11 = *(_QWORD *)(v10 + 160);
    v12 = *(_QWORD **)(v10 + 168);
    if ((_QWORD *)v11 != v12)
    {
      do
      {
LABEL_6:
        v13 = *(_QWORD *)v11 == *a1 && *(_QWORD *)(v11 + 8) == a1[1];
        if (v13)
          goto LABEL_14;
        v11 += 424;
      }
      while ((_QWORD *)v11 != v12);
      v14 = 0;
      v15 = 0;
      v16 = a2[2];
      if (!v16)
        goto LABEL_21;
LABEL_12:
      v17 = v15 | v14;
      v18 = *(_QWORD *)(v16 + 160);
      v19 = *(_QWORD **)(v16 + 168);
      if ((_QWORD *)v18 != v19)
        goto LABEL_23;
      goto LABEL_29;
    }
  }
LABEL_14:
  if ((_QWORD *)v11 == v12)
    v14 = 0;
  else
    v14 = v11;
  if ((_QWORD *)v11 == v12)
    v15 = 0;
  else
    v15 = v11 & 0xFFFFFFFFFFFFFF00;
  v16 = a2[2];
  if (v16)
    goto LABEL_12;
LABEL_21:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 79, (uint64_t)"vertex.kf_seg_ref != nullptr", 28, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_190;
  }
  v16 = a2[2];
  v17 = v15 | v14;
  v18 = *(_QWORD *)(v16 + 160);
  v19 = *(_QWORD **)(v16 + 168);
  if ((_QWORD *)v18 != v19)
  {
LABEL_23:
    while (*(_QWORD *)v18 != *a2 || *(_QWORD *)(v18 + 8) != a2[1])
    {
      v18 += 424;
      if ((_QWORD *)v18 == v19)
      {
        v18 = 0;
        v21 = 0;
        goto LABEL_31;
      }
    }
  }
LABEL_29:
  v13 = v18 == (_QWORD)v19;
  v21 = v18 & 0xFFFFFFFFFFFFFF00;
  v18 = v18;
  if (v13)
  {
    v18 = 0;
    v21 = 0;
  }
LABEL_31:
  v22 = v21 | v18;
  a4.i32[0] = *(_DWORD *)(v17 + 36);
  a3.i64[0] = *(_QWORD *)(v17 + 28);
  a5.i32[0] = *(_DWORD *)((v21 | v18) + 0x24);
  a7.i64[0] = *(_QWORD *)((v21 | v18) + 0x1C);
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1);
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a7.f32), v23, *(float32x2_t *)a3.f32, 1), a5, a4).f32[0] < 0.96593)goto LABEL_46;
  a7.i32[2] = *(_DWORD *)((v21 | v18) + 0x24);
  v24 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), v23, v23), a5, a5).f32[0];
  if (v24 != 1.0)
  {
    v25 = v24 >= 1.0 ? v24 + -1.0 : 1.0 - v24;
    if (v25 > 0.000001)
      a7 = vmulq_n_f32(a7, 1.0 / sqrtf(v24));
  }
  v26 = *(float32x2_t *)((v21 | v18) + 0x10);
  a5.i32[0] = *(_DWORD *)((v21 | v18) + 0x18);
  v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1);
  v28 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
  v29 = *(float32x2_t *)(v17 + 16);
  v23.i32[0] = *(_DWORD *)(v17 + 24);
  if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v29, *(float32x2_t *)a7.f32), v27, v29, 1), v28, v23), vmla_f32(vmla_lane_f32(vmul_f32(v26, *(float32x2_t *)a7.f32), v27, v26, 1), v28, a5)).f32[0] > 0.1)goto LABEL_46;
  v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3.f32, 1);
  a3.i32[2] = *(_DWORD *)(v17 + 36);
  v31 = (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1);
  v32 = (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1);
  v33 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a3.f32), v30, v30), a4, a4).f32[0];
  if (v33 != 1.0)
  {
    v34 = v33 >= 1.0 ? v33 + -1.0 : 1.0 - v33;
    if (v34 > 0.000001)
      a3 = vmulq_n_f32(a3, 1.0 / sqrtf(v33));
  }
  v35 = vmla_lane_f32(vmul_f32(v29, *(float32x2_t *)a3.f32), v32, *(float32x2_t *)a3.f32, 1);
  v36 = (float32x2_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
  if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v26, *(float32x2_t *)a3.f32), v31, *(float32x2_t *)a3.f32, 1), v36, a5), vmla_f32(v35, v36, v23)).f32[0] > 0.1)
  {
LABEL_46:
    v37 = 0;
    v38 = 0;
    return v38 | v37;
  }
  if ((!*(_BYTE *)(v17 + 416) || !*(_BYTE *)((v21 | v18) + 0x1A0))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 38, (uint64_t)"kp0.polygons.has_value() && kp1.polygons.has_value()", 52, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_190:
    abort();
  }
  sub_2236EA118((uint64_t)&v146, v17);
  sub_2236EA118((uint64_t)v160, v22);
  v40.f32[0] = (float)v153;
  v43.i64[0] = *(_QWORD *)&v147[12];
  v41.i32[0] = *(_DWORD *)&v147[20];
  v43.i32[2] = *(_DWORD *)&v147[20];
  v42 = vmulq_n_f32(v43, (float)v153);
  v43.f32[0] = (float)v168;
  v44.i32[0] = v163;
  *(float32x2_t *)v45.f32 = v162;
  v45.i32[2] = v163;
  v46 = vmulq_n_f32(v45, (float)v168);
  v47 = (int8x16_t)vaddq_f32(vaddq_f32(v42, (float32x4_t)0), v46);
  v48 = (float32x4_t)vextq_s8(v47, v47, 8uLL);
  v49 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(vadd_f32(vadd_f32(*(float32x2_t *)v42.f32, 0), *(float32x2_t *)v46.f32), *(float32x2_t *)v47.i8), vmla_lane_f32(vmla_lane_f32(0, v40, *(float32x2_t *)&v147[12], 1), *(float32x2_t *)v43.f32, v162, 1), *(float32x2_t *)v47.i8, 1), *(float32x2_t *)v48.f32, vmla_f32(vmla_f32(0, v41, v40), v44, *(float32x2_t *)v43.f32)).f32[0]);
  if (v49 == 0.0 || v49 <= 0.000001)
    sub_22324A974();
  v48.i64[0] = *(_QWORD *)v147;
  v48.i32[2] = *(_DWORD *)&v147[8];
  v51 = vmulq_n_f32(v48, v40.f32[0]);
  v52 = vaddq_f32(v51, (float32x4_t)0);
  v51.i64[0] = v160[2];
  v51.i32[2] = v161;
  v40.f32[0] = v40.f32[0] + v43.f32[0];
  v53 = vdivq_f32(vaddq_f32(v52, vmulq_n_f32(v51, v43.f32[0])), (float32x4_t)vdupq_lane_s32((int32x2_t)v40, 0));
  v54 = vmulq_n_f32((float32x4_t)v47, 1.0 / v49);
  v143 = v53.i32[2];
  v142 = v53.i64[0];
  v145 = v54.f32[2];
  v144 = v54.i64[0];
  if (v174)
  {
    v55 = (char *)__p;
    if (__p)
    {
      v56 = v173;
      v57 = __p;
      if (v173 != __p)
      {
        v58 = v173;
        do
        {
          v60 = (void *)*((_QWORD *)v58 - 3);
          v58 -= 24;
          v59 = v60;
          if (v60)
          {
            *((_QWORD *)v56 - 2) = v59;
            operator delete(v59);
          }
          v56 = v58;
        }
        while (v58 != v55);
        v57 = __p;
      }
      v173 = v55;
      operator delete(v57);
    }
  }
  if (v171 && v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v159)
  {
    v61 = (char *)v157;
    if (v157)
    {
      v62 = v158;
      v63 = v157;
      if (v158 != v157)
      {
        v64 = v158;
        do
        {
          v66 = (void *)*((_QWORD *)v64 - 3);
          v64 -= 24;
          v65 = v66;
          if (v66)
          {
            *((_QWORD *)v62 - 2) = v65;
            operator delete(v65);
          }
          v62 = v64;
        }
        while (v64 != v61);
        v63 = v157;
      }
      v158 = v61;
      operator delete(v63);
    }
  }
  if (v156 && v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if ((!*(_BYTE *)(v17 + 416) || *(_QWORD *)(v17 + 400) - *(_QWORD *)(v17 + 392) != 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 42, (uint64_t)"kp0.polygons && kp0.polygons->size() == 1", 41, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if ((!*(_BYTE *)(v22 + 416) || *(_QWORD *)(v22 + 400) - *(_QWORD *)(v22 + 392) != 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 43, (uint64_t)"kp1.polygons && kp1.polygons->size() == 1", 41, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v53.f32[0] = fabsf(v145);
  if (v53.f32[0] <= 0.052336)
    v67 = 2;
  else
    v67 = 4;
  v54.i32[0] = 1065330231;
  if (v53.f32[0] >= 0.99863)
    v68 = 1;
  else
    v68 = v67;
  sub_223F2B7AC((uint64_t)&v142, v68, &v136, v53, v54);
  v69 = *(float32x4_t *)(v10 + 96);
  v70 = *(float32x4_t *)(v10 + 112);
  v71 = *(float32x4_t *)(v10 + 128);
  v72 = *(float32x4_t *)(v10 + 144);
  v146 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v136.f32[0]), v70, *(float32x2_t *)v136.f32, 1), v71, v136, 2), v72, v136, 3);
  *(float32x4_t *)v147 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v137.f32[0]), v70, *(float32x2_t *)v137.f32, 1), v71, v137, 2), v72, v137, 3);
  *(float32x4_t *)&v147[16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v138.f32[0]), v70, *(float32x2_t *)v138.f32, 1), v71, v138, 2), v72, v138, 3);
  v148 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v139.f32[0]), v70, *(float32x2_t *)v139.f32, 1), v71, v139, 2), v72, v139, 3);
  if (!*(_BYTE *)(v17 + 416))
    sub_22324A974();
  sub_2237650E0((__int128 *)(v10 + 48), (simd_float3 *)&v146, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v17 + 400) - *(_QWORD *)(v17 + 392)) >> 3), *(uint64_t **)(v17 + 392), (uint64_t)&v140, 1024.0);
  v74.f32[0] = fabsf(v145);
  if (v74.f32[0] <= 0.052336)
    v75 = 2;
  else
    v75 = 4;
  v73.i32[0] = 1065330231;
  if (v74.f32[0] >= 0.99863)
    v76 = 1;
  else
    v76 = v75;
  sub_223F2B7AC((uint64_t)&v142, v76, &v136, v74, v73);
  v77 = *(float32x4_t *)(v16 + 96);
  v78 = *(float32x4_t *)(v16 + 112);
  v79 = *(float32x4_t *)(v16 + 128);
  v80 = *(float32x4_t *)(v16 + 144);
  v146 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v136.f32[0]), v78, *(float32x2_t *)v136.f32, 1), v79, v136, 2), v80, v136, 3);
  *(float32x4_t *)v147 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v137.f32[0]), v78, *(float32x2_t *)v137.f32, 1), v79, v137, 2), v80, v137, 3);
  *(float32x4_t *)&v147[16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v138.f32[0]), v78, *(float32x2_t *)v138.f32, 1), v79, v138, 2), v80, v138, 3);
  v148 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v139.f32[0]), v78, *(float32x2_t *)v139.f32, 1), v79, v139, 2), v80, v139, 3);
  if (!*(_BYTE *)(v22 + 416))
    sub_22324A974();
  sub_2237650E0((__int128 *)(v16 + 48), (simd_float3 *)&v146, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v22 + 400) - *(_QWORD *)(v22 + 392)) >> 3), *(uint64_t **)(v22 + 392), (uint64_t)&v134, 1024.0);
  v81 = (uint64_t **)v140;
  if (v141 - (_BYTE *)v140 != 24 || v135 - (_BYTE *)v134 != 24)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 52, (uint64_t)"polys0.size() == 1 && polys1.size() == 1", 40, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v81 = (uint64_t **)v140;
  }
  v82 = *v81;
  v83 = v81[1];
  v84 = 0.0;
  v85 = 0.0;
  v86 = 0.0;
  v87 = 0.0;
  v88 = 0.0;
  if (v82 != v83)
  {
    v86 = (float)*v82;
    v85 = (float)v82[1];
    v87 = v85;
    v88 = v86;
    do
    {
      v89 = *v82;
      v90 = v82[1];
      v82 += 2;
      v91 = (float)v90;
      if (v88 > (float)v89)
        v88 = (float)v89;
      if (v87 > v91)
        v87 = (float)v90;
      if (v86 < (float)v89)
        v86 = (float)v89;
      if (v85 < v91)
        v85 = (float)v90;
    }
    while (v82 != v83);
  }
  v92 = *(uint64_t **)v134;
  v93 = (uint64_t *)*((_QWORD *)v134 + 1);
  v94 = 0.0;
  v95 = 0.0;
  v96 = 0.0;
  if (*(uint64_t **)v134 != v93)
  {
    v94 = (float)*v92;
    v84 = (float)v92[1];
    v95 = v84;
    v96 = v94;
    do
    {
      v97 = *v92;
      v98 = v92[1];
      v92 += 2;
      v99 = (float)v98;
      if (v96 > (float)v97)
        v96 = (float)v97;
      if (v95 > v99)
        v95 = (float)v98;
      if (v94 < (float)v97)
        v94 = (float)v97;
      if (v84 < v99)
        v84 = (float)v98;
    }
    while (v92 != v93);
  }
  if (v88 > v94 || v87 > v84 || v86 < v96 || v85 < v95)
    goto LABEL_170;
  sub_223769198(1, 1, (uint64_t)&v140, (uint64_t)&v134, (uint64_t *)&v146);
  v103 = v146.i64[0];
  if (v146.i64[0] == v146.i64[1])
    goto LABEL_159;
  v104 = 0.0;
  v105 = v146.i64[0];
  do
  {
    v107 = *(_QWORD **)v105;
    v108 = *(_QWORD **)(v105 + 8);
    v109 = (unint64_t)v108 - *(_QWORD *)v105;
    v106 = 0.0;
    if (v109 >= 0x30)
    {
      v110 = v108 - 2;
      if ((v109 & 0x10) != 0)
        v108 -= 2;
      if (v107 == v108)
      {
        v112 = 0.0;
        if ((v109 & 0x10) == 0)
        {
LABEL_146:
          v106 = v112 * 0.5;
          goto LABEL_147;
        }
      }
      else
      {
        v111 = *v110;
        v112 = 0.0;
        do
        {
          v113 = v107[1];
          v114 = (double)(v113 + v110[1]) * (double)(v111 - *v107);
          v110 = v107 + 2;
          v111 = v107[2];
          v112 = v112 + v114 + (double)(v107[3] + v113) * (double)(*v107 - v111);
          v107 += 4;
        }
        while (v107 != v108);
        v110 = v107 - 2;
        v107 = v108;
        if ((v109 & 0x10) == 0)
          goto LABEL_146;
      }
      v112 = v112 + (double)(v107[1] + v110[1]) * (double)(*v110 - *v107);
      goto LABEL_146;
    }
LABEL_147:
    v104 = v104 + v106;
    v105 += 24;
  }
  while (v105 != v146.i64[1]);
  if (v104 > 0.0)
  {
    v116 = sub_223765CA8((uint64_t)v140);
    v115 = 0;
    v7 = (float)(v104 / (float)(fabsf(v116) + fabsf(sub_223765CA8((uint64_t)v134))));
    v103 = v146.i64[0];
    if (!v146.i64[0])
      goto LABEL_169;
  }
  else
  {
LABEL_159:
    v115 = 1;
    if (!v146.i64[0])
      goto LABEL_169;
  }
  v117 = v146.i64[1];
  v118 = (void *)v103;
  if (v146.i64[1] != v103)
  {
    v119 = v146.i64[1];
    do
    {
      v121 = *(void **)(v119 - 24);
      v119 -= 24;
      v120 = v121;
      if (v121)
      {
        *(_QWORD *)(v117 - 16) = v120;
        operator delete(v120);
      }
      v117 = v119;
    }
    while (v119 != v103);
    v118 = (void *)v146.i64[0];
  }
  v146.i64[1] = v103;
  operator delete(v118);
LABEL_169:
  if ((v115 & 1) != 0)
LABEL_170:
    v7 = 0.0;
  v122 = (char *)v134;
  if (v134)
  {
    v123 = v135;
    v124 = v134;
    if (v135 != v134)
    {
      v125 = v135;
      do
      {
        v127 = (void *)*((_QWORD *)v125 - 3);
        v125 -= 24;
        v126 = v127;
        if (v127)
        {
          *((_QWORD *)v123 - 2) = v126;
          operator delete(v126);
        }
        v123 = v125;
      }
      while (v125 != v122);
      v124 = v134;
    }
    v135 = v122;
    operator delete(v124);
  }
  v128 = (char *)v140;
  if (v140)
  {
    v129 = v141;
    v130 = v140;
    if (v141 != v140)
    {
      v131 = v141;
      do
      {
        v133 = (void *)*((_QWORD *)v131 - 3);
        v131 -= 24;
        v132 = v133;
        if (v133)
        {
          *((_QWORD *)v129 - 2) = v132;
          operator delete(v132);
        }
        v129 = v131;
      }
      while (v131 != v128);
      v130 = v140;
    }
    v141 = v128;
    operator delete(v130);
  }
  v38 = *(_QWORD *)&v7 & 0xFFFFFFFFFFFFFF00;
  v37 = LOBYTE(v7);
  if (v7 <= 0.0)
  {
    v37 = 0;
    v38 = 0;
  }
  return v38 | v37;
}

void sub_2237BA9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_22317C838(&a29);
  sub_22317C838(&a10);
  sub_22317C838(&a22);
  _Unwind_Resume(a1);
}

void sub_2237BAA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_2237BAA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  size_t v37;
  size_t v38;
  __int128 **p_dst;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  unsigned __int8 *v109;
  unint64_t v110;
  const char *__src;
  void *v112[2];
  uint64_t v113;
  void *__p[2];
  char v115;
  _QWORD v116[3];
  int v117;
  const char *v118;
  int v119;
  const char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  char *v126;
  std::__shared_weak_count *v127;
  _QWORD *v128;
  __int128 v129;
  _BYTE v130[24];
  __int128 *__dst;
  __int128 v132;
  void *v133[2];
  std::__shared_weak_count *v134;
  char __s[8];
  char v136;
  _BYTE v137[24];
  __int128 v138;
  char *v139;
  _OWORD v140[5];
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  sub_2237BBAF8(&v123);
  if (**(int **)(v123 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v123 + 72);
  v6 = sub_22322F254(v123, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v116[0] = &v123;
  v116[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v116[2] = std::chrono::system_clock::now().__d_.__rep_;
  v117 = 3;
  v118 = "unknown file";
  v119 = 40;
  v121 = 0;
  v122 = 0;
  v120 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a2, __s);
  v109 = (unsigned __int8 *)(a3 + 216);
  sub_2245664AC((unsigned __int8 *)(a3 + 216), v133);
  if (!*(_BYTE *)(a2 + 416))
    sub_22324A974();
  v10 = *(_QWORD **)(a2 + 392);
  v9 = *(_QWORD **)(a2 + 400);
  memset(v140, 0, 24);
  v11 = 0xAAAAAAAAAAAAAAABLL * (v9 - v10);
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0uLL;
  }
  else
  {
    if (v11 >> 61)
      sub_22367C394();
    *(_QWORD *)&v140[0] = operator new(0x5555555555555558 * (v9 - v10));
    *((_QWORD *)&v140[0] + 1) = *(_QWORD *)&v140[0];
    *(_QWORD *)&v140[1] = *(_QWORD *)&v140[0] + 0x5555555555555558 * (v9 - v10);
    *(_QWORD *)v137 = v140;
    do
    {
      *(_QWORD *)&v124 = (uint64_t)(v10[1] - *v10) >> 4;
      sub_2237A4B60((uint64_t *)v137, &v124);
      v10 += 3;
    }
    while (v10 != v9);
    v12 = v140[0];
    v13 = *(_QWORD *)&v140[1];
  }
  *(_OWORD *)v112 = v12;
  v113 = v13;
  DWORD2(v140[1]) = 0;
  sub_2237A4914((uint64_t)v137, (uint64_t)v140, (unint64_t **)v112);
  if (DWORD2(v140[1]) == -1)
    sub_22316DD70();
  *(_QWORD *)v137 = &v124;
  ((void (*)(void **__return_ptr, _BYTE *, _OWORD *))off_24EC599A8[DWORD2(v140[1])])(__p, v137, v140);
  if (DWORD2(v140[1]) != -1)
    ((void (*)(_BYTE *, _OWORD *))off_24EC59990[DWORD2(v140[1])])(v137, v140);
  v110 = v11;
  if (v115 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  v15 = *(_QWORD *)v116[0];
  v16 = (const char *)(*(_QWORD *)v116[0] + 16);
  v108 = v16;
  if (*(char *)(*(_QWORD *)v116[0] + 39) < 0)
  {
    v16 = *(const char **)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v19 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)v116[0] + 39);
    v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v18 & 1) != 0)
      goto LABEL_23;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v140);
    sub_223199C58("com.apple.cv3d", (unint64_t)v140, &xmmword_255788F40);
    if (BYTE8(v140[1]) && SBYTE7(v140[1]) < 0)
      operator delete(*(void **)&v140[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_23:
  if (byte_255788F57 >= 0)
    v20 = (const char *)&xmmword_255788F40;
  else
    v20 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v21 = byte_255788F57;
  else
    v21 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v16;
  *(_QWORD *)&v140[0] = os_log_create(v20, v16);
  v22 = (char *)v140 + 8;
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v21 >= 0x17)
  {
    v23 = a2;
    v24 = v8;
    v25 = v15;
    v26 = v14;
    v27 = v5;
    v28 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v28 = v21 | 7;
    v29 = v28 + 1;
    v22 = (char *)operator new(v28 + 1);
    *(_QWORD *)&v140[1] = v21;
    *((_QWORD *)&v140[1] + 1) = v29 | 0x8000000000000000;
    *((_QWORD *)&v140[0] + 1) = v22;
    v5 = v27;
    v14 = v26;
    v15 = v25;
    v8 = v24;
    a2 = v23;
    goto LABEL_36;
  }
  HIBYTE(v140[1]) = v21;
  if (v21)
LABEL_36:
    memmove(v22, v20, v21);
  v22[v21] = 0;
  LOBYTE(v140[2]) = 1;
  v30 = (char *)&v140[2] + 8;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v17 >= 0x17)
  {
    v32 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v32 = v17 | 7;
    v33 = v32 + 1;
    v30 = (char *)operator new(v32 + 1);
    *(_QWORD *)&v140[3] = v17;
    *((_QWORD *)&v140[3] + 1) = v33 | 0x8000000000000000;
    *((_QWORD *)&v140[2] + 1) = v30;
  }
  else
  {
    HIBYTE(v140[3]) = v17;
    if (!v17)
    {
      BYTE8(v140[2]) = 0;
      LOBYTE(v140[4]) = 1;
      v31 = *(NSObject **)&v140[0];
      if ((SHIBYTE(v140[3]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_47;
    }
  }
  memmove(v30, __src, v17);
  v30[v17] = 0;
  LOBYTE(v140[4]) = 1;
  v31 = *(NSObject **)&v140[0];
  if ((SHIBYTE(v140[3]) & 0x80000000) == 0)
  {
LABEL_41:
    if (!LOBYTE(v140[2]))
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(*((void **)&v140[2] + 1));
  if (!LOBYTE(v140[2]))
    goto LABEL_50;
LABEL_48:
  if (SHIBYTE(v140[1]) < 0)
    operator delete(*((void **)&v140[0] + 1));
LABEL_50:
  if (*(_QWORD *)&v140[0])
    os_release(*(void **)&v140[0]);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v31, OS_LOG_TYPE_INFO);
    *(_QWORD *)&v140[0] = 0xD04100602;
    WORD4(v140[0]) = 2080;
    *(_QWORD *)((char *)v140 + 10) = __s;
    WORD1(v140[1]) = 1040;
    DWORD1(v140[1]) = 13;
    WORD4(v140[1]) = 2080;
    *(_QWORD *)((char *)&v140[1] + 10) = v133;
    WORD1(v140[2]) = 2048;
    *(_QWORD *)((char *)&v140[2] + 4) = v110;
    WORD6(v140[2]) = 2080;
    *(_QWORD *)((char *)&v140[2] + 14) = v14;
    v40 = (void *)_os_log_send_and_compose_impl();
    if (v40)
      free(v40);
    goto LABEL_153;
  }
  v34 = _os_log_pack_size();
  v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
  v36 = (std::__shared_weak_count *)operator new();
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = v35;
  *(_QWORD *)&v124 = v35;
  *((_QWORD *)&v124 + 1) = v35;
  v126 = 0;
  v127 = 0;
  v125 = v36;
  v37 = strlen(__s);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v41 = v37 | 7;
    v42 = v41 + 1;
    p_dst = (__int128 **)operator new(v41 + 1);
    *(_QWORD *)&v132 = v38;
    *((_QWORD *)&v132 + 1) = v42 | 0x8000000000000000;
    __dst = (__int128 *)p_dst;
    goto LABEL_63;
  }
  HIBYTE(v132) = v37;
  p_dst = &__dst;
  if (v37)
LABEL_63:
    memcpy(p_dst, __s, v38);
  *((_BYTE *)p_dst + v38) = 0;
  v43 = strlen((const char *)v133);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v44 = v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    *(_QWORD *)&v130[8] = v44;
    *(_QWORD *)&v130[16] = v47 | 0x8000000000000000;
    *(_QWORD *)v130 = v45;
    goto LABEL_71;
  }
  v130[23] = v43;
  v45 = v130;
  if (v43)
LABEL_71:
    memcpy(v45, v133, v44);
  v45[v44] = 0;
  v48 = strlen((const char *)v14);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&v129 = v49;
    *((_QWORD *)&v129 + 1) = v52 | 0x8000000000000000;
    v128 = v50;
  }
  else
  {
    HIBYTE(v129) = v48;
    v50 = &v128;
    if (!v48)
      goto LABEL_80;
  }
  memcpy(v50, v14, v49);
LABEL_80:
  *((_BYTE *)v50 + v49) = 0;
  *((_QWORD *)&v140[0] + 1) = __dst;
  *(_QWORD *)&v140[1] = v132;
  *(_QWORD *)((char *)&v140[1] + 7) = *(_QWORD *)((char *)&v132 + 7);
  v140[2] = *(_OWORD *)v130;
  *(_QWORD *)((char *)&v140[2] + 15) = *(_QWORD *)&v130[15];
  *(_QWORD *)((char *)&v140[4] + 7) = *(_QWORD *)((char *)&v129 + 7);
  *(_QWORD *)&v140[0] = off_24EC371B0;
  HIBYTE(v140[1]) = HIBYTE(v132);
  BYTE7(v140[3]) = v130[23];
  *((_QWORD *)&v140[3] + 1) = v128;
  *(_QWORD *)&v140[4] = v129;
  HIBYTE(v140[4]) = HIBYTE(v129);
  v53 = (char *)operator new(0x68uLL);
  *((_QWORD *)v53 + 1) = 0;
  *((_QWORD *)v53 + 2) = 0;
  *(_QWORD *)v53 = &off_24EC37160;
  *((_QWORD *)v53 + 3) = off_24EC371B0;
  *((_OWORD *)v53 + 2) = *(_OWORD *)((char *)v140 + 8);
  *((_QWORD *)v53 + 6) = *((_QWORD *)&v140[1] + 1);
  memset((char *)v140 + 8, 0, 24);
  *(_OWORD *)(v53 + 56) = v140[2];
  *((_QWORD *)v53 + 9) = *(_QWORD *)&v140[3];
  memset(&v140[2], 0, 24);
  v54 = *(_OWORD *)((char *)&v140[3] + 8);
  *((_QWORD *)v53 + 12) = *((_QWORD *)&v140[4] + 1);
  *((_OWORD *)v53 + 5) = v54;
  memset((char *)&v140[3] + 8, 0, 24);
  v55 = v127;
  v126 = v53 + 24;
  v127 = (std::__shared_weak_count *)v53;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v140[4]) < 0)
  {
    operator delete(*((void **)&v140[3] + 1));
    if ((SBYTE7(v140[3]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v140[1]) & 0x80000000) == 0)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  else if ((SBYTE7(v140[3]) & 0x80000000) == 0)
  {
    goto LABEL_87;
  }
  operator delete(*(void **)&v140[2]);
  if ((SHIBYTE(v140[1]) & 0x80000000) == 0)
  {
LABEL_88:
    *(_OWORD *)v137 = v124;
    v59 = v125;
    v58 = v126;
    *(_QWORD *)&v137[16] = v125;
    if (!v125)
      goto LABEL_95;
LABEL_93:
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    goto LABEL_95;
  }
LABEL_92:
  operator delete(*((void **)&v140[0] + 1));
  *(_OWORD *)v137 = v124;
  v59 = v125;
  v58 = v126;
  *(_QWORD *)&v137[16] = v125;
  if (v125)
    goto LABEL_93;
LABEL_95:
  v62 = v127;
  *(_QWORD *)&v138 = v58;
  *((_QWORD *)&v138 + 1) = v127;
  if (v127)
  {
    v63 = (unint64_t *)&v127->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    v139 = v58;
    do
      v65 = __ldaxr(v63);
    while (__stlxr(v65 - 1, v63));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  else
  {
    v139 = v58;
  }
  v66 = v125;
  if (v125)
  {
    v67 = (unint64_t *)&v125->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(_QWORD *)v137;
  if (v139[31] >= 0)
    v70 = v139 + 8;
  else
    v70 = (char *)*((_QWORD *)v139 + 1);
  if (v139[55] >= 0)
    v71 = v139 + 32;
  else
    v71 = (char *)*((_QWORD *)v139 + 4);
  if (v139[79] >= 0)
    v72 = v139 + 56;
  else
    v72 = (char *)*((_QWORD *)v139 + 7);
  v73 = _os_log_pack_fill();
  *(_DWORD *)v73 = 68158978;
  *(_DWORD *)(v73 + 4) = 13;
  *(_WORD *)(v73 + 8) = 2080;
  *(_QWORD *)(v73 + 10) = v70;
  *(_WORD *)(v73 + 18) = 1040;
  *(_DWORD *)(v73 + 20) = 13;
  *(_WORD *)(v73 + 24) = 2080;
  *(_QWORD *)(v73 + 26) = v71;
  *(_WORD *)(v73 + 34) = 2048;
  *(_QWORD *)(v73 + 36) = v110;
  *(_WORD *)(v73 + 44) = 2080;
  *(_QWORD *)(v73 + 46) = v72;
  v74 = operator new();
  v75 = *(unsigned __int8 *)(v15 + 39);
  v76 = *(const char **)(v15 + 16);
  v77 = *(_QWORD *)(v15 + 24);
  v78 = v138;
  *(_OWORD *)(v74 + 8) = *(_OWORD *)&v137[8];
  if ((v75 & 0x80u) != 0)
    v75 = v77;
  else
    v76 = v108;
  *(_QWORD *)v74 = v69;
  *(_QWORD *)&v137[8] = 0;
  *(_QWORD *)&v137[16] = 0;
  *(_OWORD *)(v74 + 24) = v78;
  v138 = 0uLL;
  *(_QWORD *)(v74 + 40) = v76;
  *(_QWORD *)(v74 + 48) = v75;
  *(_BYTE *)(v74 + 56) = 1;
  *(_QWORD *)&v124 = 0;
  *(_QWORD *)&v140[0] = v74;
  (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v140);
  v79 = *(_QWORD *)&v140[0];
  *(_QWORD *)&v140[0] = 0;
  if (v79)
  {
    v80 = *(std::__shared_weak_count **)(v79 + 32);
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = *(std::__shared_weak_count **)(v79 + 16);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    MEMORY[0x227684CE8](v79, 0x10F0C40B62ED6C6);
    v86 = v124;
    *(_QWORD *)&v124 = 0;
    if (v86)
    {
      v87 = *(std::__shared_weak_count **)(v86 + 32);
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = *(std::__shared_weak_count **)(v86 + 16);
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MEMORY[0x227684CE8](v86, 0x10F0C40B62ED6C6);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = *(std::__shared_weak_count **)&v137[16];
  if (*(_QWORD *)&v137[16])
  {
    v97 = (unint64_t *)(*(_QWORD *)&v137[16] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
LABEL_153:
  if (v115 < 0)
    operator delete(__p[0]);
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v5)
  {
    sub_2245664AC((unsigned __int8 *)a2, v140);
    sub_2245664AC(v109, v137);
    if (!*(_BYTE *)(a2 + 416))
      sub_22324A974();
    v100 = *(_QWORD **)(a2 + 392);
    v99 = *(_QWORD **)(a2 + 400);
    v124 = 0uLL;
    v125 = 0;
    v101 = 0xAAAAAAAAAAAAAAABLL * (v99 - v100);
    if (v99 == v100)
    {
      v103 = 0;
      v102 = 0uLL;
    }
    else
    {
      if (v101 >> 61)
        sub_22367C394();
      *(_QWORD *)&v124 = operator new(0x5555555555555558 * (v99 - v100));
      *((_QWORD *)&v124 + 1) = v124;
      v125 = (std::__shared_weak_count *)(v124 + 0x5555555555555558 * (v99 - v100));
      __dst = &v124;
      do
      {
        *(_QWORD *)v130 = (uint64_t)(v100[1] - *v100) >> 4;
        sub_2237A4B60((uint64_t *)&__dst, v130);
        v100 += 3;
      }
      while (v100 != v99);
      v102 = v124;
      v103 = v125;
    }
    *(_OWORD *)v133 = v102;
    v134 = v103;
    LODWORD(v126) = 0;
    sub_2237A4914((uint64_t)&__dst, (uint64_t)&v124, (unint64_t **)v133);
    if ((_DWORD)v126 == -1)
      sub_22316DD70();
    __dst = (__int128 *)v130;
    ((void (*)(char *__return_ptr, __int128 **, __int128 *))off_24EC599A8[v126])(__s, &__dst, &v124);
    if ((_DWORD)v126 != -1)
      ((void (*)(__int128 **, __int128 *))off_24EC59990[v126])(&__dst, &v124);
    v104 = __s;
    if (v136 < 0)
      v104 = *(char **)__s;
    sub_22322C138((uint64_t)v116, "KFP %.13s added to KFS %.13s. Polygon extents with %zu fragment(s) and %s outer boundary vertices each.", (const char *)v140, v137, v101, v104);
    if (v136 < 0)
      operator delete(*(void **)__s);
    if (v133[0])
    {
      v133[1] = v133[0];
      operator delete(v133[0]);
    }
    sub_223182C08((uint64_t)v116);
  }
  sub_223182C08((uint64_t)v116);
  v105 = v122;
  if (v122)
  {
    v106 = (unint64_t *)&v122->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_2237BB848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ...)
{
  uint64_t v18;
  va_list va;

  va_start(va, a18);
  if (*(_BYTE *)(v18 - 168) && *(char *)(v18 - 169) < 0)
    operator delete(*(void **)(v18 - 192));
  __cxa_guard_abort(&qword_255788F58);
  if (a18 < 0)
    operator delete(__p);
  if (a10)
  {
    operator delete(a10);
    sub_223182DAC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BBAF8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC5A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5A0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC598);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC5A0);
  }
  *a1 = qword_2540CC598;
}

void sub_2237BBB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5A0);
  _Unwind_Resume(a1);
}

void sub_2237BBBEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  size_t v32;
  size_t v33;
  _QWORD *p_dst;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  size_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  const char *__src;
  _QWORD v90[3];
  int v91;
  const char *v92;
  int v93;
  const char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  char *v100;
  std::__shared_weak_count *v101;
  _QWORD *v102;
  __int128 v103;
  _QWORD *__dst;
  __int128 v105;
  char v106[37];
  char __s[37];
  uint64_t v108;
  _BYTE v109[48];
  unint64_t v110;
  char v111;
  _BYTE v112[24];
  __int128 v113;
  char *v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  sub_2237BBAF8(&v97);
  if (**(int **)(v97 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v97 + 72);
  v6 = sub_22322F254(v97, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v90[0] = &v97;
  v90[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v90[2] = std::chrono::system_clock::now().__d_.__rep_;
  v91 = 3;
  v92 = "unknown file";
  v93 = 47;
  v95 = 0;
  v96 = 0;
  v94 = "unknown function";
  sub_2245664AC(a2, __s);
  v9 = (unsigned __int8 *)(a3 + 216);
  sub_2245664AC((unsigned __int8 *)(a3 + 216), v106);
  v10 = v97;
  if (*(char *)(v97 + 39) < 0)
  {
    v12 = *(const char **)(v97 + 16);
    v11 = *(_QWORD *)(v97 + 24);
    v88 = *(_QWORD *)v90[0] + 16;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v97 + 39);
    v12 = (const char *)(*(_QWORD *)v90[0] + 16);
    v88 = (uint64_t)v12;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v108);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v108, &xmmword_255788F40);
    if (v109[16] && (v109[15] & 0x80000000) != 0)
      operator delete((void *)v108);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v12;
  v108 = (uint64_t)os_log_create(v15, v12);
  v17 = v109;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = v8;
    v19 = v10;
    v20 = v9;
    v21 = a2;
    v22 = v5;
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    v17 = operator new(v23 + 1);
    *(_QWORD *)&v109[8] = v16;
    *(_QWORD *)&v109[16] = v24 | 0x8000000000000000;
    *(_QWORD *)v109 = v17;
    v5 = v22;
    a2 = v21;
    v9 = v20;
    v10 = v19;
    v8 = v18;
    goto LABEL_23;
  }
  v109[23] = v16;
  if (v16)
LABEL_23:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  v109[24] = 1;
  v25 = &v109[32];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v27 = v11 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    *(_QWORD *)&v109[40] = v11;
    v110 = v28 | 0x8000000000000000;
    *(_QWORD *)&v109[32] = v25;
  }
  else
  {
    HIBYTE(v110) = v11;
    if (!v11)
    {
      v109[32] = 0;
      v111 = 1;
      v26 = v108;
      if ((SHIBYTE(v110) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v25, __src, v11);
  v25[v11] = 0;
  v111 = 1;
  v26 = v108;
  if ((SHIBYTE(v110) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v109[24])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&v109[32]);
  if (!v109[24])
    goto LABEL_37;
LABEL_35:
  if ((v109[23] & 0x80000000) != 0)
    operator delete(*(void **)v109);
LABEL_37:
  if (v108)
    os_release((void *)v108);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    v108 = 0xD04100402;
    *(_WORD *)v109 = 2080;
    *(_QWORD *)&v109[2] = __s;
    *(_WORD *)&v109[10] = 1040;
    *(_DWORD *)&v109[12] = 13;
    *(_WORD *)&v109[16] = 2080;
    *(_QWORD *)&v109[18] = v106;
    v35 = (void *)_os_log_send_and_compose_impl();
    if (v35)
      free(v35);
    goto LABEL_126;
  }
  v29 = _os_log_pack_size();
  v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
  v31 = (std::__shared_weak_count *)operator new();
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = v30;
  *(_QWORD *)&v98 = v30;
  *((_QWORD *)&v98 + 1) = v30;
  v100 = 0;
  v101 = 0;
  v99 = v31;
  v32 = strlen(__s);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v36 = v32 | 7;
    v37 = v36 + 1;
    p_dst = operator new(v36 + 1);
    *(_QWORD *)&v105 = v33;
    *((_QWORD *)&v105 + 1) = v37 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v105) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_50:
    memcpy(p_dst, __s, v33);
  *((_BYTE *)p_dst + v33) = 0;
  v38 = strlen(v106);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&v103 = v39;
    *((_QWORD *)&v103 + 1) = v42 | 0x8000000000000000;
    v102 = v40;
  }
  else
  {
    HIBYTE(v103) = v38;
    v40 = &v102;
    if (!v38)
      goto LABEL_59;
  }
  memcpy(v40, v106, v39);
LABEL_59:
  *((_BYTE *)v40 + v39) = 0;
  *(_QWORD *)v109 = __dst;
  *(_QWORD *)&v109[8] = v105;
  *(_QWORD *)&v109[15] = *(_QWORD *)((char *)&v105 + 7);
  *(_QWORD *)&v109[24] = v102;
  *(_QWORD *)&v109[32] = v103;
  *(_QWORD *)&v109[39] = *(_QWORD *)((char *)&v103 + 7);
  v108 = (uint64_t)off_24EC20780;
  v109[23] = HIBYTE(v105);
  v109[47] = HIBYTE(v103);
  v43 = (char *)operator new(0x50uLL);
  *((_QWORD *)v43 + 3) = off_24EC20780;
  *((_QWORD *)v43 + 1) = 0;
  *((_QWORD *)v43 + 2) = 0;
  *(_QWORD *)v43 = &off_24EC20730;
  *((_OWORD *)v43 + 2) = *(_OWORD *)v109;
  *((_QWORD *)v43 + 6) = *(_QWORD *)&v109[16];
  memset(v109, 0, 24);
  *(_OWORD *)(v43 + 56) = *(_OWORD *)&v109[24];
  *((_QWORD *)v43 + 9) = *(_QWORD *)&v109[40];
  memset(&v109[24], 0, 24);
  v44 = v101;
  v100 = v43 + 24;
  v101 = (std::__shared_weak_count *)v43;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if ((v109[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v109[24]);
    if ((v109[23] & 0x80000000) == 0)
    {
LABEL_66:
      *(_OWORD *)v112 = v98;
      v48 = v99;
      v47 = v100;
      *(_QWORD *)&v112[16] = v99;
      if (!v99)
        goto LABEL_72;
LABEL_70:
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      goto LABEL_72;
    }
  }
  else if ((v109[23] & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(*(void **)v109);
  *(_OWORD *)v112 = v98;
  v48 = v99;
  v47 = v100;
  *(_QWORD *)&v112[16] = v99;
  if (v99)
    goto LABEL_70;
LABEL_72:
  v51 = v101;
  *(_QWORD *)&v113 = v47;
  *((_QWORD *)&v113 + 1) = v101;
  if (v101)
  {
    v52 = (unint64_t *)&v101->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    v114 = v47;
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  else
  {
    v114 = v47;
  }
  v55 = v99;
  if (v99)
  {
    v56 = (unint64_t *)&v99->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = *(_QWORD *)v112;
  if (v114[31] >= 0)
    v59 = v114 + 8;
  else
    v59 = (char *)*((_QWORD *)v114 + 1);
  if (v114[55] >= 0)
    v60 = v114 + 32;
  else
    v60 = (char *)*((_QWORD *)v114 + 4);
  v61 = _os_log_pack_fill();
  *(_DWORD *)v61 = 68158466;
  *(_DWORD *)(v61 + 4) = 13;
  *(_WORD *)(v61 + 8) = 2080;
  *(_QWORD *)(v61 + 10) = v59;
  *(_WORD *)(v61 + 18) = 1040;
  *(_DWORD *)(v61 + 20) = 13;
  *(_WORD *)(v61 + 24) = 2080;
  *(_QWORD *)(v61 + 26) = v60;
  v62 = (char *)operator new();
  v63 = *(unsigned __int8 *)(v10 + 39);
  v64 = v88;
  if ((v63 & 0x80u) != 0)
  {
    v64 = *(_QWORD *)(v10 + 16);
    v63 = *(_QWORD *)(v10 + 24);
  }
  *(_QWORD *)v62 = v58;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)&v112[8];
  *(_QWORD *)&v112[8] = 0;
  *(_QWORD *)&v112[16] = 0;
  *(_OWORD *)(v62 + 24) = v113;
  v113 = 0uLL;
  *((_QWORD *)v62 + 5) = v64;
  *((_QWORD *)v62 + 6) = v63;
  v62[56] = 1;
  *(_QWORD *)&v98 = 0;
  v108 = (uint64_t)v62;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v108);
  v65 = v108;
  v108 = 0;
  if (v65)
  {
    v66 = *(std::__shared_weak_count **)(v65 + 32);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = *(std::__shared_weak_count **)(v65 + 16);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
    v72 = v98;
    *(_QWORD *)&v98 = 0;
    if (v72)
    {
      v73 = *(std::__shared_weak_count **)(v72 + 32);
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = *(std::__shared_weak_count **)(v72 + 16);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      MEMORY[0x227684CE8](v72, 0x10F0C40B62ED6C6);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v112[16];
  if (*(_QWORD *)&v112[16])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v112[16] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_126:
  if (v5)
  {
    sub_2245664AC(a2, &v108);
    sub_2245664AC(v9, v112);
    sub_22322C138((uint64_t)v90, "KFP %.13s in KFS %.13s will be removed", (const char *)&v108, v112);
    sub_223182C08((uint64_t)v90);
  }
  sub_223182C08((uint64_t)v90);
  v85 = v96;
  if (v96)
  {
    v86 = (unint64_t *)&v96->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_2237BC668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 216))
  {
    if (*(char *)(v5 - 217) < 0)
      operator delete(*(void **)(v5 - 240));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BC6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 240));
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8(v5 - 160);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BC6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  sub_2231A87A4(v37 - 240);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237BC74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BC778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 208) && *(char *)(v5 - 209) < 0)
    operator delete(*(void **)(v5 - 232));
  v7 = *(void **)(v5 - 240);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BC7D4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v7;
  unint64_t v8;
  unint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 *v29;
  const char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  size_t v37;
  size_t v38;
  __int128 **p_dst;
  int v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  int v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  char *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  const char *v115;
  unsigned __int8 *v116;
  int v117;
  unint64_t v118;
  void *v119[2];
  uint64_t v120;
  void *__p[2];
  char v122;
  _QWORD v123[3];
  int v124;
  const char *v125;
  int v126;
  const char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  char *v133;
  std::__shared_weak_count *v134;
  _QWORD *v135;
  __int128 v136;
  _BYTE v137[24];
  __int128 *__dst;
  __int128 v139;
  char __src[16];
  std::__shared_weak_count *v141;
  char __s[8];
  char v143;
  _BYTE v144[24];
  __int128 v145;
  char *v146;
  _OWORD v147[5];
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  sub_2237BBAF8(&v130);
  if (**(int **)(v130 + 56) > 3)
    return;
  v7 = *(unsigned __int8 *)(v130 + 72);
  v8 = sub_22322F254(v130, "OSLogSurrogateAppender", 1, 0);
  if (!v7 && v8 == 0)
    return;
  v10 = v8;
  v123[0] = &v130;
  v123[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v123[2] = std::chrono::system_clock::now().__d_.__rep_;
  v124 = 3;
  v125 = "unknown file";
  v126 = 62;
  v128 = 0;
  v129 = 0;
  v127 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a2, __s);
  v11 = (unsigned __int8 *)(a4 + 216);
  sub_2245664AC((unsigned __int8 *)(a4 + 216), __src);
  if (!*(_BYTE *)(a2 + 416))
    sub_22324A974();
  v13 = *(_QWORD **)(a2 + 392);
  v12 = *(_QWORD **)(a2 + 400);
  memset(v147, 0, 24);
  v14 = 0xAAAAAAAAAAAAAAABLL * (v12 - v13);
  if (v12 == v13)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v14 >> 61)
      sub_22367C394();
    *(_QWORD *)&v147[0] = operator new(0x5555555555555558 * (v12 - v13));
    *((_QWORD *)&v147[0] + 1) = *(_QWORD *)&v147[0];
    *(_QWORD *)&v147[1] = *(_QWORD *)&v147[0] + 0x5555555555555558 * (v12 - v13);
    *(_QWORD *)v144 = v147;
    do
    {
      *(_QWORD *)&v131 = (uint64_t)(v13[1] - *v13) >> 4;
      sub_2237A4B60((uint64_t *)v144, &v131);
      v13 += 3;
    }
    while (v13 != v12);
    v15 = v147[0];
    v16 = *(_QWORD *)&v147[1];
  }
  *(_OWORD *)v119 = v15;
  v120 = v16;
  DWORD2(v147[1]) = 0;
  sub_2237A4914((uint64_t)v144, (uint64_t)v147, (unint64_t **)v119);
  if (DWORD2(v147[1]) == -1)
    sub_22316DD70();
  *(_QWORD *)v144 = &v131;
  ((void (*)(void **__return_ptr, _BYTE *, _OWORD *))off_24EC599A8[DWORD2(v147[1])])(__p, v144, v147);
  if (DWORD2(v147[1]) != -1)
    ((void (*)(_BYTE *, _OWORD *))off_24EC59990[DWORD2(v147[1])])(v144, v147);
  v118 = v14;
  if (v122 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = *(_QWORD *)v123[0];
  v19 = (const char *)(*(_QWORD *)v123[0] + 16);
  v114 = *(_QWORD *)v123[0];
  v115 = v19;
  if (*(char *)(*(_QWORD *)v123[0] + 39) < 0)
  {
    v19 = *(const char **)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    v116 = v11;
    v117 = v7;
    v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v22 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v20 = *(unsigned __int8 *)(*(_QWORD *)v123[0] + 39);
    v116 = v11;
    v117 = v7;
    v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v21 & 1) != 0)
      goto LABEL_23;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v147);
    sub_223199C58("com.apple.cv3d", (unint64_t)v147, &xmmword_255788F40);
    if (BYTE8(v147[1]) && SBYTE7(v147[1]) < 0)
      operator delete(*(void **)&v147[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_23:
  if (byte_255788F57 >= 0)
    v23 = (const char *)&xmmword_255788F40;
  else
    v23 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v24 = byte_255788F57;
  else
    v24 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)&v147[0] = os_log_create(v23, v19);
  v25 = (char *)v147 + 8;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v24 >= 0x17)
  {
    v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v26 = v24 | 7;
    v27 = v26 + 1;
    v25 = (char *)operator new(v26 + 1);
    *(_QWORD *)&v147[1] = v24;
    *((_QWORD *)&v147[1] + 1) = v27 | 0x8000000000000000;
    *((_QWORD *)&v147[0] + 1) = v25;
    goto LABEL_36;
  }
  HIBYTE(v147[1]) = v24;
  if (v24)
LABEL_36:
    memmove(v25, v23, v24);
  v25[v24] = 0;
  LOBYTE(v147[2]) = 1;
  v28 = (char *)&v147[2] + 8;
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v29 = a3;
  if (v20 >= 0x17)
  {
    v32 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v32 = v20 | 7;
    v33 = v32 + 1;
    v28 = (char *)operator new(v32 + 1);
    v30 = (const char *)v17;
    *(_QWORD *)&v147[3] = v20;
    *((_QWORD *)&v147[3] + 1) = v33 | 0x8000000000000000;
    *((_QWORD *)&v147[2] + 1) = v28;
  }
  else
  {
    HIBYTE(v147[3]) = v20;
    v30 = (const char *)v17;
    if (!v20)
    {
      BYTE8(v147[2]) = 0;
      LOBYTE(v147[4]) = 1;
      v31 = *(NSObject **)&v147[0];
      if ((SHIBYTE(v147[3]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_47;
    }
  }
  memmove(v28, v19, v20);
  v28[v20] = 0;
  LOBYTE(v147[4]) = 1;
  v31 = *(NSObject **)&v147[0];
  if ((SHIBYTE(v147[3]) & 0x80000000) == 0)
  {
LABEL_41:
    if (!LOBYTE(v147[2]))
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(*((void **)&v147[2] + 1));
  if (!LOBYTE(v147[2]))
    goto LABEL_50;
LABEL_48:
  if (SHIBYTE(v147[1]) < 0)
    operator delete(*((void **)&v147[0] + 1));
LABEL_50:
  if (*(_QWORD *)&v147[0])
    os_release(*(void **)&v147[0]);
  if (!v10 || !*(_QWORD *)(v10 + 24))
  {
    os_log_type_enabled(v31, OS_LOG_TYPE_INFO);
    v40 = *v29;
    v41 = v29[1];
    *(_QWORD *)&v147[0] = 0xD04100802;
    WORD4(v147[0]) = 2080;
    *(_QWORD *)((char *)v147 + 10) = __s;
    WORD1(v147[1]) = 1040;
    DWORD1(v147[1]) = 13;
    WORD4(v147[1]) = 2080;
    *(_QWORD *)((char *)&v147[1] + 10) = __src;
    WORD1(v147[2]) = 1024;
    DWORD1(v147[2]) = v40;
    WORD4(v147[2]) = 1024;
    *(_DWORD *)((char *)&v147[2] + 10) = v41;
    HIWORD(v147[2]) = 2048;
    *(_QWORD *)&v147[3] = v118;
    WORD4(v147[3]) = 2080;
    *(_QWORD *)((char *)&v147[3] + 10) = v30;
    v42 = (void *)_os_log_send_and_compose_impl();
    if (v42)
      free(v42);
    goto LABEL_153;
  }
  v34 = _os_log_pack_size();
  v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
  v36 = (std::__shared_weak_count *)operator new();
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = v35;
  *(_QWORD *)&v131 = v35;
  *((_QWORD *)&v131 + 1) = v35;
  v133 = 0;
  v134 = 0;
  v132 = v36;
  v37 = strlen(__s);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v43 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v43 = v37 | 7;
    v44 = v43 + 1;
    p_dst = (__int128 **)operator new(v43 + 1);
    *(_QWORD *)&v139 = v38;
    *((_QWORD *)&v139 + 1) = v44 | 0x8000000000000000;
    __dst = (__int128 *)p_dst;
    goto LABEL_63;
  }
  HIBYTE(v139) = v37;
  p_dst = &__dst;
  if (v37)
LABEL_63:
    memcpy(p_dst, __s, v38);
  *((_BYTE *)p_dst + v38) = 0;
  v45 = strlen(__src);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    *(_QWORD *)&v137[8] = v46;
    *(_QWORD *)&v137[16] = v49 | 0x8000000000000000;
    *(_QWORD *)v137 = v47;
    goto LABEL_71;
  }
  v137[23] = v45;
  v47 = v137;
  if (v45)
LABEL_71:
    memcpy(v47, __src, v46);
  v47[v46] = 0;
  v50 = strlen(v30);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v51 = v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    v52 = operator new(v53 + 1);
    *(_QWORD *)&v136 = v51;
    *((_QWORD *)&v136 + 1) = v54 | 0x8000000000000000;
    v135 = v52;
  }
  else
  {
    HIBYTE(v136) = v50;
    v52 = &v135;
    if (!v50)
      goto LABEL_80;
  }
  memcpy(v52, v30, v51);
LABEL_80:
  *((_BYTE *)v52 + v51) = 0;
  *((_QWORD *)&v147[0] + 1) = __dst;
  *(_QWORD *)&v147[1] = v139;
  *(_QWORD *)((char *)&v147[1] + 7) = *(_QWORD *)((char *)&v139 + 7);
  v147[2] = *(_OWORD *)v137;
  *(_QWORD *)((char *)&v147[2] + 15) = *(_QWORD *)&v137[15];
  *(_QWORD *)((char *)&v147[4] + 7) = *(_QWORD *)((char *)&v136 + 7);
  *(_QWORD *)&v147[0] = off_24EC59A20;
  HIBYTE(v147[1]) = HIBYTE(v139);
  BYTE7(v147[3]) = v137[23];
  *((_QWORD *)&v147[3] + 1) = v135;
  *(_QWORD *)&v147[4] = v136;
  HIBYTE(v147[4]) = HIBYTE(v136);
  v55 = (char *)operator new(0x68uLL);
  *((_QWORD *)v55 + 1) = 0;
  *((_QWORD *)v55 + 2) = 0;
  *(_QWORD *)v55 = &off_24EC599D0;
  *((_QWORD *)v55 + 3) = off_24EC59A20;
  *((_OWORD *)v55 + 2) = *(_OWORD *)((char *)v147 + 8);
  *((_QWORD *)v55 + 6) = *((_QWORD *)&v147[1] + 1);
  memset((char *)v147 + 8, 0, 24);
  *(_OWORD *)(v55 + 56) = v147[2];
  *((_QWORD *)v55 + 9) = *(_QWORD *)&v147[3];
  memset(&v147[2], 0, 24);
  v56 = *(_OWORD *)((char *)&v147[3] + 8);
  *((_QWORD *)v55 + 12) = *((_QWORD *)&v147[4] + 1);
  *((_OWORD *)v55 + 5) = v56;
  memset((char *)&v147[3] + 8, 0, 24);
  v57 = v134;
  v133 = v55 + 24;
  v134 = (std::__shared_weak_count *)v55;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v147[4]) < 0)
  {
    operator delete(*((void **)&v147[3] + 1));
    if ((SBYTE7(v147[3]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v147[1]) & 0x80000000) == 0)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  else if ((SBYTE7(v147[3]) & 0x80000000) == 0)
  {
    goto LABEL_87;
  }
  operator delete(*(void **)&v147[2]);
  if ((SHIBYTE(v147[1]) & 0x80000000) == 0)
  {
LABEL_88:
    *(_OWORD *)v144 = v131;
    v61 = v132;
    v60 = v133;
    *(_QWORD *)&v144[16] = v132;
    if (!v132)
      goto LABEL_95;
LABEL_93:
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    goto LABEL_95;
  }
LABEL_92:
  operator delete(*((void **)&v147[0] + 1));
  *(_OWORD *)v144 = v131;
  v61 = v132;
  v60 = v133;
  *(_QWORD *)&v144[16] = v132;
  if (v132)
    goto LABEL_93;
LABEL_95:
  v64 = v134;
  *(_QWORD *)&v145 = v60;
  *((_QWORD *)&v145 + 1) = v134;
  if (v134)
  {
    v65 = (unint64_t *)&v134->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v146 = v60;
    do
      v67 = __ldaxr(v65);
    while (__stlxr(v67 - 1, v65));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  else
  {
    v146 = v60;
  }
  v68 = v132;
  if (v132)
  {
    v69 = (unint64_t *)&v132->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = *(_QWORD *)v144;
  if (v146[31] >= 0)
    v72 = v146 + 8;
  else
    v72 = (char *)*((_QWORD *)v146 + 1);
  if (v146[55] >= 0)
    v73 = v146 + 32;
  else
    v73 = (char *)*((_QWORD *)v146 + 4);
  if (v146[79] >= 0)
    v74 = v146 + 56;
  else
    v74 = (char *)*((_QWORD *)v146 + 7);
  v75 = _os_log_pack_fill();
  v76 = *v29;
  v77 = v29[1];
  *(_DWORD *)v75 = 68159490;
  *(_DWORD *)(v75 + 4) = 13;
  *(_WORD *)(v75 + 8) = 2080;
  *(_QWORD *)(v75 + 10) = v72;
  *(_WORD *)(v75 + 18) = 1040;
  *(_DWORD *)(v75 + 20) = 13;
  *(_WORD *)(v75 + 24) = 2080;
  *(_QWORD *)(v75 + 26) = v73;
  *(_WORD *)(v75 + 34) = 1024;
  *(_DWORD *)(v75 + 36) = v76;
  *(_WORD *)(v75 + 40) = 1024;
  *(_DWORD *)(v75 + 42) = v77;
  *(_WORD *)(v75 + 46) = 2048;
  *(_QWORD *)(v75 + 48) = v118;
  *(_WORD *)(v75 + 56) = 2080;
  *(_QWORD *)(v75 + 58) = v74;
  v78 = operator new();
  v79 = *(unsigned __int8 *)(v114 + 39);
  v80 = *(const char **)(v114 + 16);
  v81 = *(_QWORD *)(v114 + 24);
  v82 = v145;
  *(_OWORD *)(v78 + 8) = *(_OWORD *)&v144[8];
  if ((v79 & 0x80u) != 0)
    v79 = v81;
  else
    v80 = v115;
  *(_QWORD *)v78 = v71;
  *(_QWORD *)&v144[8] = 0;
  *(_QWORD *)&v144[16] = 0;
  *(_OWORD *)(v78 + 24) = v82;
  v145 = 0uLL;
  *(_QWORD *)(v78 + 40) = v80;
  *(_QWORD *)(v78 + 48) = v79;
  *(_BYTE *)(v78 + 56) = 1;
  *(_QWORD *)&v131 = 0;
  *(_QWORD *)&v147[0] = v78;
  (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), v147);
  v83 = *(_QWORD *)&v147[0];
  *(_QWORD *)&v147[0] = 0;
  if (v83)
  {
    v84 = *(std::__shared_weak_count **)(v83 + 32);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = *(std::__shared_weak_count **)(v83 + 16);
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
    v90 = v131;
    *(_QWORD *)&v131 = 0;
    if (v90)
    {
      v91 = *(std::__shared_weak_count **)(v90 + 32);
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = *(std::__shared_weak_count **)(v90 + 16);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(std::__shared_weak_count **)&v144[16];
  if (*(_QWORD *)&v144[16])
  {
    v101 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_153:
  if (v122 < 0)
    operator delete(__p[0]);
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  if (v117)
  {
    sub_2245664AC((unsigned __int8 *)a2, v147);
    sub_2245664AC(v116, v144);
    if (!*(_BYTE *)(a2 + 416))
      sub_22324A974();
    v103 = *v29;
    v104 = v29[1];
    v106 = *(_QWORD **)(a2 + 392);
    v105 = *(_QWORD **)(a2 + 400);
    v131 = 0uLL;
    v132 = 0;
    v107 = 0xAAAAAAAAAAAAAAABLL * (v105 - v106);
    if (v105 == v106)
    {
      v109 = 0;
      v108 = 0uLL;
    }
    else
    {
      if (v107 >> 61)
        sub_22367C394();
      *(_QWORD *)&v131 = operator new(0x5555555555555558 * (v105 - v106));
      *((_QWORD *)&v131 + 1) = v131;
      v132 = (std::__shared_weak_count *)(v131 + 0x5555555555555558 * (v105 - v106));
      __dst = &v131;
      do
      {
        *(_QWORD *)v137 = (uint64_t)(v106[1] - *v106) >> 4;
        sub_2237A4B60((uint64_t *)&__dst, v137);
        v106 += 3;
      }
      while (v106 != v105);
      v108 = v131;
      v109 = v132;
    }
    *(_OWORD *)__src = v108;
    v141 = v109;
    LODWORD(v133) = 0;
    sub_2237A4914((uint64_t)&__dst, (uint64_t)&v131, (unint64_t **)__src);
    if ((_DWORD)v133 == -1)
      sub_22316DD70();
    __dst = (__int128 *)v137;
    ((void (*)(char *__return_ptr, __int128 **, __int128 *))off_24EC599A8[v133])(__s, &__dst, &v131);
    if ((_DWORD)v133 != -1)
      ((void (*)(__int128 **, __int128 *))off_24EC59990[v133])(&__dst, &v131);
    v110 = __s;
    if (v143 < 0)
      v110 = *(char **)__s;
    sub_22322C138((uint64_t)v123, "KFP %.13s in KFS %.13s modified (pose: %d, content: %d). Polygon extents with %zu fragment(s) and %s outer boundary vertices each.", (const char *)v147, v144, v103, v104, v107, v110);
    if (v143 < 0)
      operator delete(*(void **)__s);
    if (*(_QWORD *)__src)
    {
      *(_QWORD *)&__src[8] = *(_QWORD *)__src;
      operator delete(*(void **)__src);
    }
    sub_223182C08((uint64_t)v123);
  }
  sub_223182C08((uint64_t)v123);
  v111 = v129;
  if (v129)
  {
    v112 = (unint64_t *)&v129->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_2237BD638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 168) && *(char *)(v30 - 169) < 0)
    operator delete(*(void **)(v30 - 192));
  __cxa_guard_abort(&qword_255788F58);
  if (a29 < 0)
    operator delete(__p);
  if (a21)
  {
    operator delete(a21);
    sub_223182DAC((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_2237BD8E8(uint64_t a1, _QWORD *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  int v69;
  const char *v70;
  int v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE object[24];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  sub_2237BBAF8(&v75);
  if (**(int **)(v75 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v75 + 72);
  v4 = sub_22322F254(v75, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v68[0] = &v75;
  v68[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v68[2] = std::chrono::system_clock::now().__d_.__rep_;
  v69 = 3;
  v70 = "unknown file";
  v71 = 69;
  v73 = 0;
  v74 = 0;
  v72 = "unknown function";
  v7 = v75;
  if (*(char *)(v75 + 39) < 0)
  {
    v9 = *(const char **)(v75 + 16);
    v8 = *(_QWORD *)(v75 + 24);
  }
  else
  {
    v8 = *(unsigned __int8 *)(v75 + 39);
    v9 = (const char *)(*(_QWORD *)v68[0] + 16);
  }
  v63 = *(_QWORD *)v68[0] + 16;
  v64 = a2[1];
  v67 = a2[3];
  v65 = *a2;
  v66 = a2[4];
  v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v79 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v11 = (const char *)&xmmword_255788F40;
  else
    v11 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v12 = byte_255788F57;
  else
    v12 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v11, v9);
  v13 = &object[8];
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v14 = v6;
    v15 = a2;
    v16 = v9;
    v17 = v7;
    v18 = v3;
    v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v19 = v12 | 7;
    v20 = v19 + 1;
    v13 = operator new(v19 + 1);
    *(_QWORD *)&object[16] = v12;
    *(_QWORD *)&v79 = v20 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v13;
    v3 = v18;
    v7 = v17;
    v9 = v16;
    a2 = v15;
    v6 = v14;
    goto LABEL_23;
  }
  BYTE7(v79) = v12;
  if (v12)
LABEL_23:
    memmove(v13, v11, v12);
  v13[v12] = 0;
  BYTE8(v79) = 1;
  v21 = __p;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v24 = v8 | 7;
    v25 = v24 + 1;
    v21 = operator new(v24 + 1);
    __p[1] = (void *)v8;
    v81 = v25 | 0x8000000000000000;
    __p[0] = v21;
  }
  else
  {
    HIBYTE(v81) = v8;
    if (!v8)
    {
      LOBYTE(__p[0]) = 0;
      v82 = 1;
      v22 = *(NSObject **)object;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v21, v9, v8);
  *((_BYTE *)v21 + v8) = 0;
  v82 = 1;
  v22 = *(NSObject **)object;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_28:
    v23 = v67;
    if (!BYTE8(v79))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v79) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  v23 = v67;
  if (BYTE8(v79))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v26 = v66 - v23;
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    *(_QWORD *)object = v28;
    *(_QWORD *)&object[8] = v28;
    *(_QWORD *)&object[16] = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v79 = 0uLL;
    __p[0] = 0;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = *(_QWORD *)object;
    v35 = _os_log_pack_fill();
    *(_DWORD *)v35 = 134218496;
    *(_QWORD *)(v35 + 4) = v67;
    *(_WORD *)(v35 + 12) = 2048;
    *(_QWORD *)(v35 + 14) = v26;
    *(_WORD *)(v35 + 22) = 2048;
    *(_QWORD *)(v35 + 24) = ((v64 - v65) >> 4) - v66;
    v36 = operator new();
    v37 = *(unsigned __int8 *)(v7 + 39);
    v38 = v63;
    if ((v37 & 0x80u) != 0)
    {
      v38 = *(_QWORD *)(v7 + 16);
      v37 = *(_QWORD *)(v7 + 24);
    }
    *(_QWORD *)v36 = v34;
    *(_OWORD *)(v36 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v36 + 24) = v79;
    v79 = 0uLL;
    *(_QWORD *)(v36 + 40) = v38;
    *(_QWORD *)(v36 + 48) = v37;
    *(_BYTE *)(v36 + 56) = 1;
    v76 = 0;
    v77 = v36;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v77);
    v39 = v77;
    v77 = 0;
    if (v39)
    {
      v40 = *(std::__shared_weak_count **)(v39 + 32);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = *(std::__shared_weak_count **)(v39 + 16);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      MEMORY[0x227684CE8](v39, 0x10F0C40B62ED6C6);
      v46 = v76;
      v76 = 0;
      if (v46)
      {
        v47 = *(std::__shared_weak_count **)(v46 + 32);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = *(std::__shared_weak_count **)(v46 + 16);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  else
  {
    os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v23;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v66 - v23;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&v79 = ((v64 - v65) >> 4) - v66;
    v59 = (void *)_os_log_send_and_compose_impl();
    if (v59)
      free(v59);
  }
  if (v3)
  {
    sub_22322C138((uint64_t)v68, "KFP update complete. Added/Modified/Removed/Total KFS: %zu/%zu/%zu", a2[3], a2[4] - a2[3], ((uint64_t)(a2[1] - *a2) >> 4) - a2[4]);
    sub_223182C08((uint64_t)v68);
  }
  sub_223182C08((uint64_t)v68);
  v60 = v74;
  if (v74)
  {
    v61 = (unint64_t *)&v74->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_2237BE094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237BE0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237BE108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BE134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BE148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BE15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BE170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237BE1D8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237BE1EC(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2237BE25C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC599D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2237BE26C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC599D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237BE29C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 32));
      return;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
}

void sub_2237BE304(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x227684CE8);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_2237BE380(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  size_t v28;
  _QWORD *p_dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  char *v90;
  std::__shared_weak_count *v91;
  _QWORD *__dst;
  __int128 v93;
  char __s[37];
  _BYTE v95[24];
  __int128 v96;
  void *v97[2];
  unint64_t v98;
  char v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  sub_2237BEDC0(&v87);
  if (**(int **)(v87 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v87 + 72);
  v4 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v80[0] = &v87;
  v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v80[2] = std::chrono::system_clock::now().__d_.__rep_;
  v81 = 3;
  v82 = "unknown file";
  v83 = 34;
  v85 = 0;
  v86 = 0;
  v7 = (unsigned __int8 *)(a2 + 216);
  v84 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
  v8 = v87;
  v9 = (const char *)(v87 + 16);
  v79 = v87 + 16;
  if (*(char *)(v87 + 39) < 0)
  {
    v9 = *(const char **)(v87 + 16);
    v10 = *(_QWORD *)(v87 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v87 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v95);
    sub_223199C58("com.apple.cv3d", (unint64_t)v95, &xmmword_255788F40);
    if ((_BYTE)v96 && (v95[23] & 0x80000000) != 0)
      operator delete(*(void **)v95);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v95 = os_log_create(v13, v9);
  v15 = &v95[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v3;
    v17 = v7;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = operator new(v18 + 1);
    *(_QWORD *)&v95[16] = v14;
    *(_QWORD *)&v96 = v19 | 0x8000000000000000;
    *(_QWORD *)&v95[8] = v15;
    v7 = v17;
    v3 = v16;
    goto LABEL_23;
  }
  BYTE7(v96) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v96) = 1;
  v20 = v97;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    v97[1] = (void *)v10;
    v98 = v23 | 0x8000000000000000;
    v97[0] = v20;
  }
  else
  {
    HIBYTE(v98) = v10;
    if (!v10)
    {
      LOBYTE(v97[0]) = 0;
      v99 = 1;
      v21 = *(NSObject **)v95;
      if ((SHIBYTE(v98) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v10);
  *((_BYTE *)v20 + v10) = 0;
  v99 = 1;
  v21 = *(NSObject **)v95;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v96))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v97[0]);
  if (!BYTE8(v96))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v96) < 0)
    operator delete(*(void **)&v95[8]);
LABEL_37:
  if (*(_QWORD *)v95)
    os_release(*(void **)v95);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_QWORD *)v95 = 0xD04100202;
    *(_WORD *)&v95[8] = 2080;
    *(_QWORD *)&v95[10] = __s;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (v30)
      free(v30);
    goto LABEL_110;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  *(_QWORD *)&v88 = v25;
  *((_QWORD *)&v88 + 1) = v25;
  v90 = 0;
  v91 = 0;
  v89 = v26;
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    *(_QWORD *)&v93 = v28;
    *((_QWORD *)&v93 + 1) = v32 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v93) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_50:
    memcpy(p_dst, __s, v28);
  *((_BYTE *)p_dst + v28) = 0;
  v33 = __dst;
  v100[0] = v93;
  *(_QWORD *)((char *)v100 + 7) = *(_QWORD *)((char *)&v93 + 7);
  v34 = HIBYTE(v93);
  v35 = operator new(0x38uLL);
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = off_24EC1FA48;
  *v35 = &off_24EC1F9F8;
  v36 = v100[0];
  v35[4] = v33;
  v35[5] = v36;
  *(_QWORD *)((char *)v35 + 47) = *(_QWORD *)((char *)v100 + 7);
  *((_BYTE *)v35 + 55) = v34;
  v100[0] = 0;
  *(_QWORD *)((char *)v100 + 7) = 0;
  v37 = v91;
  v90 = (char *)(v35 + 3);
  v91 = (std::__shared_weak_count *)v35;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)v95 = v88;
  v40 = v90;
  *(_QWORD *)&v95[16] = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v91;
  *(_QWORD *)&v96 = v40;
  *((_QWORD *)&v96 + 1) = v91;
  if (v91)
  {
    v44 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v97[0] = v40;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v97[0] = v40;
  }
  v47 = v89;
  if (v89)
  {
    v48 = (unint64_t *)&v89->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)v95;
  if (*((char *)v97[0] + 31) >= 0)
    v51 = (char *)v97[0] + 8;
  else
    v51 = (char *)*((_QWORD *)v97[0] + 1);
  v52 = _os_log_pack_fill();
  *(_DWORD *)v52 = 68157954;
  *(_DWORD *)(v52 + 4) = 13;
  *(_WORD *)(v52 + 8) = 2080;
  *(_QWORD *)(v52 + 10) = v51;
  v53 = operator new();
  v54 = *(unsigned __int8 *)(v8 + 39);
  v55 = v79;
  if ((v54 & 0x80u) != 0)
  {
    v55 = *(_QWORD *)(v8 + 16);
    v54 = *(_QWORD *)(v8 + 24);
  }
  *(_QWORD *)v53 = v50;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)&v95[8];
  *(_QWORD *)&v95[8] = 0;
  *(_QWORD *)&v95[16] = 0;
  *(_OWORD *)(v53 + 24) = v96;
  v96 = 0uLL;
  *(_QWORD *)(v53 + 40) = v55;
  *(_QWORD *)(v53 + 48) = v54;
  *(_BYTE *)(v53 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v88 = v53;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v88);
  v56 = v88;
  *(_QWORD *)&v88 = 0;
  if (v56)
  {
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(v56 + 16);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
    v63 = __dst;
    __dst = 0;
    if (v63)
    {
      v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v63[2];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_110:
  if (v3)
  {
    sub_2245664AC(v7, v95);
    sub_22322C138((uint64_t)v80, "KFS %.13s was added", v95);
    sub_223182C08((uint64_t)v80);
  }
  sub_223182C08((uint64_t)v80);
  v76 = v86;
  if (v86)
  {
    v77 = (unint64_t *)&v86->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2237BEC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BECB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237BECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237BED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BEDC0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC5B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5B0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC5A8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC5B0);
  }
  *a1 = qword_2540CC5A8;
}

void sub_2237BEE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5B0);
  _Unwind_Resume(a1);
}

void sub_2237BEEB4(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  size_t v28;
  _QWORD *p_dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  char *v90;
  std::__shared_weak_count *v91;
  _QWORD *__dst;
  __int128 v93;
  char __s[37];
  _BYTE v95[24];
  __int128 v96;
  void *v97[2];
  unint64_t v98;
  char v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  sub_2237BEDC0(&v87);
  if (**(int **)(v87 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v87 + 72);
  v4 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v80[0] = &v87;
  v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v80[2] = std::chrono::system_clock::now().__d_.__rep_;
  v81 = 3;
  v82 = "unknown file";
  v83 = 39;
  v85 = 0;
  v86 = 0;
  v7 = (unsigned __int8 *)(a2 + 216);
  v84 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
  v8 = v87;
  v9 = (const char *)(v87 + 16);
  v79 = v87 + 16;
  if (*(char *)(v87 + 39) < 0)
  {
    v9 = *(const char **)(v87 + 16);
    v10 = *(_QWORD *)(v87 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v87 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v95);
    sub_223199C58("com.apple.cv3d", (unint64_t)v95, &xmmword_255788F40);
    if ((_BYTE)v96 && (v95[23] & 0x80000000) != 0)
      operator delete(*(void **)v95);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v95 = os_log_create(v13, v9);
  v15 = &v95[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v3;
    v17 = v7;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = operator new(v18 + 1);
    *(_QWORD *)&v95[16] = v14;
    *(_QWORD *)&v96 = v19 | 0x8000000000000000;
    *(_QWORD *)&v95[8] = v15;
    v7 = v17;
    v3 = v16;
    goto LABEL_23;
  }
  BYTE7(v96) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v96) = 1;
  v20 = v97;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    v97[1] = (void *)v10;
    v98 = v23 | 0x8000000000000000;
    v97[0] = v20;
  }
  else
  {
    HIBYTE(v98) = v10;
    if (!v10)
    {
      LOBYTE(v97[0]) = 0;
      v99 = 1;
      v21 = *(NSObject **)v95;
      if ((SHIBYTE(v98) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v10);
  *((_BYTE *)v20 + v10) = 0;
  v99 = 1;
  v21 = *(NSObject **)v95;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v96))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v97[0]);
  if (!BYTE8(v96))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v96) < 0)
    operator delete(*(void **)&v95[8]);
LABEL_37:
  if (*(_QWORD *)v95)
    os_release(*(void **)v95);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_QWORD *)v95 = 0xD04100202;
    *(_WORD *)&v95[8] = 2080;
    *(_QWORD *)&v95[10] = __s;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (v30)
      free(v30);
    goto LABEL_110;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  *(_QWORD *)&v88 = v25;
  *((_QWORD *)&v88 + 1) = v25;
  v90 = 0;
  v91 = 0;
  v89 = v26;
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    *(_QWORD *)&v93 = v28;
    *((_QWORD *)&v93 + 1) = v32 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v93) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_50:
    memcpy(p_dst, __s, v28);
  *((_BYTE *)p_dst + v28) = 0;
  v33 = __dst;
  v100[0] = v93;
  *(_QWORD *)((char *)v100 + 7) = *(_QWORD *)((char *)&v93 + 7);
  v34 = HIBYTE(v93);
  v35 = operator new(0x38uLL);
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = off_24EC1FA48;
  *v35 = &off_24EC1F9F8;
  v36 = v100[0];
  v35[4] = v33;
  v35[5] = v36;
  *(_QWORD *)((char *)v35 + 47) = *(_QWORD *)((char *)v100 + 7);
  *((_BYTE *)v35 + 55) = v34;
  v100[0] = 0;
  *(_QWORD *)((char *)v100 + 7) = 0;
  v37 = v91;
  v90 = (char *)(v35 + 3);
  v91 = (std::__shared_weak_count *)v35;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)v95 = v88;
  v40 = v90;
  *(_QWORD *)&v95[16] = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v91;
  *(_QWORD *)&v96 = v40;
  *((_QWORD *)&v96 + 1) = v91;
  if (v91)
  {
    v44 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v97[0] = v40;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v97[0] = v40;
  }
  v47 = v89;
  if (v89)
  {
    v48 = (unint64_t *)&v89->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)v95;
  if (*((char *)v97[0] + 31) >= 0)
    v51 = (char *)v97[0] + 8;
  else
    v51 = (char *)*((_QWORD *)v97[0] + 1);
  v52 = _os_log_pack_fill();
  *(_DWORD *)v52 = 68157954;
  *(_DWORD *)(v52 + 4) = 13;
  *(_WORD *)(v52 + 8) = 2080;
  *(_QWORD *)(v52 + 10) = v51;
  v53 = operator new();
  v54 = *(unsigned __int8 *)(v8 + 39);
  v55 = v79;
  if ((v54 & 0x80u) != 0)
  {
    v55 = *(_QWORD *)(v8 + 16);
    v54 = *(_QWORD *)(v8 + 24);
  }
  *(_QWORD *)v53 = v50;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)&v95[8];
  *(_QWORD *)&v95[8] = 0;
  *(_QWORD *)&v95[16] = 0;
  *(_OWORD *)(v53 + 24) = v96;
  v96 = 0uLL;
  *(_QWORD *)(v53 + 40) = v55;
  *(_QWORD *)(v53 + 48) = v54;
  *(_BYTE *)(v53 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v88 = v53;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v88);
  v56 = v88;
  *(_QWORD *)&v88 = 0;
  if (v56)
  {
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(v56 + 16);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
    v63 = __dst;
    __dst = 0;
    if (v63)
    {
      v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v63[2];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_110:
  if (v3)
  {
    sub_2245664AC(v7, v95);
    sub_22322C138((uint64_t)v80, "KFS %.13s will be removed", v95);
    sub_223182C08((uint64_t)v80);
  }
  sub_223182C08((uint64_t)v80);
  v76 = v86;
  if (v86)
  {
    v77 = (unint64_t *)&v86->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2237BF7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BF7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237BF818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237BF874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BF898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237BF8F4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  size_t v32;
  size_t v33;
  _QWORD *p_dst;
  int v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  const char *__src;
  _QWORD v90[3];
  int v91;
  const char *v92;
  int v93;
  const char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  char *v100;
  std::__shared_weak_count *v101;
  _QWORD *__dst;
  __int128 v103;
  char __s[37];
  _BYTE v105[24];
  __int128 v106;
  void *v107[2];
  unint64_t v108;
  char v109;
  _QWORD v110[5];

  v110[2] = *MEMORY[0x24BDAC8D0];
  sub_2237BEDC0(&v97);
  if (**(int **)(v97 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v97 + 72);
  v6 = sub_22322F254(v97, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v90[0] = &v97;
  v90[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v90[2] = std::chrono::system_clock::now().__d_.__rep_;
  v91 = 3;
  v92 = "unknown file";
  v93 = 48;
  v95 = 0;
  v96 = 0;
  v9 = (unsigned __int8 *)(a2 + 216);
  v94 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
  v10 = v97;
  if (*(char *)(v97 + 39) < 0)
  {
    v12 = *(const char **)(v97 + 16);
    v11 = *(_QWORD *)(v97 + 24);
    v88 = *(_QWORD *)v90[0] + 16;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v97 + 39);
    v12 = (const char *)(*(_QWORD *)v90[0] + 16);
    v88 = (uint64_t)v12;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v105);
    sub_223199C58("com.apple.cv3d", (unint64_t)v105, &xmmword_255788F40);
    if ((_BYTE)v106 && (v105[23] & 0x80000000) != 0)
      operator delete(*(void **)v105);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v12;
  *(_QWORD *)v105 = os_log_create(v15, v12);
  v17 = &v105[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = v8;
    v19 = v10;
    v20 = a3;
    v21 = v9;
    v22 = v5;
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    v17 = operator new(v23 + 1);
    *(_QWORD *)&v105[16] = v16;
    *(_QWORD *)&v106 = v24 | 0x8000000000000000;
    *(_QWORD *)&v105[8] = v17;
    v5 = v22;
    v9 = v21;
    a3 = v20;
    v10 = v19;
    v8 = v18;
    goto LABEL_23;
  }
  BYTE7(v106) = v16;
  if (v16)
LABEL_23:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  BYTE8(v106) = 1;
  v25 = v107;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v27 = v11 | 7;
    v28 = v27 + 1;
    v25 = (void **)operator new(v27 + 1);
    v107[1] = (void *)v11;
    v108 = v28 | 0x8000000000000000;
    v107[0] = v25;
  }
  else
  {
    HIBYTE(v108) = v11;
    if (!v11)
    {
      LOBYTE(v107[0]) = 0;
      v109 = 1;
      v26 = *(NSObject **)v105;
      if ((SHIBYTE(v108) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v25, __src, v11);
  *((_BYTE *)v25 + v11) = 0;
  v109 = 1;
  v26 = *(NSObject **)v105;
  if ((SHIBYTE(v108) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v106))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v107[0]);
  if (!BYTE8(v106))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v106) < 0)
    operator delete(*(void **)&v105[8]);
LABEL_37:
  if (*(_QWORD *)v105)
    os_release(*(void **)v105);
  if (!v8 || !*(_QWORD *)(v8 + 24))
  {
    os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    v35 = *a3;
    v36 = a3[1];
    *(_QWORD *)v105 = 0xD04100402;
    *(_WORD *)&v105[8] = 2080;
    *(_QWORD *)&v105[10] = __s;
    *(_WORD *)&v105[18] = 1024;
    *(_DWORD *)&v105[20] = v35;
    LOWORD(v106) = 1024;
    *(_DWORD *)((char *)&v106 + 2) = v36;
    v37 = (void *)_os_log_send_and_compose_impl();
    if (v37)
      free(v37);
    goto LABEL_110;
  }
  v29 = _os_log_pack_size();
  v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
  v31 = (std::__shared_weak_count *)operator new();
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = v30;
  *(_QWORD *)&v98 = v30;
  *((_QWORD *)&v98 + 1) = v30;
  v100 = 0;
  v101 = 0;
  v99 = v31;
  v32 = strlen(__s);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v38 = v32 | 7;
    v39 = v38 + 1;
    p_dst = operator new(v38 + 1);
    *(_QWORD *)&v103 = v33;
    *((_QWORD *)&v103 + 1) = v39 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v103) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_50:
    memcpy(p_dst, __s, v33);
  *((_BYTE *)p_dst + v33) = 0;
  v40 = __dst;
  v110[0] = v103;
  *(_QWORD *)((char *)v110 + 7) = *(_QWORD *)((char *)&v103 + 7);
  v41 = HIBYTE(v103);
  v42 = operator new(0x40uLL);
  v42[1] = 0;
  v42[2] = 0;
  v42[3] = off_24EC1F890;
  *v42 = &off_24EC1F840;
  v43 = v110[0];
  v42[4] = v40;
  v42[5] = v43;
  *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)((char *)v110 + 7);
  *((_BYTE *)v42 + 55) = v41;
  v110[0] = 0;
  *(_QWORD *)((char *)v110 + 7) = 0;
  v44 = v101;
  v100 = (char *)(v42 + 3);
  v101 = (std::__shared_weak_count *)v42;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_OWORD *)v105 = v98;
  v47 = v100;
  *(_QWORD *)&v105[16] = v99;
  if (v99)
  {
    v48 = (unint64_t *)&v99->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = v101;
  *(_QWORD *)&v106 = v47;
  *((_QWORD *)&v106 + 1) = v101;
  if (v101)
  {
    v51 = (unint64_t *)&v101->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    v107[0] = v47;
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  else
  {
    v107[0] = v47;
  }
  v54 = v99;
  if (v99)
  {
    v55 = (unint64_t *)&v99->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(_QWORD *)v105;
  if (*((char *)v107[0] + 31) >= 0)
    v58 = (char *)v107[0] + 8;
  else
    v58 = (char *)*((_QWORD *)v107[0] + 1);
  v59 = _os_log_pack_fill();
  v60 = *a3;
  v61 = a3[1];
  *(_DWORD *)v59 = 68158466;
  *(_DWORD *)(v59 + 4) = 13;
  *(_WORD *)(v59 + 8) = 2080;
  *(_QWORD *)(v59 + 10) = v58;
  *(_WORD *)(v59 + 18) = 1024;
  *(_DWORD *)(v59 + 20) = v60;
  *(_WORD *)(v59 + 24) = 1024;
  *(_DWORD *)(v59 + 26) = v61;
  v62 = operator new();
  v63 = *(unsigned __int8 *)(v10 + 39);
  v64 = v88;
  if ((v63 & 0x80u) != 0)
  {
    v64 = *(_QWORD *)(v10 + 16);
    v63 = *(_QWORD *)(v10 + 24);
  }
  *(_QWORD *)v62 = v57;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)&v105[8];
  *(_QWORD *)&v105[8] = 0;
  *(_QWORD *)&v105[16] = 0;
  *(_OWORD *)(v62 + 24) = v106;
  v106 = 0uLL;
  *(_QWORD *)(v62 + 40) = v64;
  *(_QWORD *)(v62 + 48) = v63;
  *(_BYTE *)(v62 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v98 = v62;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v98);
  v65 = v98;
  *(_QWORD *)&v98 = 0;
  if (v65)
  {
    v66 = *(std::__shared_weak_count **)(v65 + 32);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = *(std::__shared_weak_count **)(v65 + 16);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
    v72 = __dst;
    __dst = 0;
    if (v72)
    {
      v73 = (std::__shared_weak_count *)v72[4];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (std::__shared_weak_count *)v72[2];
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      MEMORY[0x227684CE8](v72, 0x10F0C40B62ED6C6);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v105[16];
  if (*(_QWORD *)&v105[16])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v105[16] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_110:
  if (v5)
  {
    sub_2245664AC(v9, v105);
    sub_22322C138((uint64_t)v90, "KFS %.13s was modified (pose: %d, content: %d)", v105, *a3, a3[1]);
    sub_223182C08((uint64_t)v90);
  }
  sub_223182C08((uint64_t)v90);
  v85 = v96;
  if (v96)
  {
    v86 = (unint64_t *)&v96->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_2237C025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C029C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237C02D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  int v26;

  if (v26 < 0)
    operator delete(v25);
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237C032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 160) && *(char *)(v7 - 161) < 0)
    operator delete(*(void **)(v7 - 184));
  v9 = *(void **)(v7 - 192);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C03AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  _QWORD *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[48];
  size_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  sub_2237BEDC0(&v78);
  if (**(int **)(v78 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v78 + 72);
  v6 = sub_22322F254(v78, "OSLogSurrogateAppender", 1, 0);
  if (!v5 && v6 == 0)
    return;
  v8 = v6;
  v71[0] = &v78;
  v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v71[2] = std::chrono::system_clock::now().__d_.__rep_;
  v72 = 3;
  v73 = "unknown file";
  v74 = 56;
  v76 = 0;
  v77 = 0;
  v75 = "unknown function";
  v65 = v78;
  if (*(char *)(v78 + 39) < 0)
  {
    v10 = *(const char **)(v78 + 16);
    v9 = *(_QWORD *)(v78 + 24);
  }
  else
  {
    v9 = *(unsigned __int8 *)(v78 + 39);
    v10 = (const char *)(v78 + 16);
  }
  v64 = v78 + 16;
  v67 = a2[1];
  v68 = *a2;
  v69 = a2[4];
  v70 = a2[3];
  v66 = *(_QWORD *)(a3 + 16);
  v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v81);
    sub_223199C58("com.apple.cv3d", (unint64_t)v81, &xmmword_255788F40);
    if (v81[24] && (v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v12 = (const char *)&xmmword_255788F40;
  else
    v12 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v13 = byte_255788F57;
  else
    v13 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v81 = os_log_create(v12, v10);
  v14 = &v81[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v15 = v8;
    v16 = a2;
    v17 = v10;
    v18 = v5;
    v19 = a3;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v14 = operator new(v20 + 1);
    *(_QWORD *)&v81[16] = v13;
    *(_QWORD *)&v81[24] = v21 | 0x8000000000000000;
    *(_QWORD *)&v81[8] = v14;
    a3 = v19;
    v5 = v18;
    v10 = v17;
    a2 = v16;
    v8 = v15;
    goto LABEL_23;
  }
  v81[31] = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  v14[v13] = 0;
  v81[32] = 1;
  v22 = &v81[40];
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v25 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v25 = v9 | 7;
    v26 = v25 + 1;
    v22 = operator new(v25 + 1);
    v82 = v9;
    v83 = v26 | 0x8000000000000000;
    *(_QWORD *)&v81[40] = v22;
  }
  else
  {
    HIBYTE(v83) = v9;
    if (!v9)
    {
      v81[40] = 0;
      v84 = 1;
      v23 = *(NSObject **)v81;
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v10, v9);
  v22[v9] = 0;
  v84 = 1;
  v23 = *(NSObject **)v81;
  if ((SHIBYTE(v83) & 0x80000000) == 0)
  {
LABEL_28:
    v24 = v70;
    if (!v81[32])
      goto LABEL_37;
LABEL_35:
    if ((v81[31] & 0x80000000) != 0)
      operator delete(*(void **)&v81[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&v81[40]);
  v24 = v70;
  if (v81[32])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)v81)
    os_release(*(void **)v81);
  v27 = v69 - v24;
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v28 = _os_log_pack_size();
    v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
    v30 = (std::__shared_weak_count *)operator new();
    v31 = v30;
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v30->__shared_weak_owners_ = 0;
    v30[1].__vftable = v29;
    *(_QWORD *)v81 = v29;
    *(_QWORD *)&v81[8] = v29;
    *(_QWORD *)&v81[16] = v30;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    memset(&v81[24], 0, 24);
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v35 = *(_QWORD *)v81;
    v36 = _os_log_pack_fill();
    *(_DWORD *)v36 = 134218752;
    *(_QWORD *)(v36 + 4) = v70;
    *(_WORD *)(v36 + 12) = 2048;
    *(_QWORD *)(v36 + 14) = v27;
    *(_WORD *)(v36 + 22) = 2048;
    *(_QWORD *)(v36 + 24) = ((v67 - v68) >> 4) - v69;
    *(_WORD *)(v36 + 32) = 2048;
    *(_QWORD *)(v36 + 34) = v66;
    v37 = operator new();
    v38 = *(unsigned __int8 *)(v65 + 39);
    v39 = v64;
    if ((v38 & 0x80u) != 0)
    {
      v39 = *(_QWORD *)(v65 + 16);
      v38 = *(_QWORD *)(v65 + 24);
    }
    *(_QWORD *)v37 = v35;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)&v81[8];
    *(_OWORD *)&v81[8] = 0uLL;
    *(_OWORD *)(v37 + 24) = *(_OWORD *)&v81[24];
    *(_OWORD *)&v81[24] = 0uLL;
    *(_QWORD *)(v37 + 40) = v39;
    *(_QWORD *)(v37 + 48) = v38;
    *(_BYTE *)(v37 + 56) = 1;
    v79 = 0;
    v80 = v37;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v80);
    v40 = v80;
    v80 = 0;
    if (v40)
    {
      v41 = *(std::__shared_weak_count **)(v40 + 32);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = *(std::__shared_weak_count **)(v40 + 16);
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
      v47 = v79;
      v79 = 0;
      if (v47)
      {
        v48 = *(std::__shared_weak_count **)(v47 + 32);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = *(std::__shared_weak_count **)(v47 + 16);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
      }
    }
    v54 = *(std::__shared_weak_count **)&v81[32];
    if (*(_QWORD *)&v81[32])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v81[32] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(std::__shared_weak_count **)&v81[16];
    if (*(_QWORD *)&v81[16])
    {
      v58 = (unint64_t *)(*(_QWORD *)&v81[16] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_DWORD *)v81 = 134218752;
    *(_QWORD *)&v81[4] = v24;
    *(_WORD *)&v81[12] = 2048;
    *(_QWORD *)&v81[14] = v69 - v24;
    *(_WORD *)&v81[22] = 2048;
    *(_QWORD *)&v81[24] = ((v67 - v68) >> 4) - v69;
    *(_WORD *)&v81[32] = 2048;
    *(_QWORD *)&v81[34] = v66;
    v60 = (void *)_os_log_send_and_compose_impl();
    if (v60)
      free(v60);
  }
  if (v5)
  {
    sub_22322C138((uint64_t)v71, "KFS update complete. Added/Modified/Removed/Total KFS: %zu/%zu/%zu/%zu", a2[3], a2[4] - a2[3], ((uint64_t)(a2[1] - *a2) >> 4) - a2[4], *(_QWORD *)(a3 + 16));
    sub_223182C08((uint64_t)v71);
  }
  sub_223182C08((uint64_t)v71);
  v61 = v77;
  if (v77)
  {
    v62 = (unint64_t *)&v77->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_2237C0B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  if (*(_BYTE *)(v13 - 152))
  {
    if (*(char *)(v13 - 153) < 0)
      operator delete(*(void **)(v13 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  sub_22319A054(&a32);
  sub_22319A054(&a31);
  sub_223199DE8(v32 - 176);
  sub_223182DAC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2237C0BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  MEMORY[0x227684CE8](v13, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C0C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237C0CC0()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237C0CEC(uint64_t *a1, int32x2_t *a2)
{
  _BYTE *v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  int v19;
  BOOL v20;
  int v22;
  size_t v23;
  unint64_t v24;
  void *p_p;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  __int128 v41;
  _QWORD v42[2];
  _OWORD v43[2];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)&a2[27], v43);
  v4 = operator new(0x28uLL);
  v5 = v43[1];
  *(_OWORD *)v4 = v43[0];
  *((_OWORD *)v4 + 1) = v5;
  *((_DWORD *)v4 + 8) = v44;
  v4[36] = 0;
  v37 = v4;
  v38 = xmmword_22464DCC0;
  v4[8] = 0;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59AD8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v32 = 0u;
        v33 = 0u;
        v34 = 728325608;
        kdebug_trace();
        v31 = 1061339770;
        v30 = 0x3F1291FB3C807358;
        sub_224002D14((uint64_t)a2, a2 + 12, &v30, (uint64_t)v43, 0.1);
        *(_QWORD *)((char *)v42 + 5) = 0;
        v42[0] = 0;
        v13 = *(void **)v4;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          LOWORD(v41) = 26207;
          *(_QWORD *)((char *)&v41 + 2) = v42[0];
          *(_QWORD *)((char *)&v41 + 7) = *(_QWORD *)((char *)v42 + 5);
          HIBYTE(v41) = 10;
          *(_QWORD *)&v39 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v39 + 1) = 2;
          __p = v13;
          v14 = sub_2241471F8();
          sub_223452794((uint64_t)v14, v12, (uint64_t)v43, (uint64_t)&__p, &v39);
          if (SHIBYTE(v41) < 0)
            operator delete(__p);
        }
        sub_22316F8F4((uint64_t *)v43);
        kdebug_trace();
      }
    }
  }
  v32 = 0u;
  v33 = 0u;
  v34 = 728325624;
  kdebug_trace();
  v15 = v36;
  if ((v36 & 0x80u) != 0)
    v15 = (unint64_t)v35[1];
  if (v15 >= 0x11)
  {
    v16 = v35;
    if ((v36 & 0x80u) != 0)
      v16 = (void **)v35[0];
    v17 = *v16;
    v18 = v16[1];
    v19 = *((unsigned __int8 *)v16 + 16);
    v20 = v17 == (void *)0x6365722E64337663 && v18 == (void *)0x73746174532E6E6FLL;
    if (v20 && v19 == 46)
    {
      sub_223187510();
      DWORD2(v39) = 1061339770;
      *(_QWORD *)&v39 = 0x3F1291FB3C807358;
      sub_224002D14((uint64_t)a2, a2 + 12, (uint64_t *)&v39, (uint64_t)v43, 0.1);
      v22 = SHIBYTE(v38);
      if (v38 >= 0)
        v23 = HIBYTE(v38);
      else
        v23 = v38;
      v24 = v23 + 2;
      if (v23 + 2 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v24 >= 0x17)
      {
        v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        v27 = v24 | 7;
        if (v27 == 23)
          v27 = v26;
        v28 = v27 + 1;
        p_p = operator new(v27 + 1);
        *((_QWORD *)&v41 + 1) = v28 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v41 = 0uLL;
        __p = 0;
        p_p = &__p;
        HIBYTE(v41) = v23 + 2;
        if (!v23)
        {
          strcpy((char *)&__p, "_f");
          if ((SHIBYTE(v41) & 0x80000000) == 0)
          {
LABEL_31:
            sub_22316F8F4((uint64_t *)v43);
            goto LABEL_32;
          }
LABEL_44:
          operator delete(__p);
          goto LABEL_31;
        }
      }
      if (v22 >= 0)
        v29 = &v37;
      else
        v29 = v37;
      memmove(p_p, v29, v23);
      strcpy((char *)p_p + v23, "_f");
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_44;
    }
  }
LABEL_32:
  kdebug_trace();
  if ((char)v36 < 0)
    operator delete(v35[0]);
  sub_2237C1250(a1, (uint64_t)a2);
  if (SHIBYTE(v38) < 0)
    operator delete(v37);
}

void sub_2237C11B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237C1250(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  __int16 **v22;
  int32x4_t v23;
  int32x4_t v24;
  __int128 v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  __int16 **v29;
  int8x16_t v30;
  unsigned __int32 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int16 *v36;
  __int16 *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  char v45[8];
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  __int128 v49;
  __int16 v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  __int128 v55;
  __int16 v56;
  uint64_t v57[49];
  std::__shared_weak_count *v58;
  __int16 **v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int8x16_t v63;
  float32x2_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  char v69;

  v3 = *(std::__shared_weak_count **)(a2 + 208);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v58 = v5;
  if (!v5)
    return;
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 200);
  v57[48] = v7;
  if (!v7)
  {
LABEL_53:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  sub_2231CC34C(v7, (uint64_t)v45);
  v51 = &off_24EC200A8;
  v8 = v46;
  v9 = v47;
  if (v47)
  {
    v10 = (unint64_t *)&v47->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v50;
    do
      v13 = __ldxr(v10);
    while (__stxr(v13 + 1, v10));
    v14 = v48;
    v55 = v49;
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    v52 = v8;
    v53 = v9;
    v54 = v14;
    v56 = v12;
    do
      v16 = __ldaxr(v10);
    while (__stlxr(v16 - 1, v10));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v52 = v46;
    v53 = 0;
    v54 = v48;
    v55 = v49;
    v56 = v50;
  }
  v18 = 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3);
  v60 = 0uLL;
  v59 = 0;
  sub_223720F0C((uint64_t)&v59, v18);
  v19 = *(_QWORD *)(a2 + 160);
  for (i = *(_QWORD *)(a2 + 168); v19 != i; v19 += 424)
  {
    sub_2236EA2D0((uint64_t)&v61, v19 + 264);
    v21 = v60;
    if ((unint64_t)v60 >= *((_QWORD *)&v60 + 1))
    {
      *(_QWORD *)&v60 = sub_223721094((void **)&v59, (uint64_t)&v61);
      if (v63.i64[0])
      {
        v63.i64[1] = v63.i64[0];
        operator delete((void *)v63.i64[0]);
      }
    }
    else
    {
      *(_QWORD *)(v60 + 8) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = 0;
      *(_OWORD *)v21 = v61;
      *(_QWORD *)(v21 + 16) = v62;
      v61 = 0uLL;
      *(_QWORD *)&v62 = 0;
      *(_DWORD *)(v21 + 24) = DWORD2(v62);
      *(_QWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      *(int8x16_t *)(v21 + 32) = v63;
      *(float32x2_t *)(v21 + 48) = v64;
      v63 = 0uLL;
      v64 = 0;
      *(_QWORD *)(v21 + 56) = v65;
      *(_DWORD *)(v21 + 64) = v66;
      *(_DWORD *)(v21 + 68) = v67;
      *(_BYTE *)(v21 + 72) = 0;
      *(_BYTE *)(v21 + 80) = 0;
      if (v69)
      {
        *(_QWORD *)(v21 + 72) = v68;
        *(_BYTE *)(v21 + 80) = 1;
      }
      *(_QWORD *)&v60 = v21 + 88;
    }
    if ((_QWORD)v61)
    {
      *((_QWORD *)&v61 + 1) = v61;
      operator delete((void *)v61);
    }
  }
  v22 = v59;
  v23 = *(int32x4_t *)(a2 + 96);
  v24 = *(int32x4_t *)(a2 + 112);
  *(_QWORD *)&v25 = vzip1q_s32(v23, v24).u64[0];
  v26 = *(float32x4_t *)(a2 + 144);
  v27 = (int8x16_t)vnegq_f32(v26);
  v28 = (int8x16_t)vtrn2q_s32(v23, v24);
  v28.i32[2] = HIDWORD(*(_QWORD *)(a2 + 128));
  v29 = (__int16 **)v60;
  v30 = (int8x16_t)vzip2q_s32(v23, v24);
  v30.i32[2] = *(_QWORD *)(a2 + 136);
  v31 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 128), *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 128), 1), *(float32x2_t *)v26.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 128), *(int8x16_t *)(a2 + 128), 8uLL)).u32[0];
  *((_QWORD *)&v25 + 1) = *(_OWORD *)(a2 + 128);
  HIDWORD(v32) = 0;
  LODWORD(v32) = vdupq_lane_s32(*(int32x2_t *)&v28, 0).i32[3];
  *(_QWORD *)((char *)&v32 + 4) = vextq_s8(v28, v30, 4uLL).u64[0];
  v30.i64[1] = vdupq_laneq_s32((int32x4_t)v30, 2).u32[0];
  v62 = v32;
  v63 = v30;
  v61 = v25;
  v64 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v25, *(float *)v27.i32), *(float32x2_t *)v28.i8, *(float32x2_t *)v26.f32, 1), *(float32x2_t *)v30.i8, v26, 2);
  v65 = v31 | 0x3F80000000000000;
  sub_22373DE00((uint64_t)&v51, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v60 - (_QWORD)v59) >> 3), v59, (float32x2_t *)a2, (float32x2_t *)&v61, 0x808080uLL, (uint64_t)v57);
  v33 = a1[2];
  if (v33 >= a1[3])
    v34 = sub_2235343FC(a1 + 1, (uint64_t)v57);
  else
    v34 = sub_22317FD80(v33, (uint64_t)v57) + 384;
  a1[2] = v34;
  sub_22316F8F4(v57);
  if (!v22)
  {
    v35 = v53;
    if (!v53)
      goto LABEL_47;
    goto LABEL_43;
  }
  while (v29 != v22)
  {
    v36 = *(v29 - 7);
    if (v36)
    {
      *(v29 - 6) = v36;
      operator delete(v36);
    }
    v37 = *(v29 - 11);
    if (v37)
    {
      *(v29 - 10) = v37;
      operator delete(v37);
    }
    v29 -= 11;
  }
  operator delete(v22);
  v35 = v53;
  if (v53)
  {
LABEL_43:
    v38 = (unint64_t *)&v35->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_47:
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v6 = v58;
  if (v58)
    goto LABEL_53;
}

void sub_2237C16C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_22316F8F4(&a26);
  sub_2237073E0(&a9);
  sub_22319EF60((uint64_t)&a19);
  sub_2231BD974((uint64_t)&a12);
  sub_223167354(v26 - 200);
  _Unwind_Resume(a1);
}

void sub_2237C174C(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  __int128 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  int v17;
  BOOL v18;
  int v20;
  size_t v21;
  unint64_t v22;
  void *p_p;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *__p;
  __int128 v34;
  _QWORD v35[2];
  _OWORD v36[2];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)(a2 + 216), v36);
  v2 = operator new(0x28uLL);
  v3 = v36[1];
  *(_OWORD *)v2 = v36[0];
  *((_OWORD *)v2 + 1) = v3;
  *((_DWORD *)v2 + 8) = v37;
  v2[36] = 0;
  v30 = v2;
  v31 = xmmword_22464DCC0;
  v2[8] = 0;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59AD8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        kdebug_trace();
        sub_2241498F4((uint64_t)v36, 0);
        *(_QWORD *)((char *)v35 + 5) = 0;
        v35[0] = 0;
        v11 = *(void **)v2;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          LOWORD(v34) = 26207;
          *(_QWORD *)((char *)&v34 + 2) = v35[0];
          *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)v35 + 5);
          HIBYTE(v34) = 10;
          *(_QWORD *)&v32 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v32 + 1) = 2;
          __p = v11;
          v12 = sub_2241471F8();
          sub_223452794((uint64_t)v12, v10, (uint64_t)v36, (uint64_t)&__p, &v32);
          if (SHIBYTE(v34) < 0)
            operator delete(__p);
        }
        sub_22316F8F4((uint64_t *)v36);
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  v13 = v29;
  if ((v29 & 0x80u) != 0)
    v13 = (unint64_t)v28[1];
  if (v13 >= 0x11)
  {
    v14 = v28;
    if ((v29 & 0x80u) != 0)
      v14 = (void **)v28[0];
    v15 = *v14;
    v16 = v14[1];
    v17 = *((unsigned __int8 *)v14 + 16);
    v18 = v15 == (void *)0x6365722E64337663 && v16 == (void *)0x73746174532E6E6FLL;
    if (v18 && v17 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)v36, 0);
      v20 = SHIBYTE(v31);
      if (v31 >= 0)
        v21 = HIBYTE(v31);
      else
        v21 = v31;
      v22 = v21 + 2;
      if (v21 + 2 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v22 >= 0x17)
      {
        v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        v25 = v22 | 7;
        if (v25 == 23)
          v25 = v24;
        v26 = v25 + 1;
        p_p = operator new(v25 + 1);
        *((_QWORD *)&v34 + 1) = v26 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v34 = 0uLL;
        __p = 0;
        p_p = &__p;
        HIBYTE(v34) = v21 + 2;
        if (!v21)
        {
          strcpy((char *)&__p, "_f");
          if ((SHIBYTE(v34) & 0x80000000) == 0)
          {
LABEL_31:
            sub_22316F8F4((uint64_t *)v36);
            goto LABEL_32;
          }
LABEL_44:
          operator delete(__p);
          goto LABEL_31;
        }
      }
      if (v20 >= 0)
        v27 = &v30;
      else
        v27 = v30;
      memmove(p_p, v27, v21);
      strcpy((char *)p_p + v21, "_f");
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_44;
    }
  }
LABEL_32:
  kdebug_trace();
  if (((char)v29 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return;
LABEL_36:
    operator delete(v30);
    return;
  }
  operator delete(v28[0]);
  if (SHIBYTE(v31) < 0)
    goto LABEL_36;
}

void sub_2237C1BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237C1C4C(uint64_t *a1, int32x2_t *a2, _BYTE *a3)
{
  _BYTE *v6;
  __int128 v7;
  void **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  unint64_t v18;
  void **v19;
  void *v20;
  void *v21;
  int v22;
  BOOL v23;
  int v25;
  size_t v26;
  unint64_t v27;
  void *p_p;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  void *__p;
  __int128 v44;
  _QWORD v45[2];
  _OWORD v46[2];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)&a2[27], v46);
  v6 = operator new(0x28uLL);
  v7 = v46[1];
  *(_OWORD *)v6 = v46[0];
  *((_OWORD *)v6 + 1) = v7;
  *((_DWORD *)v6 + 8) = v47;
  v6[36] = 0;
  v40 = v6;
  v41 = xmmword_22464DCC0;
  v6[8] = 0;
  if (!*a3)
  {
LABEL_43:
    if (!a3[1])
      goto LABEL_45;
    goto LABEL_44;
  }
  v8 = (void **)v6;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59AD8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v9 = sub_2241471F8();
    v10 = v9[2];
    if (!v10)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v10 = v9[2];
    }
    v11 = *(_QWORD *)(v10 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      sub_2241471F8();
      v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      {
        v35 = 0u;
        v36 = 0u;
        v37 = 728325608;
        kdebug_trace();
        v34 = 1061339770;
        v33 = 0x3F1291FB3C807358;
        sub_224002D14((uint64_t)a2, a2 + 12, &v33, (uint64_t)v46, 0.1);
        *(_QWORD *)((char *)v45 + 5) = 0;
        v45[0] = 0;
        v16 = *v8;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        {
          LOWORD(v44) = 26207;
          *(_QWORD *)((char *)&v44 + 2) = v45[0];
          *(_QWORD *)((char *)&v44 + 7) = *(_QWORD *)((char *)v45 + 5);
          HIBYTE(v44) = 10;
          *(_QWORD *)&v42 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v42 + 1) = 2;
          __p = v16;
          v17 = sub_2241471F8();
          sub_223452794((uint64_t)v17, v15, (uint64_t)v46, (uint64_t)&__p, &v42);
          if (SHIBYTE(v44) < 0)
            operator delete(__p);
        }
        sub_22316F8F4((uint64_t *)v46);
        kdebug_trace();
      }
    }
  }
  v35 = 0u;
  v36 = 0u;
  v37 = 728325624;
  kdebug_trace();
  v18 = v39;
  if ((v39 & 0x80u) != 0)
    v18 = (unint64_t)v38[1];
  if (v18 >= 0x11)
  {
    v19 = v38;
    if ((v39 & 0x80u) != 0)
      v19 = (void **)v38[0];
    v20 = *v19;
    v21 = v19[1];
    v22 = *((unsigned __int8 *)v19 + 16);
    v23 = v20 == (void *)0x6365722E64337663 && v21 == (void *)0x73746174532E6E6FLL;
    if (v23 && v22 == 46)
    {
      sub_223187510();
      DWORD2(v42) = 1061339770;
      *(_QWORD *)&v42 = 0x3F1291FB3C807358;
      sub_224002D14((uint64_t)a2, a2 + 12, (uint64_t *)&v42, (uint64_t)v46, 0.1);
      v25 = SHIBYTE(v41);
      if (v41 >= 0)
        v26 = HIBYTE(v41);
      else
        v26 = v41;
      v27 = v26 + 2;
      if (v26 + 2 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v27 >= 0x17)
      {
        v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        v30 = v27 | 7;
        if (v30 == 23)
          v30 = v29;
        v31 = v30 + 1;
        p_p = operator new(v30 + 1);
        *((_QWORD *)&v44 + 1) = v31 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v44 = 0uLL;
        __p = 0;
        p_p = &__p;
        HIBYTE(v44) = v26 + 2;
        if (!v26)
        {
LABEL_39:
          strcpy((char *)p_p + v26, "_f");
          if (SHIBYTE(v44) < 0)
            operator delete(__p);
          sub_22316F8F4((uint64_t *)v46);
          goto LABEL_42;
        }
      }
      if (v25 >= 0)
        v32 = &v40;
      else
        v32 = v40;
      memmove(p_p, v32, v26);
      goto LABEL_39;
    }
  }
LABEL_42:
  kdebug_trace();
  if (((char)v39 & 0x80000000) == 0)
    goto LABEL_43;
  operator delete(v38[0]);
  if (a3[1])
LABEL_44:
    sub_2237C1250(a1, (uint64_t)a2);
LABEL_45:
  if (SHIBYTE(v41) < 0)
    operator delete(v40);
}

void sub_2237C211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237C21B8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int64x2_t *v18;
  unint64_t v19;
  int64x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  std::mutex *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void **v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  _QWORD *v43;
  std::string::size_type v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _QWORD *v59;
  std::string::size_type v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  std::mutex *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void **v101;
  void *v102;
  void *v103;
  int v104;
  BOOL v105;
  int **v107;
  uint64_t v108;
  int64x2_t *v109;
  int64x2_t *v110;
  void *v111[2];
  __int128 v112;
  int v113;
  void *v114[2];
  unsigned __int8 v115;
  void *v116;
  void *v117;
  std::string::size_type v118;
  void *__p;
  void *v120;
  char *v121;
  void *v122[2];
  int64_t v123;
  void *v124[2];
  int64_t v125;
  __int128 v126;
  void *v127;
  __int128 v128;
  std::string v129;
  void *v130;
  _QWORD v131[47];

  v131[44] = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&v129.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v129, ".Updated");
  v6 = std::string::insert(&v129, 0, "KeyframePlanesV2.KFS", 0x14uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v125 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v124 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  *((_BYTE *)&v129.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v129, ".AllKeyframes");
  v8 = std::string::insert(&v129, 0, "KeyframePlanesV2.KFS", 0x14uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v123 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)v122 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = *a2;
    v11 = a2[1] - *a2;
    v12 = v11;
    if (v11)
      goto LABEL_5;
LABEL_9:
    v18 = 0;
    v107 = 0;
    v108 = 0;
    __p = 0;
    v120 = 0;
    v121 = 0;
    goto LABEL_19;
  }
  operator delete(v129.__r_.__value_.__l.__data_);
  v10 = *a2;
  v11 = a2[1] - *a2;
  v12 = v11;
  if (!v11)
    goto LABEL_9;
LABEL_5:
  v13 = 0xD1745D1745D1745DLL * (-(uint64_t)v11 >> 3);
  if (v13 >> 61)
    sub_22316E078();
  v14 = (int64x2_t *)operator new(8 * v13);
  v15 = 88 * (v12 / 88) - 88;
  if (v15 < 0x108)
  {
    v16 = v10;
    v17 = (char *)v14;
LABEL_13:
    v24 = v16;
    do
    {
      *(_QWORD *)v17 = v16;
      v17 += 8;
      v24 += 88;
      v16 += 88;
    }
    while (v24 != v10 + 88 * (v12 / 88));
    goto LABEL_15;
  }
  v19 = v15 / 0x58 + 1;
  v16 = v10 + 88 * (v19 & 0x7FFFFFFFFFFFFFCLL);
  v17 = &v14->i8[8 * (v19 & 0x7FFFFFFFFFFFFFCLL)];
  v20 = v14 + 1;
  v21 = v19 & 0x7FFFFFFFFFFFFFCLL;
  v22 = v10;
  do
  {
    v23 = vdupq_n_s64(v22);
    v20[-1] = vaddq_s64(v23, (int64x2_t)xmmword_22464EA70);
    *v20 = vaddq_s64(v23, (int64x2_t)xmmword_22464EA80);
    v22 += 352;
    v20 += 2;
    v21 -= 4;
  }
  while (v21);
  if (v19 != (v19 & 0x7FFFFFFFFFFFFFCLL))
    goto LABEL_13;
LABEL_15:
  __p = 0;
  v120 = 0;
  v121 = 0;
  v25 = v17 - (char *)v14;
  v108 = (v17 - (char *)v14) >> 3;
  if (v17 == (char *)v14)
  {
    v107 = (int **)v14;
    v18 = v14;
  }
  else
  {
    v109 = v14;
    if ((v25 & 0x8000000000000000) != 0)
      sub_22316E078();
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * v108];
    __p = v26;
    v121 = v27;
    v28 = v25;
    v18 = v109;
    memcpy(v26, v109, v28);
    v120 = v27;
    v107 = (int **)v109;
  }
LABEL_19:
  if (v125 >= 0)
    v29 = v124;
  else
    v29 = (void **)v124[0];
  if (v125 >= 0)
    v30 = HIBYTE(v125);
  else
    v30 = (uint64_t)v124[1];
  sub_2237D0A8C((uint64_t **)&__p, (uint64_t)v29, v30);
  if (__p)
  {
    v120 = __p;
    operator delete(__p);
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_90;
  v31 = sub_2241471F8();
  v32 = v31[2];
  if (!v32)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v32 = v31[2];
  }
  v33 = *(_QWORD *)(v32 + 64);
  v34 = (std::mutex *)(v33 + 32);
  std::mutex::lock((std::mutex *)(v33 + 32));
  v36 = *(_QWORD *)(v33 + 96);
  v35 = *(_QWORD *)(v33 + 104);
  std::mutex::unlock(v34);
  if (v36 == v35)
    goto LABEL_90;
  v110 = v18;
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  v129.__r_.__value_.__l.__size_ = 11;
  v37 = (void *)HIBYTE(v123);
  v38 = v122;
  if (v123 < 0)
  {
    v38 = (void **)v122[0];
    v37 = v122[1];
  }
  v129.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
  v130 = v37;
  sub_2231A9820((uint64_t)&v129, (uint64_t)v131, 0, 0, (std::string *)v111);
  sub_2241471F8();
  v39 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
  v41 = v40;
  if (SBYTE7(v112) < 0)
  {
    operator delete(v111[0]);
    if (v41 != 1)
      goto LABEL_90;
  }
  else if (v40 != 1)
  {
    goto LABEL_90;
  }
  v42 = a3[2];
  memset(&v129, 0, sizeof(v129));
  if (v42)
  {
    if (v42 >> 61)
      sub_22316E078();
    v43 = operator new(8 * v42);
    v44 = (std::string::size_type)&v43[v42];
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    v129.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
    v129.__r_.__value_.__r.__words[2] = v44;
    v47 = (_QWORD *)*a3;
    v45 = a3 + 1;
    v46 = v47;
    if (v47 == v45)
      goto LABEL_43;
    while (1)
    {
LABEL_45:
      v50 = v46 + 32;
      if ((unint64_t)v43 < v129.__r_.__value_.__r.__words[2])
      {
        *v43++ = v50;
        v129.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
        v51 = (_QWORD *)v46[1];
        if (v51)
          goto LABEL_60;
        goto LABEL_62;
      }
      v52 = v129.__r_.__value_.__r.__words[0];
      v53 = (std::string::size_type)v43 - v129.__r_.__value_.__r.__words[0];
      v54 = (uint64_t)((uint64_t)v43 - v129.__r_.__value_.__r.__words[0]) >> 3;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61)
        sub_22316E078();
      v56 = v129.__r_.__value_.__r.__words[2] - v129.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v129.__r_.__value_.__r.__words[2] - v129.__r_.__value_.__r.__words[0]) >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 >> 61)
          sub_223174E94();
        v58 = operator new(8 * v57);
        v59 = &v58[8 * v54];
        *v59 = v50;
        v60 = (std::string::size_type)(v59 + 1);
        v61 = (char *)v43 - v52;
        if (v43 == (_QWORD *)v52)
        {
LABEL_57:
          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          v129.__r_.__value_.__l.__size_ = v60;
          v129.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58[8 * v57];
          if (!v43)
            goto LABEL_59;
LABEL_58:
          operator delete(v43);
          goto LABEL_59;
        }
      }
      else
      {
        v58 = 0;
        v59 = (_QWORD *)(8 * v54);
        v63 = (_QWORD *)(8 * v54);
        *v63 = v50;
        v60 = (std::string::size_type)(v63 + 1);
        v61 = (char *)v43 - v52;
        if (v43 == (_QWORD *)v52)
          goto LABEL_57;
      }
      v64 = (unint64_t)(v61 - 8);
      if (v64 < 0x168)
      {
        v65 = v43;
        goto LABEL_68;
      }
      v67 = ((unint64_t)v43 - v52 - 8) & 0xFFFFFFFFFFFFFFF8;
      if (&v58[v53 - 8 - v67] > &v58[v53 - 8])
        break;
      if ((_QWORD *)((char *)v43 - v67 - 8) > v43 - 1)
      {
        v65 = v43;
        goto LABEL_68;
      }
      if ((char *)v43 - v58 - v53 < 0x20)
      {
        v65 = v43;
        goto LABEL_68;
      }
      v68 = (v64 >> 3) + 1;
      v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
      v65 = &v43[v69 / 0xFFFFFFFFFFFFFFF8];
      v59 = (_QWORD *)((char *)v59 - v69);
      v70 = &v58[v53 - 16];
      v71 = (__int128 *)(v43 - 2);
      v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v73 = *v71;
        *(v70 - 1) = *(v71 - 1);
        *v70 = v73;
        v70 -= 2;
        v71 -= 2;
        v72 -= 4;
      }
      while (v72);
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_68;
LABEL_69:
      v43 = (_QWORD *)v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      v129.__r_.__value_.__l.__size_ = v60;
      v129.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58[8 * v57];
      if (v43)
        goto LABEL_58;
LABEL_59:
      v43 = (_QWORD *)v60;
      v129.__r_.__value_.__l.__size_ = v60;
      v51 = (_QWORD *)v46[1];
      if (v51)
      {
        do
        {
LABEL_60:
          v62 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
        goto LABEL_44;
      }
      do
      {
LABEL_62:
        v62 = (_QWORD *)v46[2];
        v105 = *v62 == (_QWORD)v46;
        v46 = v62;
      }
      while (!v105);
LABEL_44:
      v46 = v62;
      if (v62 == v45)
      {
        v49 = (void *)v129.__r_.__value_.__r.__words[0];
        v44 = v129.__r_.__value_.__r.__words[2];
        goto LABEL_82;
      }
    }
    v65 = v43;
    do
    {
LABEL_68:
      v66 = *--v65;
      *--v59 = v66;
    }
    while (v65 != (_QWORD *)v52);
    goto LABEL_69;
  }
  v44 = 0;
  v43 = 0;
  v48 = (_QWORD *)*a3;
  v45 = a3 + 1;
  v46 = v48;
  if (v48 != v45)
    goto LABEL_45;
LABEL_43:
  v49 = v43;
LABEL_82:
  v116 = v49;
  v117 = v43;
  v118 = v44;
  if (v123 >= 0)
    v74 = v122;
  else
    v74 = (void **)v122[0];
  if (v123 >= 0)
    v75 = HIBYTE(v123);
  else
    v75 = (uint64_t)v122[1];
  v18 = v110;
  sub_2237CF4F0((uint64_t)&v116, v108, v107, (uint64_t (**)())v74, v75);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
LABEL_90:
  sub_2241498F4((uint64_t)&v129, 0);
  v76 = *(_QWORD *)(a1 + 8);
  v77 = *(uint64_t **)(a1 + 16);
  if ((uint64_t *)v76 == v77)
    goto LABEL_104;
  v78 = (unint64_t)v77 - v76 - 384;
  if (v78 >= 0x180)
  {
    v81 = 0;
    v82 = 0;
    v83 = v78 / 0x180 + 1;
    v80 = (uint64_t *)(v76 + 384 * (v83 & 0x1FFFFFFFFFFFFFELL));
    v84 = v83 & 0x1FFFFFFFFFFFFFELL;
    v85 = *(_QWORD **)(a1 + 8);
    do
    {
      v81 -= 0x5555555555555555 * ((uint64_t)(v85[1] - *v85) >> 2);
      v82 -= 0x5555555555555555 * ((uint64_t)(v85[49] - v85[48]) >> 2);
      v85 += 96;
      v84 -= 2;
    }
    while (v84);
    v79 = v82 + v81;
    if (v83 == (v83 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_97;
  }
  else
  {
    v79 = 0;
    v80 = *(uint64_t **)(a1 + 8);
  }
  do
  {
    v86 = *v80;
    v87 = v80[1];
    v80 += 48;
    v79 -= 0x5555555555555555 * ((v87 - v86) >> 2);
  }
  while (v80 != v77);
LABEL_97:
  sub_2237C2E74((uint64_t *)&v129, v76);
  sub_22339E3C8((uint64_t)&v129, v79);
  sub_22339E3C8((uint64_t)v131, v79);
  v89 = *(uint64_t **)(a1 + 8);
  v88 = *(uint64_t **)(a1 + 16);
  if ((char *)v88 - (char *)v89 != 384)
  {
    v90 = ((char *)v88 - (char *)v89) / 384 - 1;
    v91 = 384;
    do
    {
      sub_22414E9E0((uint64_t)&v129, *(_QWORD *)(a1 + 8) + v91);
      v91 += 384;
      --v90;
    }
    while (v90);
    v89 = *(uint64_t **)(a1 + 8);
    v88 = *(uint64_t **)(a1 + 16);
  }
  while (v88 != v89)
    v88 = sub_22316F8F4(v88 - 48);
  *(_QWORD *)(a1 + 16) = v89;
LABEL_104:
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59AD8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v92 = sub_2241471F8();
    v93 = v92[2];
    if (!v93)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v93 = v92[2];
    }
    v94 = *(_QWORD *)(v93 + 64);
    v95 = (std::mutex *)(v94 + 32);
    std::mutex::lock((std::mutex *)(v94 + 32));
    v97 = *(_QWORD *)(v94 + 96);
    v96 = *(_QWORD *)(v94 + 104);
    std::mutex::unlock(v95);
    if (v97 != v96)
    {
      sub_2241471F8();
      v98 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
      {
        *(_OWORD *)v111 = 0u;
        v112 = 0u;
        v113 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
        {
          v127 = operator new(0x20uLL);
          v128 = xmmword_2245B8D00;
          strcpy((char *)v127, "KPSegmentationPointClouds");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          v99 = sub_2241471F8();
          sub_22329D76C((uint64_t)v99, v98, (uint64_t)&v129, (uint64_t)&v127, &v126);
          if (SHIBYTE(v128) < 0)
            operator delete(v127);
        }
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v111 = 0u;
  v112 = 0u;
  v113 = 728325624;
  kdebug_trace();
  v100 = v115;
  if ((v115 & 0x80u) != 0)
    v100 = (unint64_t)v114[1];
  if (v100 >= 0x11)
  {
    v101 = v114;
    if ((v115 & 0x80u) != 0)
      v101 = (void **)v114[0];
    v102 = *v101;
    v103 = v101[1];
    v104 = *((unsigned __int8 *)v101 + 16);
    v105 = v102 == (void *)0x6365722E64337663 && v103 == (void *)0x73746174532E6E6FLL;
    if (v105 && v104 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((char)v115 < 0)
    operator delete(v114[0]);
  sub_22316F8F4((uint64_t *)&v129);
  if (v18)
    operator delete(v18);
  if ((SHIBYTE(v123) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v125) & 0x80000000) == 0)
      return;
LABEL_136:
    operator delete(v124[0]);
    return;
  }
  operator delete(v122[0]);
  if (SHIBYTE(v125) < 0)
    goto LABEL_136;
}

void sub_2237C2CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2237C2E74(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    v41 = v4;
    v42 = v5;
    v6 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v6 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B90[v6])(&v43, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[4];
  if (v7)
  {
    a1[5] = v7;
    v8 = -1431655765 * ((unint64_t)(a1[6] - v7) >> 2);
    v41 = v7;
    v42 = v8;
    v9 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v9 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B90[v9])(&v43, a1 + 7);
    a1[4] = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  a1[7] = *(_QWORD *)(a2 + 56);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v10 = a1[9];
  *((_DWORD *)a1 + 16) = *(_DWORD *)(a2 + 64);
  if (v10)
  {
    a1[10] = v10;
    v11 = -1431655765 * ((unint64_t)(a1[11] - v10) >> 2);
    v41 = v10;
    v42 = v11;
    v12 = *((unsigned int *)a1 + 25);
    if ((_DWORD)v12 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B90[v12])(&v43, a1 + 12);
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v13 = a1[14];
  *((_DWORD *)a1 + 26) = *(_DWORD *)(a2 + 104);
  if (v13)
  {
    a1[15] = v13;
    v14 = -1431655765 * ((unint64_t)(a1[16] - v13) >> 2);
    v41 = v13;
    v42 = v14;
    v15 = *((unsigned int *)a1 + 35);
    if ((_DWORD)v15 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B60[v15])(&v43, a1 + 17);
    a1[14] = 0;
    a1[15] = 0;
    a1[16] = 0;
  }
  a1[17] = *(_QWORD *)(a2 + 136);
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  a1[16] = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v16 = a1[18];
  if (v16)
  {
    a1[19] = v16;
    v17 = (unint64_t)(a1[20] - v16) >> 3;
    v41 = v16;
    v42 = v17;
    v18 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B80[v18])(&v43, a1 + 21);
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
  }
  a1[21] = *(_QWORD *)(a2 + 168);
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v19 = a1[22];
  if (v19)
  {
    a1[23] = v19;
    v20 = (unint64_t)(a1[24] - v19) >> 3;
    v41 = v19;
    v42 = v20;
    v21 = *((unsigned int *)a1 + 51);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B70[v21])(&v43, a1 + 25);
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
  }
  a1[25] = *(_QWORD *)(a2 + 200);
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
  a1[24] = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  v22 = a1[26];
  if (v22)
  {
    a1[27] = v22;
    v23 = -1431655765 * ((unint64_t)(a1[28] - v22) >> 2);
    v41 = v22;
    v42 = v23;
    v24 = *((unsigned int *)a1 + 59);
    if ((_DWORD)v24 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B60[v24])(&v43, a1 + 29);
    a1[26] = 0;
    a1[27] = 0;
    a1[28] = 0;
  }
  a1[29] = *(_QWORD *)(a2 + 232);
  *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
  a1[28] = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v25 = a1[30];
  if (v25)
  {
    a1[31] = v25;
    v26 = *((_DWORD *)a1 + 64) - v25;
    v41 = v25;
    v42 = v26;
    v27 = *((unsigned int *)a1 + 67);
    if ((_DWORD)v27 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B50[v27])(&v43, a1 + 33);
    a1[30] = 0;
    a1[31] = 0;
    a1[32] = 0;
  }
  a1[33] = *(_QWORD *)(a2 + 264);
  *((_OWORD *)a1 + 15) = *(_OWORD *)(a2 + 240);
  a1[32] = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *((_DWORD *)a1 + 68) = *(_DWORD *)(a2 + 272);
  v28 = a1[35];
  if (v28)
  {
    a1[36] = v28;
    v29 = *((_DWORD *)a1 + 74) - v28;
    v41 = v28;
    v42 = v29;
    v30 = *((unsigned int *)a1 + 77);
    if ((_DWORD)v30 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B50[v30])(&v43, a1 + 38);
    a1[35] = 0;
    a1[36] = 0;
    a1[37] = 0;
  }
  a1[38] = *(_QWORD *)(a2 + 304);
  a1[35] = *(_QWORD *)(a2 + 280);
  a1[36] = *(_QWORD *)(a2 + 288);
  a1[37] = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *((_DWORD *)a1 + 78) = *(_DWORD *)(a2 + 312);
  v31 = a1[40];
  if (v31)
  {
    a1[41] = v31;
    v32 = (unint64_t)(a1[42] - v31) >> 2;
    v41 = v31;
    v42 = v32;
    v33 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v33 == -1)
      sub_22316DD70();
    v43 = &v41;
    ((void (*)(uint64_t **, uint64_t *))off_24EC59B40[v33])(&v43, a1 + 43);
    a1[40] = 0;
    a1[41] = 0;
    a1[42] = 0;
  }
  a1[43] = *(_QWORD *)(a2 + 344);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  a1[42] = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *((_DWORD *)a1 + 88) = *(_DWORD *)(a2 + 352);
  v34 = (uint64_t *)((char *)a1 + 356);
  v35 = (uint64_t *)(a2 + 356);
  if (*((unsigned __int8 *)a1 + 380) == *(unsigned __int8 *)(a2 + 380))
  {
    if (*((_BYTE *)a1 + 380))
    {
      v36 = *v35;
      *((_DWORD *)a1 + 91) = *(_DWORD *)(a2 + 364);
      *v34 = v36;
      v37 = *(_QWORD *)(a2 + 368);
      *((_DWORD *)a1 + 94) = *(_DWORD *)(a2 + 376);
      a1[46] = v37;
    }
    return a1;
  }
  else
  {
    if (*((_BYTE *)a1 + 380))
    {
      *((_BYTE *)a1 + 380) = 0;
    }
    else
    {
      v39 = *v35;
      *((_DWORD *)a1 + 91) = *(_DWORD *)(a2 + 364);
      *v34 = v39;
      v40 = *(_QWORD *)(a2 + 368);
      *((_DWORD *)a1 + 94) = *(_DWORD *)(a2 + 376);
      a1[46] = v40;
      *((_BYTE *)a1 + 380) = 1;
    }
    return a1;
  }
}

uint64_t sub_2237C34D0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_22316F8F4(v3 - 48);
      while (v3 != v2);
      v4 = *(uint64_t **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2237C3528(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_22316F8F4(v3 - 48);
      while (v3 != v2);
      v4 = *(uint64_t **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237C3590(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  unsigned __int8 v4;
  uint64_t v6;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_22464B030;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 216) = v3;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  v4 = atomic_load((unsigned __int8 *)&qword_2557950E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2557950E8))
  {
    *(_QWORD *)&xmmword_2557950D8 = sub_223FF0FB0();
    *((_QWORD *)&xmmword_2557950D8 + 1) = v6;
    __cxa_guard_release(&qword_2557950E8);
  }
  *(_OWORD *)(a1 + 256) = xmmword_2557950D8;
  return a1;
}

void sub_2237C3638(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_guard_abort(&qword_2557950E8);
  sub_2237B4E4C(v3, *(_QWORD **)(v1 + 240));
  sub_223167354(v2);
  sub_2237C366C((void **)v1);
  _Unwind_Resume(a1);
}

void **sub_2237C366C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  char v6;

  v2 = (unsigned int *)a1[1];
  if (v2)
  {
    v3 = (unsigned int *)*a1;
    do
    {
      v4 = v3[4];
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, unsigned int *))off_24EC59BA0[v4])(&v6, v3);
      v3[4] = -1;
      v3 += 6;
      v2 = (unsigned int *)((char *)v2 - 1);
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != *a1)
    operator delete(*a1);
  return a1;
}

uint64_t *sub_2237C3710(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  const char *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  const char *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v86;
  _QWORD v87[3];
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  char *v97;
  std::__shared_weak_count *v98;
  _QWORD *__dst;
  __int128 v100;
  char __s[37];
  __int128 v102;
  _BYTE v103[24];
  __int128 v104;
  void *v105[2];
  unint64_t v106;
  char v107;
  _QWORD v108[5];

  v108[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 184) = *((_OWORD *)a1 + 16);
  v102 = *(_OWORD *)(a2 + 216);
  v3 = sub_2237C9C64((uint64_t **)a1 + 29, (unsigned __int8 *)&v102, &v102, a2);
  if (v4)
  {
    LOBYTE(v95) = 0;
    v5 = a1[1];
    if (v5)
    {
      v6 = *a1;
      v7 = 24 * v5;
      do
      {
        *(_QWORD *)v103 = v3 + 32;
        *(_QWORD *)&v103[8] = &v95;
        v8 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v8 == -1)
          sub_22316DD70();
        v87[0] = v103;
        ((void (*)(_QWORD *, uint64_t))off_24EC59BB0[v8])(v87, v6);
        v6 += 24;
        v7 -= 24;
      }
      while (v7);
    }
    return v3 + 32;
  }
  sub_2237C4200(&v94);
  if (**(int **)(v94 + 56) > 4)
    return v3 + 32;
  v9 = *(unsigned __int8 *)(v94 + 72);
  v10 = *(_BYTE *)(v94 + 72) != 0;
  v11 = sub_22322F254(v94, "OSLogSurrogateAppender", 1, 0);
  if (((v11 == 0) & ~v10) != 0)
    return v3 + 32;
  v87[0] = &v94;
  v87[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v87[2] = std::chrono::system_clock::now().__d_.__rep_;
  v88 = 4;
  v89 = "unknown file";
  v90 = 78;
  v92 = 0;
  v93 = 0;
  v91 = "unknown function";
  sub_2245664AC((unsigned __int8 *)&v102, __s);
  v12 = v94;
  if (*(char *)(v94 + 39) < 0)
  {
    v14 = *(const char **)(v94 + 16);
    v13 = *(_QWORD *)(v94 + 24);
    v86 = *(_QWORD *)v87[0] + 16;
    v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v16 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v94 + 39);
    v14 = (const char *)(*(_QWORD *)v87[0] + 16);
    v86 = (uint64_t)v14;
    v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v15 & 1) != 0)
      goto LABEL_13;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v103);
    sub_223199C58("com.apple.cv3d", (unint64_t)v103, &xmmword_255788F40);
    if ((_BYTE)v104 && (v103[23] & 0x80000000) != 0)
      operator delete(*(void **)v103);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_13:
  if (byte_255788F57 >= 0)
    v17 = (const char *)&xmmword_255788F40;
  else
    v17 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v18 = byte_255788F57;
  else
    v18 = *((_QWORD *)&xmmword_255788F40 + 1);
  v19 = v14;
  *(_QWORD *)v103 = os_log_create(v17, v14);
  v20 = &v103[8];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v21 = v11;
    v22 = v12;
    v23 = v9;
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *(_QWORD *)&v103[16] = v18;
    *(_QWORD *)&v104 = v25 | 0x8000000000000000;
    *(_QWORD *)&v103[8] = v20;
    v9 = v23;
    v12 = v22;
    v11 = v21;
    goto LABEL_26;
  }
  BYTE7(v104) = v18;
  if (v18)
LABEL_26:
    memmove(v20, v17, v18);
  v20[v18] = 0;
  BYTE8(v104) = 1;
  v26 = v105;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v27 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v27 = v13 | 7;
    v28 = v27 + 1;
    v26 = (void **)operator new(v27 + 1);
    v105[1] = (void *)v13;
    v106 = v28 | 0x8000000000000000;
    v105[0] = v26;
    goto LABEL_34;
  }
  HIBYTE(v106) = v13;
  if (v13)
LABEL_34:
    memmove(v26, v19, v13);
  *((_BYTE *)v26 + v13) = 0;
  v107 = 1;
  v29 = *(NSObject **)v103;
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  if (BYTE8(v104) && SBYTE7(v104) < 0)
    operator delete(*(void **)&v103[8]);
  if (*(_QWORD *)v103)
    os_release(*(void **)v103);
  if (!v11 || !*(_QWORD *)(v11 + 24))
  {
    os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
    *(_QWORD *)v103 = 0xD04100202;
    *(_WORD *)&v103[8] = 2080;
    *(_QWORD *)&v103[10] = __s;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
    goto LABEL_113;
  }
  v30 = _os_log_pack_size();
  v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
  v32 = (std::__shared_weak_count *)operator new();
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = v31;
  *(_QWORD *)&v95 = v31;
  *((_QWORD *)&v95 + 1) = v31;
  v97 = 0;
  v98 = 0;
  v96 = v32;
  v33 = strlen(__s);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    p_dst = operator new(v37 + 1);
    *(_QWORD *)&v100 = v34;
    *((_QWORD *)&v100 + 1) = v38 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_53;
  }
  HIBYTE(v100) = v33;
  p_dst = &__dst;
  if (v33)
LABEL_53:
    memcpy(p_dst, __s, v34);
  *((_BYTE *)p_dst + v34) = 0;
  v39 = __dst;
  v108[0] = v100;
  *(_QWORD *)((char *)v108 + 7) = *(_QWORD *)((char *)&v100 + 7);
  v40 = HIBYTE(v100);
  v41 = operator new(0x38uLL);
  v41[1] = 0;
  v41[2] = 0;
  v41[3] = off_24EC1FA48;
  *v41 = &off_24EC1F9F8;
  v42 = v108[0];
  v41[4] = v39;
  v41[5] = v42;
  *(_QWORD *)((char *)v41 + 47) = *(_QWORD *)((char *)v108 + 7);
  *((_BYTE *)v41 + 55) = v40;
  v108[0] = 0;
  *(_QWORD *)((char *)v108 + 7) = 0;
  v43 = v98;
  v97 = (char *)(v41 + 3);
  v98 = (std::__shared_weak_count *)v41;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_OWORD *)v103 = v95;
  v46 = v97;
  *(_QWORD *)&v103[16] = v96;
  if (v96)
  {
    v47 = (unint64_t *)&v96->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v98;
  *(_QWORD *)&v104 = v46;
  *((_QWORD *)&v104 + 1) = v98;
  if (v98)
  {
    v50 = (unint64_t *)&v98->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    v105[0] = v46;
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  else
  {
    v105[0] = v46;
  }
  v53 = v96;
  if (v96)
  {
    v54 = (unint64_t *)&v96->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(_QWORD *)v103;
  if (*((char *)v105[0] + 31) >= 0)
    v57 = (char *)v105[0] + 8;
  else
    v57 = (char *)*((_QWORD *)v105[0] + 1);
  v58 = _os_log_pack_fill();
  *(_DWORD *)v58 = 68157954;
  *(_DWORD *)(v58 + 4) = 13;
  *(_WORD *)(v58 + 8) = 2080;
  *(_QWORD *)(v58 + 10) = v57;
  v59 = operator new();
  v60 = *(unsigned __int8 *)(v12 + 39);
  v61 = v86;
  if ((v60 & 0x80u) != 0)
  {
    v61 = *(_QWORD *)(v12 + 16);
    v60 = *(_QWORD *)(v12 + 24);
  }
  *(_QWORD *)v59 = v56;
  *(_OWORD *)(v59 + 8) = *(_OWORD *)&v103[8];
  *(_QWORD *)&v103[8] = 0;
  *(_QWORD *)&v103[16] = 0;
  *(_OWORD *)(v59 + 24) = v104;
  v104 = 0uLL;
  *(_QWORD *)(v59 + 40) = v61;
  *(_QWORD *)(v59 + 48) = v60;
  *(_BYTE *)(v59 + 56) = 16;
  __dst = 0;
  *(_QWORD *)&v95 = v59;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v95);
  v62 = v95;
  *(_QWORD *)&v95 = 0;
  if (v62)
  {
    v63 = *(std::__shared_weak_count **)(v62 + 32);
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)(v62 + 16);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
    v69 = __dst;
    __dst = 0;
    if (v69)
    {
      v70 = (std::__shared_weak_count *)v69[4];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)v69[2];
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *(std::__shared_weak_count **)&v103[16];
  if (*(_QWORD *)&v103[16])
  {
    v80 = (unint64_t *)(*(_QWORD *)&v103[16] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_113:
  if (v9)
  {
    sub_2245664AC((unsigned __int8 *)&v102, v103);
    sub_22322C138((uint64_t)v87, "KFS %.13s not inserted because an item with the UUID existed", v103);
    sub_223182C08((uint64_t)v87);
  }
  sub_223182C08((uint64_t)v87);
  v82 = v93;
  if (v93)
  {
    v83 = (unint64_t *)&v93->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return v3 + 32;
}

void sub_2237C40B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C40F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237C4124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237C4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C41A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237C4200(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC5C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5C0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC5B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC5C0);
  }
  *a1 = qword_2540CC5B8;
}

void sub_2237C429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5C0);
  _Unwind_Resume(a1);
}

BOOL sub_2237C42F4(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t **v6;
  _QWORD *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  const char *v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  const char *v48;
  size_t v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  size_t v67;
  size_t v68;
  _QWORD *p_dst;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  char *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unsigned __int8 v119;
  const char *v120;
  size_t v121;
  const char *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  size_t v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  size_t v133;
  size_t v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  const char *v186;
  uint64_t v187;
  const char *__src;
  int __srca;
  __int128 v190;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v192;
  const char *v193;
  int v194;
  const char *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  _QWORD *__dst;
  __int128 v200;
  char __s[8];
  void *v202[2];
  uint64_t v203;
  _BYTE object[24];
  __int128 v205;
  void *v206;
  size_t v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  int v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  void *v219;
  void *v220;
  __int128 v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  char v228;
  void *__p;
  char *v230;
  char v231;
  uint64_t v232[2];
  __int128 v233;
  std::__shared_weak_count *v234;
  char *v235;
  std::__shared_weak_count *v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 30;
  v4 = a1[30];
  if (!v4)
    goto LABEL_31;
  v6 = (uint64_t **)(a1 + 29);
  v7 = a1 + 30;
  do
  {
    v8 = sub_22319835C((unsigned __int8 *)(v4 + 128), a2);
    if (v8 >= 0)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8 >= 0)
      v7 = (_QWORD *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v7 == v3 || (sub_22319835C(a2, (unsigned __int8 *)v7 + 128) & 0x80) != 0)
  {
LABEL_31:
    sub_2237C4200(v232);
    if (**(int **)(v232[0] + 56) > 4)
      return 0;
    v20 = *(unsigned __int8 *)(v232[0] + 72);
    v21 = sub_22322F254(v232[0], "OSLogSurrogateAppender", 1, 0);
    v22 = v21;
    if (!v20 && v21 == 0)
      return 0;
    *(_QWORD *)&v190 = v232;
    *((std::chrono::steady_clock::time_point *)&v190 + 1) = std::chrono::steady_clock::now();
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v192 = 4;
    v193 = "unknown file";
    v194 = 100;
    v196 = 0;
    v197 = 0;
    v195 = "unknown function";
    sub_2245664AC(a2, __s);
    v24 = v232[0];
    v25 = v232[0] + 16;
    if (*(char *)(v232[0] + 39) < 0)
    {
      v27 = *(const char **)(v232[0] + 16);
      v26 = *(_QWORD *)(v232[0] + 24);
      v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v50 & 1) != 0)
        goto LABEL_62;
    }
    else
    {
      v26 = *(unsigned __int8 *)(v232[0] + 39);
      v27 = (const char *)(*(_QWORD *)v190 + 16);
      v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v28 & 1) != 0)
        goto LABEL_62;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if ((_BYTE)v205 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_62:
    if (byte_255788F57 >= 0)
      v51 = (const char *)&xmmword_255788F40;
    else
      v51 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v52 = byte_255788F57;
    else
      v52 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v27;
    *(_QWORD *)object = os_log_create(v51, v27);
    v53 = &object[8];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v52 >= 0x17)
    {
      v54 = v22;
      v55 = v24;
      v56 = v25;
      v57 = v20;
      v58 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v58 = v52 | 7;
      v59 = v58 + 1;
      v53 = operator new(v58 + 1);
      *(_QWORD *)&object[16] = v52;
      *(_QWORD *)&v205 = v59 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v53;
      v20 = v57;
      v25 = v56;
      v24 = v55;
      v22 = v54;
    }
    else
    {
      BYTE7(v205) = v52;
      if (!v52)
      {
LABEL_76:
        v53[v52] = 0;
        BYTE8(v205) = 1;
        v60 = &v206;
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v26 >= 0x17)
        {
          v62 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v62 = v26 | 7;
          v63 = v62 + 1;
          v60 = operator new(v62 + 1);
          v207 = v26;
          v208 = v63 | 0x8000000000000000;
          v206 = v60;
        }
        else
        {
          HIBYTE(v208) = v26;
          if (!v26)
          {
            LOBYTE(v206) = 0;
            LOBYTE(v209) = 1;
            v61 = *(NSObject **)object;
            if ((SHIBYTE(v208) & 0x80000000) == 0)
              goto LABEL_80;
            goto LABEL_86;
          }
        }
        memmove(v60, __src, v26);
        *((_BYTE *)v60 + v26) = 0;
        LOBYTE(v209) = 1;
        v61 = *(NSObject **)object;
        if ((SHIBYTE(v208) & 0x80000000) == 0)
        {
LABEL_80:
          if (!BYTE8(v205))
            goto LABEL_89;
          goto LABEL_87;
        }
LABEL_86:
        operator delete(v206);
        if (!BYTE8(v205))
          goto LABEL_89;
LABEL_87:
        if (SBYTE7(v205) < 0)
          operator delete(*(void **)&object[8]);
LABEL_89:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v22 || !*(_QWORD *)(v22 + 24))
        {
          os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
          *(_QWORD *)object = 0xD04100202;
          *(_WORD *)&object[8] = 2080;
          *(_QWORD *)&object[10] = __s;
          v70 = (void *)_os_log_send_and_compose_impl();
          if (v70)
            free(v70);
          goto LABEL_165;
        }
        v64 = _os_log_pack_size();
        v65 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
        v66 = (std::__shared_weak_count *)operator new();
        v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v66->__shared_owners_ = 0;
        v66->__shared_weak_owners_ = 0;
        v66[1].__vftable = v65;
        *(_QWORD *)&v233 = v65;
        *((_QWORD *)&v233 + 1) = v65;
        v235 = 0;
        v236 = 0;
        v234 = v66;
        v67 = strlen(__s);
        if (v67 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v68 = v67;
        if (v67 >= 0x17)
        {
          v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v67 | 7) != 0x17)
            v71 = v67 | 7;
          v72 = v71 + 1;
          p_dst = operator new(v71 + 1);
          *(_QWORD *)&v200 = v68;
          *((_QWORD *)&v200 + 1) = v72 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v200) = v67;
          p_dst = &__dst;
          if (!v67)
          {
LABEL_103:
            *((_BYTE *)p_dst + v68) = 0;
            v73 = __dst;
            v202[0] = (void *)v200;
            *(void **)((char *)v202 + 7) = *(void **)((char *)&v200 + 7);
            v74 = HIBYTE(v200);
            v75 = (char *)operator new(0x38uLL);
            *((_QWORD *)v75 + 1) = 0;
            *((_QWORD *)v75 + 2) = 0;
            *((_QWORD *)v75 + 3) = off_24EC1FA48;
            *(_QWORD *)v75 = &off_24EC1F9F8;
            v76 = v202[0];
            *((_QWORD *)v75 + 4) = v73;
            *((_QWORD *)v75 + 5) = v76;
            *(void **)(v75 + 47) = *(void **)((char *)v202 + 7);
            v75[55] = v74;
            v202[0] = 0;
            *(void **)((char *)v202 + 7) = 0;
            v77 = v236;
            v235 = v75 + 24;
            v236 = (std::__shared_weak_count *)v75;
            if (v77)
            {
              p_shared_owners = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(p_shared_owners);
              while (__stlxr(v79 - 1, p_shared_owners));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            *(_OWORD *)object = v233;
            v80 = v235;
            *(_QWORD *)&object[16] = v234;
            if (v234)
            {
              v81 = (unint64_t *)&v234->__shared_owners_;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }
            v83 = v236;
            *(_QWORD *)&v205 = v80;
            *((_QWORD *)&v205 + 1) = v236;
            if (v236)
            {
              v84 = (unint64_t *)&v236->__shared_owners_;
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
              v206 = v80;
              do
                v86 = __ldaxr(v84);
              while (__stlxr(v86 - 1, v84));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            else
            {
              v206 = v80;
            }
            v87 = v234;
            if (v234)
            {
              v88 = (unint64_t *)&v234->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v90 = *(_QWORD *)object;
            if (*((char *)v206 + 31) >= 0)
              v91 = (char *)v206 + 8;
            else
              v91 = (char *)*((_QWORD *)v206 + 1);
            v92 = _os_log_pack_fill();
            *(_DWORD *)v92 = 68157954;
            *(_DWORD *)(v92 + 4) = 13;
            *(_WORD *)(v92 + 8) = 2080;
            *(_QWORD *)(v92 + 10) = v91;
            v93 = operator new();
            v94 = *(unsigned __int8 *)(v24 + 39);
            if ((v94 & 0x80u) == 0)
              v95 = v25;
            else
              v95 = *(_QWORD *)(v24 + 16);
            if ((v94 & 0x80u) != 0)
              v94 = *(_QWORD *)(v24 + 24);
            *(_QWORD *)v93 = v90;
            *(_OWORD *)(v93 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v93 + 24) = v205;
            v205 = 0uLL;
            *(_QWORD *)(v93 + 40) = v95;
            *(_QWORD *)(v93 + 48) = v94;
            *(_BYTE *)(v93 + 56) = 16;
            __dst = 0;
            *(_QWORD *)&v233 = v93;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v233);
            v96 = v233;
            *(_QWORD *)&v233 = 0;
            if (v96)
            {
              v97 = *(std::__shared_weak_count **)(v96 + 32);
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              v100 = *(std::__shared_weak_count **)(v96 + 16);
              if (v100)
              {
                v101 = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              MEMORY[0x227684CE8](v96, 0x10F0C40B62ED6C6);
              v103 = __dst;
              __dst = 0;
              if (v103)
              {
                v104 = (std::__shared_weak_count *)v103[4];
                if (v104)
                {
                  v105 = (unint64_t *)&v104->__shared_owners_;
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
                v107 = (std::__shared_weak_count *)v103[2];
                if (v107)
                {
                  v108 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                MEMORY[0x227684CE8](v103, 0x10F0C40B62ED6C6);
              }
            }
            v110 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
            if (*((_QWORD *)&v205 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v114 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
LABEL_165:
            if (v20)
            {
              sub_2245664AC(a2, object);
              sub_22322C138((uint64_t)&v190, "Failed to persist KFS %.13s. Item not found.", object);
              sub_223182C08((uint64_t)&v190);
            }
            sub_223182C08((uint64_t)&v190);
            v116 = v197;
            if (v197)
            {
              v117 = (unint64_t *)&v197->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            return 0;
          }
        }
        memcpy(p_dst, __s, v68);
        goto LABEL_103;
      }
    }
    memmove(v53, v51, v52);
    goto LABEL_76;
  }
  v10 = v7[52];
  v11 = v7[53];
  v190 = 0uLL;
  rep = 0;
  v12 = v11 - v10;
  if (v11 == v10)
  {
    v29 = 0uLL;
  }
  else
  {
    v13 = 0x21CFB2B78C13521DLL * (v12 >> 3);
    if (v13 >> 60)
      sub_22316E078();
    *(_QWORD *)&v190 = operator new(0x1CFB2B78C13521D0 * (v12 >> 3));
    *((_QWORD *)&v190 + 1) = v190;
    rep = v190 + 16 * v13;
    *(_QWORD *)__s = &v190;
    do
    {
      sub_2236EA118((uint64_t)object, v10);
      v233 = 0uLL;
      sub_2232E9564((char ***)__s, &v233);
      if (v231)
      {
        v14 = (char *)__p;
        if (__p)
        {
          v15 = v230;
          v16 = __p;
          if (v230 != __p)
          {
            v17 = v230;
            do
            {
              v19 = (void *)*((_QWORD *)v17 - 3);
              v17 -= 24;
              v18 = v19;
              if (v19)
              {
                *((_QWORD *)v15 - 2) = v18;
                operator delete(v18);
              }
              v15 = v17;
            }
            while (v17 != v14);
            v16 = __p;
          }
          v230 = v14;
          operator delete(v16);
        }
      }
      if (v228 && v226)
      {
        v227 = v226;
        operator delete(v226);
      }
      if (v224)
      {
        v225 = v224;
        operator delete(v224);
      }
      if (v222)
      {
        v223 = v222;
        operator delete(v222);
      }
      v10 += 424;
    }
    while (v10 != v11);
    v29 = v190;
    v12 = rep;
  }
  *(_OWORD *)v202 = v29;
  v203 = v12;
  *(_QWORD *)&v190 = v7[61];
  sub_22371A2C8((uint64_t)object, v7 + 59, &v190);
  *(_QWORD *)&v205 = v7[62];
  v30 = *((_OWORD *)v7 + 18);
  v209 = *((_OWORD *)v7 + 17);
  v210 = v30;
  v31 = *((_OWORD *)v7 + 20);
  v211 = *((_OWORD *)v7 + 19);
  v212 = v31;
  v213 = *((_DWORD *)v7 + 84);
  v214 = v7[43];
  v32 = *((_OWORD *)v7 + 22);
  v33 = *((_OWORD *)v7 + 23);
  v34 = *((_OWORD *)v7 + 25);
  v217 = *((_OWORD *)v7 + 24);
  v218 = v34;
  v215 = v32;
  v216 = v33;
  if (&v219 != v7 + 52)
    sub_2237C8C94((uint64_t *)&v219, v7[52], v7[53], 0x21CFB2B78C13521DLL * ((uint64_t)(v7[53] - v7[52]) >> 3));
  v221 = *(_OWORD *)(v7 + 55);
  v35 = sub_223710B30(a1 + 27, object, (uint64_t)v202);
  v36 = v219;
  if (v219)
  {
    v37 = (uint64_t)v220;
    v38 = v219;
    if (v220 != v219)
    {
      do
      {
        v37 -= 424;
        sub_2236EA79C(v37);
      }
      while ((void *)v37 != v36);
      v38 = v219;
    }
    v220 = v36;
    operator delete(v38);
  }
  if (v35)
  {
    LOBYTE(v233) = 0;
    v39 = a1[1];
    if (v39)
    {
      v40 = *a1;
      v41 = 24 * v39;
      do
      {
        *(_QWORD *)object = v7 + 32;
        *(_QWORD *)&object[8] = &v233;
        v42 = *(unsigned int *)(v40 + 16);
        if ((_DWORD)v42 == -1)
          sub_22316DD70();
        *(_QWORD *)&v190 = object;
        ((void (*)(__int128 *, uint64_t))off_24EC59BC0[v42])(&v190, v40);
        v40 += 24;
        v41 -= 24;
      }
      while (v41);
    }
    sub_2237C9E5C(v6, v7);
    goto LABEL_281;
  }
  sub_2237C4200(&v198);
  if (**(int **)(v198 + 56) > 4)
    goto LABEL_281;
  v43 = *(unsigned __int8 *)(v198 + 72);
  v44 = sub_22322F254(v198, "OSLogSurrogateAppender", 1, 0);
  v45 = v44;
  if (!v43 && v44 == 0)
    goto LABEL_281;
  *(_QWORD *)&v190 = &v198;
  *((std::chrono::steady_clock::time_point *)&v190 + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v192 = 4;
  v193 = "unknown file";
  v194 = 96;
  v196 = 0;
  v197 = 0;
  v195 = "unknown function";
  sub_2245664AC(a2, __s);
  v47 = *(_QWORD *)v190;
  v48 = (const char *)(*(_QWORD *)v190 + 16);
  v186 = v48;
  v187 = *(_QWORD *)v190;
  if (*(char *)(*(_QWORD *)v190 + 39) < 0)
  {
    v48 = *(const char **)(v47 + 16);
    v49 = *(_QWORD *)(v47 + 24);
  }
  else
  {
    v49 = *(unsigned __int8 *)(*(_QWORD *)v190 + 39);
  }
  __srca = v43;
  v119 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v205 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v120 = (const char *)&xmmword_255788F40;
  else
    v120 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v121 = byte_255788F57;
  else
    v121 = *((_QWORD *)&xmmword_255788F40 + 1);
  v122 = v48;
  *(_QWORD *)object = os_log_create(v120, v48);
  v123 = &object[8];
  if (v121 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v121 >= 0x17)
  {
    v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17)
      v124 = v121 | 7;
    v125 = v124 + 1;
    v123 = operator new(v124 + 1);
    *(_QWORD *)&object[16] = v121;
    *(_QWORD *)&v205 = v125 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v123;
    goto LABEL_187;
  }
  BYTE7(v205) = v121;
  if (v121)
LABEL_187:
    memmove(v123, v120, v121);
  v123[v121] = 0;
  BYTE8(v205) = 1;
  v126 = &v206;
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v49 >= 0x17)
  {
    v127 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v127 = v49 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v207 = v49;
    v208 = v128 | 0x8000000000000000;
    v206 = v126;
    goto LABEL_195;
  }
  HIBYTE(v208) = v49;
  if (v49)
LABEL_195:
    memmove(v126, v122, v49);
  *((_BYTE *)v126 + v49) = 0;
  LOBYTE(v209) = 1;
  v129 = *(NSObject **)object;
  if (SHIBYTE(v208) < 0)
    operator delete(v206);
  if (BYTE8(v205) && SBYTE7(v205) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v45 || !*(_QWORD *)(v45 + 24))
  {
    os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
    *(_QWORD *)object = 0xD04100202;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = __s;
    v136 = (void *)_os_log_send_and_compose_impl();
    if (v136)
      free(v136);
    goto LABEL_274;
  }
  v130 = _os_log_pack_size();
  v131 = (std::__shared_weak_count_vtbl *)operator new(v130, (std::align_val_t)8uLL);
  v132 = (std::__shared_weak_count *)operator new();
  v132->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v132->__shared_owners_ = 0;
  v132->__shared_weak_owners_ = 0;
  v132[1].__vftable = v131;
  *(_QWORD *)&v233 = v131;
  *((_QWORD *)&v233 + 1) = v131;
  v235 = 0;
  v236 = 0;
  v234 = v132;
  v133 = strlen(__s);
  if (v133 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v134 = v133;
  if (v133 >= 0x17)
  {
    v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v133 | 7) != 0x17)
      v137 = v133 | 7;
    v138 = v137 + 1;
    v135 = operator new(v137 + 1);
    *(_QWORD *)&v200 = v134;
    *((_QWORD *)&v200 + 1) = v138 | 0x8000000000000000;
    __dst = v135;
    goto LABEL_214;
  }
  HIBYTE(v200) = v133;
  v135 = &__dst;
  if (v133)
LABEL_214:
    memcpy(v135, __s, v134);
  *((_BYTE *)v135 + v134) = 0;
  v139 = __dst;
  v232[0] = v200;
  *(uint64_t *)((char *)v232 + 7) = *(_QWORD *)((char *)&v200 + 7);
  v140 = HIBYTE(v200);
  v141 = operator new(0x38uLL);
  v141[1] = 0;
  v141[2] = 0;
  v141[3] = off_24EC1FA48;
  *v141 = &off_24EC1F9F8;
  v142 = v232[0];
  v141[4] = v139;
  v141[5] = v142;
  *(_QWORD *)((char *)v141 + 47) = *(uint64_t *)((char *)v232 + 7);
  *((_BYTE *)v141 + 55) = v140;
  memset(v232, 0, 15);
  v143 = v236;
  v235 = (char *)(v141 + 3);
  v236 = (std::__shared_weak_count *)v141;
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  *(_OWORD *)object = v233;
  v146 = v235;
  *(_QWORD *)&object[16] = v234;
  if (v234)
  {
    v147 = (unint64_t *)&v234->__shared_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  v149 = v236;
  *(_QWORD *)&v205 = v146;
  *((_QWORD *)&v205 + 1) = v236;
  if (v236)
  {
    v150 = (unint64_t *)&v236->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    v206 = v146;
    do
      v152 = __ldaxr(v150);
    while (__stlxr(v152 - 1, v150));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  else
  {
    v206 = v146;
  }
  v153 = v234;
  if (v234)
  {
    v154 = (unint64_t *)&v234->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = *(_QWORD *)object;
  if (*((char *)v206 + 31) >= 0)
    v157 = (char *)v206 + 8;
  else
    v157 = (char *)*((_QWORD *)v206 + 1);
  v158 = _os_log_pack_fill();
  *(_DWORD *)v158 = 68157954;
  *(_DWORD *)(v158 + 4) = 13;
  *(_WORD *)(v158 + 8) = 2080;
  *(_QWORD *)(v158 + 10) = v157;
  v159 = operator new();
  v160 = *(unsigned __int8 *)(v187 + 39);
  v161 = v186;
  if ((v160 & 0x80u) != 0)
  {
    v161 = *(const char **)(v187 + 16);
    v160 = *(_QWORD *)(v187 + 24);
  }
  *(_QWORD *)v159 = v156;
  *(_OWORD *)(v159 + 8) = *(_OWORD *)&object[8];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v159 + 24) = v205;
  v205 = 0uLL;
  *(_QWORD *)(v159 + 40) = v161;
  *(_QWORD *)(v159 + 48) = v160;
  *(_BYTE *)(v159 + 56) = 16;
  __dst = 0;
  *(_QWORD *)&v233 = v159;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v45 + 24) + 40))(*(_QWORD *)(v45 + 24), &v233);
  v162 = v233;
  *(_QWORD *)&v233 = 0;
  if (v162)
  {
    v163 = *(std::__shared_weak_count **)(v162 + 32);
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v166 = *(std::__shared_weak_count **)(v162 + 16);
    if (v166)
    {
      v167 = (unint64_t *)&v166->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    MEMORY[0x227684CE8](v162, 0x10F0C40B62ED6C6);
    v169 = __dst;
    __dst = 0;
    if (v169)
    {
      v170 = (std::__shared_weak_count *)v169[4];
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      v173 = (std::__shared_weak_count *)v169[2];
      if (v173)
      {
        v174 = (unint64_t *)&v173->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      MEMORY[0x227684CE8](v169, 0x10F0C40B62ED6C6);
    }
  }
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v180 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
LABEL_274:
  if (__srca)
  {
    sub_2245664AC(a2, object);
    sub_22322C138((uint64_t)&v190, "Failed to persist KFS %.13s. Write failed.", object);
    sub_223182C08((uint64_t)&v190);
  }
  sub_223182C08((uint64_t)&v190);
  v182 = v197;
  if (v197)
  {
    v183 = (unint64_t *)&v197->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
LABEL_281:
  if (v202[0])
  {
    v202[1] = v202[0];
    operator delete(v202[0]);
  }
  return (v35 & 1) != 0;
}

void sub_2237C5774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,void *a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a43 && a42 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2237C5AD0(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v17;
  _QWORD v18[2];
  _QWORD *v19;

  v4 = a1 + 30;
  v5 = a1[30];
  if (!v5)
    goto LABEL_16;
  v6 = (uint64_t **)(a1 + 29);
  v7 = a1 + 30;
  do
  {
    v8 = sub_22319835C((unsigned __int8 *)(v5 + 128), a2);
    if (v8 >= 0)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (v8 >= 0)
      v7 = (_QWORD *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v7 == v4 || (sub_22319835C(a2, (unsigned __int8 *)v7 + 128) & 0x80) != 0)
  {
LABEL_16:
    v14 = 0;
  }
  else
  {
    v17 = 1;
    v10 = a1[1];
    if (v10)
    {
      v11 = *a1;
      v12 = 24 * v10;
      do
      {
        v18[0] = v7 + 32;
        v18[1] = &v17;
        v13 = *(unsigned int *)(v11 + 16);
        if ((_DWORD)v13 == -1)
          sub_22316DD70();
        v19 = v18;
        ((void (*)(_QWORD **, uint64_t))off_24EC59BC0[v13])(&v19, v11);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    sub_2237C9E5C(v6, v7);
    v14 = 1;
  }
  if (sub_223714774(a1 + 27, a2))
    v15 = 256;
  else
    v15 = 0;
  return v15 | v14;
}

void sub_2237C5C04(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19, char __s,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t p_object,uint64_t rep,__int128 a27,__int128 a28,__int128 a29,__int128 a30,int a31,uint64_t a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 __p,uint64_t a38,__int128 a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,__int128 object,__int128 a48,__int128 a49,__int128 a50,__int128 a51,int a52,uint64_t a53)
{
  unsigned __int8 *v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t *v73;
  uint64_t *v74;
  char v75;
  char v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  size_t v87;
  const char *v88;
  unsigned __int8 v89;
  const char *v90;
  size_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  size_t v99;
  void *v100;
  _QWORD *v101;
  size_t v102;
  size_t v103;
  int v104;
  unint64_t *v105;
  uint64_t *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  _QWORD *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  const char *v165;
  size_t v166;
  uint64_t *v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  const char *v170;
  size_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  size_t v181;
  void *v182;
  _QWORD *v183;
  size_t v184;
  size_t v185;
  _BYTE *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  _QWORD *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t *v239;
  char v240;
  uint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *__src;
  void *__srca;
  int vars8_4;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned __int8 *v256;

  v53 = a2;
  v54 = a1;
  STACK[0x718] = *MEMORY[0x24BDAC8D0];
  a13 = a3;
  sub_2237131F4(a1 + 27, a2, (uint64_t)&a10);
  v56 = a10;
  if (a10)
  {
    v254 = a4;
    v256 = v53;
    v252 = a10;
    sub_223748C70(&a13, v54[32], v54[33], (_QWORD *)a10);
    v57 = a10;
    *(_OWORD *)(a10 + 232) = *((_OWORD *)v54 + 16);
    v58 = *(_QWORD *)v57;
    v59 = *(_QWORD *)(v57 + 8);
    v61 = *(_QWORD *)(v57 + 16);
    v60 = *(_QWORD *)(v57 + 24);
    v62 = *(_OWORD *)(v57 + 80);
    a48 = *(_OWORD *)(v57 + 64);
    a49 = v62;
    a52 = *(_DWORD *)(v57 + 128);
    v63 = *(_OWORD *)(v57 + 112);
    a50 = *(_OWORD *)(v57 + 96);
    a51 = v63;
    a53 = *(_QWORD *)(v57 + 136);
    *((_QWORD *)&object + 1) = &off_24EC20868;
    *(_QWORD *)&object = &off_24EC207B8;
    v64 = *(_OWORD *)(v57 + 160);
    *(_OWORD *)&STACK[0x600] = *(_OWORD *)(v57 + 144);
    *(_OWORD *)&STACK[0x610] = v64;
    v65 = *(_OWORD *)(v57 + 192);
    *(_OWORD *)&STACK[0x620] = *(_OWORD *)(v57 + 176);
    *(_OWORD *)&STACK[0x630] = v65;
    STACK[0x650] = 0;
    v66 = *(_QWORD *)(v57 + 208);
    v67 = *(_QWORD *)(v57 + 216);
    *(_OWORD *)&STACK[0x640] = 0uLL;
    sub_2237C9ADC((uint64_t)&STACK[0x640], v66, v67, 0x21CFB2B78C13521DLL * ((v67 - v66) >> 3));
    *(_OWORD *)&STACK[0x658] = *(_OWORD *)(v57 + 232);
    v68 = *(_OWORD *)((unint64_t)&object | 0x20);
    a27 = a48;
    a28 = v68;
    v69 = *(_OWORD *)(((unint64_t)&object | 0x30) + 0x10);
    a29 = *(_OWORD *)((unint64_t)&object | 0x30);
    a30 = v69;
    a31 = *(_DWORD *)(((unint64_t)&object | 0x30) + 0x20);
    a32 = a53;
    p_object = (uint64_t)&off_24EC207B8;
    rep = (uint64_t)&off_24EC20868;
    v70 = *(_OWORD *)((unint64_t)&object | 0x60);
    v71 = *(_OWORD *)(((unint64_t)&object | 0x60) + 0x10);
    v72 = *(_OWORD *)(((unint64_t)&object | 0x60) + 0x30);
    a35 = *(_OWORD *)(((unint64_t)&object | 0x60) + 0x20);
    a36 = v72;
    a33 = v70;
    a34 = v71;
    __p = *(_OWORD *)&STACK[0x640];
    a38 = STACK[0x650];
    STACK[0x648] = 0;
    STACK[0x650] = 0;
    STACK[0x640] = 0;
    a39 = *(_OWORD *)(v57 + 232);
    a40 = 0;
    a41 = 0;
    a42 = v58;
    a43 = v59;
    v73 = v54;
    a44 = v61;
    a45 = v60;
    v53 = v256;
    v74 = sub_2237C9C64((uint64_t **)v54 + 29, v256, v256, (uint64_t)&p_object);
    v76 = v75;
    if (a41)
      std::__shared_weak_count::__release_weak(a41);
    v77 = (void *)__p;
    if ((_QWORD)__p)
    {
      v78 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
        {
          v78 -= 424;
          sub_2236EA79C(v78);
        }
        while ((void *)v78 != v77);
        v77 = (void *)__p;
      }
      operator delete(v77);
    }
    if (v76)
    {
      LOBYTE(a14) = 1;
      v79 = v54[1];
      if (v79)
      {
        v80 = *v54;
        v81 = 24 * v79;
        do
        {
          *(_QWORD *)&object = v74 + 32;
          *((_QWORD *)&object + 1) = &a14;
          v82 = *(unsigned int *)(v80 + 16);
          if ((_DWORD)v82 == -1)
            sub_22316DD70();
          p_object = (uint64_t)&object;
          ((void (*)(uint64_t *, uint64_t))off_24EC59BB0[v82])(&p_object, v80);
          v80 += 24;
          v81 -= 24;
        }
        while (v81);
      }
      v56 = v252;
      v53 = v256;
      goto LABEL_131;
    }
    sub_2237C4200(&a9);
    v56 = v252;
    if (**(int **)(a9 + 56) > 4
      || ((v83 = *(unsigned __int8 *)(a9 + 72), v84 = sub_22322F254(a9, "OSLogSurrogateAppender", 1, 0), !v83)
        ? (v85 = v84 == 0)
        : (v85 = 0),
          v85))
    {
LABEL_131:
      *(_QWORD *)a4 = v74 + 32;
      *(_BYTE *)(a4 + 8) = 1;
      *(_BYTE *)(a4 + 16) = v76;
      goto LABEL_132;
    }
    v250 = v84;
    p_object = (uint64_t)&a9;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&a27 = std::chrono::system_clock::now();
    DWORD2(a27) = 4;
    *(_QWORD *)&a28 = "unknown file";
    DWORD2(a28) = 131;
    *((_QWORD *)&a29 + 1) = 0;
    *(_QWORD *)&a30 = 0;
    *(_QWORD *)&a29 = "unknown function";
    sub_2245664AC(v256, &__s);
    v86 = *(_QWORD *)p_object;
    if (*(char *)(*(_QWORD *)p_object + 39) < 0)
    {
      v88 = *(const char **)(v86 + 16);
      v87 = *(_QWORD *)(v86 + 24);
    }
    else
    {
      v87 = *(unsigned __int8 *)(*(_QWORD *)p_object + 39);
      v88 = (const char *)(*(_QWORD *)p_object + 16);
    }
    v245 = *(_QWORD *)p_object + 16;
    v246 = *(_QWORD *)p_object;
    v89 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if (BYTE8(a48) && SBYTE7(a48) < 0)
        operator delete((void *)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v53 = v256;
      v56 = v252;
    }
    if (byte_255788F57 >= 0)
      v90 = (const char *)&xmmword_255788F40;
    else
      v90 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v91 = byte_255788F57;
    else
      v91 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v88;
    *(_QWORD *)&object = os_log_create(v90, v88);
    v92 = (char *)&object + 8;
    if (v91 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    vars8_4 = v83;
    if (v91 >= 0x17)
    {
      v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v91 | 7) != 0x17)
        v93 = v91 | 7;
      v94 = v93 + 1;
      v92 = (char *)operator new(v93 + 1);
      *((_QWORD *)&a48 + 1) = v94 | 0x8000000000000000;
      *((_QWORD *)&object + 1) = v92;
      *(_QWORD *)&a48 = v91;
      v83 = vars8_4;
    }
    else
    {
      HIBYTE(a48) = v91;
      if (!v91)
      {
LABEL_38:
        v92[v91] = 0;
        LOBYTE(a49) = 1;
        v95 = (char *)&a49 + 8;
        if (v87 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a4 = v254;
        v54 = v73;
        if (v87 >= 0x17)
        {
          v96 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v87 | 7) != 0x17)
            v96 = v87 | 7;
          v97 = v96 + 1;
          v95 = (char *)operator new(v96 + 1);
          *((_QWORD *)&a50 + 1) = v97 | 0x8000000000000000;
          *((_QWORD *)&a49 + 1) = v95;
          *(_QWORD *)&a50 = v87;
          v83 = vars8_4;
        }
        else
        {
          HIBYTE(a50) = v87;
          if (!v87)
          {
LABEL_46:
            v95[v87] = 0;
            LOBYTE(a51) = 1;
            v98 = object;
            if (SHIBYTE(a50) < 0)
              operator delete(*((void **)&a49 + 1));
            if ((_BYTE)a49 && SHIBYTE(a48) < 0)
              operator delete(*((void **)&object + 1));
            if ((_QWORD)object)
              os_release((void *)object);
            if (!v250 || !*(_QWORD *)(v250 + 24))
            {
              os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
              *(_QWORD *)&object = 0xD04100202;
              WORD4(object) = 2080;
              *(_QWORD *)((char *)&object + 10) = &__s;
              v107 = (void *)_os_log_send_and_compose_impl();
              if (v107)
                free(v107);
              goto LABEL_124;
            }
            v99 = _os_log_pack_size();
            v100 = operator new(v99, (std::align_val_t)8uLL);
            v101 = (_QWORD *)operator new();
            *v101 = &off_24EC1F7F0;
            v101[1] = 0;
            v101[2] = 0;
            v101[3] = v100;
            *(_QWORD *)&a14 = v100;
            *((_QWORD *)&a14 + 1) = v100;
            a16 = 0;
            a17 = 0;
            a15 = (uint64_t)v101;
            v102 = strlen(&__s);
            if (v102 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v103 = v102;
            v104 = v83;
            __srca = (void *)v99;
            if (v102 >= 0x17)
            {
              v108 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v102 | 7) != 0x17)
                v108 = v102 | 7;
              v109 = v108 + 1;
              v105 = (unint64_t *)operator new(v108 + 1);
              STACK[0x710] = v109 | 0x8000000000000000;
              STACK[0x700] = (unint64_t)v105;
              STACK[0x708] = v103;
            }
            else
            {
              LOBYTE(STACK[0x717]) = v102;
              v105 = &STACK[0x700];
              if (!v102)
              {
                v106 = v74;
                goto LABEL_65;
              }
            }
            v106 = v74;
            memcpy(v105, &__s, v103);
LABEL_65:
            *((_BYTE *)v105 + v103) = 0;
            v110 = STACK[0x700];
            STACK[0x6F0] = STACK[0x708];
            STACK[0x6F7] = STACK[0x70F];
            v111 = STACK[0x717];
            v112 = operator new(0x38uLL);
            v112[1] = 0;
            v112[2] = 0;
            v112[3] = off_24EC1FA48;
            *v112 = &off_24EC1F9F8;
            v113 = STACK[0x6F0];
            v112[4] = v110;
            v112[5] = v113;
            *(_QWORD *)((char *)v112 + 47) = STACK[0x6F7];
            *((_BYTE *)v112 + 55) = v111;
            STACK[0x6F0] = 0;
            STACK[0x6F7] = 0;
            v114 = (std::__shared_weak_count *)a17;
            a16 = (uint64_t)(v112 + 3);
            a17 = (uint64_t)v112;
            v54 = v73;
            v56 = v252;
            v74 = v106;
            v83 = v104;
            if (v114)
            {
              p_shared_owners = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(p_shared_owners);
              while (__stlxr(v116 - 1, p_shared_owners));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            object = a14;
            v117 = a16;
            *(_QWORD *)&a48 = a15;
            if (a15)
            {
              v118 = (unint64_t *)(a15 + 8);
              do
                v119 = __ldxr(v118);
              while (__stxr(v119 + 1, v118));
            }
            v120 = (std::__shared_weak_count *)a17;
            *((_QWORD *)&a48 + 1) = v117;
            *(_QWORD *)&a49 = a17;
            if (a17)
            {
              v121 = (unint64_t *)(a17 + 8);
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
              *((_QWORD *)&a49 + 1) = v117;
              do
                v123 = __ldaxr(v121);
              while (__stlxr(v123 - 1, v121));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            else
            {
              *((_QWORD *)&a49 + 1) = v117;
            }
            v124 = (std::__shared_weak_count *)a15;
            if (a15)
            {
              v125 = (unint64_t *)(a15 + 8);
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v127 = object;
            if (*(char *)(*((_QWORD *)&a49 + 1) + 31) >= 0)
              v128 = *((_QWORD *)&a49 + 1) + 8;
            else
              v128 = *(_QWORD *)(*((_QWORD *)&a49 + 1) + 8);
            v129 = _os_log_pack_fill();
            *(_DWORD *)v129 = 68157954;
            *(_DWORD *)(v129 + 4) = 13;
            *(_WORD *)(v129 + 8) = 2080;
            *(_QWORD *)(v129 + 10) = v128;
            v130 = operator new();
            v131 = *(unsigned __int8 *)(v246 + 39);
            v132 = v245;
            if ((v131 & 0x80u) != 0)
            {
              v132 = *(_QWORD *)(v246 + 16);
              v131 = *(_QWORD *)(v246 + 24);
            }
            *(_QWORD *)v130 = v127;
            *(_OWORD *)(v130 + 8) = *(__int128 *)((char *)&object + 8);
            *((_QWORD *)&object + 1) = 0;
            *(_QWORD *)&a48 = 0;
            *(_OWORD *)(v130 + 24) = *(__int128 *)((char *)&a48 + 8);
            *((_QWORD *)&a48 + 1) = 0;
            *(_QWORD *)&a49 = 0;
            *(_QWORD *)(v130 + 40) = v132;
            *(_QWORD *)(v130 + 48) = v131;
            *(_BYTE *)(v130 + 56) = 16;
            STACK[0x700] = 0;
            *(_QWORD *)&a14 = v130;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v250 + 24) + 40))(*(_QWORD *)(v250 + 24), &a14);
            v133 = a14;
            *(_QWORD *)&a14 = 0;
            if (v133)
            {
              v134 = *(std::__shared_weak_count **)(v133 + 32);
              if (v134)
              {
                v135 = (unint64_t *)&v134->__shared_owners_;
                do
                  v136 = __ldaxr(v135);
                while (__stlxr(v136 - 1, v135));
                if (!v136)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              v137 = *(std::__shared_weak_count **)(v133 + 16);
              if (v137)
              {
                v138 = (unint64_t *)&v137->__shared_owners_;
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              MEMORY[0x227684CE8](v133, 0x10F0C40B62ED6C6);
              v140 = STACK[0x700];
              STACK[0x700] = 0;
              if (v140)
              {
                v141 = *(std::__shared_weak_count **)(v140 + 32);
                if (v141)
                {
                  v142 = (unint64_t *)&v141->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                v144 = *(std::__shared_weak_count **)(v140 + 16);
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
                MEMORY[0x227684CE8](v140, 0x10F0C40B62ED6C6);
              }
            }
            v147 = (std::__shared_weak_count *)a49;
            if ((_QWORD)a49)
            {
              v148 = (unint64_t *)(a49 + 8);
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v150 = (std::__shared_weak_count *)a48;
            if ((_QWORD)a48)
            {
              v151 = (unint64_t *)(a48 + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
LABEL_124:
            if (v83)
            {
              sub_2245664AC(v53, &object);
              sub_22322C138((uint64_t)&p_object, "Failed to restore KFS %.13s. Item with UUID already in memory.", (const char *)&object);
              sub_223182C08((uint64_t)&p_object);
            }
            sub_223182C08((uint64_t)&p_object);
            v153 = (std::__shared_weak_count *)a30;
            if ((_QWORD)a30)
            {
              v154 = (unint64_t *)(a30 + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            goto LABEL_131;
          }
        }
        memmove(v95, __src, v87);
        goto LABEL_46;
      }
    }
    memmove(v92, v90, v91);
    goto LABEL_38;
  }
LABEL_132:
  if ((_QWORD)a11)
  {
    *((_QWORD *)&a11 + 1) = a11;
    operator delete((void *)a11);
  }
  v156 = (_QWORD *)a10;
  a10 = 0;
  if (v156)
  {
    v157 = v156[26];
    if (v157)
    {
      v158 = v156[27];
      v159 = (void *)v156[26];
      if (v158 != v157)
      {
        do
        {
          v158 -= 424;
          sub_2236EA79C(v158);
        }
        while (v158 != v157);
        v159 = (void *)v156[26];
      }
      v156[27] = v157;
      operator delete(v159);
    }
    v156[6] = &off_24EC20828;
    MEMORY[0x227684CE8](v156, 0x10A0C4047C2BC0BLL);
  }
  if (!v56)
  {
    sub_2237C4200(&STACK[0x6F0]);
    v160 = STACK[0x6F0];
    if (**(int **)(STACK[0x6F0] + 56) > 4
      || (v161 = *(unsigned __int8 *)(v160 + 72),
          v162 = sub_22322F254(v160, "OSLogSurrogateAppender", 1, 0),
          v163 = v162,
          !v161)
      && !v162)
    {
LABEL_256:
      v238 = v54[30];
      v237 = v54 + 30;
      v236 = v238;
      if (!v238)
        goto LABEL_267;
      v239 = v237;
      do
      {
        v240 = sub_22319835C((unsigned __int8 *)(v236 + 128), v53);
        if (v240 >= 0)
          v241 = (uint64_t *)v236;
        else
          v241 = (uint64_t *)(v236 + 8);
        if (v240 >= 0)
          v239 = (uint64_t *)v236;
        v236 = *v241;
      }
      while (*v241);
      if (v239 == v237 || (char)sub_22319835C(v53, (unsigned __int8 *)v239 + 128) < 0)
      {
LABEL_267:
        v242 = 0;
        v243 = 0;
        v244 = 0;
      }
      else
      {
        v242 = (unint64_t)(v239 + 32) & 0xFFFFFFFFFFFFFF00;
        v243 = v239;
        v244 = 1;
      }
      *(_QWORD *)a4 = v243 | v242;
      *(_QWORD *)(a4 + 8) = v244;
      *(_BYTE *)(a4 + 16) = 0;
      return;
    }
    p_object = (uint64_t)&STACK[0x6F0];
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&a27 = std::chrono::system_clock::now();
    DWORD2(a27) = 4;
    *(_QWORD *)&a28 = "unknown file";
    DWORD2(a28) = 138;
    *((_QWORD *)&a29 + 1) = 0;
    *(_QWORD *)&a30 = 0;
    *(_QWORD *)&a29 = "unknown function";
    sub_2245664AC(v53, &__s);
    v164 = *(_QWORD *)p_object;
    v165 = (const char *)(*(_QWORD *)p_object + 16);
    v251 = (uint64_t)v165;
    v253 = *(_QWORD *)p_object;
    if (*(char *)(*(_QWORD *)p_object + 39) < 0)
    {
      v165 = *(const char **)(v164 + 16);
      v166 = *(_QWORD *)(v164 + 24);
      v255 = v161;
      v167 = v54;
      v169 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v169 & 1) != 0)
        goto LABEL_149;
    }
    else
    {
      v166 = *(unsigned __int8 *)(*(_QWORD *)p_object + 39);
      v255 = v161;
      v167 = v54;
      v168 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v168 & 1) != 0)
        goto LABEL_149;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if (BYTE8(a48) && SBYTE7(a48) < 0)
        operator delete((void *)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_149:
    if (byte_255788F57 >= 0)
      v170 = (const char *)&xmmword_255788F40;
    else
      v170 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v171 = byte_255788F57;
    else
      v171 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)&object = os_log_create(v170, v165);
    v172 = (char *)&object + 8;
    if (v171 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v171 >= 0x17)
    {
      v173 = a4;
      v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v171 | 7) != 0x17)
        v174 = v171 | 7;
      v175 = v174 + 1;
      v172 = (char *)operator new(v174 + 1);
      *((_QWORD *)&a48 + 1) = v175 | 0x8000000000000000;
      *((_QWORD *)&object + 1) = v172;
      *(_QWORD *)&a48 = v171;
      a4 = v173;
    }
    else
    {
      HIBYTE(a48) = v171;
      if (!v171)
      {
LABEL_163:
        v172[v171] = 0;
        LOBYTE(a49) = 1;
        v176 = (char *)&a49 + 8;
        if (v166 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v54 = v167;
        if (v166 >= 0x17)
        {
          v178 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v166 | 7) != 0x17)
            v178 = v166 | 7;
          v179 = v178 + 1;
          v176 = (char *)operator new(v178 + 1);
          *((_QWORD *)&a50 + 1) = v179 | 0x8000000000000000;
          *((_QWORD *)&a49 + 1) = v176;
          *(_QWORD *)&a50 = v166;
          v177 = v255;
        }
        else
        {
          HIBYTE(a50) = v166;
          v177 = v255;
          if (!v166)
          {
LABEL_171:
            v176[v166] = 0;
            LOBYTE(a51) = 1;
            v180 = object;
            if (SHIBYTE(a50) < 0)
              operator delete(*((void **)&a49 + 1));
            if ((_BYTE)a49 && SHIBYTE(a48) < 0)
              operator delete(*((void **)&object + 1));
            if ((_QWORD)object)
              os_release((void *)object);
            if (!v163 || !*(_QWORD *)(v163 + 24))
            {
              os_log_type_enabled(v180, OS_LOG_TYPE_ERROR);
              *(_QWORD *)&object = 0xD04100202;
              WORD4(object) = 2080;
              *(_QWORD *)((char *)&object + 10) = &__s;
              v187 = (void *)_os_log_send_and_compose_impl();
              if (v187)
                free(v187);
              goto LABEL_249;
            }
            v181 = _os_log_pack_size();
            v182 = operator new(v181, (std::align_val_t)8uLL);
            v183 = (_QWORD *)operator new();
            *v183 = &off_24EC1F7F0;
            v183[1] = 0;
            v183[2] = 0;
            v183[3] = v182;
            *(_QWORD *)&a14 = v182;
            *((_QWORD *)&a14 + 1) = v182;
            a16 = 0;
            a17 = 0;
            a15 = (uint64_t)v183;
            v184 = strlen(&__s);
            if (v184 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v185 = v184;
            if (v184 >= 0x17)
            {
              v188 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v184 | 7) != 0x17)
                v188 = v184 | 7;
              v189 = v188 + 1;
              v186 = operator new(v188 + 1);
              *(_QWORD *)&a11 = v185;
              *((_QWORD *)&a11 + 1) = v189 | 0x8000000000000000;
              a10 = (uint64_t)v186;
              v177 = v255;
            }
            else
            {
              HIBYTE(a11) = v184;
              v186 = &a10;
              if (!v184)
              {
LABEL_190:
                v186[v185] = 0;
                v190 = a10;
                STACK[0x700] = a11;
                STACK[0x707] = *(_QWORD *)((char *)&a11 + 7);
                v191 = HIBYTE(a11);
                v192 = operator new(0x38uLL);
                v192[1] = 0;
                v192[2] = 0;
                v192[3] = off_24EC1FA48;
                *v192 = &off_24EC1F9F8;
                v193 = STACK[0x700];
                v192[4] = v190;
                v192[5] = v193;
                *(_QWORD *)((char *)v192 + 47) = STACK[0x707];
                *((_BYTE *)v192 + 55) = v191;
                STACK[0x700] = 0;
                STACK[0x707] = 0;
                v194 = (std::__shared_weak_count *)a17;
                a16 = (uint64_t)(v192 + 3);
                a17 = (uint64_t)v192;
                if (v194)
                {
                  v195 = (unint64_t *)&v194->__shared_owners_;
                  do
                    v196 = __ldaxr(v195);
                  while (__stlxr(v196 - 1, v195));
                  if (!v196)
                  {
                    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                    std::__shared_weak_count::__release_weak(v194);
                  }
                }
                object = a14;
                v197 = a16;
                *(_QWORD *)&a48 = a15;
                if (a15)
                {
                  v198 = (unint64_t *)(a15 + 8);
                  do
                    v199 = __ldxr(v198);
                  while (__stxr(v199 + 1, v198));
                }
                v200 = (std::__shared_weak_count *)a17;
                *((_QWORD *)&a48 + 1) = v197;
                *(_QWORD *)&a49 = a17;
                if (a17)
                {
                  v201 = (unint64_t *)(a17 + 8);
                  do
                    v202 = __ldxr(v201);
                  while (__stxr(v202 + 1, v201));
                  *((_QWORD *)&a49 + 1) = v197;
                  do
                    v203 = __ldaxr(v201);
                  while (__stlxr(v203 - 1, v201));
                  if (!v203)
                  {
                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                    std::__shared_weak_count::__release_weak(v200);
                  }
                }
                else
                {
                  *((_QWORD *)&a49 + 1) = v197;
                }
                v204 = (std::__shared_weak_count *)a15;
                if (a15)
                {
                  v205 = (unint64_t *)(a15 + 8);
                  do
                    v206 = __ldaxr(v205);
                  while (__stlxr(v206 - 1, v205));
                  if (!v206)
                  {
                    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                    std::__shared_weak_count::__release_weak(v204);
                  }
                }
                v207 = object;
                if (*(char *)(*((_QWORD *)&a49 + 1) + 31) >= 0)
                  v208 = *((_QWORD *)&a49 + 1) + 8;
                else
                  v208 = *(_QWORD *)(*((_QWORD *)&a49 + 1) + 8);
                v209 = _os_log_pack_fill();
                *(_DWORD *)v209 = 68157954;
                *(_DWORD *)(v209 + 4) = 13;
                *(_WORD *)(v209 + 8) = 2080;
                *(_QWORD *)(v209 + 10) = v208;
                v210 = operator new();
                v211 = *(unsigned __int8 *)(v253 + 39);
                v212 = v251;
                if ((v211 & 0x80u) != 0)
                {
                  v212 = *(_QWORD *)(v253 + 16);
                  v211 = *(_QWORD *)(v253 + 24);
                }
                *(_QWORD *)v210 = v207;
                *(_OWORD *)(v210 + 8) = *(__int128 *)((char *)&object + 8);
                *((_QWORD *)&object + 1) = 0;
                *(_QWORD *)&a48 = 0;
                *(_OWORD *)(v210 + 24) = *(__int128 *)((char *)&a48 + 8);
                *((_QWORD *)&a48 + 1) = 0;
                *(_QWORD *)&a49 = 0;
                *(_QWORD *)(v210 + 40) = v212;
                *(_QWORD *)(v210 + 48) = v211;
                *(_BYTE *)(v210 + 56) = 16;
                a10 = 0;
                *(_QWORD *)&a14 = v210;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v163 + 24) + 40))(*(_QWORD *)(v163 + 24), &a14);
                v213 = a14;
                *(_QWORD *)&a14 = 0;
                if (v213)
                {
                  v214 = *(std::__shared_weak_count **)(v213 + 32);
                  if (v214)
                  {
                    v215 = (unint64_t *)&v214->__shared_owners_;
                    do
                      v216 = __ldaxr(v215);
                    while (__stlxr(v216 - 1, v215));
                    if (!v216)
                    {
                      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                      std::__shared_weak_count::__release_weak(v214);
                    }
                  }
                  v217 = *(std::__shared_weak_count **)(v213 + 16);
                  if (v217)
                  {
                    v218 = (unint64_t *)&v217->__shared_owners_;
                    do
                      v219 = __ldaxr(v218);
                    while (__stlxr(v219 - 1, v218));
                    if (!v219)
                    {
                      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                      std::__shared_weak_count::__release_weak(v217);
                    }
                  }
                  MEMORY[0x227684CE8](v213, 0x10F0C40B62ED6C6);
                  v220 = a10;
                  a10 = 0;
                  if (v220)
                  {
                    v221 = *(std::__shared_weak_count **)(v220 + 32);
                    if (v221)
                    {
                      v222 = (unint64_t *)&v221->__shared_owners_;
                      do
                        v223 = __ldaxr(v222);
                      while (__stlxr(v223 - 1, v222));
                      if (!v223)
                      {
                        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                        std::__shared_weak_count::__release_weak(v221);
                      }
                    }
                    v224 = *(std::__shared_weak_count **)(v220 + 16);
                    if (v224)
                    {
                      v225 = (unint64_t *)&v224->__shared_owners_;
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
                  }
                }
                v227 = (std::__shared_weak_count *)a49;
                if ((_QWORD)a49)
                {
                  v228 = (unint64_t *)(a49 + 8);
                  do
                    v229 = __ldaxr(v228);
                  while (__stlxr(v229 - 1, v228));
                  if (!v229)
                  {
                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                    std::__shared_weak_count::__release_weak(v227);
                  }
                }
                v230 = (std::__shared_weak_count *)a48;
                if ((_QWORD)a48)
                {
                  v231 = (unint64_t *)(a48 + 8);
                  do
                    v232 = __ldaxr(v231);
                  while (__stlxr(v232 - 1, v231));
                  if (!v232)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v230);
                  }
                }
LABEL_249:
                if (v177)
                {
                  sub_2245664AC(v53, &object);
                  sub_22322C138((uint64_t)&p_object, "Failed to restore KFS %.13s. Item not found.", (const char *)&object);
                  sub_223182C08((uint64_t)&p_object);
                }
                sub_223182C08((uint64_t)&p_object);
                v233 = (std::__shared_weak_count *)a30;
                if ((_QWORD)a30)
                {
                  v234 = (unint64_t *)(a30 + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
                goto LABEL_256;
              }
            }
            memcpy(v186, &__s, v185);
            goto LABEL_190;
          }
        }
        memmove(v176, v165, v166);
        goto LABEL_171;
      }
    }
    memmove(v172, v170, v171);
    goto LABEL_163;
  }
}

void sub_2237C7120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (LOBYTE(STACK[0x218]))
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a41);
  sub_2237148C0(&a26);
  _Unwind_Resume(a1);
}

void sub_2237C7304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_2237148C0(&a26);
  _Unwind_Resume(a1);
}

void sub_2237C7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_223182DAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2237C732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (LOBYTE(STACK[0x220]) && SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (STACK[0x200])
    os_release((void *)STACK[0x200]);
  sub_223182DAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2237C736C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237C737C()
{
  JUMPOUT(0x2237C7410);
}

_QWORD *sub_2237C7418(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[26];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[20];
  if (v3)
  {
    v4 = a1[21];
    v5 = (void *)a1[20];
    if (v4 != v3)
    {
      do
      {
        v4 -= 424;
        sub_2236EA79C(v4);
      }
      while (v4 != v3);
      v5 = (void *)a1[20];
    }
    a1[21] = v3;
    operator delete(v5);
  }
  *a1 = &off_24EC20828;
  return a1;
}

BOOL sub_2237C7490(uint64_t *a1, int a2, uint64_t a3, double a4)
{
  unsigned __int8 *v7;
  double v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  BOOL v72;
  BOOL v73;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned __int8 v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  const char *v93;
  unsigned __int8 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  unsigned __int8 *v120;
  _BYTE *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  __int128 *v126;
  NSObject *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  size_t v134;
  size_t v135;
  _QWORD *v136;
  void *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char v143;
  _QWORD *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  char *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v194;
  int v195;
  uint64_t *v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  int v201;
  uint64_t *v202;
  _QWORD *rep;
  _QWORD *v204;
  int v205;
  const char *v206;
  int v207;
  const char *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214[2];
  std::__shared_weak_count *v215;
  char *v216;
  std::__shared_weak_count *v217;
  _QWORD *v218;
  __int128 v219;
  void *__src[2];
  uint64_t v221;
  _BYTE object[24];
  __int128 v223;
  __int128 v224;
  _BYTE v225[80];
  _BYTE v226[80];
  __int128 v227;
  __int128 v228;
  __int128 v229;
  void *v230;
  void *v231;
  char *v232;
  int v233;
  void *v234;
  void *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  int v241;
  void *v242;
  char *v243;
  char *v244;
  char v245;
  void *__p;
  char *v247;
  char *v248;
  char v249;
  _QWORD v250[5];

  v250[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v212 = 0;
  v213 = 0;
  v7 = (unsigned __int8 *)a1[29];
  v199 = (unsigned __int8 *)(a1 + 30);
  if (v7 != (unsigned __int8 *)(a1 + 30))
  {
    v194 = a1 + 27;
    v8 = a4 * 1000000000.0;
    v196 = a1;
    v195 = a2;
    do
    {
      if (!a2 || a2 == 1 && v8 < (double)(a3 - *((_QWORD *)v7 + 61)))
      {
        v9 = v7;
        v10 = *((_QWORD *)v7 + 52);
        v197 = v9;
        v11 = *((_QWORD *)v9 + 53);
        v214[0] = 0;
        v214[1] = 0;
        v215 = 0;
        v12 = v11 - v10;
        if (v11 != v10)
        {
          v13 = 0x21CFB2B78C13521DLL * (v12 >> 3);
          if (v13 >> 60)
            sub_22316E078();
          v214[0] = operator new(0x1CFB2B78C13521D0 * (v12 >> 3));
          v214[1] = v214[0];
          v215 = (std::__shared_weak_count *)((char *)v214[0] + 16 * v13);
          v200 = v11;
          while (1)
          {
            *(_OWORD *)object = *(_OWORD *)v10;
            v14 = *(_QWORD *)(v10 + 16);
            LODWORD(v223) = *(_DWORD *)(v10 + 24);
            *(_QWORD *)&object[16] = v14;
            v15 = *(_QWORD *)(v10 + 28);
            HIDWORD(v223) = *(_DWORD *)(v10 + 36);
            *(_QWORD *)((char *)&v223 + 4) = v15;
            v16 = *(_OWORD *)(v10 + 200);
            v17 = *(_OWORD *)(v10 + 216);
            v18 = *(_OWORD *)(v10 + 248);
            v228 = *(_OWORD *)(v10 + 232);
            v229 = v18;
            *(_OWORD *)&v226[64] = v16;
            v227 = v17;
            v19 = *(_OWORD *)(v10 + 136);
            v20 = *(_OWORD *)(v10 + 152);
            v21 = *(_OWORD *)(v10 + 184);
            *(_OWORD *)&v226[32] = *(_OWORD *)(v10 + 168);
            *(_OWORD *)&v226[48] = v21;
            *(_OWORD *)v226 = v19;
            *(_OWORD *)&v226[16] = v20;
            v22 = *(_OWORD *)(v10 + 72);
            v23 = *(_OWORD *)(v10 + 88);
            v24 = *(_OWORD *)(v10 + 120);
            *(_OWORD *)&v225[48] = *(_OWORD *)(v10 + 104);
            *(_OWORD *)&v225[64] = v24;
            *(_OWORD *)&v225[16] = v22;
            *(_OWORD *)&v225[32] = v23;
            v25 = *(_OWORD *)(v10 + 56);
            v224 = *(_OWORD *)(v10 + 40);
            *(_OWORD *)v225 = v25;
            v230 = 0;
            v231 = 0;
            v232 = 0;
            v27 = *(_BYTE **)(v10 + 264);
            v26 = *(_BYTE **)(v10 + 272);
            v28 = v26 - v27;
            if (v26 != v27)
            {
              if (v28 < 0)
                sub_2236EA0B4();
              v230 = operator new(v26 - v27);
              v231 = v230;
              v29 = (char *)v230 + 8 * (v28 >> 3);
              v232 = v29;
              memcpy(v230, v27, v28 - 2);
              v231 = v29;
            }
            v233 = *(_DWORD *)(v10 + 288);
            v235 = 0;
            v236 = 0;
            v234 = 0;
            v31 = *(char **)(v10 + 296);
            v30 = *(char **)(v10 + 304);
            v32 = v30 - v31;
            if (v30 != v31)
            {
              if (v32 < 0)
                sub_2236EA0B4();
              v33 = (char *)operator new(v30 - v31);
              v234 = v33;
              v236 = &v33[16 * (v32 >> 4)];
              v34 = v32 - 16;
              if ((unint64_t)(v32 - 16) < 0xD0)
                goto LABEL_17;
              v72 = v33 + 8 >= &v31[(v34 & 0xFFFFFFFFFFFFFFF0) + 16]
                 || v31 + 8 >= &v33[(v34 & 0xFFFFFFFFFFFFFFF0) + 16];
              v73 = !v72;
              if (v31 < &v33[(v34 & 0xFFFFFFFFFFFFFFF0) + 8] && v33 < &v31[(v34 & 0xFFFFFFFFFFFFFFF0) + 8])
                goto LABEL_17;
              if (v73)
                goto LABEL_17;
              v75 = (v34 >> 4) + 1;
              v76 = 16 * (v75 & 0x1FFFFFFFFFFFFFFCLL);
              v77 = &v31[v76];
              v35 = &v33[v76];
              v78 = v33 + 32;
              v79 = (__int128 *)(v31 + 32);
              v80 = v75 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *(v79 - 2);
                v81 = *(v79 - 1);
                v84 = *v79;
                v83 = v79[1];
                v79 += 4;
                *(v78 - 2) = v82;
                *(v78 - 1) = v81;
                *v78 = v84;
                v78[1] = v83;
                v78 += 4;
                v80 -= 4;
              }
              while (v80);
              v31 = v77;
              v33 = v35;
              if (v75 != (v75 & 0x1FFFFFFFFFFFFFFCLL))
              {
LABEL_17:
                v35 = v33;
                do
                {
                  v36 = *(_OWORD *)v31;
                  v31 += 16;
                  *(_OWORD *)v35 = v36;
                  v35 += 16;
                }
                while (v31 != v30);
              }
              v235 = v35;
            }
            v237 = *(_QWORD *)(v10 + 320);
            v238 = *(_QWORD *)(v10 + 328);
            LOBYTE(v239) = 0;
            v240 = 0;
            if (*(_BYTE *)(v10 + 344))
            {
              v239 = *(_QWORD *)(v10 + 336);
              v240 = 1;
            }
            v241 = *(_DWORD *)(v10 + 352);
            LOBYTE(v242) = 0;
            v245 = 0;
            if (*(_BYTE *)(v10 + 384))
            {
              v242 = 0;
              v243 = 0;
              v244 = 0;
              v38 = *(_BYTE **)(v10 + 360);
              v37 = *(_BYTE **)(v10 + 368);
              v39 = v37 - v38;
              if (v37 != v38)
              {
                if (v39 < 0)
                  sub_2236EA0B4();
                v40 = (char *)operator new(v37 - v38);
                v242 = v40;
                v243 = v40;
                v244 = &v40[4 * (v39 >> 2)];
                v41 = v39 & 0xFFFFFFFFFFFFFFFCLL;
                memcpy(v40, v38, v41);
                v243 = &v40[v41];
              }
              v245 = 1;
            }
            LOBYTE(__p) = 0;
            v249 = 0;
            if (*(_BYTE *)(v10 + 416))
            {
              __p = 0;
              v247 = 0;
              v248 = 0;
              v42 = *(_QWORD *)(v10 + 392);
              v43 = *(_QWORD *)(v10 + 400);
              v44 = v43 - v42;
              if (v43 != v42)
              {
                v45 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 3);
                if (v45 >= 0xAAAAAAAAAAAAAABLL)
                  sub_22316E078();
                v46 = (char *)operator new(v44);
                v47 = 0;
                __p = v46;
                v247 = v46;
                v248 = &v46[24 * v45];
                v218 = v46;
                v250[0] = v46;
                v202 = (uint64_t *)&v248;
                rep = v250;
                v204 = &v218;
                LOBYTE(v205) = 0;
                do
                {
                  v50 = &v46[v47];
                  v51 = v42 + v47;
                  *(_QWORD *)v50 = 0;
                  *((_QWORD *)v50 + 1) = 0;
                  *((_QWORD *)v50 + 2) = 0;
                  v53 = *(_BYTE **)(v42 + v47);
                  v52 = *(_BYTE **)(v42 + v47 + 8);
                  v54 = v52 - v53;
                  if (v52 != v53)
                  {
                    if (v54 < 0)
                      sub_22316E078();
                    v48 = (char *)operator new(v52 - v53);
                    *(_QWORD *)v50 = v48;
                    *((_QWORD *)v50 + 1) = v48;
                    *((_QWORD *)v50 + 2) = &v48[16 * (v54 >> 4)];
                    v49 = v54 & 0xFFFFFFFFFFFFFFF0;
                    memcpy(v48, v53, v49);
                    *((_QWORD *)v50 + 1) = &v48[v49];
                  }
                  v218 = v50 + 24;
                  v47 += 24;
                }
                while (v51 + 24 != v43);
                v247 = &v46[v47];
                v11 = v200;
              }
              v249 = 1;
              v56 = (char *)v214[1];
              v55 = (char *)v215;
              if (v214[1] < v215)
              {
LABEL_37:
                v57 = v56 + 16;
                *(_QWORD *)v56 = 0;
                *((_QWORD *)v56 + 1) = 0;
                goto LABEL_50;
              }
            }
            else
            {
              v56 = (char *)v214[1];
              v55 = (char *)v215;
              if (v214[1] < v215)
                goto LABEL_37;
            }
            v58 = (char *)v214[0];
            v59 = (v56 - (char *)v214[0]) >> 4;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 60)
              sub_22316E078();
            v61 = v55 - (char *)v214[0];
            if (v61 >> 3 > v60)
              v60 = v61 >> 3;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
              v62 = 0xFFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              if (v62 >> 60)
                sub_223174E94();
              v63 = (char *)operator new(16 * v62);
              v64 = &v63[16 * v59];
              *(_QWORD *)v64 = 0;
              *((_QWORD *)v64 + 1) = 0;
              v65 = v64;
              if (v56 == v58)
              {
LABEL_48:
                v57 = v64 + 16;
                v214[0] = v65;
                v214[1] = v64 + 16;
                v215 = (std::__shared_weak_count *)&v63[16 * v62];
                if (!v56)
                  goto LABEL_50;
                goto LABEL_49;
              }
            }
            else
            {
              v63 = 0;
              v64 = (char *)(16 * v59);
              *(_QWORD *)v64 = 0;
              *((_QWORD *)v64 + 1) = 0;
              v65 = (char *)(16 * v59);
              if (v56 == v58)
                goto LABEL_48;
            }
            do
            {
              *((_OWORD *)v65 - 1) = *((_OWORD *)v56 - 1);
              v65 -= 16;
              v56 -= 16;
            }
            while (v56 != v58);
            v56 = (char *)v214[0];
            v57 = v64 + 16;
            v214[0] = v65;
            v214[1] = v64 + 16;
            v215 = (std::__shared_weak_count *)&v63[16 * v62];
            if (!v56)
              goto LABEL_50;
LABEL_49:
            operator delete(v56);
LABEL_50:
            v214[1] = v57;
            if (v249)
            {
              v66 = (char *)__p;
              if (__p)
              {
                v67 = v247;
                v68 = __p;
                if (v247 != __p)
                {
                  v69 = v247;
                  do
                  {
                    v71 = (void *)*((_QWORD *)v69 - 3);
                    v69 -= 24;
                    v70 = v71;
                    if (v71)
                    {
                      *((_QWORD *)v67 - 2) = v70;
                      operator delete(v70);
                    }
                    v67 = v69;
                  }
                  while (v69 != v66);
                  v68 = __p;
                }
                v247 = v66;
                operator delete(v68);
              }
            }
            if (v245 && v242)
            {
              v243 = (char *)v242;
              operator delete(v242);
            }
            if (v234)
            {
              v235 = v234;
              operator delete(v234);
            }
            if (v230)
            {
              v231 = v230;
              operator delete(v230);
            }
            v10 += 424;
            if (v10 == v11)
            {
              v95 = *(_OWORD *)v214;
              v12 = (uint64_t)v215;
              goto LABEL_97;
            }
          }
        }
        v95 = 0uLL;
LABEL_97:
        *(_OWORD *)__src = v95;
        v221 = v12;
        v7 = v197;
        v202 = (uint64_t *)*((_QWORD *)v197 + 61);
        sub_22371A2C8((uint64_t)object, v197 + 472, &v202);
        a1 = v196;
        a2 = v195;
        *(_QWORD *)&v223 = *((_QWORD *)v197 + 62);
        v96 = *((_OWORD *)v197 + 18);
        *(_OWORD *)&v225[8] = *((_OWORD *)v197 + 17);
        *(_OWORD *)&v225[24] = v96;
        v97 = *((_OWORD *)v197 + 20);
        *(_OWORD *)&v225[40] = *((_OWORD *)v197 + 19);
        *(_OWORD *)&v225[56] = v97;
        *(_DWORD *)&v225[72] = *((_DWORD *)v197 + 84);
        *(_QWORD *)v226 = *((_QWORD *)v197 + 43);
        v98 = *((_OWORD *)v197 + 22);
        v99 = *((_OWORD *)v197 + 23);
        v100 = *((_OWORD *)v197 + 25);
        *(_OWORD *)&v226[40] = *((_OWORD *)v197 + 24);
        *(_OWORD *)&v226[56] = v100;
        *(_OWORD *)&v226[8] = v98;
        *(_OWORD *)&v226[24] = v99;
        if (&v226[72] != v197 + 416)
          sub_2237C8C94((uint64_t *)&v226[72], *((_QWORD *)v197 + 52), *((_QWORD *)v197 + 53), 0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)v197 + 53) - *((_QWORD *)v197 + 52)) >> 3));
        v228 = *(_OWORD *)(v197 + 440);
        v101 = sub_223710B30(v194, object, (uint64_t)__src);
        v102 = *(_QWORD *)&v226[72];
        if (*(_QWORD *)&v226[72])
        {
          v103 = v227;
          v104 = *(void **)&v226[72];
          if ((_QWORD)v227 != *(_QWORD *)&v226[72])
          {
            do
            {
              if (*(_BYTE *)(v103 - 8))
              {
                v105 = *(_QWORD *)(v103 - 32);
                if (v105)
                {
                  v106 = *(_QWORD *)(v103 - 24);
                  v107 = *(void **)(v103 - 32);
                  if (v106 != v105)
                  {
                    v108 = *(_QWORD *)(v103 - 24);
                    do
                    {
                      v110 = *(void **)(v108 - 24);
                      v108 -= 24;
                      v109 = v110;
                      if (v110)
                      {
                        *(_QWORD *)(v106 - 16) = v109;
                        operator delete(v109);
                      }
                      v106 = v108;
                    }
                    while (v108 != v105);
                    v107 = *(void **)(v103 - 32);
                  }
                  *(_QWORD *)(v103 - 24) = v105;
                  operator delete(v107);
                }
              }
              if (*(_BYTE *)(v103 - 40))
              {
                v111 = *(void **)(v103 - 64);
                if (v111)
                {
                  *(_QWORD *)(v103 - 56) = v111;
                  operator delete(v111);
                }
              }
              v112 = *(void **)(v103 - 128);
              if (v112)
              {
                *(_QWORD *)(v103 - 120) = v112;
                operator delete(v112);
              }
              v113 = *(void **)(v103 - 160);
              if (v113)
              {
                *(_QWORD *)(v103 - 152) = v113;
                operator delete(v113);
              }
              v103 -= 424;
            }
            while (v103 != v102);
            v104 = *(void **)&v226[72];
          }
          *(_QWORD *)&v227 = v102;
          operator delete(v104);
        }
        if (v101)
        {
          ++v213;
          v114 = __src[0];
          if (!__src[0])
          {
LABEL_126:
            v115 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
            if (!v115)
              goto LABEL_240;
            goto LABEL_127;
          }
        }
        else
        {
          ++v212;
          v114 = __src[0];
          if (!__src[0])
            goto LABEL_126;
        }
        __src[1] = v114;
        operator delete(v114);
        goto LABEL_126;
      }
      v85 = atomic_load((unsigned __int8 *)&qword_2540CC5D0);
      if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5D0))
      {
        sub_22455F53C(&v202);
        sub_223174DE4(object, "cv3d.recon.kfplanes");
        sub_2232300E0(&v202, (uint64_t)object, &qword_2540CC5C8);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CC5D0);
        a1 = v196;
        a2 = v195;
      }
      v211 = qword_2540CC5C8;
      if (**(int **)(qword_2540CC5C8 + 56) > 2)
        goto LABEL_126;
      v86 = *(unsigned __int8 *)(qword_2540CC5C8 + 72);
      v87 = sub_22322F254(qword_2540CC5C8, "OSLogSurrogateAppender", 1, 0);
      v88 = v87;
      v89 = !v86 && v87 == 0;
      if (v89)
        goto LABEL_126;
      v202 = &v211;
      rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
      v204 = (_QWORD *)std::chrono::system_clock::now().__d_.__rep_;
      v205 = 2;
      v206 = "unknown file";
      v207 = 183;
      v208 = "unknown function";
      v209 = 0;
      v210 = 0;
      v198 = v7 + 128;
      sub_2245664AC(v7 + 128, __src);
      v90 = *v202;
      v91 = *v202 + 16;
      if (*(char *)(*v202 + 39) < 0)
      {
        v93 = *(const char **)(v90 + 16);
        v92 = *(_QWORD *)(v90 + 24);
        v117 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v201 = v86;
        if ((v117 & 1) != 0)
          goto LABEL_130;
      }
      else
      {
        v92 = *(unsigned __int8 *)(*v202 + 39);
        v93 = (const char *)(*v202 + 16);
        v94 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v201 = v86;
        if ((v94 & 1) != 0)
          goto LABEL_130;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v214);
        sub_223199C58("com.apple.cv3d", (unint64_t)v214, &xmmword_255788F40);
        if ((_BYTE)v216 && SHIBYTE(v215) < 0)
          operator delete(v214[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_130:
      if (byte_255788F57 >= 0)
        v118 = (const char *)&xmmword_255788F40;
      else
        v118 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v119 = byte_255788F57;
      else
        v119 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v118, v93);
      if (v119 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v120 = v7;
      if (v119 >= 0x17)
      {
        v122 = v88;
        v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17)
          v123 = v119 | 7;
        v124 = v123 + 1;
        v121 = operator new(v123 + 1);
        *(_QWORD *)&object[16] = v119;
        *(_QWORD *)&v223 = v124 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v121;
        v88 = v122;
LABEL_143:
        memmove(v121, v118, v119);
        goto LABEL_144;
      }
      BYTE7(v223) = v119;
      v121 = &object[8];
      if (v119)
        goto LABEL_143;
LABEL_144:
      v121[v119] = 0;
      BYTE8(v223) = 1;
      if (v92 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v125 = v93;
      a1 = v196;
      a2 = v195;
      v7 = v120;
      if (v92 >= 0x17)
      {
        v128 = v88;
        v129 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v92 | 7) != 0x17)
          v129 = v92 | 7;
        v130 = v129 + 1;
        v126 = (__int128 *)operator new(v129 + 1);
        *(_QWORD *)v225 = v130 | 0x8000000000000000;
        *(_QWORD *)&v224 = v126;
        *((_QWORD *)&v224 + 1) = v92;
        v88 = v128;
      }
      else
      {
        v225[7] = v92;
        v126 = &v224;
        if (!v92)
        {
          LOBYTE(v224) = 0;
          v225[8] = 1;
          v127 = *(NSObject **)object;
          if ((v225[7] & 0x80000000) == 0)
            goto LABEL_148;
          goto LABEL_154;
        }
      }
      memmove(v126, v125, v92);
      *((_BYTE *)v126 + v92) = 0;
      v225[8] = 1;
      v127 = *(NSObject **)object;
      if ((v225[7] & 0x80000000) == 0)
      {
LABEL_148:
        if (!BYTE8(v223))
          goto LABEL_157;
        goto LABEL_155;
      }
LABEL_154:
      operator delete((void *)v224);
      if (!BYTE8(v223))
        goto LABEL_157;
LABEL_155:
      if (SBYTE7(v223) < 0)
        operator delete(*(void **)&object[8]);
LABEL_157:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v88 && *(_QWORD *)(v88 + 24))
      {
        v131 = _os_log_pack_size();
        v132 = (std::__shared_weak_count_vtbl *)operator new(v131, (std::align_val_t)8uLL);
        v133 = (std::__shared_weak_count *)operator new();
        v133->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v133->__shared_owners_ = 0;
        v133->__shared_weak_owners_ = 0;
        v133[1].__vftable = v132;
        v214[0] = v132;
        v214[1] = v132;
        v215 = v133;
        v216 = 0;
        v217 = 0;
        v134 = strlen((const char *)__src);
        if (v134 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v135 = v134;
        if (v134 >= 0x17)
        {
          v139 = v88;
          v140 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v134 | 7) != 0x17)
            v140 = v134 | 7;
          v141 = v140 + 1;
          v136 = operator new(v140 + 1);
          *(_QWORD *)&v219 = v135;
          *((_QWORD *)&v219 + 1) = v141 | 0x8000000000000000;
          v218 = v136;
          v88 = v139;
        }
        else
        {
          HIBYTE(v219) = v134;
          v136 = &v218;
          if (!v134)
            goto LABEL_172;
        }
        memcpy(v136, __src, v135);
LABEL_172:
        *((_BYTE *)v136 + v135) = 0;
        v142 = v218;
        v250[0] = v219;
        *(_QWORD *)((char *)v250 + 7) = *(_QWORD *)((char *)&v219 + 7);
        v143 = HIBYTE(v219);
        v144 = operator new(0x38uLL);
        v144[1] = 0;
        v144[2] = 0;
        v144[3] = off_24EC1FA48;
        *v144 = &off_24EC1F9F8;
        v145 = v250[0];
        v144[4] = v142;
        v144[5] = v145;
        *(_QWORD *)((char *)v144 + 47) = *(_QWORD *)((char *)v250 + 7);
        *((_BYTE *)v144 + 55) = v143;
        v250[0] = 0;
        *(_QWORD *)((char *)v250 + 7) = 0;
        v146 = v217;
        v216 = (char *)(v144 + 3);
        v217 = (std::__shared_weak_count *)v144;
        if (v146)
        {
          p_shared_owners = (unint64_t *)&v146->__shared_owners_;
          do
            v148 = __ldaxr(p_shared_owners);
          while (__stlxr(v148 - 1, p_shared_owners));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        *(_OWORD *)object = *(_OWORD *)v214;
        v149 = v216;
        *(_QWORD *)&object[16] = v215;
        if (v215)
        {
          v150 = (unint64_t *)&v215->__shared_owners_;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v152 = v217;
        *(_QWORD *)&v223 = v149;
        *((_QWORD *)&v223 + 1) = v217;
        if (v217)
        {
          v153 = (unint64_t *)&v217->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
          *(_QWORD *)&v224 = v149;
          do
            v155 = __ldaxr(v153);
          while (__stlxr(v155 - 1, v153));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        else
        {
          *(_QWORD *)&v224 = v149;
        }
        v156 = v215;
        if (v215)
        {
          v157 = (unint64_t *)&v215->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = *(_QWORD *)object;
        if (*(char *)(v224 + 31) >= 0)
          v160 = v224 + 8;
        else
          v160 = *(_QWORD *)(v224 + 8);
        v161 = _os_log_pack_fill();
        *(_DWORD *)v161 = 68157954;
        *(_DWORD *)(v161 + 4) = 13;
        *(_WORD *)(v161 + 8) = 2080;
        *(_QWORD *)(v161 + 10) = v160;
        v162 = (char *)operator new();
        v163 = *(unsigned __int8 *)(v90 + 39);
        if ((v163 & 0x80u) == 0)
          v164 = v91;
        else
          v164 = *(_QWORD *)(v90 + 16);
        if ((v163 & 0x80u) != 0)
          v163 = *(_QWORD *)(v90 + 24);
        *(_QWORD *)v162 = v159;
        *(_OWORD *)(v162 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v162 + 24) = v223;
        v223 = 0uLL;
        *((_QWORD *)v162 + 5) = v164;
        *((_QWORD *)v162 + 6) = v163;
        v162[56] = 2;
        v218 = 0;
        v214[0] = v162;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v88 + 24) + 40))(*(_QWORD *)(v88 + 24), v214);
        v138 = v201;
        v165 = v214[0];
        v214[0] = 0;
        if (v165)
        {
          v166 = (std::__shared_weak_count *)*((_QWORD *)v165 + 4);
          if (v166)
          {
            v167 = (unint64_t *)&v166->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          v169 = (std::__shared_weak_count *)*((_QWORD *)v165 + 2);
          if (v169)
          {
            v170 = (unint64_t *)&v169->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          MEMORY[0x227684CE8](v165, 0x10F0C40B62ED6C6);
          v172 = v218;
          v218 = 0;
          if (v172)
          {
            v173 = (std::__shared_weak_count *)v172[4];
            if (v173)
            {
              v174 = (unint64_t *)&v173->__shared_owners_;
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 - 1, v174));
              if (!v175)
              {
                ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            v176 = (std::__shared_weak_count *)v172[2];
            if (v176)
            {
              v177 = (unint64_t *)&v176->__shared_owners_;
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
            MEMORY[0x227684CE8](v172, 0x10F0C40B62ED6C6);
          }
        }
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
        if (*((_QWORD *)&v223 + 1))
        {
          v180 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        v182 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v183 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
            if (!v201)
              goto LABEL_235;
LABEL_234:
            sub_2245664AC(v198, object);
            sub_22322C138((uint64_t)&v202, "KFS %.13s not included in snapshot because it is up-to-date.", object);
            sub_223182C08((uint64_t)&v202);
            goto LABEL_235;
          }
        }
        goto LABEL_233;
      }
      os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG);
      *(_QWORD *)object = 0xD04100202;
      *(_WORD *)&object[8] = 2080;
      *(_QWORD *)&object[10] = __src;
      v137 = (void *)_os_log_send_and_compose_impl();
      v138 = v201;
      if (v137)
      {
        free(v137);
        if (!v201)
          goto LABEL_235;
        goto LABEL_234;
      }
LABEL_233:
      if (v138)
        goto LABEL_234;
LABEL_235:
      sub_223182C08((uint64_t)&v202);
      v185 = v210;
      if (!v210)
        goto LABEL_239;
      v186 = (unint64_t *)&v210->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
        v115 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        if (!v115)
        {
          do
          {
LABEL_240:
            v116 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
            v89 = *(_QWORD *)v116 == (_QWORD)v7;
            v7 = v116;
          }
          while (!v89);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_239:
        v115 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        if (!v115)
          goto LABEL_240;
      }
      do
      {
LABEL_127:
        v116 = v115;
        v115 = *(unsigned __int8 **)v115;
      }
      while (v115);
LABEL_3:
      v7 = v116;
    }
    while (v116 != v199);
  }
  v214[0] = (void *)a1[31];
  v188 = a1[1];
  if (v188)
  {
    v189 = *a1;
    v190 = 24 * v188;
    do
    {
      *(_QWORD *)object = &v213;
      *(_QWORD *)&object[8] = &v212;
      *(_QWORD *)&object[16] = v214;
      v191 = *(unsigned int *)(v189 + 16);
      if ((_DWORD)v191 == -1)
        sub_22316DD70();
      v202 = (uint64_t *)object;
      ((void (*)(uint64_t **, uint64_t))off_24EC59BD0[v191])(&v202, v189);
      v189 += 24;
      v190 -= 24;
    }
    while (v190);
  }
  kdebug_trace();
  return v212 == 0;
}

void sub_2237C8804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2237C8844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5D0);
  _Unwind_Resume(a1);
}

void sub_2237C889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_223199DE8((uint64_t)&a53);
  sub_223182DAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2237C8908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  MEMORY[0x227684CE8](v41, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2237C8934(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2237C8BE4(uint64_t a1, uint64_t a2)
{
  kdebug_trace();
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 216) + 48))(*(_QWORD *)(a1 + 216), a2);
  return kdebug_trace();
}

void sub_2237C8C64(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_2237C8C94(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x21CFB2B78C13521DLL * ((v8 - *a1) >> 3) >= a4)
  {
    v18 = a1[1];
    if (0x21CFB2B78C13521DLL * ((v18 - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v23 = *a1;
      }
      else
      {
        v23 = *a1;
        do
        {
          sub_2237C8F3C(v9, v6);
          v6 += 424;
          v9 += 424;
          v23 += 424;
        }
        while (v6 != a3);
        v18 = a1[1];
      }
      while (v18 != v23)
      {
        v18 -= 424;
        sub_2236EA79C(v18);
      }
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + 8 * ((v18 - v9) >> 3);
      if (v18 != v9)
      {
        v20 = 8 * ((v18 - v9) >> 3);
        do
        {
          sub_2237C8F3C(v9, v6);
          v6 += 424;
          v9 += 424;
          v20 -= 424;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          sub_2236EA118(v9 + v22, v19 + v22);
          v22 += 424;
        }
        while (v19 + v22 != a3);
        v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          v10 -= 424;
          sub_2236EA79C(v10);
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x9A90E7D95BC609)
      goto LABEL_37;
    v12 = 0x21CFB2B78C13521DLL * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x4D4873ECADE304 ? 0x9A90E7D95BC609 : v13;
    if (v14 > 0x9A90E7D95BC609)
LABEL_37:
      sub_2236EA0B4();
    v15 = 424 * v14;
    v16 = (char *)operator new(424 * v14);
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)&v16[v15];
    if (v6 != a3)
    {
      v17 = 0;
      do
      {
        sub_2236EA118((uint64_t)&v16[v17], v6 + v17);
        v17 += 424;
      }
      while (v6 + v17 != a3);
      v16 += v17;
    }
    a1[1] = (uint64_t)v16;
  }
}

uint64_t sub_2237C8F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  unint64_t v28;
  char *v29;
  size_t v30;
  void *v31;
  char *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  __int128 v44;
  int64_t v45;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int64_t v73;
  void **v74;
  char *v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char **v85;
  char *v86;
  void *v87;
  void **v88;
  int v89;
  char *v90;
  char *v91;
  void *v92;
  char *v93;
  void *v94;
  void *v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  char *v99;
  size_t v100;
  uint64_t v101;
  char **v102;
  unint64_t v103;
  uint64_t v104;
  char **v105;
  char **v106;
  void *v107;
  char **v108;
  char *v109;
  char *v110;
  char *v111;
  int64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  _QWORD *v122;
  unint64_t v123;
  char *v124;
  char *v125;
  BOOL v127;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  __int128 *v132;
  _OWORD *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  unint64_t v140;
  BOOL v142;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  __int128 *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  char *v154;
  char *v155;
  unint64_t v156;
  BOOL v158;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  __int128 *v163;
  _OWORD *v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  void *v179;
  void *v180;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  int v188;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  v12 = *(_OWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  v15 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  if (a1 != a2)
  {
    v16 = *(char **)(a2 + 264);
    v17 = *(_BYTE **)(a2 + 272);
    v18 = v17 - v16;
    v19 = (v17 - v16) >> 3;
    v20 = *(_QWORD *)(a1 + 280);
    v21 = *(char **)(a1 + 264);
    if (v19 > (v20 - (uint64_t)v21) >> 3)
    {
      v22 = (_QWORD *)(a1 + 264);
      if (v21)
      {
        *(_QWORD *)(a1 + 272) = v21;
        operator delete(v21);
        v20 = 0;
        *v22 = 0;
        *(_QWORD *)(a1 + 272) = 0;
        *(_QWORD *)(a1 + 280) = 0;
      }
      if (v18 < 0)
        goto LABEL_225;
      v23 = v20 >> 2;
      if (v20 >> 2 <= v19)
        v23 = (v17 - v16) >> 3;
      v60 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      v24 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v60)
        v24 = v23;
      if (v24 >> 61)
LABEL_225:
        sub_2236EA0B4();
      v25 = 8 * v24;
      v26 = (char *)operator new(8 * v24);
      v21 = v26;
      *(_QWORD *)(a1 + 264) = v26;
      *(_QWORD *)(a1 + 272) = v26;
      *(_QWORD *)(a1 + 280) = &v26[v25];
      if (v17 != v16)
        memcpy(v26, v16, v18 - 2);
      goto LABEL_21;
    }
    v27 = *(_BYTE **)(a1 + 272);
    v28 = (v27 - v21) >> 3;
    if (v28 >= v19)
    {
      if (v17 == v16)
        goto LABEL_21;
      v30 = v18 - 2;
      v31 = *(void **)(a1 + 264);
      v32 = *(char **)(a2 + 264);
    }
    else
    {
      v29 = &v16[8 * v28];
      if (v27 != v21)
      {
        memmove(*(void **)(a1 + 264), *(const void **)(a2 + 264), v27 - v21 - 2);
        v21 = *(char **)(a1 + 272);
      }
      v18 = v17 - v29;
      if (v17 == v29)
      {
LABEL_21:
        *(_QWORD *)(a1 + 272) = &v21[v18];
        *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
        v34 = *(char **)(a2 + 296);
        v33 = *(char **)(a2 + 304);
        v35 = v33 - v34;
        v36 = (v33 - v34) >> 4;
        v37 = *(_QWORD *)(a1 + 312);
        v38 = *(char **)(a1 + 296);
        if (v36 > (v37 - (uint64_t)v38) >> 4)
        {
          if (v38)
          {
            *(_QWORD *)(a1 + 304) = v38;
            operator delete(v38);
            v37 = 0;
            *(_QWORD *)(a1 + 296) = 0;
            *(_QWORD *)(a1 + 304) = 0;
            *(_QWORD *)(a1 + 312) = 0;
          }
          if (v35 < 0)
            goto LABEL_226;
          v39 = v37 >> 3;
          if (v37 >> 3 <= v36)
            v39 = (v33 - v34) >> 4;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          if (v39 >> 60)
LABEL_226:
            sub_2236EA0B4();
          v40 = 16 * v39;
          v41 = (char *)operator new(16 * v39);
          *(_QWORD *)(a1 + 296) = v41;
          *(_QWORD *)(a1 + 312) = &v41[v40];
          v42 = v41;
          if (v34 == v33)
            goto LABEL_67;
          v43 = v35 - 16;
          if ((unint64_t)(v35 - 16) >= 0xF0)
          {
            v56 = v43 & 0xFFFFFFFFFFFFFFF0 | 8;
            v57 = &v41[v56];
            v58 = &v34[v56];
            v59 = (v43 & 0xFFFFFFFFFFFFFFF0) + 16;
            v60 = v41 + 8 >= &v34[v59] || v34 + 8 >= &v41[v59];
            v61 = !v60;
            v42 = v41;
            if ((v34 >= v57 || v41 >= v58) && (v61 & 1) == 0)
            {
              v63 = (v43 >> 4) + 1;
              v64 = 16 * (v63 & 0x1FFFFFFFFFFFFFFCLL);
              v65 = &v34[v64];
              v42 = &v41[v64];
              v66 = v41 + 32;
              v67 = (__int128 *)(v34 + 32);
              v68 = v63 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v70 = *(v67 - 2);
                v69 = *(v67 - 1);
                v72 = *v67;
                v71 = v67[1];
                v67 += 4;
                *(v66 - 2) = v70;
                *(v66 - 1) = v69;
                *v66 = v72;
                v66[1] = v71;
                v66 += 4;
                v68 -= 4;
              }
              while (v68);
              v34 = v65;
              if (v63 == (v63 & 0x1FFFFFFFFFFFFFFCLL))
                goto LABEL_67;
            }
          }
          else
          {
            v42 = v41;
          }
          do
          {
            v44 = *(_OWORD *)v34;
            v34 += 16;
            *(_OWORD *)v42 = v44;
            v42 += 16;
          }
          while (v34 != v33);
LABEL_67:
          v73 = v42 - v41;
LABEL_70:
          *(_QWORD *)(a1 + 304) = &v41[v73];
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
          *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
          goto LABEL_71;
        }
        v41 = *(char **)(a1 + 304);
        v45 = v41 - v38;
        v46 = (v41 - v38) >> 4;
        if (v46 < v36)
        {
          v47 = (__int128 *)&v34[16 * v46];
          if (v41 == v38)
            goto LABEL_40;
          if ((unint64_t)(v45 - 16) >= 0xF0)
          {
            v123 = (v45 & 0xFFFFFFFFFFFFFFF0) - 8;
            v124 = &v38[v123];
            v125 = &v34[v123];
            v127 = v38 + 8 < &v34[v45 & 0xFFFFFFFFFFFFFFF0] && v34 + 8 < &v38[v45 & 0xFFFFFFFFFFFFFFF0];
            v48 = *(__int128 **)(a2 + 296);
            if ((v34 >= v124 || v38 >= v125) && !v127)
            {
              v129 = ((unint64_t)(v45 - 16) >> 4) + 1;
              v130 = 16 * (v129 & 0x1FFFFFFFFFFFFFFCLL);
              v131 = &v38[v130];
              v48 = (__int128 *)&v34[v130];
              v132 = (__int128 *)(v34 + 32);
              v133 = v38 + 32;
              v134 = v129 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v136 = *(v132 - 2);
                v135 = *(v132 - 1);
                v138 = *v132;
                v137 = v132[1];
                v132 += 4;
                *(v133 - 2) = v136;
                *(v133 - 1) = v135;
                *v133 = v138;
                v133[1] = v137;
                v133 += 4;
                v134 -= 4;
              }
              while (v134);
              v38 = v131;
              if (v129 == (v129 & 0x1FFFFFFFFFFFFFFCLL))
              {
LABEL_40:
                if (v47 == (__int128 *)v33)
                {
                  v42 = v41;
                }
                else
                {
                  v50 = &v34[v45];
                  v51 = v33 - &v34[v45] - 16;
                  if (v51 >= 0x170)
                  {
                    v139 = &v50[v51 & 0xFFFFFFFFFFFFFFF0];
                    v140 = (unint64_t)(v50 + 8);
                    v142 = v41 + 8 < v139 + 16 && v140 < (unint64_t)&v41[(v51 & 0xFFFFFFFFFFFFFFF0) + 16];
                    v42 = v41;
                    if ((v47 >= (__int128 *)&v41[(v51 & 0xFFFFFFFFFFFFFFF0) + 8] || v41 >= v139 + 8) && !v142)
                    {
                      v144 = (v51 >> 4) + 1;
                      v145 = 16 * (v144 & 0x1FFFFFFFFFFFFFFCLL);
                      v47 = (__int128 *)((char *)v47 + v145);
                      v42 = &v41[v145];
                      v146 = v41 + 32;
                      v147 = (__int128 *)&v34[16 * v46 + 32];
                      v148 = v144 & 0x1FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v150 = *(v147 - 2);
                        v149 = *(v147 - 1);
                        v152 = *v147;
                        v151 = v147[1];
                        v147 += 4;
                        *(v146 - 2) = v150;
                        *(v146 - 1) = v149;
                        *v146 = v152;
                        v146[1] = v151;
                        v146 += 4;
                        v148 -= 4;
                      }
                      while (v148);
                      if (v144 == (v144 & 0x1FFFFFFFFFFFFFFCLL))
                        goto LABEL_67;
                    }
                  }
                  else
                  {
                    v42 = v41;
                  }
                  do
                  {
                    v52 = *v47++;
                    *(_OWORD *)v42 = v52;
                    v42 += 16;
                  }
                  while (v47 != (__int128 *)v33);
                }
                goto LABEL_67;
              }
            }
          }
          else
          {
            v48 = *(__int128 **)(a2 + 296);
          }
          do
          {
            v49 = *v48++;
            *(_OWORD *)v38 = v49;
            v38 += 16;
          }
          while (v48 != v47);
          goto LABEL_40;
        }
        if (v34 == v33)
        {
          v54 = *(char **)(a1 + 296);
        }
        else
        {
          v53 = v35 - 16;
          if ((unint64_t)(v35 - 16) >= 0xF0)
          {
            v153 = v53 & 0xFFFFFFFFFFFFFFF0 | 8;
            v154 = &v38[v153];
            v155 = &v34[v153];
            v156 = (v53 & 0xFFFFFFFFFFFFFFF0) + 16;
            v158 = v38 + 8 < &v34[v156] && v34 + 8 < &v38[v156];
            v54 = *(char **)(a1 + 296);
            if ((v34 >= v154 || v38 >= v155) && !v158)
            {
              v160 = (v53 >> 4) + 1;
              v161 = 16 * (v160 & 0x1FFFFFFFFFFFFFFCLL);
              v54 = &v38[v161];
              v162 = &v34[v161];
              v163 = (__int128 *)(v34 + 32);
              v164 = v38 + 32;
              v165 = v160 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v167 = *(v163 - 2);
                v166 = *(v163 - 1);
                v169 = *v163;
                v168 = v163[1];
                v163 += 4;
                *(v164 - 2) = v167;
                *(v164 - 1) = v166;
                *v164 = v169;
                v164[1] = v168;
                v164 += 4;
                v165 -= 4;
              }
              while (v165);
              v34 = v162;
              if (v160 == (v160 & 0x1FFFFFFFFFFFFFFCLL))
                goto LABEL_69;
            }
          }
          else
          {
            v54 = *(char **)(a1 + 296);
          }
          do
          {
            v55 = *(_OWORD *)v34;
            v34 += 16;
            *(_OWORD *)v54 = v55;
            v54 += 16;
          }
          while (v34 != v33);
        }
LABEL_69:
        v73 = v54 - v38;
        v41 = v38;
        goto LABEL_70;
      }
      v30 = v18 - 2;
      v31 = v21;
      v32 = v29;
    }
    memmove(v31, v32, v30);
    goto LABEL_21;
  }
LABEL_71:
  if (*(unsigned __int8 *)(a1 + 344) == *(unsigned __int8 *)(a2 + 344))
  {
    if (*(_BYTE *)(a1 + 344))
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  }
  else if (*(_BYTE *)(a1 + 344))
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_BYTE *)(a1 + 344) = 1;
  }
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  v74 = (void **)(a1 + 360);
  if (*(unsigned __int8 *)(a1 + 384) != *(unsigned __int8 *)(a2 + 384))
  {
    if (*(_BYTE *)(a1 + 384))
    {
      v87 = *v74;
      if (*v74)
      {
        *(_QWORD *)(a1 + 368) = v87;
        operator delete(v87);
      }
      *(_BYTE *)(a1 + 384) = 0;
      v88 = (void **)(a1 + 392);
      v89 = *(unsigned __int8 *)(a1 + 416);
      if (v89 != *(unsigned __int8 *)(a2 + 416))
        goto LABEL_95;
      goto LABEL_107;
    }
    *v74 = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    v97 = *(_BYTE **)(a2 + 360);
    v96 = *(_BYTE **)(a2 + 368);
    v98 = v96 - v97;
    if (v96 != v97)
    {
      if (v98 < 0)
        sub_2236EA0B4();
      v99 = (char *)operator new(v96 - v97);
      *(_QWORD *)(a1 + 360) = v99;
      *(_QWORD *)(a1 + 368) = v99;
      *(_QWORD *)(a1 + 376) = &v99[4 * (v98 >> 2)];
      v100 = v98 & 0xFFFFFFFFFFFFFFFCLL;
      memcpy(v99, v97, v100);
      *(_QWORD *)(a1 + 368) = &v99[v100];
    }
    *(_BYTE *)(a1 + 384) = 1;
LABEL_106:
    v88 = (void **)(a1 + 392);
    v89 = *(unsigned __int8 *)(a1 + 416);
    if (v89 != *(unsigned __int8 *)(a2 + 416))
      goto LABEL_95;
LABEL_107:
    if (a1 == a2 || !v89)
      return a1;
    v102 = *(char ***)(a2 + 392);
    v101 = *(_QWORD *)(a2 + 400);
    v103 = 0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v102) >> 3);
    v104 = *(_QWORD *)(a1 + 408);
    v105 = *(char ***)(a1 + 392);
    if (0xAAAAAAAAAAAAAAABLL * ((v104 - (uint64_t)v105) >> 3) < v103)
    {
      if (v105)
      {
        v106 = *(char ***)(a1 + 400);
        v107 = *(void **)(a1 + 392);
        if (v106 != v105)
        {
          v108 = *(char ***)(a1 + 400);
          do
          {
            v110 = *(v108 - 3);
            v108 -= 3;
            v109 = v110;
            if (v110)
            {
              *(v106 - 2) = v109;
              operator delete(v109);
            }
            v106 = v108;
          }
          while (v108 != v105);
          v107 = *v88;
        }
        *(_QWORD *)(a1 + 400) = v105;
        operator delete(v107);
        v104 = 0;
        *v88 = 0;
        v88[1] = 0;
        v88[2] = 0;
      }
      if (v103 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_228;
      v170 = 0xAAAAAAAAAAAAAAABLL * (v104 >> 3);
      v171 = 2 * v170;
      if (2 * v170 <= v103)
        v171 = 0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v102) >> 3);
      v172 = v170 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v171;
      if (v172 > 0xAAAAAAAAAAAAAAALL)
LABEL_228:
        sub_22316E078();
      v173 = 3 * v172;
      v174 = operator new(24 * v172);
      *(_QWORD *)(a1 + 392) = v174;
      *(_QWORD *)(a1 + 400) = v174;
      *(_QWORD *)(a1 + 408) = &v174[v173];
      v175 = sub_2236EA690(a1 + 408, (uint64_t)v102, v101, v174);
LABEL_207:
      *(_QWORD *)(a1 + 400) = v175;
      return a1;
    }
    v117 = *(_QWORD **)(a1 + 400);
    if (0xAAAAAAAAAAAAAAABLL * ((char **)v117 - v105) < v103)
    {
      v118 = (uint64_t)&v102[(char **)v117 - v105];
      if (v117 != v105)
      {
        v119 = 8 * ((char **)v117 - v105);
        do
        {
          if (v102 != v105)
            sub_223769794(v105, *v102, v102[1], (v102[1] - *v102) >> 4);
          v102 += 3;
          v105 += 3;
          v119 -= 24;
        }
        while (v119);
        v105 = *(char ***)(a1 + 400);
      }
      v175 = sub_2236EA690(a1 + 408, v118, v101, v105);
      goto LABEL_207;
    }
    if (v102 == (char **)v101)
    {
      v122 = *(_QWORD **)(a1 + 392);
      if (v117 == v105)
      {
LABEL_215:
        *(_QWORD *)(a1 + 400) = v122;
        return a1;
      }
    }
    else
    {
      v122 = *(_QWORD **)(a1 + 392);
      do
      {
        if (v102 != v105)
          sub_223769794(v105, *v102, v102[1], (v102[1] - *v102) >> 4);
        v102 += 3;
        v105 += 3;
        v122 += 3;
      }
      while (v102 != (char **)v101);
      v117 = *(_QWORD **)(a1 + 400);
      if (v117 == v122)
        goto LABEL_215;
    }
    v178 = v117;
    do
    {
      v180 = (void *)*(v178 - 3);
      v178 -= 3;
      v179 = v180;
      if (v180)
      {
        *(v117 - 2) = v179;
        operator delete(v179);
      }
      v117 = v178;
    }
    while (v178 != v122);
    goto LABEL_215;
  }
  if (a1 == a2 || !*(_BYTE *)(a1 + 384))
    goto LABEL_106;
  v75 = *(char **)(a2 + 360);
  v76 = *(char **)(a2 + 368);
  v77 = v76 - v75;
  v78 = (v76 - v75) >> 2;
  v79 = *(_QWORD *)(a1 + 376);
  v80 = *(char **)(a1 + 360);
  if (v78 > (v79 - (uint64_t)v80) >> 2)
  {
    if (v80)
    {
      *(_QWORD *)(a1 + 368) = v80;
      operator delete(v80);
      v79 = 0;
      *v74 = 0;
      *(_QWORD *)(a1 + 368) = 0;
      *(_QWORD *)(a1 + 376) = 0;
    }
    if (v77 < 0)
      goto LABEL_227;
    v81 = v79 >> 1;
    if (v79 >> 1 <= v78)
      v81 = (v76 - v75) >> 2;
    v60 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL;
    v82 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v60)
      v82 = v81;
    if (v82 >> 62)
LABEL_227:
      sub_2236EA0B4();
    v83 = 4 * v82;
    v84 = (char *)operator new(4 * v82);
    v80 = v84;
    v85 = (char **)(a1 + 368);
    *(_QWORD *)(a1 + 360) = v84;
    *(_QWORD *)(a1 + 368) = v84;
    *(_QWORD *)(a1 + 376) = &v84[v83];
    v86 = v84;
    if (v75 != v76)
    {
      memcpy(v84, v75, v77 & 0xFFFFFFFFFFFFFFFCLL);
      v86 = &v80[v77 & 0xFFFFFFFFFFFFFFFCLL];
    }
LABEL_137:
    v121 = v86 - v80;
    goto LABEL_223;
  }
  v85 = (char **)(a1 + 368);
  v111 = *(char **)(a1 + 368);
  v112 = v111 - v80;
  v113 = (v111 - v80) >> 2;
  if (v113 >= v78)
  {
    v86 = *(char **)(a1 + 360);
    if (v75 != v76)
    {
      v120 = *(char **)(a1 + 360);
      do
      {
        if (v75 != v120)
          *(_DWORD *)v120 = *(_DWORD *)v75;
        v75 += 4;
        v120 += 4;
        v86 += 4;
      }
      while (v75 != v76);
    }
    goto LABEL_137;
  }
  v114 = &v75[4 * v113];
  if (v111 != v80)
  {
    v115 = 4 * v113;
    v116 = *(char **)(a2 + 360);
    do
    {
      if (v116 != v80)
        *(_DWORD *)v80 = *(_DWORD *)v116;
      v116 += 4;
      v80 += 4;
      v115 -= 4;
    }
    while (v115);
    v80 = *v85;
  }
  v176 = v80;
  if (v114 != v76)
  {
    v177 = v76 - &v75[v112] - 4;
    if (v177 >= 0x1C)
    {
      v176 = v80;
      if ((unint64_t)(&v80[-v112] - v75) >= 0x20)
      {
        v182 = (v177 >> 2) + 1;
        v183 = 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
        v114 += v183;
        v176 = &v80[v183];
        v184 = v80 + 16;
        v185 = &v75[4 * v113 + 16];
        v186 = v182 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v187 = *(_OWORD *)v185;
          *(v184 - 1) = *((_OWORD *)v185 - 1);
          *v184 = v187;
          v184 += 2;
          v185 += 32;
          v186 -= 8;
        }
        while (v186);
        if (v182 == (v182 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_222;
      }
    }
    else
    {
      v176 = v80;
    }
    do
    {
      v188 = *(_DWORD *)v114;
      v114 += 4;
      *(_DWORD *)v176 = v188;
      v176 += 4;
    }
    while (v114 != v76);
  }
LABEL_222:
  v121 = v176 - v80;
LABEL_223:
  *v85 = &v80[v121];
  v88 = (void **)(a1 + 392);
  v89 = *(unsigned __int8 *)(a1 + 416);
  if (v89 == *(unsigned __int8 *)(a2 + 416))
    goto LABEL_107;
LABEL_95:
  if (v89)
  {
    v90 = (char *)*v88;
    if (*v88)
    {
      v91 = *(char **)(a1 + 400);
      v92 = *v88;
      if (v91 != v90)
      {
        v93 = *(char **)(a1 + 400);
        do
        {
          v95 = (void *)*((_QWORD *)v93 - 3);
          v93 -= 24;
          v94 = v95;
          if (v95)
          {
            *((_QWORD *)v91 - 2) = v94;
            operator delete(v94);
          }
          v91 = v93;
        }
        while (v93 != v90);
        v92 = *v88;
      }
      *(_QWORD *)(a1 + 400) = v90;
      operator delete(v92);
    }
    *(_BYTE *)(a1 + 416) = 0;
  }
  else
  {
    sub_2236EA584(v88, (uint64_t *)(a2 + 392));
    *(_BYTE *)(a1 + 416) = 1;
  }
  return a1;
}

void sub_2237C9AB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 400) = v2;
  _Unwind_Resume(a1);
}

void sub_2237C9AB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 400) = v2;
  _Unwind_Resume(a1);
}

void sub_2237C9AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 368) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237C9ADC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x9A90E7D95BC60ALL)
      sub_2236EA0B4();
    result = (uint64_t)operator new(424 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 424 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_2236EA118(v8 + v9, a2 + v9);
        v9 += 424;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2237C9B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2237C9BE0(&a9);
  _Unwind_Resume(a1);
}

void sub_2237C9BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 424)
    sub_2236EA79C(v10 - 424 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_2237C9BE0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2237C9BE0(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 424;
          sub_2236EA79C(v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_2237C9C64(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x200uLL, (std::align_val_t)0x80uLL);
    *((_OWORD *)v12 + 8) = *a3;
    v13 = *(_OWORD *)(a4 + 32);
    *((_OWORD *)v12 + 17) = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v12 + 18) = v13;
    v14 = *(_OWORD *)(a4 + 64);
    *((_OWORD *)v12 + 19) = *(_OWORD *)(a4 + 48);
    *((_OWORD *)v12 + 20) = v14;
    *((_DWORD *)v12 + 84) = *(_DWORD *)(a4 + 80);
    v12[43] = *(_QWORD *)(a4 + 88);
    v12[32] = (uint64_t)&off_24EC207B8;
    v12[33] = (uint64_t)&off_24EC20868;
    v15 = *(_OWORD *)(a4 + 96);
    v16 = *(_OWORD *)(a4 + 112);
    v17 = *(_OWORD *)(a4 + 144);
    *((_OWORD *)v12 + 24) = *(_OWORD *)(a4 + 128);
    *((_OWORD *)v12 + 25) = v17;
    *((_OWORD *)v12 + 22) = v15;
    *((_OWORD *)v12 + 23) = v16;
    *((_OWORD *)v12 + 26) = *(_OWORD *)(a4 + 160);
    v12[54] = *(_QWORD *)(a4 + 176);
    *(_QWORD *)(a4 + 160) = 0;
    *(_QWORD *)(a4 + 168) = 0;
    *(_QWORD *)(a4 + 176) = 0;
    *(_OWORD *)(v12 + 55) = *(_OWORD *)(a4 + 184);
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(a4 + 200);
    *(_QWORD *)(a4 + 200) = 0;
    *(_QWORD *)(a4 + 208) = 0;
    v18 = *(_OWORD *)(a4 + 216);
    *(_OWORD *)(v12 + 61) = *(_OWORD *)(a4 + 232);
    *(_OWORD *)(v12 + 59) = v18;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v8 = v12;
    v19 = v12;
    v20 = (uint64_t *)**a1;
    if (v20)
    {
      *a1 = v20;
      v19 = *v8;
    }
    sub_2231A9A8C(a1[1], v19);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v12;
  }
  while (1)
  {
    while (1)
    {
      v10 = (uint64_t **)v7;
      v11 = (unsigned __int8 *)(v7 + 16);
      if ((sub_22319835C(a2, (unsigned __int8 *)v7 + 128) & 0x80) == 0)
        break;
      v7 = *v10;
      v8 = v10;
      if (!*v10)
        goto LABEL_10;
    }
    if ((sub_22319835C(v11, a2) & 0x80) == 0)
      break;
    v8 = v10 + 1;
    v7 = v10[1];
    if (!v7)
      goto LABEL_10;
  }
  v12 = *v8;
  if (!*v8)
    goto LABEL_10;
  return v12;
}

uint64_t sub_2237C9DEC(_QWORD **a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))*a2)(*a2, **a1, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t sub_2237C9E08(_QWORD **a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))*a2)(*a2, **a1, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t sub_2237C9E24(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t sub_2237C9E40(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t *sub_2237C9E5C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_2231AFE60(v7, a2);
  v8 = (std::__shared_weak_count *)a2[58];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = a2[52];
  if (v9)
  {
    v10 = a2[53];
    v11 = (void *)a2[52];
    if (v10 != v9)
    {
      do
      {
        v10 -= 424;
        sub_2236EA79C(v10);
      }
      while (v10 != v9);
      v11 = (void *)a2[52];
    }
    a2[53] = v9;
    operator delete(v11);
  }
  MEMORY[0x227684CDC](a2, 128);
  return v4;
}

uint64_t sub_2237C9F2C(_QWORD ***a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, ***a1, *(*a1)[1], *(*a1)[2]);
}

uint64_t sub_2237C9F54(_QWORD ***a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, ***a1, *(*a1)[1], *(*a1)[2]);
}

void sub_2237C9F7C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  void *v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  uint64_t *v152;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v154;
  int v155;
  const char *v156;
  int v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  __int128 v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  _QWORD *__dst;
  __int128 v167;
  char __s[37];
  _BYTE v169[24];
  __int128 v170;
  char *v171;
  size_t v172;
  unint64_t v173;
  char v174;
  _QWORD v175[5];

  v175[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    sub_2237CB250(&v161);
    if (**(int **)(v161 + 56) > 2)
      return;
    v4 = *(unsigned __int8 *)(v161 + 72);
    v5 = sub_22322F254(v161, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (!v4 && v5 == 0)
      return;
    v152 = &v161;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v154 = std::chrono::system_clock::now().__d_.__rep_;
    v155 = 2;
    v156 = "unknown file";
    v157 = 33;
    v159 = 0;
    v160 = 0;
    v158 = "unknown function";
    v150 = (unsigned __int8 *)(a2 + 216);
    sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
    v8 = v161;
    v9 = (const char *)(v161 + 16);
    v148 = v161 + 16;
    if (*(char *)(v161 + 39) < 0)
    {
      v9 = *(const char **)(v161 + 16);
      v10 = *(_QWORD *)(v161 + 24);
      v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v20 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v161 + 39);
      v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v11 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v169);
      sub_223199C58("com.apple.cv3d", (unint64_t)v169, &xmmword_255788F40);
      if ((_BYTE)v170 && (v169[23] & 0x80000000) != 0)
        operator delete(*(void **)v169);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_19:
    if (byte_255788F57 >= 0)
      v21 = (const char *)&xmmword_255788F40;
    else
      v21 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v22 = byte_255788F57;
    else
      v22 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v169 = os_log_create(v21, v9);
    v23 = &v169[8];
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&v169[16] = v22;
      *(_QWORD *)&v170 = v25 | 0x8000000000000000;
      *(_QWORD *)&v169[8] = v23;
    }
    else
    {
      BYTE7(v170) = v22;
      if (!v22)
      {
LABEL_33:
        v23[v22] = 0;
        BYTE8(v170) = 1;
        v26 = (char *)&v171;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v10 >= 0x17)
        {
          v27 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v27 = v10 | 7;
          v28 = v27 + 1;
          v26 = (char *)operator new(v27 + 1);
          v172 = v10;
          v173 = v28 | 0x8000000000000000;
          v171 = v26;
        }
        else
        {
          HIBYTE(v173) = v10;
          if (!v10)
          {
LABEL_41:
            v26[v10] = 0;
            v174 = 1;
            v29 = *(NSObject **)v169;
            if (SHIBYTE(v173) < 0)
              operator delete(v171);
            if (BYTE8(v170) && SBYTE7(v170) < 0)
              operator delete(*(void **)&v169[8]);
            if (*(_QWORD *)v169)
              os_release(*(void **)v169);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
              *(_QWORD *)v169 = 0xD04100202;
              *(_WORD *)&v169[8] = 2080;
              *(_QWORD *)&v169[10] = __s;
              v36 = (void *)_os_log_send_and_compose_impl();
              if (v36)
                free(v36);
LABEL_176:
              if (v4)
              {
                sub_2245664AC(v150, v169);
                sub_22322C138((uint64_t)&v152, "Storage: KFS %.13s restored", v169);
                sub_223182C08((uint64_t)&v152);
              }
              sub_223182C08((uint64_t)&v152);
              v115 = v160;
              if (v160)
              {
                p_shared_owners = (unint64_t *)&v160->__shared_owners_;
                do
                  v117 = __ldaxr(p_shared_owners);
                while (__stlxr(v117 - 1, p_shared_owners));
LABEL_231:
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
                return;
              }
              return;
            }
            v30 = _os_log_pack_size();
            v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
            v32 = (std::__shared_weak_count *)operator new();
            v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v32->__shared_owners_ = 0;
            v32->__shared_weak_owners_ = 0;
            v32[1].__vftable = v31;
            *(_QWORD *)&v162 = v31;
            *((_QWORD *)&v162 + 1) = v31;
            v164 = 0;
            v165 = 0;
            v163 = v32;
            v33 = strlen(__s);
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v34 = v33;
            if (v33 >= 0x17)
            {
              v54 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v54 = v33 | 7;
              v55 = v54 + 1;
              p_dst = operator new(v54 + 1);
              *(_QWORD *)&v167 = v34;
              *((_QWORD *)&v167 + 1) = v55 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v167) = v33;
              p_dst = &__dst;
              if (!v33)
              {
LABEL_98:
                *((_BYTE *)p_dst + v34) = 0;
                v56 = __dst;
                v175[0] = v167;
                *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v167 + 7);
                v57 = HIBYTE(v167);
                v58 = operator new(0x38uLL);
                v58[1] = 0;
                v58[2] = 0;
                v58[3] = off_24EC1FA48;
                *v58 = &off_24EC1F9F8;
                v59 = v175[0];
                v58[4] = v56;
                v58[5] = v59;
                *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)v175 + 7);
                *((_BYTE *)v58 + 55) = v57;
                v175[0] = 0;
                *(_QWORD *)((char *)v175 + 7) = 0;
                v60 = v165;
                v164 = (char *)(v58 + 3);
                v165 = (std::__shared_weak_count *)v58;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                *(_OWORD *)v169 = v162;
                v63 = v164;
                *(_QWORD *)&v169[16] = v163;
                if (v163)
                {
                  v64 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v65 = __ldxr(v64);
                  while (__stxr(v65 + 1, v64));
                }
                v66 = v165;
                *(_QWORD *)&v170 = v63;
                *((_QWORD *)&v170 + 1) = v165;
                if (v165)
                {
                  v67 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                  v171 = v63;
                  do
                    v69 = __ldaxr(v67);
                  while (__stlxr(v69 - 1, v67));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                else
                {
                  v171 = v63;
                }
                v86 = v163;
                if (v163)
                {
                  v87 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(_QWORD *)v169;
                if (v171[31] >= 0)
                  v90 = v171 + 8;
                else
                  v90 = (char *)*((_QWORD *)v171 + 1);
                v91 = _os_log_pack_fill();
                *(_DWORD *)v91 = 68157954;
                *(_DWORD *)(v91 + 4) = 13;
                *(_WORD *)(v91 + 8) = 2080;
                *(_QWORD *)(v91 + 10) = v90;
                v92 = operator new();
                v93 = *(unsigned __int8 *)(v8 + 39);
                v94 = v148;
                if ((v93 & 0x80u) != 0)
                {
                  v94 = *(_QWORD *)(v8 + 16);
                  v93 = *(_QWORD *)(v8 + 24);
                }
                *(_QWORD *)v92 = v89;
                *(_OWORD *)(v92 + 8) = *(_OWORD *)&v169[8];
                *(_QWORD *)&v169[8] = 0;
                *(_QWORD *)&v169[16] = 0;
                *(_OWORD *)(v92 + 24) = v170;
                v170 = 0uLL;
                *(_QWORD *)(v92 + 40) = v94;
                *(_QWORD *)(v92 + 48) = v93;
                *(_BYTE *)(v92 + 56) = 2;
                __dst = 0;
                *(_QWORD *)&v162 = v92;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v162);
                v95 = v162;
                *(_QWORD *)&v162 = 0;
                if (v95)
                {
                  v96 = *(std::__shared_weak_count **)(v95 + 32);
                  if (v96)
                  {
                    v97 = (unint64_t *)&v96->__shared_owners_;
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  v99 = *(std::__shared_weak_count **)(v95 + 16);
                  if (v99)
                  {
                    v100 = (unint64_t *)&v99->__shared_owners_;
                    do
                      v101 = __ldaxr(v100);
                    while (__stlxr(v101 - 1, v100));
                    if (!v101)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
                  MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
                  v102 = __dst;
                  __dst = 0;
                  if (v102)
                  {
                    v103 = (std::__shared_weak_count *)v102[4];
                    if (v103)
                    {
                      v104 = (unint64_t *)&v103->__shared_owners_;
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    v106 = (std::__shared_weak_count *)v102[2];
                    if (v106)
                    {
                      v107 = (unint64_t *)&v106->__shared_owners_;
                      do
                        v108 = __ldaxr(v107);
                      while (__stlxr(v108 - 1, v107));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                        std::__shared_weak_count::__release_weak(v106);
                      }
                    }
                    MEMORY[0x227684CE8](v102, 0x10F0C40B62ED6C6);
                  }
                }
                v109 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
                if (*((_QWORD *)&v170 + 1))
                {
                  v110 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v112 = *(std::__shared_weak_count **)&v169[16];
                if (*(_QWORD *)&v169[16])
                {
                  v113 = (unint64_t *)(*(_QWORD *)&v169[16] + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                goto LABEL_176;
              }
            }
            memcpy(p_dst, __s, v34);
            goto LABEL_98;
          }
        }
        memmove(v26, v9, v10);
        goto LABEL_41;
      }
    }
    memmove(v23, v21, v22);
    goto LABEL_33;
  }
  sub_2237CB250(&v161);
  if (**(int **)(v161 + 56) > 2)
    return;
  v12 = *(unsigned __int8 *)(v161 + 72);
  v13 = sub_22322F254(v161, "OSLogSurrogateAppender", 1, 0);
  v14 = v13;
  if (!v12 && v13 == 0)
    return;
  v152 = &v161;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v154 = std::chrono::system_clock::now().__d_.__rep_;
  v155 = 2;
  v156 = "unknown file";
  v157 = 35;
  v159 = 0;
  v160 = 0;
  v158 = "unknown function";
  v151 = (unsigned __int8 *)(a2 + 216);
  sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
  v16 = v161;
  v17 = (const char *)(v161 + 16);
  v149 = v161 + 16;
  if (*(char *)(v161 + 39) < 0)
  {
    v17 = *(const char **)(v161 + 16);
    v18 = *(_QWORD *)(v161 + 24);
    v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v37 & 1) != 0)
      goto LABEL_57;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v161 + 39);
    v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v19 & 1) != 0)
      goto LABEL_57;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v169);
    sub_223199C58("com.apple.cv3d", (unint64_t)v169, &xmmword_255788F40);
    if ((_BYTE)v170 && (v169[23] & 0x80000000) != 0)
      operator delete(*(void **)v169);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_57:
  if (byte_255788F57 >= 0)
    v38 = (const char *)&xmmword_255788F40;
  else
    v38 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v39 = byte_255788F57;
  else
    v39 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v169 = os_log_create(v38, v17);
  v40 = &v169[8];
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v39 >= 0x17)
  {
    v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v41 = v39 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&v169[16] = v39;
    *(_QWORD *)&v170 = v42 | 0x8000000000000000;
    *(_QWORD *)&v169[8] = v40;
    goto LABEL_70;
  }
  BYTE7(v170) = v39;
  if (v39)
LABEL_70:
    memmove(v40, v38, v39);
  v40[v39] = 0;
  BYTE8(v170) = 1;
  v43 = (char *)&v171;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v44 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v44 = v18 | 7;
    v45 = v44 + 1;
    v43 = (char *)operator new(v44 + 1);
    v172 = v18;
    v173 = v45 | 0x8000000000000000;
    v171 = v43;
    goto LABEL_78;
  }
  HIBYTE(v173) = v18;
  if (v18)
LABEL_78:
    memmove(v43, v17, v18);
  v43[v18] = 0;
  v174 = 1;
  v46 = *(NSObject **)v169;
  if (SHIBYTE(v173) < 0)
    operator delete(v171);
  if (BYTE8(v170) && SBYTE7(v170) < 0)
    operator delete(*(void **)&v169[8]);
  if (*(_QWORD *)v169)
    os_release(*(void **)v169);
  if (v14 && *(_QWORD *)(v14 + 24))
  {
    v47 = _os_log_pack_size();
    v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = v48;
    *(_QWORD *)&v162 = v48;
    *((_QWORD *)&v162 + 1) = v48;
    v164 = 0;
    v165 = 0;
    v163 = v49;
    v50 = strlen(__s);
    if (v50 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v51 = v50;
    if (v50 >= 0x17)
    {
      v70 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v70 = v50 | 7;
      v71 = v70 + 1;
      v52 = operator new(v70 + 1);
      *(_QWORD *)&v167 = v51;
      *((_QWORD *)&v167 + 1) = v71 | 0x8000000000000000;
      __dst = v52;
    }
    else
    {
      HIBYTE(v167) = v50;
      v52 = &__dst;
      if (!v50)
      {
LABEL_117:
        *((_BYTE *)v52 + v51) = 0;
        v72 = __dst;
        v175[0] = v167;
        *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v167 + 7);
        v73 = HIBYTE(v167);
        v74 = operator new(0x38uLL);
        v74[1] = 0;
        v74[2] = 0;
        v74[3] = off_24EC1FA48;
        *v74 = &off_24EC1F9F8;
        v75 = v175[0];
        v74[4] = v72;
        v74[5] = v75;
        *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v175 + 7);
        *((_BYTE *)v74 + 55) = v73;
        v175[0] = 0;
        *(_QWORD *)((char *)v175 + 7) = 0;
        v76 = v165;
        v164 = (char *)(v74 + 3);
        v165 = (std::__shared_weak_count *)v74;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        *(_OWORD *)v169 = v162;
        v79 = v164;
        *(_QWORD *)&v169[16] = v163;
        if (v163)
        {
          v80 = (unint64_t *)&v163->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = v165;
        *(_QWORD *)&v170 = v79;
        *((_QWORD *)&v170 + 1) = v165;
        if (v165)
        {
          v83 = (unint64_t *)&v165->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          v171 = v79;
          do
            v85 = __ldaxr(v83);
          while (__stlxr(v85 - 1, v83));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        else
        {
          v171 = v79;
        }
        v118 = v163;
        if (v163)
        {
          v119 = (unint64_t *)&v163->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = *(_QWORD *)v169;
        if (v171[31] >= 0)
          v122 = v171 + 8;
        else
          v122 = (char *)*((_QWORD *)v171 + 1);
        v123 = _os_log_pack_fill();
        *(_DWORD *)v123 = 68157954;
        *(_DWORD *)(v123 + 4) = 13;
        *(_WORD *)(v123 + 8) = 2080;
        *(_QWORD *)(v123 + 10) = v122;
        v124 = operator new();
        v125 = *(unsigned __int8 *)(v16 + 39);
        v126 = v149;
        if ((v125 & 0x80u) != 0)
        {
          v126 = *(_QWORD *)(v16 + 16);
          v125 = *(_QWORD *)(v16 + 24);
        }
        *(_QWORD *)v124 = v121;
        *(_OWORD *)(v124 + 8) = *(_OWORD *)&v169[8];
        *(_QWORD *)&v169[8] = 0;
        *(_QWORD *)&v169[16] = 0;
        *(_OWORD *)(v124 + 24) = v170;
        v170 = 0uLL;
        *(_QWORD *)(v124 + 40) = v126;
        *(_QWORD *)(v124 + 48) = v125;
        *(_BYTE *)(v124 + 56) = 2;
        __dst = 0;
        *(_QWORD *)&v162 = v124;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v162);
        v127 = v162;
        *(_QWORD *)&v162 = 0;
        if (v127)
        {
          v128 = *(std::__shared_weak_count **)(v127 + 32);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = *(std::__shared_weak_count **)(v127 + 16);
          if (v131)
          {
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
          v134 = __dst;
          __dst = 0;
          if (v134)
          {
            v135 = (std::__shared_weak_count *)v134[4];
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v138 = (std::__shared_weak_count *)v134[2];
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
          }
        }
        v141 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
        if (*((_QWORD *)&v170 + 1))
        {
          v142 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v144 = *(std::__shared_weak_count **)&v169[16];
        if (*(_QWORD *)&v169[16])
        {
          v145 = (unint64_t *)(*(_QWORD *)&v169[16] + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        goto LABEL_226;
      }
    }
    memcpy(v52, __s, v51);
    goto LABEL_117;
  }
  os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG);
  *(_QWORD *)v169 = 0xD04100202;
  *(_WORD *)&v169[8] = 2080;
  *(_QWORD *)&v169[10] = __s;
  v53 = (void *)_os_log_send_and_compose_impl();
  if (v53)
    free(v53);
LABEL_226:
  if (v12)
  {
    sub_2245664AC(v151, v169);
    sub_22322C138((uint64_t)&v152, "Storage: New KFS %.13s added", v169);
    sub_223182C08((uint64_t)&v152);
  }
  sub_223182C08((uint64_t)&v152);
  v115 = v160;
  if (v160)
  {
    v147 = (unint64_t *)&v160->__shared_owners_;
    do
      v117 = __ldaxr(v147);
    while (__stlxr(v117 - 1, v147));
    goto LABEL_231;
  }
}

void sub_2237CB074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237CB0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_223199DE8(v5 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CB10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
  {
    operator delete(v23);
    sub_223199DE8((uint64_t)&a23);
    sub_223182DAC((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237CB188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CB1C0()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 160) && *(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2237CB1B0);
}

void sub_2237CB22C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237CB23C()
{
  JUMPOUT(0x2237CB248);
}

void sub_2237CB250(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC5E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5E0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC5D8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC5E0);
  }
  *a1 = qword_2540CC5D8;
}

void sub_2237CB2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5E0);
  _Unwind_Resume(a1);
}

void sub_2237CB344(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  void *v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  uint64_t *v152;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v154;
  int v155;
  const char *v156;
  int v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  __int128 v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  _QWORD *__dst;
  __int128 v167;
  char __s[37];
  _BYTE v169[24];
  __int128 v170;
  char *v171;
  size_t v172;
  unint64_t v173;
  char v174;
  _QWORD v175[5];

  v175[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    sub_2237CB250(&v161);
    if (**(int **)(v161 + 56) > 2)
      return;
    v4 = *(unsigned __int8 *)(v161 + 72);
    v5 = sub_22322F254(v161, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (!v4 && v5 == 0)
      return;
    v152 = &v161;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v154 = std::chrono::system_clock::now().__d_.__rep_;
    v155 = 2;
    v156 = "unknown file";
    v157 = 43;
    v159 = 0;
    v160 = 0;
    v158 = "unknown function";
    v150 = (unsigned __int8 *)(a2 + 216);
    sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
    v8 = v161;
    v9 = (const char *)(v161 + 16);
    v148 = v161 + 16;
    if (*(char *)(v161 + 39) < 0)
    {
      v9 = *(const char **)(v161 + 16);
      v10 = *(_QWORD *)(v161 + 24);
      v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v20 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v161 + 39);
      v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v11 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v169);
      sub_223199C58("com.apple.cv3d", (unint64_t)v169, &xmmword_255788F40);
      if ((_BYTE)v170 && (v169[23] & 0x80000000) != 0)
        operator delete(*(void **)v169);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_19:
    if (byte_255788F57 >= 0)
      v21 = (const char *)&xmmword_255788F40;
    else
      v21 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v22 = byte_255788F57;
    else
      v22 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v169 = os_log_create(v21, v9);
    v23 = &v169[8];
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&v169[16] = v22;
      *(_QWORD *)&v170 = v25 | 0x8000000000000000;
      *(_QWORD *)&v169[8] = v23;
    }
    else
    {
      BYTE7(v170) = v22;
      if (!v22)
      {
LABEL_33:
        v23[v22] = 0;
        BYTE8(v170) = 1;
        v26 = (char *)&v171;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v10 >= 0x17)
        {
          v27 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v27 = v10 | 7;
          v28 = v27 + 1;
          v26 = (char *)operator new(v27 + 1);
          v172 = v10;
          v173 = v28 | 0x8000000000000000;
          v171 = v26;
        }
        else
        {
          HIBYTE(v173) = v10;
          if (!v10)
          {
LABEL_41:
            v26[v10] = 0;
            v174 = 1;
            v29 = *(NSObject **)v169;
            if (SHIBYTE(v173) < 0)
              operator delete(v171);
            if (BYTE8(v170) && SBYTE7(v170) < 0)
              operator delete(*(void **)&v169[8]);
            if (*(_QWORD *)v169)
              os_release(*(void **)v169);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
              *(_QWORD *)v169 = 0xD04100202;
              *(_WORD *)&v169[8] = 2080;
              *(_QWORD *)&v169[10] = __s;
              v36 = (void *)_os_log_send_and_compose_impl();
              if (v36)
                free(v36);
LABEL_176:
              if (v4)
              {
                sub_2245664AC(v150, v169);
                sub_22322C138((uint64_t)&v152, "Storage: KFS %.13s will be permanently removed", v169);
                sub_223182C08((uint64_t)&v152);
              }
              sub_223182C08((uint64_t)&v152);
              v115 = v160;
              if (v160)
              {
                p_shared_owners = (unint64_t *)&v160->__shared_owners_;
                do
                  v117 = __ldaxr(p_shared_owners);
                while (__stlxr(v117 - 1, p_shared_owners));
LABEL_231:
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
                return;
              }
              return;
            }
            v30 = _os_log_pack_size();
            v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
            v32 = (std::__shared_weak_count *)operator new();
            v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v32->__shared_owners_ = 0;
            v32->__shared_weak_owners_ = 0;
            v32[1].__vftable = v31;
            *(_QWORD *)&v162 = v31;
            *((_QWORD *)&v162 + 1) = v31;
            v164 = 0;
            v165 = 0;
            v163 = v32;
            v33 = strlen(__s);
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v34 = v33;
            if (v33 >= 0x17)
            {
              v54 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v54 = v33 | 7;
              v55 = v54 + 1;
              p_dst = operator new(v54 + 1);
              *(_QWORD *)&v167 = v34;
              *((_QWORD *)&v167 + 1) = v55 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v167) = v33;
              p_dst = &__dst;
              if (!v33)
              {
LABEL_98:
                *((_BYTE *)p_dst + v34) = 0;
                v56 = __dst;
                v175[0] = v167;
                *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v167 + 7);
                v57 = HIBYTE(v167);
                v58 = operator new(0x38uLL);
                v58[1] = 0;
                v58[2] = 0;
                v58[3] = off_24EC1FA48;
                *v58 = &off_24EC1F9F8;
                v59 = v175[0];
                v58[4] = v56;
                v58[5] = v59;
                *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)v175 + 7);
                *((_BYTE *)v58 + 55) = v57;
                v175[0] = 0;
                *(_QWORD *)((char *)v175 + 7) = 0;
                v60 = v165;
                v164 = (char *)(v58 + 3);
                v165 = (std::__shared_weak_count *)v58;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                *(_OWORD *)v169 = v162;
                v63 = v164;
                *(_QWORD *)&v169[16] = v163;
                if (v163)
                {
                  v64 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v65 = __ldxr(v64);
                  while (__stxr(v65 + 1, v64));
                }
                v66 = v165;
                *(_QWORD *)&v170 = v63;
                *((_QWORD *)&v170 + 1) = v165;
                if (v165)
                {
                  v67 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                  v171 = v63;
                  do
                    v69 = __ldaxr(v67);
                  while (__stlxr(v69 - 1, v67));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                else
                {
                  v171 = v63;
                }
                v86 = v163;
                if (v163)
                {
                  v87 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(_QWORD *)v169;
                if (v171[31] >= 0)
                  v90 = v171 + 8;
                else
                  v90 = (char *)*((_QWORD *)v171 + 1);
                v91 = _os_log_pack_fill();
                *(_DWORD *)v91 = 68157954;
                *(_DWORD *)(v91 + 4) = 13;
                *(_WORD *)(v91 + 8) = 2080;
                *(_QWORD *)(v91 + 10) = v90;
                v92 = operator new();
                v93 = *(unsigned __int8 *)(v8 + 39);
                v94 = v148;
                if ((v93 & 0x80u) != 0)
                {
                  v94 = *(_QWORD *)(v8 + 16);
                  v93 = *(_QWORD *)(v8 + 24);
                }
                *(_QWORD *)v92 = v89;
                *(_OWORD *)(v92 + 8) = *(_OWORD *)&v169[8];
                *(_QWORD *)&v169[8] = 0;
                *(_QWORD *)&v169[16] = 0;
                *(_OWORD *)(v92 + 24) = v170;
                v170 = 0uLL;
                *(_QWORD *)(v92 + 40) = v94;
                *(_QWORD *)(v92 + 48) = v93;
                *(_BYTE *)(v92 + 56) = 2;
                __dst = 0;
                *(_QWORD *)&v162 = v92;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v162);
                v95 = v162;
                *(_QWORD *)&v162 = 0;
                if (v95)
                {
                  v96 = *(std::__shared_weak_count **)(v95 + 32);
                  if (v96)
                  {
                    v97 = (unint64_t *)&v96->__shared_owners_;
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  v99 = *(std::__shared_weak_count **)(v95 + 16);
                  if (v99)
                  {
                    v100 = (unint64_t *)&v99->__shared_owners_;
                    do
                      v101 = __ldaxr(v100);
                    while (__stlxr(v101 - 1, v100));
                    if (!v101)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
                  MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
                  v102 = __dst;
                  __dst = 0;
                  if (v102)
                  {
                    v103 = (std::__shared_weak_count *)v102[4];
                    if (v103)
                    {
                      v104 = (unint64_t *)&v103->__shared_owners_;
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    v106 = (std::__shared_weak_count *)v102[2];
                    if (v106)
                    {
                      v107 = (unint64_t *)&v106->__shared_owners_;
                      do
                        v108 = __ldaxr(v107);
                      while (__stlxr(v108 - 1, v107));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                        std::__shared_weak_count::__release_weak(v106);
                      }
                    }
                    MEMORY[0x227684CE8](v102, 0x10F0C40B62ED6C6);
                  }
                }
                v109 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
                if (*((_QWORD *)&v170 + 1))
                {
                  v110 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v112 = *(std::__shared_weak_count **)&v169[16];
                if (*(_QWORD *)&v169[16])
                {
                  v113 = (unint64_t *)(*(_QWORD *)&v169[16] + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                goto LABEL_176;
              }
            }
            memcpy(p_dst, __s, v34);
            goto LABEL_98;
          }
        }
        memmove(v26, v9, v10);
        goto LABEL_41;
      }
    }
    memmove(v23, v21, v22);
    goto LABEL_33;
  }
  sub_2237CB250(&v161);
  if (**(int **)(v161 + 56) > 2)
    return;
  v12 = *(unsigned __int8 *)(v161 + 72);
  v13 = sub_22322F254(v161, "OSLogSurrogateAppender", 1, 0);
  v14 = v13;
  if (!v12 && v13 == 0)
    return;
  v152 = &v161;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v154 = std::chrono::system_clock::now().__d_.__rep_;
  v155 = 2;
  v156 = "unknown file";
  v157 = 46;
  v159 = 0;
  v160 = 0;
  v158 = "unknown function";
  v151 = (unsigned __int8 *)(a2 + 216);
  sub_2245664AC((unsigned __int8 *)(a2 + 216), __s);
  v16 = v161;
  v17 = (const char *)(v161 + 16);
  v149 = v161 + 16;
  if (*(char *)(v161 + 39) < 0)
  {
    v17 = *(const char **)(v161 + 16);
    v18 = *(_QWORD *)(v161 + 24);
    v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v37 & 1) != 0)
      goto LABEL_57;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v161 + 39);
    v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v19 & 1) != 0)
      goto LABEL_57;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v169);
    sub_223199C58("com.apple.cv3d", (unint64_t)v169, &xmmword_255788F40);
    if ((_BYTE)v170 && (v169[23] & 0x80000000) != 0)
      operator delete(*(void **)v169);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_57:
  if (byte_255788F57 >= 0)
    v38 = (const char *)&xmmword_255788F40;
  else
    v38 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v39 = byte_255788F57;
  else
    v39 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v169 = os_log_create(v38, v17);
  v40 = &v169[8];
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v39 >= 0x17)
  {
    v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v41 = v39 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&v169[16] = v39;
    *(_QWORD *)&v170 = v42 | 0x8000000000000000;
    *(_QWORD *)&v169[8] = v40;
    goto LABEL_70;
  }
  BYTE7(v170) = v39;
  if (v39)
LABEL_70:
    memmove(v40, v38, v39);
  v40[v39] = 0;
  BYTE8(v170) = 1;
  v43 = (char *)&v171;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v44 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v44 = v18 | 7;
    v45 = v44 + 1;
    v43 = (char *)operator new(v44 + 1);
    v172 = v18;
    v173 = v45 | 0x8000000000000000;
    v171 = v43;
    goto LABEL_78;
  }
  HIBYTE(v173) = v18;
  if (v18)
LABEL_78:
    memmove(v43, v17, v18);
  v43[v18] = 0;
  v174 = 1;
  v46 = *(NSObject **)v169;
  if (SHIBYTE(v173) < 0)
    operator delete(v171);
  if (BYTE8(v170) && SBYTE7(v170) < 0)
    operator delete(*(void **)&v169[8]);
  if (*(_QWORD *)v169)
    os_release(*(void **)v169);
  if (v14 && *(_QWORD *)(v14 + 24))
  {
    v47 = _os_log_pack_size();
    v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = v48;
    *(_QWORD *)&v162 = v48;
    *((_QWORD *)&v162 + 1) = v48;
    v164 = 0;
    v165 = 0;
    v163 = v49;
    v50 = strlen(__s);
    if (v50 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v51 = v50;
    if (v50 >= 0x17)
    {
      v70 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v70 = v50 | 7;
      v71 = v70 + 1;
      v52 = operator new(v70 + 1);
      *(_QWORD *)&v167 = v51;
      *((_QWORD *)&v167 + 1) = v71 | 0x8000000000000000;
      __dst = v52;
    }
    else
    {
      HIBYTE(v167) = v50;
      v52 = &__dst;
      if (!v50)
      {
LABEL_117:
        *((_BYTE *)v52 + v51) = 0;
        v72 = __dst;
        v175[0] = v167;
        *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v167 + 7);
        v73 = HIBYTE(v167);
        v74 = operator new(0x38uLL);
        v74[1] = 0;
        v74[2] = 0;
        v74[3] = off_24EC1FA48;
        *v74 = &off_24EC1F9F8;
        v75 = v175[0];
        v74[4] = v72;
        v74[5] = v75;
        *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v175 + 7);
        *((_BYTE *)v74 + 55) = v73;
        v175[0] = 0;
        *(_QWORD *)((char *)v175 + 7) = 0;
        v76 = v165;
        v164 = (char *)(v74 + 3);
        v165 = (std::__shared_weak_count *)v74;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        *(_OWORD *)v169 = v162;
        v79 = v164;
        *(_QWORD *)&v169[16] = v163;
        if (v163)
        {
          v80 = (unint64_t *)&v163->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = v165;
        *(_QWORD *)&v170 = v79;
        *((_QWORD *)&v170 + 1) = v165;
        if (v165)
        {
          v83 = (unint64_t *)&v165->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          v171 = v79;
          do
            v85 = __ldaxr(v83);
          while (__stlxr(v85 - 1, v83));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        else
        {
          v171 = v79;
        }
        v118 = v163;
        if (v163)
        {
          v119 = (unint64_t *)&v163->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = *(_QWORD *)v169;
        if (v171[31] >= 0)
          v122 = v171 + 8;
        else
          v122 = (char *)*((_QWORD *)v171 + 1);
        v123 = _os_log_pack_fill();
        *(_DWORD *)v123 = 68157954;
        *(_DWORD *)(v123 + 4) = 13;
        *(_WORD *)(v123 + 8) = 2080;
        *(_QWORD *)(v123 + 10) = v122;
        v124 = operator new();
        v125 = *(unsigned __int8 *)(v16 + 39);
        v126 = v149;
        if ((v125 & 0x80u) != 0)
        {
          v126 = *(_QWORD *)(v16 + 16);
          v125 = *(_QWORD *)(v16 + 24);
        }
        *(_QWORD *)v124 = v121;
        *(_OWORD *)(v124 + 8) = *(_OWORD *)&v169[8];
        *(_QWORD *)&v169[8] = 0;
        *(_QWORD *)&v169[16] = 0;
        *(_OWORD *)(v124 + 24) = v170;
        v170 = 0uLL;
        *(_QWORD *)(v124 + 40) = v126;
        *(_QWORD *)(v124 + 48) = v125;
        *(_BYTE *)(v124 + 56) = 2;
        __dst = 0;
        *(_QWORD *)&v162 = v124;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v162);
        v127 = v162;
        *(_QWORD *)&v162 = 0;
        if (v127)
        {
          v128 = *(std::__shared_weak_count **)(v127 + 32);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = *(std::__shared_weak_count **)(v127 + 16);
          if (v131)
          {
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
          v134 = __dst;
          __dst = 0;
          if (v134)
          {
            v135 = (std::__shared_weak_count *)v134[4];
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v138 = (std::__shared_weak_count *)v134[2];
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
          }
        }
        v141 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
        if (*((_QWORD *)&v170 + 1))
        {
          v142 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v144 = *(std::__shared_weak_count **)&v169[16];
        if (*(_QWORD *)&v169[16])
        {
          v145 = (unint64_t *)(*(_QWORD *)&v169[16] + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        goto LABEL_226;
      }
    }
    memcpy(v52, __s, v51);
    goto LABEL_117;
  }
  os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG);
  *(_QWORD *)v169 = 0xD04100202;
  *(_WORD *)&v169[8] = 2080;
  *(_QWORD *)&v169[10] = __s;
  v53 = (void *)_os_log_send_and_compose_impl();
  if (v53)
    free(v53);
LABEL_226:
  if (v12)
  {
    sub_2245664AC(v151, v169);
    sub_22322C138((uint64_t)&v152, "Storage: KFS %.13s will be removed", v169);
    sub_223182C08((uint64_t)&v152);
  }
  sub_223182C08((uint64_t)&v152);
  v115 = v160;
  if (v160)
  {
    v147 = (unint64_t *)&v160->__shared_owners_;
    do
      v117 = __ldaxr(v147);
    while (__stlxr(v117 - 1, v147));
    goto LABEL_231;
  }
}

void sub_2237CC43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CC484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237CC4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_223199DE8(v5 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CC4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
  {
    operator delete(v23);
    sub_223199DE8((uint64_t)&a23);
    sub_223182DAC((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237CC550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CC588()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 160) && *(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2237CC578);
}

void sub_2237CC5F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237CC604()
{
  JUMPOUT(0x2237CC610);
}

void sub_2237CC618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  const void *v8;
  size_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  size_t v15;
  const char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *p_p;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  _BYTE *v76;
  unint64_t v77;
  const char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  size_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  unint64_t *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v129;
  int v130;
  const char *v131;
  int v132;
  const char *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE object[24];
  __int128 v140;
  void *__p;
  size_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2237CB250(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v8 = *(const void **)(*(_QWORD *)object + 16);
      v9 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v8 = (const void *)(*(_QWORD *)object + 16);
      v9 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v8, v9, "Snapshot save failed. %zu / %zu KFS written, %zu failed", 0x37uLL);
    v18 = atomic_load((unsigned __int8 *)&qword_2540CC5F0);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC5F0))
    {
      sub_22455F53C(&v127);
      sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
      sub_2232300E0(&v127, (uint64_t)object, &qword_2540CC5E8);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_2540CC5F0);
    }
    v136 = qword_2540CC5E8;
    if (**(int **)(qword_2540CC5E8 + 56) > 5)
      return;
    v19 = *(unsigned __int8 *)(qword_2540CC5E8 + 72);
    v20 = sub_22322F254(qword_2540CC5E8, "OSLogSurrogateAppender", 1, 0);
    v21 = v20;
    if (!v19 && !v20)
      return;
    v127 = &v136;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v129 = std::chrono::system_clock::now().__d_.__rep_;
    v130 = 5;
    v131 = "unknown file";
    v132 = 57;
    v134 = 0;
    v135 = 0;
    v133 = "unknown function";
    v22 = *v127;
    v23 = (const char *)(*v127 + 16);
    v122 = v23;
    v123 = *v127;
    if (*(char *)(*v127 + 39) < 0)
    {
      v23 = *(const char **)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      v126 = a4;
      v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v26 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v24 = *(unsigned __int8 *)(*v127 + 39);
      v126 = a4;
      v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v25 & 1) != 0)
        goto LABEL_22;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if ((_BYTE)v140 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_22:
    if (byte_255788F57 >= 0)
      v27 = (const char *)&xmmword_255788F40;
    else
      v27 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v28 = byte_255788F57;
    else
      v28 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v27, v23);
    v29 = &object[8];
    if (v28 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v28 >= 0x17)
    {
      v30 = a2;
      v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v31 = v28 | 7;
      v32 = v31 + 1;
      v29 = operator new(v31 + 1);
      *(_QWORD *)&object[16] = v28;
      *(_QWORD *)&v140 = v32 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v29;
      a2 = v30;
    }
    else
    {
      BYTE7(v140) = v28;
      if (!v28)
      {
LABEL_36:
        v29[v28] = 0;
        BYTE8(v140) = 1;
        p_p = &__p;
        if (v24 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v24 >= 0x17)
        {
          v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v34 = v24 | 7;
          v35 = v34 + 1;
          p_p = operator new(v34 + 1);
          v142 = v24;
          v143 = v35 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v143) = v24;
          if (!v24)
          {
LABEL_44:
            *((_BYTE *)p_p + v24) = 0;
            v144 = 1;
            v36 = *(NSObject **)object;
            if (SHIBYTE(v143) < 0)
              operator delete(__p);
            if (BYTE8(v140) && SBYTE7(v140) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v21 && *(_QWORD *)(v21 + 24))
            {
              v37 = _os_log_pack_size();
              v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
              v39 = (std::__shared_weak_count *)operator new();
              v40 = v39;
              v39->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v39->__shared_weak_owners_ = 0;
              v39[1].__vftable = v38;
              *(_QWORD *)object = v38;
              *(_QWORD *)&object[8] = v38;
              *(_QWORD *)&object[16] = v39;
              do
                v42 = __ldxr(p_shared_owners);
              while (__stxr(v42 + 1, p_shared_owners));
              v140 = 0uLL;
              __p = 0;
              do
                v43 = __ldaxr(p_shared_owners);
              while (__stlxr(v43 - 1, p_shared_owners));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v40);
              }
              v44 = *(_QWORD *)object;
              v45 = _os_log_pack_fill();
              *(_DWORD *)v45 = 134218496;
              *(_QWORD *)(v45 + 4) = a2;
              *(_WORD *)(v45 + 12) = 2048;
              *(_QWORD *)(v45 + 14) = v126;
              *(_WORD *)(v45 + 22) = 2048;
              *(_QWORD *)(v45 + 24) = a3;
              v46 = operator new();
              v47 = *(unsigned __int8 *)(v123 + 39);
              v48 = v122;
              if ((v47 & 0x80u) != 0)
              {
                v48 = *(const char **)(v123 + 16);
                v47 = *(_QWORD *)(v123 + 24);
              }
              *(_QWORD *)v46 = v44;
              *(_OWORD *)(v46 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v46 + 24) = v140;
              v140 = 0uLL;
              *(_QWORD *)(v46 + 40) = v48;
              *(_QWORD *)(v46 + 48) = v47;
              *(_BYTE *)(v46 + 56) = 16;
              v137 = 0;
              v138 = v46;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), &v138);
              v49 = v138;
              v138 = 0;
              if (v49)
              {
                v50 = *(std::__shared_weak_count **)(v49 + 32);
                if (v50)
                {
                  v51 = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                v53 = *(std::__shared_weak_count **)(v49 + 16);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
                v56 = v137;
                v137 = 0;
                if (v56)
                {
                  v57 = *(std::__shared_weak_count **)(v56 + 32);
                  if (v57)
                  {
                    v58 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  v60 = *(std::__shared_weak_count **)(v56 + 16);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
                }
              }
              v63 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
              if (*((_QWORD *)&v140 + 1))
              {
                v64 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              v66 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v67 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
            }
            else
            {
              os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 134218496;
              *(_QWORD *)&object[4] = a2;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v126;
              *(_WORD *)&object[22] = 2048;
              *(_QWORD *)&v140 = a3;
              v69 = (void *)_os_log_send_and_compose_impl();
              if (v69)
                free(v69);
            }
            if (v19)
            {
              sub_22322C138((uint64_t)&v127, "Snapshot save failed. %zu / %zu KFS written, %zu failed", a2, v126, a3);
              sub_223182C08((uint64_t)&v127);
            }
            sub_223182C08((uint64_t)&v127);
            v70 = v135;
            if (v135)
            {
              v71 = (unint64_t *)&v135->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
LABEL_182:
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
              return;
            }
            return;
          }
        }
        memmove(p_p, v23, v24);
        goto LABEL_44;
      }
    }
    memmove(v29, v27, v28);
    goto LABEL_36;
  }
  sub_2237CB250(&v136);
  if (**(int **)(v136 + 56) > 2)
    return;
  v10 = *(unsigned __int8 *)(v136 + 72);
  v11 = sub_22322F254(v136, "OSLogSurrogateAppender", 1, 0);
  v12 = v11;
  if (!v10 && v11 == 0)
    return;
  v127 = &v136;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v129 = std::chrono::system_clock::now().__d_.__rep_;
  v130 = 2;
  v131 = "unknown file";
  v132 = 60;
  v134 = 0;
  v135 = 0;
  v133 = "unknown function";
  v14 = v136;
  if (*(char *)(v136 + 39) < 0)
  {
    v16 = *(const char **)(v136 + 16);
    v15 = *(_QWORD *)(v136 + 24);
    v124 = *v127 + 16;
    v125 = a2;
    v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v73 & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v15 = *(unsigned __int8 *)(v136 + 39);
    v16 = (const char *)(*v127 + 16);
    v124 = (uint64_t)v16;
    v125 = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v17 & 1) != 0)
      goto LABEL_103;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v140 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_103:
  if (byte_255788F57 >= 0)
    v74 = (const char *)&xmmword_255788F40;
  else
    v74 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v75 = byte_255788F57;
  else
    v75 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v74, v16);
  v76 = &object[8];
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v75 >= 0x17)
  {
    v77 = v12;
    v78 = v16;
    v79 = v14;
    v80 = v10;
    v81 = a4;
    v82 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v82 = v75 | 7;
    v83 = v82 + 1;
    v76 = operator new(v82 + 1);
    *(_QWORD *)&object[16] = v75;
    *(_QWORD *)&v140 = v83 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v76;
    a4 = v81;
    v10 = v80;
    v14 = v79;
    v16 = v78;
    v12 = v77;
    goto LABEL_116;
  }
  BYTE7(v140) = v75;
  if (v75)
LABEL_116:
    memmove(v76, v74, v75);
  v76[v75] = 0;
  BYTE8(v140) = 1;
  v84 = &__p;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v85 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v85 = v15 | 7;
    v86 = v85 + 1;
    v84 = operator new(v85 + 1);
    v142 = v15;
    v143 = v86 | 0x8000000000000000;
    __p = v84;
    goto LABEL_124;
  }
  HIBYTE(v143) = v15;
  if (v15)
LABEL_124:
    memmove(v84, v16, v15);
  *((_BYTE *)v84 + v15) = 0;
  v144 = 1;
  v87 = *(NSObject **)object;
  if (SHIBYTE(v143) < 0)
    operator delete(__p);
  if (BYTE8(v140) && SBYTE7(v140) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v12 && *(_QWORD *)(v12 + 24))
  {
    v88 = _os_log_pack_size();
    v89 = (std::__shared_weak_count_vtbl *)operator new(v88, (std::align_val_t)8uLL);
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v90;
    v90->__shared_owners_ = 0;
    v92 = (unint64_t *)&v90->__shared_owners_;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v89;
    *(_QWORD *)object = v89;
    *(_QWORD *)&object[8] = v89;
    *(_QWORD *)&object[16] = v90;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v140 = 0uLL;
    __p = 0;
    do
      v94 = __ldaxr(v92);
    while (__stlxr(v94 - 1, v92));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v91);
    }
    v95 = *(_QWORD *)object;
    v96 = _os_log_pack_fill();
    *(_DWORD *)v96 = 134218240;
    *(_QWORD *)(v96 + 4) = v125;
    *(_WORD *)(v96 + 12) = 2048;
    *(_QWORD *)(v96 + 14) = a4;
    v97 = operator new();
    v98 = *(unsigned __int8 *)(v14 + 39);
    v99 = v124;
    if ((v98 & 0x80u) != 0)
    {
      v99 = *(_QWORD *)(v14 + 16);
      v98 = *(_QWORD *)(v14 + 24);
    }
    *(_QWORD *)v97 = v95;
    *(_OWORD *)(v97 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v97 + 24) = v140;
    v140 = 0uLL;
    *(_QWORD *)(v97 + 40) = v99;
    *(_QWORD *)(v97 + 48) = v98;
    *(_BYTE *)(v97 + 56) = 2;
    v137 = 0;
    v138 = v97;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v138);
    v100 = v138;
    v138 = 0;
    if (v100)
    {
      v101 = *(std::__shared_weak_count **)(v100 + 32);
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = *(std::__shared_weak_count **)(v100 + 16);
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
      v107 = v137;
      v137 = 0;
      if (v107)
      {
        v108 = *(std::__shared_weak_count **)(v107 + 32);
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v111 = *(std::__shared_weak_count **)(v107 + 16);
        if (v111)
        {
          v112 = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        MEMORY[0x227684CE8](v107, 0x10F0C40B62ED6C6);
      }
    }
    v114 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
    if (*((_QWORD *)&v140 + 1))
    {
      v115 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v118 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
  }
  else
  {
    os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = v125;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = a4;
    v120 = (void *)_os_log_send_and_compose_impl();
    if (v120)
      free(v120);
  }
  if (v10)
  {
    sub_22322C138((uint64_t)&v127, "Storage: Snapshot saved. %zu / %zu KFS written", v125, a4);
    sub_223182C08((uint64_t)&v127);
  }
  sub_223182C08((uint64_t)&v127);
  v70 = v135;
  if (v135)
  {
    v121 = (unint64_t *)&v135->__shared_owners_;
    do
      v72 = __ldaxr(v121);
    while (__stlxr(v72 - 1, v121));
    goto LABEL_182;
  }
}

void sub_2237CD4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237CD540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC5F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC5F0);
  _Unwind_Resume(a1);
}

void sub_2237CD598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237CD60C()
{
  JUMPOUT(0x2237CD614);
}

void sub_2237CD638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CD654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237CD668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237CD6FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237CD70C()
{
  JUMPOUT(0x2237CD714);
}

void sub_2237CD720()
{
  JUMPOUT(0x227684CE8);
}

unint64_t sub_2237CD734(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 v5;
  unint64_t result;
  int v7;
  unint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  char v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  const char *v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  const char *v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  size_t v43;
  size_t v44;
  _BYTE **v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _BYTE *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD v101[3];
  int v102;
  const char *v103;
  int v104;
  const char *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__dst[2];
  int64_t v109;
  void *v110[2];
  _QWORD v111[3];
  const void *v112;
  uint64_t v113;
  const void *v114;
  unint64_t v115;
  void *__p;
  char v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  char *v124;
  std::__shared_weak_count *v125;
  _BYTE *v126;
  __int128 v127;
  _BYTE v128[24];
  __int128 v129;
  void *v130[2];
  unint64_t v131;
  char v132;
  _QWORD v133[5];

  v133[2] = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)&qword_2540CC600);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC600))
  {
    sub_22455F53C(v128);
    sub_223174DE4(v110, "cv3d.recon.kfplanes");
    sub_2232300E0((uint64_t **)v128, (uint64_t)v110, &qword_2540CC5F8);
    if (SHIBYTE(v111[0]) < 0)
      operator delete(v110[0]);
    __cxa_guard_release(&qword_2540CC600);
  }
  result = qword_2540CC5F8;
  v121 = qword_2540CC5F8;
  if (**(int **)(qword_2540CC5F8 + 56) <= 3)
  {
    v7 = *(unsigned __int8 *)(qword_2540CC5F8 + 72);
    result = sub_22322F254(qword_2540CC5F8, "OSLogSurrogateAppender", 1, 0);
    v8 = result;
    if (v7 || result != 0)
    {
      sub_223195210((uint64_t)v110);
      sub_2231813E8(v111, (uint64_t)"Found ", 6);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = sub_2231813E8(v10, (uint64_t)" keyframe plane clusters: ", 26);
      v102 = 0;
      if (a2 <= 0)
      {
        sub_2231AF0BC(v101, "{}");
      }
      else
      {
        sub_2231ABA1C(v101, "{");
        sub_2237CE588((uint64_t)v101, a3);
        if (a2 != 1)
        {
          v12 = a3 + 3;
          v13 = 24 * a2 - 24;
          while (1)
          {
            *(_QWORD *)v128 = v101;
            *(_QWORD *)&v128[8] = ",";
            *(_QWORD *)&v128[16] = v101;
            *(_QWORD *)&v129 = ",";
            *((_QWORD *)&v129 + 1) = ",";
            if (v102 == -1)
              break;
            v126 = v128;
            ((void (*)(_BYTE **, _QWORD *))off_24EC59CB0[v102])(&v126, v101);
            sub_2237CE588((uint64_t)v101, v12);
            v12 += 3;
            v13 -= 24;
            if (!v13)
              goto LABEL_12;
          }
LABEL_164:
          sub_22316DD70();
        }
LABEL_12:
        *(_QWORD *)v128 = v101;
        *(_QWORD *)&v128[8] = "}";
        *(_QWORD *)&v128[16] = v101;
        *(_QWORD *)&v129 = "}";
        *((_QWORD *)&v129 + 1) = "}";
        if (v102 == -1)
          goto LABEL_164;
        v126 = v128;
        ((void (*)(_BYTE **, _QWORD *))off_24EC59CB0[v102])(&v126, v101);
      }
      if (v102 == -1)
        sub_22316DD70();
      *(_QWORD *)v128 = &v126;
      ((void (*)(__int128 *__return_ptr, _BYTE *, _QWORD *))off_24EC59CE0[v102])(&v122, v128, v101);
      if (v102 != -1)
        ((void (*)(_BYTE *, _QWORD *))off_24EC59C98[v102])(v128, v101);
      if (SHIBYTE(v123) >= 0)
        v14 = &v122;
      else
        v14 = (__int128 *)v122;
      if (SHIBYTE(v123) >= 0)
        v15 = HIBYTE(v123);
      else
        v15 = *((_QWORD *)&v122 + 1);
      sub_2231813E8(v11, (uint64_t)v14, v15);
      if (SHIBYTE(v123) < 0)
      {
        operator delete((void *)v122);
        v16 = v119;
        v100 = v7;
        if ((v119 & 0x10) == 0)
        {
LABEL_26:
          if ((v16 & 8) == 0)
          {
            v17 = 0;
            HIBYTE(v109) = 0;
            v18 = __dst;
            goto LABEL_39;
          }
          v20 = v112;
          v17 = v113 - (_QWORD)v112;
          if ((unint64_t)(v113 - (_QWORD)v112) > 0x7FFFFFFFFFFFFFF7)
LABEL_84:
            sub_22316DBC0();
LABEL_32:
          if (v17 >= 0x17)
          {
            v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v21 = v17 | 7;
            v22 = v21 + 1;
            v18 = (void **)operator new(v21 + 1);
            __dst[1] = (void *)v17;
            v109 = v22 | 0x8000000000000000;
            __dst[0] = v18;
          }
          else
          {
            HIBYTE(v109) = v17;
            v18 = __dst;
            if (!v17)
            {
LABEL_39:
              *((_BYTE *)v18 + v17) = 0;
              v101[0] = &v121;
              v101[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v101[2] = std::chrono::system_clock::now().__d_.__rep_;
              v102 = 3;
              v103 = "unknown file";
              v104 = 32;
              v106 = 0;
              v107 = 0;
              v105 = "unknown function";
              if (v109 >= 0)
                v23 = (const char *)__dst;
              else
                v23 = (const char *)__dst[0];
              v24 = *(_QWORD *)v101[0];
              v25 = *(_QWORD *)v101[0] + 16;
              if (*(char *)(*(_QWORD *)v101[0] + 39) < 0)
              {
                v27 = *(const char **)(v24 + 16);
                v26 = *(_QWORD *)(v24 + 24);
                v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v29 & 1) != 0)
                  goto LABEL_46;
              }
              else
              {
                v26 = *(unsigned __int8 *)(*(_QWORD *)v101[0] + 39);
                v27 = (const char *)(*(_QWORD *)v101[0] + 16);
                v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v28 & 1) != 0)
                  goto LABEL_46;
              }
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v128);
                sub_223199C58("com.apple.cv3d", (unint64_t)v128, &xmmword_255788F40);
                if ((_BYTE)v129 && (v128[23] & 0x80000000) != 0)
                  operator delete(*(void **)v128);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
LABEL_46:
              if (byte_255788F57 >= 0)
                v30 = (const char *)&xmmword_255788F40;
              else
                v30 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v31 = byte_255788F57;
              else
                v31 = *((_QWORD *)&xmmword_255788F40 + 1);
              *(_QWORD *)v128 = os_log_create(v30, v27);
              v32 = &v128[8];
              if (v31 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v31 >= 0x17)
              {
                v33 = v25;
                v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v34 = v31 | 7;
                v35 = v34 + 1;
                v32 = operator new(v34 + 1);
                *(_QWORD *)&v128[16] = v31;
                *(_QWORD *)&v129 = v35 | 0x8000000000000000;
                *(_QWORD *)&v128[8] = v32;
                v25 = v33;
              }
              else
              {
                BYTE7(v129) = v31;
                if (!v31)
                {
LABEL_60:
                  v32[v31] = 0;
                  BYTE8(v129) = 1;
                  v36 = v130;
                  if (v26 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v26 >= 0x17)
                  {
                    v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v26 | 7) != 0x17)
                      v38 = v26 | 7;
                    v39 = v38 + 1;
                    v36 = (void **)operator new(v38 + 1);
                    v130[1] = (void *)v26;
                    v131 = v39 | 0x8000000000000000;
                    v130[0] = v36;
                  }
                  else
                  {
                    HIBYTE(v131) = v26;
                    if (!v26)
                    {
                      LOBYTE(v130[0]) = 0;
                      v132 = 1;
                      v37 = *(NSObject **)v128;
                      if ((SHIBYTE(v131) & 0x80000000) == 0)
                        goto LABEL_64;
                      goto LABEL_70;
                    }
                  }
                  memmove(v36, v27, v26);
                  *((_BYTE *)v36 + v26) = 0;
                  v132 = 1;
                  v37 = *(NSObject **)v128;
                  if ((SHIBYTE(v131) & 0x80000000) == 0)
                  {
LABEL_64:
                    if (!BYTE8(v129))
                      goto LABEL_73;
                    goto LABEL_71;
                  }
LABEL_70:
                  operator delete(v130[0]);
                  if (!BYTE8(v129))
                    goto LABEL_73;
LABEL_71:
                  if (SBYTE7(v129) < 0)
                    operator delete(*(void **)&v128[8]);
LABEL_73:
                  if (*(_QWORD *)v128)
                    os_release(*(void **)v128);
                  if (!v8 || !*(_QWORD *)(v8 + 24))
                  {
                    os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
                    *(_DWORD *)v128 = 136315138;
                    *(_QWORD *)&v128[4] = v23;
                    v46 = (void *)_os_log_send_and_compose_impl();
                    v47 = v100;
                    if (v46)
                      free(v46);
                    goto LABEL_149;
                  }
                  v40 = _os_log_pack_size();
                  v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
                  v42 = (std::__shared_weak_count *)operator new();
                  v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v42->__shared_owners_ = 0;
                  v42->__shared_weak_owners_ = 0;
                  v42[1].__vftable = v41;
                  *(_QWORD *)&v122 = v41;
                  *((_QWORD *)&v122 + 1) = v41;
                  v124 = 0;
                  v125 = 0;
                  v123 = v42;
                  v43 = strlen(v23);
                  if (v43 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v44 = v43;
                  if (v43 >= 0x17)
                  {
                    v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v43 | 7) != 0x17)
                      v48 = v43 | 7;
                    v49 = v48 + 1;
                    v45 = (_BYTE **)operator new(v48 + 1);
                    *(_QWORD *)&v127 = v44;
                    *((_QWORD *)&v127 + 1) = v49 | 0x8000000000000000;
                    v126 = v45;
                  }
                  else
                  {
                    HIBYTE(v127) = v43;
                    v45 = &v126;
                    if (!v43)
                    {
LABEL_89:
                      *((_BYTE *)v45 + v44) = 0;
                      v50 = v126;
                      v133[0] = v127;
                      *(_QWORD *)((char *)v133 + 7) = *(_QWORD *)((char *)&v127 + 7);
                      v51 = HIBYTE(v127);
                      v52 = operator new(0x38uLL);
                      v52[1] = 0;
                      v52[2] = 0;
                      v52[3] = off_24EC1FA48;
                      *v52 = &off_24EC1F9F8;
                      v53 = v133[0];
                      v52[4] = v50;
                      v52[5] = v53;
                      *(_QWORD *)((char *)v52 + 47) = *(_QWORD *)((char *)v133 + 7);
                      *((_BYTE *)v52 + 55) = v51;
                      v133[0] = 0;
                      *(_QWORD *)((char *)v133 + 7) = 0;
                      v54 = v125;
                      v124 = (char *)(v52 + 3);
                      v125 = (std::__shared_weak_count *)v52;
                      if (v54)
                      {
                        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                        do
                          v56 = __ldaxr(p_shared_owners);
                        while (__stlxr(v56 - 1, p_shared_owners));
                        if (!v56)
                        {
                          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                          std::__shared_weak_count::__release_weak(v54);
                        }
                      }
                      *(_OWORD *)v128 = v122;
                      v57 = v124;
                      *(_QWORD *)&v128[16] = v123;
                      if (v123)
                      {
                        v58 = (unint64_t *)&v123->__shared_owners_;
                        do
                          v59 = __ldxr(v58);
                        while (__stxr(v59 + 1, v58));
                      }
                      v60 = v125;
                      *(_QWORD *)&v129 = v57;
                      *((_QWORD *)&v129 + 1) = v125;
                      if (v125)
                      {
                        v61 = (unint64_t *)&v125->__shared_owners_;
                        do
                          v62 = __ldxr(v61);
                        while (__stxr(v62 + 1, v61));
                        v130[0] = v57;
                        do
                          v63 = __ldaxr(v61);
                        while (__stlxr(v63 - 1, v61));
                        if (!v63)
                        {
                          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                          std::__shared_weak_count::__release_weak(v60);
                        }
                      }
                      else
                      {
                        v130[0] = v57;
                      }
                      v64 = v123;
                      if (v123)
                      {
                        v65 = (unint64_t *)&v123->__shared_owners_;
                        do
                          v66 = __ldaxr(v65);
                        while (__stlxr(v66 - 1, v65));
                        if (!v66)
                        {
                          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                          std::__shared_weak_count::__release_weak(v64);
                        }
                      }
                      v67 = *(_QWORD *)v128;
                      if (*((char *)v130[0] + 31) >= 0)
                        v68 = (char *)v130[0] + 8;
                      else
                        v68 = (char *)*((_QWORD *)v130[0] + 1);
                      v69 = _os_log_pack_fill();
                      *(_DWORD *)v69 = 136315138;
                      *(_QWORD *)(v69 + 4) = v68;
                      v70 = operator new();
                      v71 = *(unsigned __int8 *)(v24 + 39);
                      v72 = *(_QWORD *)(v24 + 16);
                      v73 = *(_QWORD *)(v24 + 24);
                      v74 = v129;
                      *(_OWORD *)(v70 + 8) = *(_OWORD *)&v128[8];
                      if ((v71 & 0x80u) != 0)
                        v71 = v73;
                      else
                        v72 = v25;
                      *(_QWORD *)v70 = v67;
                      *(_QWORD *)&v128[8] = 0;
                      *(_QWORD *)&v128[16] = 0;
                      *(_OWORD *)(v70 + 24) = v74;
                      v129 = 0uLL;
                      *(_QWORD *)(v70 + 40) = v72;
                      *(_QWORD *)(v70 + 48) = v71;
                      *(_BYTE *)(v70 + 56) = 1;
                      v126 = 0;
                      *(_QWORD *)&v122 = v70;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v122);
                      v75 = v122;
                      *(_QWORD *)&v122 = 0;
                      v47 = v100;
                      if (v75)
                      {
                        v76 = *(std::__shared_weak_count **)(v75 + 32);
                        if (v76)
                        {
                          v77 = (unint64_t *)&v76->__shared_owners_;
                          do
                            v78 = __ldaxr(v77);
                          while (__stlxr(v78 - 1, v77));
                          if (!v78)
                          {
                            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                            std::__shared_weak_count::__release_weak(v76);
                          }
                        }
                        v79 = *(std::__shared_weak_count **)(v75 + 16);
                        if (v79)
                        {
                          v80 = (unint64_t *)&v79->__shared_owners_;
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
                        v82 = v126;
                        v126 = 0;
                        if (v82)
                        {
                          v83 = (std::__shared_weak_count *)*((_QWORD *)v82 + 4);
                          if (v83)
                          {
                            v84 = (unint64_t *)&v83->__shared_owners_;
                            do
                              v85 = __ldaxr(v84);
                            while (__stlxr(v85 - 1, v84));
                            if (!v85)
                            {
                              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                              std::__shared_weak_count::__release_weak(v83);
                            }
                          }
                          v86 = (std::__shared_weak_count *)*((_QWORD *)v82 + 2);
                          if (v86)
                          {
                            v87 = (unint64_t *)&v86->__shared_owners_;
                            do
                              v88 = __ldaxr(v87);
                            while (__stlxr(v88 - 1, v87));
                            if (!v88)
                            {
                              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                              std::__shared_weak_count::__release_weak(v86);
                            }
                          }
                          MEMORY[0x227684CE8](v82, 0x10F0C40B62ED6C6);
                        }
                      }
                      v89 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
                      if (*((_QWORD *)&v129 + 1))
                      {
                        v90 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
                        do
                          v91 = __ldaxr(v90);
                        while (__stlxr(v91 - 1, v90));
                        if (!v91)
                        {
                          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                          std::__shared_weak_count::__release_weak(v89);
                        }
                      }
                      v92 = *(std::__shared_weak_count **)&v128[16];
                      if (*(_QWORD *)&v128[16])
                      {
                        v93 = (unint64_t *)(*(_QWORD *)&v128[16] + 8);
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
LABEL_149:
                      if (v47)
                      {
                        v95 = (const char *)__dst;
                        if (v109 < 0)
                          v95 = (const char *)__dst[0];
                        sub_22322C138((uint64_t)v101, "%s", v95);
                        sub_223182C08((uint64_t)v101);
                      }
                      sub_223182C08((uint64_t)v101);
                      v96 = v107;
                      if (v107)
                      {
                        v97 = (unint64_t *)&v107->__shared_owners_;
                        do
                          v98 = __ldaxr(v97);
                        while (__stlxr(v98 - 1, v97));
                        if (!v98)
                        {
                          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                          std::__shared_weak_count::__release_weak(v96);
                        }
                      }
                      if (SHIBYTE(v109) < 0)
                        operator delete(__dst[0]);
                      v110[0] = *(void **)MEMORY[0x24BEDB7F0];
                      v99 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)v110 + *((_QWORD *)v110[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      v111[0] = v99;
                      v111[1] = MEMORY[0x24BEDB848] + 16;
                      if (v117 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      return MEMORY[0x227684BE0](&v120);
                    }
                  }
                  memcpy(v45, v23, v44);
                  goto LABEL_89;
                }
              }
              memmove(v32, v30, v31);
              goto LABEL_60;
            }
          }
          memmove(v18, v20, v17);
          goto LABEL_39;
        }
      }
      else
      {
        v16 = v119;
        v100 = v7;
        if ((v119 & 0x10) == 0)
          goto LABEL_26;
      }
      v19 = v118;
      if (v118 < v115)
      {
        v118 = v115;
        v19 = v115;
      }
      v20 = v114;
      v17 = v19 - (_QWORD)v114;
      if (v19 - (unint64_t)v114 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_84;
      goto LABEL_32;
    }
  }
  return result;
}

void sub_2237CE384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 168) && *(char *)(v31 - 169) < 0)
    operator delete(*(void **)(v31 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  if (a25 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2237CE574()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237CE588(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  if (a2[1] - *a2 <= 31)
  {
    v12 = a1;
    v13 = "{}";
    v14 = a1;
    v15 = "{}";
    v16 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v17 = &v12;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC59C80[v3])(&v17, a1);
    }
LABEL_11:
    sub_22316DD70();
  }
  v12 = a1;
  v13 = "{";
  v14 = a1;
  v15 = "{";
  v16 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC59CB0[v5])(&v17, a1);
  v7 = *a2;
  sub_2237CE6F0(a1, *a2);
  v8 = a2[1];
  for (i = v7 + 32; i != v8; i += 32)
  {
    v12 = a1;
    v13 = ",";
    v14 = a1;
    v15 = ",";
    v16 = ",";
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    v17 = &v12;
    ((void (*)(uint64_t **, uint64_t))off_24EC59CB0[v10])(&v17, a1);
    sub_2237CE6F0(a1, i);
  }
  v12 = a1;
  v13 = "}";
  v14 = a1;
  v15 = "}";
  v16 = "}";
  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_11;
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC59CB0[v11])(&v17, a1);
}

void sub_2237CE6F0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v20[0] = v4;
  sub_2237B86C8((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v13 + 128);
    MEMORY[0x227684CE8](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_22316DD70();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24EC59CC8[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_2237CE940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2237CE964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237CE980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237CE994(uint64_t a1, unsigned __int8 *a2, float32x4_t *a3)
{
  _OWORD *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  void *v14;
  __int128 v15;
  _BYTE v16[32];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC(&a3[13].u8[8], v16);
  v5 = operator new(0x28uLL);
  v6 = *(_OWORD *)&v16[16];
  *v5 = *(_OWORD *)v16;
  v5[1] = v6;
  *((_DWORD *)v5 + 8) = v17;
  *((_BYTE *)v5 + 36) = 0;
  *((_BYTE *)v5 + 8) = 0;
  sub_2245664AC(a2, v16);
  v7 = operator new(0x28uLL);
  v8 = *(_OWORD *)&v16[16];
  *(_OWORD *)v7 = *(_OWORD *)v16;
  *((_OWORD *)v7 + 1) = v8;
  *((_DWORD *)v7 + 8) = v17;
  v7[36] = 0;
  v14 = v7;
  v7[8] = 0;
  v16[23] = 20;
  v15 = xmmword_22464DCC0;
  strcpy(v16, "KeyframePlanesV2.KFS");
  v11.__r_.__value_.__l.__size_ = 0;
  v11.__r_.__value_.__r.__words[2] = 0xC00000000000000;
  v11.__r_.__value_.__r.__words[0] = *(_QWORD *)v5;
  LODWORD(v11.__r_.__value_.__r.__words[1]) = 1601203039;
  v9 = std::string::append(&v11, v7, 8uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  sub_22374175C((uint64_t)a2, a3 + 6, (uint64_t)a3, (uint64_t)v16, (uint64_t)__p, 0, 0);
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v16[23] & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)v16);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v14);
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if ((v16[23] & 0x80000000) != 0)
    goto LABEL_8;
LABEL_4:
  if (SHIBYTE(v15) < 0)
    goto LABEL_9;
LABEL_5:
  operator delete(v5);
}

void sub_2237CEB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    operator delete(v33);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a22);
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_2237CEBEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237CEC00(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _BYTE *v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  int v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  void **v23;
  void *v24;
  void *v25;
  int v26;
  BOOL v27;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *p_dst;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  void *v39;
  int v40;
  std::string v41;
  __int128 v42;
  __int128 v43;
  int v44;
  void *__p[2];
  unsigned __int8 v46;
  void *v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  std::string __dst;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)(a3 + 216), &v54);
  v4 = operator new(0x28uLL);
  v5 = v55;
  *(_OWORD *)v4 = v54;
  *((_OWORD *)v4 + 1) = v5;
  *((_DWORD *)v4 + 8) = v56;
  v4[36] = 0;
  v49 = v4;
  v50 = xmmword_22464DCC0;
  v4[8] = 0;
  sub_2245664AC(a2, &v54);
  v6 = operator new(0x28uLL);
  v7 = v55;
  *(_OWORD *)v6 = v54;
  *((_OWORD *)v6 + 1) = v7;
  *((_DWORD *)v6 + 8) = v56;
  v6[36] = 0;
  v47 = v6;
  v48 = xmmword_22464DCC0;
  v6[8] = 0;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC59D08);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v8[2];
    }
    v10 = *(_QWORD *)(v9 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      sub_2241471F8();
      v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
        v42 = 0u;
        v43 = 0u;
        v44 = 728325608;
        kdebug_trace();
        sub_2241498F4((uint64_t)&v54, 0);
        v41.__r_.__value_.__l.__size_ = 0;
        v41.__r_.__value_.__r.__words[2] = 0xC00000000000000;
        v41.__r_.__value_.__r.__words[0] = *(_QWORD *)v4;
        LODWORD(v41.__r_.__value_.__r.__words[1]) = 1601203039;
        if (v48 >= 0)
          v15 = (const std::string::value_type *)&v47;
        else
          v15 = (const std::string::value_type *)v47;
        if (v48 >= 0)
          v16 = HIBYTE(v48);
        else
          v16 = v48;
        v17 = std::string::append(&v41, v15, v16);
        v18 = v17->__r_.__value_.__r.__words[0];
        v53[0] = v17->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
        v19 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          __dst.__r_.__value_.__r.__words[0] = v18;
          __dst.__r_.__value_.__l.__size_ = v53[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v53 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
          v53[0] = 0;
          *(_QWORD *)((char *)v53 + 7) = 0;
          *(_QWORD *)&v51 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v51 + 1) = 2;
          v20 = sub_2241471F8();
          sub_223452794((uint64_t)v20, v14, (uint64_t)&v54, (uint64_t)&__dst, &v51);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v21 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_18:
            operator delete(v21);
          }
        }
        else if (v19 < 0)
        {
          v21 = (void *)v18;
          goto LABEL_18;
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        sub_22316F8F4((uint64_t *)&v54);
        kdebug_trace();
      }
    }
  }
  v42 = 0u;
  v43 = 0u;
  v44 = 728325624;
  kdebug_trace();
  v22 = v46;
  if ((v46 & 0x80u) != 0)
    v22 = (unint64_t)__p[1];
  if (v22 >= 0x11)
  {
    v23 = __p;
    if ((v46 & 0x80u) != 0)
      v23 = (void **)__p[0];
    v24 = *v23;
    v25 = v23[1];
    v26 = *((unsigned __int8 *)v23 + 16);
    v27 = v24 == (void *)0x6365722E64337663 && v25 == (void *)0x73746174532E6E6FLL;
    if (v27 && v26 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)&v54, 0);
      v29 = SHIBYTE(v50);
      if (v50 >= 0)
        v30 = HIBYTE(v50);
      else
        v30 = v50;
      v31 = v30 + 4;
      if (v30 + 4 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v31 >= 0x17)
      {
        v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v33 = v31 | 7;
        v34 = v33 + 1;
        p_dst = (std::string *)operator new(v33 + 1);
        __dst.__r_.__value_.__l.__size_ = v30 + 4;
        __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 4;
        if (!v30)
          goto LABEL_49;
      }
      if (v29 >= 0)
        v35 = &v49;
      else
        v35 = v49;
      memmove(p_dst, v35, v30);
LABEL_49:
      strcpy((char *)p_dst + v30, "_kp_");
      if (v48 >= 0)
        v36 = (const std::string::value_type *)&v47;
      else
        v36 = (const std::string::value_type *)v47;
      if (v48 >= 0)
        v37 = HIBYTE(v48);
      else
        v37 = v48;
      v38 = std::string::append(&__dst, v36, v37);
      v39 = (void *)v38->__r_.__value_.__r.__words[0];
      v40 = SHIBYTE(v38->__r_.__value_.__r.__words[2]);
      v38->__r_.__value_.__r.__words[0] = 0;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      if (v40 < 0)
      {
        operator delete(v39);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_57;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_57:
        sub_22316F8F4((uint64_t *)&v54);
        goto LABEL_58;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_57;
    }
  }
LABEL_58:
  kdebug_trace();
  if ((char)v46 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        return;
LABEL_64:
      operator delete(v49);
      return;
    }
  }
  else if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    goto LABEL_60;
  }
  operator delete(v47);
  if (SHIBYTE(v50) < 0)
    goto LABEL_64;
}

void sub_2237CF168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237CF26C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float32x4_t *a4)
{
  _OWORD *v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  void *v15;
  __int128 v16;
  _BYTE v17[32];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC(&a4[13].u8[8], v17);
  v6 = operator new(0x28uLL);
  v7 = *(_OWORD *)&v17[16];
  *v6 = *(_OWORD *)v17;
  v6[1] = v7;
  *((_DWORD *)v6 + 8) = v18;
  *((_BYTE *)v6 + 36) = 0;
  *((_BYTE *)v6 + 8) = 0;
  sub_2245664AC(a2, v17);
  v8 = operator new(0x28uLL);
  v9 = *(_OWORD *)&v17[16];
  *(_OWORD *)v8 = *(_OWORD *)v17;
  *((_OWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 8) = v18;
  v8[36] = 0;
  v15 = v8;
  v8[8] = 0;
  v17[23] = 20;
  v16 = xmmword_22464DCC0;
  strcpy(v17, "KeyframePlanesV2.KFS");
  v12.__r_.__value_.__l.__size_ = 0;
  v12.__r_.__value_.__r.__words[2] = 0xC00000000000000;
  v12.__r_.__value_.__r.__words[0] = *(_QWORD *)v6;
  LODWORD(v12.__r_.__value_.__r.__words[1]) = 1601203039;
  v10 = std::string::append(&v12, v8, 8uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v14 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_22374175C((uint64_t)a2, a4 + 6, (uint64_t)a4, (uint64_t)v17, (uint64_t)__p, 0, 0);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v17[23] & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)v17);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(v15);
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if ((v17[23] & 0x80000000) != 0)
    goto LABEL_8;
LABEL_4:
  if (SHIBYTE(v16) < 0)
    goto LABEL_9;
LABEL_5:
  operator delete(v6);
}

void sub_2237CF438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    operator delete(v33);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a22);
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_2237CF4C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2237CF4DC()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237CF4F0(uint64_t a1, uint64_t a2, int **a3, uint64_t (**a4)(), uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int **i;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  __int16 v87;
  unint64_t v88;
  unsigned int v89;
  __int16 *v90;
  unsigned int v91;
  __int16 *v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  __int16 v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  unsigned __int8 v111;
  unsigned __int8 *v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  BOOL v121;
  char v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  int **v137;
  uint64_t *v138;
  int *v139;
  int v140;
  BOOL v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __int16 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  const char **v165;
  const char *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  int **v197;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  char *__p;
  std::__shared_weak_count *v205;
  __int16 *v206;
  int v207;
  int v208;
  int v209;
  unsigned __int16 *v210;
  std::string v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  uint64_t (**v216)();
  uint64_t v217;
  std::__shared_weak_count *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int16 v222;
  uint64_t (**v223)();
  uint64_t v224;
  std::__shared_weak_count *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int16 v229;
  uint64_t (**v230)();
  uint64_t v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int16 v236;
  _QWORD v237[2];
  __int128 v238;
  std::__shared_weak_count *v239;
  int v240;
  char *v241;
  uint64_t v242;
  char *v243;
  const char *v244;
  std::__shared_weak_count *v245;
  uint64_t (**v246)();
  uint64_t v247;
  _QWORD v248[16];

  v248[13] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      v10 = v8;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v10[2];
    }
    v11 = *(_QWORD *)(v9 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      v244 = "cv3d.recon.";
      v245 = (std::__shared_weak_count *)11;
      v246 = a4;
      v247 = a5;
      sub_2231A9820((uint64_t)&v244, (uint64_t)v248, 0, 0, &v211);
      sub_2241471F8();
      v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        {
          *(_QWORD *)&v212 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v212 + 1) = 2;
          v16 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v194 = v15;
            v190 = v16;
            v197 = &a3[a2];
            if (a2)
            {
              for (i = a3; i != v197; ++i)
              {
                v19 = *i;
                if (!sub_2237DA2E0(*i))
                  continue;
                v20 = *((_QWORD *)v19 + 9);
                v22 = *(uint64_t **)(a1 + 8);
                v21 = *(_QWORD *)(a1 + 16);
                if ((unint64_t)v22 < v21)
                {
                  *v22 = v20;
                  v18 = v22 + 1;
                }
                else
                {
                  v23 = *(uint64_t **)a1;
                  v24 = (uint64_t)v22 - *(_QWORD *)a1;
                  v25 = v24 >> 3;
                  v26 = (v24 >> 3) + 1;
                  if (v26 >> 61)
                    sub_22316E078();
                  v27 = v21 - (_QWORD)v23;
                  if (v27 >> 2 > v26)
                    v26 = v27 >> 2;
                  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                    v28 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v26;
                  if (v28)
                  {
                    if (v28 >> 61)
                      sub_223174E94();
                    v29 = operator new(8 * v28);
                    v30 = (uint64_t *)&v29[8 * v25];
                    *v30 = v20;
                    v18 = v30 + 1;
                    v31 = (char *)v22 - (char *)v23;
                    if (v22 != v23)
                    {
LABEL_25:
                      v32 = v31 - 8;
                      if (v32 < 0x58)
                        goto LABEL_279;
                      if ((unint64_t)((char *)v22 - v29 - v24) < 0x20)
                        goto LABEL_279;
                      v33 = (v32 >> 3) + 1;
                      v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
                      v35 = &v22[v34 / 0xFFFFFFFFFFFFFFF8];
                      v30 = (uint64_t *)((char *)v30 - v34);
                      v36 = &v29[v24 - 16];
                      v37 = v22 - 2;
                      v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v39 = *(_OWORD *)v37;
                        *(v36 - 1) = *((_OWORD *)v37 - 1);
                        *v36 = v39;
                        v36 -= 2;
                        v37 -= 4;
                        v38 -= 4;
                      }
                      while (v38);
                      v22 = v35;
                      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_279:
                        do
                        {
                          v40 = *--v22;
                          *--v30 = v40;
                        }
                        while (v22 != v23);
                      }
                      v22 = *(uint64_t **)a1;
                      *(_QWORD *)a1 = v30;
                      *(_QWORD *)(a1 + 8) = v18;
                      *(_QWORD *)(a1 + 16) = &v29[8 * v28];
                      if (!v22)
                        goto LABEL_12;
LABEL_35:
                      operator delete(v22);
                      goto LABEL_12;
                    }
                  }
                  else
                  {
                    v29 = 0;
                    v30 = (uint64_t *)(8 * v25);
                    v41 = (uint64_t *)(8 * v25);
                    *v41 = v20;
                    v18 = v41 + 1;
                    v31 = (char *)v22 - (char *)v23;
                    if (v22 != v23)
                      goto LABEL_25;
                  }
                  *(_QWORD *)a1 = v30;
                  *(_QWORD *)(a1 + 8) = v18;
                  *(_QWORD *)(a1 + 16) = &v29[8 * v28];
                  if (v22)
                    goto LABEL_35;
                }
LABEL_12:
                *(_QWORD *)(a1 + 8) = v18;
              }
            }
            v42 = *(uint64_t **)(a1 + 8);
            if (*(uint64_t **)a1 == v42)
            {
              *(_QWORD *)&v238 = 0x100000001;
              LOBYTE(v230) = 0;
              v244 = (const char *)&off_24EC21B18;
              sub_2233B32D0(&v238, &v230, (uint64_t *)&v245);
              v45 = v15;
            }
            else
            {
              sub_2237DA404(*(uint64_t **)a1, v42, 126 - 2 * __clz(((uint64_t)v42 - *(_QWORD *)a1) >> 3), 1);
              v43 = *(_QWORD *)(a1 + 8);
              LODWORD(v43) = vcvtpd_u64_f64(sqrt((double)(unint64_t)((uint64_t)(v43 - *(_QWORD *)a1) >> 3)));
              v192 = v43;
              v193 = *(_QWORD *)(**(_QWORD **)a1 + 88);
              LODWORD(v238) = v43 * v193;
              DWORD1(v238) = v43 * HIDWORD(v193);
              LOBYTE(v230) = 10;
              v244 = (const char *)&off_24EC21B18;
              sub_2233B32D0(&v238, &v230, (uint64_t *)&v245);
              v44 = *(uint64_t **)a1;
              v191 = *(uint64_t **)(a1 + 8);
              v45 = v15;
              if (*(uint64_t **)a1 != v191)
              {
                v46 = 0;
                v47 = (unsigned __int8 *)&qword_255795680;
                do
                {
                  v200 = *v44;
                  v237[0] = ((v46 % v192) * v193) | (v46
                                                                               / v192
                                                                               * (v193 & 0xFFFFFFFF00000000));
                  v237[1] = v193;
                  *(_QWORD *)&v238 = &off_24EC232F0;
                  sub_223416D28((uint64_t)&v244, (uint64_t *)&v238 + 1);
                  v195 = v46;
                  v230 = &off_24EC232F0;
                  sub_2237467C8((uint64_t)&v238, v237, (uint64_t)&v231);
                  v48 = v239;
                  if (!v239)
                    goto LABEL_45;
                  p_shared_owners = (unint64_t *)&v239->__shared_owners_;
                  do
                    v50 = __ldaxr(p_shared_owners);
                  while (__stlxr(v50 - 1, p_shared_owners));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                    v223 = &off_24EC232F0;
                    v51 = v231;
                    v52 = v232;
                    if (!v232)
                    {
LABEL_60:
                      v224 = v51;
                      v225 = 0;
                      v226 = v233;
                      v227 = v234;
                      v228 = v235;
                      v229 = v236;
                      goto LABEL_61;
                    }
                  }
                  else
                  {
LABEL_45:
                    v223 = &off_24EC232F0;
                    v51 = v231;
                    v52 = v232;
                    if (!v232)
                      goto LABEL_60;
                  }
                  v53 = (unint64_t *)&v52->__shared_owners_;
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                  v55 = v236;
                  do
                    v56 = __ldxr(v53);
                  while (__stxr(v56 + 1, v53));
                  v226 = v233;
                  v227 = v234;
                  v228 = v235;
                  do
                    v57 = __ldxr(v53);
                  while (__stxr(v57 + 1, v53));
                  v224 = v51;
                  v225 = v52;
                  v229 = v55;
                  do
                    v58 = __ldaxr(v53);
                  while (__stlxr(v58 - 1, v53));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                  do
                    v59 = __ldaxr(v53);
                  while (__stlxr(v59 - 1, v53));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
LABEL_61:
                  v196 = v44;
                  v61 = *(_QWORD *)(*v44 + 160);
                  v60 = *(_QWORD *)(*v44 + 168);
                  LOWORD(v238) = 128;
                  BYTE2(v238) = 0;
                  sub_2237039AC((uint64_t)&v223, (__int16 *)&v238);
                  if (v61 != v60)
                  {
                    v62 = 0;
                    v201 = v60;
                    while (1)
                    {
                      v238 = 0uLL;
                      v239 = 0;
                      v64 = *(_BYTE **)(v61 + 264);
                      v63 = *(_BYTE **)(v61 + 272);
                      v65 = v63 - v64;
                      if (v63 == v64)
                      {
                        v210 = 0;
                        v206 = 0;
                      }
                      else
                      {
                        if (v65 < 0)
                          sub_2236EA0B4();
                        *(_QWORD *)&v238 = operator new(v63 - v64);
                        *((_QWORD *)&v238 + 1) = v238;
                        v66 = (std::__shared_weak_count *)(v238 + 8 * (v65 >> 3));
                        v239 = v66;
                        v206 = (__int16 *)v238;
                        memcpy((void *)v238, v64, v65 - 2);
                        v210 = (unsigned __int16 *)v66;
                        *((_QWORD *)&v238 + 1) = v66;
                      }
                      v240 = *(_DWORD *)(v61 + 288);
                      v242 = 0;
                      v243 = 0;
                      v241 = 0;
                      v68 = *(char **)(v61 + 296);
                      v67 = *(char **)(v61 + 304);
                      v69 = v67 - v68;
                      if (v67 != v68)
                        break;
                      v75 = v225;
                      __p = 0;
                      v205 = v225;
                      v203 = v61;
                      if (!v225)
                      {
LABEL_86:
                        v79 = v226;
                        v80 = *(_QWORD *)((char *)&v227 + 4);
                        v81 = v228;
                        v82 = WORD2(v228);
                        v207 = HIDWORD(v228);
                        goto LABEL_87;
                      }
LABEL_74:
                      v76 = (unint64_t *)&v75->__shared_owners_;
                      do
                        v77 = __ldxr(v76);
                      while (__stxr(v77 + 1, v76));
                      do
                        v78 = __ldxr(v76);
                      while (__stxr(v78 + 1, v76));
                      v79 = v226;
                      v80 = *(_QWORD *)((char *)&v227 + 4);
                      v81 = v228;
                      v82 = WORD2(v228);
                      v207 = HIDWORD(v228);
                      do
                        v83 = __ldxr(v76);
                      while (__stxr(v83 + 1, v76));
                      do
                        v84 = __ldaxr(v76);
                      while (__stlxr(v84 - 1, v76));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                        std::__shared_weak_count::__release_weak(v205);
                      }
                      do
                        v85 = __ldaxr(v76);
                      while (__stlxr(v85 - 1, v76));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                        std::__shared_weak_count::__release_weak(v205);
                      }
LABEL_87:
                      v202 = v62;
                      v86 = sub_223738400(v62);
                      if (v206 != (__int16 *)v210)
                      {
                        v87 = v86;
                        v88 = HIDWORD(v80);
                        v208 = (__int16)(v81 - 1);
                        v209 = v82;
                        v89 = HIWORD(v86);
                        v90 = v206;
                        if (v79)
                        {
                          if (v80 >= 0)
                            v91 = HIDWORD(v80);
                          else
                            v91 = -HIDWORD(v80);
                          v92 = v206;
                          do
                          {
                            if ((*v92 & 0x80000000) == 0 && v209 > (unsigned __int16)*v92)
                            {
                              v93 = v92[1] & ~(v92[1] >> 31);
                              v94 = v92[2];
                              if (v94 >= v208)
                                v94 = (__int16)(v81 - 1);
                              if (v93 <= v94)
                              {
                                v95 = v79 + v207 * (unsigned __int16)*v92;
                                v96 = (__int16)(v94 + 1);
                                v97 = (__int16)(v93 + 1);
                                v98 = v96 <= v97 ? v93 + 1 : v94 + 1;
                                v99 = (unsigned __int16)(v98 + ~(_WORD)v93);
                                if (!v99)
                                  goto LABEL_280;
                                if (v96 <= v97)
                                  LOWORD(v96) = v93 + 1;
                                v100 = v91 * (unint64_t)(unsigned __int16)(v96 - 1 - v93);
                                if (v93 > (__int16)(v96 - 1))
                                  goto LABEL_280;
                                if (v100 > ((HIDWORD(v80) * (unsigned __int16)(v92[1] & ~(v92[1] >> 15))) ^ ~(v80 >> 63)))
                                  goto LABEL_280;
                                if ((v100 & 0xFFFFFFFF00000000) != 0)
                                  goto LABEL_280;
                                v101 = 0;
                                v102 = v99 + 1;
                                v103 = v102 & 0x1FFFE;
                                do
                                {
                                  v104 = v95 + (HIDWORD(v80) * (__int16)(v93 + v101));
                                  v105 = v95 + (HIDWORD(v80) * (__int16)(v93 + v101 + 1));
                                  *(_BYTE *)(v104 + 2) = v89;
                                  *(_WORD *)v104 = v87;
                                  *(_BYTE *)(v105 + 2) = v89;
                                  *(_WORD *)v105 = v87;
                                  v101 += 2;
                                }
                                while (v103 != v101);
                                LOWORD(v93) = v93 + v103;
                                if (v102 != v103)
                                {
LABEL_280:
                                  do
                                  {
                                    v106 = v95 + (HIDWORD(v80) * (__int16)v93);
                                    *(_BYTE *)(v106 + 2) = v89;
                                    *(_WORD *)v106 = v87;
                                    v93 = (__int16)(v93 + 1);
                                  }
                                  while (v93 <= (__int16)v94);
                                }
                              }
                            }
                            v92 += 4;
                          }
                          while (v92 != (__int16 *)v210);
                        }
                        else
                        {
                          do
                          {
                            if ((*v90 & 0x80000000) == 0)
                            {
                              v107 = (unsigned __int16)*v90;
                              if (v209 > v107)
                              {
                                v108 = v90[1] & ~(v90[1] >> 31);
                                v109 = v90[2] >= v208 ? v208 : v90[2];
                                if (v108 <= v109)
                                {
                                  v110 = (v207 * v107);
                                  do
                                  {
                                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                                    v111 = atomic_load(v47);
                                    if ((v111 & 1) == 0 && __cxa_guard_acquire((__guard *)v47))
                                    {
                                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                      __cxa_guard_release((__guard *)v47);
                                    }
                                    v112 = v47;
                                    if (byte_255795670)
                                      v113 = byte_255795678 == 0;
                                    else
                                      v113 = 0;
                                    if (!v113)
                                    {
                                      v114 = qword_255795648;
                                      v115 = qword_255795650;
                                      while (v114 != v115)
                                      {
                                        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v114)(*(_QWORD *)(v114 + 8), "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                                        v114 += 16;
                                      }
                                    }
                                    v47 = v112;
                                    v116 = atomic_load(v112);
                                    if ((v116 & 1) == 0 && __cxa_guard_acquire((__guard *)v112))
                                    {
                                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                      __cxa_guard_release((__guard *)v112);
                                    }
                                    if (!byte_255795670)
                                      abort();
                                    qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                                    v117 = v110 + (v88 * (__int16)v108);
                                    *(_BYTE *)(v117 + 2) = v89;
                                    *(_WORD *)v117 = v87;
                                    v108 = (__int16)(v108 + 1);
                                  }
                                  while (v108 <= (__int16)v109);
                                }
                              }
                            }
                            v90 += 4;
                          }
                          while (v90 != (__int16 *)v210);
                        }
                      }
                      if (v205)
                      {
                        v118 = (unint64_t *)&v205->__shared_owners_;
                        do
                          v119 = __ldaxr(v118);
                        while (__stlxr(v119 - 1, v118));
                        if (!v119)
                        {
                          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                          std::__shared_weak_count::__release_weak(v205);
                          v120 = __p;
                          if (!__p)
                            goto LABEL_143;
LABEL_142:
                          operator delete(v120);
                          goto LABEL_143;
                        }
                      }
                      v120 = __p;
                      if (__p)
                        goto LABEL_142;
LABEL_143:
                      if (v206)
                        operator delete(v206);
                      v61 = v203 + 424;
                      v62 = v202 + 1;
                      if (v203 + 424 == v201)
                        goto LABEL_163;
                    }
                    if (v69 < 0)
                      sub_2236EA0B4();
                    v70 = (char *)operator new(v67 - v68);
                    v241 = v70;
                    v243 = &v70[16 * (v69 >> 4)];
                    v71 = v69 - 16;
                    if ((unint64_t)(v69 - 16) >= 0xD0
                      && (v70 + 8 < &v68[(v71 & 0xFFFFFFFFFFFFFFF0) + 16]
                        ? (v121 = v68 + 8 >= &v70[(v71 & 0xFFFFFFFFFFFFFFF0) + 16])
                        : (v121 = 1),
                          v121 ? (v122 = 0) : (v122 = 1),
                          v68 < &v70[(v71 & 0xFFFFFFFFFFFFFFF0) + 8]
                        ? (v123 = v70 >= &v68[(v71 & 0xFFFFFFFFFFFFFFF0) + 8])
                        : (v123 = 1),
                          v123))
                    {
                      v72 = v70;
                      v73 = v70;
                      if ((v122 & 1) == 0)
                      {
                        v124 = 0;
                        v125 = (v71 >> 4) + 1;
                        v126 = 16 * (v125 & 0x1FFFFFFFFFFFFFFCLL);
                        v127 = &v68[v126];
                        v73 = &v70[v126];
                        v128 = v125 & 0x1FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v129 = &v70[v124];
                          v130 = *(_OWORD *)&v68[v124 + 16];
                          v132 = *(_OWORD *)&v68[v124 + 32];
                          v131 = *(_OWORD *)&v68[v124 + 48];
                          *(_OWORD *)v129 = *(_OWORD *)&v68[v124];
                          *((_OWORD *)v129 + 1) = v130;
                          *((_OWORD *)v129 + 2) = v132;
                          *((_OWORD *)v129 + 3) = v131;
                          v124 += 64;
                          v128 -= 4;
                        }
                        while (v128);
                        v68 = v127;
                        if (v125 == (v125 & 0x1FFFFFFFFFFFFFFCLL))
                        {
LABEL_73:
                          v75 = v225;
                          __p = v72;
                          v205 = v225;
                          v203 = v61;
                          if (!v225)
                            goto LABEL_86;
                          goto LABEL_74;
                        }
                      }
                    }
                    else
                    {
                      v72 = v70;
                      v73 = v70;
                    }
                    do
                    {
                      v74 = *(_OWORD *)v68;
                      v68 += 16;
                      *(_OWORD *)v73 = v74;
                      v73 += 16;
                    }
                    while (v68 != v67);
                    goto LABEL_73;
                  }
LABEL_163:
                  v133 = v225;
                  if (!v225)
                    goto LABEL_167;
                  v134 = (unint64_t *)&v225->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (v135)
                  {
LABEL_167:
                    if (a2)
                      goto LABEL_168;
                    goto LABEL_196;
                  }
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                  if (a2)
                  {
LABEL_168:
                    v136 = 8 * a2;
                    v137 = a3;
                    v138 = v196;
                    while (1)
                    {
                      v139 = *v137;
                      v140 = **v137;
                      if (v140 == 1)
                        break;
                      if (!v140)
                      {
                        if (!*((_BYTE *)v139 + 16)
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)v139 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *((_QWORD *)v139 + 7) != (uint64_t)(*((_QWORD *)v139 + 5) - *((_QWORD *)v139 + 4)) >> 4
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                        {
                          goto LABEL_273;
                        }
                        if (*((_BYTE *)v139 + 80))
                        {
                          v141 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
LABEL_186:
                          if (v141)
                            goto LABEL_273;
                        }
                        goto LABEL_187;
                      }
                      v142 = (uint64_t *)(v139 + 18);
LABEL_189:
                      v143 = *v142;
                      v145 = *(_QWORD *)(v143 + 216);
                      v144 = *(_QWORD *)(v143 + 224);
                      if (v145 == *(_QWORD *)(v200 + 216) && v144 == *(_QWORD *)(v200 + 224))
                        goto LABEL_197;
                      ++v137;
                      v136 -= 8;
                      if (!v136)
                        goto LABEL_218;
                    }
                    if (!*((_BYTE *)v139 + 16)
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)v139 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
LABEL_273:
                      abort();
                    }
                    if (*((_BYTE *)v139 + 25) && !*((_BYTE *)v139 + 80))
                    {
                      v141 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      goto LABEL_186;
                    }
LABEL_187:
                    v142 = (uint64_t *)(v139 + 2);
                    goto LABEL_189;
                  }
LABEL_196:
                  v137 = a3;
                  v138 = v196;
LABEL_197:
                  if (v137 != v197)
                  {
                    v216 = &off_24EC232F0;
                    v147 = v231;
                    v148 = v232;
                    if (v232)
                    {
                      v149 = (unint64_t *)&v232->__shared_owners_;
                      do
                        v150 = __ldxr(v149);
                      while (__stxr(v150 + 1, v149));
                      v151 = v236;
                      do
                        v152 = __ldxr(v149);
                      while (__stxr(v152 + 1, v149));
                      v219 = v233;
                      v220 = v234;
                      v221 = v235;
                      do
                        v153 = __ldxr(v149);
                      while (__stxr(v153 + 1, v149));
                      v217 = v147;
                      v218 = v148;
                      v222 = v151;
                      do
                        v154 = __ldaxr(v149);
                      while (__stlxr(v154 - 1, v149));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                      do
                        v155 = __ldaxr(v149);
                      while (__stlxr(v155 - 1, v149));
                      if (!v155)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    else
                    {
                      v217 = v231;
                      v218 = 0;
                      v219 = v233;
                      v220 = v234;
                      v221 = v235;
                      v222 = v236;
                    }
                    sub_2237D4448((uint64_t)&v216, *v137);
                    v156 = v218;
                    if (v218)
                    {
                      v157 = (unint64_t *)&v218->__shared_owners_;
                      do
                        v158 = __ldaxr(v157);
                      while (__stlxr(v158 - 1, v157));
                      if (!v158)
                      {
                        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                        std::__shared_weak_count::__release_weak(v156);
                      }
                    }
                  }
LABEL_218:
                  v159 = v232;
                  if (v232)
                  {
                    v160 = (unint64_t *)&v232->__shared_owners_;
                    do
                      v161 = __ldaxr(v160);
                    while (__stlxr(v161 - 1, v160));
                    if (!v161)
                    {
                      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                      std::__shared_weak_count::__release_weak(v159);
                    }
                  }
                  v44 = v138 + 1;
                  v46 = v195 + 1;
                  v45 = v194;
                }
                while (v44 != v191);
              }
            }
            LOBYTE(v238) = 0;
            LOBYTE(v240) = 0;
            sub_2231C6C30(&v244, &v238, &v212, &v213);
            if ((_BYTE)v240 && SHIBYTE(v239) < 0)
              operator delete((void *)v238);
            v162 = (std::__shared_weak_count *)v246;
            if (v246)
            {
              v163 = (unint64_t *)(v246 + 1);
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            v165 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 56))(v45);
            v166 = *v165;
            v167 = (std::__shared_weak_count *)v165[1];
            if (v167)
            {
              v168 = (unint64_t *)&v167->__shared_owners_;
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            v171 = v214;
            v170 = v215;
            v230 = &off_24EC6A3B8;
            v231 = v214;
            v232 = v215;
            v214 = 0;
            v215 = 0;
            v244 = v166;
            v245 = v167;
            if (v167)
            {
              v172 = (unint64_t *)&v167->__shared_owners_;
              do
                v173 = __ldxr(v172);
              while (__stxr(v173 + 1, v172));
            }
            v246 = &off_24EC6A3B8;
            v247 = v171;
            v248[0] = v170;
            if (v170)
            {
              v174 = (unint64_t *)&v170->__shared_owners_;
              do
                v175 = __ldxr(v174);
              while (__stxr(v175 + 1, v174));
            }
            (*(void (**)(uint64_t *, const char **))(*v190 + 16))(v190, &v244);
            v176 = (std::__shared_weak_count *)v248[0];
            if (v248[0])
            {
              v177 = (unint64_t *)(v248[0] + 8);
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
            v179 = v245;
            if (v245)
            {
              v180 = (unint64_t *)&v245->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v182 = v232;
            if (v232)
            {
              v183 = (unint64_t *)&v232->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            if (v167)
            {
              v185 = (unint64_t *)&v167->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            v187 = v215;
            if (v215)
            {
              v188 = (unint64_t *)&v215->__shared_owners_;
              do
                v189 = __ldaxr(v188);
              while (__stlxr(v189 - 1, v188));
              if (!v189)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2237D080C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_2231874DC((uint64_t)&a39);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2237D0A8C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  float32x2_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int16 *v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  unsigned __int16 v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  BOOL v61;
  uint64_t v62;
  uint64_t i;
  unsigned __int8 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int32x2_t v70;
  _QWORD *v71;
  float32x2_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  float32x2_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t j;
  unsigned __int8 v95;
  int64x2_t **v96;
  int64x2_t **v97;
  float32x2_t v98;
  float32x2_t *v99;
  int64x2_t *v100;
  int64x2_t *v101;
  uint64_t v102;
  float32x2_t *v103;
  int64x2_t *v104;
  float32x2_t *v105;
  int64x2_t v106;
  float32x2_t *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  float32x2_t *v114;
  unint64_t v115;
  float32x2_t *v116;
  float32x2_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  float32x2_t *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  float32x2_t *v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  float32x2_t *v137;
  float32x2_t v138;
  unint64_t v139;
  float32x2_t *v140;
  float32x2_t *v141;
  float32x2_t v142;
  void *v143;
  float32x2_t *v144;
  int64_t v145;
  unint64_t v146;
  float32x2_t *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  const double *v165;
  double *v166;
  uint64_t v167;
  const double *v168;
  double *v169;
  float32x2_t *v170;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  float32x2_t *v177;
  float32x2_t v178;
  unint64_t v179;
  float32x2_t *v180;
  float32x2_t *v181;
  float32x2_t v182;
  uint64_t v183;
  uint64_t v184;
  const double *v185;
  double *v186;
  uint64_t v187;
  const double *v188;
  double *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  std::mutex *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::string::size_type v205;
  std::string *v206;
  std::string::size_type v207;
  std::string::size_type v208;
  int v209;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  std::mutex *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  unsigned __int8 v223;
  const void *v224;
  uint64_t v225;
  void *v226;
  size_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::string::size_type v234;
  std::string *v235;
  std::string::size_type v236;
  std::string::size_type v237;
  int v238;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  std::mutex *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  uint64_t *v249;
  uint64_t v250;
  unsigned __int8 v251;
  char *v252;
  uint64_t v253;
  char *v254;
  std::string::size_type v255;
  char *v256;
  uint64_t v257;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  std::mutex *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  __int128 *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  std::mutex *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  double v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t v287;
  unsigned __int8 v288;
  _QWORD *v289;
  _QWORD *v290;
  __int128 v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  void *v298;
  std::__shared_weak_count *size;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  std::string *p_info;
  std::string::size_type v307;
  std::string::size_type v308;
  int v309;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  std::mutex *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  double v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t v322;
  unsigned __int8 v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::string::size_type v330;
  std::string *v331;
  std::string::size_type v332;
  std::string::size_type v333;
  int v334;
  int64_t v337;
  uint64_t v338;
  char *v339;
  unint64_t v340;
  unint64_t v341;
  std::string::size_type v342;
  _BYTE *v343;
  _QWORD *v344;
  char *v345;
  std::string::size_type v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  unint64_t v352;
  char *v353;
  int v354;
  size_t v355;
  std::string::size_type v356;
  uint64_t v357;
  uint64_t v358;
  _OWORD *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  int v363;
  char *v364;
  int64_t v365;
  uint64_t v366;
  char *v367;
  unint64_t v368;
  unint64_t v369;
  _BYTE *v370;
  _QWORD *v371;
  char *v372;
  uint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  unint64_t v377;
  char *v378;
  int v379;
  size_t v380;
  std::string::size_type v381;
  uint64_t v382;
  uint64_t v383;
  _OWORD *v384;
  char *v385;
  uint64_t v386;
  __int128 v387;
  int v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  __int128 v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::string::size_type v399;
  std::string *v400;
  std::string::size_type v401;
  std::string::size_type v402;
  int v403;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  __int128 v417;
  uint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  int *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned __int8 v431;
  uint64_t v432;
  uint64_t v433;
  float v434;
  float v435;
  int64x2_t **v436;
  uint64_t *v437;
  signed __int16 v438;
  float v439;
  uint64_t v440;
  int64x2_t v441;
  std::string::size_type v442;
  int v443;
  float32x2_t v444;
  float32x2_t v445;
  float32x2_t *v446;
  std::string v447;
  uint64_t (**v448)();
  std::string::size_type v449;
  std::__shared_weak_count *v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int16 v454;
  uint64_t (**v455)();
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int16 v460;
  std::string info;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int16 v465;
  __int128 v466;
  float32x2_t *v467;
  __int128 v468;
  __int128 v469;
  int v470;
  void *__p;
  float32x2_t *v472;
  float32x2_t *v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  _BYTE v478[24];
  __int128 v479;
  __int128 v480;
  __int16 v481;
  _OWORD __src[64];
  uint64_t v483;
  float64x2x2_t v484;
  float64x2x2_t v485;
  float64x2x2_t v486;
  float64x2x2_t v487;

  v483 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = a1[1];
  if (v5 == v6)
  {
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    v257 = a2;
    *(_QWORD *)&__src[1] = a2;
    *((_QWORD *)&__src[1] + 1) = a3;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, (std::string *)&v477);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v259 = sub_2241471F8();
      v260 = v259[2];
      if (!v260)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v260 = v259[2];
      }
      v261 = *(_QWORD *)(v260 + 64);
      v262 = (std::mutex *)(v261 + 32);
      std::mutex::lock((std::mutex *)(v261 + 32));
      v264 = *(_QWORD *)(v261 + 96);
      v263 = *(_QWORD *)(v261 + 104);
      std::mutex::unlock(v262);
      if (v264 != v263)
      {
        sub_2241471F8();
        v265 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265))
        {
          v468 = 0u;
          v469 = 0u;
          v470 = 728325608;
          kdebug_trace();
          __p = (void *)0x100000001;
          LOBYTE(v466) = 0;
          *(_QWORD *)&__src[0] = &off_24EC21B18;
          sub_2233B32D0(&__p, &v466, (uint64_t *)__src + 1);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265))
          {
            info.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            info.__r_.__value_.__l.__size_ = 2;
            v266 = sub_2241471F8();
            sub_22329D090((uint64_t)v266, v265, __src, (uint64_t)&unk_2245C9EFE, (__int128 *)&info);
          }
          v267 = *(std::__shared_weak_count **)&__src[1];
          if (*(_QWORD *)&__src[1])
          {
            v268 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          kdebug_trace();
        }
      }
    }
    v468 = 0u;
    v469 = 0u;
    v470 = 728325624;
    kdebug_trace();
    v270 = v478[7];
    if (v478[7] < 0)
      v270 = *((_QWORD *)&v477 + 1);
    if (v270 >= 0x11)
    {
      v271 = &v477;
      if (v478[7] < 0)
        v271 = (__int128 *)v477;
      v272 = *(_QWORD *)v271;
      v273 = *((_QWORD *)v271 + 1);
      v274 = *((unsigned __int8 *)v271 + 16);
      if (v272 == 0x6365722E64337663 && v273 == 0x73746174532E6E6FLL && v274 == 46)
      {
        sub_223187510();
        info.__r_.__value_.__r.__words[0] = 0x100000001;
        LOBYTE(__p) = 0;
        *(_QWORD *)&__src[0] = &off_24EC21B18;
        sub_2233B32D0(&info, &__p, (uint64_t *)__src + 1);
        v389 = *(std::__shared_weak_count **)&__src[1];
        if (*(_QWORD *)&__src[1])
        {
          v390 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
          do
            v391 = __ldaxr(v390);
          while (__stlxr(v391 - 1, v390));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
            std::__shared_weak_count::__release_weak(v389);
          }
        }
      }
    }
    kdebug_trace();
    if ((v478[7] & 0x80000000) != 0)
      operator delete((void *)v477);
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    *(_QWORD *)&__src[1] = v257;
    *((_QWORD *)&__src[1] + 1) = a3;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v277 = sub_2241471F8();
      v278 = v277[2];
      if (!v278)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v278 = v277[2];
      }
      v279 = *(_QWORD *)(v278 + 64);
      v280 = (std::mutex *)(v279 + 32);
      std::mutex::lock((std::mutex *)(v279 + 32));
      v282 = *(_QWORD *)(v279 + 96);
      v281 = *(_QWORD *)(v279 + 104);
      std::mutex::unlock(v280);
      if (v282 != v281)
      {
        sub_2241471F8();
        v283 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283))
        {
          v468 = 0u;
          v469 = 0u;
          v470 = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283))
          {
            v284 = *(double *)&qword_255788F20;
            v285 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283))
            {
              v286 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v283 + 56))(v283);
              v287 = mach_continuous_time();
              v288 = atomic_load((unsigned __int8 *)&qword_255795560);
              if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
              {
                mach_timebase_info((mach_timebase_info_t)&v477);
                LODWORD(v414) = DWORD1(v477);
                LODWORD(v413) = v477;
                *(double *)&qword_255795558 = (double)v413 / (double)v414;
                __cxa_guard_release(&qword_255795560);
              }
              *(_QWORD *)&__src[0] = llround(*(double *)&qword_255795558 * (double)v287);
              *((_QWORD *)&__src[0] + 1) = 2;
              LOBYTE(__src[1]) = 0;
              BYTE8(__src[2]) = 0;
              LOBYTE(__src[3]) = 0;
              BYTE8(__src[4]) = 0;
              *(_QWORD *)&__src[5] = (uint64_t)(v284 * 1000000000.0);
              *((_QWORD *)&__src[5] + 1) = 2;
              LOBYTE(__src[6]) = 1;
              LOBYTE(__src[7]) = 0;
              LOBYTE(__src[10]) = 0;
              LOBYTE(__src[11]) = 0;
              BYTE8(__src[12]) = 0;
              v289 = (_QWORD *)operator new();
              *v289 = 0;
              v289[1] = 0;
              v289[2] = 0;
              *(_QWORD *)&v476 = 0;
              *(_QWORD *)&v475 = v289;
              v290 = (_QWORD *)operator new();
              *v290 = &off_24EC59DE0;
              v290[1] = 0;
              v290[2] = 0;
              v290[3] = v289;
              *(_QWORD *)&v475 = 0;
              *(_QWORD *)v478 = v290;
              v472 = 0;
              __p = 0;
              *((_QWORD *)&v477 + 1) = v289;
              *(_QWORD *)&v477 = sub_2237DCFF8;
              sub_22450FFF4(&v466, 11, (void (**)(uint64_t))&v477, 0, 0);
              if ((_QWORD)v477)
                ((void (*)(int))v477)(0);
              v291 = v466;
              v466 = 0uLL;
              if ((*(_BYTE *)(v291 + 56) & 3) != 0)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v292 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
                if (*((_QWORD *)&v466 + 1))
                {
                  v293 = (unint64_t *)(*((_QWORD *)&v466 + 1) + 8);
                  do
                    v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                    std::__shared_weak_count::__release_weak(v292);
                  }
                }
              }
              v295 = v475;
              if ((_QWORD)v475)
              {
                v296 = *(void **)v475;
                if (*(_QWORD *)v475)
                {
                  *(_QWORD *)(v475 + 8) = v296;
                  operator delete(v296);
                }
                MEMORY[0x227684CE8](v295, 0x20C40960023A9);
              }
              v297 = v476;
              if ((_QWORD)v476)
              {
                v298 = *(void **)v476;
                if (*(_QWORD *)v476)
                {
                  *(_QWORD *)(v476 + 8) = v298;
                  operator delete(v298);
                }
                MEMORY[0x227684CE8](v297, 0x20C40960023A9);
              }
              *(_OWORD *)&v447.__r_.__value_.__l.__data_ = v291;
              sub_2237DB370(&v477, (uint64_t *)&v447, (uint64_t)__src);
              size = (std::__shared_weak_count *)v447.__r_.__value_.__l.__size_;
              if (v447.__r_.__value_.__l.__size_)
              {
                v300 = (unint64_t *)(v447.__r_.__value_.__l.__size_ + 8);
                do
                  v301 = __ldaxr(v300);
                while (__stlxr(v301 - 1, v300));
                if (!v301)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              sub_2231AD66C((uint64_t)__src);
              sub_2231AA5A4((uint64_t)v285, v286, (uint64_t)&v477);
              v302 = *(std::__shared_weak_count **)v478;
              if (*(_QWORD *)v478)
              {
                v303 = (unint64_t *)(*(_QWORD *)v478 + 8);
                do
                  v304 = __ldaxr(v303);
                while (__stlxr(v304 - 1, v303));
                if (!v304)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
            }
          }
          kdebug_trace();
        }
      }
    }
    memset(__src, 0, 32);
    LODWORD(__src[2]) = 728325624;
    kdebug_trace();
    v305 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v305 = info.__r_.__value_.__l.__size_;
    if (v305 >= 0x11)
    {
      p_info = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_info = (std::string *)info.__r_.__value_.__r.__words[0];
      v307 = p_info->__r_.__value_.__r.__words[0];
      v308 = p_info->__r_.__value_.__l.__size_;
      v309 = p_info->__r_.__value_.__s.__data_[16];
      if (v307 == 0x6365722E64337663 && v308 == 0x73746174532E6E6FLL && v309 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    *(_QWORD *)&__src[1] = v257;
    *((_QWORD *)&__src[1] + 1) = a3;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &info);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v312 = sub_2241471F8();
      v313 = v312[2];
      if (!v313)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v313 = v312[2];
      }
      v314 = *(_QWORD *)(v313 + 64);
      v315 = (std::mutex *)(v314 + 32);
      std::mutex::lock((std::mutex *)(v314 + 32));
      v317 = *(_QWORD *)(v314 + 96);
      v316 = *(_QWORD *)(v314 + 104);
      std::mutex::unlock(v315);
      if (v317 != v316)
      {
        sub_2241471F8();
        v318 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v318 + 24))(v318))
        {
          v468 = 0u;
          v469 = 0u;
          v470 = 728325608;
          kdebug_trace();
          v472 = 0;
          __p = 0;
          v473 = 0;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v318 + 24))(v318))
          {
            v319 = *(double *)&qword_255788F20;
            v320 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v318 + 24))(v318))
            {
              v321 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v318 + 56))(v318);
              v322 = mach_continuous_time();
              v323 = atomic_load((unsigned __int8 *)&qword_255795560);
              if ((v323 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
              {
                mach_timebase_info((mach_timebase_info_t)&v477);
                LODWORD(v416) = DWORD1(v477);
                LODWORD(v415) = v477;
                *(double *)&qword_255795558 = (double)v415 / (double)v416;
                __cxa_guard_release(&qword_255795560);
              }
              *(_QWORD *)&__src[0] = llround(*(double *)&qword_255795558 * (double)v322);
              *((_QWORD *)&__src[0] + 1) = 2;
              LOBYTE(__src[1]) = 0;
              BYTE8(__src[2]) = 0;
              LOBYTE(__src[3]) = 0;
              BYTE8(__src[4]) = 0;
              *(_QWORD *)&__src[5] = (uint64_t)(v319 * 1000000000.0);
              *((_QWORD *)&__src[5] + 1) = 2;
              LOBYTE(__src[6]) = 1;
              LOBYTE(__src[7]) = 0;
              LOBYTE(__src[10]) = 0;
              LOBYTE(__src[11]) = 0;
              BYTE8(__src[12]) = 0;
              sub_2237DD160(&v477, (uint64_t)&__p);
              v466 = v477;
              sub_22329F6A8((uint64_t *)&v466, (uint64_t)__src, &v477);
              v324 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
              if (*((_QWORD *)&v466 + 1))
              {
                v325 = (unint64_t *)(*((_QWORD *)&v466 + 1) + 8);
                do
                  v326 = __ldaxr(v325);
                while (__stlxr(v326 - 1, v325));
                if (!v326)
                {
                  ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                  std::__shared_weak_count::__release_weak(v324);
                }
              }
              sub_2231AD66C((uint64_t)__src);
              sub_2231AA5A4((uint64_t)v320, v321, (uint64_t)&v477);
              v327 = *(std::__shared_weak_count **)v478;
              if (*(_QWORD *)v478)
              {
                v328 = (unint64_t *)(*(_QWORD *)v478 + 8);
                do
                  v329 = __ldaxr(v328);
                while (__stlxr(v329 - 1, v328));
                if (!v329)
                {
                  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                  std::__shared_weak_count::__release_weak(v327);
                }
              }
            }
            if (__p)
              operator delete(__p);
          }
          kdebug_trace();
        }
      }
    }
    memset(__src, 0, 32);
    LODWORD(__src[2]) = 728325624;
    kdebug_trace();
    v330 = HIBYTE(info.__r_.__value_.__r.__words[2]);
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v330 = info.__r_.__value_.__l.__size_;
    if (v330 >= 0x11)
    {
      v331 = &info;
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v331 = (std::string *)info.__r_.__value_.__r.__words[0];
      v332 = v331->__r_.__value_.__r.__words[0];
      v333 = v331->__r_.__value_.__l.__size_;
      v334 = v331->__r_.__value_.__s.__data_[16];
      if (v332 == 0x6365722E64337663 && v333 == 0x73746174532E6E6FLL && v334 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
      operator delete(info.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)&v417 = a2;
    *((_QWORD *)&v417 + 1) = a3;
    sub_2237D4FD4((uint64_t)v5, v6, 126 - 2 * __clz(v6 - v5), 1);
    v7 = *(_QWORD *)(sub_2237D433C(**a1) + 88);
    v8 = *a1;
    LODWORD(v8) = vcvtpd_u64_f64(sqrt((double)(unint64_t)(a1[1] - *a1)));
    v420 = HIDWORD(v7);
    v421 = v7;
    v419 = (unint64_t)v8;
    LODWORD(__src[0]) = (_DWORD)v8 * v7;
    DWORD1(__src[0]) = (_DWORD)v8 * HIDWORD(v7);
    memset(&v477, 10, 3);
    *(_QWORD *)&v468 = &off_24EC21B18;
    sub_2231C5C38(__src, (_WORD *)&v468 + 4);
    sub_22370325C((uint64_t)&v468, (__int16 *)&v477);
    v472 = 0;
    __p = 0;
    v473 = 0;
    v466 = 0uLL;
    v467 = 0;
    v9 = *a1;
    v418 = a1[1];
    if (*a1 != v418)
    {
      v10 = 0;
      v11 = (float32x2_t)vdup_n_s32(0x3E924745u);
      do
      {
        v427 = (int *)*v9;
        v422 = (v10 % v419) * v421;
        v423 = (v10 / v419) * v420;
        *(_QWORD *)&v477 = v422 | (v423 << 32);
        *((_QWORD *)&v477 + 1) = v421;
        *(_QWORD *)&__src[0] = &off_24EC232F0;
        sub_223416D28((uint64_t)&v468, (uint64_t *)__src + 1);
        v425 = v10;
        info.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC232F0;
        sub_2237467C8((uint64_t)__src, &v477, (uint64_t)&info.__r_.__value_.__l.__size_);
        v12 = *(std::__shared_weak_count **)&__src[1];
        if (*(_QWORD *)&__src[1])
        {
          v13 = (unint64_t *)(*(_QWORD *)&__src[1] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v424 = v9;
        v426 = sub_2237D433C((uint64_t)v427);
        v455 = &off_24EC232F0;
        v15 = *(_OWORD *)&info.__r_.__value_.__r.__words[1];
        if (info.__r_.__value_.__r.__words[2])
        {
          v16 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = v465;
          do
            v19 = __ldxr(v16);
          while (__stxr(v19 + 1, v16));
          v457 = v462;
          v458 = v463;
          v459 = v464;
          do
            v20 = __ldxr(v16);
          while (__stxr(v20 + 1, v16));
          v456 = v15;
          v460 = v18;
          do
            v21 = __ldaxr(v16);
          while (__stlxr(v21 - 1, v16));
          if (!v21)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
          }
          do
            v22 = __ldaxr(v16);
          while (__stlxr(v22 - 1, v16));
          if (!v22)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        else
        {
          v456 = info.__r_.__value_.__l.__size_;
          v457 = v462;
          v458 = v463;
          v459 = v464;
          v460 = v465;
        }
        v24 = *(_QWORD *)(v426 + 160);
        v23 = *(_QWORD *)(v426 + 168);
        LOWORD(__src[0]) = 128;
        BYTE2(__src[0]) = 0;
        sub_2237039AC((uint64_t)&v455, (__int16 *)__src);
        if (v24 != v23)
        {
          v25 = 0;
          v429 = v23;
          do
          {
            *(_QWORD *)&v477 = &off_24EC232F0;
            v27 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
            v26 = v456;
            if (*((_QWORD *)&v456 + 1))
            {
              v28 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
              v30 = v460;
              do
                v31 = __ldxr(v28);
              while (__stxr(v31 + 1, v28));
              *(_OWORD *)&v478[8] = v457;
              v479 = v458;
              v480 = v459;
              do
                v32 = __ldxr(v28);
              while (__stxr(v32 + 1, v28));
              *((_QWORD *)&v477 + 1) = v26;
              *(_QWORD *)v478 = v27;
              v481 = v30;
              do
                v33 = __ldaxr(v28);
              while (__stlxr(v33 - 1, v28));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
              do
                v34 = __ldaxr(v28);
              while (__stlxr(v34 - 1, v28));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            else
            {
              *((_QWORD *)&v477 + 1) = v456;
              *(_QWORD *)v478 = 0;
              *(_OWORD *)&v478[8] = v457;
              v479 = v458;
              v480 = v459;
              v481 = v460;
            }
            v35 = atomic_load((unsigned __int8 *)&qword_255795018);
            if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
            {
              bzero(__src, 0x3FCuLL);
              v69 = 0;
              v70 = (int32x2_t)0x100000000;
              do
              {
                v71 = &__src[v69];
                v72 = vmul_f32(vcvt_f32_s32(v70), v11);
                v434 = v72.f32[0];
                v444 = vmul_f32(vcvt_f32_s32(vadd_s32(v70, (int32x2_t)0x200000002)), v11);
                v439 = fmodf(v72.f32[1], 1.0);
                *(float *)&v73 = fmodf(v434, 1.0);
                *((float *)&v73 + 1) = v439;
                v440 = v73;
                v435 = fmodf(v444.f32[1], 1.0);
                *(float *)&v74 = fmodf(v444.f32[0], 1.0);
                *((float *)&v74 + 1) = v435;
                *v71 = v440;
                v71[1] = v74;
                v70 = vadd_s32(v70, (int32x2_t)0x400000004);
                ++v69;
              }
              while (v69 != 63);
              *(_QWORD *)&__src[63] = 0x3E906F003F7F1400;
              DWORD2(__src[63]) = 1058102016;
              memcpy(dword_255794C18, __src, 0x3FCuLL);
              __cxa_guard_release(&qword_255795018);
            }
            v431 = v25 + 1;
            if (((v25 + 1) & 0x100) != 0)
            {
              v36 = 128;
              v37 = 128;
              v38 = 128;
              v39 = *(__int16 **)(v24 + 264);
              v40 = *(unsigned __int16 **)(v24 + 272);
              v433 = v24;
              if (v39 != (__int16 *)v40)
                goto LABEL_48;
            }
            else
            {
              v36 = vcvts_n_s32_f32(*(float *)&dword_255794C18[v25], 8uLL);
              v37 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(2 * v25+ 85- 255* ((unsigned __int16)((1029* (2 * v25 + 85)) >> 16) >> 2))], 8uLL);
              v38 = vcvts_n_s32_f32(*(float *)&dword_255794C18[(unsigned __int16)(3 * v25+ 170- 255* ((unsigned __int16)((2057* (3 * v25 + 170)) >> 16) >> 3))], 8uLL);
              v39 = *(__int16 **)(v24 + 264);
              v40 = *(unsigned __int16 **)(v24 + 272);
              v433 = v24;
              if (v39 != (__int16 *)v40)
              {
LABEL_48:
                v41 = (v37 << 8) | (v38 << 16) | v36;
                v443 = SWORD2(v480);
                v438 = v480 - 1;
                do
                {
                  if ((*v39 & 0x80000000) == 0 && v443 > (unsigned __int16)*v39)
                  {
                    v42 = v39[1] & ~(v39[1] >> 31);
                    v43 = v39[2] >= v438 ? v438 : v39[2];
                    if (v42 <= v43)
                    {
                      v44 = HIDWORD(*(_QWORD *)((char *)&v479 + 4));
                      v45 = *(_QWORD *)&v478[8] + HIDWORD(v480) * (unsigned __int16)*v39;
                      if (*(_QWORD *)&v478[8])
                      {
                        v46 = (__int16)(v43 + 1);
                        v47 = (__int16)(v42 + 1);
                        if (v46 <= v47)
                          v48 = v42 + 1;
                        else
                          v48 = v43 + 1;
                        v49 = (unsigned __int16)(v48 + ~(_WORD)v42);
                        if (!v49)
                          goto LABEL_633;
                        if (v46 <= v47)
                          LOWORD(v46) = v42 + 1;
                        v50 = v46 - 1;
                        v51 = v46 - 1 - v42;
                        v52 = *(uint64_t *)((char *)&v479 + 4) >= 0 ? DWORD2(v479) : -DWORD2(v479);
                        v53 = v52 * (unint64_t)v51;
                        if (v42 > v50)
                          goto LABEL_633;
                        if (v53 > ((*(uint64_t *)((char *)&v479 + 4) >> 63) ^ ~((unsigned __int16)(v39[1] & ~(v39[1] >> 15)) * DWORD2(v479))))
                          goto LABEL_633;
                        if ((v53 & 0xFFFFFFFF00000000) != 0)
                          goto LABEL_633;
                        v54 = 0;
                        v55 = v49 + 1;
                        v56 = (v49 + 1) & 0x1FFFE;
                        do
                        {
                          v57 = v45 + (v44 * (__int16)(v42 + v54));
                          v58 = v45 + (v44 * (__int16)(v42 + v54 + 1));
                          *(_BYTE *)(v57 + 2) = BYTE2(v41);
                          *(_WORD *)v57 = v41;
                          *(_BYTE *)(v58 + 2) = BYTE2(v41);
                          *(_WORD *)v58 = v41;
                          v54 += 2;
                        }
                        while (v56 != v54);
                        LOWORD(v42) = v42 + v56;
                        if (v55 != v56)
                        {
LABEL_633:
                          do
                          {
                            v59 = v45 + (v44 * (__int16)v42);
                            *(_BYTE *)(v59 + 2) = BYTE2(v41);
                            *(_WORD *)v59 = v41;
                            v42 = (__int16)(v42 + 1);
                          }
                          while (v42 <= (__int16)v43);
                        }
                      }
                      else
                      {
                        do
                        {
                          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                          v60 = atomic_load((unsigned __int8 *)&qword_255795680);
                          if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                          {
                            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                            __cxa_guard_release(&qword_255795680);
                          }
                          if (byte_255795670)
                            v61 = byte_255795678 == 0;
                          else
                            v61 = 0;
                          if (!v61)
                          {
                            v62 = qword_255795648;
                            for (i = qword_255795650; v62 != i; v62 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v62)(*(_QWORD *)(v62 + 8), "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                          }
                          v64 = atomic_load((unsigned __int8 *)&qword_255795680);
                          if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                          {
                            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                            __cxa_guard_release(&qword_255795680);
                          }
                          if (!byte_255795670)
                            abort();
                          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, &unk_2245AAA31, 0);
                          v65 = v45 + (v44 * (__int16)v42);
                          *(_BYTE *)(v65 + 2) = BYTE2(v41);
                          *(_WORD *)v65 = v41;
                          v42 = (__int16)(v42 + 1);
                        }
                        while (v42 <= (__int16)v43);
                      }
                    }
                  }
                  v39 += 4;
                }
                while (v39 != (__int16 *)v40);
              }
            }
            v66 = *(std::__shared_weak_count **)v478;
            if (*(_QWORD *)v478)
            {
              v67 = (unint64_t *)(*(_QWORD *)v478 + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v24 = v433 + 424;
            v25 = v431;
          }
          while (v433 + 424 != v429);
        }
        v75 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
        if (!*((_QWORD *)&v456 + 1))
          goto LABEL_102;
        v76 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
          v448 = &off_24EC232F0;
          v79 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
          v78 = info.__r_.__value_.__l.__size_;
          if (!info.__r_.__value_.__r.__words[2])
          {
LABEL_117:
            v449 = v78;
            v450 = 0;
            v451 = v462;
            v452 = v463;
            v453 = v464;
            v454 = v465;
            goto LABEL_118;
          }
        }
        else
        {
LABEL_102:
          v448 = &off_24EC232F0;
          v79 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
          v78 = info.__r_.__value_.__l.__size_;
          if (!info.__r_.__value_.__r.__words[2])
            goto LABEL_117;
        }
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
        v82 = v465;
        do
          v83 = __ldxr(p_shared_owners);
        while (__stxr(v83 + 1, p_shared_owners));
        v451 = v462;
        v452 = v463;
        v453 = v464;
        do
          v84 = __ldxr(p_shared_owners);
        while (__stxr(v84 + 1, p_shared_owners));
        v449 = v78;
        v450 = v79;
        v454 = v82;
        do
          v85 = __ldaxr(p_shared_owners);
        while (__stlxr(v85 - 1, p_shared_owners));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        do
          v86 = __ldaxr(p_shared_owners);
        while (__stlxr(v86 - 1, p_shared_owners));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
LABEL_118:
        sub_2237D4448((uint64_t)&v448, v427);
        v87 = v450;
        if (!v450)
          goto LABEL_122;
        v88 = (unint64_t *)&v450->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (v89)
        {
LABEL_122:
          v90 = *(_QWORD *)(v426 + 160);
          v428 = *(_QWORD *)(v426 + 168);
          if (v90 != v428)
            goto LABEL_123;
          goto LABEL_265;
        }
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v90 = *(_QWORD *)(v426 + 160);
        v428 = *(_QWORD *)(v426 + 168);
        if (v90 != v428)
        {
LABEL_123:
          v91.f32[0] = (float)v422 + 0.5;
          v91.f32[1] = (float)v423 + 0.5;
          v445 = v91;
          do
          {
            if (!*(_BYTE *)(v90 + 416))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneVisualization2.cpp", 195, (uint64_t)"kfp.polygons.has_value()", 24, (uint64_t)"KFP required to have polygon extents", 36, (void (*)(void **))sub_22457406C);
              v92 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v93 = qword_255795648;
                for (j = qword_255795650; v93 != j; v93 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v93)(*(_QWORD *)(v93 + 8), "kfp.polygons.has_value()", 24, "KFP required to have polygon extents", 36);
              }
              v95 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "kfp.polygons.has_value()", 24, "KFP required to have polygon extents", 36);
              if (!*(_BYTE *)(v90 + 416))
                sub_22324A974();
            }
            v97 = *(int64x2_t ***)(v90 + 392);
            v96 = *(int64x2_t ***)(v90 + 400);
            v430 = v90;
            v436 = v96;
            while (v97 != v96)
            {
              v101 = *v97;
              v100 = v97[1];
              v102 = (char *)v100 - (char *)*v97;
              if (v100 == *v97)
                goto LABEL_137;
              v103 = (float32x2_t *)*((_QWORD *)&v466 + 1);
              v104 = *v97;
              do
              {
                v106 = *v104;
                if (v103 < v467)
                {
                  *v103 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v106)));
                  v105 = v103 + 1;
                  goto LABEL_142;
                }
                v107 = (float32x2_t *)v466;
                v108 = (char *)v103 - v466;
                v109 = (uint64_t)((uint64_t)v103 - v466) >> 3;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 61)
                  sub_22316E078();
                v111 = (uint64_t)v467 - v466;
                if ((uint64_t)((uint64_t)v467 - v466) >> 2 > v110)
                  v110 = v111 >> 2;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                  v112 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                if (v112)
                {
                  if (v112 >> 61)
                    goto LABEL_564;
                  v441 = *v104;
                  v113 = operator new(8 * v112);
                  v106 = v441;
                }
                else
                {
                  v113 = 0;
                }
                v114 = (float32x2_t *)&v113[8 * v109];
                *v114 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v106)));
                v105 = v114 + 1;
                if (v103 != v107)
                {
                  v115 = (char *)v103 - (char *)v107 - 8;
                  if (v115 < 0x168)
                  {
                    v116 = v103;
                    goto LABEL_157;
                  }
                  v118 = ((char *)&v103[-1] - (char *)v107) & 0xFFFFFFFFFFFFFFF8;
                  if (&v108[(_QWORD)v113 - 8 - v118] > &v108[(_QWORD)v113 - 8])
                  {
                    v116 = v103;
                    goto LABEL_157;
                  }
                  if ((float32x2_t *)((char *)&v103[-1] - v118) > &v103[-1])
                  {
                    v116 = v103;
                    goto LABEL_157;
                  }
                  if ((unint64_t)((char *)v103 - v113 - (_QWORD)v108) < 0x20)
                  {
                    v116 = v103;
                    goto LABEL_157;
                  }
                  v119 = (v115 >> 3) + 1;
                  v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
                  v116 = &v103[v120 / 0xFFFFFFFFFFFFFFF8];
                  v114 = (float32x2_t *)((char *)v114 - v120);
                  v121 = &v108[(_QWORD)v113 - 16];
                  v122 = v103 - 2;
                  v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v124 = *(_OWORD *)v122->f32;
                    *((_OWORD *)v121 - 1) = *(_OWORD *)v122[-2].f32;
                    *(_OWORD *)v121 = v124;
                    v121 -= 32;
                    v122 -= 4;
                    v123 -= 4;
                  }
                  while (v123);
                  if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_157:
                      v117 = v116[-1];
                      --v116;
                      v114[-1] = v117;
                      --v114;
                    }
                    while (v116 != v107);
                  }
                  v103 = (float32x2_t *)v466;
                }
                *(_QWORD *)&v466 = v114;
                *((_QWORD *)&v466 + 1) = v105;
                v467 = (float32x2_t *)&v113[8 * v112];
                if (v103)
                  operator delete(v103);
LABEL_142:
                *((_QWORD *)&v466 + 1) = v105;
                ++v104;
                v103 = v105;
              }
              while (v104 != v100);
              if ((unint64_t)v102 > 0x10)
              {
                v125 = 0;
                v126 = (v102 >> 4) - 1;
                v127 = v472;
                while (1)
                {
                  v129 = v125++;
                  if (v127 < v473)
                  {
                    v128 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v125])));
                    *v127 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v129])));
                    v127[1] = v128;
                    v127 += 2;
                  }
                  else
                  {
                    v130 = (float32x2_t *)__p;
                    v131 = (char *)v127 - (_BYTE *)__p;
                    v132 = ((char *)v127 - (_BYTE *)__p) >> 4;
                    v133 = v132 + 1;
                    if ((unint64_t)(v132 + 1) >> 60)
                      goto LABEL_565;
                    v134 = (char *)v473 - (_BYTE *)__p;
                    if (((char *)v473 - (_BYTE *)__p) >> 3 > v133)
                      v133 = v134 >> 3;
                    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF0)
                      v135 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v135 = v133;
                    if (v135)
                    {
                      if (v135 >> 60)
                        goto LABEL_564;
                      v136 = (char *)operator new(16 * v135);
                    }
                    else
                    {
                      v136 = 0;
                    }
                    v137 = (float32x2_t *)&v136[16 * v132];
                    v138 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v125])));
                    *v137 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v129])));
                    v137[1] = v138;
                    if (v127 != v130)
                    {
                      v139 = (char *)v127 - (char *)v130 - 16;
                      if (v139 < 0x3F0)
                        goto LABEL_188;
                      v144 = v127 - 2;
                      v145 = (char *)&v127[-2] - (char *)v130;
                      v146 = v145 & 0xFFFFFFFFFFFFFFF0;
                      if (&v136[v131 - 16 - (v145 & 0xFFFFFFFFFFFFFFF0)] > &v136[v131 - 16])
                        goto LABEL_188;
                      if (&v136[v131 - 8 - v146] > &v136[v131 - 8])
                        goto LABEL_188;
                      if ((float32x2_t *)((char *)v144 - v146) > v144)
                        goto LABEL_188;
                      v147 = v127 - 1;
                      if ((float32x2_t *)((char *)&v127[-1] - v146) > &v127[-1])
                        goto LABEL_188;
                      v148 = v145 & 0xFFFFFFFFFFFFFFF0;
                      v149 = (unint64_t)&v136[v131 - v148 - 16];
                      v150 = &v136[v131 - 8];
                      v151 = (unint64_t)&v136[v131 - v148 - 8];
                      v152 = (unint64_t)v144 - v148;
                      v153 = (unint64_t)v147 - v148;
                      v154 = v149 >= (unint64_t)v147 || v152 >= (unint64_t)v150;
                      v155 = !v154;
                      v156 = v149 >= (unint64_t)v127 || v153 >= (unint64_t)v150;
                      v157 = !v156;
                      v158 = v151 >= (unint64_t)v147 || v152 >= (unint64_t)v137;
                      v159 = !v158;
                      v160 = v151 >= (unint64_t)v127 || v153 >= (unint64_t)v137;
                      v161 = !v160;
                      v162 = v151 >= (unint64_t)v150 || v149 >= (unint64_t)v137;
                      if (!v162 || v155 || v157 || v159 || v161)
                      {
LABEL_188:
                        v140 = v127;
                        v141 = (float32x2_t *)&v136[16 * v132];
                      }
                      else
                      {
                        v163 = (v139 >> 4) + 1;
                        v164 = 16 * (v163 & 0x1FFFFFFFFFFFFFFCLL);
                        v140 = &v127[v164 / 0xFFFFFFFFFFFFFFF8];
                        v141 = &v137[v164 / 0xFFFFFFFFFFFFFFF8];
                        v165 = (const double *)&v127[-4];
                        v166 = (double *)&v137[-4];
                        v167 = v163 & 0x1FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v484 = vld2q_f64(v165);
                          v168 = v165 - 4;
                          v486 = vld2q_f64(v168);
                          vst2q_f64(v166, v484);
                          v169 = v166 - 4;
                          vst2q_f64(v169, v486);
                          v166 -= 8;
                          v165 -= 8;
                          v167 -= 4;
                        }
                        while (v167);
                        if (v163 == (v163 & 0x1FFFFFFFFFFFFFFCLL))
                        {
LABEL_190:
                          v143 = __p;
                          v127 = v137 + 2;
                          __p = v141;
                          v472 = v137 + 2;
                          v473 = (float32x2_t *)&v136[16 * v135];
                          if (!v143)
                            goto LABEL_174;
LABEL_193:
                          operator delete(v143);
                          goto LABEL_174;
                        }
                      }
                      do
                      {
                        v142 = v140[-2];
                        v140 -= 2;
                        v141[-2] = v142;
                        v141 -= 2;
                        v141[1] = v140[1];
                      }
                      while (v140 != v130);
                      goto LABEL_190;
                    }
                    v143 = v127;
                    v127 = v137 + 2;
                    __p = &v136[16 * v132];
                    v472 = v137 + 2;
                    v473 = (float32x2_t *)&v136[16 * v135];
                    if (v143)
                      goto LABEL_193;
                  }
LABEL_174:
                  v472 = v127;
                  if (v125 == v126)
                  {
                    if (v127 < v473)
                    {
                      v98 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(*v101)));
                      *v127 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v126])));
                      v127[1] = v98;
                      v99 = v127 + 2;
                      goto LABEL_136;
                    }
                    v170 = (float32x2_t *)__p;
                    v171 = (char *)v127 - (_BYTE *)__p;
                    v172 = ((char *)v127 - (_BYTE *)__p) >> 4;
                    v173 = v172 + 1;
                    if ((unint64_t)(v172 + 1) >> 60)
LABEL_565:
                      sub_22316E078();
                    v174 = (char *)v473 - (_BYTE *)__p;
                    if (((char *)v473 - (_BYTE *)__p) >> 3 > v173)
                      v173 = v174 >> 3;
                    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF0)
                      v175 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v175 = v173;
                    if (v175)
                    {
                      if (!(v175 >> 60))
                      {
                        v176 = (char *)operator new(16 * v175);
                        goto LABEL_246;
                      }
LABEL_564:
                      sub_223174E94();
                    }
                    v176 = 0;
LABEL_246:
                    v177 = (float32x2_t *)&v176[16 * v172];
                    v178 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(*v101)));
                    *v177 = vadd_f32(v445, vcvt_f32_f64(vcvtq_f64_s64(v101[v126])));
                    v177[1] = v178;
                    v99 = v177 + 2;
                    if (v127 == v170)
                    {
                      __p = v177;
                      v472 = v177 + 2;
                      v473 = (float32x2_t *)&v176[16 * v175];
                    }
                    else
                    {
                      v179 = (char *)v127 - (char *)v170 - 16;
                      if (v179 < 0x90
                        || &v176[v171 - (v179 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v127
                        && (float32x2_t *)((char *)&v127[-2] - (v179 & 0xFFFFFFFFFFFFFFF0)) < v177)
                      {
                        v180 = v127;
                        v181 = v177;
                        goto LABEL_251;
                      }
                      v183 = (v179 >> 4) + 1;
                      v184 = 16 * (v183 & 0x1FFFFFFFFFFFFFFCLL);
                      v180 = &v127[v184 / 0xFFFFFFFFFFFFFFF8];
                      v181 = &v177[v184 / 0xFFFFFFFFFFFFFFF8];
                      v185 = (const double *)&v127[-4];
                      v186 = (double *)&v177[-4];
                      v187 = v183 & 0x1FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v485 = vld2q_f64(v185);
                        v188 = v185 - 4;
                        v487 = vld2q_f64(v188);
                        vst2q_f64(v186, v485);
                        v189 = v186 - 4;
                        vst2q_f64(v189, v487);
                        v186 -= 8;
                        v185 -= 8;
                        v187 -= 4;
                      }
                      while (v187);
                      if (v183 != (v183 & 0x1FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_251:
                          v182 = v180[-2];
                          v180 -= 2;
                          v181[-2] = v182;
                          v181 -= 2;
                          v181[1] = v180[1];
                        }
                        while (v180 != v170);
                      }
                      v127 = (float32x2_t *)__p;
                      __p = v181;
                      v472 = v99;
                      v473 = (float32x2_t *)&v176[16 * v175];
                      if (!v127)
                      {
LABEL_136:
                        v472 = v99;
                        break;
                      }
                    }
                    operator delete(v127);
                    goto LABEL_136;
                  }
                }
              }
LABEL_137:
              v97 += 3;
              v96 = v436;
            }
            v90 = v430 + 424;
          }
          while (v430 + 424 != v428);
        }
LABEL_265:
        v190 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
        if (info.__r_.__value_.__r.__words[2])
        {
          v191 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        v9 = v424 + 1;
        v10 = v425 + 1;
      }
      while (v424 + 1 != v418);
    }
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    __src[1] = v417;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v447);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v193 = sub_2241471F8();
      v194 = v193[2];
      if (!v194)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v194 = v193[2];
      }
      v195 = *(_QWORD *)(v194 + 64);
      v196 = (std::mutex *)(v195 + 32);
      std::mutex::lock((std::mutex *)(v195 + 32));
      v198 = *(_QWORD *)(v195 + 96);
      v197 = *(_QWORD *)(v195 + 104);
      std::mutex::unlock(v196);
      if (v198 != v197)
      {
        sub_2241471F8();
        v199 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
        {
          memset(__src, 0, 32);
          LODWORD(__src[2]) = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
          {
            *(_QWORD *)&v476 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v476 + 1) = 2;
            v200 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
            {
              v201 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v199 + 56))(v199);
              LOBYTE(v477) = 0;
              v478[8] = 0;
              sub_2237DD648((uint64_t)&v468, &v477, &v476, &info);
              sub_2231AA5A4((uint64_t)v200, v201, (uint64_t)&info);
              v202 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
              if (info.__r_.__value_.__r.__words[2])
              {
                v203 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
              }
              if (v478[8] && (v478[7] & 0x80000000) != 0)
                operator delete((void *)v477);
            }
          }
          kdebug_trace();
        }
      }
    }
    memset(__src, 0, 32);
    LODWORD(__src[2]) = 728325624;
    kdebug_trace();
    v205 = HIBYTE(v447.__r_.__value_.__r.__words[2]);
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v205 = v447.__r_.__value_.__l.__size_;
    if (v205 >= 0x11)
    {
      v206 = &v447;
      if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v206 = (std::string *)v447.__r_.__value_.__r.__words[0];
      v207 = v206->__r_.__value_.__r.__words[0];
      v208 = v206->__r_.__value_.__l.__size_;
      v209 = v206->__r_.__value_.__s.__data_[16];
      if (v207 == 0x6365722E64337663 && v208 == 0x73746174532E6E6FLL && v209 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    __src[1] = v417;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v447);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v212 = sub_2241471F8();
      v213 = v212[2];
      if (!v213)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v213 = v212[2];
      }
      v214 = *(_QWORD *)(v213 + 64);
      v215 = (std::mutex *)(v214 + 32);
      std::mutex::lock((std::mutex *)(v214 + 32));
      v217 = *(_QWORD *)(v214 + 96);
      v216 = *(_QWORD *)(v214 + 104);
      std::mutex::unlock(v215);
      if (v217 != v216)
      {
        sub_2241471F8();
        v218 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 24))(v218))
        {
          v477 = 0u;
          *(_OWORD *)v478 = 0u;
          *(_DWORD *)&v478[16] = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 24))(v218))
          {
            v219 = *(double *)&qword_255788F20;
            v220 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 24))(v218))
            {
              v221 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 56))(v218);
              v222 = mach_continuous_time();
              v223 = atomic_load((unsigned __int8 *)&qword_255795560);
              if ((v223 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
              {
                mach_timebase_info((mach_timebase_info_t)&info);
                LODWORD(v410) = HIDWORD(info.__r_.__value_.__r.__words[0]);
                LODWORD(v409) = info.__r_.__value_.__l.__data_;
                *(double *)&qword_255795558 = (double)v409 / (double)v410;
                __cxa_guard_release(&qword_255795560);
              }
              *(_QWORD *)&__src[0] = llround(*(double *)&qword_255795558 * (double)v222);
              *((_QWORD *)&__src[0] + 1) = 2;
              LOBYTE(__src[1]) = 0;
              BYTE8(__src[2]) = 0;
              LOBYTE(__src[3]) = 0;
              BYTE8(__src[4]) = 0;
              *(_QWORD *)&__src[5] = (uint64_t)(v219 * 1000000000.0);
              *((_QWORD *)&__src[5] + 1) = 2;
              LOBYTE(__src[6]) = 1;
              LOBYTE(__src[7]) = 0;
              LOBYTE(__src[10]) = 0;
              LOBYTE(__src[11]) = 0;
              BYTE8(__src[12]) = 0;
              v224 = (const void *)v466;
              memset(&info, 0, sizeof(info));
              v225 = *((_QWORD *)&v466 + 1) - v466;
              if (*((_QWORD *)&v466 + 1) != (_QWORD)v466)
              {
                if (v225 < 0)
                  sub_22316E078();
                v226 = operator new(*((_QWORD *)&v466 + 1) - v466);
                info.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
                info.__r_.__value_.__r.__words[2] = (std::string::size_type)v226 + 8 * (v225 >> 3);
                v227 = v225 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v226, v224, v227);
                info.__r_.__value_.__l.__size_ = (std::string::size_type)v226 + v227;
              }
              sub_2237DD160(&v476, (uint64_t)&info);
              if (info.__r_.__value_.__r.__words[0])
                operator delete(info.__r_.__value_.__l.__data_);
              v475 = v476;
              sub_22329F6A8((uint64_t *)&v475, (uint64_t)__src, &info);
              v228 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
              if (*((_QWORD *)&v475 + 1))
              {
                v229 = (unint64_t *)(*((_QWORD *)&v475 + 1) + 8);
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                }
              }
              sub_2231AD66C((uint64_t)__src);
              sub_2231AA5A4((uint64_t)v220, v221, (uint64_t)&info);
              v231 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
              if (info.__r_.__value_.__r.__words[2])
              {
                v232 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
            }
          }
          kdebug_trace();
        }
      }
    }
    memset(__src, 0, 32);
    LODWORD(__src[2]) = 728325624;
    kdebug_trace();
    v234 = HIBYTE(v447.__r_.__value_.__r.__words[2]);
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v234 = v447.__r_.__value_.__l.__size_;
    if (v234 >= 0x11)
    {
      v235 = &v447;
      if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v235 = (std::string *)v447.__r_.__value_.__r.__words[0];
      v236 = v235->__r_.__value_.__r.__words[0];
      v237 = v235->__r_.__value_.__l.__size_;
      v238 = v235->__r_.__value_.__s.__data_[16];
      if (v236 == 0x6365722E64337663 && v237 == 0x73746174532E6E6FLL && v238 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    *(_QWORD *)&__src[0] = "cv3d.recon.";
    *((_QWORD *)&__src[0] + 1) = 11;
    __src[1] = v417;
    sub_2231A9820((uint64_t)__src, (uint64_t)&__src[2], 0, 0, &v447);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v241 = sub_2241471F8();
      v242 = v241[2];
      if (!v242)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v242 = v241[2];
      }
      v243 = *(_QWORD *)(v242 + 64);
      v244 = (std::mutex *)(v243 + 32);
      std::mutex::lock((std::mutex *)(v243 + 32));
      v246 = *(_QWORD *)(v243 + 96);
      v245 = *(_QWORD *)(v243 + 104);
      std::mutex::unlock(v244);
      if (v246 != v245)
      {
        sub_2241471F8();
        v247 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 24))(v247))
        {
          v477 = 0u;
          *(_OWORD *)v478 = 0u;
          *(_DWORD *)&v478[16] = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 24))(v247))
          {
            v248 = *(double *)&qword_255788F20;
            v249 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 24))(v247))
            {
              v437 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v247 + 56))(v247);
              v250 = mach_continuous_time();
              v432 = (uint64_t)v249;
              v251 = atomic_load((unsigned __int8 *)&qword_255795560);
              if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
              {
                mach_timebase_info((mach_timebase_info_t)&info);
                LODWORD(v412) = HIDWORD(info.__r_.__value_.__r.__words[0]);
                LODWORD(v411) = info.__r_.__value_.__l.__data_;
                *(double *)&qword_255795558 = (double)v411 / (double)v412;
                __cxa_guard_release(&qword_255795560);
              }
              *(_QWORD *)&__src[0] = llround(*(double *)&qword_255795558 * (double)v250);
              *((_QWORD *)&__src[0] + 1) = 2;
              LOBYTE(__src[1]) = 0;
              BYTE8(__src[2]) = 0;
              LOBYTE(__src[3]) = 0;
              BYTE8(__src[4]) = 0;
              *(_QWORD *)&__src[5] = (uint64_t)(v248 * 1000000000.0);
              *((_QWORD *)&__src[5] + 1) = 2;
              LOBYTE(__src[6]) = 1;
              LOBYTE(__src[7]) = 0;
              LOBYTE(__src[10]) = 0;
              LOBYTE(__src[11]) = 0;
              BYTE8(__src[12]) = 0;
              v252 = (char *)__p;
              memset(&info, 0, sizeof(info));
              v446 = v472;
              v253 = (char *)v472 - (_BYTE *)__p;
              if (v472 != __p)
              {
                if (v253 < 0)
                  sub_22316E078();
                v254 = (char *)operator new((char *)v472 - (_BYTE *)__p);
                v255 = (std::string::size_type)&v254[4 * (v253 >> 2)];
                info.__r_.__value_.__l.__size_ = (std::string::size_type)v254;
                v256 = v254;
                while (1)
                {
                  v337 = v254 - v256;
                  v338 = (v254 - v256) >> 2;
                  v339 = &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((uint64_t)(v255 - (_QWORD)v254) >= 8)
                  {
                    v346 = v255;
                    v347 = v254 - v339;
                    if (v254 - v339 > 7)
                    {
                      v348 = v252 + 8;
                      v349 = v254;
                    }
                    else
                    {
                      v348 = &v252[v347];
                      memmove(v254, &v252[v347], 8 - v347);
                      v349 = v339 + 8;
                      info.__r_.__value_.__l.__size_ = (std::string::size_type)(v339 + 8);
                      if (v347 < 1)
                      {
                        v350 = v339 + 8;
LABEL_515:
                        v255 = v346;
                        goto LABEL_516;
                      }
                    }
                    v351 = v349 - 8;
                    v350 = v349;
                    if (v349 - 8 < v254)
                    {
                      v350 = v349;
                      do
                      {
                        v363 = *(_DWORD *)v351;
                        v351 += 4;
                        *(_DWORD *)v350 = v363;
                        v350 += 4;
                      }
                      while (v351 < v254);
                    }
                    info.__r_.__value_.__l.__size_ = (std::string::size_type)v350;
                    if (v349 != v339 + 8)
                      memmove(&v349[-4 * ((v349 - (v339 + 8)) >> 2)], &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL], v349 - (v339 + 8));
                    if (v348 != v252)
                      memmove(&v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL], v252, v348 - v252);
                    goto LABEL_515;
                  }
                  v340 = v338 + 2;
                  if ((unint64_t)(v338 + 2) >> 62)
                    goto LABEL_611;
                  if ((uint64_t)(v255 - (_QWORD)v256) >> 1 > v340)
                    v340 = (uint64_t)(v255 - (_QWORD)v256) >> 1;
                  if (v255 - (unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL)
                    v341 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v341 = v340;
                  if (v341)
                  {
                    v342 = v255;
                    if (v341 >> 62)
                      goto LABEL_612;
                    v343 = operator new(4 * v341);
                    v344 = &v343[4 * v338];
                    *v344 = *(_QWORD *)v252;
                    v345 = (char *)(v344 + 1);
                    if (v256 == v254)
                      goto LABEL_498;
                  }
                  else
                  {
                    v343 = 0;
                    v344 = (_QWORD *)(4 * v338);
                    *(_QWORD *)(4 * v338) = *(_QWORD *)v252;
                    v345 = (char *)(4 * v338 + 8);
                    if (v256 == v254)
                      goto LABEL_498;
                  }
                  v352 = v337 - 4;
                  if ((unint64_t)(v337 - 4) >= 0xBC)
                  {
                    if (&v343[(v337 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v352 & 0xFFFFFFFFFFFFFFFCLL)] > &v343[(v337 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                    {
                      v353 = &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    else if (&v256[(v337 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v352 & 0xFFFFFFFFFFFFFFFCLL)] > &v256[(v337 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                    {
                      v353 = &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    else
                    {
                      v353 = &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v256[v337 & 0xFFFFFFFFFFFFFFFCLL] - &v343[v337 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
                      {
                        v357 = (v352 >> 2) + 1;
                        v358 = 4 * (v357 & 0x7FFFFFFFFFFFFFF8);
                        v353 = &v339[-v358];
                        v344 = (_QWORD *)((char *)v344 - v358);
                        v359 = &v343[4 * v338 - 16];
                        v360 = &v256[4 * v338 - 16];
                        v361 = v357 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v362 = *(_OWORD *)v360;
                          *(v359 - 1) = *((_OWORD *)v360 - 1);
                          *v359 = v362;
                          v359 -= 2;
                          v360 -= 32;
                          v361 -= 8;
                        }
                        while (v361);
                        if (v357 == (v357 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_498;
                      }
                    }
                  }
                  else
                  {
                    v353 = &v256[(v254 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                  }
                  do
                  {
                    v354 = *((_DWORD *)v353 - 1);
                    v353 -= 4;
                    *((_DWORD *)v344 - 1) = v354;
                    v344 = (_QWORD *)((char *)v344 - 4);
                  }
                  while (v353 != v256);
LABEL_498:
                  v355 = v254 - v339;
                  if (v355)
                    memmove(v345, v339, v355);
                  v255 = (std::string::size_type)&v343[4 * v341];
                  v350 = &v345[v355];
                  info.__r_.__value_.__l.__size_ = (std::string::size_type)&v345[v355];
                  if (v256)
                  {
                    v356 = v255;
                    operator delete(v256);
                    v255 = v356;
                  }
                  v256 = (char *)v344;
LABEL_516:
                  v364 = v252 + 8;
                  v365 = v350 - v256;
                  v366 = (v350 - v256) >> 2;
                  v367 = &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((uint64_t)(v255 - (_QWORD)v350) < 8)
                  {
                    v368 = v366 + 2;
                    if ((unint64_t)(v366 + 2) >> 62)
                    {
LABEL_611:
                      info.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
                      info.__r_.__value_.__r.__words[2] = v255;
                      sub_22316E078();
                    }
                    if ((uint64_t)(v255 - (_QWORD)v256) >> 1 > v368)
                      v368 = (uint64_t)(v255 - (_QWORD)v256) >> 1;
                    if (v255 - (unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL)
                      v369 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v369 = v368;
                    if (v369)
                    {
                      v342 = v255;
                      if (v369 >> 62)
                      {
LABEL_612:
                        info.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
                        info.__r_.__value_.__r.__words[2] = v342;
                        sub_223174E94();
                      }
                      v370 = operator new(4 * v369);
                      v371 = &v370[4 * v366];
                      *v371 = *(_QWORD *)v364;
                      v372 = (char *)(v371 + 1);
                      if (v256 == v350)
                        goto LABEL_537;
LABEL_534:
                      v377 = v365 - 4;
                      if ((unint64_t)(v365 - 4) < 0xBC)
                      {
                        v378 = &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                        goto LABEL_536;
                      }
                      if (&v370[(v365 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v377 & 0xFFFFFFFFFFFFFFFCLL)] > &v370[(v365 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                      {
                        v378 = &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                        goto LABEL_536;
                      }
                      if (&v256[(v365 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v377 & 0xFFFFFFFFFFFFFFFCLL)] > &v256[(v365 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                      {
                        v378 = &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                        goto LABEL_536;
                      }
                      v378 = &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v256[v365 & 0xFFFFFFFFFFFFFFFCLL] - &v370[v365 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                        goto LABEL_634;
                      v382 = (v377 >> 2) + 1;
                      v383 = 4 * (v382 & 0x7FFFFFFFFFFFFFF8);
                      v378 = &v367[-v383];
                      v371 = (_QWORD *)((char *)v371 - v383);
                      v384 = &v370[4 * v366 - 16];
                      v385 = &v256[4 * v366 - 16];
                      v386 = v382 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v387 = *(_OWORD *)v385;
                        *(v384 - 1) = *((_OWORD *)v385 - 1);
                        *v384 = v387;
                        v384 -= 2;
                        v385 -= 32;
                        v386 -= 8;
                      }
                      while (v386);
                      if (v382 != (v382 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_634:
                        do
                        {
LABEL_536:
                          v379 = *((_DWORD *)v378 - 1);
                          v378 -= 4;
                          *((_DWORD *)v371 - 1) = v379;
                          v371 = (_QWORD *)((char *)v371 - 4);
                        }
                        while (v378 != v256);
                      }
                    }
                    else
                    {
                      v370 = 0;
                      v371 = (_QWORD *)(4 * v366);
                      *(_QWORD *)(4 * v366) = *(_QWORD *)v364;
                      v372 = (char *)(4 * v366 + 8);
                      if (v256 != v350)
                        goto LABEL_534;
                    }
LABEL_537:
                    v380 = v350 - v367;
                    if (v380)
                      memmove(v372, v367, v380);
                    v255 = (std::string::size_type)&v370[4 * v369];
                    v254 = &v372[v380];
                    info.__r_.__value_.__l.__size_ = (std::string::size_type)&v372[v380];
                    if (v256)
                    {
                      v381 = v255;
                      operator delete(v256);
                      v255 = v381;
                    }
                    v256 = (char *)v371;
                    goto LABEL_476;
                  }
                  v442 = v255;
                  v373 = v350 - v367;
                  if (v350 - v367 > 7)
                  {
                    v374 = v252 + 16;
                    v375 = v350;
LABEL_531:
                    v376 = v375 - 8;
                    v254 = v375;
                    if (v375 - 8 < v350)
                    {
                      v254 = v375;
                      do
                      {
                        v388 = *(_DWORD *)v376;
                        v376 += 4;
                        *(_DWORD *)v254 = v388;
                        v254 += 4;
                      }
                      while (v376 < v350);
                    }
                    info.__r_.__value_.__l.__size_ = (std::string::size_type)v254;
                    if (v375 != v367 + 8)
                      memmove(&v375[-4 * ((v375 - (v367 + 8)) >> 2)], &v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL], v375 - (v367 + 8));
                    if (v374 != v364)
                      memmove(&v256[(v350 - v256) & 0xFFFFFFFFFFFFFFFCLL], v252 + 8, v374 - v364);
                    v255 = v442;
                    goto LABEL_476;
                  }
                  v374 = &v364[v373];
                  memmove(v350, &v364[v373], 8 - v373);
                  v375 = v367 + 8;
                  info.__r_.__value_.__l.__size_ = (std::string::size_type)(v367 + 8);
                  if (v373 >= 1)
                    goto LABEL_531;
                  v254 = v367 + 8;
                  v255 = v442;
LABEL_476:
                  v252 += 16;
                  if (v252 == (char *)v446)
                    goto LABEL_567;
                }
              }
              v255 = 0;
              v256 = 0;
LABEL_567:
              info.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
              info.__r_.__value_.__r.__words[2] = v255;
              sub_22450FA68(&v476, 11, (uint64_t)&info);
              v392 = v476;
              v475 = 0uLL;
              if ((*(_BYTE *)(v476 + 56) & 3) != 0
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              if (info.__r_.__value_.__r.__words[0])
              {
                info.__r_.__value_.__l.__size_ = info.__r_.__value_.__r.__words[0];
                operator delete(info.__r_.__value_.__l.__data_);
              }
              v474 = v392;
              sub_2237DB370(&info, (uint64_t *)&v474, (uint64_t)__src);
              v393 = (std::__shared_weak_count *)*((_QWORD *)&v474 + 1);
              if (*((_QWORD *)&v474 + 1))
              {
                v394 = (unint64_t *)(*((_QWORD *)&v474 + 1) + 8);
                do
                  v395 = __ldaxr(v394);
                while (__stlxr(v395 - 1, v394));
                if (!v395)
                {
                  ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                  std::__shared_weak_count::__release_weak(v393);
                }
              }
              sub_2231AD66C((uint64_t)__src);
              sub_2231AA5A4(v432, v437, (uint64_t)&info);
              v396 = (std::__shared_weak_count *)info.__r_.__value_.__r.__words[2];
              if (info.__r_.__value_.__r.__words[2])
              {
                v397 = (unint64_t *)(info.__r_.__value_.__r.__words[2] + 8);
                do
                  v398 = __ldaxr(v397);
                while (__stlxr(v398 - 1, v397));
                if (!v398)
                {
                  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                  std::__shared_weak_count::__release_weak(v396);
                }
              }
            }
          }
          kdebug_trace();
        }
      }
    }
    memset(__src, 0, 32);
    LODWORD(__src[2]) = 728325624;
    kdebug_trace();
    v399 = HIBYTE(v447.__r_.__value_.__r.__words[2]);
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v399 = v447.__r_.__value_.__l.__size_;
    if (v399 >= 0x11)
    {
      v400 = &v447;
      if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v400 = (std::string *)v447.__r_.__value_.__r.__words[0];
      v401 = v400->__r_.__value_.__r.__words[0];
      v402 = v400->__r_.__value_.__l.__size_;
      v403 = v400->__r_.__value_.__s.__data_[16];
      if (v401 == 0x6365722E64337663 && v402 == 0x73746174532E6E6FLL && v403 == 46)
        sub_223187510();
    }
    kdebug_trace();
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v447.__r_.__value_.__l.__data_);
    if ((_QWORD)v466)
      operator delete((void *)v466);
    if (__p)
      operator delete(__p);
    v406 = (std::__shared_weak_count *)v469;
    if ((_QWORD)v469)
    {
      v407 = (unint64_t *)(v469 + 8);
      do
        v408 = __ldaxr(v407);
      while (__stlxr(v408 - 1, v407));
      if (!v408)
      {
        ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
        std::__shared_weak_count::__release_weak(v406);
      }
    }
  }
}

void sub_2237D3D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  __cxa_guard_abort(&qword_255795560);
  if (STACK[0x288])
    operator delete((void *)STACK[0x288]);
  sub_2231874DC((uint64_t)&STACK[0x200]);
  if (a64 < 0)
  {
    operator delete(a59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2237D433C(uint64_t a1)
{
  if (sub_2237DA1B4((int *)a1))
    return *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)a1 == 1)
  {
    if (!*(_BYTE *)(a1 + 16)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(a1 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(a1 + 25)
      && !*(_BYTE *)(a1 + 80)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_QWORD *)(a1 + 8);
  }
  return *(_QWORD *)(a1 + 72);
}

void sub_2237D4448(uint64_t a1, int *a2)
{
  int *v2;
  unint64_t v4;
  int v9;
  int v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  float32x4_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  __int16 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  double v50;
  double v51;
  double v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int16 v56;
  unint64_t *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int16 v66;
  unint64_t v67;
  float32x4_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int16 v72;
  unint64_t *v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  float32x4_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int16 v88;
  unint64_t *v89;
  char *v90;
  uint64_t v91;
  int *v92;
  char *v93;
  __int128 *v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int16 v103;
  __int128 v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 *v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int16 v128;
  __int128 v129;
  __int128 v130;
  unint64_t *v131;
  unint64_t v132;
  __int16 v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t (**v141)();
  uint64_t v142;
  std::__shared_weak_count *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int16 v147;
  uint64_t (**v148)();
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int16 v154;
  uint64_t (**v155)();
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  __int128 v159;
  float32x4_t v160;
  __int16 v161;
  uint64_t (**v162)();
  uint64_t v163;
  std::__shared_weak_count *v164;
  __int128 v165;
  __int128 v166;
  float32x4_t v167;
  __int16 v168;
  uint64_t (**v169)();
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  __int128 v173;
  float32x4_t v174;
  __int16 v175;
  uint64_t (**v176)();
  uint64_t v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  __int128 v180;
  float32x4_t v181;
  __int16 v182;
  _QWORD v183[2];
  uint64_t v184;
  int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;

  v2 = a2;
  v4 = 0;
  v190 = 1065353216;
  v191 = 0;
  v188 = 0x3F80000000000000;
  v189 = 0;
  v186 = 0;
  v187 = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  v184 = _D0;
  v185 = 0;
  v183[0] = -1;
  v9 = *(_DWORD *)(a1 + 56);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 60);
    if (v10)
    {
      v183[0] = 0;
      v4 = (v9 - 1) | ((unint64_t)(v10 - 1) << 32);
    }
  }
  v183[1] = v4;
  if (sub_2237DA1B4(a2))
  {
    v176 = &off_24EC232F0;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = *(_WORD *)(a1 + 72);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v11 = *(_OWORD *)(a1 + 40);
      v179 = *(_OWORD *)(a1 + 24);
      v180 = v11;
      v24 = *(float32x4_t *)(a1 + 56);
      v181 = v24;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      v177 = v18;
      v178 = v19;
      v182 = v22;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      v46 = *(_WORD *)(a1 + 72);
      v177 = *(_QWORD *)(a1 + 8);
      v178 = 0;
      v179 = *(_OWORD *)(a1 + 24);
      v180 = *(_OWORD *)(a1 + 40);
      v24 = *(float32x4_t *)(a1 + 56);
      v181 = v24;
      v182 = v46;
    }
    sub_2237385F0((uint64_t)&v176, (unsigned int *)v183, (uint64_t)&v188, v24, *(double *)&v11, v12, v13, v14, v15, v16, v17);
    v53 = v178;
    if (!v178)
      goto LABEL_105;
    v54 = (unint64_t *)&v178->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    goto LABEL_104;
  }
  if (sub_2237DA2E0(v2))
  {
    v169 = &off_24EC232F0;
    v35 = *(_QWORD *)(a1 + 8);
    v36 = *(std::__shared_weak_count **)(a1 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = *(_WORD *)(a1 + 72);
      do
        v40 = __ldxr(v37);
      while (__stxr(v40 + 1, v37));
      v28 = *(_OWORD *)(a1 + 40);
      v172 = *(_OWORD *)(a1 + 24);
      v173 = v28;
      v41 = *(float32x4_t *)(a1 + 56);
      v174 = v41;
      do
        v42 = __ldxr(v37);
      while (__stxr(v42 + 1, v37));
      v170 = v35;
      v171 = v36;
      v175 = v39;
      do
        v43 = __ldaxr(v37);
      while (__stlxr(v43 - 1, v37));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      do
        v44 = __ldaxr(v37);
      while (__stlxr(v44 - 1, v37));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v56 = *(_WORD *)(a1 + 72);
      v170 = *(_QWORD *)(a1 + 8);
      v171 = 0;
      v172 = *(_OWORD *)(a1 + 24);
      v173 = *(_OWORD *)(a1 + 40);
      v41 = *(float32x4_t *)(a1 + 56);
      v174 = v41;
      v175 = v56;
    }
    sub_2237385F0((uint64_t)&v169, (unsigned int *)v183, (uint64_t)&v190, v41, *(double *)&v28, v29, v30, v31, v32, v33, v34);
    v53 = v171;
    if (!v171)
      goto LABEL_105;
    v57 = (unint64_t *)&v171->__shared_owners_;
    do
      v55 = __ldaxr(v57);
    while (__stlxr(v55 - 1, v57));
    goto LABEL_104;
  }
  v45 = *v2;
  if (*((_BYTE *)v2 + 25))
  {
    if (v45 == 1)
    {
      if (!*((_BYTE *)v2 + 16)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)v2 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_181;
      }
      if (!*((_BYTE *)v2 + 25) || *((_BYTE *)v2 + 80))
        goto LABEL_64;
      v58 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstr"
            "uction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h";
      v59 = "!update_state->content_updated || kpseg_prev.has_value()";
      v60 = 88;
      v61 = 56;
    }
    else
    {
      v58 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneVisualization2.cpp";
      v59 = "update.IsModified()";
      v60 = 57;
      v61 = 19;
    }
    if (!sub_224573870(v58, v60, (uint64_t)v59, v61, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_64:
      v155 = &off_24EC232F0;
      v62 = *(_QWORD *)(a1 + 8);
      v63 = *(std::__shared_weak_count **)(a1 + 16);
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v66 = *(_WORD *)(a1 + 72);
        do
          v67 = __ldxr(v64);
        while (__stxr(v67 + 1, v64));
        v28 = *(_OWORD *)(a1 + 40);
        v158 = *(_OWORD *)(a1 + 24);
        v159 = v28;
        v68 = *(float32x4_t *)(a1 + 56);
        v160 = v68;
        do
          v69 = __ldxr(v64);
        while (__stxr(v69 + 1, v64));
        v156 = v62;
        v157 = v63;
        v161 = v66;
        do
          v70 = __ldaxr(v64);
        while (__stlxr(v70 - 1, v64));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        do
          v71 = __ldaxr(v64);
        while (__stlxr(v71 - 1, v64));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      else
      {
        v72 = *(_WORD *)(a1 + 72);
        v156 = *(_QWORD *)(a1 + 8);
        v157 = 0;
        v158 = *(_OWORD *)(a1 + 24);
        v159 = *(_OWORD *)(a1 + 40);
        v68 = *(float32x4_t *)(a1 + 56);
        v160 = v68;
        v161 = v72;
      }
      sub_2237385F0((uint64_t)&v155, (unsigned int *)v183, (uint64_t)&v184, v68, *(double *)&v28, v29, v30, v31, v32, v33, v34);
      v53 = v157;
      if (!v157)
        goto LABEL_105;
      v73 = (unint64_t *)&v157->__shared_owners_;
      do
        v55 = __ldaxr(v73);
      while (__stlxr(v55 - 1, v73));
      goto LABEL_104;
    }
LABEL_181:
    abort();
  }
  if (v45 != 1)
  {
    v74 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneVisualization2.cpp";
    v75 = "update.IsModified()";
    v76 = 51;
    v77 = 19;
    goto LABEL_83;
  }
  if (!*((_BYTE *)v2 + 16)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)v2 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_181;
  }
  if (*((_BYTE *)v2 + 25) && !*((_BYTE *)v2 + 80))
  {
    v74 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruc"
          "tion/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h";
    v75 = "!update_state->content_updated || kpseg_prev.has_value()";
    v76 = 88;
    v77 = 56;
LABEL_83:
    if (sub_224573870(v74, v76, (uint64_t)v75, v77, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      goto LABEL_181;
  }
  if (!*((_BYTE *)v2 + 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneVisualization2.cpp", 52, (uint64_t)"update.update_state->pose_updated", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_181;
  }
  v162 = &off_24EC232F0;
  v78 = *(_QWORD *)(a1 + 8);
  v79 = *(std::__shared_weak_count **)(a1 + 16);
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    v82 = *(_WORD *)(a1 + 72);
    do
      v83 = __ldxr(v80);
    while (__stxr(v83 + 1, v80));
    v28 = *(_OWORD *)(a1 + 40);
    v165 = *(_OWORD *)(a1 + 24);
    v166 = v28;
    v84 = *(float32x4_t *)(a1 + 56);
    v167 = v84;
    do
      v85 = __ldxr(v80);
    while (__stxr(v85 + 1, v80));
    v163 = v78;
    v164 = v79;
    v168 = v82;
    do
      v86 = __ldaxr(v80);
    while (__stlxr(v86 - 1, v80));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    do
      v87 = __ldaxr(v80);
    while (__stlxr(v87 - 1, v80));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  else
  {
    v88 = *(_WORD *)(a1 + 72);
    v163 = *(_QWORD *)(a1 + 8);
    v164 = 0;
    v165 = *(_OWORD *)(a1 + 24);
    v166 = *(_OWORD *)(a1 + 40);
    v84 = *(float32x4_t *)(a1 + 56);
    v167 = v84;
    v168 = v88;
  }
  sub_2237385F0((uint64_t)&v162, (unsigned int *)v183, (uint64_t)&v186, v84, *(double *)&v28, v29, v30, v31, v32, v33, v34);
  v53 = v164;
  if (!v164)
    goto LABEL_105;
  v89 = (unint64_t *)&v164->__shared_owners_;
  do
    v55 = __ldaxr(v89);
  while (__stlxr(v55 - 1, v89));
LABEL_104:
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v90 = (char *)*((_QWORD *)v2 + 4);
    v91 = *((_QWORD *)v2 + 7);
    v92 = v2;
    if (!v91)
      goto LABEL_142;
    goto LABEL_106;
  }
LABEL_105:
  v90 = (char *)*((_QWORD *)v2 + 4);
  v91 = *((_QWORD *)v2 + 7);
  v92 = v2;
  if (!v91)
    goto LABEL_142;
LABEL_106:
  v93 = &v90[16 * v91];
  v94 = (__int128 *)(a1 + 24);
  do
  {
    v95 = *((_QWORD *)v2 + 1);
    v96 = *(_QWORD *)(v95 + 160);
    v97 = *(_QWORD **)(v95 + 168);
    if ((_QWORD *)v96 != v97)
    {
      while (*(_QWORD *)v96 != *(_QWORD *)v90 || *(_QWORD *)(v96 + 8) != *((_QWORD *)v90 + 1))
      {
        v96 += 424;
        if ((_QWORD *)v96 == v97)
        {
          v99 = 0;
          v100 = 0;
          v148 = &off_24EC232F0;
          v101 = *(_QWORD *)(a1 + 8);
          v102 = *(std::__shared_weak_count **)(a1 + 16);
          if (v102)
            goto LABEL_123;
          goto LABEL_115;
        }
      }
    }
    if ((_QWORD *)v96 == v97)
      v99 = 0;
    else
      v99 = v96;
    if ((_QWORD *)v96 == v97)
      v100 = 0;
    else
      v100 = v96 & 0xFFFFFFFFFFFFFF00;
    v148 = &off_24EC232F0;
    v101 = *(_QWORD *)(a1 + 8);
    v102 = *(std::__shared_weak_count **)(a1 + 16);
    if (v102)
    {
LABEL_123:
      v106 = (unint64_t *)&v102->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      v108 = *(_WORD *)(a1 + 72);
      do
        v109 = __ldxr(v106);
      while (__stxr(v109 + 1, v106));
      v104 = *(_OWORD *)(a1 + 40);
      v151 = *v94;
      v152 = v104;
      v105 = *(_OWORD *)(a1 + 56);
      v153 = v105;
      do
        v110 = __ldxr(v106);
      while (__stxr(v110 + 1, v106));
      v149 = v101;
      v150 = v102;
      v154 = v108;
      do
        v111 = __ldaxr(v106);
      while (__stlxr(v111 - 1, v106));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
      do
        v112 = __ldaxr(v106);
      while (__stlxr(v112 - 1, v106));
      v2 = v92;
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    else
    {
LABEL_115:
      v103 = *(_WORD *)(a1 + 72);
      v149 = v101;
      v150 = 0;
      v104 = *(_OWORD *)(a1 + 40);
      v151 = *v94;
      v152 = v104;
      v105 = *(_OWORD *)(a1 + 56);
      v153 = v105;
      v154 = v103;
    }
    sub_2237391D4((uint64_t)&v148, v100 | v99, (uint64_t)&v188, *(double *)&v105, *(double *)&v104, v47, v48, v49, v50, v51, v52);
    v113 = v150;
    if (v150)
    {
      v114 = (unint64_t *)&v150->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v90 += 16;
  }
  while (v90 != v93);
  v90 = (char *)*((_QWORD *)v2 + 4);
LABEL_142:
  v116 = *((_QWORD *)v2 + 8);
  v117 = (char *)*((_QWORD *)v2 + 5);
  if (v116 != (v117 - v90) >> 4)
  {
    v118 = &v90[16 * v116];
    v119 = (__int128 *)(a1 + 24);
    do
    {
      v120 = *((_QWORD *)v2 + 9);
      v121 = *(_QWORD *)(v120 + 160);
      v122 = *(_QWORD **)(v120 + 168);
      if ((_QWORD *)v121 != v122)
      {
        while (*(_QWORD *)v121 != *(_QWORD *)v118 || *(_QWORD *)(v121 + 8) != *((_QWORD *)v118 + 1))
        {
          v121 += 424;
          if ((_QWORD *)v121 == v122)
          {
            v124 = 0;
            v125 = 0;
            v141 = &off_24EC232F0;
            v126 = *(_QWORD *)(a1 + 8);
            v127 = *(std::__shared_weak_count **)(a1 + 16);
            if (v127)
              goto LABEL_161;
            goto LABEL_153;
          }
        }
      }
      if ((_QWORD *)v121 == v122)
        v124 = 0;
      else
        v124 = v121;
      if ((_QWORD *)v121 == v122)
        v125 = 0;
      else
        v125 = v121 & 0xFFFFFFFFFFFFFF00;
      v141 = &off_24EC232F0;
      v126 = *(_QWORD *)(a1 + 8);
      v127 = *(std::__shared_weak_count **)(a1 + 16);
      if (v127)
      {
LABEL_161:
        v131 = (unint64_t *)&v127->__shared_owners_;
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
        v133 = *(_WORD *)(a1 + 72);
        do
          v134 = __ldxr(v131);
        while (__stxr(v134 + 1, v131));
        v129 = *(_OWORD *)(a1 + 40);
        v144 = *v119;
        v145 = v129;
        v130 = *(_OWORD *)(a1 + 56);
        v146 = v130;
        do
          v135 = __ldxr(v131);
        while (__stxr(v135 + 1, v131));
        v142 = v126;
        v143 = v127;
        v147 = v133;
        do
          v136 = __ldaxr(v131);
        while (__stlxr(v136 - 1, v131));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
        do
          v137 = __ldaxr(v131);
        while (__stlxr(v137 - 1, v131));
        v2 = v92;
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      else
      {
LABEL_153:
        v128 = *(_WORD *)(a1 + 72);
        v142 = v126;
        v143 = 0;
        v129 = *(_OWORD *)(a1 + 40);
        v144 = *v119;
        v145 = v129;
        v130 = *(_OWORD *)(a1 + 56);
        v146 = v130;
        v147 = v128;
      }
      sub_2237391D4((uint64_t)&v141, v125 | v124, (uint64_t)&v190, *(double *)&v130, *(double *)&v129, v47, v48, v49, v50, v51, v52);
      v138 = v143;
      if (v143)
      {
        v139 = (unint64_t *)&v143->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v118 += 16;
    }
    while (v118 != v117);
  }
}

void sub_2237D4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_2231E94AC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_2237D4F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2231E94AC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_2237D4F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_2231E94AC((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_2237D4F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231E94AC(v1 - 248);
  _Unwind_Resume(a1);
}

void sub_2237D4FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231E94AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237D4FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2231E94AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237D4FD4(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v68;
  const char *v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v146;
  unsigned __int8 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v152;
  unsigned __int8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v158;
  const char *v159;
  uint64_t v160;
  unsigned __int8 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v190;
  unsigned __int8 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v196;
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v202;
  const char *v203;
  uint64_t v204;
  unsigned __int8 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v210;
  unsigned __int8 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v216;
  unsigned __int8 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned __int8 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v245;
  unsigned __int8 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v251;
  uint64_t v252;
  unsigned __int8 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v258;
  unsigned __int8 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned __int8 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void (*v273)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v274;
  unsigned __int8 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void (*v279)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v280;
  uint64_t v281;
  unsigned __int8 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void (*v286)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v287;
  unsigned __int8 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void (*v292)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  BOOL v300;
  char v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  int64_t v318;
  int64_t v319;
  int64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  _DWORD *v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  uint64_t *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t *v350;
  _DWORD *v351;
  uint64_t v352;
  _DWORD *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t *v378;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t *v389;
  uint64_t *v390;
  int64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;

  v384 = (uint64_t *)result;
LABEL_2:
  v4 = v384;
  v376 = a2 - 1;
  while (2)
  {
    v5 = (char *)a2 - (char *)v4;
    v6 = a2 - v4;
    v384 = v4;
    switch(v6)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v296 = *v4;
        v297 = *(_QWORD *)(sub_2237D433C(*(a2 - 1)) + 232);
        result = sub_2237D433C(v296);
        if (v297 < *(_QWORD *)(result + 232))
        {
          v298 = *v4;
          *v4 = *(a2 - 1);
          *(a2 - 1) = v298;
        }
        return result;
      case 3uLL:
        return sub_2237D9DB8(v4, v4 + 1, v376);
      case 4uLL:
        return sub_2237DA0DC(v4, v4 + 1, v4 + 2, v376);
      case 5uLL:
        return sub_2237D9CA0(v4, v4 + 1, v4 + 2, v4 + 3, v376);
      default:
        v7 = v4;
        if (v5 > 191)
        {
          if (!a3)
          {
            if (v4 == a2)
              return result;
            v318 = (v6 - 2) >> 1;
            v319 = v318;
            v394 = (char *)a2 - (char *)v4;
            do
            {
              v320 = v319;
              if (v318 >= v319)
              {
                v321 = (2 * v319) | 1;
                v322 = &v384[v321];
                if (2 * v319 + 2 < (uint64_t)v6)
                {
                  v323 = v322[1];
                  v324 = *(_QWORD *)(sub_2237D433C(*v322) + 232);
                  v5 = v394;
                  if (v324 < *(_QWORD *)(sub_2237D433C(v323) + 232))
                  {
                    ++v322;
                    v321 = 2 * v320 + 2;
                  }
                }
                v325 = &v384[v320];
                v326 = *v325;
                v327 = *(_QWORD *)(sub_2237D433C(*v322) + 232);
                result = sub_2237D433C(v326);
                if (v327 >= *(_QWORD *)(result + 232))
                {
                  v391 = v320;
                  v328 = *v325;
                  do
                  {
                    v330 = v325;
                    v325 = v322;
                    *v330 = *v322;
                    if (v318 < v321)
                      break;
                    v331 = (2 * v321) | 1;
                    v322 = &v384[v331];
                    v332 = 2 * v321 + 2;
                    if (v332 < (uint64_t)v6)
                    {
                      v333 = v322[1];
                      v334 = *(_QWORD *)(sub_2237D433C(*v322) + 232);
                      if (v334 < *(_QWORD *)(sub_2237D433C(v333) + 232))
                      {
                        ++v322;
                        v331 = v332;
                      }
                    }
                    v329 = *(_QWORD *)(sub_2237D433C(*v322) + 232);
                    result = sub_2237D433C(v328);
                    v321 = v331;
                  }
                  while (v329 >= *(_QWORD *)(result + 232));
                  *v325 = v328;
                  v320 = v391;
                  v5 = v394;
                }
              }
              v319 = v320 - 1;
            }
            while (v320);
            v335 = (unint64_t)v5 >> 3;
            while (1)
            {
              v336 = 0;
              v337 = v384;
              v395 = *v384;
              do
              {
                v339 = &v337[v336 + 1];
                v340 = (2 * v336) | 1;
                v341 = 2 * v336 + 2;
                if (v341 >= v335)
                  goto LABEL_729;
                v342 = (_DWORD *)*v339;
                v343 = v337[v336 + 2];
                v344 = *(_DWORD *)*v339;
                if (v344 == 1)
                {
                  if (!*((_BYTE *)v342 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*((_BYTE *)v342 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*((_BYTE *)v342 + 25))
                  {
                    if (!*((_BYTE *)v342 + 80))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                  }
LABEL_749:
                  v345 = *(_QWORD *)(*((_QWORD *)v342 + 1) + 232);
                  v346 = *(_DWORD *)v343;
                  if (*(_DWORD *)v343 == 1)
                    goto LABEL_761;
                  goto LABEL_750;
                }
                if (!v344)
                {
                  if (!*((_BYTE *)v342 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*((_BYTE *)v342 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*((_QWORD *)v342 + 7) != (uint64_t)(*((_QWORD *)v342 + 5) - *((_QWORD *)v342 + 4)) >> 4)
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*((_BYTE *)v342 + 80))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  goto LABEL_749;
                }
                v345 = *(_QWORD *)(*((_QWORD *)v342 + 9) + 232);
                v346 = *(_DWORD *)v343;
                if (*(_DWORD *)v343 == 1)
                {
LABEL_761:
                  if (!*(_BYTE *)(v343 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v343 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_BYTE *)(v343 + 25))
                  {
                    if (!*(_BYTE *)(v343 + 80))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                  }
                  goto LABEL_726;
                }
LABEL_750:
                if (!v346)
                {
                  if (!*(_BYTE *)(v343 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v343 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_QWORD *)(v343 + 56) != (uint64_t)(*(_QWORD *)(v343 + 40) - *(_QWORD *)(v343 + 32)) >> 4)
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_BYTE *)(v343 + 80))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
LABEL_726:
                  v338 = v343 + 8;
                  goto LABEL_727;
                }
                v338 = v343 + 72;
LABEL_727:
                if (v345 < *(_QWORD *)(*(_QWORD *)v338 + 232))
                {
                  ++v339;
                  v340 = v341;
                }
LABEL_729:
                *v337 = *v339;
                v337 = v339;
                v336 = v340;
              }
              while (v340 <= (uint64_t)((unint64_t)(v335 - 2) >> 1));
              v347 = a2 - 1;
              v300 = v339 == --a2;
              if (v300)
              {
                *v339 = v395;
                goto LABEL_724;
              }
              *v339 = *v347;
              *v347 = v395;
              v348 = (char *)v339 - (char *)v384 + 8;
              if (v348 >= 9)
              {
                v349 = (((unint64_t)v348 >> 3) - 2) >> 1;
                v350 = &v384[v349];
                v351 = (_DWORD *)*v339;
                v352 = *(_QWORD *)(sub_2237D433C(*v350) + 232);
                result = sub_2237D433C((uint64_t)v351);
                if (v352 < *(_QWORD *)(result + 232))
                {
                  v353 = (_DWORD *)*v339;
                  v354 = *v339 + 72;
                  v355 = *v339 + 8;
                  while (1)
                  {
                    v357 = v339;
                    v339 = v350;
                    *v357 = *v350;
                    if (!v349)
                    {
LABEL_813:
                      *v339 = (uint64_t)v353;
                      goto LABEL_724;
                    }
                    v349 = (v349 - 1) >> 1;
                    v350 = &v384[v349];
                    v358 = *v350;
                    v359 = *(_DWORD *)*v350;
                    if (v359 == 1)
                      break;
                    if (!v359)
                    {
                      if (!*(_BYTE *)(v358 + 16))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (!*(_BYTE *)(v358 + 26))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (*(_QWORD *)(v358 + 56) != (uint64_t)(*(_QWORD *)(v358 + 40) - *(_QWORD *)(v358 + 32)) >> 4)
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (*(_BYTE *)(v358 + 80))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      goto LABEL_795;
                    }
                    v360 = *(_QWORD *)(*(_QWORD *)(v358 + 72) + 232);
                    v361 = *v353;
                    if (*v353 != 1)
                    {
LABEL_796:
                      v356 = v354;
                      if (!v361)
                      {
                        if (!*((_BYTE *)v353 + 16))
                        {
                          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                          if ((_DWORD)result)
                            goto LABEL_860;
                        }
                        if (!*((_BYTE *)v353 + 26))
                        {
                          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                          if ((_DWORD)result)
                            goto LABEL_860;
                        }
                        if (*((_QWORD *)v353 + 7) != (uint64_t)(*((_QWORD *)v353 + 5) - *((_QWORD *)v353 + 4)) >> 4)
                        {
                          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                          if ((_DWORD)result)
                            goto LABEL_860;
                        }
                        v356 = v355;
                        if (*((_BYTE *)v353 + 80))
                        {
                          v362 = 77;
                          v363 = "!kpseg_prev.has_value()";
                          v364 = 23;
                          goto LABEL_774;
                        }
                      }
                      goto LABEL_775;
                    }
LABEL_806:
                    if (!*((_BYTE *)v353 + 16))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (!*((_BYTE *)v353 + 26))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    v356 = v355;
                    if (*((_BYTE *)v353 + 25))
                    {
                      v356 = v355;
                      if (!*((_BYTE *)v353 + 80))
                      {
                        v362 = 88;
                        v363 = "!update_state->content_updated || kpseg_prev.has_value()";
                        v364 = 56;
LABEL_774:
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", v362, (uint64_t)v363, v364, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v356 = v355;
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                    }
LABEL_775:
                    if (v360 >= *(_QWORD *)(*(_QWORD *)v356 + 232))
                      goto LABEL_813;
                  }
                  if (!*(_BYTE *)(v358 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v358 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_BYTE *)(v358 + 25))
                  {
                    if (!*(_BYTE *)(v358 + 80))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                  }
LABEL_795:
                  v360 = *(_QWORD *)(*(_QWORD *)(v358 + 8) + 232);
                  v361 = *v353;
                  if (*v353 != 1)
                    goto LABEL_796;
                  goto LABEL_806;
                }
              }
LABEL_724:
              v25 = v335-- <= 2;
              if (v25)
                return result;
            }
          }
          v8 = v6 >> 1;
          v9 = &v4[v6 >> 1];
          if ((unint64_t)v5 >= 0x401)
          {
            v10 = &v7[v6 >> 1];
            v11 = v7;
            sub_2237D9DB8(v7, v10, v376);
            v12 = v8;
            v13 = &v11[v8];
            sub_2237D9DB8(v11 + 1, v13 - 1, a2 - 2);
            sub_2237D9DB8(v11 + 2, &v11[v12 + 1], a2 - 3);
            sub_2237D9DB8(v13 - 1, v9, &v11[v12 + 1]);
            v14 = *v11;
            *v11 = *v13;
            *v13 = v14;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_11;
LABEL_10:
            v15 = *v384;
            v16 = *(_QWORD *)(sub_2237D433C(*(v384 - 1)) + 232);
            if (v16 < *(_QWORD *)(sub_2237D433C(v15) + 232))
              goto LABEL_11;
            v4 = v384;
            v224 = *v384;
            v225 = *v376;
            v226 = *(_QWORD *)(sub_2237D433C(*v384) + 232);
            result = sub_2237D433C(v225);
            if (v226 >= *(_QWORD *)(result + 232))
            {
              v229 = v384 + 1;
              do
              {
                v4 = v229;
                if (v229 >= a2)
                  break;
                ++v229;
                v230 = *v4;
                v231 = *(_QWORD *)(sub_2237D433C(v224) + 232);
                result = sub_2237D433C(v230);
              }
              while (v231 >= *(_QWORD *)(result + 232));
            }
            else
            {
              do
              {
                v227 = v4[1];
                ++v4;
                v228 = *(_QWORD *)(sub_2237D433C(v224) + 232);
                result = sub_2237D433C(v227);
              }
              while (v228 >= *(_QWORD *)(result + 232));
            }
            v232 = a2;
            if (v4 < a2)
            {
              v232 = a2;
              do
              {
                v233 = *(v232 - 1);
                v234 = v232 - 1;
                v235 = *(_QWORD *)(sub_2237D433C(v224) + 232);
                result = sub_2237D433C(v233);
                v25 = v235 < *(_QWORD *)(result + 232);
                v232 = v234;
              }
              while (v25);
            }
            if (v4 >= v232)
              goto LABEL_641;
            while (2)
            {
              v236 = *v4;
              *v4 = *v232;
              v389 = v232;
              *v232 = v236;
              do
              {
                while (1)
                {
                  v238 = v4[1];
                  ++v4;
                  v237 = v238;
                  if (*(_DWORD *)v224 == 1)
                  {
                    if (!*(_BYTE *)(v224 + 16))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (!*(_BYTE *)(v224 + 26))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    v239 = v224 + 8;
                    if (*(_BYTE *)(v224 + 25))
                    {
                      v239 = v224 + 8;
                      if (!*(_BYTE *)(v224 + 80))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v239 = v224 + 8;
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                    }
                  }
                  else
                  {
                    v239 = v224 + 72;
                    if (!*(_DWORD *)v224)
                    {
                      if (!*(_BYTE *)(v224 + 16))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (!*(_BYTE *)(v224 + 26))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (*(_QWORD *)(v224 + 56) != (uint64_t)(*(_QWORD *)(v224 + 40) - *(_QWORD *)(v224 + 32)) >> 4)
                      {
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v240 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v240 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v242 = qword_255795648;
                          v241 = qword_255795650;
                          while (v242 != v241)
                          {
                            v244 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v242;
                            v243 = *(_QWORD *)(v242 + 8);
                            v242 += 16;
                            v244(v243, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                          }
                        }
                        v245 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v245 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        result = qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      }
                      v239 = v224 + 8;
                      if (*(_BYTE *)(v224 + 80))
                      {
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v246 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v246 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v248 = qword_255795648;
                          v247 = qword_255795650;
                          while (v248 != v247)
                          {
                            v250 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v248;
                            v249 = *(_QWORD *)(v248 + 8);
                            v248 += 16;
                            v250(v249, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v251 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        result = qword_255795660(*(_QWORD *)algn_255795668, "!kpseg_prev.has_value()", 23, "", 0);
                        v239 = v224 + 8;
                      }
                    }
                  }
                  v252 = *(_QWORD *)(*(_QWORD *)v239 + 232);
                  if (*(_DWORD *)v237 == 1)
                  {
                    if (!*(_BYTE *)(v237 + 16))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (!*(_BYTE *)(v237 + 26))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (*(_BYTE *)(v237 + 25))
                    {
                      if (!*(_BYTE *)(v237 + 80))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                    }
                    goto LABEL_476;
                  }
                  if (*(_DWORD *)v237)
                    break;
                  if (!*(_BYTE *)(v237 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v237 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  v381 = v252;
                  if (*(_QWORD *)(v237 + 56) != (uint64_t)(*(_QWORD *)(v237 + 40) - *(_QWORD *)(v237 + 32)) >> 4)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v253 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v253 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v255 = qword_255795648;
                      v254 = qword_255795650;
                      while (v255 != v254)
                      {
                        v257 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v255;
                        v256 = *(_QWORD *)(v255 + 8);
                        v255 += 16;
                        v257(v256, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      }
                    }
                    v258 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v258 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v252 = v381;
                    if (!byte_255795670)
                      goto LABEL_860;
                    result = qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                  }
                  if (*(_BYTE *)(v237 + 80))
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v259 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v261 = qword_255795648;
                      v260 = qword_255795650;
                      while (v261 != v260)
                      {
                        v263 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v261;
                        v262 = *(_QWORD *)(v261 + 8);
                        v261 += 16;
                        v263(v262, "!kpseg_prev.has_value()", 23, "", 0);
                      }
                    }
                    v264 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v264 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v252 = v381;
                    if (!byte_255795670)
                      goto LABEL_860;
                    result = qword_255795660(*(_QWORD *)algn_255795668, "!kpseg_prev.has_value()", 23, "", 0);
                  }
LABEL_476:
                  if (v252 < *(_QWORD *)(*(_QWORD *)(v237 + 8) + 232))
                    goto LABEL_558;
                }
              }
              while (v252 >= *(_QWORD *)(*(_QWORD *)(v237 + 72) + 232));
LABEL_558:
              v232 = v389;
              v386 = v4;
              do
              {
                while (1)
                {
                  v266 = v232 - 1;
                  v267 = *(v232 - 1);
                  v390 = v266;
                  if (*(_DWORD *)v224 == 1)
                  {
                    if (!*(_BYTE *)(v224 + 16))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (!*(_BYTE *)(v224 + 26))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    v268 = v224 + 8;
                    if (*(_BYTE *)(v224 + 25))
                    {
                      v268 = v224 + 8;
                      if (!*(_BYTE *)(v224 + 80))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v268 = v224 + 8;
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                    }
                  }
                  else
                  {
                    v268 = v224 + 72;
                    if (!*(_DWORD *)v224)
                    {
                      if (!*(_BYTE *)(v224 + 16))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (!*(_BYTE *)(v224 + 26))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                      if (*(_QWORD *)(v224 + 56) != (uint64_t)(*(_QWORD *)(v224 + 40) - *(_QWORD *)(v224 + 32)) >> 4)
                      {
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v269 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v271 = qword_255795648;
                          v270 = qword_255795650;
                          while (v271 != v270)
                          {
                            v273 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v271;
                            v272 = *(_QWORD *)(v271 + 8);
                            v271 += 16;
                            v273(v272, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                          }
                        }
                        v274 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v274 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        v4 = v386;
                        if (!byte_255795670)
                          goto LABEL_860;
                        result = qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      }
                      v268 = v224 + 8;
                      if (*(_BYTE *)(v224 + 80))
                      {
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v275 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v275 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v277 = qword_255795648;
                          v276 = qword_255795650;
                          while (v277 != v276)
                          {
                            v279 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v277;
                            v278 = *(_QWORD *)(v277 + 8);
                            v277 += 16;
                            v279(v278, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v280 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v280 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        result = qword_255795660(*(_QWORD *)algn_255795668, "!kpseg_prev.has_value()", 23, "", 0);
                        v268 = v224 + 8;
                      }
                    }
                  }
                  v281 = *(_QWORD *)(*(_QWORD *)v268 + 232);
                  if (*(_DWORD *)v267 == 1)
                  {
                    if (!*(_BYTE *)(v267 + 16))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (!*(_BYTE *)(v267 + 26))
                    {
                      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      if ((_DWORD)result)
                        goto LABEL_860;
                    }
                    if (*(_BYTE *)(v267 + 25))
                    {
                      if (!*(_BYTE *)(v267 + 80))
                      {
                        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        if ((_DWORD)result)
                          goto LABEL_860;
                      }
                    }
                    goto LABEL_559;
                  }
                  if (*(_DWORD *)v267)
                    break;
                  if (!*(_BYTE *)(v267 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v267 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  v382 = v281;
                  if (*(_QWORD *)(v267 + 56) != (uint64_t)(*(_QWORD *)(v267 + 40) - *(_QWORD *)(v267 + 32)) >> 4)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v282 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v282 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v284 = qword_255795648;
                      v283 = qword_255795650;
                      while (v284 != v283)
                      {
                        v286 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v284;
                        v285 = *(_QWORD *)(v284 + 8);
                        v284 += 16;
                        v286(v285, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      }
                    }
                    v287 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v287 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v4 = v386;
                    v281 = v382;
                    if (!byte_255795670)
                      goto LABEL_860;
                    result = qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                  }
                  if (*(_BYTE *)(v267 + 80))
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v288 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v290 = qword_255795648;
                      v289 = qword_255795650;
                      while (v290 != v289)
                      {
                        v292 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v290;
                        v291 = *(_QWORD *)(v290 + 8);
                        v290 += 16;
                        v292(v291, "!kpseg_prev.has_value()", 23, "", 0);
                      }
                    }
                    v293 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v281 = v382;
                    if (!byte_255795670)
                      goto LABEL_860;
                    result = qword_255795660(*(_QWORD *)algn_255795668, "!kpseg_prev.has_value()", 23, "", 0);
                  }
LABEL_559:
                  v265 = *(_QWORD *)(*(_QWORD *)(v267 + 8) + 232);
                  v232 = v390;
                  if (v281 >= v265)
                    goto LABEL_473;
                }
                v294 = *(_QWORD *)(*(_QWORD *)(v267 + 72) + 232);
                v232 = v390;
              }
              while (v281 < v294);
LABEL_473:
              if (v4 < v232)
                continue;
              break;
            }
LABEL_641:
            v295 = v4 - 1;
            if (v4 - 1 != v384)
              *v384 = *v295;
            a4 = 0;
            *v295 = v224;
            continue;
          }
          sub_2237D9DB8(&v7[v6 >> 1], v7, v376);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_10;
LABEL_11:
          v17 = 0;
          v18 = v384;
          v19 = *v384;
          v387 = *v384 + 72;
          v392 = *v384 + 8;
          do
          {
            v26 = v18[v17 + 1];
            if (*(_DWORD *)v26 == 1)
            {
              if (!*(_BYTE *)(v26 + 16)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(v26 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(v26 + 25)
                && !*(_BYTE *)(v26 + 80)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_860;
              }
LABEL_35:
              v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 232);
              v28 = *(_DWORD *)v19;
              if (*(_DWORD *)v19 != 1)
                goto LABEL_36;
              goto LABEL_45;
            }
            if (!*(_DWORD *)v26)
            {
              if (!*(_BYTE *)(v26 + 16)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(v26 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)(v26 + 56) != (uint64_t)(*(_QWORD *)(v26 + 40) - *(_QWORD *)(v26 + 32)) >> 4
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(v26 + 80)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_860;
              }
              goto LABEL_35;
            }
            v27 = *(_QWORD *)(*(_QWORD *)(v26 + 72) + 232);
            v28 = *(_DWORD *)v19;
            if (*(_DWORD *)v19 != 1)
            {
LABEL_36:
              v20 = v387;
              if (!v28)
              {
                if (!*(_BYTE *)(v19 + 16)
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(v19 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)(v19 + 56) != (uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 4
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_860;
                }
                v20 = v392;
                if (*(_BYTE *)(v19 + 80))
                {
                  v21 = 77;
                  v22 = "!kpseg_prev.has_value()";
                  v23 = 23;
                  goto LABEL_14;
                }
              }
              goto LABEL_15;
            }
LABEL_45:
            if (!*(_BYTE *)(v19 + 16)
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(v19 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_860;
            }
            v20 = v392;
            if (*(_BYTE *)(v19 + 25))
            {
              v20 = v392;
              if (!*(_BYTE *)(v19 + 80))
              {
                v21 = 88;
                v22 = "!update_state->content_updated || kpseg_prev.has_value()";
                v23 = 56;
LABEL_14:
                v24 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", v21, (uint64_t)v22, v23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v20 = v392;
                if (v24)
                  goto LABEL_860;
              }
            }
LABEL_15:
            ++v17;
            v25 = v27 < *(_QWORD *)(*(_QWORD *)v20 + 232);
            v18 = v384;
          }
          while (v25);
          v29 = &v384[v17];
          v30 = a2;
          if (v17 == 1)
          {
            v30 = a2;
            do
            {
              if (v29 >= v30)
                break;
              v33 = *--v30;
              v34 = *(_QWORD *)(sub_2237D433C(v33) + 232);
            }
            while (v34 >= *(_QWORD *)(sub_2237D433C(v19) + 232));
          }
          else
          {
            do
            {
              v31 = *--v30;
              v32 = *(_QWORD *)(sub_2237D433C(v31) + 232);
            }
            while (v32 >= *(_QWORD *)(sub_2237D433C(v19) + 232));
          }
          v380 = v29;
          v378 = v30;
          if (v29 < v30)
          {
            v35 = v29;
            while (1)
            {
              v36 = *v35;
              *v35 = *v30;
              v388 = v30;
              *v30 = v36;
              do
              {
                v385 = v35;
                v41 = (_DWORD *)v35[1];
                ++v35;
                v40 = v41;
                v42 = *v41;
                if (*v41 != 1)
                {
                  if (v42)
                  {
                    v43 = *(_QWORD *)(*((_QWORD *)v40 + 9) + 232);
                    v44 = *(_DWORD *)v19;
                    if (*(_DWORD *)v19 != 1)
                      goto LABEL_140;
                    goto LABEL_77;
                  }
                  if (*((_BYTE *)v40 + 16))
                  {
                    if (*((_BYTE *)v40 + 26))
                    {
LABEL_69:
                      if (*((_QWORD *)v40 + 7) == (uint64_t)(*((_QWORD *)v40 + 5) - *((_QWORD *)v40 + 4)) >> 4)
                        goto LABEL_70;
LABEL_97:
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      v57 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v58 = qword_255795648;
                        v59 = qword_255795650;
                        while (v58 != v59)
                        {
                          v61 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v58;
                          v60 = *(_QWORD *)(v58 + 8);
                          v58 += 16;
                          v61(v60, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                        }
                      }
                      v62 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_860;
                      qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      if (*((_BYTE *)v40 + 80))
                      {
LABEL_105:
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v63 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v64 = qword_255795648;
                          v65 = qword_255795650;
                          while (v64 != v65)
                          {
                            v67 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v64;
                            v66 = *(_QWORD *)(v64 + 8);
                            v64 += 16;
                            v67(v66, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v68 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        v69 = "!kpseg_prev.has_value()";
                        v70 = 23;
LABEL_138:
                        qword_255795660(*(_QWORD *)algn_255795668, v69, v70, "", 0);
                        goto LABEL_139;
                      }
                      goto LABEL_139;
                    }
                  }
                  else
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v45 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v46 = qword_255795648;
                      v47 = qword_255795650;
                      while (v46 != v47)
                      {
                        v49 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v46;
                        v48 = *(_QWORD *)(v46 + 8);
                        v46 += 16;
                        v49(v48, "kpseg_curr.has_value()", 22, "", 0);
                      }
                    }
                    v50 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                    if (*((_BYTE *)v40 + 26))
                      goto LABEL_69;
                  }
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v51 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v52 = qword_255795648;
                    v53 = qword_255795650;
                    while (v52 != v53)
                    {
                      v55 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v52;
                      v54 = *(_QWORD *)(v52 + 8);
                      v52 += 16;
                      v55(v54, "update_state.has_value()", 24, "", 0);
                    }
                  }
                  v56 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                  if (*((_QWORD *)v40 + 7) == (uint64_t)(*((_QWORD *)v40 + 5) - *((_QWORD *)v40 + 4)) >> 4)
                  {
LABEL_70:
                    if (*((_BYTE *)v40 + 80))
                      goto LABEL_105;
                    goto LABEL_139;
                  }
                  goto LABEL_97;
                }
                if (*((_BYTE *)v40 + 16))
                {
                  if (*((_BYTE *)v40 + 26))
                    goto LABEL_74;
                }
                else
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v71 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v72 = qword_255795648;
                    v73 = qword_255795650;
                    while (v72 != v73)
                    {
                      v75 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v72;
                      v74 = *(_QWORD *)(v72 + 8);
                      v72 += 16;
                      v75(v74, "kpseg_curr.has_value()", 22, "", 0);
                    }
                  }
                  v76 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                  if (*((_BYTE *)v40 + 26))
                  {
LABEL_74:
                    if (*((_BYTE *)v40 + 25))
                      goto LABEL_129;
                    goto LABEL_139;
                  }
                }
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v77 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v78 = qword_255795648;
                  v79 = qword_255795650;
                  while (v78 != v79)
                  {
                    v81 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v78;
                    v80 = *(_QWORD *)(v78 + 8);
                    v78 += 16;
                    v81(v80, "update_state.has_value()", 24, "", 0);
                  }
                }
                v82 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_860;
                qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                if (*((_BYTE *)v40 + 25))
                {
LABEL_129:
                  if (*((_BYTE *)v40 + 80))
                    goto LABEL_139;
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v83 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v84 = qword_255795648;
                    v85 = qword_255795650;
                    while (v84 != v85)
                    {
                      v87 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v84;
                      v86 = *(_QWORD *)(v84 + 8);
                      v84 += 16;
                      v87(v86, "!update_state->content_updated || kpseg_prev.has_value()", 56, "", 0);
                    }
                  }
                  v88 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  v69 = "!update_state->content_updated || kpseg_prev.has_value()";
                  v70 = 56;
                  goto LABEL_138;
                }
LABEL_139:
                v43 = *(_QWORD *)(*((_QWORD *)v40 + 1) + 232);
                v44 = *(_DWORD *)v19;
                if (*(_DWORD *)v19 != 1)
                {
LABEL_140:
                  v39 = v387;
                  if (v44)
                    continue;
                  if (*(_BYTE *)(v19 + 16))
                  {
                    if (*(_BYTE *)(v19 + 26))
                    {
LABEL_143:
                      if (*(_QWORD *)(v19 + 56) == (uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 4)
                        goto LABEL_144;
LABEL_187:
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      v119 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v120 = qword_255795648;
                        v121 = qword_255795650;
                        while (v120 != v121)
                        {
                          v123 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v120;
                          v122 = *(_QWORD *)(v120 + 8);
                          v120 += 16;
                          v123(v122, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                        }
                      }
                      v124 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_860;
                      qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      v39 = v392;
                      if (*(_BYTE *)(v19 + 80))
                      {
LABEL_195:
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v125 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v126 = qword_255795648;
                          v127 = qword_255795650;
                          while (v126 != v127)
                          {
                            v129 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v126;
                            v128 = *(_QWORD *)(v126 + 8);
                            v126 += 16;
                            v129(v128, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v130 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        v37 = "!kpseg_prev.has_value()";
                        v38 = 23;
LABEL_63:
                        qword_255795660(*(_QWORD *)algn_255795668, v37, v38, "", 0);
                        v39 = v392;
                        continue;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v107 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v108 = qword_255795648;
                      v109 = qword_255795650;
                      while (v108 != v109)
                      {
                        v111 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v108;
                        v110 = *(_QWORD *)(v108 + 8);
                        v108 += 16;
                        v111(v110, "kpseg_curr.has_value()", 22, "", 0);
                      }
                    }
                    v112 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                    if (*(_BYTE *)(v19 + 26))
                      goto LABEL_143;
                  }
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v113 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v114 = qword_255795648;
                    v115 = qword_255795650;
                    while (v114 != v115)
                    {
                      v117 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v114;
                      v116 = *(_QWORD *)(v114 + 8);
                      v114 += 16;
                      v117(v116, "update_state.has_value()", 24, "", 0);
                    }
                  }
                  v118 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                  if (*(_QWORD *)(v19 + 56) == (uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 4)
                  {
LABEL_144:
                    v39 = v392;
                    if (*(_BYTE *)(v19 + 80))
                      goto LABEL_195;
                    continue;
                  }
                  goto LABEL_187;
                }
LABEL_77:
                if (*(_BYTE *)(v19 + 16))
                {
                  if (!*(_BYTE *)(v19 + 26))
                    goto LABEL_154;
                }
                else
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v89 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v90 = qword_255795648;
                    v91 = qword_255795650;
                    while (v90 != v91)
                    {
                      v93 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v90;
                      v92 = *(_QWORD *)(v90 + 8);
                      v90 += 16;
                      v93(v92, "kpseg_curr.has_value()", 22, "", 0);
                    }
                  }
                  v94 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                  if (!*(_BYTE *)(v19 + 26))
                  {
LABEL_154:
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v95 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v96 = qword_255795648;
                      v97 = qword_255795650;
                      while (v96 != v97)
                      {
                        v99 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v96;
                        v98 = *(_QWORD *)(v96 + 8);
                        v96 += 16;
                        v99(v98, "update_state.has_value()", 24, "", 0);
                      }
                    }
                    v100 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                    v39 = v392;
                    if (!*(_BYTE *)(v19 + 25))
                      continue;
                    goto LABEL_162;
                  }
                }
                v39 = v392;
                if (!*(_BYTE *)(v19 + 25))
                  continue;
LABEL_162:
                v39 = v392;
                if (!*(_BYTE *)(v19 + 80))
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v101 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v102 = qword_255795648;
                    v103 = qword_255795650;
                    while (v102 != v103)
                    {
                      v105 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v102;
                      v104 = *(_QWORD *)(v102 + 8);
                      v102 += 16;
                      v105(v104, "!update_state->content_updated || kpseg_prev.has_value()", 56, "", 0);
                    }
                  }
                  v106 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  v37 = "!update_state->content_updated || kpseg_prev.has_value()";
                  v38 = 56;
                  goto LABEL_63;
                }
              }
              while (v43 < *(_QWORD *)(*(_QWORD *)v39 + 232));
              do
              {
                v132 = *--v388;
                if (*(_DWORD *)v132 != 1)
                {
                  if (*(_DWORD *)v132)
                  {
                    v133 = *(_QWORD *)(*(_QWORD *)(v132 + 72) + 232);
                    v134 = *(_DWORD *)v19;
                    if (*(_DWORD *)v19 != 1)
                      goto LABEL_336;
                    goto LABEL_273;
                  }
                  if (*(_BYTE *)(v132 + 16))
                  {
                    if (*(_BYTE *)(v132 + 26))
                    {
LABEL_265:
                      if (*(_QWORD *)(v132 + 56) == (uint64_t)(*(_QWORD *)(v132 + 40) - *(_QWORD *)(v132 + 32)) >> 4)
                        goto LABEL_266;
LABEL_293:
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      v147 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v147 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v148 = qword_255795648;
                        v149 = qword_255795650;
                        while (v148 != v149)
                        {
                          v151 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v148;
                          v150 = *(_QWORD *)(v148 + 8);
                          v148 += 16;
                          v151(v150, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                        }
                      }
                      v152 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_860;
                      qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      if (*(_BYTE *)(v132 + 80))
                      {
LABEL_301:
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v153 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v154 = qword_255795648;
                          v155 = qword_255795650;
                          while (v154 != v155)
                          {
                            v157 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v154;
                            v156 = *(_QWORD *)(v154 + 8);
                            v154 += 16;
                            v157(v156, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v158 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        v159 = "!kpseg_prev.has_value()";
                        v160 = 23;
LABEL_334:
                        qword_255795660(*(_QWORD *)algn_255795668, v159, v160, "", 0);
                        goto LABEL_335;
                      }
                      goto LABEL_335;
                    }
                  }
                  else
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v135 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v136 = qword_255795648;
                      v137 = qword_255795650;
                      while (v136 != v137)
                      {
                        v139 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v136;
                        v138 = *(_QWORD *)(v136 + 8);
                        v136 += 16;
                        v139(v138, "kpseg_curr.has_value()", 22, "", 0);
                      }
                    }
                    v140 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                    if (*(_BYTE *)(v132 + 26))
                      goto LABEL_265;
                  }
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v141 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v142 = qword_255795648;
                    v143 = qword_255795650;
                    while (v142 != v143)
                    {
                      v145 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v142;
                      v144 = *(_QWORD *)(v142 + 8);
                      v142 += 16;
                      v145(v144, "update_state.has_value()", 24, "", 0);
                    }
                  }
                  v146 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                  if (*(_QWORD *)(v132 + 56) == (uint64_t)(*(_QWORD *)(v132 + 40) - *(_QWORD *)(v132 + 32)) >> 4)
                  {
LABEL_266:
                    if (*(_BYTE *)(v132 + 80))
                      goto LABEL_301;
                    goto LABEL_335;
                  }
                  goto LABEL_293;
                }
                if (*(_BYTE *)(v132 + 16))
                {
                  if (*(_BYTE *)(v132 + 26))
                    goto LABEL_270;
                }
                else
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v161 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v162 = qword_255795648;
                    v163 = qword_255795650;
                    while (v162 != v163)
                    {
                      v165 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v162;
                      v164 = *(_QWORD *)(v162 + 8);
                      v162 += 16;
                      v165(v164, "kpseg_curr.has_value()", 22, "", 0);
                    }
                  }
                  v166 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                  if (*(_BYTE *)(v132 + 26))
                  {
LABEL_270:
                    if (*(_BYTE *)(v132 + 25))
                      goto LABEL_325;
                    goto LABEL_335;
                  }
                }
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v167 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v168 = qword_255795648;
                  v169 = qword_255795650;
                  while (v168 != v169)
                  {
                    v171 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v168;
                    v170 = *(_QWORD *)(v168 + 8);
                    v168 += 16;
                    v171(v170, "update_state.has_value()", 24, "", 0);
                  }
                }
                v172 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_860;
                qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                if (*(_BYTE *)(v132 + 25))
                {
LABEL_325:
                  if (*(_BYTE *)(v132 + 80))
                    goto LABEL_335;
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v173 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v173 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v174 = qword_255795648;
                    v175 = qword_255795650;
                    while (v174 != v175)
                    {
                      v177 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v174;
                      v176 = *(_QWORD *)(v174 + 8);
                      v174 += 16;
                      v177(v176, "!update_state->content_updated || kpseg_prev.has_value()", 56, "", 0);
                    }
                  }
                  v178 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  v159 = "!update_state->content_updated || kpseg_prev.has_value()";
                  v160 = 56;
                  goto LABEL_334;
                }
LABEL_335:
                v133 = *(_QWORD *)(*(_QWORD *)(v132 + 8) + 232);
                v134 = *(_DWORD *)v19;
                if (*(_DWORD *)v19 != 1)
                {
LABEL_336:
                  v131 = v387;
                  if (v134)
                    continue;
                  if (*(_BYTE *)(v19 + 16))
                  {
                    if (*(_BYTE *)(v19 + 26))
                    {
LABEL_339:
                      if (*(_QWORD *)(v19 + 56) == (uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 4)
                        goto LABEL_340;
LABEL_358:
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      v191 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v192 = qword_255795648;
                        v193 = qword_255795650;
                        while (v192 != v193)
                        {
                          v195 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v192;
                          v194 = *(_QWORD *)(v192 + 8);
                          v192 += 16;
                          v195(v194, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                        }
                      }
                      v196 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_860;
                      qword_255795660(*(_QWORD *)algn_255795668, "plane_changes.Added().size() == plane_changes.All().size()", 58, "", 0);
                      v131 = v392;
                      if (*(_BYTE *)(v19 + 80))
                      {
LABEL_366:
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v197 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v198 = qword_255795648;
                          v199 = qword_255795650;
                          while (v198 != v199)
                          {
                            v201 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v198;
                            v200 = *(_QWORD *)(v198 + 8);
                            v198 += 16;
                            v201(v200, "!kpseg_prev.has_value()", 23, "", 0);
                          }
                        }
                        v202 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          goto LABEL_860;
                        v203 = "!kpseg_prev.has_value()";
                        v204 = 23;
LABEL_259:
                        qword_255795660(*(_QWORD *)algn_255795668, v203, v204, "", 0);
                        v131 = v392;
                        continue;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v179 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v180 = qword_255795648;
                      v181 = qword_255795650;
                      while (v180 != v181)
                      {
                        v183 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v180;
                        v182 = *(_QWORD *)(v180 + 8);
                        v180 += 16;
                        v183(v182, "kpseg_curr.has_value()", 22, "", 0);
                      }
                    }
                    v184 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                    if (*(_BYTE *)(v19 + 26))
                      goto LABEL_339;
                  }
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v185 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v186 = qword_255795648;
                    v187 = qword_255795650;
                    while (v186 != v187)
                    {
                      v189 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v186;
                      v188 = *(_QWORD *)(v186 + 8);
                      v186 += 16;
                      v189(v188, "update_state.has_value()", 24, "", 0);
                    }
                  }
                  v190 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v190 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                  if (*(_QWORD *)(v19 + 56) == (uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 4)
                  {
LABEL_340:
                    v131 = v392;
                    if (*(_BYTE *)(v19 + 80))
                      goto LABEL_366;
                    continue;
                  }
                  goto LABEL_358;
                }
LABEL_273:
                if (*(_BYTE *)(v19 + 16))
                {
                  if (!*(_BYTE *)(v19 + 26))
                    goto LABEL_382;
                }
                else
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v205 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v206 = qword_255795648;
                    v207 = qword_255795650;
                    while (v206 != v207)
                    {
                      v209 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v206;
                      v208 = *(_QWORD *)(v206 + 8);
                      v206 += 16;
                      v209(v208, "kpseg_curr.has_value()", 22, "", 0);
                    }
                  }
                  v210 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v210 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  qword_255795660(*(_QWORD *)algn_255795668, "kpseg_curr.has_value()", 22, "", 0);
                  if (!*(_BYTE *)(v19 + 26))
                  {
LABEL_382:
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v211 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v211 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v212 = qword_255795648;
                      v213 = qword_255795650;
                      while (v212 != v213)
                      {
                        v215 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v212;
                        v214 = *(_QWORD *)(v212 + 8);
                        v212 += 16;
                        v215(v214, "update_state.has_value()", 24, "", 0);
                      }
                    }
                    v216 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v216 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_860;
                    qword_255795660(*(_QWORD *)algn_255795668, "update_state.has_value()", 24, "", 0);
                    v131 = v392;
                    if (!*(_BYTE *)(v19 + 25))
                      continue;
                    goto LABEL_390;
                  }
                }
                v131 = v392;
                if (!*(_BYTE *)(v19 + 25))
                  continue;
LABEL_390:
                v131 = v392;
                if (!*(_BYTE *)(v19 + 80))
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v217 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v218 = qword_255795648;
                    v219 = qword_255795650;
                    while (v218 != v219)
                    {
                      v221 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v218;
                      v220 = *(_QWORD *)(v218 + 8);
                      v218 += 16;
                      v221(v220, "!update_state->content_updated || kpseg_prev.has_value()", 56, "", 0);
                    }
                  }
                  v222 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v222 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_860;
                  v203 = "!update_state->content_updated || kpseg_prev.has_value()";
                  v204 = 56;
                  goto LABEL_259;
                }
              }
              while (v133 >= *(_QWORD *)(*(_QWORD *)v131 + 232));
              v30 = v388;
              if (v35 >= v388)
                goto LABEL_456;
            }
          }
          v385 = v29 - 1;
LABEL_456:
          result = (uint64_t)v384;
          if (v385 != v384)
          {
            *v384 = *v385;
            result = (uint64_t)v384;
          }
          *v385 = v19;
          if (v380 < v378)
          {
LABEL_461:
            result = sub_2237D4FD4(result, v385, a3, a4 & 1);
            a4 = 0;
            v4 = v385 + 1;
            continue;
          }
          v223 = sub_2237D9F04((uint64_t *)result, v385);
          v4 = v385 + 1;
          result = sub_2237D9F04(v385 + 1, a2);
          if (!(_DWORD)result)
          {
            result = (uint64_t)v384;
            if (!v223)
              goto LABEL_461;
            continue;
          }
          a2 = v385;
          if (v223)
            return result;
          goto LABEL_2;
        }
        v299 = v4 + 1;
        v300 = v4 == a2 || v299 == a2;
        v301 = v300;
        if ((a4 & 1) == 0)
        {
          if ((v301 & 1) != 0)
            return result;
LABEL_819:
          v365 = *v384;
          v366 = *(_QWORD *)(sub_2237D433C(v384[1]) + 232);
          result = sub_2237D433C(v365);
          v384 = v299;
          if (v366 >= *(_QWORD *)(result + 232))
            goto LABEL_818;
          v367 = *v299;
          v368 = *v299 + 72;
          v369 = *v299 + 8;
          while (1)
          {
            while (1)
            {
              v370 = *(v299 - 2);
              *v299 = *(v299 - 1);
              if (*(_DWORD *)v367 == 1)
              {
                if (!*(_BYTE *)(v367 + 16)
                  && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C), (_DWORD)result)|| !*(_BYTE *)(v367 + 26)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C),
                      (_DWORD)result)
                  || (v371 = v369, *(_BYTE *)(v367 + 25))
                  && (v371 = v369, !*(_BYTE *)(v367 + 80))
                  && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C), v371 = v369, (_DWORD)result))
                {
LABEL_860:
                  abort();
                }
              }
              else
              {
                v371 = v368;
                if (!*(_DWORD *)v367)
                {
                  if (!*(_BYTE *)(v367 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v367 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_QWORD *)(v367 + 56) != (uint64_t)(*(_QWORD *)(v367 + 40) - *(_QWORD *)(v367 + 32)) >> 4)
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  v371 = v369;
                  if (*(_BYTE *)(v367 + 80))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v371 = v369;
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                }
              }
              v372 = *(_QWORD *)(*(_QWORD *)v371 + 232);
              if (*(_DWORD *)v370 != 1)
                break;
              if (!*(_BYTE *)(v370 + 16))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (!*(_BYTE *)(v370 + 26))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_BYTE *)(v370 + 25) && !*(_BYTE *)(v370 + 80))
              {
                v373 = 88;
                v374 = "!update_state->content_updated || kpseg_prev.has_value()";
                v375 = 56;
LABEL_821:
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", v373, (uint64_t)v374, v375, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
LABEL_822:
              --v299;
              if (v372 >= *(_QWORD *)(*(_QWORD *)(v370 + 8) + 232))
                goto LABEL_817;
            }
            if (!*(_DWORD *)v370)
            {
              if (!*(_BYTE *)(v370 + 16))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (!*(_BYTE *)(v370 + 26))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_QWORD *)(v370 + 56) != (uint64_t)(*(_QWORD *)(v370 + 40) - *(_QWORD *)(v370 + 32)) >> 4)
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_BYTE *)(v370 + 80))
              {
                v373 = 77;
                v374 = "!kpseg_prev.has_value()";
                v375 = 23;
                goto LABEL_821;
              }
              goto LABEL_822;
            }
            --v299;
            if (v372 >= *(_QWORD *)(*(_QWORD *)(v370 + 72) + 232))
            {
LABEL_817:
              *v299 = v367;
              v299 = v384;
LABEL_818:
              if (++v299 == a2)
                return result;
              goto LABEL_819;
            }
          }
        }
        if ((v301 & 1) != 0)
          return result;
        v302 = 0;
        v303 = v4;
        while (2)
        {
          v306 = *v303;
          v305 = v303[1];
          v303 = v299;
          v307 = *(_QWORD *)(sub_2237D433C(v305) + 232);
          result = sub_2237D433C(v306);
          if (v307 >= *(_QWORD *)(result + 232))
            goto LABEL_663;
          v393 = v299;
          v308 = *v299;
          v309 = *v299 + 72;
          v310 = *v303 + 8;
          v311 = v302;
          do
          {
            while (1)
            {
              *(uint64_t *)((char *)v384 + v311 + 8) = *(uint64_t *)((char *)v384 + v311);
              if (!v311)
              {
                v304 = v384;
                goto LABEL_662;
              }
              v312 = *(uint64_t *)((char *)v384 + v311 - 8);
              if (*(_DWORD *)v308 == 1)
              {
                if (!*(_BYTE *)(v308 + 16))
                {
                  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  if ((_DWORD)result)
                    goto LABEL_860;
                }
                if (!*(_BYTE *)(v308 + 26))
                {
                  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  if ((_DWORD)result)
                    goto LABEL_860;
                }
                v313 = v310;
                if (*(_BYTE *)(v308 + 25))
                {
                  v313 = v310;
                  if (!*(_BYTE *)(v308 + 80))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 88, (uint64_t)"!update_state->content_updated || kpseg_prev.has_value()", 56, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v313 = v310;
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                }
              }
              else
              {
                v313 = v309;
                if (!*(_DWORD *)v308)
                {
                  if (!*(_BYTE *)(v308 + 16))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (!*(_BYTE *)(v308 + 26))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  if (*(_QWORD *)(v308 + 56) != (uint64_t)(*(_QWORD *)(v308 + 40) - *(_QWORD *)(v308 + 32)) >> 4)
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                  v313 = v310;
                  if (*(_BYTE *)(v308 + 80))
                  {
                    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v313 = v310;
                    if ((_DWORD)result)
                      goto LABEL_860;
                  }
                }
              }
              v314 = *(_QWORD *)(*(_QWORD *)v313 + 232);
              if (*(_DWORD *)v312 != 1)
                break;
              if (!*(_BYTE *)(v312 + 16))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (!*(_BYTE *)(v312 + 26))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_BYTE *)(v312 + 25) && !*(_BYTE *)(v312 + 80))
              {
                v315 = 88;
                v316 = "!update_state->content_updated || kpseg_prev.has_value()";
                v317 = 56;
LABEL_666:
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", v315, (uint64_t)v316, v317, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
LABEL_667:
              v311 -= 8;
              if (v314 >= *(_QWORD *)(*(_QWORD *)(v312 + 8) + 232))
                goto LABEL_705;
            }
            if (!*(_DWORD *)v312)
            {
              if (!*(_BYTE *)(v312 + 16))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (!*(_BYTE *)(v312 + 26))
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_QWORD *)(v312 + 56) != (uint64_t)(*(_QWORD *)(v312 + 40) - *(_QWORD *)(v312 + 32)) >> 4)
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  goto LABEL_860;
              }
              if (*(_BYTE *)(v312 + 80))
              {
                v315 = 77;
                v316 = "!kpseg_prev.has_value()";
                v317 = 23;
                goto LABEL_666;
              }
              goto LABEL_667;
            }
            v311 -= 8;
          }
          while (v314 < *(_QWORD *)(*(_QWORD *)(v312 + 72) + 232));
LABEL_705:
          v304 = (uint64_t *)((char *)v384 + v311 + 8);
LABEL_662:
          *v304 = v308;
          v303 = v393;
LABEL_663:
          v299 = v303 + 1;
          v302 += 8;
          if (v303 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t sub_2237D9CA0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_2237DA0DC(a1, a2, a3, a4);
  v10 = *a4;
  v11 = *(_QWORD *)(sub_2237D433C(*a5) + 232);
  result = sub_2237D433C(v10);
  if (v11 < *(_QWORD *)(result + 232))
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = *a3;
    v15 = *(_QWORD *)(sub_2237D433C(*a4) + 232);
    result = sub_2237D433C(v14);
    if (v15 < *(_QWORD *)(result + 232))
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      v18 = *(_QWORD *)(sub_2237D433C(*a3) + 232);
      result = sub_2237D433C(v17);
      if (v18 < *(_QWORD *)(result + 232))
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = *a1;
        v21 = *(_QWORD *)(sub_2237D433C(*a2) + 232);
        result = sub_2237D433C(v20);
        if (v21 < *(_QWORD *)(result + 232))
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2237D9DB8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  v7 = *(_QWORD *)(sub_2237D433C(*a2) + 232);
  v8 = *(_QWORD *)(sub_2237D433C(v6) + 232);
  v9 = *a2;
  v10 = *(_QWORD *)(sub_2237D433C(*a3) + 232);
  result = sub_2237D433C(v9);
  v12 = *(_QWORD *)(result + 232);
  if (v7 >= v8)
  {
    if (v10 < v12)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *a1;
      v16 = *(_QWORD *)(sub_2237D433C(*a2) + 232);
      result = sub_2237D433C(v15);
      if (v16 < *(_QWORD *)(result + 232))
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  else
  {
    v13 = *a1;
    if (v10 >= v12)
    {
      *a1 = *a2;
      *a2 = v13;
      v18 = *(_QWORD *)(sub_2237D433C(*a3) + 232);
      result = sub_2237D433C(v13);
      if (v18 < *(_QWORD *)(result + 232))
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v13;
    }
  }
  return result;
}

BOOL sub_2237D9F04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(_QWORD *)(sub_2237D433C(*(a2 - 1)) + 232);
      if (v7 < *(_QWORD *)(sub_2237D433C(v6) + 232))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_2237D9DB8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_2237DA0DC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_2237D9CA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      sub_2237D9DB8(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    v14 = *(_QWORD *)(sub_2237D433C(*v10) + 232);
    if (v14 < *(_QWORD *)(sub_2237D433C(v13) + 232))
      break;
LABEL_13:
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
  v15 = *v10;
  v16 = v11;
  do
  {
    *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
    if (v16 == -16)
    {
      *a1 = v15;
      if (++v12 != 8)
        goto LABEL_13;
      return v10 + 1 == a2;
    }
    v17 = *(uint64_t *)((char *)a1 + v16 + 8);
    v18 = *(_QWORD *)(sub_2237D433C(v15) + 232);
    v16 -= 8;
  }
  while (v18 < *(_QWORD *)(sub_2237D433C(v17) + 232));
  *(uint64_t *)((char *)a1 + v16 + 24) = v15;
  if (++v12 != 8)
    goto LABEL_13;
  return v10 + 1 == a2;
}

uint64_t sub_2237DA0DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_2237D9DB8(a1, a2, a3);
  v8 = *a3;
  v9 = *(_QWORD *)(sub_2237D433C(*a4) + 232);
  result = sub_2237D433C(v8);
  if (v9 < *(_QWORD *)(result + 232))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = *a2;
    v13 = *(_QWORD *)(sub_2237D433C(*a3) + 232);
    result = sub_2237D433C(v12);
    if (v13 < *(_QWORD *)(result + 232))
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *a1;
      v16 = *(_QWORD *)(sub_2237D433C(*a2) + 232);
      result = sub_2237D433C(v15);
      if (v16 < *(_QWORD *)(result + 232))
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_2237DA1B4(int *a1)
{
  int v1;

  v1 = *a1;
  if (!*a1
    && (!*((_BYTE *)a1 + 16)
     && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 74, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)a1 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 75, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *((_QWORD *)a1 + 7) != (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4
     && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 76, (uint64_t)"plane_changes.Added().size() == plane_changes.All().size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *((_BYTE *)a1 + 80)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 77, (uint64_t)"!kpseg_prev.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
  {
    abort();
  }
  return v1 == 0;
}

BOOL sub_2237DA2E0(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == 2
    && (*((_BYTE *)a1 + 16)
     && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 97, (uint64_t)"!kpseg_curr.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *((_BYTE *)a1 + 26)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 98, (uint64_t)"!update_state.has_value()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *((_QWORD *)a1 + 8)
     && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 99, (uint64_t)"plane_changes.Removed().size() == plane_changes.All().size()", 60, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*((_BYTE *)a1 + 80)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 100, (uint64_t)"kpseg_prev.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
  {
    abort();
  }
  return v1 == 2;
}

uint64_t *sub_2237DA404(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  BOOL v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  BOOL v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v75 = *(a2 - 1);
        v76 = *v8;
        if (*(_QWORD *)(v75 + 232) < *(_QWORD *)(*v8 + 232))
        {
          *v8 = v75;
          *(a2 - 1) = v76;
        }
        return result;
      case 3:
        v77 = *v8;
        v78 = v8[1];
        v79 = *(_QWORD *)(v78 + 232);
        v80 = *(a2 - 1);
        v81 = *(_QWORD *)(v80 + 232);
        if (v79 >= *(_QWORD *)(*v8 + 232))
        {
          if (v81 < v79)
          {
            v8[1] = v80;
            *(a2 - 1) = v78;
            v122 = *v8;
            v121 = v8[1];
            if (*(_QWORD *)(v121 + 232) < *(_QWORD *)(*v8 + 232))
            {
              *v8 = v121;
              v8[1] = v122;
            }
          }
        }
        else
        {
          if (v81 >= v79)
          {
            *v8 = v78;
            v8[1] = v77;
            v126 = *(a2 - 1);
            if (*(_QWORD *)(v126 + 232) >= *(_QWORD *)(v77 + 232))
              return result;
            v8[1] = v126;
          }
          else
          {
            *v8 = v80;
          }
          *(a2 - 1) = v77;
        }
        return result;
      case 4:
        v82 = v8 + 1;
        v83 = v8[1];
        v84 = v8 + 2;
        v85 = v8[2];
        v86 = *v8;
        v87 = *(_QWORD *)(v83 + 232);
        v88 = *(_QWORD *)(v85 + 232);
        if (v87 >= *(_QWORD *)(*v8 + 232))
        {
          if (v88 >= v87)
            goto LABEL_176;
          *v82 = v85;
          *v84 = v83;
          if (*(_QWORD *)(v85 + 232) >= *(_QWORD *)(v86 + 232))
          {
LABEL_175:
            v85 = v83;
LABEL_176:
            v127 = *(a2 - 1);
            if (*(_QWORD *)(v127 + 232) < *(_QWORD *)(v85 + 232))
            {
              *v84 = v127;
              *(a2 - 1) = v85;
              v128 = *v84;
              v129 = *v82;
              if (*(_QWORD *)(v128 + 232) < *(_QWORD *)(v129 + 232))
              {
                v8[1] = v128;
                v8[2] = v129;
                v130 = *v8;
                if (*(_QWORD *)(v128 + 232) < *(_QWORD *)(*v8 + 232))
                {
                  *v8 = v128;
                  v8[1] = v130;
                }
              }
            }
            return result;
          }
          *v8 = v85;
          v123 = v8 + 1;
        }
        else
        {
          if (v88 >= v87)
          {
            *v8 = v83;
            v8[1] = v86;
            if (*(_QWORD *)(v85 + 232) >= *(_QWORD *)(v86 + 232))
              goto LABEL_176;
            *v82 = v85;
          }
          else
          {
            *v8 = v85;
          }
          v123 = v8 + 2;
          v83 = v86;
        }
        *v123 = v86;
        goto LABEL_175;
      case 5:
        return sub_2237DAE6C(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v89 = v8 + 1;
          v91 = v8 == a2 || v89 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v91)
            {
              v92 = 0;
              v93 = v8;
              do
              {
                v96 = *v93;
                v95 = v93[1];
                v93 = v89;
                if (*(_QWORD *)(v95 + 232) < *(_QWORD *)(v96 + 232))
                {
                  v97 = v92;
                  do
                  {
                    *(uint64_t *)((char *)v8 + v97 + 8) = v96;
                    if (!v97)
                    {
                      v94 = v8;
                      goto LABEL_118;
                    }
                    v96 = *(uint64_t *)((char *)v8 + v97 - 8);
                    v97 -= 8;
                  }
                  while (*(_QWORD *)(v95 + 232) < *(_QWORD *)(v96 + 232));
                  v94 = (uint64_t *)((char *)v8 + v97 + 8);
LABEL_118:
                  *v94 = v95;
                }
                v89 = v93 + 1;
                v92 += 8;
              }
              while (v93 + 1 != a2);
            }
          }
          else if (!v91)
          {
            do
            {
              v125 = *v7;
              v124 = v7[1];
              v7 = v89;
              if (*(_QWORD *)(v124 + 232) < *(_QWORD *)(v125 + 232))
              {
                do
                {
                  *v89 = v125;
                  v125 = *(v89 - 2);
                  --v89;
                }
                while (*(_QWORD *)(v124 + 232) < *(_QWORD *)(v125 + 232));
                *v89 = v124;
              }
              v89 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v98 = (unint64_t)(v10 - 2) >> 1;
            v99 = v98;
            do
            {
              if (v98 >= v99)
              {
                v101 = (2 * v99) | 1;
                v102 = &v8[v101];
                v103 = *v102;
                if (2 * v99 + 2 < v10)
                {
                  result = *(uint64_t **)(v103 + 232);
                  if ((uint64_t)result < *(_QWORD *)(v102[1] + 232))
                  {
                    v103 = v102[1];
                    ++v102;
                    v101 = 2 * v99 + 2;
                  }
                }
                v104 = &v8[v99];
                v105 = *v104;
                if (*(_QWORD *)(v103 + 232) >= *(_QWORD *)(*v104 + 232))
                {
                  v106 = *v102;
                  do
                  {
                    *v104 = v106;
                    v104 = v102;
                    if (v98 < v101)
                      break;
                    v107 = (2 * v101) | 1;
                    v102 = &v8[v107];
                    v108 = 2 * v101 + 2;
                    v106 = *v102;
                    if (v108 < v10 && *(_QWORD *)(v106 + 232) < *(_QWORD *)(v102[1] + 232))
                    {
                      v106 = v102[1];
                      ++v102;
                      v107 = v108;
                    }
                    result = *(uint64_t **)(v106 + 232);
                    v101 = v107;
                  }
                  while ((uint64_t)result >= *(_QWORD *)(v105 + 232));
                  *v104 = v105;
                }
              }
              v100 = v99-- <= 0;
            }
            while (!v100);
            v109 = (unint64_t)v9 >> 3;
            do
            {
              v110 = 0;
              v111 = *v8;
              v112 = v8;
              do
              {
                v113 = &v112[v110 + 1];
                v114 = (2 * v110) | 1;
                v115 = 2 * v110 + 2;
                if (v115 < v109 && *(_QWORD *)(*v113 + 232) < *(_QWORD *)(v113[1] + 232))
                {
                  ++v113;
                  v114 = v115;
                }
                *v112 = *v113;
                v112 = v113;
                v110 = v114;
              }
              while (v114 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
              if (v113 == --a2)
              {
                *v113 = v111;
              }
              else
              {
                *v113 = *a2;
                *a2 = v111;
                v116 = (char *)v113 - (char *)v8 + 8;
                if (v116 >= 9)
                {
                  v117 = (((unint64_t)v116 >> 3) - 2) >> 1;
                  v118 = &v8[v117];
                  v119 = *v118;
                  v120 = *v113;
                  if (*(_QWORD *)(*v118 + 232) < *(_QWORD *)(*v113 + 232))
                  {
                    do
                    {
                      *v113 = v119;
                      v113 = v118;
                      if (!v117)
                        break;
                      v117 = (v117 - 1) >> 1;
                      v118 = &v8[v117];
                      v119 = *v118;
                    }
                    while (*(_QWORD *)(*v118 + 232) < *(_QWORD *)(v120 + 232));
                    *v113 = v120;
                  }
                }
              }
              v100 = v109-- <= 2;
            }
            while (!v100);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = *(a2 - 1);
        v13 = *(_QWORD *)(v12 + 232);
        if ((unint64_t)v9 < 0x401)
        {
          v17 = *v8;
          v18 = v8[v11];
          v19 = *(_QWORD *)(*v8 + 232);
          if (v19 >= *(_QWORD *)(v18 + 232))
          {
            if (v13 < v19)
            {
              *v8 = v12;
              *(a2 - 1) = v17;
              v22 = v8[v11];
              if (*(_QWORD *)(*v8 + 232) < *(_QWORD *)(v22 + 232))
              {
                v8[v11] = *v8;
                *v8 = v22;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
          }
          else
          {
            if (v13 >= v19)
            {
              v8[v11] = v17;
              *v8 = v18;
              v32 = *(a2 - 1);
              if (*(_QWORD *)(v32 + 232) >= *(_QWORD *)(v18 + 232))
                goto LABEL_32;
              *v8 = v32;
            }
            else
            {
              v8[v11] = v12;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_55:
          v33 = *v8;
          v34 = *(_QWORD *)(*v8 + 232);
          if (*(_QWORD *)(*(v8 - 1) + 232) < v34)
            goto LABEL_56;
          if (v34 >= *(_QWORD *)(*(a2 - 1) + 232))
          {
            v66 = v8 + 1;
            do
            {
              v8 = v66;
              if (v66 >= a2)
                break;
              ++v66;
            }
            while (v34 >= *(_QWORD *)(*v8 + 232));
          }
          else
          {
            do
            {
              v65 = v8[1];
              ++v8;
            }
            while (v34 >= *(_QWORD *)(v65 + 232));
          }
          v67 = a2;
          if (v8 < a2)
          {
            v67 = a2;
            do
              v68 = *--v67;
            while (v34 < *(_QWORD *)(v68 + 232));
          }
          if (v8 < v67)
          {
            v69 = *v8;
            v70 = *v67;
            do
            {
              *v8 = v70;
              *v67 = v69;
              v71 = *(_QWORD *)(v33 + 232);
              do
              {
                v72 = v8[1];
                ++v8;
                v69 = v72;
              }
              while (v71 >= *(_QWORD *)(v72 + 232));
              do
              {
                v73 = *--v67;
                v70 = v73;
              }
              while (v71 < *(_QWORD *)(v73 + 232));
            }
            while (v8 < v67);
          }
          v74 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v74;
          a4 = 0;
          *v74 = v33;
          continue;
        }
        v14 = v8[v11];
        v15 = *v8;
        v16 = *(_QWORD *)(v14 + 232);
        if (v16 >= *(_QWORD *)(*v8 + 232))
        {
          if (v13 < v16)
          {
            v8[v11] = v12;
            *(a2 - 1) = v14;
            v20 = v8[v11];
            v21 = *v8;
            if (*(_QWORD *)(v20 + 232) < *(_QWORD *)(*v8 + 232))
            {
              *v8 = v20;
              v8[v11] = v21;
            }
          }
        }
        else
        {
          if (v13 < v16)
          {
            *v8 = v12;
            goto LABEL_22;
          }
          *v8 = v14;
          v8[v11] = v15;
          v23 = *(a2 - 1);
          if (*(_QWORD *)(v23 + 232) < *(_QWORD *)(v15 + 232))
          {
            v8[v11] = v23;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v24 = v11 - 1;
        v25 = v8[v11 - 1];
        v26 = v8[1];
        v27 = *(_QWORD *)(v25 + 232);
        v28 = *(a2 - 2);
        v29 = *(_QWORD *)(v28 + 232);
        if (v27 >= *(_QWORD *)(v26 + 232))
        {
          if (v29 < v27)
          {
            v8[v24] = v28;
            *(a2 - 2) = v25;
            v30 = v8[v24];
            v31 = v8[1];
            if (*(_QWORD *)(v30 + 232) < *(_QWORD *)(v31 + 232))
            {
              v8[1] = v30;
              v8[v24] = v31;
            }
          }
        }
        else
        {
          if (v29 < v27)
          {
            v8[1] = v28;
            goto LABEL_36;
          }
          v8[1] = v25;
          v8[v24] = v26;
          v35 = *(a2 - 2);
          if (*(_QWORD *)(v35 + 232) < *(_QWORD *)(v26 + 232))
          {
            v8[v24] = v35;
LABEL_36:
            *(a2 - 2) = v26;
          }
        }
        v36 = v11 + 1;
        v37 = v8[v11 + 1];
        v38 = v8[2];
        v39 = *(_QWORD *)(v37 + 232);
        v40 = *(a2 - 3);
        v41 = *(_QWORD *)(v40 + 232);
        if (v39 >= *(_QWORD *)(v38 + 232))
        {
          if (v41 < v39)
          {
            v8[v36] = v40;
            *(a2 - 3) = v37;
            v42 = v8[v36];
            v43 = v8[2];
            if (*(_QWORD *)(v42 + 232) < *(_QWORD *)(v43 + 232))
            {
              v8[2] = v42;
              v8[v36] = v43;
            }
          }
        }
        else
        {
          if (v41 < v39)
          {
            v8[2] = v40;
            goto LABEL_45;
          }
          v8[2] = v37;
          v8[v36] = v38;
          v44 = *(a2 - 3);
          if (*(_QWORD *)(v44 + 232) < *(_QWORD *)(v38 + 232))
          {
            v8[v36] = v44;
LABEL_45:
            *(a2 - 3) = v38;
          }
        }
        v45 = v8[v11];
        v46 = v8[v24];
        v47 = *(_QWORD *)(v45 + 232);
        v48 = v8[v36];
        v49 = *(_QWORD *)(v48 + 232);
        if (v47 >= *(_QWORD *)(v46 + 232))
        {
          if (v49 < v47)
          {
            v8[v11] = v48;
            v8[v36] = v45;
            v45 = v48;
            if (*(_QWORD *)(v48 + 232) < *(_QWORD *)(v46 + 232))
            {
              v8[v24] = v48;
              v8[v11] = v46;
              v45 = v46;
            }
          }
        }
        else if (v49 >= v47)
        {
          v8[v24] = v45;
          v8[v11] = v46;
          v45 = v46;
          if (*(_QWORD *)(v48 + 232) < *(_QWORD *)(v46 + 232))
          {
            v8[v11] = v48;
            v8[v36] = v46;
            v45 = v48;
          }
        }
        else
        {
          v8[v24] = v48;
          v8[v36] = v46;
        }
        v50 = *v8;
        *v8 = v45;
        v8[v11] = v50;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_55;
LABEL_33:
        v33 = *v8;
        v34 = *(_QWORD *)(*v8 + 232);
LABEL_56:
        v51 = 0;
        do
          v52 = v8[++v51];
        while (*(_QWORD *)(v52 + 232) < v34);
        v53 = &v8[v51];
        v54 = a2;
        if (v51 == 1)
        {
          v54 = a2;
          do
          {
            if (v53 >= v54)
              break;
            v56 = *--v54;
          }
          while (*(_QWORD *)(v56 + 232) >= v34);
        }
        else
        {
          do
            v55 = *--v54;
          while (*(_QWORD *)(v55 + 232) >= v34);
        }
        if (v53 >= v54)
        {
          v63 = v53 - 1;
          if (v53 - 1 == v8)
            goto LABEL_74;
LABEL_73:
          *v8 = *v63;
          goto LABEL_74;
        }
        v57 = *v54;
        v58 = &v8[v51];
        v59 = v54;
        do
        {
          *v58 = v57;
          *v59 = v52;
          v60 = *(_QWORD *)(v33 + 232);
          do
          {
            v61 = v58[1];
            ++v58;
            v52 = v61;
          }
          while (*(_QWORD *)(v61 + 232) < v60);
          do
          {
            v62 = *--v59;
            v57 = v62;
          }
          while (*(_QWORD *)(v62 + 232) >= v60);
        }
        while (v58 < v59);
        v63 = v58 - 1;
        if (v58 - 1 != v8)
          goto LABEL_73;
LABEL_74:
        *v63 = v33;
        if (v53 < v54)
        {
LABEL_77:
          result = (uint64_t *)sub_2237DA404(v7, v63, a3, a4 & 1);
          a4 = 0;
          v8 = v63 + 1;
          continue;
        }
        v64 = sub_2237DB00C(v8, v63);
        v8 = v63 + 1;
        result = (uint64_t *)sub_2237DB00C(v63 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v64)
            continue;
          goto LABEL_77;
        }
        a2 = v63;
        if (!v64)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_2237DAE6C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_QWORD *)(*a2 + 232);
  v8 = *a3;
  v9 = *(_QWORD *)(*a3 + 232);
  if (v7 >= *(_QWORD *)(*result + 232))
  {
    if (v9 >= v7)
    {
      v5 = *a3;
      v11 = *a4;
      if (*(_QWORD *)(*a4 + 232) >= *(_QWORD *)(*a3 + 232))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v8;
    *a3 = v5;
    v10 = *result;
    if (*(_QWORD *)(*a2 + 232) < *(_QWORD *)(*result + 232))
    {
      *result = *a2;
      *a2 = v10;
      v5 = *a3;
      v11 = *a4;
      if (*(_QWORD *)(*a4 + 232) >= *(_QWORD *)(*a3 + 232))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v9 >= v7)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*(_QWORD *)(*a3 + 232) >= *(_QWORD *)(v6 + 232))
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v8;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v11 = *a4;
  if (*(_QWORD *)(*a4 + 232) >= *(_QWORD *)(v5 + 232))
    goto LABEL_17;
LABEL_14:
  *a3 = v11;
  *a4 = v5;
  v12 = *a2;
  if (*(_QWORD *)(*a3 + 232) < *(_QWORD *)(*a2 + 232))
  {
    *a2 = *a3;
    *a3 = v12;
    v13 = *result;
    if (*(_QWORD *)(*a2 + 232) < *(_QWORD *)(*result + 232))
    {
      *result = *a2;
      *a2 = v13;
    }
  }
LABEL_17:
  v14 = *a4;
  if (*(_QWORD *)(*a5 + 232) < *(_QWORD *)(*a4 + 232))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_QWORD *)(*a4 + 232) < *(_QWORD *)(*a3 + 232))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(*a3 + 232) < *(_QWORD *)(*a2 + 232))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_QWORD *)(*a2 + 232) < *(_QWORD *)(*result + 232))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL sub_2237DB00C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v10 = *(a2 - 1);
      v11 = *a1;
      if (*(_QWORD *)(v10 + 232) < *(_QWORD *)(*a1 + 232))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      v12 = *a1;
      v13 = a1[1];
      v14 = *(_QWORD *)(v13 + 232);
      v15 = *(a2 - 1);
      v16 = *(_QWORD *)(v15 + 232);
      if (v14 >= *(_QWORD *)(*a1 + 232))
      {
        if (v16 < v14)
        {
          a1[1] = v15;
          *(a2 - 1) = v13;
          v25 = *a1;
          v24 = a1[1];
          if (*(_QWORD *)(v24 + 232) < *(_QWORD *)(*a1 + 232))
          {
            *a1 = v24;
            a1[1] = v25;
            return 1;
          }
        }
      }
      else
      {
        if (v16 < v14)
        {
          *a1 = v15;
          *(a2 - 1) = v12;
          return 1;
        }
        *a1 = v13;
        a1[1] = v12;
        v33 = *(a2 - 1);
        if (*(_QWORD *)(v33 + 232) < *(_QWORD *)(v12 + 232))
        {
          a1[1] = v33;
          *(a2 - 1) = v12;
          return 1;
        }
      }
      return 1;
    case 4:
      v17 = a1 + 1;
      v18 = a1[1];
      v19 = a1 + 2;
      v20 = a1[2];
      v21 = *a1;
      v22 = *(_QWORD *)(v18 + 232);
      v23 = *(_QWORD *)(v20 + 232);
      if (v22 < *(_QWORD *)(*a1 + 232))
      {
        if (v23 >= v22)
        {
          *a1 = v18;
          a1[1] = v21;
          if (*(_QWORD *)(v20 + 232) >= *(_QWORD *)(v21 + 232))
            goto LABEL_47;
          *v17 = v20;
        }
        else
        {
          *a1 = v20;
        }
        v26 = a1 + 2;
        v18 = v21;
        goto LABEL_45;
      }
      if (v23 >= v22)
        goto LABEL_47;
      *v17 = v20;
      *v19 = v18;
      if (*(_QWORD *)(v20 + 232) < *(_QWORD *)(v21 + 232))
      {
        *a1 = v20;
        v26 = a1 + 1;
LABEL_45:
        *v26 = v21;
      }
      v20 = v18;
LABEL_47:
      v34 = *(a2 - 1);
      if (*(_QWORD *)(v34 + 232) >= *(_QWORD *)(v20 + 232))
        return 1;
      *v19 = v34;
      *(a2 - 1) = v20;
      v35 = *v19;
      v36 = *v17;
      if (*(_QWORD *)(v35 + 232) >= *(_QWORD *)(v36 + 232))
        return 1;
      a1[1] = v35;
      a1[2] = v36;
      v37 = *a1;
      if (*(_QWORD *)(v35 + 232) >= *(_QWORD *)(*a1 + 232))
        return 1;
      *a1 = v35;
      a1[1] = v37;
      return 1;
    case 5:
      sub_2237DAE6C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v3 = a1 + 2;
      v4 = a1[2];
      v5 = a1 + 1;
      v6 = a1[1];
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 232);
      v9 = *(_QWORD *)(v4 + 232);
      if (v8 < *(_QWORD *)(*a1 + 232))
      {
        if (v9 >= v8)
        {
          *a1 = v6;
          a1[1] = v7;
          if (*(_QWORD *)(v4 + 232) >= *(_QWORD *)(v7 + 232))
            goto LABEL_29;
          *v5 = v4;
        }
        else
        {
          *a1 = v4;
        }
        v5 = a1 + 2;
        goto LABEL_28;
      }
      if (v9 < v8)
      {
        *v5 = v4;
        *v3 = v6;
        if (*(_QWORD *)(v4 + 232) < *(_QWORD *)(v7 + 232))
        {
          *a1 = v4;
LABEL_28:
          *v5 = v7;
        }
      }
LABEL_29:
      v27 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = *v27;
        v31 = *v3;
        if (*(_QWORD *)(*v27 + 232) < *(_QWORD *)(v31 + 232))
          break;
LABEL_38:
        v3 = v27;
        v28 += 8;
        if (++v27 == a2)
          return 1;
      }
      v32 = v28;
      do
      {
        *(uint64_t *)((char *)a1 + v32 + 24) = v31;
        if (v32 == -16)
        {
          *a1 = v30;
          if (++v29 != 8)
            goto LABEL_38;
          return v27 + 1 == a2;
        }
        v31 = *(uint64_t *)((char *)a1 + v32 + 8);
        v32 -= 8;
      }
      while (*(_QWORD *)(v30 + 232) < *(_QWORD *)(v31 + 232));
      *(uint64_t *)((char *)a1 + v32 + 24) = v30;
      if (++v29 != 8)
        goto LABEL_38;
      return v27 + 1 == a2;
  }
}

_QWORD *sub_2237DB370(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC59F20;
  v7[1] = v5;
  v7[2] = v6;
  sub_2231AB0FC((uint64_t)(v7 + 4), a3);
  *v7 = &off_24EC59EA0;
  *a1 = &off_24EC6A3B8;
  a1[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24EC6A4B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_2237DB434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2237DB458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x227684CE8](v9, 0x10B3C40E92279A6);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2237DB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2237DB4D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC59F20;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2237DB548(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC59F20;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237DB5C0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2237DB5C8(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC59EE0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_224510F44(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_2237DB670(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2237DC954();
  sub_2237DB724(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2237DB708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237DB724(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E310);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E310))
  {
    v4 = sub_2237DC5A4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578E2F8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578E308 = *(_QWORD *)(v9 - 8);
      xmmword_25578E2F8 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E2F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E310);
  }
  return sub_2237DCD14(&xmmword_25578E2F8, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_2237DB834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578E310);
  _Unwind_Resume(a1);
}

void sub_2237DB854(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E310);
  _Unwind_Resume(a1);
}

void sub_2237DB86C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 12;
}

void sub_2237DB898(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 12, a2);
}

_QWORD *sub_2237DB8D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC59F20;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2237DB948(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC59F20;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237DB9C0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2237DC040();
  return sub_2237DBB14(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_2237DBA18(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2237DBD40((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC59DB8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC59D70[v3])(v5, v2);
  return result;
}

void sub_2237DBAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC59D70[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_2237DBAE8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_2237DBB14(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2237DBD40((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC59D88[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC59D88[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC59DB8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC59D70[v16])(&p_dst, &__dst);
  return result;
}

void sub_2237DBCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DBD40(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_22454B4D0(v6, v23);
  sub_2231813E8(v7, (uint64_t)",", 1);
  v23[0] = (_QWORD *)(v5 + 16);
  sub_224509A80(**a3, a3, v23);
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v16 + 16);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  v23[0] = (_QWORD *)a2;
  v23[1] = __dst;
  v23[2] = (_QWORD *)a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24EC59DA0[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_2237DBFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2237DC010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2237DC02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22456E764((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_2237DC040()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E190);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E190))
    return &xmmword_25578E178;
  v2 = sub_2237DC11C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578E178, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578E188 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578E178 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E178, &dword_22314D000);
  __cxa_guard_release(&qword_25578E190);
  return &xmmword_25578E178;
}

void sub_2237DC104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E190);
  _Unwind_Resume(a1);
}

std::string *sub_2237DC11C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E1B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E1B0))
    return &stru_25578E198;
  sub_2237DC3C0((uint64_t)__p);
  sub_2237DC20C((char *)__p, &stru_25578E198);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E198, &dword_22314D000);
  __cxa_guard_release(&qword_25578E1B0);
  return &stru_25578E198;
}

void sub_2237DC1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E1B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E1B0);
  _Unwind_Resume(a1);
}

void sub_2237DC20C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2237DC5A4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2237DC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2237DC3C0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E270);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E270))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Lines<2>>]", qword_25578E258);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E258, &dword_22314D000);
    __cxa_guard_release(&qword_25578E270);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E290);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E290))
  {
    v5 = sub_2231A38CC(qword_25578E258, "<", 0);
    sub_2231A37C8(qword_25578E258, 0, v5, qword_25578E278);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E278, &dword_22314D000);
    __cxa_guard_release(&qword_25578E290);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E2B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E2B0))
  {
    sub_224573040((uint64_t)qword_25578E278, (uint64_t)&xmmword_25578E298);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E298, &dword_22314D000);
    __cxa_guard_release(&qword_25578E2B0);
  }
  if (byte_25578E2AF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E298, *((unint64_t *)&xmmword_25578E298 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E298;
    *(_QWORD *)(a1 + 16) = unk_25578E2A8;
  }
}

void sub_2237DC55C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E2B0);
  _Unwind_Resume(a1);
}

void sub_2237DC574(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E290);
  _Unwind_Resume(a1);
}

void sub_2237DC58C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E270);
  _Unwind_Resume(a1);
}

__int128 *sub_2237DC5A4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E1D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E1D0))
    return &xmmword_25578E1B8;
  v2 = sub_2237DC680();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578E1B8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578E1C8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578E1B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E1B8, &dword_22314D000);
  __cxa_guard_release(&qword_25578E1D0);
  return &xmmword_25578E1B8;
}

void sub_2237DC668(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E1D0);
  _Unwind_Resume(a1);
}

std::string *sub_2237DC680()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E1F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E1F0))
    return &stru_25578E1D8;
  sub_2237DC770((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578E1D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E1D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578E1F0);
  return &stru_25578E1D8;
}

void sub_2237DC730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E1F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E1F0);
  _Unwind_Resume(a1);
}

void sub_2237DC770(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E210))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Lines<2>]", qword_25578E1F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E1F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E210);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E230);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E230))
  {
    v5 = sub_2231A38CC(qword_25578E1F8, "<", 0);
    sub_2231A37C8(qword_25578E1F8, 0, v5, qword_25578E218);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E218, &dword_22314D000);
    __cxa_guard_release(&qword_25578E230);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E250);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E250))
  {
    sub_224573040((uint64_t)qword_25578E218, (uint64_t)&xmmword_25578E238);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E238, &dword_22314D000);
    __cxa_guard_release(&qword_25578E250);
  }
  if (byte_25578E24F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E238, *((unint64_t *)&xmmword_25578E238 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E238;
    *(_QWORD *)(a1 + 16) = unk_25578E248;
  }
}

void sub_2237DC90C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E250);
  _Unwind_Resume(a1);
}

void sub_2237DC924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E230);
  _Unwind_Resume(a1);
}

void sub_2237DC93C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E210);
  _Unwind_Resume(a1);
}

std::string *sub_2237DC954()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578E2D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E2D0))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2237DC5A4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_2237DCC1C();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578E2B8, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E2B8, &dword_22314D000);
        __cxa_guard_release(&qword_25578E2D0);
        return &stru_25578E2B8;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578E2B8;
}

void sub_2237DCB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578E2D0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578E2D0);
  _Unwind_Resume(a1);
}

std::string *sub_2237DCC1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E2F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E2F0))
    return &stru_25578E2D8;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 12U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578E2D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E2D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578E2F0);
  return &stru_25578E2D8;
}

void sub_2237DCCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E2F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E2F0);
  _Unwind_Resume(a1);
}

uint64_t sub_2237DCD14(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2237DBD40((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC59D88[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC59DB8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC59D70[v11])(&p_dst, &__dst);
  return result;
}

void sub_2237DCE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DCE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DCE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DCE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237DCEBC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227684CE8](v2, 0x20C40960023A9);
  }
  return a1;
}

void sub_2237DCF14(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237DCF38(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2237DCF88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2237DCFF8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2237DD02C()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2237DD078(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_2237DCFF8;
  return result;
}

__n128 sub_2237DD0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_2237DCFF8;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_2237DD0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_22464ED2C)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_2237DD160(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21[5])(uint64_t);

  v21[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = operator new();
  v5 = *(_QWORD *)a2;
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v15 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 8) = v15;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v18 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24EC59E40;
  *(_QWORD *)(v6 + 8) = 0;
  if (v5)
    v7 = ((uint64_t)v15 - v5) >> 2;
  else
    v7 = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  v21[1] = (void (*)(uint64_t))v4;
  v21[2] = (void (*)(uint64_t))v6;
  v19 = 0;
  v20 = 0;
  v21[0] = (void (*)(uint64_t))sub_2237DD4E0;
  sub_22450FFF4(&v16, 11, v21, v7, v5);
  if (v21[0])
    v21[0](0);
  v8 = v16;
  v9 = v17;
  *a1 = v16;
  a1[1] = v9;
  v16 = 0;
  v17 = 0;
  if ((*(_BYTE *)(v8 + 56) & 1) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2245B6C3A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)(v18 + 8) = v14;
      operator delete(v14);
    }
    MEMORY[0x227684CE8](v13, 0x20C40960023A9);
  }
}

void sub_2237DD370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237DD3FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237DD420(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2237DD470(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2237DD4E0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2237DD514()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2237DD560(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_2237DD4E0;
  return result;
}

__n128 sub_2237DD59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_2237DD4E0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_2237DD5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_22464EE5C)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t sub_2237DD648@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_2237DD878(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_2237DD7F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2237DD80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2237DD838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DD864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237DD878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  _OWORD v15[2];
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v16 = &off_24EC1F958;
  sub_223704C04(a2, (uint64_t)&v17);
  sub_2231F9F68((uint64_t)&v16, (uint64_t)&v14);
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v8 = v14;
  v9 = v15[0];
  v14 = 0uLL;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v15 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_2237DD9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237DD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237DDA0C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_OWORD *)(a1 + 16) = xmmword_22464B030;
  *(_QWORD *)(a1 + 224) = a1 + 248;
  *(_OWORD *)(a1 + 232) = xmmword_22464B030;
  *(_QWORD *)(a1 + 440) = a1 + 464;
  *(_OWORD *)(a1 + 448) = xmmword_22464B030;
  *(_QWORD *)a1 = &off_24EC59F70;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  *(_OWORD *)(a1 + 856) = a2[2];
  *(_OWORD *)(a1 + 872) = v8;
  *(_OWORD *)(a1 + 824) = v6;
  *(_OWORD *)(a1 + 840) = v7;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  *(_OWORD *)(a1 + 920) = a2[6];
  *(_OWORD *)(a1 + 936) = v11;
  *(_OWORD *)(a1 + 888) = v9;
  *(_OWORD *)(a1 + 904) = v10;
  *(_QWORD *)(a1 + 952) = a3;
  *(_QWORD *)(a1 + 960) = a4;
  *(_QWORD *)(a1 + 968) = a5;
  v12 = *(_QWORD *)(a5 + 32);
  if (!v12)
    goto LABEL_4;
  if (v12 != a5 + 8)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
LABEL_4:
    v18 = (_QWORD *)v12;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v12, v17);
LABEL_6:
  v13 = (_QWORD *)operator new();
  sub_223EEF828(v13);
  *(_QWORD *)(a1 + 976) = v13;
  *(_QWORD *)(a1 + 984) = sub_2237EB3E0;
  if (v18)
  {
    if (v18 == v17)
    {
      *(_QWORD *)(a1 + 1016) = a1 + 992;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      *(_QWORD *)(a1 + 1016) = v18;
      v18 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1016) = 0;
  }
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_15;
  }
  if (v18)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

void sub_2237DDBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237DDC8C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 + 992);
  v3 = *(_QWORD **)(a1 + 1016);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = 0;
  if (v5)
    (*(void (**)(void))(a1 + 984))();
  v6 = *(void **)(a1 + 800);
  if (v6)
  {
    *(_QWORD *)(a1 + 808) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 776);
  if (v7)
  {
    *(_QWORD *)(a1 + 784) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 752);
  if (v8)
  {
    *(_QWORD *)(a1 + 760) = v8;
    operator delete(v8);
  }
  sub_2237E4174((void **)(a1 + 680));
  sub_2237B4E4C(a1 + 656, *(_QWORD **)(a1 + 664));
  sub_2237E4274((void **)(a1 + 8));
  return a1;
}

void sub_2237DDD44(uint64_t a1)
{
  sub_2237DDC8C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237DDD68(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 448);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 440);
    v4 = 24 * v2;
    while (1)
    {
      v5 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v5 == -1)
        break;
      v15 = &v14;
      result = ((uint64_t (*)(char **, uint64_t))off_24EC5A030[v5])(&v15, v3);
      v3 += 24;
      v4 -= 24;
      if (!v4)
        goto LABEL_5;
    }
LABEL_14:
    sub_22316DD70();
  }
LABEL_5:
  v6 = v1[29];
  if (v6)
  {
    v7 = v1[28];
    v8 = 24 * v6;
    do
    {
      v9 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v9 == -1)
        goto LABEL_14;
      v15 = &v14;
      result = ((uint64_t (*)(char **, uint64_t))off_24EC5A040[v9])(&v15, v7);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v1[2];
  if (v10)
  {
    v11 = v1[1];
    v12 = 24 * v10;
    while (1)
    {
      v13 = *(unsigned int *)(v11 + 16);
      if ((_DWORD)v13 == -1)
        break;
      v15 = &v14;
      result = ((uint64_t (*)(char **, uint64_t))off_24EC5A050[v13])(&v15, v11);
      v11 += 24;
      v12 -= 24;
      if (!v12)
        return result;
    }
    goto LABEL_14;
  }
  return result;
}

#error "2237DDEC4: call analysis failed (funcsize=67)"

void sub_2237DDFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2237C7418(&a9);
  _Unwind_Resume(a1);
}

void sub_2237DDFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (**a13)(), uint64_t (**a14)(_QWORD), __int128 a15, __int128 a16, __int128 a17, __int128 a18, int a19, uint64_t a20,float32x4_t a21,__int128 a22,int32x4_t a23,__int128 a24,__int128 a25,uint64_t a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  void *v86;
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *__p;
  void *v91;
  float32x4_t v92;
  __int128 vars0;
  int32x4_t v94;
  __int128 v95;

  a49 = *MEMORY[0x24BDAC8D0];
  v52 = *(float32x4_t *)(a2 + 824);
  v53 = *(float32x4_t *)(a2 + 840);
  v54 = *(float32x4_t *)(a2 + 856);
  v55 = *(float32x4_t *)(a2 + 872);
  v56 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a3 + 32))), v53, *(float32x2_t *)(a3 + 32), 1), v54, *(float32x4_t *)(a3 + 32), 2), v55, *(float32x4_t *)(a3 + 32), 3);
  v57 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a3 + 48))), v53, *(float32x2_t *)(a3 + 48), 1), v54, *(float32x4_t *)(a3 + 48), 2), v55, *(float32x4_t *)(a3 + 48), 3);
  v58 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a3 + 64))), v53, *(float32x2_t *)(a3 + 64), 1), v54, *(float32x4_t *)(a3 + 64), 2), v55, *(float32x4_t *)(a3 + 64), 3);
  v59 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a3 + 80))), v53, *(float32x2_t *)(a3 + 80), 1), v54, *(float32x4_t *)(a3 + 80), 2), v55, *(float32x4_t *)(a3 + 80), 3);
  v53.i64[0] = vzip1q_s32(v56, v57).u64[0];
  v59.i64[0] ^= 0x8000000080000000;
  v53.i64[1] = v58.u32[0];
  v60 = (int8x16_t)vtrn2q_s32(v56, v57);
  v60.i32[2] = v58.i32[1];
  v61 = vzip2q_s32(v56, v57);
  v62 = v61;
  v62.i32[2] = v58.i32[2];
  HIDWORD(v63) = 0;
  LODWORD(v63) = vdupq_lane_s32(*(int32x2_t *)&v60, 0).i32[3];
  *(_QWORD *)((char *)&v63 + 4) = vextq_s8(v60, v59, 4uLL).u64[0];
  v62.i64[1] = vdupq_laneq_s32(v62, 2).u32[0];
  vars0 = v63;
  v94 = v62;
  v92 = v53;
  *(float32x2_t *)&v95 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v53.f32, *(float *)v59.i32), *(float32x2_t *)v60.i8, *(float32x2_t *)v59.i8, 1), *(float32x2_t *)v61.i8, COERCE_FLOAT(v59.i32[2] ^ 0x80000000));
  DWORD2(v95) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), *(float32x2_t *)v58.i8, 1), (float32x2_t)(v59.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
  HIDWORD(v95) = 1065353216;
  v64 = (uint64_t *)(a3 + 16);
  sub_2237E4A14((uint64_t **)(a2 + 976), (uint64_t)&v92, (uint64_t *)(a3 + 104), *(_QWORD *)(a3 + 16), 0, 0, *(_QWORD *)(a2 + 952), (uint64_t)v88);
  v65 = sub_2231D0224(*v64);
  v66 = *(_OWORD *)(v65 + 32);
  a15 = *(_OWORD *)(v65 + 16);
  a16 = v66;
  v67 = *(_DWORD *)(v65 + 80);
  v68 = *(_OWORD *)(v65 + 64);
  a17 = *(_OWORD *)(v65 + 48);
  a18 = v68;
  a19 = v67;
  a20 = *(_QWORD *)(v65 + 88);
  a13 = &off_24EC207B8;
  a14 = &off_24EC20868;
  a21 = v92;
  a22 = vars0;
  a23 = v94;
  a24 = v95;
  a25 = *(_OWORD *)v88;
  a26 = v89;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  LOBYTE(v67) = atomic_load((unsigned __int8 *)&qword_2557950E8);
  if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_2557950E8))
  {
    *(_QWORD *)&xmmword_2557950D8 = sub_223FF0FB0();
    *((_QWORD *)&xmmword_2557950D8 + 1) = v87;
    __cxa_guard_release(&qword_2557950E8);
  }
  a27 = xmmword_2557950D8;
  v69 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)&a28 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&a28 + 1) = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 16);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = **(_QWORD **)(a2 + 968);
  if (!*(_BYTE *)(v72 + 16))
    sub_22324A974();
  v73 = *(_QWORD *)(v72 + 8);
  v74 = a20;
  v75 = a26;
  v76 = a25;
  a25 = 0uLL;
  a26 = 0;
  v77 = a28;
  a28 = 0uLL;
  v78 = *(_OWORD *)((unint64_t)&a13 | 0x20);
  *(_OWORD *)(a1 + 16) = a15;
  *(_OWORD *)(a1 + 32) = v78;
  v79 = *(_OWORD *)((unint64_t)&a13 | 0x30);
  v80 = *(_OWORD *)(((unint64_t)&a13 | 0x30) + 0x10);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(((unint64_t)&a13 | 0x30) + 0x20);
  *(_OWORD *)(a1 + 48) = v79;
  *(_OWORD *)(a1 + 64) = v80;
  *(_QWORD *)(a1 + 88) = v74;
  *(_QWORD *)a1 = &off_24EC207B8;
  *(_QWORD *)(a1 + 8) = &off_24EC20868;
  v81 = *(_OWORD *)((unint64_t)&a13 | 0x60);
  v82 = *(_OWORD *)(((unint64_t)&a13 | 0x60) + 0x10);
  v83 = *(_OWORD *)(((unint64_t)&a13 | 0x60) + 0x30);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(((unint64_t)&a13 | 0x60) + 0x20);
  *(_OWORD *)(a1 + 144) = v83;
  *(_OWORD *)(a1 + 96) = v81;
  *(_OWORD *)(a1 + 112) = v82;
  *(_OWORD *)(a1 + 160) = v76;
  *(_QWORD *)(a1 + 176) = v75;
  *(_OWORD *)(a1 + 184) = a27;
  *(_OWORD *)(a1 + 200) = v77;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 232) = v73;
  *(_QWORD *)(a1 + 240) = v73;
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  v84 = (char *)v88[0];
  if (v88[0])
  {
    v85 = (char *)v88[1];
    v86 = v88[0];
    if (v88[1] != v88[0])
    {
      do
      {
        v85 -= 424;
        sub_2236EA79C((uint64_t)v85);
      }
      while (v85 != v84);
      v86 = v88[0];
    }
    v88[1] = v84;
    operator delete(v86);
  }
}

void sub_2237DE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void **v9;

  __cxa_guard_abort(&qword_2557950E8);
  sub_2236E9A70(v9);
  sub_2237E377C(&a9);
  _Unwind_Resume(a1);
}

void sub_2237DE330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_2237C7418(&a25);
  sub_2237E377C(&a9);
  _Unwind_Resume(a1);
}

void sub_2237DE34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2237E377C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2237DE364(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[27];
  void *__p[2];
  char *v30;
  __int128 v31;
  __int128 v32;
  char **v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v28 = 0;
  *(_QWORD *)&v28[8] = a2;
  v28[16] = 1;
  *(_WORD *)&v28[24] = 257;
  v28[26] = 1;
  v4 = *(char **)(a2 + 160);
  v5 = *(char **)(a2 + 168);
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0xDE304D4873ECADE3 * ((v4 - v5) >> 3);
  v30 = 0;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v6;
  if (v4 == v5)
  {
    v7 = 0;
  }
  else
  {
    if (v6 >> 60)
      sub_22316E078();
    __p[0] = operator new(0xE304D4873ECADE30 * ((v4 - v5) >> 3));
    __p[1] = __p[0];
    v30 = (char *)__p[0] - 0x1CFB2B78C13521D0 * ((v4 - v5) >> 3);
    v33 = (char **)__p;
    do
    {
      v34 = *(_OWORD *)v4;
      sub_2232E9564(&v33, &v34);
      v4 += 424;
    }
    while (v4 != v5);
    v7 = (unsigned __int8 *)__p[0];
    v6 = v31;
  }
  v8 = 126 - 2 * __clz(v6);
  if (v6)
    v9 = v8;
  else
    v9 = 0;
  sub_2237A5F44(v7, &v7[16 * v6], (uint64_t)&v34, v9, 1);
  v10 = 126 - 2 * __clz(*((_QWORD *)&v31 + 1) - v31);
  if (*((_QWORD *)&v31 + 1) == (_QWORD)v31)
    v11 = 0;
  else
    v11 = v10;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * v31, (unsigned __int8 *)__p[0] + 16 * *((_QWORD *)&v31 + 1), (uint64_t)&v34, v11, 1);
  v12 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  v13 = 126 - 2 * __clz(v12 - *((_QWORD *)&v31 + 1));
  if (v12 == *((_QWORD *)&v31 + 1))
    v14 = 0;
  else
    v14 = v13;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * *((_QWORD *)&v31 + 1), (unsigned __int8 *)__p[1], (uint64_t)&v34, v14, 1);
  LOBYTE(v32) = 0;
  BYTE8(v32) = 0;
  v15 = *(_QWORD *)(a1 + 688);
  if (v15 >= *(_QWORD *)(a1 + 696))
  {
    v17 = sub_2237E4450((void **)(a1 + 680), (uint64_t)v28);
    v18 = __p[0];
    *(_QWORD *)(a1 + 688) = v17;
    if (v18)
    {
      __p[1] = v18;
      operator delete(v18);
    }
  }
  else
  {
    v16 = *(_OWORD *)v28;
    *(_OWORD *)(v15 + 11) = *(_OWORD *)&v28[11];
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v15 + 48) = v30;
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    *(_OWORD *)(v15 + 56) = v31;
    *(_OWORD *)(v15 + 72) = v32;
    v17 = (char *)(v15 + 88);
    *(_QWORD *)(a1 + 688) = v15 + 88;
  }
  v19 = *(_QWORD *)(a1 + 232);
  if (v19)
  {
    v20 = *(_QWORD *)(a1 + 224);
    v21 = 24 * v19;
    do
    {
      *(_QWORD *)&v34 = a2;
      v22 = *(unsigned int *)(v20 + 16);
      if ((_DWORD)v22 == -1)
        sub_22316DD70();
      *(_QWORD *)v28 = &v34;
      ((void (*)(_BYTE *, uint64_t))off_24EC5A090[v22])(v28, v20);
      v20 += 24;
      v21 -= 24;
    }
    while (v21);
  }
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v25 = 24 * v23;
    do
    {
      *(_QWORD *)&v34 = a2;
      v26 = *(unsigned int *)(v24 + 16);
      if ((_DWORD)v26 == -1)
        sub_22316DD70();
      *(_QWORD *)v28 = &v34;
      ((void (*)(_BYTE *, uint64_t))off_24EC5A0A0[v26])(v28, v24);
      v24 += 24;
      v25 -= 24;
    }
    while (v25);
  }
  return sub_2237E37EC(a1, (uint64_t)(v17 - 88));
}

void sub_2237DE65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

#error "2237DE6F4: call analysis failed (funcsize=794)"

void sub_2237DF3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  if (LOBYTE(STACK[0x318]))
  {
    if (SLOBYTE(STACK[0x317]) < 0)
      operator delete((void *)STACK[0x300]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_22319A054(&a33);
  sub_22319A054(&a38);
  sub_223199DE8((uint64_t)&STACK[0x300]);
  sub_223182DAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_2237DF460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  int v34;

  if (v34 < 0)
    operator delete(v33);
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_2237DF4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DF4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  if (LOBYTE(STACK[0x320]) && SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (STACK[0x300])
    os_release((void *)STACK[0x300]);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237DF530()
{
  JUMPOUT(0x2237DF54CLL);
}

void sub_2237DF554(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC610);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC610))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC608);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC610);
  }
  *a1 = qword_2540CC608;
}

void sub_2237DF5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC610);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC610);
  _Unwind_Resume(a1);
}

void sub_2237DF648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, __int128 __p, uint64_t a10, __int128 a11, uint64_t a12, __int128 a13, uint64_t a14, __int128 a15, __int128 a16, __int128 a17, uint64_t a18, int a19, int a20,__int128 *a21,__int128 *a22,uint64_t a23,uint64_t (**a24)(),__int128 *a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,int a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  __int128 v75;
  __int128 *v76;
  uint64_t *v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;

  STACK[0x518] = *MEMORY[0x24BDAC8D0];
  v62 = *(float32x4_t *)(a2 + 824);
  v63 = *(float32x4_t *)(a2 + 840);
  v64 = *(float32x4_t *)(a2 + 856);
  v65 = *(float32x4_t *)(a2 + 872);
  v66 = *(float32x4_t *)(a3 + 80);
  v67 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)(a3 + 32))), v63, *(float32x2_t *)(a3 + 32), 1), v64, *(float32x4_t *)(a3 + 32), 2), v65, *(float32x4_t *)(a3 + 32), 3);
  v68 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)(a3 + 48))), v63, *(float32x2_t *)(a3 + 48), 1), v64, *(float32x4_t *)(a3 + 48), 2), v65, *(float32x4_t *)(a3 + 48), 3);
  v69 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)(a3 + 64))), v63, *(float32x2_t *)(a3 + 64), 1), v64, *(float32x4_t *)(a3 + 64), 2), v65, *(float32x4_t *)(a3 + 64), 3);
  v70 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v66.f32[0]), v63, *(float32x2_t *)v66.f32, 1), v64, v66, 2);
  v64.i64[0] = vzip1q_s32(v67, v68).u64[0];
  v64.i64[1] = v69.u32[0];
  v71 = (int8x16_t)vmlaq_laneq_f32(v70, v65, v66, 3);
  v71.i64[0] ^= 0x8000000080000000;
  v72 = (int8x16_t)vtrn2q_s32(v67, v68);
  v72.i32[2] = v69.i32[1];
  v73 = vzip2q_s32(v67, v68);
  v74 = v73;
  v74.i32[2] = v69.i32[2];
  HIDWORD(v75) = 0;
  LODWORD(v75) = vdupq_lane_s32(*(int32x2_t *)&v72, 0).i32[3];
  *(_QWORD *)((char *)&v75 + 4) = vextq_s8(v72, v71, 4uLL).u64[0];
  v74.i64[1] = vdupq_laneq_s32(v74, 2).u32[0];
  a17 = (__int128)v74;
  a15 = (__int128)v64;
  a16 = v75;
  a18 = (uint64_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v64.f32, *(float *)v71.i32), *(float32x2_t *)v72.i8, *(float32x2_t *)v71.i8, 1), *(float32x2_t *)v73.i8, COERCE_FLOAT(v71.i32[2] ^ 0x80000000));
  a19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v71.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1), *(float32x2_t *)v69.i8, 1), (float32x2_t)(v71.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)).u32[0];
  a20 = 1065353216;
  v76 = (__int128 *)(a4 + 96);
  a24 = (uint64_t (**)())(a4 + 96);
  a25 = &a15;
  if (!sub_2231F73E4((float **)&a24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 249, (uint64_t)"ExactlyEqual(kpseg.world_to_camera, world_to_keyframe)", 54, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v77 = (uint64_t *)(a3 + 104);
  v78 = *(_QWORD *)(a3 + 16);
  v79 = (void **)(a4 + 160);
  sub_2237E4A14((uint64_t **)(a2 + 976), (uint64_t)&a15, v77, v78, (uint64_t *)(a4 + 160), 1, *(_QWORD *)(a2 + 952), (uint64_t)&__p);
  v80 = *(_QWORD *)(a4 + 160);
  v82 = *(_QWORD *)(a4 + 168);
  v81 = *(_QWORD *)(a4 + 176);
  *(_QWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  v83 = *(_OWORD *)(a4 + 32);
  a26 = *(_OWORD *)(a4 + 16);
  a27 = v83;
  v84 = *(_OWORD *)(a4 + 64);
  a28 = *(_OWORD *)(a4 + 48);
  a29 = v84;
  a30 = *(_DWORD *)(a4 + 80);
  a31 = *(_QWORD *)(a4 + 88);
  v86 = *(_QWORD *)(a4 + 200);
  v85 = *(_QWORD *)(a4 + 208);
  a37 = 0;
  *(_QWORD *)&a39 = v86;
  *((_QWORD *)&a39 + 1) = v85;
  a24 = &off_24EC207B8;
  a25 = (__int128 *)&off_24EC20868;
  v87 = *v76;
  v88 = v76[1];
  v89 = v76[3];
  a34 = v76[2];
  a35 = v89;
  a32 = v87;
  a33 = v88;
  a36 = 0uLL;
  a38 = *(_OWORD *)(a4 + 184);
  if (v85)
  {
    v90 = (unint64_t *)(v85 + 16);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    a40 = *(_OWORD *)(a4 + 216);
    a41 = *(_OWORD *)(a4 + 232);
    v92 = *(void **)(a4 + 160);
    *(_QWORD *)&a36 = v80;
    *((_QWORD *)&a36 + 1) = v82;
    a37 = v81;
    if (v92)
    {
      v93 = *(_QWORD *)(a4 + 168);
      v94 = v92;
      if ((void *)v93 != v92)
      {
        do
        {
          v93 -= 424;
          sub_2236EA79C(v93);
        }
        while ((void *)v93 != v92);
        v94 = *v79;
      }
      *(_QWORD *)(a4 + 168) = v92;
      operator delete(v94);
      *v79 = 0;
      *(_QWORD *)(a4 + 168) = 0;
      *(_QWORD *)(a4 + 176) = 0;
    }
  }
  else
  {
    a40 = *(_OWORD *)(a4 + 216);
    a41 = *(_OWORD *)(a4 + 232);
    *(_QWORD *)&a36 = v80;
    *((_QWORD *)&a36 + 1) = v82;
    a37 = v81;
  }
  *(_OWORD *)(a4 + 160) = __p;
  *(_QWORD *)(a4 + 176) = a10;
  a10 = 0;
  __p = 0uLL;
  v95 = **(_QWORD **)(a2 + 968);
  if (!*(_BYTE *)(v95 + 16))
    sub_22324A974();
  v96 = *(_QWORD *)(v95 + 8);
  if (v96 < *(_QWORD *)(a4 + 240)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/Item.h", 55, (uint64_t)"timestamp >= update_timestamp_", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a4 + 240) = v96;
  if (v96 != *v77
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 258, (uint64_t)"kpseg.UpdateTimestamp() == kf_data.update_time", 46, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (a21 = v76, a22 = &a15, !sub_2231F73E4((float **)&a21))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 259, (uint64_t)"kpseg.world_to_camera == world_to_keyframe", 42, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_OWORD *)a1 = a11;
  *(_QWORD *)(a1 + 16) = a12;
  a12 = 0;
  a11 = 0uLL;
  *(_OWORD *)(a1 + 24) = a13;
  *(_QWORD *)(a1 + 136) = &off_24EC20868;
  v97 = *(_OWORD *)((unint64_t)&a24 | 0x20);
  *(_OWORD *)(a1 + 144) = a26;
  *(_OWORD *)(a1 + 160) = v97;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(((unint64_t)&a24 | 0x30) + 0x20);
  v98 = *(_OWORD *)(((unint64_t)&a24 | 0x30) + 0x10);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)((unint64_t)&a24 | 0x30);
  *(_OWORD *)(a1 + 192) = v98;
  v99 = a31;
  *(_QWORD *)(a1 + 128) = &off_24EC207B8;
  v100 = a1 + 128;
  *(_QWORD *)(v100 + 88) = v99;
  v101 = *(_OWORD *)(((unint64_t)&a24 | 0x60) + 0x30);
  *(_OWORD *)(v100 + 128) = *(_OWORD *)(((unint64_t)&a24 | 0x60) + 0x20);
  *(_OWORD *)(v100 + 144) = v101;
  v102 = *(_OWORD *)(((unint64_t)&a24 | 0x60) + 0x10);
  *(_OWORD *)(v100 + 96) = *(_OWORD *)((unint64_t)&a24 | 0x60);
  *(_OWORD *)(v100 + 112) = v102;
  *(_OWORD *)(v100 + 160) = a36;
  *(_QWORD *)(v100 + 176) = a37;
  a36 = 0uLL;
  a37 = 0;
  *(_OWORD *)(v100 + 184) = a38;
  *(_OWORD *)(v100 + 200) = a39;
  v103 = a40;
  *(_OWORD *)(v100 + 232) = a41;
  *(_OWORD *)(v100 + 216) = v103;
  v104 = __p;
  if ((_QWORD)__p)
  {
    v105 = *((_QWORD *)&__p + 1);
    v106 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        v105 -= 424;
        sub_2236EA79C(v105);
      }
      while (v105 != v104);
      v106 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v104;
    operator delete(v106);
  }
}

void sub_2237DFB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_2237C7418(&a41);
  sub_2237E377C(&a21);
  _Unwind_Resume(a1);
}

#error "2237DFEE4: call analysis failed (funcsize=465)"

void sub_2237E0308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    sub_2237E0358((uint64_t)&STACK[0x200]);
    _Unwind_Resume(a1);
  }
  sub_2237E0358((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_2237E0358(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (*(_BYTE *)(a1 + 256))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 208);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = *(_QWORD *)(a1 + 160);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 168);
      v5 = *(void **)(a1 + 160);
      if (v4 != v3)
      {
        do
        {
          v4 -= 424;
          sub_2236EA79C(v4);
        }
        while (v4 != v3);
        v5 = *(void **)(a1 + 160);
      }
      *(_QWORD *)(a1 + 168) = v3;
      operator delete(v5);
    }
    *(_QWORD *)a1 = &off_24EC20828;
  }
  return a1;
}

#error "2237E06A4: call analysis failed (funcsize=793)"

void sub_2237E1128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E1168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC620);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC620);
  _Unwind_Resume(a1);
}

void sub_2237E11C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_22319A054(&a27);
  sub_22319A054(&a33);
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E11F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  int v28;

  if (v28 < 0)
    operator delete(v27);
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E1250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237E1274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a48 && a47 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E12C4()
{
  JUMPOUT(0x2237E12E0);
}

uint64_t sub_2237E12E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, int a18, uint64_t a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,uint64_t a30,char a31)
{
  _QWORD *v33;
  __int128 *v34;
  __int128 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  char v52;
  unint64_t v53;
  __int128 v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[27];
  void *__p[2];
  _BYTE var8[24];
  __int128 v73;

  STACK[0x518] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v70 = 2;
  v70[8] = 0;
  v70[16] = 0;
  v70[24] = 0;
  v70[26] = 0;
  v34 = *(__int128 **)(a2 + 160);
  v35 = *(__int128 **)(a2 + 168);
  v33 = (_QWORD *)(a2 + 160);
  *(_OWORD *)__p = 0u;
  memset(var8, 0, sizeof(var8));
  if (v34 == v35)
  {
    v37 = 0;
    v36 = 0;
  }
  else
  {
    if ((0xDE304D4873ECADE3 * (((char *)v34 - (char *)v35) >> 3)) >> 60)
      sub_22316E078();
    __p[0] = operator new(0xE304D4873ECADE30 * (((char *)v34 - (char *)v35) >> 3));
    __p[1] = __p[0];
    *(_QWORD *)var8 = (char *)__p[0] - 0x1CFB2B78C13521D0 * (((char *)v34 - (char *)v35) >> 3);
    a12 = (uint64_t)__p;
    do
    {
      a13 = *v34;
      sub_2232E9564((char ***)&a12, &a13);
      v34 = (__int128 *)((char *)v34 + 424);
    }
    while (v34 != v35);
    v36 = (unsigned __int8 *)__p[0];
    v37 = (unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&var8[8];
    if (*(_QWORD *)&var8[8])
    {
      v38 = 126 - 2 * __clz(*(unint64_t *)&var8[8]);
      goto LABEL_9;
    }
  }
  v38 = 0;
LABEL_9:
  sub_2237A5F44(v36, v37, (uint64_t)&a13, v38, 1);
  v39 = 126 - 2 * __clz(*(_QWORD *)&var8[16] - *(_QWORD *)&var8[8]);
  if (*(_QWORD *)&var8[16] == *(_QWORD *)&var8[8])
    v40 = 0;
  else
    v40 = v39;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&var8[8], (unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&var8[16], (uint64_t)&a13, v40, 1);
  v41 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  v42 = 126 - 2 * __clz(v41 - *(_QWORD *)&var8[16]);
  if (v41 == *(_QWORD *)&var8[16])
    v43 = 0;
  else
    v43 = v42;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&var8[16], (unsigned __int8 *)__p[1], (uint64_t)&a13, v43, 1);
  v44 = *(_OWORD *)(a2 + 32);
  a14 = *(_OWORD *)(a2 + 16);
  v45 = *(_OWORD *)(a2 + 48);
  v46 = *(_OWORD *)(a2 + 64);
  a15 = v44;
  a16 = v45;
  a17 = v46;
  a18 = *(_DWORD *)(a2 + 80);
  v47 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)&a13 = &off_24EC207B8;
  *((_QWORD *)&a13 + 1) = &off_24EC20868;
  v48 = *(_OWORD *)(a2 + 112);
  a20 = *(_OWORD *)(a2 + 96);
  a21 = v48;
  v49 = *(_OWORD *)(a2 + 144);
  a22 = *(_OWORD *)(a2 + 128);
  a23 = v49;
  a24 = *(_OWORD *)(a2 + 160);
  v50 = *(_QWORD *)(a2 + 176);
  a19 = v47;
  a25 = v50;
  v33[1] = 0;
  v33[2] = 0;
  *v33 = 0;
  a26 = *(_OWORD *)(a2 + 184);
  a27 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  a28 = *(_OWORD *)(a2 + 216);
  a29 = *(_OWORD *)(a2 + 232);
  a31 = 1;
  a11 = (uint64_t)&a13;
  a12 = (uint64_t)&a28;
  v51 = sub_2237E4860((uint64_t **)(a1 + 656), (unsigned __int8 *)&a28, (_OWORD **)&a12, &a11);
  if (!v52
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 379, (uint64_t)"inserted", 8, (uint64_t)"Each KF should only get one update per cycle.", 45, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)&v73 = v51 + 32;
  *((_QWORD *)&v73 + 1) = 1;
  v53 = *(_QWORD *)(a1 + 736);
  if (v53 >= *(_QWORD *)(a1 + 744))
  {
    v55 = sub_2237E4450((void **)(a1 + 728), (uint64_t)v70);
    v56 = __p[0];
    *(_QWORD *)(a1 + 736) = v55;
    v53 = (unint64_t)(v55 - 88);
    if (v56)
    {
      __p[1] = v56;
      operator delete(v56);
    }
  }
  else
  {
    v54 = *(_OWORD *)v70;
    *(_OWORD *)(v53 + 11) = *(_OWORD *)&v70[11];
    *(_OWORD *)v53 = v54;
    *(_QWORD *)(v53 + 40) = 0;
    *(_QWORD *)(v53 + 48) = 0;
    *(_QWORD *)(v53 + 32) = 0;
    *(_OWORD *)(v53 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v53 + 48) = *(_QWORD *)var8;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)var8 = 0;
    *(_OWORD *)(v53 + 56) = *(_OWORD *)&var8[8];
    *(_OWORD *)(v53 + 72) = v73;
    v55 = (char *)(v53 + 88);
    *(_QWORD *)(a1 + 736) = v53 + 88;
  }
  if (a31)
  {
    if (*((_QWORD *)&a27 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&a27 + 1));
    v57 = a24;
    if ((_QWORD)a24)
    {
      v58 = *((_QWORD *)&a24 + 1);
      v59 = (void *)a24;
      if (*((_QWORD *)&a24 + 1) != (_QWORD)a24)
      {
        do
        {
          v58 -= 424;
          sub_2236EA79C(v58);
        }
        while (v58 != v57);
        v59 = (void *)a24;
      }
      *((_QWORD *)&a24 + 1) = v57;
      operator delete(v59);
    }
  }
  result = sub_2237E37EC(a1, v53);
  v61 = *((_QWORD *)v55 - 2);
  v62 = *(_QWORD *)(a1 + 232);
  if (v62)
  {
    v63 = *(_QWORD *)(a1 + 224);
    v64 = 24 * v62;
    do
    {
      *(_QWORD *)v70 = v61;
      v65 = *(unsigned int *)(v63 + 16);
      if ((_DWORD)v65 == -1)
        sub_22316DD70();
      *(_QWORD *)&a13 = v70;
      result = ((uint64_t (*)(__int128 *, uint64_t))off_24EC5A0B0[v65])(&a13, v63);
      v63 += 24;
      v64 -= 24;
    }
    while (v64);
    v61 = *((_QWORD *)v55 - 2);
  }
  v66 = *(_QWORD *)(a1 + 16);
  if (v66)
  {
    v67 = *(_QWORD *)(a1 + 8);
    v68 = 24 * v66;
    do
    {
      *(_QWORD *)v70 = v61;
      v69 = *(unsigned int *)(v67 + 16);
      if ((_DWORD)v69 == -1)
        sub_22316DD70();
      *(_QWORD *)&a13 = v70;
      result = ((uint64_t (*)(__int128 *, uint64_t))off_24EC5A0C0[v69])(&a13, v67);
      v67 += 24;
      v68 -= 24;
    }
    while (v68);
  }
  return result;
}

void sub_2237E1744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  sub_2237E0358((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_2237E1768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

#error "2237E1A48: call analysis failed (funcsize=1255)"

void sub_2237E2CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_22319A054(&a27);
  sub_22319A054(&a33);
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_223199DE8((uint64_t)&a41);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E2D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  int v28;

  if (v28 < 0)
  {
    operator delete(v27);
    sub_223199DE8((uint64_t)&a27);
    sub_223182DAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237E2DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237E2DF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a48 && a47 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x2237E2DE0);
}

void sub_2237E2E5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237E2E6C()
{
  JUMPOUT(0x2237E2E8CLL);
}

void sub_2237E2E94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  void *v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79[5];
  void *__p[2];
  _OWORD v81[2];
  __int128 v82;
  uint64_t v83;
  char **v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 752;
  v3 = a1 + 776;
  v4 = a1 + 800;
  sub_2237A5D54((uint64_t)v79, a1 + 752, (_QWORD *)(a1 + 776), (_QWORD *)(a1 + 800));
  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(a1 + 760) = v5;
    operator delete(v5);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v6 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(a1 + 784) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  v7 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(a1 + 808) = v7;
    operator delete(v7);
  }
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  v74 = 0;
  v75 = 0;
  v8 = *(_QWORD *)(a1 + 688);
  v9 = *(_QWORD *)(a1 + 680);
  v10 = *(_QWORD *)(a1 + 712);
  v11 = *(_QWORD *)(a1 + 704);
  v12 = (uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 3;
  v76 = 0;
  v77 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v9) >> 3);
  v78 = v77 + 0x2E8BA2E8BA2E8BA3 * ((v10 - v11) >> 3);
  v13 = v78 + 0x2E8BA2E8BA2E8BA3 * v12;
  if (!v13)
  {
    v14 = 0;
    if (v9 == v8)
      goto LABEL_20;
    goto LABEL_15;
  }
  if (v13 >= 0x2E8BA2E8BA2E8BBLL)
    sub_22316E078();
  v14 = (char *)operator new(88 * v13);
  v74 = v14;
  v75 = v14;
  v76 = &v14[88 * v13];
  if (v9 != v8)
  {
    do
    {
LABEL_15:
      if (v14 < v76)
      {
        v15 = *(_OWORD *)v9;
        *(_OWORD *)(v14 + 11) = *(_OWORD *)(v9 + 11);
        *(_OWORD *)v14 = v15;
        *((_QWORD *)v14 + 5) = 0;
        *((_QWORD *)v14 + 6) = 0;
        *((_QWORD *)v14 + 4) = 0;
        *((_OWORD *)v14 + 2) = *(_OWORD *)(v9 + 32);
        *((_QWORD *)v14 + 6) = *(_QWORD *)(v9 + 48);
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_OWORD *)(v14 + 56) = *(_OWORD *)(v9 + 56);
        *(_OWORD *)(v14 + 72) = *(_OWORD *)(v9 + 72);
        v14 += 88;
      }
      else
      {
        v14 = sub_2237E4450(&v74, v9);
      }
      v75 = v14;
      v9 += 88;
    }
    while (v9 != v8);
    v11 = *(_QWORD *)(a1 + 704);
    v10 = *(_QWORD *)(a1 + 712);
  }
LABEL_20:
  while (v11 != v10)
  {
    if (v14 < v76)
    {
      v16 = *(_OWORD *)v11;
      *(_OWORD *)(v14 + 11) = *(_OWORD *)(v11 + 11);
      *(_OWORD *)v14 = v16;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 0;
      *((_OWORD *)v14 + 2) = *(_OWORD *)(v11 + 32);
      *((_QWORD *)v14 + 6) = *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_OWORD *)(v14 + 56) = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v14 + 72) = *(_OWORD *)(v11 + 72);
      v14 += 88;
    }
    else
    {
      v14 = sub_2237E4450(&v74, v11);
    }
    v75 = v14;
    v11 += 88;
  }
  v17 = *(_QWORD *)(a1 + 728);
  v18 = *(_QWORD *)(a1 + 736);
  while (v17 != v18)
  {
    if (v14 < v76)
    {
      v19 = *(_OWORD *)v17;
      *(_OWORD *)(v14 + 11) = *(_OWORD *)(v17 + 11);
      *(_OWORD *)v14 = v19;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 0;
      *((_OWORD *)v14 + 2) = *(_OWORD *)(v17 + 32);
      *((_QWORD *)v14 + 6) = *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_OWORD *)(v14 + 56) = *(_OWORD *)(v17 + 56);
      *(_OWORD *)(v14 + 72) = *(_OWORD *)(v17 + 72);
      v14 += 88;
    }
    else
    {
      v14 = sub_2237E4450(&v74, v17);
    }
    v75 = v14;
    v17 += 88;
  }
  v20 = (void **)(a1 + 680);
  v83 = 0;
  v21 = 0uLL;
  v82 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v81, 0, sizeof(v81));
  v22 = *(_QWORD *)(a1 + 680);
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 688);
    v24 = *(void **)(a1 + 680);
    if (v23 != v22)
    {
      do
      {
        v25 = *(void **)(v23 - 56);
        if (v25)
        {
          *(_QWORD *)(v23 - 48) = v25;
          operator delete(v25);
        }
        v23 -= 88;
      }
      while (v23 != v22);
      v24 = *v20;
    }
    *(_QWORD *)(a1 + 688) = v22;
    operator delete(v24);
    *v20 = 0;
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    v21 = *(_OWORD *)__p;
    v26 = *(_QWORD *)&v81[0];
  }
  else
  {
    v26 = 0;
  }
  *(_OWORD *)v20 = v21;
  *(_QWORD *)(a1 + 696) = v26;
  __p[1] = 0;
  *(_QWORD *)&v81[0] = 0;
  __p[0] = 0;
  v27 = *(_QWORD *)(a1 + 704);
  if (v27)
  {
    v28 = (void **)(a1 + 704);
    v29 = *(_QWORD *)(a1 + 712);
    v30 = *(void **)(a1 + 704);
    if (v29 != v27)
    {
      do
      {
        v31 = *(void **)(v29 - 56);
        if (v31)
        {
          *(_QWORD *)(v29 - 48) = v31;
          operator delete(v31);
        }
        v29 -= 88;
      }
      while (v29 != v27);
      v30 = *v28;
    }
    *(_QWORD *)(a1 + 712) = v27;
    operator delete(v30);
    *v28 = 0;
    *(_QWORD *)(a1 + 712) = 0;
    *(_QWORD *)(a1 + 720) = 0;
  }
  v32 = (void **)(a1 + 728);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)((char *)v81 + 8);
  *(_QWORD *)(a1 + 720) = *((_QWORD *)&v81[1] + 1);
  memset((char *)v81 + 8, 0, 24);
  v33 = *(_QWORD *)(a1 + 728);
  if (v33)
  {
    v34 = *(_QWORD *)(a1 + 736);
    v35 = *(void **)(a1 + 728);
    if (v34 != v33)
    {
      do
      {
        v36 = *(void **)(v34 - 56);
        if (v36)
        {
          *(_QWORD *)(v34 - 48) = v36;
          operator delete(v36);
        }
        v34 -= 88;
      }
      while (v34 != v33);
      v35 = *v32;
    }
    *(_QWORD *)(a1 + 736) = v33;
    operator delete(v35);
    *v32 = 0;
    *(_QWORD *)(a1 + 736) = 0;
    *(_QWORD *)(a1 + 744) = 0;
  }
  *(_OWORD *)v32 = v82;
  *(_QWORD *)(a1 + 744) = v83;
  v83 = 0;
  v82 = 0uLL;
  sub_2237E4174(__p);
  v38 = v77;
  v37 = v78;
  v39 = v74;
  v40 = v75;
  v41 = (char *)v74 + 88 * v77;
  v42 = (char *)v74 + 88 * v78;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v81[0] = 0;
  *((_QWORD *)&v81[0] + 1) = 0xD1745D1745D1745DLL * ((-88 * v77) >> 3);
  *(_QWORD *)&v81[1] = *((_QWORD *)&v81[0] + 1) - 0x2E8BA2E8BA2E8BA3 * ((v41 - v42) >> 3);
  v43 = *(_QWORD *)&v81[1] - 0x2E8BA2E8BA2E8BA3 * ((v42 - v75) >> 3);
  if (v43)
  {
    if (v43 >> 60)
      sub_22316E078();
    __p[0] = operator new(16 * v43);
    __p[1] = __p[0];
    *(_QWORD *)&v81[0] = (char *)__p[0] + 16 * v43;
  }
  v84 = (char **)__p;
  if (v38)
  {
    v44 = 88 * v38;
    v45 = (uint64_t)v39;
    do
    {
      v85 = *(_OWORD *)(sub_2237D433C(v45) + 216);
      sub_2232E9564(&v84, &v85);
      v45 += 88;
      v44 -= 88;
    }
    while (v44);
  }
  v84 = (char **)__p;
  if (v38 != v37)
  {
    v46 = 88 * v37 - 88 * v38;
    do
    {
      v85 = *(_OWORD *)(sub_2237D433C((uint64_t)v41) + 216);
      sub_2232E9564(&v84, &v85);
      v41 += 88;
      v46 -= 88;
    }
    while (v46);
  }
  v84 = (char **)__p;
  if (v37 != 0x2E8BA2E8BA2E8BA3 * ((v40 - v39) >> 3))
  {
    v47 = 8 * ((v40 - v39) >> 3) - 88 * v37;
    do
    {
      v85 = *(_OWORD *)(sub_2237D433C((uint64_t)v42) + 216);
      sub_2232E9564(&v84, &v85);
      v42 += 88;
      v47 -= 88;
    }
    while (v47);
  }
  v48 = 126 - 2 * __clz(*((unint64_t *)&v81[0] + 1));
  if (*((_QWORD *)&v81[0] + 1))
    v49 = v48;
  else
    v49 = 0;
  sub_2237A5F44((unsigned __int8 *)__p[0], (unsigned __int8 *)__p[0] + 16 * *((_QWORD *)&v81[0] + 1), (uint64_t)&v85, v49, 1);
  v50 = 126 - 2 * __clz(*(_QWORD *)&v81[1] - *((_QWORD *)&v81[0] + 1));
  if (*(_QWORD *)&v81[1] == *((_QWORD *)&v81[0] + 1))
    v51 = 0;
  else
    v51 = v50;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * *((_QWORD *)&v81[0] + 1), (unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&v81[1], (uint64_t)&v85, v51, 1);
  v52 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  v53 = 126 - 2 * __clz(v52 - *(_QWORD *)&v81[1]);
  if (v52 == *(_QWORD *)&v81[1])
    v54 = 0;
  else
    v54 = v53;
  sub_2237A5F44((unsigned __int8 *)__p[0] + 16 * *(_QWORD *)&v81[1], (unsigned __int8 *)__p[1], (uint64_t)&v85, v54, 1);
  v55 = *(_QWORD *)(a1 + 448);
  if (v55)
  {
    v56 = *(_QWORD *)(a1 + 440);
    v57 = 24 * v55;
    while (1)
    {
      v84 = (char **)v79;
      v58 = *(unsigned int *)(v56 + 16);
      if ((_DWORD)v58 == -1)
        break;
      *(_QWORD *)&v85 = &v84;
      ((void (*)(__int128 *, uint64_t))off_24EC5A060[v58])(&v85, v56);
      v56 += 24;
      v57 -= 24;
      if (!v57)
        goto LABEL_79;
    }
LABEL_101:
    sub_22316DD70();
  }
LABEL_79:
  v59 = *(_QWORD *)(a1 + 960);
  v60 = *(_QWORD *)(a1 + 232);
  if (v60)
  {
    v61 = v59 + 232;
    v62 = *(_QWORD *)(a1 + 224);
    v63 = 24 * v60;
    do
    {
      *(_QWORD *)&v85 = __p;
      *((_QWORD *)&v85 + 1) = v61;
      v64 = *(unsigned int *)(v62 + 16);
      if ((_DWORD)v64 == -1)
        goto LABEL_101;
      v84 = (char **)&v85;
      ((void (*)(char ***, uint64_t))off_24EC5A070[v64])(&v84, v62);
      v62 += 24;
      v63 -= 24;
    }
    while (v63);
    v59 = *(_QWORD *)(a1 + 960);
  }
  v65 = *(_QWORD *)(a1 + 16);
  if (v65)
  {
    v66 = v59 + 232;
    v67 = *(_QWORD *)(a1 + 8);
    v68 = 24 * v65;
    do
    {
      *(_QWORD *)&v85 = &v74;
      *((_QWORD *)&v85 + 1) = v66;
      v69 = *(unsigned int *)(v67 + 16);
      if ((_DWORD)v69 == -1)
        goto LABEL_101;
      v84 = (char **)&v85;
      ((void (*)(char ***, uint64_t))off_24EC5A080[v69])(&v84, v67);
      v67 += 24;
      v68 -= 24;
    }
    while (v68);
  }
  sub_2237B4E4C(a1 + 656, *(_QWORD **)(a1 + 664));
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v70 = (char *)v74;
  if (v74)
  {
    v71 = v75;
    v72 = v74;
    if (v75 != v74)
    {
      do
      {
        v73 = (void *)*((_QWORD *)v71 - 7);
        if (v73)
        {
          *((_QWORD *)v71 - 6) = v73;
          operator delete(v73);
        }
        v71 -= 88;
      }
      while (v71 != v70);
      v72 = v74;
    }
    v75 = v70;
    operator delete(v72);
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
}

void sub_2237E3688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2237E370C((void **)&a9);
  if (!a14)
    _Unwind_Resume(a1);
  a15 = (uint64_t)a14;
  operator delete(a14);
  _Unwind_Resume(a1);
}

void **sub_2237E370C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 7);
        if (v5)
        {
          *((_QWORD *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_2237E377C(void **a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = *a1;
  if (*a1)
  {
    v4 = (uint64_t)a1[1];
    v5 = *a1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 424;
        sub_2236EA79C(v4);
      }
      while ((void *)v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2237E37EC(uint64_t result, uint64_t a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *i;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  _QWORD *v69;
  __int16 v70;
  unsigned __int8 *v71;
  __int16 *v72;
  uint64_t v73;
  unsigned __int8 **v74;

  v69 = (_QWORD *)result;
  if (*(_BYTE *)(a2 + 16))
  {
    result = sub_2237DA1B4((int *)a2);
    if ((result & 1) == 0)
    {
      if (*(_DWORD *)a2 == 1)
      {
        if (!*(_BYTE *)(a2 + 16))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_136;
        }
        if (!*(_BYTE *)(a2 + 26))
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_136;
        }
        if (!*(_BYTE *)(a2 + 25) || *(_BYTE *)(a2 + 80))
          goto LABEL_18;
        v3 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconst"
             "ruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h";
        v4 = "!update_state->content_updated || kpseg_prev.has_value()";
        v5 = 88;
        v6 = 56;
      }
      else
      {
        v3 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp";
        v4 = "update.IsAdded() || update.IsModified()";
        v5 = 330;
        v6 = 39;
      }
      result = sub_224573870(v3, v5, (uint64_t)v4, v6, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        goto LABEL_136;
    }
LABEL_18:
    if (!*(_BYTE *)(a2 + 26))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 331, (uint64_t)"update.update_state.has_value()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        goto LABEL_136;
    }
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(unsigned __int8 **)(v7 + 160);
    v9 = *(unsigned __int8 **)(v7 + 168);
    if (v8 != v9)
    {
      v68 = (char **)(v69 + 94);
      while (1)
      {
        v10 = *(_QWORD *)(a2 + 32);
        v11 = *(_QWORD *)(a2 + 56);
        if (v11)
        {
          v12 = *(unsigned __int8 **)(a2 + 32);
          v13 = *(_QWORD *)(a2 + 56);
          do
          {
            v14 = v13 >> 1;
            v15 = &v12[16 * (v13 >> 1)];
            v16 = *v15;
            v17 = *v8;
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[1];
            v17 = v8[1];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[2];
            v17 = v8[2];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[3];
            v17 = v8[3];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[4];
            v17 = v8[4];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[5];
            v17 = v8[5];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[6];
            v17 = v8[6];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[7];
            v17 = v8[7];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[8];
            v17 = v8[8];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[9];
            v17 = v8[9];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[10];
            v17 = v8[10];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[11];
            v17 = v8[11];
            if (v16 != v17)
              goto LABEL_43;
            v16 = v15[12];
            v17 = v8[12];
            if (v16 != v17
              || (v16 = v15[13], v17 = v8[13], v16 != v17)
              || (v16 = v15[14], v17 = v8[14], v16 != v17)
              || (v16 = v15[15], v17 = v8[15], v16 != v17))
            {
LABEL_43:
              v18 = v13 + ~v14;
              v19 = v15 + 16;
              if (v16 < v17)
              {
                v14 = v18;
                v12 = v19;
              }
            }
            v13 = v14;
          }
          while (v14);
          if (v12 != (unsigned __int8 *)(v10 + 16 * v11))
          {
            result = sub_22319835C(v8, v12);
            if ((result & 0x80) == 0)
            {
              v20 = v69[56];
              if (v20)
              {
                v21 = *(__int16 **)(a2 + 8);
                v22 = v69[55];
                v23 = 24 * v20;
                do
                {
                  v71 = v8;
                  v72 = v21;
                  v24 = *(unsigned int *)(v22 + 16);
                  if ((_DWORD)v24 == -1)
                    goto LABEL_135;
                  v74 = &v71;
                  ((void (*)(unsigned __int8 ***, uint64_t))off_24EC5A0F0[v24])(&v74, v22);
                  v22 += 24;
                  v23 -= 24;
                }
                while (v23);
              }
              result = (uint64_t)sub_2237A460C(v68, v8);
              goto LABEL_23;
            }
            v10 = *(_QWORD *)(a2 + 32);
            v11 = *(_QWORD *)(a2 + 56);
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = v25 - v11;
        if (v25 == v11)
          goto LABEL_81;
        v27 = (unsigned __int8 *)(v10 + 16 * v25);
        v28 = (unsigned __int8 *)(v10 + 16 * v11);
        do
        {
          v29 = v26 >> 1;
          v30 = &v28[16 * (v26 >> 1)];
          v31 = *v30;
          v32 = *v8;
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[1];
          v32 = v8[1];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[2];
          v32 = v8[2];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[3];
          v32 = v8[3];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[4];
          v32 = v8[4];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[5];
          v32 = v8[5];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[6];
          v32 = v8[6];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[7];
          v32 = v8[7];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[8];
          v32 = v8[8];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[9];
          v32 = v8[9];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[10];
          v32 = v8[10];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[11];
          v32 = v8[11];
          if (v31 != v32)
            goto LABEL_72;
          v31 = v30[12];
          v32 = v8[12];
          if (v31 != v32
            || (v31 = v30[13], v32 = v8[13], v31 != v32)
            || (v31 = v30[14], v32 = v8[14], v31 != v32)
            || (v31 = v30[15], v32 = v8[15], v31 != v32))
          {
LABEL_72:
            v33 = v26 + ~v29;
            v34 = v30 + 16;
            if (v31 < v32)
            {
              v29 = v33;
              v28 = v34;
            }
          }
          v26 = v29;
        }
        while (v29);
        if (v28 == v27 || (result = sub_22319835C(v8, v28), (result & 0x80) != 0))
        {
LABEL_81:
          if (!*(_BYTE *)(a2 + 24))
            goto LABEL_23;
          v70 = 1;
          v40 = v69[56];
          if (v40)
          {
            v41 = *(_QWORD *)(a2 + 8);
            v42 = v69[55];
            v43 = 24 * v40;
            do
            {
              v71 = v8;
              v72 = &v70;
              v73 = v41;
              v44 = *(unsigned int *)(v42 + 16);
              if ((_DWORD)v44 == -1)
                goto LABEL_135;
              v74 = &v71;
              ((void (*)(unsigned __int8 ***, uint64_t))off_24EC5A100[v44])(&v74, v42);
              v42 += 24;
              v43 -= 24;
            }
            while (v43);
          }
        }
        else
        {
          LOBYTE(v70) = *(_BYTE *)(a2 + 24);
          HIBYTE(v70) = 1;
          v35 = v69[56];
          if (v35)
          {
            v36 = *(_QWORD *)(a2 + 8);
            v37 = v69[55];
            v38 = 24 * v35;
            do
            {
              v71 = v8;
              v72 = &v70;
              v73 = v36;
              v39 = *(unsigned int *)(v37 + 16);
              if ((_DWORD)v39 == -1)
                goto LABEL_135;
              v74 = &v71;
              ((void (*)(unsigned __int8 ***, uint64_t))off_24EC5A100[v39])(&v74, v37);
              v37 += 24;
              v38 -= 24;
            }
            while (v38);
          }
        }
        result = (uint64_t)sub_2237A4710(v68, v8);
LABEL_23:
        v8 += 424;
        if (v8 == v9)
          goto LABEL_87;
      }
    }
    goto LABEL_87;
  }
  if (*(_BYTE *)(a2 + 26))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 354, (uint64_t)"!update.update_state.has_value()", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_136;
  }
  if (*(_QWORD *)(a2 + 64))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 355, (uint64_t)"update.plane_changes.AddedOrModified().empty()", 46, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_136;
  }
LABEL_87:
  if (!*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 64) == (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4)
      return result;
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp", 369, (uint64_t)"update.plane_changes.Removed().empty()", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (!(_DWORD)result)
      return result;
    goto LABEL_136;
  }
  result = sub_2237DA2E0((int *)a2);
  if ((result & 1) != 0)
    goto LABEL_102;
  if (*(_DWORD *)a2 != 1)
  {
    v45 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeUpdateHandler.cpp";
    v46 = "update.IsRemoved() || update.IsModified()";
    v47 = 359;
    v48 = 41;
LABEL_101:
    result = sub_224573870(v45, v47, (uint64_t)v46, v48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (!(_DWORD)result)
      goto LABEL_102;
LABEL_136:
    abort();
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 86, (uint64_t)"kpseg_curr.has_value()", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_136;
  }
  if (!*(_BYTE *)(a2 + 26))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h", 87, (uint64_t)"update_state.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_136;
  }
  if (*(_BYTE *)(a2 + 25) && !*(_BYTE *)(a2 + 80))
  {
    v45 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruc"
          "tion/KeyframePlanes/v2/KeyframePlaneSegmentationUpdate.h";
    v46 = "!update_state->content_updated || kpseg_prev.has_value()";
    v47 = 88;
    v48 = 56;
    goto LABEL_101;
  }
LABEL_102:
  v49 = *(_QWORD *)(a2 + 72);
  v50 = *(unsigned __int8 **)(v49 + 160);
  for (i = *(unsigned __int8 **)(v49 + 168); v50 != i; v50 += 424)
  {
    v52 = *(_QWORD *)(a2 + 64);
    v54 = *(_QWORD *)(a2 + 32);
    v53 = *(unsigned __int8 **)(a2 + 40);
    v55 = ((uint64_t)&v53[-v54] >> 4) - v52;
    if (v55)
    {
      v56 = (unsigned __int8 *)(v54 + 16 * v52);
      do
      {
        v57 = v55 >> 1;
        v58 = &v56[16 * (v55 >> 1)];
        v59 = *v58;
        v60 = *v50;
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[1];
        v60 = v50[1];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[2];
        v60 = v50[2];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[3];
        v60 = v50[3];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[4];
        v60 = v50[4];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[5];
        v60 = v50[5];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[6];
        v60 = v50[6];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[7];
        v60 = v50[7];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[8];
        v60 = v50[8];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[9];
        v60 = v50[9];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[10];
        v60 = v50[10];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[11];
        v60 = v50[11];
        if (v59 != v60)
          goto LABEL_124;
        v59 = v58[12];
        v60 = v50[12];
        if (v59 != v60
          || (v59 = v58[13], v60 = v50[13], v59 != v60)
          || (v59 = v58[14], v60 = v50[14], v59 != v60)
          || (v59 = v58[15], v60 = v50[15], v59 != v60))
        {
LABEL_124:
          v61 = v55 + ~v57;
          v62 = v58 + 16;
          if (v59 < v60)
          {
            v57 = v61;
            v56 = v62;
          }
        }
        v55 = v57;
      }
      while (v57);
      if (v56 != v53)
      {
        result = sub_22319835C(v50, v56);
        if ((result & 0x80) == 0)
        {
          v63 = v69[56];
          if (v63)
          {
            v64 = *(__int16 **)(a2 + 72);
            v65 = v69[55];
            v66 = 24 * v63;
            while (1)
            {
              v71 = v50;
              v72 = v64;
              v67 = *(unsigned int *)(v65 + 16);
              if ((_DWORD)v67 == -1)
                break;
              v74 = &v71;
              ((void (*)(unsigned __int8 ***, uint64_t))off_24EC5A110[v67])(&v74, v65);
              v65 += 24;
              v66 -= 24;
              if (!v66)
                goto LABEL_104;
            }
LABEL_135:
            sub_22316DD70();
          }
LABEL_104:
          result = (uint64_t)sub_2237A2550(v69 + 94, v50);
        }
      }
    }
  }
  return result;
}

void **sub_2237E4174(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;

  v2 = (char *)a1[6];
  if (v2)
  {
    v3 = (char *)a1[7];
    v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 7);
        if (v5)
        {
          *((_QWORD *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v6 = (char *)a1[3];
  if (v6)
  {
    v7 = (char *)a1[4];
    v8 = a1[3];
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 7);
        if (v9)
        {
          *((_QWORD *)v7 - 6) = v9;
          operator delete(v9);
        }
        v7 -= 88;
      }
      while (v7 != v6);
      v8 = a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
  v10 = (char *)*a1;
  if (*a1)
  {
    v11 = (char *)a1[1];
    v12 = *a1;
    if (v11 != v10)
    {
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 7);
        if (v13)
        {
          *((_QWORD *)v11 - 6) = v13;
          operator delete(v13);
        }
        v11 -= 88;
      }
      while (v11 != v10);
      v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void **sub_2237E4274(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  char v14;
  char v15;
  char v16;

  v2 = (unsigned int *)a1[55];
  if (v2)
  {
    v3 = (unsigned int *)a1[54];
    do
    {
      v4 = v3[4];
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, unsigned int *))off_24EC5A000[v4])(&v14, v3);
      v3[4] = -1;
      v3 += 6;
      v2 = (unsigned int *)((char *)v2 - 1);
    }
    while (v2);
  }
  if (a1[56])
  {
    v5 = (unsigned int **)a1[54];
    if (a1 + 57 != (void **)v5)
      operator delete(v5);
  }
  v6 = (unsigned int *)a1[28];
  if (v6)
  {
    v7 = (unsigned int *)a1[27];
    do
    {
      v8 = v7[4];
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, unsigned int *))off_24EC5A010[v8])(&v15, v7);
      v7[4] = -1;
      v7 += 6;
      v6 = (unsigned int *)((char *)v6 - 1);
    }
    while (v6);
  }
  if (a1[29])
  {
    v9 = (unsigned int **)a1[27];
    if (a1 + 30 != (void **)v9)
      operator delete(v9);
  }
  v10 = (unsigned int *)a1[1];
  if (v10)
  {
    v11 = (unsigned int *)*a1;
    do
    {
      v12 = v11[4];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))off_24EC5A020[v12])(&v16, v11);
      v11[4] = -1;
      v11 += 6;
      v10 = (unsigned int *)((char *)v10 - 1);
    }
    while (v10);
  }
  if (a1[2] && a1 + 3 != *a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_2237E43F0(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237E4400(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237E4410(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237E4420(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237E4430(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237E4440(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

char *sub_2237E4450(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  void *v18;

  v2 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_223174E94();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v2];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 11) = *(_OWORD *)(a2 + 11);
  v9 = &v7[88 * v6];
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  v10 = v8 + 88;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v8[v13];
      v15 = &v12[v13];
      v16 = *(_OWORD *)&v12[v13 - 88];
      *(_OWORD *)(v14 - 77) = *(_OWORD *)&v12[v13 - 77];
      *(_OWORD *)(v14 - 88) = v16;
      *((_QWORD *)v14 - 6) = 0;
      *((_QWORD *)v14 - 5) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)&v12[v13 - 56];
      *((_QWORD *)v14 - 5) = *(_QWORD *)&v12[v13 - 40];
      *((_QWORD *)v15 - 7) = 0;
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v15 - 5) = 0;
      *((_OWORD *)v14 - 2) = *(_OWORD *)&v12[v13 - 32];
      *((_OWORD *)v14 - 1) = *(_OWORD *)&v12[v13 - 16];
      v13 -= 88;
    }
    while (&v12[v13] != v11);
    v12 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = &v8[v13];
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v12)
    {
      v18 = (void *)*((_QWORD *)v17 - 7);
      if (v18)
      {
        *((_QWORD *)v17 - 6) = v18;
        operator delete(v18);
      }
      v17 -= 88;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t sub_2237E4608(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

uint64_t sub_2237E4620(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

uint64_t sub_2237E4638(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4650(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4668(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4680(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4698(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237E46B0(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237E46C8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237E46E0(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237E46F8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237E4710(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237E4728(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237E4740(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237E4758(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4770(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4788(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1], (*a1)[2], *(_QWORD *)(*a1)[3], *(_QWORD *)((*a1)[3] + 8));
}

uint64_t sub_2237E47A8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1], (*a1)[2], *(_QWORD *)(*a1)[3], *(_QWORD *)((*a1)[3] + 8));
}

uint64_t sub_2237E47C8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E47E0(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E47F8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1], (*a1)[2]);
}

uint64_t sub_2237E4814(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1, (*a1)[1], (*a1)[2]);
}

uint64_t sub_2237E4830(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1, (*a1)[1]);
}

uint64_t sub_2237E4848(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1, (*a1)[1]);
}

uint64_t *sub_2237E4860(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x200uLL, (std::align_val_t)0x80uLL);
    v13 = *a4;
    *((_OWORD *)v12 + 8) = **a3;
    v12[32] = (uint64_t)&off_24EC20828;
    v12[33] = (uint64_t)&off_24EC20868;
    v12[34] = *(_QWORD *)(v13 + 16);
    v12[35] = *(_QWORD *)(v13 + 24);
    *((_OWORD *)v12 + 18) = *(_OWORD *)(v13 + 32);
    v15 = *(_OWORD *)(v13 + 48);
    v14 = *(_OWORD *)(v13 + 64);
    *((_DWORD *)v12 + 84) = *(_DWORD *)(v13 + 80);
    *((_OWORD *)v12 + 19) = v15;
    *((_OWORD *)v12 + 20) = v14;
    v12[43] = *(_QWORD *)(v13 + 88);
    v12[32] = (uint64_t)&off_24EC207B8;
    v16 = *(_OWORD *)(v13 + 112);
    v18 = *(_OWORD *)(v13 + 128);
    v17 = *(_OWORD *)(v13 + 144);
    *((_OWORD *)v12 + 22) = *(_OWORD *)(v13 + 96);
    *((_OWORD *)v12 + 23) = v16;
    *((_OWORD *)v12 + 24) = v18;
    *((_OWORD *)v12 + 25) = v17;
    v12[53] = 0;
    v12[54] = 0;
    v12[52] = 0;
    *((_OWORD *)v12 + 26) = *(_OWORD *)(v13 + 160);
    v12[54] = *(_QWORD *)(v13 + 176);
    *(_QWORD *)(v13 + 160) = 0;
    *(_QWORD *)(v13 + 168) = 0;
    *(_QWORD *)(v13 + 176) = 0;
    *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 184);
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(v13 + 200);
    *(_QWORD *)(v13 + 200) = 0;
    *(_QWORD *)(v13 + 208) = 0;
    v19 = *(_OWORD *)(v13 + 216);
    *(_OWORD *)(v12 + 61) = *(_OWORD *)(v13 + 232);
    *(_OWORD *)(v12 + 59) = v19;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v8 = v12;
    v20 = (uint64_t *)**a1;
    v21 = v12;
    if (v20)
    {
      *a1 = v20;
      v21 = *v8;
    }
    sub_2231A9A8C(a1[1], v21);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v12;
  }
  while (1)
  {
    while (1)
    {
      v10 = (uint64_t **)v7;
      v11 = (unsigned __int8 *)(v7 + 16);
      if ((sub_22319835C(a2, (unsigned __int8 *)v7 + 128) & 0x80) == 0)
        break;
      v7 = *v10;
      v8 = v10;
      if (!*v10)
        goto LABEL_10;
    }
    if ((sub_22319835C(v11, a2) & 0x80) == 0)
      break;
    v8 = v10 + 1;
    v7 = v10[1];
    if (!v7)
      goto LABEL_10;
  }
  v12 = *v8;
  if (!*v8)
    goto LABEL_10;
  return v12;
}

void sub_2237E4A14(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  BOOL v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  float32x2_t *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  _BYTE *v94;
  uint64_t (**v95)();
  uint64_t (**v96)();
  int8x16_t v97;
  float32x2_t v98;
  void ***v99;
  uint64_t *v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void ***v121;
  uint64_t (**v122)();
  _BYTE *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  int8x16_t v127;
  uint64_t (**v128)();
  uint64_t v129;
  uint64_t (**v130)();
  void *v131;
  uint64_t (*v132)();
  uint64_t (*v133)();
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float32x2_t v147;
  int8x16_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float v151;
  float v152;
  _BOOL4 v153;
  float32x2_t v154;
  float v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  double v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  const std::nothrow_t *v171;
  unint64_t v172;
  double *v173;
  BOOL v174;
  char *v175;
  size_t v176;
  _QWORD *v177;
  _QWORD *v178;
  __int128 *v179;
  __int128 *v180;
  unint64_t v181;
  unsigned __int8 *v182;
  double *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t *v199;
  uint64_t *v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  char *v206;
  uint64_t (***v207)();
  uint64_t (***v208)();
  _QWORD *v209;
  uint64_t (***v210)();
  uint64_t v211;
  uint64_t *v212;
  uint64_t **v213;
  uint64_t *v214;
  uint64_t **v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t **v218;
  uint64_t **v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t *v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unsigned int v241;
  BOOL v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  _BYTE *v250;
  _BYTE *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t (***v263)();
  uint64_t v264;
  uint64_t (***v265)();
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  __n128 v282;
  uint64_t v283;
  void **v284;
  void *v285;
  _QWORD *v286;
  void **v287;
  void **v288;
  void **v289;
  void **v290;
  void *v291;
  void *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unsigned __int8 v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  char *v304;
  char *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  _BYTE *v315;
  uint64_t *v316;
  uint64_t v317;
  int64_t v318;
  unint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _OWORD *v325;
  uint64_t *v326;
  uint64_t v327;
  __int128 v328;
  void *v329;
  const char *v330;
  uint64_t v331;
  const char *v332;
  size_t v333;
  unsigned __int8 v334;
  unsigned __int8 v335;
  const char *v336;
  size_t v337;
  _BYTE *v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE *v341;
  NSObject *v342;
  uint64_t v343;
  uint64_t v344;
  size_t v345;
  std::__shared_weak_count_vtbl *v346;
  std::__shared_weak_count *v347;
  size_t v348;
  size_t v349;
  void *v350;
  void *v351;
  int v352;
  _BYTE *v353;
  uint64_t v354;
  uint64_t v355;
  size_t v356;
  size_t v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  char *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  _QWORD *v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  const char *v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  __int128 v408;
  const char *v409;
  void *v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  void **v414;
  void *v415;
  char *v416;
  unint64_t v417;
  char *v418;
  char *v419;
  void *v420;
  void *v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v436;
  uint64_t v437;
  const char *v438;
  unint64_t v439;
  __int128 v440;
  uint64_t v441;
  void *v442;
  void **v443;
  uint64_t *v444;
  uint64_t v445;
  unint64_t v446;
  const char *v447;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void **v455;
  uint64_t v456;
  _QWORD *v458;
  void *v459;
  _BYTE *v460;
  void *v461;
  void *v462;
  uint64_t v463;
  std::__shared_weak_count *v464;
  void *v465;
  _BYTE *v466;
  void *v467;
  _BYTE *v468;
  __int128 v469;
  _BYTE v470[12];
  int v471;
  unint64_t v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  uint64_t **v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  void *v480;
  _BYTE *v481;
  _BYTE v482[12];
  int v483;
  unint64_t v484;
  uint64_t v485;
  _BYTE v486[40];
  uint64_t **v487;
  __int16 v488;
  void *v489;
  __int128 v490;
  __int128 v491;
  _QWORD *v492;
  __int16 v493;
  __int128 v494;
  _BYTE v495[32];
  char *v496;
  __int128 v497;
  _BYTE v498[32];
  __int128 v499;
  void **v500;
  __int128 v501;
  _BYTE v502[176];
  __int128 v503;
  int8x16_t v504;
  __int128 v505;
  __int128 v506;
  uint64_t (*v507)();
  int v508;
  __int128 v509;
  uint64_t (*v510)();
  unint64_t v511;
  uint64_t (*v512)();
  uint64_t (*v513)();
  char v514;
  int v515;
  __int128 v516;
  uint64_t v517;
  char v518;
  __int128 __p;
  uint64_t v520;
  char v521;
  __int128 __src;
  uint64_t v523;
  __int128 v524;
  uint64_t **v525;
  uint64_t *v526;
  uint64_t v527;
  __int128 v528;
  std::__shared_weak_count *v529;
  char *v530;
  std::__shared_weak_count *v531;
  uint64_t (**v532)();
  __int128 v533;
  uint64_t (***v534)();
  void *v535[3];
  __int128 v536;
  _QWORD *v537;
  uint64_t (**v538)();
  __int128 v539;
  uint64_t (***v540)();
  void *v541;
  uint64_t (**rep)();
  std::__shared_weak_count *v543;
  uint64_t v544;
  uint64_t (***v545)();
  uint64_t v546;
  uint64_t (**v547)();
  __int128 v548;
  uint64_t (***v549)();
  _BYTE v550[56];
  __int128 v551;
  _BYTE *v552;
  uint64_t v553;

  v10 = a4;
  v553 = *MEMORY[0x24BDAC8D0];
  v444 = *a1;
  if (!sub_2231D01EC(a4)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/SingleKeyframeDetector.cpp", 163, (uint64_t)"kf.IsValid()", 12, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231D3D90(v10, (uint64_t)&v499);
  if (DWORD2(v501))
    v12 = HIDWORD(v501) == 0;
  else
    v12 = 1;
  v13 = v12;
  v14 = (std::__shared_weak_count *)v500;
  if (!v500)
    goto LABEL_13;
  v15 = (unint64_t *)(v500 + 1);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_15;
  }
  else
  {
LABEL_13:
    if (!v13)
      goto LABEL_15;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/SingleKeyframeDetector.cpp", 164, (uint64_t)"!kf.Depth().Empty()", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  LODWORD(v494) = 1036831949;
  *((_QWORD *)&v494 + 1) = 2;
  *(_QWORD *)&v495[4] = 0x3F5333333951B717;
  *(_DWORD *)&v495[20] = 1065098332;
  v495[24] = 1;
  *(_DWORD *)&v495[28] = 1077936128;
  *(_DWORD *)v495 = *(_DWORD *)a7;
  *(_QWORD *)&v495[12] = *(_QWORD *)(a7 + 8);
  sub_2231D3D90(v10, (uint64_t)&__src);
  sub_2231D494C(v10, (uint64_t)v550);
  sub_2231D4288(v10, (uint64_t)&v489);
  sub_2231D432C(v10, (uint64_t)&v541);
  v17 = v544;
  if ((_BYTE)v549 && v544)
  {
    v18 = rep;
    v19 = v543;
    if (v543)
    {
      p_shared_owners = (unint64_t *)&v543->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    (*((void (**)(uint64_t (**)(), _QWORD, const char *))*v18 + 11))(v18, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v17 = v544;
  }
  v442 = (void *)v17;
  if (DWORD1(v548))
    v23 = (_DWORD)v548 == 0;
  else
    v23 = 1;
  v24 = v548;
  if (v23)
    v24 = 0;
  *(_QWORD *)((char *)&v499 + 4) = v24;
  LODWORD(v499) = 3;
  v25 = (_BYTE *)v499;
  v439 = v24;
  v26 = HIDWORD(v24);
  LODWORD(v499) = 1;
  v27 = *((_QWORD *)&v548 + 1);
  *(_QWORD *)((char *)&v499 + 4) = *((_QWORD *)&v548 + 1);
  v28 = v499;
  v451 = HIDWORD(*((_QWORD *)&v548 + 1));
  if (HIDWORD(v548) * HIDWORD(v24) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v29 = (float *)sub_2231D0224(v10);
  v436 = a6;
  v437 = v10;
  *(_QWORD *)v486 = &off_24EC200A8;
  v30 = *((_QWORD *)&__src + 1);
  v31 = (std::__shared_weak_count *)v523;
  if (v523)
  {
    v32 = (unint64_t *)(v523 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v34 = (__int16)v526;
    do
      v35 = __ldxr(v32);
    while (__stxr(v35 + 1, v32));
    *(_OWORD *)&v486[24] = v524;
    v487 = v525;
    do
      v36 = __ldxr(v32);
    while (__stxr(v36 + 1, v32));
    *(_QWORD *)&v486[8] = v30;
    *(_QWORD *)&v486[16] = v31;
    v488 = v34;
    do
      v37 = __ldaxr(v32);
    while (__stlxr(v37 - 1, v32));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    do
      v38 = __ldaxr(v32);
    while (__stlxr(v38 - 1, v32));
    v10 = v437;
    if (v38)
    {
      v535[0] = &off_24EC200A8;
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
      v39 = (void *)v490;
      if (*((_QWORD *)&v490 + 1))
        goto LABEL_45;
LABEL_59:
      v535[1] = v39;
      v535[2] = 0;
      v536 = v491;
      v537 = v492;
      LOWORD(v538) = v493;
      v46 = a3;
      v48 = v26;
      v50 = v442;
      goto LABEL_60;
    }
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v535[0] = &off_24EC200A8;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
    v39 = (void *)v490;
    if (!*((_QWORD *)&v490 + 1))
      goto LABEL_59;
  }
  else
  {
    *(_QWORD *)&v486[8] = *((_QWORD *)&__src + 1);
    *(_QWORD *)&v486[16] = 0;
    *(_OWORD *)&v486[24] = v524;
    v487 = v525;
    v488 = (__int16)v526;
    v535[0] = &off_24EC200A8;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
    v39 = (void *)v490;
    if (!*((_QWORD *)&v490 + 1))
      goto LABEL_59;
  }
LABEL_45:
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  v43 = v493;
  do
    v44 = __ldxr(v41);
  while (__stxr(v44 + 1, v41));
  v536 = v491;
  v537 = v492;
  do
    v45 = __ldxr(v41);
  while (__stxr(v45 + 1, v41));
  v535[1] = v39;
  v535[2] = v40;
  LOWORD(v538) = v43;
  v46 = a3;
  do
    v47 = __ldaxr(v41);
  while (__stlxr(v47 - 1, v41));
  v48 = v26;
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  do
    v49 = __ldaxr(v41);
  while (__stlxr(v49 - 1, v41));
  v50 = v442;
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_60:
  LOBYTE(v539) = 1;
  LOBYTE(v528) = 0;
  LOBYTE(v533) = 0;
  v480 = v50;
  v481 = v25;
  *(_QWORD *)&v482[4] = v28;
  *(_DWORD *)v482 = v48;
  v483 = v451;
  v484 = v439;
  v485 = v27;
  v477 = v494;
  v478 = *(_OWORD *)v495;
  v479 = *(_OWORD *)&v495[16];
  sub_223794664(v29, (uint64_t)v486, (uint64_t)v535, (uint64_t)&v528, (uint64_t)&v480, (float *)&v477, (uint64_t)&v499);
  if ((_BYTE)v533)
  {
    v51 = v529;
    if (v529)
    {
      v52 = (unint64_t *)&v529->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  if ((_BYTE)v539)
  {
    v54 = (std::__shared_weak_count *)v535[2];
    if (v535[2])
    {
      v55 = (unint64_t *)((char *)v535[2] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  v57 = *(std::__shared_weak_count **)&v486[16];
  if (*(_QWORD *)&v486[16])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v486[16] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *(_QWORD *)v498 = &off_24EC22138;
  sub_2236B487C((uint64_t)&v499, (uint64_t *)&v498[8]);
  sub_223794270((uint64_t)v550, (uint64_t)v498);
  v60 = *(std::__shared_weak_count **)&v498[16];
  if (*(_QWORD *)&v498[16])
  {
    v61 = (unint64_t *)(*(_QWORD *)&v498[16] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v63 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  *(double *)&qword_25578BAF0 = (double)*v46 / 1000000000.0;
  v64 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v64 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  v65 = (char *)operator new(0x20uLL);
  strcpy(v65, "cv3d.recon.KeyframePlanesV2");
  if (byte_25578BAF8[23] < 0)
    sub_22319C4B8((void **)byte_25578BAF8, v65, 0x1BuLL);
  else
    sub_22319C3F4(byte_25578BAF8, v65, 0x1BuLL);
  operator delete(v65);
  if ((_BYTE)v526 && (_QWORD)v524)
  {
    v66 = *((_QWORD *)&__src + 1);
    v67 = (std::__shared_weak_count *)v523;
    if (v523)
    {
      v68 = (unint64_t *)(v523 + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 - 1, v68));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v66 + 88))(v66, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1287");
  }
  v475 = v524;
  v476 = v525;
  v71 = (char *)*((_QWORD *)&v501 + 1);
  if (v502[40] && *((_QWORD *)&v501 + 1))
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)&v499 + 1) + 88))(*((_QWORD *)&v499 + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1305");
    v71 = (char *)*((_QWORD *)&v501 + 1);
  }
  v474 = *(_OWORD *)v502;
  *(_QWORD *)&v469 = v50;
  *((_QWORD *)&v469 + 1) = v25;
  *(_QWORD *)&v470[4] = v28;
  *(_DWORD *)v470 = v48;
  v471 = v451;
  v472 = v439;
  v473 = v27;
  v72 = (float32x2_t *)sub_2231D0224(v10);
  v73 = *v444;
  v496 = v71;
  v497 = v474;
  sub_223EE6F04(v73, (uint64_t)&v475, (uint64_t)&v496, (uint64_t)&v469, v72, a2, (float *)&v494, (uint64_t)&v459);
  v74 = (std::__shared_weak_count *)v500;
  if (v500)
  {
    v75 = (unint64_t *)(v500 + 1);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v543;
  if (v543)
  {
    v78 = (unint64_t *)&v543->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
  if (*((_QWORD *)&v490 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *(std::__shared_weak_count **)&v550[16];
  if (*(_QWORD *)&v550[16])
  {
    v84 = (unint64_t *)(*(_QWORD *)&v550[16] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)v523;
  if (v523)
  {
    v87 = (unint64_t *)(v523 + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = 0xAAAAAAAAAAAAAAABLL * ((v460 - (_BYTE *)v459) >> 3);
  if (v89 != (v468 - (_BYTE *)v467) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/SingleKeyframeDetector.cpp", 202, (uint64_t)"ss_res.planes.size() == ss_res.segment_image_extents.areas.size()", 65, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_826;
    }
    v89 = 0xAAAAAAAAAAAAAAABLL * ((v460 - (_BYTE *)v459) >> 3);
  }
  if (v89 != (v466 - (_BYTE *)v465) >> 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/SingleKeyframeDetector.cpp", 203, (uint64_t)"ss_res.planes.size() == ss_res.segment_image_extents.boxes.size()", 65, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_826:
    abort();
  }
  *(_QWORD *)&v499 = &off_24EC21420;
  sub_2231FBAA0((uint64_t)&v463, (uint64_t *)&v499 + 1);
  sub_223792D7C((uint64_t)&v499, -85 * ((v460 - (_BYTE *)v459) >> 3), &v541);
  v90 = (std::__shared_weak_count *)v500;
  if (v500)
  {
    v91 = (unint64_t *)(v500 + 1);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (char *)v459;
  v94 = v460;
  v95 = rep;
  v96 = (uint64_t (**)())v541;
  if (0xAAAAAAAAAAAAAAABLL * ((v460 - (_BYTE *)v459) >> 3) != 0x2E8BA2E8BA2E8BA3
                                                             * (((char *)rep - (_BYTE *)v541) >> 3))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/SingleKeyframeDetector.cpp", 206, (uint64_t)"ss_res.planes.size() == plane_regions.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v93 = (char *)v459;
    v94 = v460;
    v96 = (uint64_t (**)())v541;
    v95 = rep;
  }
  memset(v550, 0, 24);
  sub_2236E9F74((char **)v550, 0x5555555555555555 * ((v93 - v94) >> 3));
  if (v93 != v94 || v96 != v95)
  {
    v99 = &v500;
    do
    {
      v100 = a1[5];
      if (!v100)
        sub_223198474();
      *(_QWORD *)&v499 = (*(uint64_t (**)(uint64_t *))(*v100 + 48))(v100);
      *((_QWORD *)&v499 + 1) = v101;
      v102 = *(void ***)v93;
      *((_DWORD *)v99 + 2) = *((_DWORD *)v93 + 2);
      *v99 = v102;
      v103 = *(_QWORD *)(v93 + 12);
      HIDWORD(v501) = *((_DWORD *)v93 + 5);
      *(_QWORD *)((char *)&v501 + 4) = v103;
      v104 = (unint64_t)v96[7];
      *(float *)v502 = (float)v104;
      memset(&v502[4], 0, 168);
      v504.i8[8] = 0;
      BYTE8(v505) = 0;
      v503 = 0uLL;
      v504.i32[0] = 0;
      v506 = *(_OWORD *)v96;
      v507 = v96[2];
      *v96 = 0;
      v96[1] = 0;
      v96[2] = 0;
      v508 = *((_DWORD *)v96 + 6);
      v509 = *((_OWORD *)v96 + 2);
      v510 = v96[6];
      v96[4] = 0;
      v96[5] = 0;
      v96[6] = 0;
      v511 = v104;
      v512 = v96[8];
      LOBYTE(v513) = 0;
      v514 = 0;
      if (*((_BYTE *)v96 + 80))
      {
        v513 = v96[9];
        v514 = 1;
      }
      v515 = 1;
      LOBYTE(v516) = 0;
      v518 = 0;
      LOBYTE(__p) = 0;
      v521 = 0;
      v105 = *(_QWORD *)&v550[8];
      if (*(_QWORD *)&v550[8] >= *(_QWORD *)&v550[16])
      {
        v117 = sub_22370CA60(v550, (uint64_t)&v499);
      }
      else
      {
        **(_OWORD **)&v550[8] = v499;
        v106 = *v99;
        *(_DWORD *)(v105 + 24) = *((_DWORD *)v99 + 2);
        *(_QWORD *)(v105 + 16) = v106;
        v107 = *(_QWORD *)((char *)&v501 + 4);
        *(_DWORD *)(v105 + 36) = HIDWORD(v501);
        *(_QWORD *)(v105 + 28) = v107;
        v108 = *(_OWORD *)&v502[16];
        *(_OWORD *)(v105 + 40) = *(_OWORD *)v502;
        *(_OWORD *)(v105 + 56) = v108;
        v109 = *(_OWORD *)&v502[32];
        v110 = *(_OWORD *)&v502[48];
        v111 = *(_OWORD *)&v502[64];
        *(_OWORD *)(v105 + 120) = *(_OWORD *)&v502[80];
        *(_OWORD *)(v105 + 104) = v111;
        *(_OWORD *)(v105 + 88) = v110;
        *(_OWORD *)(v105 + 72) = v109;
        v112 = *(_OWORD *)&v502[96];
        v113 = *(_OWORD *)&v502[112];
        v114 = *(_OWORD *)&v502[128];
        *(_OWORD *)(v105 + 184) = *(_OWORD *)&v502[144];
        *(_OWORD *)(v105 + 168) = v114;
        *(_OWORD *)(v105 + 152) = v113;
        *(_OWORD *)(v105 + 136) = v112;
        v115 = *(_OWORD *)&v502[160];
        v116 = v503;
        v97 = v504;
        *(_OWORD *)(v105 + 248) = v505;
        *(int8x16_t *)(v105 + 232) = v97;
        *(_OWORD *)(v105 + 216) = v116;
        *(_OWORD *)(v105 + 200) = v115;
        *(_QWORD *)(v105 + 272) = 0;
        *(_QWORD *)(v105 + 280) = 0;
        *(_QWORD *)(v105 + 264) = 0;
        *(_OWORD *)(v105 + 264) = v506;
        *(_QWORD *)(v105 + 280) = v507;
        v506 = 0uLL;
        v507 = 0;
        *(_DWORD *)(v105 + 288) = v508;
        *(_QWORD *)(v105 + 304) = 0;
        *(_QWORD *)(v105 + 312) = 0;
        *(_QWORD *)(v105 + 296) = 0;
        *(_OWORD *)(v105 + 296) = v509;
        *(_QWORD *)(v105 + 312) = v510;
        v509 = 0uLL;
        v510 = 0;
        *(_QWORD *)(v105 + 320) = v511;
        *(_QWORD *)(v105 + 328) = v512;
        *(_BYTE *)(v105 + 336) = 0;
        *(_BYTE *)(v105 + 344) = 0;
        if (v514)
        {
          *(_QWORD *)(v105 + 336) = v513;
          *(_BYTE *)(v105 + 344) = 1;
        }
        *(_DWORD *)(v105 + 352) = v515;
        *(_BYTE *)(v105 + 360) = 0;
        *(_BYTE *)(v105 + 384) = 0;
        if (v518)
        {
          *(_QWORD *)(v105 + 360) = 0;
          *(_QWORD *)(v105 + 368) = 0;
          *(_QWORD *)(v105 + 376) = 0;
          *(_OWORD *)(v105 + 360) = v516;
          *(_QWORD *)(v105 + 376) = v517;
          v516 = 0uLL;
          v517 = 0;
          *(_BYTE *)(v105 + 384) = 1;
        }
        *(_BYTE *)(v105 + 392) = 0;
        *(_BYTE *)(v105 + 416) = 0;
        if (v521)
        {
          *(_QWORD *)(v105 + 392) = 0;
          *(_QWORD *)(v105 + 400) = 0;
          *(_QWORD *)(v105 + 408) = 0;
          *(_OWORD *)(v105 + 392) = __p;
          *(_QWORD *)(v105 + 408) = v520;
          __p = 0uLL;
          v520 = 0;
          *(_BYTE *)(v105 + 416) = 1;
        }
        v117 = v105 + 424;
      }
      *(_QWORD *)&v550[8] = v117;
      if (v521)
      {
        v118 = __p;
        if ((_QWORD)__p)
        {
          v119 = *((_QWORD *)&__p + 1);
          v120 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            v121 = v99;
            v122 = v95;
            v123 = v94;
            v124 = *((_QWORD *)&__p + 1);
            do
            {
              v126 = *(void **)(v124 - 24);
              v124 -= 24;
              v125 = v126;
              if (v126)
              {
                *(_QWORD *)(v119 - 16) = v125;
                operator delete(v125);
              }
              v119 = v124;
            }
            while (v124 != v118);
            v120 = (void *)__p;
            v94 = v123;
            v95 = v122;
            v99 = v121;
          }
          *((_QWORD *)&__p + 1) = v118;
          operator delete(v120);
        }
      }
      if (v518 && (_QWORD)v516)
      {
        *((_QWORD *)&v516 + 1) = v516;
        operator delete((void *)v516);
      }
      if ((_QWORD)v509)
      {
        *((_QWORD *)&v509 + 1) = v509;
        operator delete((void *)v509);
      }
      if ((_QWORD)v506)
      {
        *((_QWORD *)&v506 + 1) = v506;
        operator delete((void *)v506);
      }
      v93 += 24;
      v96 += 11;
    }
    while (v93 != v94 || v96 != v95);
  }
  v127 = *(int8x16_t *)v550;
  v469 = *(_OWORD *)v550;
  *(_QWORD *)v470 = *(_QWORD *)&v550[16];
  v128 = (uint64_t (**)())v541;
  v129 = v437;
  if (v541)
  {
    v130 = rep;
    v131 = v541;
    if (rep != v541)
    {
      do
      {
        v132 = *(v130 - 7);
        if (v132)
        {
          *(v130 - 6) = v132;
          operator delete(v132);
        }
        v133 = *(v130 - 11);
        if (v133)
        {
          *(v130 - 10) = v133;
          operator delete(v133);
        }
        v130 -= 11;
      }
      while (v130 != v128);
      v131 = v541;
    }
    rep = v128;
    operator delete(v131);
  }
  v134 = a5;
  *(_QWORD *)&v475 = a5;
  *((_QWORD *)&v475 + 1) = v436;
  if (!(_BYTE)v436)
  {
    v180 = (__int128 *)*((_QWORD *)&v469 + 1);
    v179 = (__int128 *)v469;
    memset(v486, 0, 24);
    v181 = 0xDE304D4873ECADE3 * ((uint64_t)(v469 - *((_QWORD *)&v469 + 1)) >> 3);
    *(_QWORD *)&v486[24] = v181;
    *(_QWORD *)&v486[32] = v181;
    if ((_QWORD)v469 == *((_QWORD *)&v469 + 1))
    {
      v182 = 0;
    }
    else
    {
      if (v181 >> 60)
        sub_22316E078();
      *(_QWORD *)v486 = operator new(0xE304D4873ECADE30 * ((uint64_t)(v469 - *((_QWORD *)&v469 + 1)) >> 3));
      *(_QWORD *)&v486[8] = *(_QWORD *)v486;
      *(_QWORD *)&v486[16] = *(_QWORD *)v486 + 16 * v181;
      *(_QWORD *)v550 = v486;
      do
      {
        v499 = *v179;
        sub_2232E9564((char ***)v550, &v499);
        v179 = (__int128 *)((char *)v179 + 424);
      }
      while (v179 != v180);
      v182 = *(unsigned __int8 **)v486;
      v181 = *(_QWORD *)&v486[24];
    }
    v275 = 126 - 2 * __clz(v181);
    if (v181)
      v276 = v275;
    else
      v276 = 0;
    sub_2237A5F44(v182, &v182[16 * v181], (uint64_t)&v499, v276, 1);
    v277 = 126 - 2 * __clz(*(_QWORD *)&v486[32] - *(_QWORD *)&v486[24]);
    if (*(_QWORD *)&v486[32] == *(_QWORD *)&v486[24])
      v278 = 0;
    else
      v278 = v277;
    sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[24]), (unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[32]), (uint64_t)&v499, v278, 1);
    v279 = (uint64_t)(*(_QWORD *)&v486[8] - *(_QWORD *)v486) >> 4;
    v280 = 126 - 2 * __clz(v279 - *(_QWORD *)&v486[32]);
    if (v279 == *(_QWORD *)&v486[32])
      v281 = 0;
    else
      v281 = v280;
    sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[32]), *(unsigned __int8 **)&v486[8], (uint64_t)&v499, v281, 1);
    goto LABEL_530;
  }
  v136 = *a5;
  v135 = a5[1];
  v137 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)&v469 + 1) - v469) >> 3);
  v499 = 0uLL;
  v500 = 0;
  v138 = 0x21CFB2B78C13521DLL * ((v135 - v136) >> 3);
  v440 = v469;
  v445 = v136;
  v449 = v135;
  if (v135 != v136 && *((_QWORD *)&v469 + 1) != (_QWORD)v469)
  {
    v139 = 0;
    v452 = 0x21CFB2B78C13521DLL * ((v135 - v136) >> 3);
    v455 = 0;
    v140 = 0;
    v141 = 0;
    while (1)
    {
      v142 = 0;
      do
      {
        v143 = *v134;
        v144 = v469;
        v145 = *v134 + 424 * v141;
        v146 = v469 + 424 * v142;
        v98.i32[0] = *(_DWORD *)(v145 + 36);
        v97.i64[0] = *(_QWORD *)(v145 + 28);
        v147 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1);
        v127.i64[0] = *(_QWORD *)(v146 + 28);
        v148 = v97;
        v148.i32[2] = v98.i32[0];
        v149 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1);
        v150 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v127.i8), v149, *(float32x2_t *)v97.i8, 1);
        v97.i32[0] = *(_DWORD *)(v146 + 36);
        v151 = vmla_f32(v150, *(float32x2_t *)v97.i8, v98).f32[0];
        v152 = v151 + -0.96593;
        if (v151 < 0.96593)
          v152 = 0.96593 - v151;
        v153 = v152 <= 0.000001;
        if (v151 >= 0.96593)
          v153 = 1;
        v154 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), v147, v147), v98, v98);
        if (v154.f32[0] != 1.0)
        {
          v155 = v154.f32[0] + -1.0;
          if (v154.f32[0] < 1.0)
            v155 = 1.0 - v154.f32[0];
          if (v155 > 0.000001)
            v148 = (int8x16_t)vmulq_n_f32((float32x4_t)v148, 1.0 / sqrtf(v154.f32[0]));
        }
        v98 = *(float32x2_t *)(v145 + 16);
        v154.i32[0] = *(_DWORD *)(v145 + 24);
        v156 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.i8, 1);
        v157 = (float32x2_t)vextq_s8(v148, v148, 8uLL).u64[0];
        v158 = *(float32x2_t *)(v146 + 16);
        v147.i32[0] = *(_DWORD *)(v146 + 24);
        if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v158, *(float32x2_t *)v148.i8), v156, v158, 1), v157, v147), vmla_f32(vmla_lane_f32(vmul_f32(v98, *(float32x2_t *)v148.i8), v156, v98, 1), v157, v154)).f32[0]) <= 0.1)
        {
          v127.i32[2] = *(_DWORD *)(v146 + 36);
          v159 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), v149, v149), *(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8).f32[0];
          if (v159 != 1.0)
          {
            v160 = v159 + -1.0;
            if (v159 < 1.0)
              v160 = 1.0 - v159;
            if (v160 > 0.000001)
              v127 = (int8x16_t)vmulq_n_f32((float32x4_t)v127, 1.0 / sqrtf(v159));
          }
          v97 = vextq_s8(v127, v127, 8uLL);
          v98 = vmla_f32(vmla_lane_f32(vmul_f32(v98, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v98, 1), *(float32x2_t *)v127.i8, 1), *(float32x2_t *)v97.i8, v154);
          *(float32x2_t *)v127.i8 = vsub_f32(v98, vmla_f32(vmla_lane_f32(vmul_f32(v158, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v158, 1), *(float32x2_t *)v127.i8, 1), *(float32x2_t *)v97.i8, v147));
          *(float *)v127.i32 = fabsf(*(float *)v127.i32);
          if (*(float *)v127.i32 > 0.1)
            v153 = 0;
          if (v153)
          {
            v161 = v469 + 424 * v142;
            v162 = v143 + 424 * v141;
            if (v161 == v162)
            {
              v163 = *(_QWORD *)(v161 + 320);
              if (!v163)
                goto LABEL_188;
            }
            else
            {
              *(_QWORD *)v550 = 0;
              v541 = v550;
              sub_223ECC288(v161 + 264, (uint64_t *)(v162 + 264), (_QWORD **)&v541);
              v163 = *(_QWORD *)v550;
              v134 = a5;
              if (!*(_QWORD *)v550)
                goto LABEL_188;
            }
            *(float *)v127.i32 = (float)v163
                               / (float)(*(_QWORD *)(v144 + 424 * v142 + 320)
                                       - v163
                                       + *(_QWORD *)(v143 + 424 * v141 + 320));
            if (*(float *)v127.i32 > 0.0)
            {
              v164 = *(float *)v127.i32;
              if (v140 >= (char *)v455)
              {
                v165 = 0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3) + 1;
                if (v165 > 0xAAAAAAAAAAAAAAALL)
                  sub_22316E078();
                if (0x5555555555555556 * (((char *)v455 - v139) >> 3) > v165)
                  v165 = 0x5555555555555556 * (((char *)v455 - v139) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v455 - v139) >> 3) >= 0x555555555555555)
                  v166 = 0xAAAAAAAAAAAAAAALL;
                else
                  v166 = v165;
                if (v166)
                {
                  if (v166 > 0xAAAAAAAAAAAAAAALL)
                    sub_223174E94();
                  v167 = (char *)operator new(24 * v166);
                  v134 = a5;
                  v168 = (uint64_t)&v167[8 * ((v140 - v139) >> 3)];
                  *(_QWORD *)v168 = v141;
                  *(_QWORD *)(v168 + 8) = v142;
                  *(double *)(v168 + 16) = v164;
                  if (v140 != v139)
                  {
LABEL_222:
                    v169 = v168;
                    do
                    {
                      v170 = (char *)(v169 - 24);
                      v127 = *(int8x16_t *)(v140 - 24);
                      *(_QWORD *)(v169 - 8) = *((_QWORD *)v140 - 1);
                      *(int8x16_t *)(v169 - 24) = v127;
                      v140 -= 24;
                      v169 -= 24;
                    }
                    while (v140 != v139);
LABEL_227:
                    v140 = (char *)(v168 + 24);
                    *(_QWORD *)&v499 = v170;
                    v455 = (void **)&v167[24 * v166];
                    v500 = v455;
                    if (v139)
                    {
                      operator delete(v139);
                      v134 = a5;
                    }
                    v139 = v170;
LABEL_187:
                    *((_QWORD *)&v499 + 1) = v140;
                    goto LABEL_188;
                  }
                }
                else
                {
                  v167 = 0;
                  v168 = 8 * ((v140 - v139) >> 3);
                  *(_QWORD *)v168 = v141;
                  *(_QWORD *)(v168 + 8) = v142;
                  *(double *)(v168 + 16) = v164;
                  if (v140 != v139)
                    goto LABEL_222;
                }
                v170 = (char *)v168;
                goto LABEL_227;
              }
              *(_QWORD *)v140 = v141;
              *((_QWORD *)v140 + 1) = v142;
              *((double *)v140 + 2) = v164;
              v140 += 24;
              goto LABEL_187;
            }
          }
        }
LABEL_188:
        ++v142;
      }
      while (v142 != v137);
      ++v141;
      v138 = v452;
      if (v141 == v452)
        goto LABEL_231;
    }
  }
  v140 = 0;
  v139 = 0;
LABEL_231:
  if (v140 - v139 < 1)
  {
LABEL_235:
    sub_2237E8D94((uint64_t)v139, (double *)v140, 0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3), 0, 0, *(__n64 *)v127.i8);
    v490 = 0uLL;
    v489 = 0;
    if (v449 == v445)
      goto LABEL_251;
  }
  else
  {
    v171 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v172 = 0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3);
    while (1)
    {
      v173 = (double *)operator new(24 * v172, v171);
      if (v173)
        break;
      v174 = v172 > 1;
      v172 >>= 1;
      if (!v174)
        goto LABEL_235;
    }
    v183 = v173;
    sub_2237E8D94((uint64_t)v139, (double *)v140, 0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3), v173, v172, *(__n64 *)v127.i8);
    operator delete(v183);
    v490 = 0uLL;
    v489 = 0;
    if (v449 == v445)
    {
LABEL_251:
      v175 = 0;
      v491 = 0uLL;
      v492 = 0;
      if (*((_QWORD *)&v440 + 1) == (_QWORD)v440)
        goto LABEL_252;
      goto LABEL_238;
    }
  }
  if (v138 >> 61)
    sub_22367C394();
  v175 = (char *)operator new(8 * v138);
  v489 = v175;
  *((_QWORD *)&v490 + 1) = &v175[8 * v138];
  memset(v175, 255, 8 * v138);
  *(_QWORD *)&v490 = &v175[8 * v138];
  v491 = 0uLL;
  v492 = 0;
  if (*((_QWORD *)&v440 + 1) == (_QWORD)v440)
  {
LABEL_252:
    v178 = 0;
    v177 = 0;
    if (v139 == v140)
      goto LABEL_258;
    goto LABEL_253;
  }
LABEL_238:
  if (v137 >> 61)
    sub_22367C394();
  v176 = 8 * v137;
  v177 = operator new(8 * v137);
  v178 = &v177[v137];
  *(_QWORD *)&v491 = v177;
  v492 = v178;
  memset(v177, 255, v176);
  *((_QWORD *)&v491 + 1) = v178;
  if (v139 != v140)
  {
LABEL_253:
    v184 = v139;
    do
    {
      v185 = *(_QWORD *)v184;
      if (*(_QWORD *)&v175[8 * *(_QWORD *)v184] == -1)
      {
        v186 = *((_QWORD *)v184 + 1);
        if (v177[v186] == -1)
        {
          *(_QWORD *)&v175[8 * v185] = v186;
          v177[v186] = v185;
        }
      }
      v184 += 24;
    }
    while (v184 != v140);
  }
LABEL_258:
  if (v139)
  {
    operator delete(v139);
    v178 = (_QWORD *)*((_QWORD *)&v491 + 1);
    v177 = (_QWORD *)v491;
  }
  if (v177 == v178)
  {
    v187 = 0;
LABEL_266:
    v177 = v178;
  }
  else
  {
    v187 = 0;
    while (*v177 != -1)
    {
      ++v177;
      ++v187;
      if (v177 == v178)
        goto LABEL_266;
    }
  }
  *(_QWORD *)&v499 = v177;
  *((_QWORD *)&v499 + 1) = v187;
  v501 = (unint64_t)v178;
  *(_QWORD *)v550 = v178;
  *(_QWORD *)&v550[8] = 0;
  *(_QWORD *)&v550[24] = v178;
  *(_QWORD *)&v550[32] = 0;
  sub_2237E94BC(&v494, (uint64_t)&v499, v550);
  v189 = (_QWORD *)*((_QWORD *)&v491 + 1);
  v188 = (_QWORD *)v491;
  if ((_QWORD)v491 == *((_QWORD *)&v491 + 1))
  {
    v190 = 0;
  }
  else
  {
    v190 = 0;
    while (*v188 == -1)
    {
      ++v188;
      ++v190;
      if (v188 == *((_QWORD **)&v491 + 1))
      {
        v191 = 0;
        v481 = 0;
        v480 = 0;
        *(_QWORD *)v482 = 0;
        v192 = v489;
        v193 = (_QWORD *)v490;
        if (v489 != (void *)v490)
          goto LABEL_291;
        goto LABEL_272;
      }
    }
  }
  v481 = 0;
  v480 = 0;
  *(_QWORD *)v482 = 0;
  if (v188 != *((_QWORD **)&v491 + 1))
  {
    v195 = 0;
    v196 = v188;
LABEL_276:
    v197 = v195++;
    while (++v196 != *((_QWORD **)&v491 + 1))
    {
      if (*v196 != -1)
      {
        if (v196 != *((_QWORD **)&v491 + 1))
          goto LABEL_276;
        break;
      }
    }
    if (v197 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_22367C394();
    v191 = operator new(8 * v195);
    v480 = v191;
    *(_QWORD *)v482 = &v191[v195];
    v198 = v191;
    while (1)
    {
      *v198 = v190;
      if (++v188 == v189)
        break;
      ++v190;
      while (*v188 == -1)
      {
        ++v188;
        ++v190;
        if (v188 == v189)
          goto LABEL_290;
      }
      ++v198;
      if (v188 == v189)
      {
        v481 = v198;
        v192 = v489;
        v193 = (_QWORD *)v490;
        if (v489 != (void *)v490)
          goto LABEL_291;
        goto LABEL_272;
      }
    }
LABEL_290:
    v481 = v198 + 1;
    v192 = v489;
    v193 = (_QWORD *)v490;
    if (v489 == (void *)v490)
      goto LABEL_272;
    goto LABEL_291;
  }
  v191 = 0;
  v192 = v489;
  v193 = (_QWORD *)v490;
  if (v489 != (void *)v490)
  {
LABEL_291:
    v194 = 0;
    while (*v192 != -1)
    {
      ++v192;
      ++v194;
      if (v192 == v193)
      {
        v192 = v193;
        goto LABEL_295;
      }
    }
    goto LABEL_295;
  }
LABEL_272:
  v194 = 0;
LABEL_295:
  *(_QWORD *)&v499 = v192;
  *((_QWORD *)&v499 + 1) = v194;
  v501 = (unint64_t)v193;
  *(_QWORD *)v550 = v193;
  *(_QWORD *)&v550[8] = 0;
  *(_QWORD *)&v550[24] = v193;
  *(_QWORD *)&v550[32] = 0;
  sub_2237E94BC(&v477, (uint64_t)&v499, v550);
  __src = 0uLL;
  v199 = (uint64_t *)*((_QWORD *)&v494 + 1);
  v200 = (uint64_t *)v494;
  v201 = v481;
  v523 = 0;
  *(_QWORD *)&v524 = (uint64_t)(*((_QWORD *)&v494 + 1) - v494) >> 3;
  *((_QWORD *)&v524 + 1) = v524 + ((v481 - (_BYTE *)v191) >> 3);
  v202 = *((_QWORD *)&v524 + 1) + ((uint64_t)(*((_QWORD *)&v477 + 1) - v477) >> 3);
  if (v202)
  {
    if (v202 >> 61)
      sub_22367C394();
    *(_QWORD *)&__src = operator new(8 * v202);
    *((_QWORD *)&__src + 1) = __src;
    v523 = __src + 8 * v202;
  }
  *(_QWORD *)&v499 = &__src;
  if (v200 != v199)
  {
    do
      sub_2237E95E0((uint64_t *)&v499, *v200++);
    while (v200 != v199);
    v201 = v481;
  }
  for (*(_QWORD *)&v499 = &__src; v191 != v201; ++v191)
    sub_2237E95E0((uint64_t *)&v499, *v191);
  v204 = (uint64_t *)*((_QWORD *)&v477 + 1);
  v203 = (uint64_t *)v477;
  for (*(_QWORD *)&v499 = &__src; v203 != v204; ++v203)
    sub_2237E95E0((uint64_t *)&v499, *v203);
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v205 = (uint64_t *)v491;
  v206 = 0;
  if ((_QWORD)v491 != *((_QWORD *)&v491 + 1))
  {
    while (*v205 == -1)
    {
      ++v205;
      ++v206;
      if (v205 == *((uint64_t **)&v491 + 1))
      {
        v205 = (uint64_t *)*((_QWORD *)&v491 + 1);
        break;
      }
    }
  }
  *(_QWORD *)&v499 = v205;
  *((_QWORD *)&v499 + 1) = v206;
  v501 = *((unint64_t *)&v491 + 1);
  *(_QWORD *)&v502[8] = &off_24EC5A130;
  *(_QWORD *)&v502[16] = &v469;
  *(_QWORD *)&v502[32] = &v502[8];
  *(_QWORD *)&v502[24] = a5;
  *(_QWORD *)&v502[40] = *((_QWORD *)&v491 + 1);
  *(_QWORD *)&v502[48] = 0;
  *(_QWORD *)&v502[64] = *((_QWORD *)&v491 + 1);
  *(_QWORD *)&v502[72] = 0;
  *(_QWORD *)&v502[88] = &off_24EC5A130;
  *(_QWORD *)&v502[96] = &v469;
  *(_QWORD *)&v502[112] = &v502[88];
  *(_QWORD *)&v502[104] = a5;
  v535[0] = v205;
  v535[1] = v206;
  v536 = *((unint64_t *)&v491 + 1);
  v207 = &v538;
  v540 = &v538;
  v538 = &off_24EC5A130;
  v539 = *(_OWORD *)&v502[16];
  v528 = *((unint64_t *)&v491 + 1);
  v530 = (char *)*((_QWORD *)&v491 + 1);
  v531 = 0;
  v208 = &v532;
  v534 = &v532;
  v532 = &off_24EC5A130;
  v533 = *(_OWORD *)&v502[96];
  v527 = 0;
  v526 = 0;
  v525 = &v526;
  *(_QWORD *)v550 = v205;
  *(_QWORD *)&v550[8] = v206;
  *(_QWORD *)&v550[24] = *((_QWORD *)&v491 + 1);
  *(_QWORD *)&v550[32] = 0;
  v209 = &v550[48];
  v552 = &v550[48];
  *(_QWORD *)&v550[48] = &off_24EC5A130;
  v551 = *(_OWORD *)&v502[16];
  v541 = (void *)*((_QWORD *)&v491 + 1);
  rep = 0;
  v544 = *((_QWORD *)&v491 + 1);
  v545 = 0;
  v210 = &v547;
  v549 = &v547;
  v547 = &off_24EC5A130;
  v548 = *(_OWORD *)&v502[96];
  if (v205 == *((uint64_t **)&v491 + 1))
    goto LABEL_389;
  while (2)
  {
    v211 = *v205;
    v496 = v206;
    *(_QWORD *)&v497 = v211;
    if (!v552)
      sub_223198474();
    (*(void (**)(_BYTE *__return_ptr, _BYTE *, char **))(*(_QWORD *)v552 + 48))(v498, v552, &v496);
    v212 = v526;
    v213 = &v526;
    if (v525 == &v526)
      goto LABEL_335;
    v214 = v526;
    v215 = &v526;
    if (v526)
    {
      do
      {
        v213 = (uint64_t **)v214;
        v214 = (uint64_t *)v214[1];
      }
      while (v214);
    }
    else
    {
      do
      {
        v213 = (uint64_t **)v215[2];
        v12 = *v213 == (uint64_t *)v215;
        v215 = v213;
      }
      while (v12);
    }
    v216 = *((unsigned __int8 *)v213 + 25);
    v217 = v498[0];
    if (v216 != v498[0])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 26);
    v217 = v498[1];
    if (v216 != v498[1])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 27);
    v217 = v498[2];
    if (v216 != v498[2])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 28);
    v217 = v498[3];
    if (v216 != v498[3])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 29);
    v217 = v498[4];
    if (v216 != v498[4])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 30);
    v217 = v498[5];
    if (v216 != v498[5])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 31);
    v217 = v498[6];
    if (v216 != v498[6])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 32);
    v217 = v498[7];
    if (v216 != v498[7])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 33);
    v217 = v498[8];
    if (v216 != v498[8])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 34);
    v217 = v498[9];
    if (v216 != v498[9])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 35);
    v217 = v498[10];
    if (v216 != v498[10])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 36);
    v217 = v498[11];
    if (v216 != v498[11])
      goto LABEL_334;
    v216 = *((unsigned __int8 *)v213 + 37);
    v217 = v498[12];
    if (v216 != v498[12]
      || (v216 = *((unsigned __int8 *)v213 + 38), v217 = v498[13], v216 != v498[13])
      || (v216 = *((unsigned __int8 *)v213 + 39), v217 = v498[14], v216 != v498[14])
      || (v216 = *((unsigned __int8 *)v213 + 40), v217 = v498[15], v216 != v498[15]))
    {
LABEL_334:
      if (v216 < v217)
      {
LABEL_335:
        v218 = &v526;
        v219 = &v526;
        if (!v526)
          goto LABEL_379;
        v218 = v213 + 1;
        if (!v213[1])
        {
          v219 = v213;
          goto LABEL_379;
        }
        goto LABEL_382;
      }
    }
    v218 = &v526;
    v219 = &v526;
    if (!v526)
      goto LABEL_379;
    do
    {
      while (1)
      {
        v219 = (uint64_t **)v212;
        v220 = *((unsigned __int8 *)v212 + 25);
        if (v498[0] != v220)
        {
          v223 = v498[0];
          if (v498[0] >= v220)
            goto LABEL_376;
          goto LABEL_340;
        }
        v220 = *((unsigned __int8 *)v219 + 26);
        if (v498[1] == v220)
          break;
        v223 = v498[1];
        if (v498[1] >= v220)
          goto LABEL_376;
LABEL_340:
        v212 = *v219;
        v218 = v219;
        if (!*v219)
          goto LABEL_379;
      }
      v221 = *((unsigned __int8 *)v219 + 27);
      v222 = v498[2];
      if (v498[2] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 28);
      v222 = v498[3];
      if (v498[3] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 29);
      v222 = v498[4];
      if (v498[4] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 30);
      v222 = v498[5];
      if (v498[5] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 31);
      v222 = v498[6];
      if (v498[6] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 32);
      v222 = v498[7];
      if (v498[7] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 33);
      v222 = v498[8];
      if (v498[8] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 34);
      v222 = v498[9];
      if (v498[9] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 35);
      v222 = v498[10];
      if (v498[10] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 36);
      v222 = v498[11];
      if (v498[11] != v221)
        goto LABEL_357;
      v221 = *((unsigned __int8 *)v219 + 37);
      v222 = v498[12];
      if (v498[12] != v221
        || (v221 = *((unsigned __int8 *)v219 + 38), v222 = v498[13], v498[13] != v221)
        || (v221 = *((unsigned __int8 *)v219 + 39), v222 = v498[14], v498[14] != v221)
        || (v221 = *((unsigned __int8 *)v219 + 40), v222 = v498[15], v498[15] != v221))
      {
LABEL_357:
        if (v222 < v221)
          goto LABEL_340;
      }
      v220 = *((unsigned __int8 *)v219 + 27);
      v223 = v498[2];
      if (v220 == v498[2])
      {
        v220 = *((unsigned __int8 *)v219 + 28);
        v223 = v498[3];
        if (v220 == v498[3])
        {
          v220 = *((unsigned __int8 *)v219 + 29);
          v223 = v498[4];
          if (v220 == v498[4])
          {
            v220 = *((unsigned __int8 *)v219 + 30);
            v223 = v498[5];
            if (v220 == v498[5])
            {
              v220 = *((unsigned __int8 *)v219 + 31);
              v223 = v498[6];
              if (v220 == v498[6])
              {
                v220 = *((unsigned __int8 *)v219 + 32);
                v223 = v498[7];
                if (v220 == v498[7])
                {
                  v220 = *((unsigned __int8 *)v219 + 33);
                  v223 = v498[8];
                  if (v220 == v498[8])
                  {
                    v220 = *((unsigned __int8 *)v219 + 34);
                    v223 = v498[9];
                    if (v220 == v498[9])
                    {
                      v220 = *((unsigned __int8 *)v219 + 35);
                      v223 = v498[10];
                      if (v220 == v498[10])
                      {
                        v220 = *((unsigned __int8 *)v219 + 36);
                        v223 = v498[11];
                        if (v220 == v498[11])
                        {
                          v220 = *((unsigned __int8 *)v219 + 37);
                          v223 = v498[12];
                          if (v220 == v498[12])
                          {
                            v220 = *((unsigned __int8 *)v219 + 38);
                            v223 = v498[13];
                            if (v220 == v498[13])
                            {
                              v220 = *((unsigned __int8 *)v219 + 39);
                              v223 = v498[14];
                              if (v220 == v498[14])
                              {
                                v220 = *((unsigned __int8 *)v219 + 40);
                                v223 = v498[15];
                                if (v220 == v498[15])
                                  goto LABEL_382;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_376:
      if (v220 >= v223)
        goto LABEL_382;
      v212 = v219[1];
    }
    while (v212);
    v218 = v219 + 1;
LABEL_379:
    v224 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v224 + 25) = *(_OWORD *)v498;
    *(_OWORD *)(v224 + 41) = *(_OWORD *)&v498[16];
    *(_QWORD *)v224 = 0;
    *((_QWORD *)v224 + 1) = 0;
    *((_QWORD *)v224 + 2) = v219;
    *v218 = (uint64_t *)v224;
    if (*v525)
    {
      v525 = (uint64_t **)*v525;
      v224 = (char *)*v218;
    }
    sub_2231A9A8C(v526, (uint64_t *)v224);
    ++v527;
LABEL_382:
    v205 = (uint64_t *)(*(_QWORD *)v550 + 8);
    v206 = (char *)(*(_QWORD *)&v550[8] + 1);
    *(_QWORD *)v550 = v205;
    ++*(_QWORD *)&v550[8];
    if (v205 != *(uint64_t **)&v550[24])
    {
      while (*v205 == -1)
      {
        ++v205;
        ++v206;
        *(_QWORD *)v550 = v205;
        *(_QWORD *)&v550[8] = v206;
        if (v205 == *(uint64_t **)&v550[24])
        {
          v205 = *(uint64_t **)&v550[24];
          break;
        }
      }
    }
    if (v205 != v541)
      continue;
    break;
  }
  if (v549 != &v547)
  {
    if (v549)
    {
      v225 = 5;
      v210 = v549;
      goto LABEL_390;
    }
    goto LABEL_391;
  }
LABEL_389:
  v225 = 4;
LABEL_390:
  ((void (*)(uint64_t (***)()))(*v210)[v225])(v210);
LABEL_391:
  if (v552 == &v550[48])
  {
    v226 = 4;
LABEL_395:
    (*(void (**)(_QWORD *))(*v209 + 8 * v226))(v209);
  }
  else if (v552)
  {
    v226 = 5;
    v209 = v552;
    goto LABEL_395;
  }
  if (v534 == &v532)
  {
    v227 = 4;
LABEL_400:
    ((void (*)(uint64_t (***)()))(*v208)[v227])(v208);
  }
  else if (v534)
  {
    v227 = 5;
    v208 = v534;
    goto LABEL_400;
  }
  if (v540 == &v538)
  {
    v228 = 4;
LABEL_405:
    ((void (*)(uint64_t (***)()))(*v207)[v228])(v207);
  }
  else if (v540)
  {
    v228 = 5;
    v207 = v540;
    goto LABEL_405;
  }
  v229 = *(_QWORD **)&v502[112];
  if (*(_BYTE **)&v502[112] == &v502[88])
  {
    v230 = 4;
    v229 = &v502[88];
LABEL_410:
    (*(void (**)(void))(*v229 + 8 * v230))();
  }
  else if (*(_QWORD *)&v502[112])
  {
    v230 = 5;
    goto LABEL_410;
  }
  v231 = *(_QWORD **)&v502[32];
  if (*(_BYTE **)&v502[32] == &v502[8])
  {
    v232 = 4;
    v231 = &v502[8];
LABEL_415:
    (*(void (**)(void))(*v231 + 8 * v232))();
  }
  else if (*(_QWORD *)&v502[32])
  {
    v232 = 5;
    goto LABEL_415;
  }
  if ((_QWORD)v477)
  {
    *((_QWORD *)&v477 + 1) = v477;
    operator delete((void *)v477);
  }
  if (v480)
  {
    v481 = v480;
    operator delete(v480);
  }
  if ((_QWORD)v494)
  {
    *((_QWORD *)&v494 + 1) = v494;
    operator delete((void *)v494);
  }
  if ((_QWORD)v491)
  {
    *((_QWORD *)&v491 + 1) = v491;
    operator delete((void *)v491);
  }
  if (v489)
  {
    *(_QWORD *)&v490 = v489;
    operator delete(v489);
  }
  v233 = __src;
  v234 = v524;
  if ((_QWORD)v524 == *((_QWORD *)&v524 + 1))
  {
    v235 = v524;
    goto LABEL_469;
  }
  v236 = __src + 8 * *((_QWORD *)&v524 + 1);
  v237 = (_QWORD *)(__src + 8 * v524);
  while (2)
  {
    if ((unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)&v469 + 1) - v469) >> 3)) <= *v237)
      sub_2236C5448();
    v238 = v526;
    if (!v526)
LABEL_467:
      sub_223198218("map::at:  key not found");
    v239 = (unsigned __int8 *)(v469 + 424 * *v237);
    v240 = *v239;
    while (2)
    {
      while (2)
      {
        v241 = *((unsigned __int8 *)v238 + 25);
        v242 = v240 >= v241;
        if (v240 != v241)
        {
          v243 = *v239;
          goto LABEL_463;
        }
        v243 = v239[1];
        v241 = *((unsigned __int8 *)v238 + 26);
        v242 = v243 >= v241;
        if (v243 != v241)
          goto LABEL_463;
        v243 = v239[2];
        v241 = *((unsigned __int8 *)v238 + 27);
        v242 = v243 >= v241;
        if (v243 != v241)
          goto LABEL_463;
        v243 = v239[3];
        v241 = *((unsigned __int8 *)v238 + 28);
        v242 = v243 >= v241;
        if (v243 != v241
          || (v243 = v239[4], v241 = *((unsigned __int8 *)v238 + 29), v242 = v243 >= v241, v243 != v241)
          || (v243 = v239[5], v241 = *((unsigned __int8 *)v238 + 30), v242 = v243 >= v241, v243 != v241))
        {
LABEL_463:
          if (!v242)
            goto LABEL_433;
LABEL_465:
          if (v241 >= v243)
            goto LABEL_429;
          v238 = (uint64_t *)v238[1];
          if (!v238)
            goto LABEL_467;
          continue;
        }
        break;
      }
      v244 = v239[6];
      v245 = *((unsigned __int8 *)v238 + 31);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[7];
      v245 = *((unsigned __int8 *)v238 + 32);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[8];
      v245 = *((unsigned __int8 *)v238 + 33);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[9];
      v245 = *((unsigned __int8 *)v238 + 34);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[10];
      v245 = *((unsigned __int8 *)v238 + 35);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[11];
      v245 = *((unsigned __int8 *)v238 + 36);
      if (v244 != v245)
        goto LABEL_450;
      v244 = v239[12];
      v245 = *((unsigned __int8 *)v238 + 37);
      if (v244 != v245
        || (v244 = v239[13], v245 = *((unsigned __int8 *)v238 + 38), v244 != v245)
        || (v244 = v239[14], v245 = *((unsigned __int8 *)v238 + 39), v244 != v245)
        || (v244 = v239[15], v245 = *((unsigned __int8 *)v238 + 40), v244 != v245))
      {
LABEL_450:
        if (v244 < v245)
        {
LABEL_433:
          v238 = (uint64_t *)*v238;
          if (!v238)
            goto LABEL_467;
          continue;
        }
      }
      break;
    }
    v241 = *((unsigned __int8 *)v238 + 31);
    v243 = v239[6];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 32);
    v243 = v239[7];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 33);
    v243 = v239[8];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 34);
    v243 = v239[9];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 35);
    v243 = v239[10];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 36);
    v243 = v239[11];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 37);
    v243 = v239[12];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 38);
    v243 = v239[13];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 39);
    v243 = v239[14];
    if (v241 != v243)
      goto LABEL_465;
    v241 = *((unsigned __int8 *)v238 + 40);
    v243 = v239[15];
    if (v241 != v243)
      goto LABEL_465;
LABEL_429:
    *(_OWORD *)v239 = *(_OWORD *)((char *)v238 + 41);
    if (++v237 != (_QWORD *)v236)
      continue;
    break;
  }
  v233 = __src;
  v234 = *((_QWORD *)&v524 + 1);
  v235 = v524;
LABEL_469:
  v535[0] = &v475;
  v535[1] = &v469;
  *(_QWORD *)&v499 = v233;
  *((_QWORD *)&v499 + 1) = &off_24EC5A1C0;
  v500 = v535;
  *(_QWORD *)&v501 = 0;
  *((_QWORD *)&v501 + 1) = (char *)&v499 + 8;
  *(_QWORD *)v502 = v233 + 8 * v235;
  *(_QWORD *)&v502[8] = &off_24EC5A1C0;
  *(_QWORD *)&v502[16] = v535;
  *(_QWORD *)&v502[32] = &v502[8];
  *(_QWORD *)&v502[24] = 0;
  *(_QWORD *)v550 = *(_QWORD *)v502;
  *(_QWORD *)&v550[8] = &off_24EC5A1C0;
  *(_QWORD *)&v550[16] = v535;
  *(_QWORD *)&v550[24] = 1;
  *(_QWORD *)&v550[32] = &v550[8];
  *(_QWORD *)&v550[40] = v233 + 8 * v234;
  *(_QWORD *)&v550[48] = &off_24EC5A1C0;
  *(_QWORD *)&v551 = v535;
  *((_QWORD *)&v551 + 1) = 1;
  v552 = &v550[48];
  v541 = *(void **)&v550[40];
  rep = &off_24EC5A1C0;
  v543 = (std::__shared_weak_count *)v535;
  v544 = 2;
  v545 = &rep;
  v546 = *((_QWORD *)&__src + 1);
  v547 = &off_24EC5A1C0;
  *(_QWORD *)&v548 = v535;
  v549 = &v547;
  *((_QWORD *)&v548 + 1) = 2;
  memset(v486, 0, sizeof(v486));
  v246 = sub_2237E9A9C((uint64_t *)&v499);
  v247 = sub_2237E9A9C((uint64_t *)v550);
  v248 = sub_2237E9A9C((uint64_t *)&v541);
  *(_QWORD *)&v486[24] = v246;
  *(_QWORD *)&v486[32] = v247 + v246;
  v249 = v248 + v247 + v246;
  v250 = *(_BYTE **)v486;
  if (v249 > (uint64_t)(*(_QWORD *)&v486[16] - *(_QWORD *)v486) >> 4)
  {
    if (v249 >> 60)
      sub_22316E078();
    v251 = *(_BYTE **)&v486[8];
    v252 = (char *)operator new(16 * v249);
    v253 = &v252[(v251 - v250) & 0xFFFFFFFFFFFFFFF0];
    v254 = v253;
    if (v251 != v250)
    {
      v255 = &v252[(v251 - v250) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v254 = v255 - 16;
        *((_OWORD *)v255 - 1) = *((_OWORD *)v251 - 1);
        v251 -= 16;
        v255 -= 16;
      }
      while (v251 != v250);
    }
    *(_QWORD *)v486 = v254;
    *(_QWORD *)&v486[8] = v253;
    *(_QWORD *)&v486[16] = &v252[16 * v249];
    if (v250)
      operator delete(v250);
  }
  *(_QWORD *)&v528 = v486;
  sub_2237E9F6C((char ***)&v499, (char ***)&v528);
  *(_QWORD *)&v528 = v486;
  sub_2237E9F6C((char ***)v550, (char ***)&v528);
  *(_QWORD *)&v528 = v486;
  sub_2237E9F6C((char ***)&v541, (char ***)&v528);
  v256 = 126 - 2 * __clz(*(unint64_t *)&v486[24]);
  if (*(_QWORD *)&v486[24])
    v257 = v256;
  else
    v257 = 0;
  sub_2237A5F44(*(unsigned __int8 **)v486, (unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[24]), (uint64_t)&v528, v257, 1);
  v258 = 126 - 2 * __clz(*(_QWORD *)&v486[32] - *(_QWORD *)&v486[24]);
  if (*(_QWORD *)&v486[32] == *(_QWORD *)&v486[24])
    v259 = 0;
  else
    v259 = v258;
  sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[24]), (unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[32]), (uint64_t)&v528, v259, 1);
  v260 = (uint64_t)(*(_QWORD *)&v486[8] - *(_QWORD *)v486) >> 4;
  v261 = 126 - 2 * __clz(v260 - *(_QWORD *)&v486[32]);
  if (v260 == *(_QWORD *)&v486[32])
    v262 = 0;
  else
    v262 = v261;
  sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)v486 + 16 * *(_QWORD *)&v486[32]), *(unsigned __int8 **)&v486[8], (uint64_t)&v528, v262, 1);
  v263 = v549;
  if (v549 == &v547)
  {
    v264 = 4;
    v263 = &v547;
LABEL_489:
    (*v263)[v264]();
  }
  else if (v549)
  {
    v264 = 5;
    goto LABEL_489;
  }
  v265 = v545;
  if (v545 == &rep)
  {
    v266 = 4;
    v265 = &rep;
LABEL_494:
    (*v265)[v266]();
  }
  else if (v545)
  {
    v266 = 5;
    goto LABEL_494;
  }
  v267 = v552;
  if (v552 == &v550[48])
  {
    v268 = 4;
    v267 = &v550[48];
LABEL_499:
    (*(void (**)(void))(*v267 + 8 * v268))();
  }
  else if (v552)
  {
    v268 = 5;
    goto LABEL_499;
  }
  v269 = *(_QWORD **)&v550[32];
  if (*(_BYTE **)&v550[32] == &v550[8])
  {
    v270 = 4;
    v269 = &v550[8];
    v129 = v437;
LABEL_504:
    (*(void (**)(void))(*v269 + 8 * v270))();
  }
  else
  {
    v129 = v437;
    if (*(_QWORD *)&v550[32])
    {
      v270 = 5;
      goto LABEL_504;
    }
  }
  v271 = *(_QWORD **)&v502[32];
  if (*(_BYTE **)&v502[32] == &v502[8])
  {
    v272 = 4;
    v271 = &v502[8];
LABEL_509:
    (*(void (**)(void))(*v271 + 8 * v272))();
  }
  else if (*(_QWORD *)&v502[32])
  {
    v272 = 5;
    goto LABEL_509;
  }
  v273 = (_QWORD *)*((_QWORD *)&v501 + 1);
  if (*((__int128 **)&v501 + 1) == (__int128 *)((char *)&v499 + 8))
  {
    v274 = 4;
    v273 = (_QWORD *)&v499 + 1;
LABEL_514:
    (*(void (**)(void))(*v273 + 8 * v274))();
  }
  else if (*((_QWORD *)&v501 + 1))
  {
    v274 = 5;
    goto LABEL_514;
  }
  sub_2233FADDC(v526);
  if ((_QWORD)__src)
  {
    *((_QWORD *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
LABEL_530:
  sub_2231D494C(v129, (uint64_t)&v499);
  v456 = *((_QWORD *)&v469 + 1);
  v283 = v469;
  if ((_QWORD)v469 != *((_QWORD *)&v469 + 1))
  {
    while (2)
    {
      sub_223ECE884((unsigned __int16 **)(v283 + 264), (int8x16_t **)v550);
      v284 = (void **)(v283 + 360);
      if (*(_BYTE *)(v283 + 384))
      {
        v285 = *v284;
        if (*v284)
        {
          *(_QWORD *)(v283 + 368) = v285;
          operator delete(v285);
          *v284 = 0;
          *(_QWORD *)(v283 + 368) = 0;
          *(_QWORD *)(v283 + 376) = 0;
        }
        *(_OWORD *)v284 = *(_OWORD *)v550;
        *(_QWORD *)(v283 + 376) = *(_QWORD *)&v550[16];
      }
      else
      {
        *(_OWORD *)v284 = *(_OWORD *)v550;
        *(_QWORD *)(v283 + 376) = *(_QWORD *)&v550[16];
        *(_BYTE *)(v283 + 384) = 1;
      }
      sub_223EB3184((__int16 **)(v283 + 264), 0, (uint64_t)v550, 16.0);
      v286 = (_QWORD *)(v283 + 392);
      if (!*(_BYTE *)(v283 + 416))
      {
        v293 = *(char **)v550;
        *(_QWORD *)(v283 + 392) = *(_QWORD *)v550;
        v294 = *(char **)&v550[8];
        *(_OWORD *)(v283 + 400) = *(_OWORD *)&v550[8];
        *(_BYTE *)(v283 + 416) = 1;
        v295 = v294;
        if (0xAAAAAAAAAAAAAAABLL * ((v294 - v293) >> 3) >= 2)
          goto LABEL_548;
        goto LABEL_770;
      }
      v287 = (void **)*v286;
      if (*v286)
      {
        v288 = *(void ***)(v283 + 400);
        v289 = (void **)*v286;
        if (v288 != v287)
        {
          v290 = *(void ***)(v283 + 400);
          do
          {
            v292 = *(v290 - 3);
            v290 -= 3;
            v291 = v292;
            if (v292)
            {
              *(v288 - 2) = v291;
              operator delete(v291);
            }
            v288 = v290;
          }
          while (v290 != v287);
          v289 = (void **)*v286;
        }
        *(_QWORD *)(v283 + 400) = v287;
        operator delete(v289);
        *v286 = 0;
        *(_QWORD *)(v283 + 400) = 0;
        *(_QWORD *)(v283 + 408) = 0;
      }
      v293 = *(char **)v550;
      *(_QWORD *)(v283 + 392) = *(_QWORD *)v550;
      v296 = *(char **)&v550[8];
      *(_OWORD *)(v283 + 400) = *(_OWORD *)&v550[8];
      v295 = v296;
      if (0xAAAAAAAAAAAAAAABLL * ((v296 - v293) >> 3) < 2)
        goto LABEL_770;
LABEL_548:
      if (v293 != v295)
      {
        v297 = v293 + 24;
        if (v293 + 24 != v295)
        {
          v298 = *(_QWORD *)v293;
          do
          {
            if ((unint64_t)(*((_QWORD *)v293 + 1) - v298) < *((_QWORD *)v297 + 1) - *(_QWORD *)v297)
            {
              v298 = *(_QWORD *)v297;
              v293 = v297;
            }
            v297 += 24;
          }
          while (v297 != v295);
        }
      }
      v299 = atomic_load((unsigned __int8 *)&qword_2540CC630);
      v458 = (_QWORD *)(v283 + 392);
      if ((v299 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC630))
      {
        sub_22455F53C(&v541);
        sub_223174DE4(v550, "cv3d.recon.kfplanes");
        sub_2232300E0((uint64_t **)&v541, (uint64_t)v550, &qword_2540CC628);
        if ((v550[23] & 0x80000000) != 0)
          operator delete(*(void **)v550);
        __cxa_guard_release(&qword_2540CC630);
        v286 = (_QWORD *)(v283 + 392);
      }
      *(_QWORD *)&v477 = qword_2540CC628;
      if (**(int **)(qword_2540CC628 + 56) > 4)
        goto LABEL_742;
      v300 = *(unsigned __int8 *)(qword_2540CC628 + 72);
      v301 = sub_22322F254(qword_2540CC628, "OSLogSurrogateAppender", 1, 0);
      v302 = v301;
      if (!v300 && v301 == 0)
        goto LABEL_742;
      v541 = &v477;
      rep = (uint64_t (**)())std::chrono::steady_clock::now().__d_.__rep_;
      v543 = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v544) = 4;
      v545 = (uint64_t (***)())"unknown file";
      LODWORD(v546) = 246;
      v547 = (uint64_t (**)())"unknown function";
      v548 = 0uLL;
      sub_2245664AC((unsigned __int8 *)v283, &__src);
      v453 = v283;
      v304 = *(char **)(v283 + 392);
      v305 = *(char **)(v283 + 400);
      memset(v550, 0, 24);
      v306 = v305 - v304;
      v450 = v300;
      if (v305 != v304)
      {
        v446 = v302;
        v307 = 0xAAAAAAAAAAAAAAABLL * (v306 >> 3);
        if (v307 >> 61)
          sub_22367C394();
        v308 = (uint64_t *)operator new(0x5555555555555558 * (v306 >> 3));
        *(_QWORD *)v550 = v308;
        *(_QWORD *)&v550[8] = v308;
        *(_QWORD *)&v550[16] = &v308[v307];
        while (1)
        {
          while (1)
          {
            v309 = (uint64_t)(*((_QWORD *)v304 + 1) - *(_QWORD *)v304) >> 4;
            if ((unint64_t)v308 >= *(_QWORD *)&v550[16])
              break;
            *v308++ = v309;
            *(_QWORD *)&v550[8] = v308;
            v304 += 24;
            if (v304 == v305)
              goto LABEL_591;
          }
          v310 = *(uint64_t **)v550;
          v311 = ((uint64_t)v308 - *(_QWORD *)v550) >> 3;
          v312 = v311 + 1;
          if ((unint64_t)(v311 + 1) >> 61)
            sub_22367C394();
          v313 = *(_QWORD *)&v550[16] - *(_QWORD *)v550;
          if ((uint64_t)(*(_QWORD *)&v550[16] - *(_QWORD *)v550) >> 2 > v312)
            v312 = v313 >> 2;
          v314 = (unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v312;
          if (v314)
          {
            if (v314 >> 61)
              sub_223174E94();
            v315 = operator new(8 * v314);
            v316 = (uint64_t *)&v315[8 * v311];
            *v316 = v309;
            v317 = (uint64_t)(v316 + 1);
            v318 = (char *)v308 - (char *)v310;
            if (v308 == v310)
            {
LABEL_582:
              v286 = v458;
              *(_QWORD *)v550 = v316;
              *(_QWORD *)&v550[8] = v317;
              *(_QWORD *)&v550[16] = &v315[8 * v314];
              if (!v310)
                goto LABEL_579;
LABEL_578:
              operator delete(v310);
              goto LABEL_579;
            }
          }
          else
          {
            v315 = 0;
            v316 = (uint64_t *)(8 * v311);
            *(_QWORD *)(8 * v311) = v309;
            v317 = 8 * v311 + 8;
            v318 = (char *)v308 - (char *)v310;
            if (v308 == v310)
              goto LABEL_582;
          }
          v319 = v318 - 8;
          if (v319 < 0x168)
            break;
          v322 = ((char *)(v308 - 1) - (char *)v310) & 0xFFFFFFFFFFFFFFF8;
          if (&v315[(char *)v308 - (char *)v310 - 8 - v322] > &v315[(char *)v308 - (char *)v310 - 8]
            || (uint64_t *)((char *)v308 - v322 - 8) > v308 - 1
            || (unint64_t)((char *)v310 - v315) < 0x20)
          {
            break;
          }
          v323 = (v319 >> 3) + 1;
          v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
          v320 = &v308[v324 / 0xFFFFFFFFFFFFFFF8];
          v316 = (uint64_t *)((char *)v316 - v324);
          v325 = &v315[8 * v311 - 16];
          v326 = v308 - 2;
          v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
          v286 = v458;
          do
          {
            v328 = *(_OWORD *)v326;
            *(v325 - 1) = *((_OWORD *)v326 - 1);
            *v325 = v328;
            v325 -= 2;
            v326 -= 4;
            v327 -= 4;
          }
          while (v327);
          if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_576;
LABEL_577:
          *(_QWORD *)v550 = v316;
          *(_QWORD *)&v550[8] = v317;
          *(_QWORD *)&v550[16] = &v315[8 * v314];
          if (v310)
            goto LABEL_578;
LABEL_579:
          v308 = (uint64_t *)v317;
          *(_QWORD *)&v550[8] = v317;
          v304 += 24;
          if (v304 == v305)
          {
LABEL_591:
            v329 = *(void **)v550;
            v306 = *(_QWORD *)&v550[16];
            v302 = v446;
            goto LABEL_593;
          }
        }
        v320 = v308;
        v286 = v458;
        do
        {
LABEL_576:
          v321 = *--v320;
          *--v316 = v321;
        }
        while (v320 != v310);
        goto LABEL_577;
      }
      v308 = 0;
      v329 = 0;
LABEL_593:
      v480 = v329;
      v481 = v308;
      *(_QWORD *)v482 = v306;
      *(_DWORD *)&v550[24] = 0;
      sub_2237A4914((uint64_t)v535, (uint64_t)v550, (unint64_t **)&v480);
      if (*(_DWORD *)&v550[24] == -1)
        sub_22316DD70();
      v535[0] = &v528;
      ((void (*)(__int128 *__return_ptr, void **, _BYTE *))off_24EC5A258[*(unsigned int *)&v550[24]])(&v494, v535, v550);
      if (*(_DWORD *)&v550[24] != -1)
        ((void (*)(void **, _BYTE *))off_24EC5A240[*(unsigned int *)&v550[24]])(v535, v550);
      if (v495[7] >= 0)
        v330 = (const char *)&v494;
      else
        v330 = (const char *)v494;
      v331 = *(_QWORD *)v541;
      v332 = (const char *)(*(_QWORD *)v541 + 16);
      v438 = v332;
      v441 = *(_QWORD *)v541;
      if (*(char *)(*(_QWORD *)v541 + 39) < 0)
      {
        v332 = *(const char **)(v331 + 16);
        v333 = *(_QWORD *)(v331 + 24);
        v443 = (void **)*v286;
        v447 = v330;
        v335 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v335 & 1) == 0)
        {
LABEL_784:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v535);
            sub_223199C58("com.apple.cv3d", (unint64_t)v535, &xmmword_255788F40);
            if ((_BYTE)v536 && SHIBYTE(v535[2]) < 0)
              operator delete(v535[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            v286 = v458;
          }
        }
      }
      else
      {
        v333 = *(unsigned __int8 *)(*(_QWORD *)v541 + 39);
        v443 = (void **)*v286;
        v447 = v330;
        v334 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v334 & 1) == 0)
          goto LABEL_784;
      }
      if (byte_255788F57 >= 0)
        v336 = (const char *)&xmmword_255788F40;
      else
        v336 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v337 = byte_255788F57;
      else
        v337 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v550 = os_log_create(v336, v332);
      if (v337 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v337 >= 0x17)
      {
        v339 = (v337 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v337 | 7) != 0x17)
          v339 = v337 | 7;
        v340 = v339 + 1;
        v338 = operator new(v339 + 1);
        *(_QWORD *)&v550[16] = v337;
        *(_QWORD *)&v550[24] = v340 | 0x8000000000000000;
        *(_QWORD *)&v550[8] = v338;
      }
      else
      {
        v550[31] = v337;
        v338 = &v550[8];
        if (!v337)
        {
LABEL_617:
          v338[v337] = 0;
          v550[32] = 1;
          if (v333 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v333 >= 0x17)
          {
            v343 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v333 | 7) != 0x17)
              v343 = v333 | 7;
            v344 = v343 + 1;
            v341 = operator new(v343 + 1);
            *(_QWORD *)&v550[48] = v333;
            *(_QWORD *)&v551 = v344 | 0x8000000000000000;
            *(_QWORD *)&v550[40] = v341;
          }
          else
          {
            BYTE7(v551) = v333;
            v341 = &v550[40];
            if (!v333)
            {
              v550[40] = 0;
              BYTE8(v551) = 1;
              v342 = *(NSObject **)v550;
              if ((SBYTE7(v551) & 0x80000000) == 0)
                goto LABEL_621;
LABEL_627:
              operator delete(*(void **)&v550[40]);
              if (v550[32])
                goto LABEL_628;
              goto LABEL_630;
            }
          }
          memmove(v341, v332, v333);
          v341[v333] = 0;
          BYTE8(v551) = 1;
          v342 = *(NSObject **)v550;
          if (SBYTE7(v551) < 0)
            goto LABEL_627;
LABEL_621:
          if (v550[32])
          {
LABEL_628:
            if ((v550[31] & 0x80000000) != 0)
              operator delete(*(void **)&v550[8]);
          }
LABEL_630:
          if (*(_QWORD *)v550)
            os_release(*(void **)v550);
          if (v302 && *(_QWORD *)(v302 + 24))
          {
            v345 = _os_log_pack_size();
            v346 = (std::__shared_weak_count_vtbl *)operator new(v345, (std::align_val_t)8uLL);
            v347 = (std::__shared_weak_count *)operator new();
            v347->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v347->__shared_owners_ = 0;
            v347->__shared_weak_owners_ = 0;
            v347[1].__vftable = v346;
            *(_QWORD *)&v528 = v346;
            *((_QWORD *)&v528 + 1) = v346;
            v529 = v347;
            v530 = 0;
            v531 = 0;
            v348 = strlen((const char *)&__src);
            if (v348 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v349 = v348;
            if (v348 >= 0x17)
            {
              v354 = (v348 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v348 | 7) != 0x17)
                v354 = v348 | 7;
              v355 = v354 + 1;
              v350 = operator new(v354 + 1);
              *((_QWORD *)&v490 + 1) = v355 | 0x8000000000000000;
              v489 = v350;
              *(_QWORD *)&v490 = v349;
            }
            else
            {
              HIBYTE(v490) = v348;
              v350 = &v489;
              if (!v348)
              {
LABEL_646:
                *((_BYTE *)v350 + v349) = 0;
                v356 = strlen(v447);
                if (v356 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v357 = v356;
                if (v356 >= 0x17)
                {
                  v359 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v356 | 7) != 0x17)
                    v359 = v356 | 7;
                  v360 = v359 + 1;
                  v358 = operator new(v359 + 1);
                  *(_QWORD *)&v498[16] = v360 | 0x8000000000000000;
                  *(_QWORD *)v498 = v358;
                  *(_QWORD *)&v498[8] = v357;
                }
                else
                {
                  v498[23] = v356;
                  v358 = v498;
                  if (!v356)
                    goto LABEL_654;
                }
                memcpy(v358, v447, v357);
LABEL_654:
                v361 = v302;
                v358[v357] = 0;
                *(_QWORD *)&v550[16] = v490;
                *(_QWORD *)&v550[23] = *(_QWORD *)((char *)&v490 + 7);
                *(_QWORD *)&v550[40] = *(_QWORD *)&v498[8];
                *(_QWORD *)&v550[47] = *(_QWORD *)&v498[15];
                *(_QWORD *)v550 = off_24EC57608;
                *(_QWORD *)&v550[8] = v489;
                v550[31] = HIBYTE(v490);
                *(_QWORD *)&v550[32] = *(_QWORD *)v498;
                v550[55] = v498[23];
                v362 = (char *)operator new(0x50uLL);
                *((_QWORD *)v362 + 1) = 0;
                *((_QWORD *)v362 + 2) = 0;
                *((_QWORD *)v362 + 3) = off_24EC57608;
                *(_QWORD *)v362 = &off_24EC575B8;
                *((_OWORD *)v362 + 2) = *(_OWORD *)&v550[8];
                *((_QWORD *)v362 + 6) = *(_QWORD *)&v550[24];
                memset(&v550[8], 0, 24);
                *(_OWORD *)(v362 + 56) = *(_OWORD *)&v550[32];
                *((_QWORD *)v362 + 9) = *(_QWORD *)&v550[48];
                memset(&v550[32], 0, 24);
                v363 = v531;
                v530 = v362 + 24;
                v531 = (std::__shared_weak_count *)v362;
                if (!v363)
                  goto LABEL_658;
                v364 = (unint64_t *)&v363->__shared_owners_;
                do
                  v365 = __ldaxr(v364);
                while (__stlxr(v365 - 1, v364));
                if (v365)
                {
LABEL_658:
                  if ((v550[55] & 0x80000000) == 0)
                    goto LABEL_659;
LABEL_663:
                  operator delete(*(void **)&v550[32]);
                  if ((v550[31] & 0x80000000) != 0)
                    goto LABEL_664;
LABEL_660:
                  *(_OWORD *)v535 = v528;
                  v366 = v530;
                  v367 = v529;
                  v535[2] = v529;
                  if (!v529)
                    goto LABEL_667;
LABEL_665:
                  v368 = (unint64_t *)&v367->__shared_owners_;
                  do
                    v369 = __ldxr(v368);
                  while (__stxr(v369 + 1, v368));
                  goto LABEL_667;
                }
                ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                std::__shared_weak_count::__release_weak(v363);
                if ((v550[55] & 0x80000000) != 0)
                  goto LABEL_663;
LABEL_659:
                if ((v550[31] & 0x80000000) == 0)
                  goto LABEL_660;
LABEL_664:
                operator delete(*(void **)&v550[8]);
                *(_OWORD *)v535 = v528;
                v366 = v530;
                v367 = v529;
                v535[2] = v529;
                if (v529)
                  goto LABEL_665;
LABEL_667:
                v370 = v531;
                *(_QWORD *)&v536 = v366;
                *((_QWORD *)&v536 + 1) = v531;
                if (v531)
                {
                  v371 = (unint64_t *)&v531->__shared_owners_;
                  do
                    v372 = __ldxr(v371);
                  while (__stxr(v372 + 1, v371));
                  v537 = v366;
                  do
                    v373 = __ldaxr(v371);
                  while (__stlxr(v373 - 1, v371));
                  if (!v373)
                  {
                    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                    std::__shared_weak_count::__release_weak(v370);
                  }
                }
                else
                {
                  v537 = v366;
                }
                v374 = v529;
                if (v529)
                {
                  v375 = (unint64_t *)&v529->__shared_owners_;
                  do
                    v376 = __ldaxr(v375);
                  while (__stlxr(v376 - 1, v375));
                  if (!v376)
                  {
                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                    std::__shared_weak_count::__release_weak(v374);
                  }
                }
                v377 = v535[0];
                if (*((char *)v537 + 31) >= 0)
                  v378 = v537 + 1;
                else
                  v378 = (_QWORD *)v537[1];
                if (*((char *)v537 + 55) >= 0)
                  v379 = v537 + 4;
                else
                  v379 = (_QWORD *)v537[4];
                v380 = _os_log_pack_fill();
                *(_DWORD *)v380 = 68158466;
                *(_DWORD *)(v380 + 4) = 13;
                *(_WORD *)(v380 + 8) = 2080;
                *(_QWORD *)(v380 + 10) = v378;
                *(_WORD *)(v380 + 18) = 2080;
                *(_QWORD *)(v380 + 20) = v379;
                *(_WORD *)(v380 + 28) = 2048;
                *(_QWORD *)(v380 + 30) = 0xAAAAAAAAAAAAAAABLL * ((v293 - (char *)v443) >> 3);
                v381 = operator new();
                v382 = *(unsigned __int8 *)(v441 + 39);
                v383 = v438;
                if ((v382 & 0x80u) != 0)
                {
                  v383 = *(const char **)(v441 + 16);
                  v382 = *(_QWORD *)(v441 + 24);
                }
                *(_QWORD *)v381 = v377;
                *(_OWORD *)(v381 + 8) = *(_OWORD *)&v535[1];
                v535[1] = 0;
                v535[2] = 0;
                *(_OWORD *)(v381 + 24) = v536;
                v536 = 0uLL;
                *(_QWORD *)(v381 + 40) = v383;
                *(_QWORD *)(v381 + 48) = v382;
                *(_BYTE *)(v381 + 56) = 16;
                *(_QWORD *)&v528 = 0;
                *(_QWORD *)v550 = v381;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v361 + 24) + 40))(*(_QWORD *)(v361 + 24), v550);
                v384 = *(_QWORD *)v550;
                *(_QWORD *)v550 = 0;
                if (v384)
                {
                  v385 = *(std::__shared_weak_count **)(v384 + 32);
                  if (v385)
                  {
                    v386 = (unint64_t *)&v385->__shared_owners_;
                    do
                      v387 = __ldaxr(v386);
                    while (__stlxr(v387 - 1, v386));
                    if (!v387)
                    {
                      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                      std::__shared_weak_count::__release_weak(v385);
                    }
                  }
                  v388 = *(std::__shared_weak_count **)(v384 + 16);
                  if (v388)
                  {
                    v389 = (unint64_t *)&v388->__shared_owners_;
                    do
                      v390 = __ldaxr(v389);
                    while (__stlxr(v390 - 1, v389));
                    if (!v390)
                    {
                      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                      std::__shared_weak_count::__release_weak(v388);
                    }
                  }
                  MEMORY[0x227684CE8](v384, 0x10F0C40B62ED6C6);
                  v391 = v528;
                  *(_QWORD *)&v528 = 0;
                  if (v391)
                  {
                    v392 = *(std::__shared_weak_count **)(v391 + 32);
                    if (v392)
                    {
                      v393 = (unint64_t *)&v392->__shared_owners_;
                      do
                        v394 = __ldaxr(v393);
                      while (__stlxr(v394 - 1, v393));
                      if (!v394)
                      {
                        ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                        std::__shared_weak_count::__release_weak(v392);
                      }
                    }
                    v395 = *(std::__shared_weak_count **)(v391 + 16);
                    if (v395)
                    {
                      v396 = (unint64_t *)&v395->__shared_owners_;
                      do
                        v397 = __ldaxr(v396);
                      while (__stlxr(v397 - 1, v396));
                      if (!v397)
                      {
                        ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                        std::__shared_weak_count::__release_weak(v395);
                      }
                    }
                    MEMORY[0x227684CE8](v391, 0x10F0C40B62ED6C6);
                  }
                }
                v398 = (std::__shared_weak_count *)*((_QWORD *)&v536 + 1);
                if (*((_QWORD *)&v536 + 1))
                {
                  v399 = (unint64_t *)(*((_QWORD *)&v536 + 1) + 8);
                  do
                    v400 = __ldaxr(v399);
                  while (__stlxr(v400 - 1, v399));
                  if (!v400)
                  {
                    ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                    std::__shared_weak_count::__release_weak(v398);
                    v401 = (std::__shared_weak_count *)v535[2];
                    if (v535[2])
                      goto LABEL_716;
                    goto LABEL_719;
                  }
                }
                v401 = (std::__shared_weak_count *)v535[2];
                if (!v535[2])
                  goto LABEL_719;
LABEL_716:
                v402 = (unint64_t *)&v401->__shared_owners_;
                do
                  v403 = __ldaxr(v402);
                while (__stlxr(v403 - 1, v402));
                if (v403)
                {
LABEL_719:
                  v352 = v450;
                  if ((v495[7] & 0x80000000) == 0)
                    goto LABEL_720;
LABEL_640:
                  operator delete((void *)v494);
                  v353 = v480;
                  if (!v480)
                  {
LABEL_722:
                    if (v352)
                    {
                      sub_2245664AC((unsigned __int8 *)v453, v550);
                      v404 = *(char **)(v453 + 392);
                      v405 = *(char **)(v453 + 400);
                      memset(v535, 0, sizeof(v535));
                      v406 = v405 - v404;
                      if (v405 == v404)
                      {
                        v408 = 0uLL;
                      }
                      else
                      {
                        v407 = 0xAAAAAAAAAAAAAAABLL * (v406 >> 3);
                        if (v407 >> 61)
                          sub_22367C394();
                        v535[0] = operator new(0x5555555555555558 * (v406 >> 3));
                        v535[1] = v535[0];
                        v535[2] = (char *)v535[0] + 8 * v407;
                        v489 = v535;
                        do
                        {
                          *(_QWORD *)v498 = (uint64_t)(*((_QWORD *)v404 + 1) - *(_QWORD *)v404) >> 4;
                          sub_2237A4B60((uint64_t *)&v489, v498);
                          v404 += 24;
                        }
                        while (v404 != v405);
                        v408 = *(_OWORD *)v535;
                        v406 = (uint64_t)v535[2];
                      }
                      __src = v408;
                      v523 = v406;
                      LODWORD(v536) = 0;
                      sub_2237A4914((uint64_t)&v489, (uint64_t)v535, (unint64_t **)&__src);
                      if ((_DWORD)v536 == -1)
                        sub_22316DD70();
                      v489 = v498;
                      ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC5A258[v536])(&v528, &v489, v535);
                      if ((_DWORD)v536 != -1)
                        ((void (*)(void **, void **))off_24EC5A240[v536])(&v489, v535);
                      v409 = (const char *)&v528;
                      if (SHIBYTE(v529) < 0)
                        v409 = (const char *)v528;
                      sub_22322C138((uint64_t)&v541, "KFP %.13s has fragmented polygon extents with %s outer boundary vertices each. Only polygon with index %ld will be kept.", v550, v409, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v293[-*v286] >> 3));
                      if (SHIBYTE(v529) < 0)
                      {
                        operator delete((void *)v528);
                        v410 = (void *)__src;
                        if ((_QWORD)__src)
                        {
LABEL_736:
                          *((_QWORD *)&__src + 1) = v410;
                          operator delete(v410);
                        }
                      }
                      else
                      {
                        v410 = (void *)__src;
                        if ((_QWORD)__src)
                          goto LABEL_736;
                      }
                      sub_223182C08((uint64_t)&v541);
                    }
                    sub_223182C08((uint64_t)&v541);
                    v411 = (std::__shared_weak_count *)*((_QWORD *)&v548 + 1);
                    v283 = v453;
                    if (!*((_QWORD *)&v548 + 1))
                      goto LABEL_742;
                    v412 = (unint64_t *)(*((_QWORD *)&v548 + 1) + 8);
                    do
                      v413 = __ldaxr(v412);
                    while (__stlxr(v413 - 1, v412));
                    if (!v413)
                    {
                      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                      std::__shared_weak_count::__release_weak(v411);
                      v414 = (void **)*v286;
                      if (v293 != (char *)*v286)
                      {
LABEL_743:
                        v415 = *v414;
                        if (*v414)
                        {
                          v414[1] = v415;
                          operator delete(v415);
                          *v414 = 0;
                          v414[1] = 0;
                          v414[2] = 0;
                        }
                        *(_OWORD *)v414 = *(_OWORD *)v293;
                        v414[2] = (void *)*((_QWORD *)v293 + 2);
                        *(_QWORD *)v293 = 0;
                        *((_QWORD *)v293 + 1) = 0;
                        *((_QWORD *)v293 + 2) = 0;
                        v293 = (char *)*v286;
                      }
                    }
                    else
                    {
LABEL_742:
                      v414 = (void **)*v286;
                      if (v293 != (char *)*v286)
                        goto LABEL_743;
                    }
                    v416 = *(char **)(v283 + 400);
                    v417 = 0xAAAAAAAAAAAAAAABLL * ((v416 - v293) >> 3);
                    if (v416 == v293)
                    {
                      v422 = 1 - v417;
                      v423 = *(_QWORD *)(v283 + 408);
                      if (0xAAAAAAAAAAAAAAABLL * ((v423 - (uint64_t)v416) >> 3) >= v422)
                      {
                        if (v416 - v293 != 24)
                        {
                          *(_QWORD *)v293 = 0;
                          *((_QWORD *)v293 + 1) = 0;
                          *((_QWORD *)v293 + 2) = 0;
                          v293 += 24;
                        }
                        *(_QWORD *)(v283 + 400) = v293;
                      }
                      else
                      {
                        v424 = 0xAAAAAAAAAAAAAAABLL * ((v416 - v293) >> 3);
                        v425 = v424 + v422;
                        if (v424 + v422 > 0xAAAAAAAAAAAAAAALL)
                          sub_22316E078();
                        if (0x5555555555555556 * ((v423 - (uint64_t)v293) >> 3) > v425)
                          v425 = 0x5555555555555556 * ((v423 - (uint64_t)v293) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((v423 - (uint64_t)v293) >> 3) >= 0x555555555555555)
                          v426 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v426 = v425;
                        if (v426)
                        {
                          if (v426 > 0xAAAAAAAAAAAAAAALL)
                            sub_223174E94();
                          v427 = (char *)operator new(24 * v426);
                        }
                        else
                        {
                          v427 = 0;
                        }
                        v428 = &v427[24 * v424];
                        *(_QWORD *)v428 = 0;
                        *((_QWORD *)v428 + 1) = 0;
                        *((_QWORD *)v428 + 2) = 0;
                        *(_QWORD *)(v283 + 392) = v428;
                        *(_QWORD *)(v283 + 400) = v428 + 24;
                        *(_QWORD *)(v283 + 408) = &v427[24 * v426];
                        if (v293)
                          operator delete(v293);
                      }
                    }
                    else if (v417 >= 2)
                    {
                      v418 = v293 + 24;
                      if (v416 != v293 + 24)
                      {
                        v419 = *(char **)(v283 + 400);
                        do
                        {
                          v421 = (void *)*((_QWORD *)v419 - 3);
                          v419 -= 24;
                          v420 = v421;
                          if (v421)
                          {
                            *((_QWORD *)v416 - 2) = v420;
                            operator delete(v420);
                          }
                          v416 = v419;
                        }
                        while (v419 != v418);
                      }
                      *(_QWORD *)(v283 + 400) = v418;
                    }
LABEL_770:
                    v282 = sub_223725C24(v283, (uint64_t)&v499);
                    v283 += 424;
                    if (v283 == v456)
                      goto LABEL_789;
                    continue;
                  }
LABEL_721:
                  v481 = v353;
                  operator delete(v353);
                  goto LABEL_722;
                }
                ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                std::__shared_weak_count::__release_weak(v401);
                v352 = v450;
                if ((v495[7] & 0x80000000) != 0)
                  goto LABEL_640;
LABEL_720:
                v353 = v480;
                if (!v480)
                  goto LABEL_722;
                goto LABEL_721;
              }
            }
            memcpy(v350, &__src, v349);
            goto LABEL_646;
          }
          os_log_type_enabled(v342, OS_LOG_TYPE_ERROR);
          *(_QWORD *)v550 = 0xD04100402;
          *(_WORD *)&v550[8] = 2080;
          *(_QWORD *)&v550[10] = &__src;
          *(_WORD *)&v550[18] = 2080;
          *(_QWORD *)&v550[20] = v447;
          *(_WORD *)&v550[28] = 2048;
          *(_QWORD *)&v550[30] = 0xAAAAAAAAAAAAAAABLL * ((v293 - (char *)v443) >> 3);
          v351 = (void *)_os_log_send_and_compose_impl();
          if (!v351)
            goto LABEL_719;
          free(v351);
          v352 = v450;
          if ((v495[7] & 0x80000000) != 0)
            goto LABEL_640;
          goto LABEL_720;
        }
      }
      break;
    }
    memmove(v338, v336, v337);
    goto LABEL_617;
  }
LABEL_789:
  v429 = (std::__shared_weak_count *)v500;
  if (v500)
  {
    v430 = (unint64_t *)(v500 + 1);
    do
      v431 = __ldaxr(v430);
    while (__stlxr(v431 - 1, v430));
    if (!v431)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v429->__on_zero_shared)(v429, v282);
      std::__shared_weak_count::__release_weak(v429);
    }
  }
  *(_OWORD *)a8 = v469;
  *(_QWORD *)(a8 + 16) = *(_QWORD *)v470;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)v486;
  *(_QWORD *)(a8 + 40) = *(_QWORD *)&v486[16];
  *(_OWORD *)(a8 + 48) = *(_OWORD *)&v486[24];
  if (v467)
  {
    v468 = v467;
    operator delete(v467);
  }
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  v432 = v464;
  if (v464)
  {
    v433 = (unint64_t *)&v464->__shared_owners_;
    do
      v434 = __ldaxr(v433);
    while (__stlxr(v434 - 1, v433));
    if (!v434)
    {
      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
      std::__shared_weak_count::__release_weak(v432);
    }
  }
  if (v461)
  {
    v462 = v461;
    operator delete(v461);
  }
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
}

void sub_2237E8644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void *v58;
  void *v59;

  if (LOBYTE(STACK[0x588]) && SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  __cxa_guard_abort(&qword_255788F58);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  v58 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v58;
    operator delete(v58);
  }
  sub_223182DAC((uint64_t)&STACK[0x5C0]);
  sub_22319F500((uint64_t)&STACK[0x330]);
  v59 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v59;
    operator delete(v59);
    sub_2236E9A70(&a57);
    sub_223796C9C((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
  sub_2236E9A70(&a57);
  sub_223796C9C((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_2237E8D5C(uint64_t a1)
{
  void *v2;

  sub_2233FADDC(*(_QWORD **)(a1 + 48));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

__n64 sub_2237E8D94(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, __n64 result)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  __n128 v17;
  __n64 *v18;
  uint64_t v19;
  __n64 *v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  __n64 *v28;
  uint64_t v29;
  __n64 *v30;
  unint64_t v31;
  _QWORD *n64_u64;
  double v33;
  unint64_t v34;
  unint64_t v35;
  __n64 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const double *v47;
  double *v48;
  double *v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n64 *v57;
  uint64_t v58;
  const double *n64_f64;
  double *v60;
  double *v61;
  float64x2x3_t v62;
  float64x2x3_t v63;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      result.n64_u64[0] = *(_QWORD *)(a2 - 1);
      v8 = *(double *)(a1 + 16);
      if (result.n64_f64[0] > v8)
      {
        v9 = *(_QWORD *)a1;
        *(double *)a1 = *(a2 - 3);
        *((_QWORD *)a2 - 3) = v9;
        v10 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v10;
        *(double *)(a1 + 16) = result.n64_f64[0];
        *(a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v18 = (__n64 *)(a1 + 24);
        if ((double *)(a1 + 24) != a2)
        {
          v19 = 0;
          v20 = (__n64 *)a1;
          do
          {
            result.n64_u64[0] = v20[5].n64_u64[0];
            v22 = v20[2].n64_f64[0];
            v20 = v18;
            if (result.n64_f64[0] > v22)
            {
              v23 = *(_OWORD *)v18->n64_u64;
              v24 = v19;
              do
              {
                v25 = (double *)(a1 + v24);
                v26 = *(_QWORD *)(a1 + v24 + 8);
                v25[3] = *(double *)(a1 + v24);
                *((_QWORD *)v25 + 4) = v26;
                v25[5] = *(double *)(a1 + v24 + 16);
                if (!v24)
                {
                  v21 = a1;
                  goto LABEL_13;
                }
                v24 -= 24;
              }
              while (result.n64_f64[0] > *(v25 - 1));
              v21 = a1 + v24 + 24;
LABEL_13:
              *(_OWORD *)v21 = v23;
              *(double *)(v21 + 16) = result.n64_f64[0];
            }
            v18 = v20 + 3;
            v19 += 24;
          }
          while (&v20[3] != (__n64 *)a2);
        }
      }
    }
    else
    {
      v14 = a3 >> 1;
      v15 = (double *)(a1 + 24 * (a3 >> 1));
      v16 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        sub_2237E8D94(a1, v15, v16, a4, a5);
        sub_2237E8D94(a1 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        result.n64_f64[0] = sub_2237A55FC((char *)a1, (double *)(a1 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5, v17);
        return result;
      }
      sub_2237E9204(a1, v15, v16, (uint64_t)a4);
      v27 = (uint64_t)&a4[3 * v14];
      sub_2237E9204(a1 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v27);
      v28 = (__n64 *)&a4[3 * a3];
      v29 = a1 + 24;
      v30 = (__n64 *)v27;
      v31 = (unint64_t)a4;
      do
      {
        if (v30 == v28)
        {
          if (v31 == v27)
            return result;
          v34 = v29 - 24;
          v35 = (unint64_t)&a4[3 * v14 - 3] - v31;
          if (v35 >= 0x198)
          {
            v39 = 24 * (((unint64_t)&a4[3 * v14 - 3] - v31) / 0x18);
            v41 = v29 - 8 < v39 + v31 + 24 && v31 + 16 < v29 + v39;
            if (v31 >= v29 + v39 - 8 || v34 >= v31 + 16 + v39)
            {
              if (v41)
              {
                v36 = (__n64 *)v31;
              }
              else
              {
                v43 = 0;
                v44 = v35 / 0x18 + 1;
                v45 = 24 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
                v36 = (__n64 *)(v31 + v45);
                v34 = v29 + v45 - 24;
                v46 = v44 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v47 = (const double *)(v31 + v43);
                  v48 = (double *)(v29 + v43 - 24);
                  v49 = (double *)(v29 + v43 + 24);
                  *(float64x2x3_t *)result.n64_u64 = vld3q_f64(v47);
                  v47 += 6;
                  v62 = vld3q_f64(v47);
                  vst3q_f64(v48, *(float64x2x3_t *)result.n64_u64);
                  vst3q_f64(v49, v62);
                  v43 += 96;
                  v46 -= 4;
                }
                while (v46);
                if (v44 == (v44 & 0x1FFFFFFFFFFFFFFCLL))
                  return result;
              }
            }
            else
            {
              v36 = (__n64 *)v31;
            }
          }
          else
          {
            v36 = (__n64 *)v31;
          }
          do
          {
            *(__n64 *)v34 = (__n64)v36->n64_u64[0];
            *(__n64 *)(v34 + 8) = v36[1];
            result.n64_u64[0] = v36[2].n64_u64[0];
            *(double *)(v34 + 16) = result.n64_f64[0];
            v36 += 3;
            v34 += 24;
          }
          while (v36 != (__n64 *)v27);
          return result;
        }
        result.n64_u64[0] = v30[2].n64_u64[0];
        v33 = *(double *)(v31 + 16);
        if (result.n64_f64[0] <= v33)
        {
          n64_u64 = (_QWORD *)v31;
          v31 += 24;
          result.n64_f64[0] = v33;
        }
        else
        {
          n64_u64 = v30->n64_u64;
          v30 += 3;
        }
        *(_QWORD *)(v29 - 24) = *n64_u64;
        *(_QWORD *)(v29 - 16) = n64_u64[1];
        *(double *)(v29 - 8) = result.n64_f64[0];
        v29 += 24;
      }
      while (v31 != v27);
      if (v30 != v28)
      {
        v37 = v29 - 24;
        v38 = (char *)&a4[3 * a3] - (char *)v30 - 24;
        if (v38 < 0x198)
          goto LABEL_69;
        v50 = 3 * (((char *)&a4[3 * a3 - 3] - (char *)v30) / 0x18uLL);
        v51 = v29 - 8 >= (unint64_t)v30[v50 + 3].n64_u64 || (unint64_t)v30[2].n64_u64 >= v29 + v50 * 8;
        v52 = !v51;
        if ((unint64_t)v30 < v29 + v50 * 8 - 8 && v37 < (unint64_t)v30[v50 + 2].n64_u64)
          goto LABEL_69;
        if (v52)
          goto LABEL_69;
        v54 = 0;
        v55 = v38 / 0x18 + 1;
        v56 = 3 * (v55 & 0x1FFFFFFFFFFFFFFCLL);
        v57 = &v30[v56];
        v37 = v29 + v56 * 8 - 24;
        v58 = v55 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          n64_f64 = v30[v54].n64_f64;
          v60 = (double *)(v29 + v54 * 8 - 24);
          v61 = (double *)(v29 + v54 * 8 + 24);
          *(float64x2x3_t *)result.n64_u64 = vld3q_f64(n64_f64);
          n64_f64 += 6;
          v63 = vld3q_f64(n64_f64);
          vst3q_f64(v60, *(float64x2x3_t *)result.n64_u64);
          vst3q_f64(v61, v63);
          v54 += 12;
          v58 -= 4;
        }
        while (v58);
        v30 = v57;
        if (v55 != (v55 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            *(__n64 *)v37 = (__n64)v30->n64_u64[0];
            *(__n64 *)(v37 + 8) = v30[1];
            result.n64_u64[0] = v30[2].n64_u64[0];
            *(double *)(v37 + 16) = result.n64_f64[0];
            v30 += 3;
            v37 += 24;
          }
          while (v30 != v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2237E9204(uint64_t result, double *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double *v7;
  __int128 v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  if (a3)
  {
    v4 = a4;
    v7 = (double *)result;
    if (a3 == 2)
    {
      v9 = a2 - 3;
      if (*(a2 - 1) <= *(double *)(result + 16))
      {
        v23 = *(_OWORD *)result;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
        *(_OWORD *)a4 = v23;
        v11 = *(_OWORD *)v9;
        v12 = *((_QWORD *)a2 - 1);
      }
      else
      {
        v10 = *(_OWORD *)v9;
        *(double *)(a4 + 16) = *(a2 - 1);
        *(_OWORD *)a4 = v10;
        v11 = *(_OWORD *)result;
        v12 = *(_QWORD *)(result + 16);
      }
      *(_QWORD *)(a4 + 40) = v12;
      *(_OWORD *)(a4 + 24) = v11;
    }
    else if (a3 == 1)
    {
      v8 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      v24 = a3 >> 1;
      v25 = 24 * (a3 >> 1);
      v26 = result + v25;
      sub_2237E8D94(result, result + v25, a3 >> 1, a4, a3 >> 1);
      result = sub_2237E8D94(&v7[(unint64_t)v25 / 8], a2, a3 - v24, v4 + v25, a3 - v24);
      v27 = &v7[(unint64_t)v25 / 8];
      while (v27 != a2)
      {
        if (v27[2] <= v7[2])
        {
          v28 = *(_OWORD *)v7;
          *(double *)(v4 + 16) = v7[2];
          *(_OWORD *)v4 = v28;
          v4 += 24;
          v7 += 3;
          if (v7 == (double *)v26)
            goto LABEL_28;
        }
        else
        {
          v29 = *(_OWORD *)v27;
          *(double *)(v4 + 16) = v27[2];
          *(_OWORD *)v4 = v29;
          v4 += 24;
          v27 += 3;
          if (v7 == (double *)v26)
          {
LABEL_28:
            if (v27 != a2)
            {
              v30 = 0;
              do
              {
                v31 = v4 + v30 * 8;
                v32 = *(_OWORD *)&v27[v30];
                *(double *)(v31 + 16) = v27[v30 + 2];
                *(_OWORD *)v31 = v32;
                v30 += 3;
              }
              while (&v27[v30] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != (double *)v26)
      {
        v33 = 0;
        do
        {
          v34 = v4 + v33 * 8;
          v35 = *(_OWORD *)&v7[v33];
          *(double *)(v34 + 16) = v7[v33 + 2];
          *(_OWORD *)v34 = v35;
          v33 += 3;
        }
        while (&v7[v33] != (double *)v26);
      }
    }
    else if ((double *)result != a2)
    {
      v13 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v13;
      v14 = (_QWORD *)(result + 24);
      if ((double *)(result + 24) != a2)
      {
        v15 = 0;
        v16 = (_OWORD *)a4;
        do
        {
          v18 = v14;
          v19 = (_OWORD *)((char *)v16 + 24);
          if (v7[5] <= *((double *)v16 + 2))
          {
            v17 = *(_OWORD *)v14;
            *((_QWORD *)v16 + 5) = v14[2];
            *v19 = v17;
          }
          else
          {
            *v19 = *v16;
            *((_QWORD *)v16 + 5) = *((_QWORD *)v16 + 2);
            v20 = a4;
            if (v16 != (_OWORD *)a4)
            {
              v21 = v15;
              while (1)
              {
                v20 = a4 + v21;
                v22 = *(double *)(a4 + v21 - 8);
                if (v7[5] <= v22)
                  break;
                *(_OWORD *)v20 = *(_OWORD *)(v20 - 24);
                *(double *)(v20 + 16) = v22;
                v21 -= 24;
                if (!v21)
                {
                  v20 = a4;
                  break;
                }
              }
            }
            *(_QWORD *)v20 = *v18;
            *(double *)(v20 + 8) = v7[4];
            *(double *)(v20 + 16) = v7[5];
          }
          v14 = v18 + 3;
          v15 += 24;
          v16 = v19;
          v7 = (double *)v18;
        }
        while (v18 + 3 != (_QWORD *)a2);
      }
    }
  }
  return result;
}

_QWORD *sub_2237E94BC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD **)a2;
  v5 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 != *a3)
  {
    v6 = 0;
    v7 = *(_QWORD **)(a2 + 24);
    v8 = *(_QWORD **)a2;
    do
    {
      v9 = v6;
      v10 = v8 + 1;
      v8 = *(_QWORD **)(a2 + 24);
      if (v10 != v7)
      {
        v8 = v10;
        while (*v8 != -1)
        {
          if (++v8 == v7)
          {
            v8 = *(_QWORD **)(a2 + 24);
            break;
          }
        }
      }
      ++v6;
    }
    while (v8 != v5);
    if (v9 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_22367C394();
    v11 = *(_QWORD *)(a2 + 8);
    v12 = operator new(8 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *v12 = v11;
      while (1)
      {
        ++v4;
        ++v11;
        if (v4 == v7)
          break;
        if (*v4 == -1)
          goto LABEL_12;
      }
      v4 = v7;
LABEL_12:
      ++v12;
    }
    while (v4 != v5);
    a1[1] = v12;
  }
  return a1;
}

void sub_2237E95C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2237E95E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_22;
  }
  v9 = *(char **)v4;
  v10 = (uint64_t)&v6[-*(_QWORD *)v4];
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    sub_22367C394();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_223174E94();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

_QWORD *sub_2237E9760(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 16;
  v3 = (_QWORD *)a1[19];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_2237E97E4()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2237E97F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5A130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2237E9830(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5A130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_2237E9850@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *v4;
  if ((unint64_t)(0x21CFB2B78C13521DLL * ((v4[1] - *v4) >> 3)) <= *a2
    || (v6 = *(_QWORD **)(a1 + 16), v7 = a2[1], 0x21CFB2B78C13521DLL * ((uint64_t)(v6[1] - *v6) >> 3) <= v7))
  {
    sub_2236C5448();
  }
  result = *(__n128 *)(v5 + 424 * *a2);
  v9 = *(_OWORD *)(*v6 + 424 * v7);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_2237E98D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes2v212_GLOBAL__N_111TrackPlanesERKNSt3__16vectorINS1_13KeyframePlaneENS4_9allo"
                     "catorIS6_EEEESB_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes2v212_GLOBAL__N_111TrackPlanesERKNSt3__16vectorINS1_13KeyframePlan"
                                "eENS4_9allocatorIS6_EEEESB_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes2v212_GLOBAL__N_111TrackPlanesERKNSt3__16vectorINS1_13KeyframePlaneENS4_9allocatorIS6_EEEESB_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes2v212_GLOBAL__N_111TrackPlanesERKNSt3__16vectorINS1_13KeyframePlaneENS4_9allocatorIS6_EEEESB_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2237E993C()
{
  return &unk_24EC5A1A0;
}

void sub_2237E994C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2237E9960(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5A1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2237E9998(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5A1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2237E99B8(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  if (*(_DWORD *)(a1 + 16) == 2)
    v4 = **(_QWORD ***)v2;
  else
    v4 = *(_QWORD **)(v2 + 8);
  if (0x21CFB2B78C13521DLL * ((uint64_t)(v4[1] - *v4) >> 3) <= v3)
    sub_2236C5448();
  return *(_QWORD *)(*v4 + 424 * v3);
}

uint64_t sub_2237E9A24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d5recon8kfplanes2v213SetDifferenceImLb1EE25TransformedWithChangeTypeIZNS2_12_GLOBAL__N_125M"
                     "aybeTrackAndUpdatePlanesERNSt3__16vectorINS1_13KeyframePlaneENS7_9allocatorIS9_EEEENS_3esn11Optiona"
                     "lRefIKSC_EEE3$_1Lb1EEENS3_INS7_13invoke_resultIT_JmNS2_10ChangeTypeEEE4typeEXT0_EEEOSK_ENKUlSL_E_clESL_EUlSP_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d5recon8kfplanes2v213SetDifferenceImLb1EE25TransformedWithChangeTypeIZNS2_12_GLO"
                                "BAL__N_125MaybeTrackAndUpdatePlanesERNSt3__16vectorINS1_13KeyframePlaneENS7_9allocatorIS"
                                "9_EEEENS_3esn11OptionalRefIKSC_EEE3$_1Lb1EEENS3_INS7_13invoke_resultIT_JmNS2_10ChangeTyp"
                                "eEEE4typeEXT0_EEEOSK_ENKUlSL_E_clESL_EUlSP_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d5recon8kfplanes2v213SetDifferenceImLb1EE25TransformedWithChangeTypeIZNS2_12_GLOBAL__N_125MaybeTrackAndUpdatePlanesERNSt3__16vectorINS1_13KeyframePlaneENS7_9allocatorIS9_EEEENS_3esn11OptionalRefIKSC_EEE3$_1Lb1EEENS3_INS7_13invoke_resultIT_JmNS2_10ChangeTypeEEE4typeEXT0_EEEOSK_ENKUlSL_E_clESL_EUlSP_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d5recon8kfplanes2v213SetDifferenceImLb1EE25TransformedWithChangeTypeIZNS2_12_GLOBAL__N_125MaybeTrackAndUpdatePlanesERNSt3__16vectorINS1_13KeyframePlaneENS7_9allocatorIS9_EEEENS_3esn11OptionalRefIKSC_EEE3$_1Lb1EEENS3_INS7_13invoke_resultIT_JmNS2_10ChangeTypeEEE4typeEXT0_EEEOSK_ENKUlSL_E_clESL_EUlSP_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2237E9A90()
{
  return &unk_24EC5A230;
}

uint64_t sub_2237E9A9C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v27 = *a1;
  v2 = v28;
  v3 = (uint64_t *)a1[4];
  if (v3)
  {
    if (v3 == a1 + 1)
    {
      v29 = v28;
      (*(void (**)(uint64_t *, _QWORD *))(*v3 + 24))(v3, v28);
    }
    else
    {
      v29 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v29 = 0;
  }
  v24 = a1[5];
  v4 = v25;
  v5 = a1[9];
  if (!v5)
    goto LABEL_9;
  if ((uint64_t *)v5 != a1 + 6)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_9:
    v26 = (_QWORD *)v5;
    goto LABEL_11;
  }
  v26 = v25;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v25);
LABEL_11:
  v6 = (uint64_t)v29;
  v33 = v27;
  v7 = v34;
  if (!v29)
  {
LABEL_14:
    v35 = (_QWORD *)v6;
    goto LABEL_16;
  }
  if (v29 != v28)
  {
    v6 = (*(uint64_t (**)(void))(*v29 + 16))();
    goto LABEL_14;
  }
  v35 = v34;
  (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v34);
LABEL_16:
  v8 = (uint64_t)v26;
  v30 = v24;
  v9 = v31;
  if (!v26)
  {
LABEL_19:
    v32 = (_QWORD *)v8;
    goto LABEL_21;
  }
  if (v26 != v25)
  {
    v8 = (*(uint64_t (**)(void))(*v26 + 16))();
    goto LABEL_19;
  }
  v32 = v31;
  (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v31);
LABEL_21:
  v10 = (uint64_t)v35;
  v39 = v33;
  v11 = v40;
  if (!v35)
  {
LABEL_24:
    v41 = (_BYTE *)v10;
    goto LABEL_26;
  }
  if (v35 != v34)
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*v35 + 16))(v35);
    goto LABEL_24;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v40);
LABEL_26:
  v12 = v30;
  v36 = v30;
  if (!v32)
  {
    v38 = 0;
    v15 = v39;
    goto LABEL_32;
  }
  v13 = v37;
  if (v32 != v31)
  {
    v14 = (_BYTE *)(*(uint64_t (**)(void))(*v32 + 16))();
    v38 = v14;
    v15 = v39;
    v12 = v36;
    if (v14 != v37)
      goto LABEL_29;
LABEL_36:
    v16 = 4;
LABEL_37:
    (*(void (**)(_QWORD *))(*v13 + 8 * v16))(v13);
    v17 = v41;
    if (v41 == v40)
      goto LABEL_38;
    goto LABEL_33;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, v37);
  v14 = v38;
  v15 = v39;
  v12 = v36;
  if (v38 == v37)
    goto LABEL_36;
LABEL_29:
  if (v14)
  {
    v16 = 5;
    v13 = v14;
    goto LABEL_37;
  }
LABEL_32:
  v17 = v41;
  if (v41 == v40)
  {
LABEL_38:
    v18 = 4;
    goto LABEL_39;
  }
LABEL_33:
  if (!v17)
    goto LABEL_40;
  v18 = 5;
  v11 = v17;
LABEL_39:
  (*(void (**)(_QWORD *))(*v11 + 8 * v18))(v11);
LABEL_40:
  if (v32 == v31)
  {
    v19 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_45;
    v19 = 5;
    v9 = v32;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v19))(v9);
LABEL_45:
  if (v35 == v34)
  {
    v20 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_50;
    v20 = 5;
    v7 = v35;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v20))(v7);
LABEL_50:
  if (v26 == v25)
  {
    v21 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_55;
    v21 = 5;
    v4 = v26;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v21))(v4);
LABEL_55:
  if (v29 == v28)
  {
    v22 = 4;
    goto LABEL_59;
  }
  if (v29)
  {
    v22 = 5;
    v2 = v29;
LABEL_59:
    (*(void (**)(_QWORD *))(*v2 + 8 * v22))(v2);
  }
  return -((v15 - v12) >> 3);
}

void sub_2237E9E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29)
{
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v35 = v33;
  v37 = *(_QWORD **)(v34 - 96);
  if (v37 == v35)
  {
    v38 = v35;
    v39 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v39 = 5;
    v38 = *(_QWORD **)(v34 - 96);
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  if (a24 == v32)
  {
    v40 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_11;
    v40 = 5;
    v32 = a24;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v40))(v32);
LABEL_11:
  if (a29 == v31)
  {
    v41 = 4;
  }
  else
  {
    if (!a29)
      goto LABEL_16;
    v41 = 5;
    v31 = a29;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v41))(v31);
LABEL_16:
  if (a14 == v30)
  {
    v42 = 4;
  }
  else
  {
    if (!a14)
      goto LABEL_21;
    v42 = 5;
    v30 = a14;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v42))(v30);
LABEL_21:
  if (a19 == v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    _Unwind_Resume(exception_object);
  }
  if (!a19)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a19 + 40))(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2237E9F6C(char ***a1, char ***a2)
{
  char ***v4;
  uint64_t v5;
  char **v6;
  char ***v7;
  char ***v8;
  char ***v9;
  char ***v10;
  char ***v11;
  char ***v12;
  uint64_t v13;
  _QWORD *v14;
  char ***v15;
  _QWORD *v16;
  char ***v17;
  _QWORD *v18;
  char ***v19;
  _QWORD *v20;
  char **v21;
  char ***v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char **v28;
  char ***v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char ***v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char ***v46;
  _QWORD *v47;
  char **v48;
  _QWORD *v49;
  char **v50;
  uint64_t v51;
  char ***v52;
  uint64_t v53;
  uint64_t v54;
  char ***v55;
  char ***v56;
  _QWORD *v57;
  char ***v58;
  _QWORD *v59;
  char ***v60;
  _QWORD *v61;
  char ***v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  char ***v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char **v85;
  char ***v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  _QWORD v110[3];
  _QWORD *v111;
  char **v112;
  _QWORD v113[3];
  _QWORD *v114;
  char **v115;
  _QWORD v116[3];
  _QWORD *v117;
  char **v118;
  _QWORD v119[3];
  _QWORD *v120;
  char **v121;
  _BYTE v122[24];
  _BYTE *v123;
  char **v124;
  char **v125;
  _QWORD v126[3];
  _QWORD *v127;
  char **v128;
  _QWORD v129[3];
  _QWORD *v130;
  char **v131;
  _QWORD v132[3];
  _QWORD *v133;
  char **v134;
  _QWORD v135[3];
  _QWORD *v136;
  char **v137;
  _QWORD v138[3];
  _QWORD *v139;
  char **v140;
  _QWORD v141[3];
  _QWORD *v142;
  char **v143;
  _QWORD v144[3];
  _QWORD *v145;
  char **v146;
  _BYTE v147[24];
  _BYTE *v148;
  char **v149;
  _QWORD v150[3];
  _QWORD *v151;
  char **v152;
  _QWORD v153[3];
  _QWORD *v154;
  char **v155;
  char **v156;
  _QWORD v157[3];
  _QWORD *v158;
  char **v159;
  _QWORD v160[3];
  _QWORD *v161;
  char **v162;
  _QWORD v163[3];
  _QWORD *v164;
  char **v165;
  _QWORD v166[3];
  _QWORD *v167;
  char **v168;
  _QWORD v169[3];
  _QWORD *v170;
  char **v171;
  _QWORD v172[3];
  _QWORD *v173;
  char **v174;
  _QWORD v175[3];
  _QWORD *v176;
  char **v177;
  _QWORD v178[3];
  _QWORD *v179;
  char **v180;
  _QWORD v181[3];
  _QWORD *v182;
  _OWORD v183[2];
  _QWORD v184[3];

  v184[1] = *MEMORY[0x24BDAC8D0];
  v112 = *a1;
  v4 = (char ***)a1[4];
  if (v4)
  {
    if (v4 == a1 + 1)
    {
      v114 = v113;
      ((void (*)(char ***, _QWORD *))(*v4)[3])(v4, v113);
    }
    else
    {
      v114 = (_QWORD *)((uint64_t (*)(char ***))(*v4)[2])(v4);
    }
  }
  else
  {
    v114 = 0;
  }
  v109 = a1[5];
  v5 = (uint64_t)a1[9];
  if (!v5)
    goto LABEL_9;
  if ((char ***)v5 != a1 + 6)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_9:
    v111 = (_QWORD *)v5;
    goto LABEL_11;
  }
  v111 = v110;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v110);
LABEL_11:
  v6 = *a2;
  v118 = v112;
  v7 = &v118;
  if (!v114)
  {
LABEL_14:
    v7[4] = 0;
    goto LABEL_16;
  }
  if (v114 != v113)
  {
    v7 = &v112;
    v120 = v114;
    goto LABEL_14;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _QWORD *))(v113[0] + 24))(v113, v119);
LABEL_16:
  v115 = v109;
  v8 = &v115;
  if (!v111)
  {
LABEL_19:
    v8[4] = 0;
    goto LABEL_21;
  }
  if (v111 != v110)
  {
    v8 = &v109;
    v117 = v111;
    goto LABEL_19;
  }
  v117 = v116;
  (*(void (**)(_QWORD *, _QWORD *))(v110[0] + 24))(v110, v116);
LABEL_21:
  v128 = v118;
  v9 = &v128;
  if (!v120)
  {
LABEL_24:
    v9[4] = 0;
    goto LABEL_26;
  }
  if (v120 != v119)
  {
    v9 = &v118;
    v130 = v120;
    goto LABEL_24;
  }
  v130 = v129;
  (*(void (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v129);
LABEL_26:
  v125 = v115;
  v10 = &v125;
  if (!v117)
  {
LABEL_29:
    v10[4] = 0;
    goto LABEL_31;
  }
  if (v117 != v116)
  {
    v10 = &v115;
    v127 = v117;
    goto LABEL_29;
  }
  v127 = v126;
  (*(void (**)(_QWORD *, _QWORD *))(v116[0] + 24))(v116, v126);
LABEL_31:
  v134 = v128;
  v11 = &v134;
  if (!v130)
  {
LABEL_34:
    v11[4] = 0;
    goto LABEL_36;
  }
  if (v130 != v129)
  {
    v11 = &v128;
    v136 = v130;
    goto LABEL_34;
  }
  v136 = v135;
  (*(void (**)(_QWORD *))(v129[0] + 24))(v129);
LABEL_36:
  v131 = v125;
  v12 = &v131;
  if (!v127)
  {
LABEL_39:
    v12[4] = 0;
    goto LABEL_41;
  }
  if (v127 != v126)
  {
    v12 = &v125;
    v133 = v127;
    goto LABEL_39;
  }
  v133 = v132;
  (*(void (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v132);
LABEL_41:
  v13 = (uint64_t)v136;
  v159 = v134;
  v14 = v160;
  if (!v136)
  {
LABEL_44:
    v161 = (_QWORD *)v13;
    goto LABEL_46;
  }
  if (v136 != v135)
  {
    v13 = (*(uint64_t (**)(void))(*v136 + 16))();
    goto LABEL_44;
  }
  v161 = v160;
  (*(void (**)(_QWORD *, _QWORD *))(v135[0] + 24))(v135, v160);
LABEL_46:
  v156 = v131;
  v15 = &v156;
  v16 = v157;
  if (!v133)
  {
LABEL_49:
    v15[4] = 0;
    goto LABEL_51;
  }
  if (v133 != v132)
  {
    v15 = &v131;
    v158 = v133;
    goto LABEL_49;
  }
  v158 = v157;
  (*(void (**)(_QWORD *, _QWORD *))(v132[0] + 24))(v132, v157);
LABEL_51:
  v171 = v159;
  v17 = &v171;
  v18 = v172;
  if (!v161)
  {
LABEL_54:
    v17[4] = 0;
    goto LABEL_56;
  }
  if (v161 != v160)
  {
    v17 = &v159;
    v173 = v161;
    goto LABEL_54;
  }
  v173 = v172;
  (*(void (**)(_QWORD *, _QWORD *))(v160[0] + 24))(v160, v172);
LABEL_56:
  v168 = v156;
  v19 = &v168;
  v20 = v169;
  if (!v158)
  {
LABEL_59:
    v19[4] = 0;
    goto LABEL_61;
  }
  if (v158 != v157)
  {
    v19 = &v156;
    v170 = v158;
    goto LABEL_59;
  }
  v170 = v169;
  (*(void (**)(_QWORD *, _QWORD *))(v157[0] + 24))(v157, v169);
LABEL_61:
  v21 = v171;
  v180 = v171;
  v22 = &v180;
  v23 = v181;
  if (!v173)
    goto LABEL_64;
  if (v173 != v172)
  {
    v22 = &v171;
    v182 = v173;
LABEL_64:
    v22[4] = 0;
    v152 = v21;
    v24 = v153;
    v25 = v182;
    if (v182)
      goto LABEL_65;
LABEL_69:
    v154 = 0;
    *(_QWORD *)&v183[0] = v21;
    goto LABEL_70;
  }
  v182 = v181;
  (*(void (**)(_QWORD *, _QWORD *))(v172[0] + 24))(v172, v181);
  v21 = v180;
  v152 = v180;
  v24 = v153;
  v25 = v182;
  if (!v182)
    goto LABEL_69;
LABEL_65:
  if (v25 == v181)
  {
    v154 = v153;
    (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v153);
    v26 = v154;
    *(_QWORD *)&v183[0] = v152;
    if (v154)
      goto LABEL_72;
LABEL_70:
    v184[0] = 0;
    goto LABEL_75;
  }
  v26 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v25 + 16))(v25);
  v154 = v26;
  *(_QWORD *)&v183[0] = v152;
  if (!v26)
    goto LABEL_70;
LABEL_72:
  if (v26 == v153)
  {
    v184[0] = (char *)v183 + 8;
    (*(void (**)(_QWORD *))(v153[0] + 24))(v153);
  }
  else
  {
    v184[0] = v26;
    v154 = 0;
  }
LABEL_75:
  if (v154 == v153)
  {
    v27 = 4;
  }
  else
  {
    if (!v154)
      goto LABEL_80;
    v27 = 5;
    v24 = v154;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_80:
  v28 = v168;
  v174 = v168;
  v29 = &v174;
  v30 = v175;
  if (!v170)
    goto LABEL_83;
  if (v170 != v169)
  {
    v29 = &v168;
    v176 = v170;
LABEL_83:
    v29[4] = 0;
    v152 = v28;
    v31 = v153;
    v32 = v176;
    if (v176)
      goto LABEL_84;
LABEL_88:
    v154 = 0;
    v177 = v28;
    goto LABEL_89;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v169[0] + 24))(v169, v175);
  v28 = v174;
  v152 = v174;
  v31 = v153;
  v32 = v176;
  if (!v176)
    goto LABEL_88;
LABEL_84:
  if (v32 == v175)
  {
    v154 = v153;
    (*(void (**)(_QWORD *, _QWORD *))(v175[0] + 24))(v175, v153);
    v33 = v154;
    v177 = v152;
    if (v154)
      goto LABEL_91;
LABEL_89:
    v179 = 0;
    goto LABEL_94;
  }
  v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v32 + 16))(v32);
  v154 = v33;
  v177 = v152;
  if (!v33)
    goto LABEL_89;
LABEL_91:
  if (v33 == v153)
  {
    v179 = v178;
    (*(void (**)(_QWORD *))(v153[0] + 24))(v153);
  }
  else
  {
    v179 = v33;
    v154 = 0;
  }
LABEL_94:
  if (v154 == v153)
  {
    v34 = 4;
  }
  else
  {
    if (!v154)
      goto LABEL_99;
    v34 = 5;
    v31 = v154;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v34))(v31);
LABEL_99:
  v162 = *(char ***)&v183[0];
  v35 = &v162;
  if (!v184[0])
  {
LABEL_102:
    v35[4] = 0;
    goto LABEL_104;
  }
  v35 = (char ***)v183;
  if ((_OWORD *)v184[0] != (_OWORD *)((char *)v183 + 8))
  {
    v164 = (_QWORD *)v184[0];
    goto LABEL_102;
  }
  v164 = v163;
  (*(void (**)(void))(*((_QWORD *)&v183[0] + 1) + 24))();
LABEL_104:
  v165 = v177;
  if (v179)
  {
    if (v179 == v178)
    {
      v167 = v166;
      (*(void (**)(void))(v178[0] + 24))();
    }
    else
    {
      v167 = v179;
      v179 = 0;
    }
  }
  else
  {
    v167 = 0;
  }
  v36 = v179;
  if (v179 == v178)
  {
    v37 = 4;
    v36 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_114;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_114:
  if (v176 == v175)
  {
    v38 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_119;
    v38 = 5;
    v30 = v176;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v38))(v30);
LABEL_119:
  v39 = (_QWORD *)v184[0];
  if ((_OWORD *)v184[0] == (_OWORD *)((char *)v183 + 8))
  {
    v40 = 4;
    v39 = (_QWORD *)v183 + 1;
  }
  else
  {
    if (!v184[0])
      goto LABEL_124;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_124:
  if (v182 == v181)
  {
    v41 = 4;
  }
  else
  {
    if (!v182)
      goto LABEL_129;
    v41 = 5;
    v23 = v182;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v41))(v23);
LABEL_129:
  if (v170 == v169)
  {
    v42 = 4;
  }
  else
  {
    if (!v170)
      goto LABEL_134;
    v42 = 5;
    v20 = v170;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v42))(v20);
LABEL_134:
  if (v173 == v172)
  {
    v43 = 4;
  }
  else
  {
    if (!v173)
      goto LABEL_139;
    v43 = 5;
    v18 = v173;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v43))(v18);
LABEL_139:
  if (v158 == v157)
  {
    v44 = 4;
  }
  else
  {
    if (!v158)
      goto LABEL_144;
    v44 = 5;
    v16 = v158;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v44))(v16);
LABEL_144:
  if (v161 == v160)
  {
    v45 = 4;
  }
  else
  {
    if (!v161)
      goto LABEL_149;
    v45 = 5;
    v14 = v161;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v45))(v14);
LABEL_149:
  v149 = v162;
  v46 = &v149;
  v47 = v150;
  if (!v164)
  {
LABEL_152:
    v46[4] = 0;
    goto LABEL_154;
  }
  if (v164 != v163)
  {
    v46 = &v162;
    v151 = v164;
    goto LABEL_152;
  }
  v151 = v150;
  (*(void (**)(_QWORD *, _QWORD *))(v163[0] + 24))(v163, v150);
LABEL_154:
  v48 = v165;
  v146 = v165;
  v49 = v147;
  if (v167)
  {
    if (v167 == v166)
    {
      v148 = v147;
      (*(void (**)(void))(v166[0] + 24))();
      v48 = v146;
      v180 = v6;
      v50 = v149;
      if (v149 == v146)
        goto LABEL_164;
    }
    else
    {
      v148 = v167;
      v167 = 0;
      v180 = v6;
      v50 = v149;
      if (v149 == v165)
        goto LABEL_164;
    }
  }
  else
  {
    v148 = 0;
    v180 = v6;
    v50 = v149;
    if (v149 == v165)
      goto LABEL_164;
  }
  v48 = v50;
  do
  {
    if (!v151)
      sub_223198474();
    *(_QWORD *)&v183[0] = (*(uint64_t (**)(_QWORD *, char **))(*v151 + 48))(v151, v48);
    *((_QWORD *)&v183[0] + 1) = v51;
    sub_2232E9564(&v180, v183);
    v48 = v149 + 1;
    v149 = v48;
  }
  while (v48 != v146);
LABEL_164:
  v152 = v48;
  v52 = &v152;
  if (!v151)
  {
LABEL_167:
    v52[4] = 0;
    goto LABEL_169;
  }
  if (v151 != v150)
  {
    v52 = &v149;
    v154 = v151;
    goto LABEL_167;
  }
  v154 = v153;
  (*(void (**)(_QWORD *, _QWORD *))(v150[0] + 24))(v150, v153);
LABEL_169:
  v155 = v180;
  if (v148 == v147)
  {
    v53 = 4;
  }
  else
  {
    if (!v148)
      goto LABEL_174;
    v53 = 5;
    v49 = v148;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v53))(v49);
LABEL_174:
  if (v151 == v150)
  {
    v54 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_179;
    v54 = 5;
    v47 = v151;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v54))(v47);
LABEL_179:
  v140 = v134;
  v55 = &v140;
  if (!v136)
  {
LABEL_182:
    v55[4] = 0;
    goto LABEL_184;
  }
  if (v136 != v135)
  {
    v55 = &v134;
    v142 = v136;
    goto LABEL_182;
  }
  v142 = v141;
  (*(void (**)(void))(v135[0] + 24))();
LABEL_184:
  v137 = v152;
  v56 = &v137;
  v57 = v138;
  if (!v154)
  {
LABEL_187:
    v56[4] = 0;
    goto LABEL_189;
  }
  if (v154 != v153)
  {
    v56 = &v152;
    v139 = v154;
    goto LABEL_187;
  }
  v139 = v138;
  (*(void (**)(_QWORD *, _QWORD *))(v153[0] + 24))(v153, v138);
LABEL_189:
  v171 = v140;
  v58 = &v171;
  v59 = v172;
  if (!v142)
  {
LABEL_192:
    v58[4] = 0;
    goto LABEL_194;
  }
  if (v142 != v141)
  {
    v58 = &v140;
    v173 = v142;
    goto LABEL_192;
  }
  v173 = v172;
  (*(void (**)(_QWORD *, _QWORD *))(v141[0] + 24))(v141, v172);
LABEL_194:
  v168 = v137;
  v60 = &v168;
  v61 = v169;
  if (!v139)
  {
LABEL_197:
    v60[4] = 0;
    goto LABEL_199;
  }
  if (v139 != v138)
  {
    v60 = &v137;
    v170 = v139;
    goto LABEL_197;
  }
  v170 = v169;
  (*(void (**)(_QWORD *, _QWORD *))(v138[0] + 24))(v138, v169);
LABEL_199:
  v177 = v171;
  v62 = &v177;
  v63 = v178;
  if (!v173)
  {
LABEL_202:
    v62[4] = 0;
    goto LABEL_204;
  }
  if (v173 != v172)
  {
    v62 = &v171;
    v179 = v173;
    goto LABEL_202;
  }
  v179 = v178;
  (*(void (**)(_QWORD *, _QWORD *))(v172[0] + 24))(v172, v178);
LABEL_204:
  v174 = v168;
  v64 = v175;
  if (!v170)
  {
    v65 = &v176;
    goto LABEL_208;
  }
  if (v170 != v169)
  {
    v65 = &v170;
    v176 = v170;
LABEL_208:
    *v65 = 0;
    goto LABEL_210;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v169[0] + 24))(v169, v175);
LABEL_210:
  *(_QWORD *)&v183[0] = v177;
  v66 = (_QWORD *)v183 + 1;
  if (!v179)
  {
    v67 = v184;
    goto LABEL_214;
  }
  if (v179 != v178)
  {
    v67 = &v179;
    v184[0] = v179;
LABEL_214:
    *v67 = 0;
    goto LABEL_216;
  }
  v184[0] = (char *)v183 + 8;
  (*(void (**)(_QWORD *, char *))(v178[0] + 24))(v178, (char *)v183 + 8);
LABEL_216:
  v68 = v174;
  v180 = v174;
  v69 = &v180;
  v70 = v181;
  if (!v176)
    goto LABEL_219;
  if (v176 != v175)
  {
    v69 = &v174;
    v182 = v176;
LABEL_219:
    v69[4] = 0;
    v143 = v68;
    v71 = v144;
    v72 = v182;
    if (v182)
      goto LABEL_220;
LABEL_223:
    v145 = 0;
    goto LABEL_225;
  }
  v182 = v181;
  (*(void (**)(_QWORD *, _QWORD *))(v175[0] + 24))(v175, v181);
  v143 = v180;
  v71 = v144;
  v72 = v182;
  if (!v182)
    goto LABEL_223;
LABEL_220:
  if (v72 == v181)
  {
    v145 = v144;
    (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v144);
  }
  else
  {
    v145 = v72;
    v182 = 0;
  }
LABEL_225:
  if (v182 == v181)
  {
    v73 = 4;
  }
  else
  {
    if (!v182)
      goto LABEL_230;
    v73 = 5;
    v70 = v182;
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v73))(v70);
LABEL_230:
  if ((_OWORD *)v184[0] == (_OWORD *)((char *)v183 + 8))
  {
    v75 = 4;
    v74 = v113;
  }
  else
  {
    v74 = v113;
    if (!v184[0])
      goto LABEL_235;
    v75 = 5;
    v66 = (_QWORD *)v184[0];
  }
  (*(void (**)(_QWORD *))(*v66 + 8 * v75))(v66);
LABEL_235:
  if (v176 == v175)
  {
    v78 = 4;
    v76 = v110;
    v77 = v135;
  }
  else
  {
    v76 = v110;
    v77 = v135;
    if (!v176)
      goto LABEL_240;
    v78 = 5;
    v64 = v176;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v78))(v64);
LABEL_240:
  if (v179 == v178)
  {
    v81 = 4;
    v79 = v119;
    v80 = v163;
  }
  else
  {
    v79 = v119;
    v80 = v163;
    if (!v179)
      goto LABEL_245;
    v81 = 5;
    v63 = v179;
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v81))(v63);
LABEL_245:
  if (v170 == v169)
  {
    v83 = 4;
    v82 = v116;
  }
  else
  {
    v82 = v116;
    if (!v170)
      goto LABEL_250;
    v83 = 5;
    v61 = v170;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v83))(v61);
LABEL_250:
  if (v173 == v172)
  {
    v84 = 4;
  }
  else
  {
    if (!v173)
      goto LABEL_255;
    v84 = 5;
    v59 = v173;
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v84))(v59);
LABEL_255:
  v85 = v155;
  v121 = v143;
  v86 = &v121;
  v87 = v122;
  if (!v145)
  {
LABEL_258:
    v86[4] = 0;
    goto LABEL_260;
  }
  if (v145 != v144)
  {
    v86 = &v143;
    v123 = v145;
    goto LABEL_258;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _BYTE *))(v144[0] + 24))(v144, v122);
LABEL_260:
  v124 = v85;
  if (v145 == v144)
  {
    v89 = 4;
    v88 = v129;
  }
  else
  {
    v88 = v129;
    if (!v145)
      goto LABEL_265;
    v89 = 5;
    v71 = v145;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v89))(v71);
LABEL_265:
  if (v139 == v138)
  {
    v91 = 4;
    v90 = v166;
  }
  else
  {
    v90 = v166;
    if (!v139)
      goto LABEL_270;
    v91 = 5;
    v57 = v139;
  }
  (*(void (**)(_QWORD *))(*v57 + 8 * v91))(v57);
LABEL_270:
  v92 = v141;
  if (v142 == v141)
  {
    v94 = 4;
    v93 = v126;
  }
  else
  {
    v93 = v126;
    if (!v142)
      goto LABEL_275;
    v94 = 5;
    v92 = v142;
  }
  (*(void (**)(void))(*v92 + 8 * v94))();
LABEL_275:
  v95 = v153;
  if (v154 == v153)
  {
    v96 = 4;
  }
  else
  {
    if (!v154)
      goto LABEL_280;
    v96 = 5;
    v95 = v154;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_280:
  if (v167 == v166)
  {
    v97 = 4;
  }
  else
  {
    if (!v167)
      goto LABEL_285;
    v97 = 5;
    v90 = v167;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v97))(v90);
LABEL_285:
  if (v164 == v163)
  {
    v98 = 4;
  }
  else
  {
    if (!v164)
      goto LABEL_290;
    v98 = 5;
    v80 = v164;
  }
  (*(void (**)(_QWORD *))(*v80 + 8 * v98))(v80);
LABEL_290:
  result = v132;
  if (v133 == v132)
  {
    v100 = 4;
  }
  else
  {
    if (!v133)
      goto LABEL_295;
    v100 = 5;
    result = v133;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v100))();
LABEL_295:
  if (v136 == v135)
  {
    v101 = 4;
  }
  else
  {
    if (!v136)
      goto LABEL_300;
    v101 = 5;
    v77 = v136;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v77 + 8 * v101))(v77);
LABEL_300:
  if (v127 == v126)
  {
    v102 = 4;
  }
  else
  {
    if (!v127)
      goto LABEL_305;
    v102 = 5;
    v93 = v127;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v93 + 8 * v102))(v93);
LABEL_305:
  if (v130 == v129)
  {
    v103 = 4;
  }
  else
  {
    if (!v130)
      goto LABEL_310;
    v103 = 5;
    v88 = v130;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v88 + 8 * v103))(v88);
LABEL_310:
  if (v123 == v122)
  {
    v104 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_315;
    v104 = 5;
    v87 = v123;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v87 + 8 * v104))(v87);
LABEL_315:
  if (v117 == v116)
  {
    v105 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_320;
    v105 = 5;
    v82 = v117;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v82 + 8 * v105))(v82);
LABEL_320:
  if (v120 == v119)
  {
    v106 = 4;
  }
  else
  {
    if (!v120)
      goto LABEL_325;
    v106 = 5;
    v79 = v120;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v79 + 8 * v106))(v79);
LABEL_325:
  if (v111 == v110)
  {
    v107 = 4;
  }
  else
  {
    if (!v111)
      goto LABEL_330;
    v107 = 5;
    v76 = v111;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v76 + 8 * v107))(v76);
LABEL_330:
  if (v114 == v113)
  {
    v108 = 4;
  }
  else
  {
    if (!v114)
      return result;
    v108 = 5;
    v74 = v114;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v74 + 8 * v108))(v74);
}

void sub_2237EB11C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2237EB3E0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_2237EB43C()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237EB450(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float v35;
  float v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  unint64_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  float32x4_t **v50;
  float32x4_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  char *v61;
  unint64_t v62;
  float v63;
  int8x16_t v64;
  float32x2_t v65;
  _OWORD *v66;
  __int128 *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  unint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 *v113;
  uint64_t v114;
  _BYTE *v116;
  int v117;
  int v119;
  int32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  char *__p;
  char *v132;
  char *v133;
  __int128 v134;
  unsigned __int8 v135;
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v6 = a3[1] - *a3;
  v7 = v6 >> 4;
  if (!(v6 >> 4))
  {
    *a5 = 0;
    a5[24] = 0;
    return;
  }
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 < v7)
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  v117 = v7;
  __p = 0;
  v132 = 0;
  v133 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v11 = (v6 >> 4);
  v12 = operator new((((v11 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
  v13 = v12;
  v14 = (v11 - 1) >> 6;
  if (v11 < 0x41)
    v14 = 0;
  v12[v14] = 0;
  v15 = a3;
  if ((v6 >> 4))
  {
    if (v11 >= 0x40)
      bzero(v12, 8 * (v11 >> 6));
    v16 = (v6 >> 4) & 0x3F;
    if (v16)
      v13[v11 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
  }
  v116 = a5;
  if (v117)
  {
    v17 = 0;
    while (2)
    {
      v119 = v17;
      v19 = 0;
      v20 = 0;
      v21 = 3.4028e38;
      while (2)
      {
        if (((*(_QWORD *)((char *)v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          goto LABEL_25;
        v136 = *(_OWORD *)(*v15 + 16 * v19);
        v41 = sub_22456636C((unsigned __int8 *)&v136);
        v47 = (int8x8_t)a4[1];
        if (!*(_QWORD *)&v47)
          goto LABEL_125;
        v48 = (uint8x8_t)vcnt_s8(v47);
        v48.i16[0] = vaddlv_u8(v48);
        if (v48.u32[0] > 1uLL)
        {
          v49 = v41;
          if (v41 >= *(_QWORD *)&v47)
            v49 = v41 % *(_QWORD *)&v47;
        }
        else
        {
          v49 = (*(_QWORD *)&v47 - 1) & v41;
        }
        v50 = *(float32x4_t ***)(*a4 + 8 * v49);
        if (!v50 || (v51 = *v50) == 0)
        {
LABEL_125:
          sub_2238227C8("Entry not found ", (unsigned __int8 *)&v136);
          if ((v135 & 0x80u) == 0)
            v113 = &v134;
          else
            v113 = (__int128 *)v134;
          if ((v135 & 0x80u) == 0)
            v114 = v135;
          else
            v114 = *((_QWORD *)&v134 + 1);
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeDatabase.cpp", 251, (uint64_t)&unk_224595B55, 0, (uint64_t)v113, v114, (void (*)(void **))sub_22457406C);
          if ((char)v135 < 0)
            operator delete((void *)v134);
          abort();
        }
        if (v48.u32[0] < 2uLL)
        {
          v52 = *(_QWORD *)&v47 - 1;
          while (1)
          {
            v55 = v51->i64[1];
            if (v41 == v55)
            {
              if (v51[1].i64[0] == (_QWORD)v136 && v51[1].i64[1] == *((_QWORD *)&v136 + 1))
                goto LABEL_55;
            }
            else if ((v55 & v52) != v49)
            {
              goto LABEL_125;
            }
            v51 = (float32x4_t *)v51->i64[0];
            if (!v51)
              goto LABEL_125;
          }
        }
        while (1)
        {
          v53 = v51->u64[1];
          if (v41 == v53)
            break;
          if (v53 >= *(_QWORD *)&v47)
            v53 %= *(_QWORD *)&v47;
          if (v53 != v49)
            goto LABEL_125;
LABEL_37:
          v51 = (float32x4_t *)v51->i64[0];
          if (!v51)
            goto LABEL_125;
        }
        if (v51[1].i64[0] != (_QWORD)v136 || v51[1].i64[1] != *((_QWORD *)&v136 + 1))
          goto LABEL_37;
LABEL_55:
        v58 = v51[3];
        v57 = v51[4];
        v60 = v51[5];
        v59 = v51[6];
        v43.i64[0] = *(_QWORD *)a2;
        v43.i32[2] = *(_DWORD *)(a2 + 8);
        v44.i64[0] = *(_QWORD *)(a2 + 16);
        v44.i32[2] = *(_DWORD *)(a2 + 24);
        v45.i64[0] = *(_QWORD *)(a2 + 32);
        v45.i32[2] = *(_DWORD *)(a2 + 40);
        v46.i64[0] = *(_QWORD *)(a2 + 48);
        v46.i32[2] = *(_DWORD *)(a2 + 56);
        v61 = v128;
        v62 = (unint64_t)(v129 - v128) >> 6;
        if ((_DWORD)v62)
        {
          v120 = v44;
          v121 = v46;
          v122 = v43;
          v123 = v45;
          v124 = v51[3];
          v125 = v51[4];
          v126 = v51[5];
          v63 = 0.0;
          if (v128 != v129)
          {
            v127 = v51[6];
            do
            {
              v42.i64[0] = *((_QWORD *)v61 + 6);
              v42.i32[2] = *((_DWORD *)v61 + 14);
              v64 = (int8x16_t)vsubq_f32(v59, v42);
              v65 = (float32x2_t)vextq_s8(v64, v64, 8uLL).u64[0];
              v42.f32[0] = powf(fmaxf(1.0- sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1), *(float32x2_t *)v64.i8, 1), v65, v65).f32[0]), 0.0), 4.5);
              v59 = v127;
              v63 = v63 + v42.f32[0];
              v61 += 64;
            }
            while (v61 != v129);
          }
          v22 = v63 / (float)v62;
          v57 = v125;
          v60 = v126;
          v45 = v123;
          v58 = v124;
          v46 = v121;
          v43 = v122;
          v44 = v120;
        }
        else
        {
          v22 = 0.0;
        }
        v23.i64[0] = vzip1q_s32(v43, v44).u64[0];
        v23.i64[1] = v45.u32[0];
        v24 = (int8x16_t)vnegq_f32(v46);
        v25 = (int8x16_t)vtrn2q_s32(v43, v44);
        v25.i32[2] = v45.i32[1];
        v26 = vzip2q_s32(v43, v44);
        v27 = (int8x16_t)v26;
        v27.i32[2] = v45.i32[2];
        v28.i32[3] = 0;
        v28.i32[0] = v25.i32[0];
        v30 = vextq_s8(vextq_s8(v25, v25, 0xCuLL), v27, 8uLL);
        v29.i64[0] = v30.i64[1];
        *(uint64_t *)((char *)v28.i64 + 4) = v30.i64[0];
        v29.i64[1] = vdupq_laneq_s32((int32x4_t)v27, 2).u32[0];
        *(float32x2_t *)v31.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v23.f32, *(float *)v24.i32), *(float32x2_t *)v25.i8, *(float32x2_t *)v46.f32, 1), *(float32x2_t *)v26.i8, v46, 2);
        v31.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), *(float32x2_t *)v46.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).u32[0]);
        v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v58.f32[0]), v28, *(float32x2_t *)v58.f32, 1), v29, v58, 2), v31, v58, 3);
        v25.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v57.f32[0]), v28, *(float32x2_t *)v57.f32, 1), v29, v57, 2), v31, v57, 3).u64[0];
        v33 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v60.f32[0]), v28, *(float32x2_t *)v60.f32, 1), v29, v60, 2), v31, v60, 3);
        v34 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v59.f32[0]), v28, *(float32x2_t *)v59.f32, 1), v29, v59, 2), v31, v59, 3);
        v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v33, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1))).f32[0];
        if (v35 >= 3.0)
          v36 = 0.0;
        else
          v36 = (float)(1.0 - (float)(v35 / 3.0)) + (float)(1.0 - (float)(v35 / 3.0));
        v37 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
        v38 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1), v37, v37).f32[0])+ -0.35;
        if (v38 >= 0.0)
          v39 = v38 * v38;
        else
          v39 = (float)(v38 * v38) * 5.0;
        v40 = (float)(v36 + (float)(v39 * 0.2)) + v22;
        if (v40 < v21)
        {
          v21 = v40;
          v20 = v19;
        }
LABEL_25:
        if (++v19 != v11)
          continue;
        break;
      }
      v66 = sub_22381AF00(a4, *(_QWORD *)(*v15 + 16 * v20), *(_QWORD *)(*v15 + 16 * v20 + 8));
      v67 = v66 + 1;
      v68 = v129;
      if ((unint64_t)v129 < v130)
      {
        v69 = *v67;
        v70 = v66[2];
        v71 = v66[4];
        *((_OWORD *)v129 + 2) = v66[3];
        *((_OWORD *)v129 + 3) = v71;
        *(_OWORD *)v129 = v69;
        *((_OWORD *)v129 + 1) = v70;
        v72 = v129 + 64;
        v15 = a3;
        goto LABEL_77;
      }
      v73 = v128;
      v74 = (v129 - v128) >> 6;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 58)
        sub_223257BE4();
      v76 = v130 - (_QWORD)v128;
      if ((uint64_t)(v130 - (_QWORD)v128) >> 5 > v75)
        v75 = v76 >> 5;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFC0)
        v77 = 0x3FFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        if (!(v77 >> 58))
        {
          v78 = (char *)operator new(v77 << 6);
          goto LABEL_72;
        }
LABEL_134:
        sub_223174E94();
      }
      v78 = 0;
LABEL_72:
      v79 = &v78[64 * v74];
      v80 = *v67;
      v81 = v67[1];
      v82 = v67[3];
      *((_OWORD *)v79 + 2) = v67[2];
      *((_OWORD *)v79 + 3) = v82;
      *(_OWORD *)v79 = v80;
      *((_OWORD *)v79 + 1) = v81;
      v83 = v79;
      if (v129 == v128)
      {
        v15 = a3;
        v100 = &v78[64 * v77];
        v72 = v79 + 64;
        v128 = v79;
        v130 = (unint64_t)v100;
        if (v129)
          goto LABEL_76;
      }
      else
      {
        v15 = a3;
        do
        {
          v84 = *((_OWORD *)v68 - 4);
          v85 = *((_OWORD *)v68 - 3);
          v86 = *((_OWORD *)v68 - 1);
          *((_OWORD *)v83 - 2) = *((_OWORD *)v68 - 2);
          *((_OWORD *)v83 - 1) = v86;
          *((_OWORD *)v83 - 4) = v84;
          *((_OWORD *)v83 - 3) = v85;
          v83 -= 64;
          v68 -= 64;
        }
        while (v68 != v128);
        v68 = v128;
        v87 = &v78[64 * v77];
        v72 = v79 + 64;
        v128 = v83;
        v130 = (unint64_t)v87;
        if (v73)
LABEL_76:
          operator delete(v68);
      }
LABEL_77:
      v88 = v20;
      v129 = v72;
      v89 = (_OWORD *)(*v15 + 16 * v20);
      v90 = v132;
      if (v132 < v133)
      {
        *(_OWORD *)v132 = *v89;
        v18 = v132 + 16;
        goto LABEL_14;
      }
      v91 = (v132 - __p) >> 4;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 60)
        sub_22316E078();
      v93 = v133 - __p;
      if ((v133 - __p) >> 3 > v92)
        v92 = v93 >> 3;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
        v94 = 0xFFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        if (v94 >> 60)
          goto LABEL_134;
        v95 = (char *)operator new(16 * v94);
        v96 = &v95[16 * v91];
        *(_OWORD *)v96 = *v89;
        v97 = (uint64_t)v96;
        if (v132 != __p)
        {
LABEL_87:
          v15 = a3;
          do
          {
            *(_OWORD *)(v97 - 16) = *((_OWORD *)v90 - 1);
            v97 -= 16;
            v90 -= 16;
          }
          while (v90 != __p);
          v90 = __p;
          v98 = &v95[16 * v94];
          v18 = v96 + 16;
          __p = (char *)v97;
          v133 = v98;
          if (!v90)
          {
LABEL_14:
            v132 = v18;
            *(_QWORD *)((char *)v13 + ((v88 >> 3) & 0x1FFFFFF8)) |= 1 << v88;
            v17 = v119 + 1;
            if (v119 + 1 != v117)
              continue;
            v101 = __p;
            v10 = *(_DWORD *)(a1 + 8);
            v102 = v18 - __p;
            if (v10 <= (unint64_t)((v18 - __p) >> 4))
              goto LABEL_122;
LABEL_100:
            v134 = *((_OWORD *)v18 - 1);
            v103 = v10 - (v102 >> 4);
            if (v103)
            {
              v104 = 0;
              while (1)
              {
                if (v18 < v133)
                {
                  *(_OWORD *)v18 = v134;
                  v18 += 16;
                }
                else
                {
                  v105 = (v18 - __p) >> 4;
                  v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 60)
                    sub_22316E078();
                  v107 = v133 - __p;
                  if ((v133 - __p) >> 3 > v106)
                    v106 = v107 >> 3;
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
                    v108 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v108 = v106;
                  if (v108)
                  {
                    if (v108 >> 60)
                      sub_223174E94();
                    v109 = (char *)operator new(16 * v108);
                    v110 = &v109[16 * v105];
                    *(_OWORD *)v110 = v134;
                    if (v18 != __p)
                    {
LABEL_114:
                      v111 = v110;
                      do
                      {
                        *((_OWORD *)v111 - 1) = *((_OWORD *)v18 - 1);
                        v111 -= 16;
                        v18 -= 16;
                      }
                      while (v18 != __p);
                      v112 = __p;
                      v18 = v110 + 16;
                      __p = v111;
                      v133 = &v109[16 * v108];
                      if (!v112)
                        goto LABEL_103;
LABEL_120:
                      operator delete(v112);
                      goto LABEL_103;
                    }
                  }
                  else
                  {
                    v109 = 0;
                    v110 = (char *)(16 * v105);
                    *(_OWORD *)(16 * v105) = v134;
                    if (v18 != __p)
                      goto LABEL_114;
                  }
                  v112 = v18;
                  v18 = v110 + 16;
                  __p = v110;
                  v133 = &v109[16 * v108];
                  if (v112)
                    goto LABEL_120;
                }
LABEL_103:
                if (++v104 == v103)
                {
                  v101 = __p;
                  goto LABEL_122;
                }
              }
            }
            goto LABEL_122;
          }
LABEL_93:
          operator delete(v90);
          goto LABEL_14;
        }
      }
      else
      {
        v95 = 0;
        v96 = (char *)(16 * v91);
        *(_OWORD *)(16 * v91) = *v89;
        v97 = 16 * v91;
        if (v132 != __p)
          goto LABEL_87;
      }
      break;
    }
    v15 = a3;
    v99 = &v95[16 * v94];
    v18 = v96 + 16;
    __p = (char *)v97;
    v133 = v99;
    if (!v132)
      goto LABEL_14;
    goto LABEL_93;
  }
  v101 = 0;
  v18 = 0;
  v102 = 0;
  if (v10)
    goto LABEL_100;
LABEL_122:
  *(_QWORD *)v116 = v101;
  *((_QWORD *)v116 + 1) = v18;
  *((_QWORD *)v116 + 2) = v133;
  v116[24] = 1;
  operator delete(v13);
  if (v128)
    operator delete(v128);
}

void sub_2237EBD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2237EBE28(float32x4_t a1, float32x4_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, unint64_t *a11, float32x2_t *a12, uint64_t a13, uint64_t a14, unint64_t *a15, unint64_t *a16, float32x2_t *a17, __int16 a18)
{
  float32x2_t *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  float v55;
  float32x4_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *result;
  float32x4_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;

  v24 = a17;
  v25 = *(float *)(a7 + 112);
  v26 = *(float *)(a7 + 104);
  a1.i32[0] = *(_DWORD *)a14;
  v27 = *(float *)(a14 + 4);
  if (v27 <= v26 || a1.f32[0] <= 0.0)
  {
    if ((a18 & 0x100) == 0)
      goto LABEL_106;
    if (a1.f32[0] <= 0.0)
    {
      *(float *)(a9 + 4) = v26;
      goto LABEL_106;
    }
  }
  else
  {
    a2.i32[0] = *(_DWORD *)a9;
    v28 = *(float *)(a9 + 4);
    if (*(float *)a9 > 0.0 && v28 > v26)
    {
      if (v27 <= 0.0)
      {
        v33 = 0.01;
        v34 = *(float *)(a7 + 108);
        if (v28 > 0.0)
          goto LABEL_31;
      }
      else
      {
        if (v27 < 1.0)
        {
          v31 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
          v32 = 0.01;
          if (v31 <= 0.01)
            v32 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
          v33 = 0.0001;
          if (v31 >= 0.0001)
            v33 = v32;
          v34 = *(float *)(a7 + 108);
          if (v28 <= 0.0)
            goto LABEL_28;
LABEL_31:
          if (v28 < 1.0)
          {
            v37 = (float)((float)(v28 * -0.09) + 0.1) * (float)((float)(v28 * -0.09) + 0.1);
            v38 = 0.01;
            if (v37 <= 0.01)
              v38 = (float)((float)(v28 * -0.09) + 0.1) * (float)((float)(v28 * -0.09) + 0.1);
            if (v37 >= 0.0001)
              v39 = v38;
            else
              v39 = 0.0001;
            if ((float)((float)((float)(a1.f32[0] - a2.f32[0]) * (float)(a1.f32[0] - a2.f32[0])) / (float)(v39 + v33)) < 1.1)
            {
LABEL_53:
              if (v27 <= 0.0)
              {
                v44 = 1008981770;
              }
              else
              {
                if (v27 < 1.0)
                {
                  v41 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
                  v42 = 0.01;
                  if (v41 <= 0.01)
                    v42 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
                  if (v41 >= 0.0001)
                    v43 = v42;
                  else
                    v43 = 0.0001;
LABEL_68:
                  v48 = (float)(v39 * v43) / (float)(v39 + v43);
                  v49 = 1.0;
                  if (v48 > 0.0001)
                  {
                    v49 = 0.0;
                    if (v48 < 0.01)
                    {
                      v50 = sqrtf(v48);
                      v51 = 1.0;
                      v52 = (float)((float)(v50 + -0.01) / -0.09) + 1.0;
                      if (v52 <= 1.0)
                        v51 = v52;
                      v53 = v52 < 0.0;
                      v49 = 0.0;
                      if (!v53)
                        v49 = v51;
                    }
                  }
                  *(float *)a9 = (float)((float)(a1.f32[0] * v39) + (float)(a2.f32[0] * v43)) / (float)(v39 + v43);
                  *(float *)(a9 + 4) = v49;
                  a1.i64[0] = *(_QWORD *)a8;
                  a1.i32[2] = *(_DWORD *)(a8 + 8);
                  a2.i64[0] = *(_QWORD *)a13;
                  a2.i32[2] = *(_DWORD *)(a13 + 8);
                  v54 = *(float *)(a8 + 12);
                  v79 = a13;
                  v55 = *(float *)(a13 + 12);
                  *(float *)&a5 = v54 + v55;
                  v56 = vdivq_f32(vaddq_f32(vmulq_n_f32(a1, v54), vmulq_n_f32(a2, v55)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0));
                  *(_QWORD *)a8 = v56.i64[0];
                  *(_DWORD *)(a8 + 8) = v56.i32[2];
                  *(float *)(a8 + 12) = v54 + v55;
                  v57 = *a10;
                  v82 = *a15;
                  v83 = v57;
                  sub_2237EE37C(&v83, (unsigned __int16 *)&v82, *(_BYTE *)(a7 + 118), (__int16 *)&v84);
                  *a10 = v84;
                  v58 = *a11;
                  v80 = *a16;
                  v81 = v58;
                  result = sub_2237EE37C(&v81, (unsigned __int16 *)&v80, *(_BYTE *)(a7 + 121), (__int16 *)&v84);
                  *a11 = v84;
                  v61.i32[0] = a12[1].i32[0];
                  v24 = a17;
                  *(float32x2_t *)v62.f32 = *a17;
                  v63.i32[0] = a17[1].i32[0];
                  if (vmla_f32(vmla_lane_f32(vmul_f32(*a12, *a17), (float32x2_t)vdup_lane_s32((int32x2_t)*a17, 1), *a12, 1), v63, v61).f32[0] <= 0.70711)
                  {
                    a13 = v79;
LABEL_97:
                    *a12 = *(float32x2_t *)v62.f32;
                    a12[1].i32[0] = v63.i32[0];
                    a12[1].i32[1] = 1065353216;
LABEL_98:
                    v73 = *(float *)(a9 + 4);
                    v74 = *(float *)(a7 + 100);
                    if (v74 >= v73)
                      v74 = *(float *)(a9 + 4);
                    if (v73 >= *(float *)(a7 + 104))
                      v75 = v74;
                    else
                      v75 = *(float *)(a7 + 104);
                    *(float *)(a9 + 4) = v75;
                    v76 = *(float *)(a7 + 96);
                    if (v76 >= *(float *)(a8 + 12))
                      v76 = *(float *)(a8 + 12);
                    *(float *)(a8 + 12) = v76;
                    goto LABEL_106;
                  }
                  v64 = *(float *)(a14 + 4);
                  v65 = *(float *)(a9 + 4);
                  if (v64 <= 0.0)
                  {
                    v68 = 0.01;
                    a13 = v79;
                    v60.i32[2] = a12[1].i32[0];
                    v62.i32[2] = a17[1].i32[0];
                    if (v65 > 0.0)
                      goto LABEL_86;
                  }
                  else
                  {
                    if (v64 < 1.0)
                    {
                      v66 = (float)((float)(v64 * -0.09) + 0.1) * (float)((float)(v64 * -0.09) + 0.1);
                      v67 = 0.01;
                      if (v66 <= 0.01)
                        v67 = v66;
                      if (v66 >= 0.0001)
                        v68 = v67;
                      else
                        v68 = 0.0001;
                      a13 = v79;
                      v60.i32[2] = a12[1].i32[0];
                      v62.i32[2] = a17[1].i32[0];
                      if (v65 <= 0.0)
                        goto LABEL_83;
LABEL_86:
                      if (v65 < 1.0)
                      {
                        v70 = (float)((float)(v65 * -0.09) + 0.1) * (float)((float)(v65 * -0.09) + 0.1);
                        v71 = 0.01;
                        if (v70 <= 0.01)
                          v71 = (float)((float)(v65 * -0.09) + 0.1) * (float)((float)(v65 * -0.09) + 0.1);
                        if (v70 >= 0.0001)
                          v72 = v71;
                        else
                          v72 = 0.0001;
                        goto LABEL_96;
                      }
                      v69 = 953267991;
LABEL_95:
                      v72 = *(float *)&v69;
LABEL_96:
                      v61.f32[0] = v68 + v72;
                      *(float32x2_t *)v60.f32 = *a12;
                      v62 = vdivq_f32(vmlaq_n_f32(vmulq_n_f32(v62, v72), v60, v68), (float32x4_t)vdupq_lane_s32((int32x2_t)v61, 0));
                      v63.i32[0] = v62.i32[2];
                      goto LABEL_97;
                    }
                    v68 = 0.0001;
                    a13 = v79;
                    v60.i32[2] = a12[1].i32[0];
                    v62.i32[2] = a17[1].i32[0];
                    if (v65 > 0.0)
                      goto LABEL_86;
                  }
LABEL_83:
                  v69 = 1008981770;
                  goto LABEL_95;
                }
                v44 = 953267991;
              }
              v43 = *(float *)&v44;
              goto LABEL_68;
            }
LABEL_38:
            if (a1.f32[0] <= a2.f32[0] || (a18 & 0x100) != 0)
            {
              if ((a18 & 1) != 0 && v27 > v25)
              {
                *(_QWORD *)a9 = *(_QWORD *)a14;
                *(_OWORD *)a8 = *(_OWORD *)a13;
                if (a10 != a15)
                  *a10 = *a15;
                if (a11 != a16)
                  *a11 = *a16;
                *(_OWORD *)a12->f32 = *(_OWORD *)a17->f32;
              }
              else if ((a18 & 1) != 0 || v27 > v25)
              {
                v45 = (float)((float)((float)(v34 * -0.1) + 0.01) / 0.09) + 1.0;
                v46 = (float)-v45 / v34;
                v47 = v45 + (float)(v34 * v28);
                if (v46 > v28)
                  v47 = 0.0;
                *(float *)(a9 + 4) = v47;
                *(float *)(a8 + 12) = *(float *)(a8 + 12) / (float)(v34 * v34);
              }
            }
            goto LABEL_98;
          }
          v35 = (float)(a1.f32[0] - a2.f32[0]) * (float)(a1.f32[0] - a2.f32[0]);
          v36 = 0.0001;
LABEL_52:
          v39 = v36;
          if ((float)(v35 / (float)(v33 + v36)) < 1.1)
            goto LABEL_53;
          goto LABEL_38;
        }
        v33 = 0.0001;
        v34 = *(float *)(a7 + 108);
        if (v28 > 0.0)
          goto LABEL_31;
      }
LABEL_28:
      v35 = (float)(a1.f32[0] - a2.f32[0]) * (float)(a1.f32[0] - a2.f32[0]);
      v36 = 0.01;
      goto LABEL_52;
    }
    if (a2.f32[0] > 0.0 && v27 <= v25)
      goto LABEL_106;
  }
  *(_QWORD *)a9 = *(_QWORD *)a14;
  *(_OWORD *)a8 = *(_OWORD *)a13;
  if (a10 != a15)
    *a10 = *a15;
  if (a11 != a16)
    *a11 = *a16;
  *(_OWORD *)a12->f32 = *(_OWORD *)a17->f32;
LABEL_106:
  if (*(float *)(a9 + 4) <= *(float *)(a7 + 104) && v27 > v25 && (a18 & 1) != 0)
  {
    *(_QWORD *)a9 = *(_QWORD *)a14;
    *(_OWORD *)a8 = *(_OWORD *)a13;
    if (a10 != a15)
      *a10 = *a15;
    if (a11 != a16)
      *a11 = *a16;
    *(_OWORD *)a12->f32 = *(_OWORD *)v24->f32;
  }
  return result;
}

uint64_t sub_2237EC518(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t result;
  int v24;
  int v25;
  unint64_t *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned __int8 v108;
  int v109;
  unsigned int v110;
  __int16 v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  BOOL v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  BOOL v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  BOOL v125;
  unsigned int v126;
  BOOL v127;
  unsigned int v128;
  BOOL v129;
  unsigned int v130;
  BOOL v131;
  unsigned int v132;
  BOOL v133;
  unsigned int v134;
  BOOL v135;
  unsigned int v136;
  BOOL v137;
  unsigned int v138;
  BOOL v139;
  unsigned int v140;
  BOOL v141;
  unsigned int v142;
  BOOL v143;
  unsigned int v144;
  BOOL v145;
  unsigned int v146;
  BOOL v147;
  unsigned int v148;
  BOOL v149;
  unsigned int v150;
  BOOL v151;
  unsigned int v152;
  BOOL v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  BOOL v157;
  unsigned int v158;
  BOOL v159;
  unsigned int v160;
  BOOL v161;
  unsigned int v162;
  BOOL v163;
  unsigned int v164;
  BOOL v165;
  unsigned int v166;
  BOOL v167;
  unsigned int v168;
  BOOL v169;
  unsigned int v170;
  BOOL v171;
  unsigned int v172;
  BOOL v173;
  unsigned int v174;
  BOOL v175;
  unsigned int v176;
  BOOL v177;
  unsigned int v178;
  BOOL v179;
  unsigned int v180;
  BOOL v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  BOOL v185;
  unsigned int v186;
  BOOL v187;
  unsigned int v188;
  BOOL v189;
  unsigned int v190;
  BOOL v191;
  unsigned int v192;
  BOOL v193;
  unsigned int v194;
  BOOL v195;
  unsigned int v196;
  BOOL v197;
  uint64_t v198;
  char v199;
  unsigned __int8 v200;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t i;
  unint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  unint64_t *v209;
  unint64_t *v210;
  int v211;
  _QWORD *v212;
  unsigned __int8 v213;
  unsigned __int8 v214;
  unsigned __int16 v215;
  uint64_t v216;

  v3 = a1;
  v207 = *(_DWORD *)(a2 + 56);
  if (0x82FA0BE82FA0BE83 * (a1[1] - *a1) != *(_DWORD *)(a2 + 60) * v207
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageFusion.cpp", 155, (uint64_t)"complete_histogram_s_.size() == histogram_length", 48, (uint64_t)"semantic histogram length not match with images size", 52, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = *(_QWORD *)(a2 + 8);
  v212 = v3;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v5)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v9)
      goto LABEL_15;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v3 = v212;
      if (*(_BYTE *)(a2 + 73))
      {
LABEL_16:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v216, v4, 1);
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(unint64_t **)(a2 + 24);
        v15 = HIDWORD(v13);
        if (!*(_BYTE *)(a2 + 72))
          goto LABEL_28;
        goto LABEL_20;
      }
    }
    else
    {
LABEL_15:
      v3 = v212;
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_16;
    }
  }
  v216 = 0;
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(unint64_t **)(a2 + 24);
  v15 = HIDWORD(v13);
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_28;
LABEL_20:
  if (v14)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v14 = *(unint64_t **)(a2 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 60);
    v3 = v212;
  }
LABEL_28:
  v205 = *(unsigned int *)(a2 + 52);
  v21 = v205 * v15;
  v206 = (4 * v13);
  if (v21)
    v22 = 4 * (_DWORD)v13 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v24 = 0;
    v204 = (unint64_t *)((char *)v14 + 2 * v21);
    do
    {
      v25 = 0;
      v208 = v24;
      v211 = v24 * v207;
      v26 = v14;
      v209 = v14;
      v210 = (unint64_t *)((char *)v14 + 2 * v206);
      do
      {
        v27 = (unsigned __int8 *)(*v3 + 43 * (v25 + v211));
        v28 = *v27;
        if (*v27)
          v29 = 0;
        else
          v29 = -1;
        v30 = v27[1];
        if (v30 <= v28)
          v31 = *v27;
        else
          v31 = v27[1];
        if (v30 > v28)
          v29 = 1;
        v32 = v30 + v28;
        v33 = v27[2];
        if (v33 > v31)
        {
          v31 = v27[2];
          v29 = 2;
        }
        v34 = v27[3];
        if (v34 > v31)
        {
          v31 = v27[3];
          v29 = 3;
        }
        v35 = v32 + v33 + v34;
        v36 = v27[4];
        if (v36 > v31)
        {
          v31 = v27[4];
          v29 = 4;
        }
        v37 = v27[5];
        if (v37 > v31)
        {
          v31 = v27[5];
          v29 = 5;
        }
        v38 = v36 + v37;
        v39 = v27[6];
        if (v39 > v31)
        {
          v31 = v27[6];
          v29 = 6;
        }
        v40 = v35 + v38 + v39;
        v41 = v27[7];
        if (v41 > v31)
        {
          v31 = v27[7];
          v29 = 7;
        }
        v42 = v27[8];
        if (v42 > v31)
        {
          v31 = v27[8];
          v29 = 8;
        }
        v43 = v41 + v42;
        v44 = v27[9];
        if (v44 > v31)
        {
          v31 = v27[9];
          v29 = 9;
        }
        v45 = v43 + v44;
        v46 = v27[10];
        if (v46 > v31)
        {
          v31 = v27[10];
          v29 = 10;
        }
        v47 = v40 + v45 + v46;
        v48 = v27[11];
        if (v48 > v31)
        {
          v31 = v27[11];
          v29 = 11;
        }
        v49 = v27[12];
        if (v49 > v31)
        {
          v31 = v27[12];
          v29 = 12;
        }
        v50 = v48 + v49;
        v51 = v27[13];
        if (v51 > v31)
        {
          v31 = v27[13];
          v29 = 13;
        }
        v52 = v50 + v51;
        v53 = v27[14];
        if (v53 > v31)
        {
          v31 = v27[14];
          v29 = 14;
        }
        v54 = v52 + v53;
        v55 = v27[15];
        if (v55 > v31)
        {
          v31 = v27[15];
          v29 = 15;
        }
        v56 = v47 + v54 + v55;
        v57 = v27[16];
        if (v57 > v31)
        {
          v31 = v27[16];
          v29 = 16;
        }
        v58 = v27[17];
        if (v58 > v31)
        {
          v31 = v27[17];
          v29 = 17;
        }
        v59 = v57 + v58;
        v60 = v27[18];
        if (v60 > v31)
        {
          v31 = v27[18];
          v29 = 18;
        }
        v61 = v59 + v60;
        v62 = v27[19];
        if (v62 > v31)
        {
          v31 = v27[19];
          v29 = 19;
        }
        v63 = v61 + v62;
        v64 = v27[20];
        if (v64 > v31)
        {
          v31 = v27[20];
          v29 = 20;
        }
        v65 = v63 + v64;
        v66 = v27[21];
        if (v66 > v31)
        {
          v31 = v27[21];
          v29 = 21;
        }
        v67 = v56 + v65 + v66;
        v68 = v27[22];
        if (v68 > v31)
        {
          v31 = v27[22];
          v29 = 22;
        }
        v69 = v27[23];
        if (v69 > v31)
        {
          v31 = v27[23];
          v29 = 23;
        }
        v70 = v68 + v69;
        v71 = v27[24];
        if (v71 > v31)
        {
          v31 = v27[24];
          v29 = 24;
        }
        v72 = v70 + v71;
        v73 = v27[25];
        if (v73 > v31)
        {
          v31 = v27[25];
          v29 = 25;
        }
        v74 = v72 + v73;
        v75 = v27[26];
        if (v75 > v31)
        {
          v31 = v27[26];
          v29 = 26;
        }
        v76 = v74 + v75;
        v77 = v27[27];
        if (v77 > v31)
        {
          v31 = v27[27];
          v29 = 27;
        }
        v78 = v76 + v77;
        v79 = v27[28];
        if (v79 > v31)
        {
          v31 = v27[28];
          v29 = 28;
        }
        v80 = v67 + v78 + v79;
        v81 = v27[29];
        if (v81 > v31)
        {
          v31 = v27[29];
          v29 = 29;
        }
        v82 = v27[30];
        if (v82 > v31)
        {
          v31 = v27[30];
          v29 = 30;
        }
        v83 = v81 + v82;
        v84 = v27[31];
        if (v84 > v31)
        {
          v31 = v27[31];
          v29 = 31;
        }
        v85 = v83 + v84;
        v86 = v27[32];
        if (v86 > v31)
        {
          v31 = v27[32];
          v29 = 32;
        }
        v87 = v85 + v86;
        v88 = v27[33];
        if (v88 > v31)
        {
          v31 = v27[33];
          v29 = 33;
        }
        v89 = v87 + v88;
        v90 = v27[34];
        if (v90 > v31)
        {
          v31 = v27[34];
          v29 = 34;
        }
        v91 = v89 + v90;
        v92 = v27[35];
        if (v92 > v31)
        {
          v31 = v27[35];
          v29 = 35;
        }
        v93 = v91 + v92;
        v94 = v27[36];
        if (v94 > v31)
        {
          v31 = v27[36];
          v29 = 36;
        }
        v95 = v80 + v93 + v94;
        v96 = v27[37];
        if (v96 > v31)
        {
          v31 = v27[37];
          v29 = 37;
        }
        v97 = v27[38];
        if (v97 > v31)
        {
          v31 = v27[38];
          v29 = 38;
        }
        v98 = v96 + v97;
        v99 = v27[39];
        if (v99 > v31)
        {
          v31 = v27[39];
          v29 = 39;
        }
        v100 = v98 + v99;
        v101 = v27[40];
        if (v101 > v31)
        {
          v31 = v27[40];
          v29 = 40;
        }
        v102 = v100 + v101;
        v103 = v27[41];
        if (v103 <= v31)
          v104 = v31;
        else
          v104 = v27[41];
        v105 = v95 + v102 + v103;
        if (v103 > v31)
          v29 = 41;
        if (v104 == v105)
        {
          v106 = 0;
          v215 = -256;
          v107 = 0xFF0000000000;
          v3 = v212;
          v108 = v29;
          v109 = v27[42];
          if (v26)
            goto LABEL_38;
LABEL_390:
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v214 = v108;
          v199 = v104;
          v200 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v202 = qword_255795648;
            for (i = qword_255795650; v202 != i; v202 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v202)(*(_QWORD *)(v202 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v201 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v3 = v212;
          if (!byte_255795670)
            abort();
          LOBYTE(v104) = v199;
          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          v108 = v214;
          goto LABEL_38;
        }
        v213 = v29;
        v27[v29] = 0;
        v110 = *v27;
        if (*v27)
          v111 = 0;
        else
          v111 = -1;
        if (v27[1] > v110)
        {
          v110 = v27[1];
          v111 = 1;
        }
        if (v27[2] > v110)
        {
          v110 = v27[2];
          v111 = 2;
        }
        if (v27[3] > v110)
        {
          v110 = v27[3];
          v111 = 3;
        }
        if (v27[4] > v110)
        {
          v110 = v27[4];
          v111 = 4;
        }
        if (v27[5] > v110)
        {
          v110 = v27[5];
          v111 = 5;
        }
        if (v27[6] > v110)
        {
          v110 = v27[6];
          v111 = 6;
        }
        if (v27[7] > v110)
        {
          v110 = v27[7];
          v111 = 7;
        }
        if (v27[8] > v110)
        {
          v110 = v27[8];
          v111 = 8;
        }
        if (v27[9] > v110)
        {
          v110 = v27[9];
          v111 = 9;
        }
        if (v27[10] > v110)
        {
          v110 = v27[10];
          v111 = 10;
        }
        if (v27[11] > v110)
        {
          v110 = v27[11];
          v111 = 11;
        }
        if (v27[12] > v110)
        {
          v110 = v27[12];
          v111 = 12;
        }
        if (v27[13] > v110)
        {
          v110 = v27[13];
          v111 = 13;
        }
        if (v27[14] > v110)
        {
          v110 = v27[14];
          v111 = 14;
        }
        if (v27[15] > v110)
        {
          v110 = v27[15];
          v111 = 15;
        }
        if (v27[16] > v110)
        {
          v110 = v27[16];
          v111 = 16;
        }
        if (v27[17] > v110)
        {
          v110 = v27[17];
          v111 = 17;
        }
        if (v27[18] > v110)
        {
          v110 = v27[18];
          v111 = 18;
        }
        if (v27[19] > v110)
        {
          v110 = v27[19];
          v111 = 19;
        }
        if (v27[20] > v110)
        {
          v110 = v27[20];
          v111 = 20;
        }
        if (v27[21] > v110)
        {
          v110 = v27[21];
          v111 = 21;
        }
        if (v27[22] > v110)
        {
          v110 = v27[22];
          v111 = 22;
        }
        if (v27[23] > v110)
        {
          v110 = v27[23];
          v111 = 23;
        }
        if (v27[24] > v110)
        {
          v110 = v27[24];
          v111 = 24;
        }
        if (v27[25] > v110)
        {
          v110 = v27[25];
          v111 = 25;
        }
        if (v27[26] > v110)
        {
          v110 = v27[26];
          v111 = 26;
        }
        if (v27[27] > v110)
        {
          v110 = v27[27];
          v111 = 27;
        }
        if (v27[28] > v110)
        {
          v110 = v27[28];
          v111 = 28;
        }
        if (v27[29] > v110)
        {
          v110 = v27[29];
          v111 = 29;
        }
        if (v27[30] > v110)
        {
          v110 = v27[30];
          v111 = 30;
        }
        if (v27[31] > v110)
        {
          v110 = v27[31];
          v111 = 31;
        }
        if (v27[32] > v110)
        {
          v110 = v27[32];
          v111 = 32;
        }
        if (v27[33] > v110)
        {
          v110 = v27[33];
          v111 = 33;
        }
        if (v27[34] > v110)
        {
          v110 = v27[34];
          v111 = 34;
        }
        if (v27[35] > v110)
        {
          v110 = v27[35];
          v111 = 35;
        }
        if (v27[36] > v110)
        {
          v110 = v27[36];
          v111 = 36;
        }
        if (v27[37] > v110)
        {
          v110 = v27[37];
          v111 = 37;
        }
        if (v27[38] > v110)
        {
          v110 = v27[38];
          v111 = 38;
        }
        if (v27[39] > v110)
        {
          v110 = v27[39];
          v111 = 39;
        }
        if (v27[40] > v110)
        {
          v110 = v27[40];
          v111 = 40;
        }
        v112 = v27[41];
        if (v112 > v110)
          v111 = 41;
        else
          v112 = v110;
        v113 = v112 + v104;
        v215 = v112 | (v111 << 8);
        if (v105 == (v112 + v104))
        {
          v106 = 0;
          v107 = 0xFF0000000000;
        }
        else
        {
          v27[v111] = 0;
          LODWORD(v114) = *v27;
          v115 = v27[1];
          v116 = 0xFF0000000000;
          if (*v27)
            v116 = 0;
          v117 = v115 > v114;
          if (v115 > v114)
            LODWORD(v114) = v27[1];
          v118 = v27[2];
          if (v117)
            v116 = 0x10000000000;
          v119 = v118 > v114;
          if (v118 > v114)
            LODWORD(v114) = v27[2];
          v120 = v27[3];
          if (v119)
            v116 = 0x20000000000;
          v121 = v120 > v114;
          if (v120 > v114)
            LODWORD(v114) = v27[3];
          v122 = v27[4];
          if (v121)
            v116 = 0x30000000000;
          v123 = v122 > v114;
          if (v122 > v114)
            LODWORD(v114) = v27[4];
          v124 = v27[5];
          if (v123)
            v116 = 0x40000000000;
          v125 = v124 > v114;
          if (v124 > v114)
            LODWORD(v114) = v27[5];
          v126 = v27[6];
          if (v125)
            v116 = 0x50000000000;
          v127 = v126 > v114;
          if (v126 > v114)
            LODWORD(v114) = v27[6];
          v128 = v27[7];
          if (v127)
            v116 = 0x60000000000;
          v129 = v128 > v114;
          if (v128 > v114)
            LODWORD(v114) = v27[7];
          v130 = v27[8];
          if (v129)
            v116 = 0x70000000000;
          v131 = v130 > v114;
          if (v130 > v114)
            LODWORD(v114) = v27[8];
          v132 = v27[9];
          if (v131)
            v116 = 0x80000000000;
          v133 = v132 > v114;
          if (v132 > v114)
            LODWORD(v114) = v27[9];
          v134 = v27[10];
          if (v133)
            v116 = 0x90000000000;
          v135 = v134 > v114;
          if (v134 > v114)
            LODWORD(v114) = v27[10];
          v136 = v27[11];
          if (v135)
            v116 = 0xA0000000000;
          v137 = v136 > v114;
          if (v136 > v114)
            LODWORD(v114) = v27[11];
          v138 = v27[12];
          if (v137)
            v116 = 0xB0000000000;
          v139 = v138 > v114;
          if (v138 > v114)
            LODWORD(v114) = v27[12];
          v140 = v27[13];
          if (v139)
            v116 = 0xC0000000000;
          v141 = v140 > v114;
          if (v140 > v114)
            LODWORD(v114) = v27[13];
          v142 = v27[14];
          if (v141)
            v116 = 0xD0000000000;
          v143 = v142 > v114;
          if (v142 > v114)
            LODWORD(v114) = v27[14];
          v144 = v27[15];
          if (v143)
            v116 = 0xE0000000000;
          v145 = v144 > v114;
          if (v144 > v114)
            LODWORD(v114) = v27[15];
          v146 = v27[16];
          if (v145)
            v116 = 0xF0000000000;
          v147 = v146 > v114;
          if (v146 > v114)
            LODWORD(v114) = v27[16];
          v148 = v27[17];
          if (v147)
            v116 = 0x100000000000;
          v149 = v148 > v114;
          if (v148 > v114)
            LODWORD(v114) = v27[17];
          v150 = v27[18];
          if (v149)
            v116 = 0x110000000000;
          v151 = v150 > v114;
          if (v150 > v114)
            LODWORD(v114) = v27[18];
          v152 = v27[19];
          if (v151)
            v116 = 0x120000000000;
          v153 = v152 > v114;
          if (v152 > v114)
            LODWORD(v114) = v27[19];
          v154 = v27[20];
          if (v153)
            v116 = 0x130000000000;
          v155 = v154 > v114;
          if (v154 > v114)
            LODWORD(v114) = v27[20];
          v156 = v27[21];
          if (v155)
            v116 = 0x140000000000;
          v157 = v156 > v114;
          if (v156 > v114)
            LODWORD(v114) = v27[21];
          v158 = v27[22];
          if (v157)
            v116 = 0x150000000000;
          v159 = v158 > v114;
          if (v158 > v114)
            LODWORD(v114) = v27[22];
          v160 = v27[23];
          if (v159)
            v116 = 0x160000000000;
          v161 = v160 > v114;
          if (v160 > v114)
            LODWORD(v114) = v27[23];
          v162 = v27[24];
          if (v161)
            v116 = 0x170000000000;
          v163 = v162 > v114;
          if (v162 > v114)
            LODWORD(v114) = v27[24];
          v164 = v27[25];
          if (v163)
            v116 = 0x180000000000;
          v165 = v164 > v114;
          if (v164 > v114)
            LODWORD(v114) = v27[25];
          v166 = v27[26];
          if (v165)
            v116 = 0x190000000000;
          v167 = v166 > v114;
          if (v166 > v114)
            LODWORD(v114) = v27[26];
          v168 = v27[27];
          if (v167)
            v116 = 0x1A0000000000;
          v169 = v168 > v114;
          if (v168 > v114)
            LODWORD(v114) = v27[27];
          v170 = v27[28];
          if (v169)
            v116 = 0x1B0000000000;
          v171 = v170 > v114;
          if (v170 > v114)
            LODWORD(v114) = v27[28];
          v172 = v27[29];
          if (v171)
            v116 = 0x1C0000000000;
          v173 = v172 > v114;
          if (v172 > v114)
            LODWORD(v114) = v27[29];
          v174 = v27[30];
          if (v173)
            v116 = 0x1D0000000000;
          v175 = v174 > v114;
          if (v174 > v114)
            LODWORD(v114) = v27[30];
          v176 = v27[31];
          if (v175)
            v116 = 0x1E0000000000;
          v177 = v176 > v114;
          if (v176 > v114)
            LODWORD(v114) = v27[31];
          v178 = v27[32];
          if (v177)
            v116 = 0x1F0000000000;
          v179 = v178 > v114;
          if (v178 > v114)
            LODWORD(v114) = v27[32];
          v180 = v27[33];
          if (v179)
            v116 = 0x200000000000;
          v181 = v180 > v114;
          if (v180 > v114)
            LODWORD(v114) = v27[33];
          v182 = v27[34];
          if (v181)
            v116 = 0x210000000000;
          v183 = v182 > v114;
          if (v182 > v114)
            LODWORD(v114) = v27[34];
          v184 = v27[35];
          if (v183)
            v116 = 0x220000000000;
          v185 = v184 > v114;
          if (v184 > v114)
            LODWORD(v114) = v27[35];
          v186 = v27[36];
          if (v185)
            v116 = 0x230000000000;
          v187 = v186 > v114;
          if (v186 > v114)
            LODWORD(v114) = v27[36];
          v188 = v27[37];
          if (v187)
            v116 = 0x240000000000;
          v189 = v188 > v114;
          if (v188 > v114)
            LODWORD(v114) = v27[37];
          v190 = v27[38];
          if (v189)
            v116 = 0x250000000000;
          v191 = v190 > v114;
          if (v190 > v114)
            LODWORD(v114) = v27[38];
          v192 = v27[39];
          if (v191)
            v116 = 0x260000000000;
          v193 = v192 > v114;
          if (v192 > v114)
            LODWORD(v114) = v27[39];
          v194 = v27[40];
          if (v193)
            v116 = 0x270000000000;
          v195 = v194 > v114;
          if (v194 > v114)
            LODWORD(v114) = v27[40];
          v196 = v27[41];
          if (v195)
            v116 = 0x280000000000;
          v197 = v196 > v114;
          if (v196 <= v114)
            v114 = v114;
          else
            v114 = v27[41];
          v106 = v105 - v114 - v113;
          v198 = 0x290000000000;
          if (!v197)
            v198 = v116;
          v107 = v198 | (v114 << 32);
        }
        v3 = v212;
        v108 = v213;
        v109 = v27[42];
        if (!v26)
          goto LABEL_390;
LABEL_38:
        *v26++ = v104 | ((unint64_t)v108 << 8) | v107 | ((unint64_t)v215 << 16) | ((unint64_t)(v109 + v106) << 48) | 0xFF00000000000000;
        ++v25;
      }
      while (v26 != v210);
      v14 = (unint64_t *)((char *)v209 + 2 * v205);
      v24 = v208 + 1;
    }
    while (v14 != v204);
  }
  result = v216;
  v216 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2237ED474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237ED4A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t result;
  int v24;
  int v25;
  unint64_t *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned __int16 v77;
  uint64_t v78;
  unsigned int v79;
  __int16 v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  BOOL v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  BOOL v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  BOOL v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  BOOL v100;
  unsigned int v101;
  BOOL v102;
  unsigned int v103;
  BOOL v104;
  unsigned int v105;
  BOOL v106;
  unsigned int v107;
  BOOL v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  BOOL v112;
  unsigned int v113;
  BOOL v114;
  unsigned int v115;
  BOOL v116;
  unsigned int v117;
  BOOL v118;
  unsigned int v119;
  BOOL v120;
  unsigned int v121;
  BOOL v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  BOOL v126;
  unsigned int v127;
  BOOL v128;
  unsigned int v129;
  BOOL v130;
  unsigned int v131;
  BOOL v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  int v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t i;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  unint64_t *v146;
  char v147;
  unint64_t *v148;
  int v149;
  _QWORD *v150;
  unsigned __int8 v151;
  uint64_t v152;

  v3 = a1;
  v144 = *(_DWORD *)(a2 + 56);
  if (0x82FA0BE82FA0BE83 * (a1[1] - *a1) != *(_DWORD *)(a2 + 60) * v144
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageFusion.cpp", 173, (uint64_t)"complete_histogram_s_.size() == histogram_length", 48, (uint64_t)"material histogram length not match with images size", 52, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = *(_QWORD *)(a2 + 8);
  v150 = v3;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v5)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v9)
      goto LABEL_15;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v3 = v150;
      if (*(_BYTE *)(a2 + 73))
      {
LABEL_16:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v152, v4, 1);
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(unint64_t **)(a2 + 24);
        v15 = HIDWORD(v13);
        if (!*(_BYTE *)(a2 + 72))
          goto LABEL_28;
        goto LABEL_20;
      }
    }
    else
    {
LABEL_15:
      v3 = v150;
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_16;
    }
  }
  v152 = 0;
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(unint64_t **)(a2 + 24);
  v15 = HIDWORD(v13);
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_28;
LABEL_20:
  if (v14)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v14 = *(unint64_t **)(a2 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 60);
    v3 = v150;
  }
LABEL_28:
  v142 = *(unsigned int *)(a2 + 52);
  v21 = v142 * v15;
  v143 = (4 * v13);
  if (v21)
    v22 = 4 * (_DWORD)v13 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v24 = 0;
    v141 = (unint64_t *)((char *)v14 + 2 * v21);
    do
    {
      v25 = 0;
      v145 = v24;
      v149 = v24 * v144;
      v26 = v14;
      v146 = v14;
      v148 = (unint64_t *)((char *)v14 + 2 * v143);
      do
      {
        v27 = (unsigned __int8 *)(v3[3] + 27 * (v25 + v149));
        v28 = *v27;
        if (*v27)
          v29 = 0;
        else
          v29 = -1;
        v30 = v27[1];
        if (v30 <= v28)
          v31 = *v27;
        else
          v31 = v27[1];
        if (v30 > v28)
          v29 = 1;
        v32 = v30 + v28;
        v33 = v27[2];
        if (v33 > v31)
        {
          v31 = v27[2];
          v29 = 2;
        }
        v34 = v27[3];
        if (v34 > v31)
        {
          v31 = v27[3];
          v29 = 3;
        }
        v35 = v32 + v33 + v34;
        v36 = v27[4];
        if (v36 > v31)
        {
          v31 = v27[4];
          v29 = 4;
        }
        v37 = v27[5];
        if (v37 > v31)
        {
          v31 = v27[5];
          v29 = 5;
        }
        v38 = v36 + v37;
        v39 = v27[6];
        if (v39 > v31)
        {
          v31 = v27[6];
          v29 = 6;
        }
        v40 = v35 + v38 + v39;
        v41 = v27[7];
        if (v41 > v31)
        {
          v31 = v27[7];
          v29 = 7;
        }
        v42 = v27[8];
        if (v42 > v31)
        {
          v31 = v27[8];
          v29 = 8;
        }
        v43 = v41 + v42;
        v44 = v27[9];
        if (v44 > v31)
        {
          v31 = v27[9];
          v29 = 9;
        }
        v45 = v43 + v44;
        v46 = v27[10];
        if (v46 > v31)
        {
          v31 = v27[10];
          v29 = 10;
        }
        v47 = v40 + v45 + v46;
        v48 = v27[11];
        if (v48 > v31)
        {
          v31 = v27[11];
          v29 = 11;
        }
        v49 = v27[12];
        if (v49 > v31)
        {
          v31 = v27[12];
          v29 = 12;
        }
        v50 = v48 + v49;
        v51 = v27[13];
        if (v51 > v31)
        {
          v31 = v27[13];
          v29 = 13;
        }
        v52 = v50 + v51;
        v53 = v27[14];
        if (v53 > v31)
        {
          v31 = v27[14];
          v29 = 14;
        }
        v54 = v52 + v53;
        v55 = v27[15];
        if (v55 > v31)
        {
          v31 = v27[15];
          v29 = 15;
        }
        v56 = v47 + v54 + v55;
        v57 = v27[16];
        if (v57 > v31)
        {
          v31 = v27[16];
          v29 = 16;
        }
        v58 = v27[17];
        if (v58 > v31)
        {
          v31 = v27[17];
          v29 = 17;
        }
        v59 = v57 + v58;
        v60 = v27[18];
        if (v60 > v31)
        {
          v31 = v27[18];
          v29 = 18;
        }
        v61 = v59 + v60;
        v62 = v27[19];
        if (v62 > v31)
        {
          v31 = v27[19];
          v29 = 19;
        }
        v63 = v61 + v62;
        v64 = v27[20];
        if (v64 > v31)
        {
          v31 = v27[20];
          v29 = 20;
        }
        v65 = v63 + v64;
        v66 = v27[21];
        if (v66 > v31)
        {
          v31 = v27[21];
          v29 = 21;
        }
        v67 = v56 + v65 + v66;
        v68 = v27[22];
        if (v68 > v31)
        {
          v31 = v27[22];
          v29 = 22;
        }
        v69 = v27[23];
        if (v69 > v31)
        {
          v31 = v27[23];
          v29 = 23;
        }
        v70 = v68 + v69;
        v71 = v27[24];
        if (v71 > v31)
        {
          v31 = v27[24];
          v29 = 24;
        }
        v72 = v70 + v71;
        v73 = v27[25];
        if (v73 <= v31)
          v74 = v31;
        else
          v74 = v27[25];
        v75 = v67 + v72 + v73;
        if (v73 > v31)
          v29 = 25;
        v151 = v29;
        if (v74 == v75)
        {
          v76 = 0;
          v77 = -256;
          v78 = 0xFF0000000000;
        }
        else
        {
          v27[v29] = 0;
          v79 = *v27;
          if (*v27)
            v80 = 0;
          else
            v80 = -1;
          if (v27[1] > v79)
          {
            v79 = v27[1];
            v80 = 1;
          }
          if (v27[2] > v79)
          {
            v79 = v27[2];
            v80 = 2;
          }
          if (v27[3] > v79)
          {
            v79 = v27[3];
            v80 = 3;
          }
          if (v27[4] > v79)
          {
            v79 = v27[4];
            v80 = 4;
          }
          if (v27[5] > v79)
          {
            v79 = v27[5];
            v80 = 5;
          }
          if (v27[6] > v79)
          {
            v79 = v27[6];
            v80 = 6;
          }
          if (v27[7] > v79)
          {
            v79 = v27[7];
            v80 = 7;
          }
          if (v27[8] > v79)
          {
            v79 = v27[8];
            v80 = 8;
          }
          if (v27[9] > v79)
          {
            v79 = v27[9];
            v80 = 9;
          }
          if (v27[10] > v79)
          {
            v79 = v27[10];
            v80 = 10;
          }
          if (v27[11] > v79)
          {
            v79 = v27[11];
            v80 = 11;
          }
          if (v27[12] > v79)
          {
            v79 = v27[12];
            v80 = 12;
          }
          if (v27[13] > v79)
          {
            v79 = v27[13];
            v80 = 13;
          }
          if (v27[14] > v79)
          {
            v79 = v27[14];
            v80 = 14;
          }
          if (v27[15] > v79)
          {
            v79 = v27[15];
            v80 = 15;
          }
          if (v27[16] > v79)
          {
            v79 = v27[16];
            v80 = 16;
          }
          if (v27[17] > v79)
          {
            v79 = v27[17];
            v80 = 17;
          }
          if (v27[18] > v79)
          {
            v79 = v27[18];
            v80 = 18;
          }
          if (v27[19] > v79)
          {
            v79 = v27[19];
            v80 = 19;
          }
          if (v27[20] > v79)
          {
            v79 = v27[20];
            v80 = 20;
          }
          if (v27[21] > v79)
          {
            v79 = v27[21];
            v80 = 21;
          }
          if (v27[22] > v79)
          {
            v79 = v27[22];
            v80 = 22;
          }
          if (v27[23] > v79)
          {
            v79 = v27[23];
            v80 = 23;
          }
          if (v27[24] > v79)
          {
            v79 = v27[24];
            v80 = 24;
          }
          v81 = v27[25];
          if (v81 > v79)
            v80 = 25;
          else
            v81 = v79;
          v82 = v81 + v74;
          v77 = v81 | (v80 << 8);
          if (v75 == (v81 + v74))
          {
            v76 = 0;
            v78 = 0xFF0000000000;
          }
          else
          {
            v27[v80] = 0;
            LODWORD(v83) = *v27;
            v84 = v27[1];
            v85 = 0xFF0000000000;
            if (*v27)
              v85 = 0;
            v86 = v84 > v83;
            if (v84 > v83)
              LODWORD(v83) = v27[1];
            v87 = v27[2];
            if (v86)
              v85 = 0x10000000000;
            v88 = v87 > v83;
            if (v87 > v83)
              LODWORD(v83) = v27[2];
            v89 = v27[3];
            if (v88)
              v85 = 0x20000000000;
            v90 = v89 > v83;
            if (v89 > v83)
              LODWORD(v83) = v27[3];
            v91 = v27[4];
            if (v90)
              v85 = 0x30000000000;
            v92 = v91 > v83;
            if (v91 > v83)
              LODWORD(v83) = v27[4];
            v93 = v27[5];
            if (v92)
              v85 = 0x40000000000;
            v94 = v93 > v83;
            if (v93 > v83)
              LODWORD(v83) = v27[5];
            v95 = v27[6];
            if (v94)
              v85 = 0x50000000000;
            v96 = v95 > v83;
            if (v95 > v83)
              LODWORD(v83) = v27[6];
            v97 = v27[7];
            if (v96)
              v85 = 0x60000000000;
            v98 = v97 > v83;
            if (v97 > v83)
              LODWORD(v83) = v27[7];
            v99 = v27[8];
            if (v98)
              v85 = 0x70000000000;
            v100 = v99 > v83;
            if (v99 > v83)
              LODWORD(v83) = v27[8];
            v101 = v27[9];
            if (v100)
              v85 = 0x80000000000;
            v102 = v101 > v83;
            if (v101 > v83)
              LODWORD(v83) = v27[9];
            v103 = v27[10];
            if (v102)
              v85 = 0x90000000000;
            v104 = v103 > v83;
            if (v103 > v83)
              LODWORD(v83) = v27[10];
            v105 = v27[11];
            if (v104)
              v85 = 0xA0000000000;
            v106 = v105 > v83;
            if (v105 > v83)
              LODWORD(v83) = v27[11];
            v107 = v27[12];
            if (v106)
              v85 = 0xB0000000000;
            v108 = v107 > v83;
            if (v107 > v83)
              LODWORD(v83) = v27[12];
            v109 = v27[13];
            if (v108)
              v85 = 0xC0000000000;
            v110 = v109 > v83;
            if (v109 > v83)
              LODWORD(v83) = v27[13];
            v111 = v27[14];
            if (v110)
              v85 = 0xD0000000000;
            v112 = v111 > v83;
            if (v111 > v83)
              LODWORD(v83) = v27[14];
            v113 = v27[15];
            if (v112)
              v85 = 0xE0000000000;
            v114 = v113 > v83;
            if (v113 > v83)
              LODWORD(v83) = v27[15];
            v115 = v27[16];
            if (v114)
              v85 = 0xF0000000000;
            v116 = v115 > v83;
            if (v115 > v83)
              LODWORD(v83) = v27[16];
            v117 = v27[17];
            if (v116)
              v85 = 0x100000000000;
            v118 = v117 > v83;
            if (v117 > v83)
              LODWORD(v83) = v27[17];
            v119 = v27[18];
            if (v118)
              v85 = 0x110000000000;
            v120 = v119 > v83;
            if (v119 > v83)
              LODWORD(v83) = v27[18];
            v121 = v27[19];
            if (v120)
              v85 = 0x120000000000;
            v122 = v121 > v83;
            if (v121 > v83)
              LODWORD(v83) = v27[19];
            v123 = v27[20];
            if (v122)
              v85 = 0x130000000000;
            v124 = v123 > v83;
            if (v123 > v83)
              LODWORD(v83) = v27[20];
            v125 = v27[21];
            if (v124)
              v85 = 0x140000000000;
            v126 = v125 > v83;
            if (v125 > v83)
              LODWORD(v83) = v27[21];
            v127 = v27[22];
            if (v126)
              v85 = 0x150000000000;
            v128 = v127 > v83;
            if (v127 > v83)
              LODWORD(v83) = v27[22];
            v129 = v27[23];
            if (v128)
              v85 = 0x160000000000;
            v130 = v129 > v83;
            if (v129 > v83)
              LODWORD(v83) = v27[23];
            v131 = v27[24];
            if (v130)
              v85 = 0x170000000000;
            v132 = v131 > v83;
            if (v131 > v83)
              LODWORD(v83) = v27[24];
            v133 = v27[25];
            if (v132)
              v85 = 0x180000000000;
            v134 = v133 > v83;
            if (v133 <= v83)
              v83 = v83;
            else
              v83 = v27[25];
            v76 = v75 - v83 - v82;
            v135 = 0x190000000000;
            if (!v134)
              v135 = v85;
            v78 = v135 | (v83 << 32);
          }
        }
        v3 = v150;
        v136 = v27[26];
        if (!v26)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v147 = v74;
          v137 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v139 = qword_255795648;
            for (i = qword_255795650; v139 != i; v139 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v139)(*(_QWORD *)(v139 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v138 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v3 = v150;
          LOBYTE(v74) = v147;
          if (!byte_255795670)
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        *v26++ = v74 | ((unint64_t)v151 << 8) | v78 | ((unint64_t)v77 << 16) | ((unint64_t)(v136 + v76) << 48) | 0xFF00000000000000;
        ++v25;
      }
      while (v26 != v148);
      v14 = (unint64_t *)((char *)v146 + 2 * v142);
      v24 = v145 + 1;
    }
    while (v14 != v141);
  }
  result = v152;
  v152 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2237EDFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

void sub_2237EDFF4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0x82FA0BE82FA0BE83 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v12 = 43 * ((43 * a2 - 43) / 0x2B) + 43;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x82FA0BE82FA0BE83 * (v5 - *a1);
    v8 = v7 + a2;
    if (v7 + a2 > 0x5F417D05F417D05)
      sub_22316E078();
    v9 = 0x82FA0BE82FA0BE83 * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2FA0BE82FA0BE82)
      v10 = 0x5F417D05F417D05;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x5F417D05F417D05)
        sub_223174E94();
      v11 = (char *)operator new(43 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[43 * v7];
    v14 = &v11[43 * v10];
    v15 = 43 * ((43 * a2 - 43) / 0x2B) + 43;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 43);
        v18 = *(_OWORD *)(v5 - 27);
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        *(_OWORD *)(v13 - 27) = v18;
        *(_OWORD *)(v13 - 43) = v17;
        v13 -= 43;
        v5 -= 43;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2237EE1BC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0x84BDA12F684BDA13 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v12 = 27 * ((27 * a2 - 27) / 0x1B) + 27;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x84BDA12F684BDA13 * (v5 - *a1);
    v8 = v7 + a2;
    if (v7 + a2 > 0x97B425ED097B425)
      sub_22316E078();
    v9 = 0x84BDA12F684BDA13 * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x4BDA12F684BDA12)
      v10 = 0x97B425ED097B425;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x97B425ED097B425)
        sub_223174E94();
      v11 = (char *)operator new(27 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[27 * v7];
    v14 = &v11[27 * v10];
    v15 = 27 * ((27 * a2 - 27) / 0x1B) + 27;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 27);
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        *(_OWORD *)(v13 - 27) = v17;
        v13 -= 27;
        v5 -= 27;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

unint64_t *sub_2237EE37C@<X0>(unint64_t *result@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 a3@<W2>, __int16 *a4@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v4 = *result;
  *(_QWORD *)a4 = *result;
  v5 = *a2;
  if (*a2)
  {
    v6 = v5 >> 8;
    v7 = *a2;
    if ((_BYTE)v4)
    {
      if (v6 == BYTE1(v4))
      {
        if (v4 <= 0x1Du)
        {
          v8 = (v5 + v4);
          if (v8 >= 0x1E)
            LOWORD(v8) = 30;
          v7 = v4 & 0xFF00 | v8;
          goto LABEL_8;
        }
        v11 = 0;
        v10 = 1;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v9 = 0x80000000;
LABEL_12:
      if (v4 + v11 >= 0xFF)
        v12 = 255;
      else
        v12 = v4 + v11;
      v13 = v11 + v4;
      v14 = v4 >> 16;
      if ((v10 & 1) != 0)
        goto LABEL_16;
      v16 = v5;
      if (!BYTE2(v4))
        goto LABEL_23;
      if (BYTE3(v4) == v6)
      {
        if (BYTE2(v4) > 0x1Du)
        {
LABEL_16:
          v15 = 0;
LABEL_24:
          v18 = HIDWORD(v4);
          if (v15 + BYTE2(v4) >= v12)
            result = (unint64_t *)v12;
          else
            result = (unint64_t *)(v15 + BYTE2(v4));
          v19 = v13 + v14;
          goto LABEL_40;
        }
        v17 = (v5 + BYTE2(v4));
        if (v17 >= 0x1E)
          LOWORD(v17) = 30;
        v16 = WORD1(v4) & 0xFF00 | v17;
LABEL_23:
        a4[1] = v16;
        v13 += v5;
        v15 = v5;
        v9 = 1;
        goto LABEL_24;
      }
      v18 = HIDWORD(v4);
      if (BYTE2(v4) >= v12)
        result = (unint64_t *)v12;
      else
        result = (unint64_t *)BYTE2(v4);
      v19 = v13 + v14;
      if (BYTE4(v4))
      {
        if (BYTE5(v4) != v6)
        {
          v22 = HIWORD(v4) + HIDWORD(v4) + v19;
          if (BYTE4(v4) >= result)
            v32 = result;
          else
            v32 = BYTE4(v4);
          if (v32 <= BYTE6(v4))
          {
            v33 = BYTE2(v4) < v12;
            if (result > BYTE4(v4))
              v33 = 2;
            if (a4[v33] == 1)
            {
              a4[v33] = v5;
            }
            else
            {
              a4[v33] = a4[v33] & 0xFF00 | (a4[v33] - 1);
              LOBYTE(v22) = v22 - 1;
            }
          }
          else
          {
            a4[3] = (BYTE6(v4) + 1) | (a3 << 8);
            LOBYTE(v22) = v22 + 1;
            v9 = 3;
          }
LABEL_41:
          if (v22 >= 0x1Fu)
          {
            v23 = (BYTE2(v4) + 2 * v18 + 3 * BYTE6(v4)) / v22;
            v24 = v23 & 3;
            if ((_DWORD)v24 != v9)
            {
              v25 = a4[v23 & 3];
              if ((_BYTE)v25)
                goto LABEL_50;
            }
            if ((v24 = ((_BYTE)v23 + 1) & 3, (_DWORD)v24 != v9) && (v25 = a4[((_BYTE)v23 + 1) & 3], (_BYTE)v25)
              || (v24 = ((_BYTE)v23 + 2) & 3, (_DWORD)v24 != v9) && (v25 = a4[((_BYTE)v23 + 2) & 3], (_BYTE)v25)
              || (v24 = ((_BYTE)v23 - 1) & 3, (_DWORD)v24 != v9) && (v25 = a4[((_BYTE)v23 - 1) & 3], (_BYTE)v25))
            {
LABEL_50:
              a4[v24] = v25 & 0xFF00 | (v25 - 1);
            }
          }
          v26 = *a4;
          v27 = *a4;
          v28 = a4[1];
          if (v27 >= v28)
          {
            v29 = a4[1];
            v28 = *a4;
            v30 = a4[2];
            v31 = v30;
            if (v27 >= v30)
            {
LABEL_53:
              v28 = v30;
              if (v31 <= v29)
                return result;
LABEL_57:
              a4[1] = v28;
              a4[2] = v29;
              return result;
            }
          }
          else
          {
            *a4 = v28;
            a4[1] = v26;
            v27 = v28;
            v29 = v26;
            v30 = a4[2];
            v31 = v30;
            if (v28 >= v30)
              goto LABEL_53;
          }
          *a4 = v30;
          a4[2] = v28;
          if (v27 <= v29)
            return result;
          goto LABEL_57;
        }
        if (BYTE4(v4) > 0x1Du)
        {
LABEL_40:
          v22 = HIWORD(v4) + v18 + v19;
          goto LABEL_41;
        }
        v20 = (v5 + BYTE4(v4));
        if (v20 >= 0x1E)
          LOWORD(v20) = 30;
        v21 = WORD2(v4) & 0xFF00 | v20;
      }
      else
      {
        v21 = v5;
      }
      a4[2] = v21;
      v19 += v5;
      v9 = 2;
      goto LABEL_40;
    }
LABEL_8:
    v9 = 0;
    *a4 = v7;
    v10 = 1;
    v11 = v5;
    goto LABEL_12;
  }
  return result;
}

void sub_2237EE6AC(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4, int a5)
{
  unint64_t v5;

  HIDWORD(v5) = a5 - 35;
  LODWORD(v5) = a5 - 35;
  switch((v5 >> 2))
  {
    case 0u:
      sub_2237EE730(a1, a2, a3, a4);
      break;
    case 1u:
      sub_2237EF430(a1, a2, a3, a4);
      break;
    case 2u:
      sub_2237F043C(a1, a2, a3, a4);
      break;
    case 3u:
      sub_2237F22E4(a1, a2, a3, a4);
      break;
    case 4u:
      sub_2237F1394(a1, a2, a3, a4);
      break;
    case 5u:
      sub_2237F355C(a1, a2, a3, a4);
      break;
    case 6u:
      sub_2237F47D4(a1, a2, a3, a4);
      break;
    case 7u:
      sub_2237F5958(a1, a2, a3, a4);
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 95, (uint64_t)"", 0, (uint64_t)"Case not handled", 16, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_2237EE730(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  float v5;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  unsigned int v15;
  float32x2_t v16;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float32x2_t v26;
  float v27;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t i;
  uint64_t v36;
  float32x2_t v37;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v48;
  float v49;
  int v50;
  int v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  float16x4_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  float16x4_t *v119;
  int v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  __int128 v131;
  uint64_t v132;
  _BYTE v133[16];
  std::__shared_weak_count *v134;
  uint64_t v135;
  int v136;
  int v137;
  _BYTE v138[16];
  std::__shared_weak_count *v139;
  _BYTE v140[16];
  std::__shared_weak_count *v141;
  _BYTE v142[16];
  std::__shared_weak_count *v143;
  _BYTE v144[16];
  std::__shared_weak_count *v145;
  uint64_t v146;
  int v147;
  int v148;
  _BYTE v149[16];
  std::__shared_weak_count *v150;
  uint64_t v151;
  int v152;
  int v153;
  _BYTE v154[16];
  std::__shared_weak_count *v155;
  uint64_t v156;
  int v157;
  int v158;
  _BYTE v159[16];
  std::__shared_weak_count *v160;
  _QWORD v161[2];
  std::__shared_weak_count *v162;
  _BYTE v163[16];
  std::__shared_weak_count *v164;
  uint64_t v165;
  int v166;
  int v167;
  _BYTE v168[16];
  std::__shared_weak_count *v169;
  uint64_t v170;
  int v171;
  int v172;
  _BYTE v173[8];
  uint64_t v174;
  std::__shared_weak_count *v175;
  float16x4_t *v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  char v182;
  char v183;

  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, a3);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v173);
  v95 = v174;
  if (v174)
  {
    v96 = v175;
    if (v175)
    {
      p_shared_owners = (unint64_t *)&v175->__shared_owners_;
      do
        v98 = __ldxr(p_shared_owners);
      while (__stxr(v98 + 1, p_shared_owners));
      do
        v99 = __ldaxr(p_shared_owners);
      while (__stlxr(v99 - 1, p_shared_owners));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      v95 = v174;
      v100 = v175;
      if (v175)
      {
        v101 = (unint64_t *)&v175->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
        do
          v103 = __ldaxr(v101);
        while (__stlxr(v103 - 1, v101));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
    }
    if (v183)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v95 + 96))(v161, v95, 1);
      if (!v177)
        goto LABEL_152;
LABEL_130:
      v104 = v178;
      if (v178)
      {
        v105 = v179;
        if (v179)
        {
          v107 = v180;
          v106 = v181;
          v108 = v176;
          if (v182 && v176)
          {
            v109 = v174;
            v110 = v175;
            if (v175)
            {
              v111 = (unint64_t *)&v175->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
              do
                v113 = __ldaxr(v111);
              while (__stlxr(v113 - 1, v111));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v109 + 88))(v109, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v108 = v176;
          }
          v114 = v104 - 1;
          v115 = 2 * v107;
          v116 = v105 - 1;
          if (v105 != 1)
          {
            v117 = 2 * v106;
            if (v104 == 1)
            {
              do
              {
                *v108 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v108)));
                v108 = (float16x4_t *)((char *)v108 + v117);
                --v116;
              }
              while (v116);
            }
            else
            {
              v118 = 0;
              do
              {
                v119 = v108;
                v120 = v104 - 1;
                do
                {
                  *v119 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v119)));
                  v119 = (float16x4_t *)((char *)v119 + v115);
                  --v120;
                }
                while (v120);
                *v119 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v119)));
                v108 = (float16x4_t *)((char *)v108 + v117);
                ++v118;
              }
              while (v118 != v116);
            }
          }
          if (v104 != 1)
          {
            do
            {
              *v108 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v108)));
              v108 = (float16x4_t *)((char *)v108 + v115);
              --v114;
            }
            while (v114);
          }
          *v108 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v108)));
        }
      }
      goto LABEL_152;
    }
  }
  v161[0] = 0;
  if (v177)
    goto LABEL_130;
LABEL_152:
  v121 = v161[0];
  v161[0] = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = v175;
  if (v175)
  {
    v123 = (unint64_t *)&v175->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
LABEL_5:
  sub_2231D3D90(a3, (uint64_t)v168);
  sub_2231D4288(a3, (uint64_t)v163);
  sub_2231D48A8(a3, (uint64_t)v173);
  sub_2231D494C(a3, (uint64_t)v161);
  sub_2231D4E60(a3, (uint64_t)v159);
  sub_2231D432C(a3, (uint64_t)v154);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v149);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v144);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v142);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v140);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v138);
  sub_2231CC874((uint64_t)a4, (uint64_t)v133);
  v10 = *a1;
  v125 = *a2;
  v126 = a2[1];
  v127 = a2[2];
  v130 = a2[3];
  v11 = sub_2231D021C((uint64_t)a4);
  v12 = sub_2231D021C(a3);
  v128 = a3;
  v129 = (uint64_t)a4;
  v14 = atomic_load((unsigned __int8 *)&qword_2540CC640);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC640))
  {
    qword_2540CC638 = 0;
    __cxa_guard_release(&qword_2540CC640);
  }
  if (HIDWORD(v11) && (_DWORD)v11)
  {
    v15 = 0;
    v16 = vadd_f32(v10, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v21 = vmlaq_lane_f32(vmulq_n_f32(v125, v16.f32[0]), v126, v16, 1);
    v22 = vadd_f32(v10, _D2);
    v23 = (float32x2_t)vaddq_f32(v130, vaddq_f32(v127, v21)).u64[0];
    *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)v130.f32, vadd_f32(*(float32x2_t *)v127.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v125, v22.f32[0]), v126, v22, 1)));
    v24 = vsub_f32(v23, v10);
    v25 = (float)(v12 - 1);
    v26 = vsub_f32(*(float32x2_t *)&v13, v23);
    v27 = (float)(HIDWORD(v12) - 1);
    LOWORD(v4) = -1025;
    HIWORD(_S14) = 0x8000;
    do
    {
      v29 = 0;
      *(float *)&v13 = (float)v15;
      v131 = v13;
      do
      {
        while (1)
        {
          v37.f32[0] = (float)v29;
          *((_QWORD *)&v13 + 1) = *((_QWORD *)&v131 + 1);
          v37.i32[1] = v131;
          *(float32x2_t *)&v13 = vmla_f32(v24, v26, v37);
          if (*(float *)&v13 >= 0.0
            && *(float *)&v13 <= v25
            && *((float *)&v13 + 1) >= 0.0
            && *((float *)&v13 + 1) <= v27)
          {
            break;
          }
          *(_WORD *)(v151 + 2 * (v152 * v29 + v153 * v15)) = -1025;
          *(_WORD *)(v146 + 2 * (v147 * v29 + v148 * v15)) = 0;
          v30 = v136;
          v31 = v137;
          v32 = v135;
          if (!v135)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v33 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v36 = qword_255795648;
              for (i = qword_255795650; v36 != i; v36 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v36)(*(_QWORD *)(v36 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v34 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v32 + 2 * (v30 * v29++ + v31 * v15)) = 0x8000800080008000;
          if (v29 == (_DWORD)v11)
            goto LABEL_9;
        }
        *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)&v13, (float32x2_t)0x3F0000003F000000);
        v40 = *(float *)&v13;
        v41 = *((float *)&v13 + 1);
        LOWORD(_S14) = *(_WORD *)(v170
                                + 2
                                * (v171 * *(float *)&v13 + v172 * *((float *)&v13 + 1)));
        LOWORD(v5) = *(_WORD *)(v165
                              + 2 * (v166 * *(float *)&v13 + v167 * *((float *)&v13 + 1)));
        v42 = v157;
        v43 = v158;
        v44 = v156;
        if (!v156
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v45 = *(_QWORD *)(v44 + 2 * (v42 * v40 + v43 * v41));
        __asm { FCVT            S0, H14 }
        _NF = _S0 < 0.0;
        if (_S0 >= 0.0)
          v48 = _S14;
        else
          v48 = v4;
        *(_WORD *)(v151 + 2 * (v152 * v29 + v153 * v15)) = v48;
        if (_NF)
          v49 = 0.0;
        else
          v49 = v5;
        *(_WORD *)(v146 + 2 * (v147 * v29 + v148 * v15)) = LOWORD(v49);
        v50 = v136;
        v51 = v137;
        v52 = v135;
        HIWORD(_S14) = 0x8000;
        if (!v135
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v52 + 2 * (v50 * v29++ + v51 * v15)) = v45;
      }
      while (v29 != (_DWORD)v11);
LABEL_9:
      ++v15;
    }
    while (v15 != HIDWORD(v11));
  }
  v53 = (_OWORD *)sub_2231CC494(v128);
  *(_OWORD *)sub_2231CC494(v129) = *v53;
  v54 = (uint64_t **)sub_2231D0424(v128);
  v55 = (uint64_t *)sub_2231D0490(v129);
  if (v55 != (uint64_t *)v54)
    sub_2231F6E10(v55, *v54, v54[1], 0xCCCCCCCCCCCCCCCDLL * (v54[1] - *v54));
  v56 = sub_2231D04FC(v128);
  v57 = sub_2231D04FC(v129);
  sub_2231CFEAC(v57, v56);
  v132 = sub_2231D041C(v128);
  sub_2231CBAC0(v129, &v132);
  v58 = v134;
  if (v134)
  {
    v59 = (unint64_t *)&v134->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v139;
  if (v139)
  {
    v62 = (unint64_t *)&v139->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v141;
  if (v141)
  {
    v65 = (unint64_t *)&v141->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v143;
  if (v143)
  {
    v68 = (unint64_t *)&v143->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v145;
  if (v145)
  {
    v71 = (unint64_t *)&v145->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v150;
  if (v150)
  {
    v74 = (unint64_t *)&v150->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v155;
  if (v155)
  {
    v77 = (unint64_t *)&v155->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v160;
  if (v160)
  {
    v80 = (unint64_t *)&v160->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v162;
  if (v162)
  {
    v83 = (unint64_t *)&v162->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v175;
  if (v175)
  {
    v86 = (unint64_t *)&v175->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v164;
  if (v164)
  {
    v89 = (unint64_t *)&v164->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v169;
  if (v169)
  {
    v92 = (unint64_t *)&v169->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_2237EF2E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2B8];
  STACK[0x2B8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237EF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_2231CD9B0((uint64_t)&a22);
  sub_2231CDC3C((uint64_t)&a32);
  sub_2231CDC3C((uint64_t)&a42);
  sub_2231CD9B0((uint64_t)&a52);
  sub_2231BD974((uint64_t)&a62);
  sub_2231BD974((uint64_t)&a69);
  sub_2231D4840((uint64_t)&STACK[0x218]);
  sub_22319F500((uint64_t)&STACK[0x268]);
  sub_22319F500((uint64_t)&STACK[0x2B8]);
  sub_2231D4840(v69 - 232);
  sub_22319EF60((uint64_t)&STACK[0x308]);
  sub_22319EF60((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void sub_2237EF430(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v6;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  float32x2_t v14;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  unsigned int v28;
  float32x2_t v29;
  uint64_t v30;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  float32x2_t v43;
  unint64_t v44;
  float32x2_t v45;
  int v46;
  int v47;
  uint64_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  uint64_t v55;
  uint64_t v60;
  double v61;
  uint64_t i;
  uint64_t v63;
  uint64_t j;
  uint64_t v65;
  float32x4_t v66;
  char v67;
  double v68;
  uint64_t v69;
  int v71;
  float v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  float32x4_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float16x4_t *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  float16x4_t *v147;
  int v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float v157;
  float32x4_t v158;
  float32x4_t v159;
  int64x2_t v160;
  uint64_t v161;
  _BYTE v162[16];
  std::__shared_weak_count *v163;
  uint64_t v164;
  int v165;
  int v166;
  _BYTE v167[16];
  std::__shared_weak_count *v168;
  _BYTE v169[16];
  std::__shared_weak_count *v170;
  _BYTE v171[16];
  std::__shared_weak_count *v172;
  uint64_t v173;
  int v174;
  int v175;
  _BYTE v176[16];
  std::__shared_weak_count *v177;
  uint64_t v178;
  int v179;
  int v180;
  _BYTE v181[16];
  std::__shared_weak_count *v182;
  uint64_t v183;
  int v184;
  int v185;
  _BYTE v186[16];
  std::__shared_weak_count *v187;
  uint64_t v188;
  int v189;
  int v190;
  _BYTE v191[16];
  std::__shared_weak_count *v192;
  _QWORD v193[2];
  std::__shared_weak_count *v194;
  _BYTE v195[16];
  std::__shared_weak_count *v196;
  uint64_t v197;
  int v198;
  int v199;
  _BYTE v200[16];
  std::__shared_weak_count *v201;
  uint64_t v202;
  int v203;
  int v204;
  _BYTE v205[8];
  uint64_t v206;
  std::__shared_weak_count *v207;
  float16x4_t *v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  char v214;
  char v215;

  v6 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v6);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v205);
  v121 = v206;
  if (v206)
  {
    v122 = v207;
    if (v207)
    {
      p_shared_owners = (unint64_t *)&v207->__shared_owners_;
      do
        v124 = __ldxr(p_shared_owners);
      while (__stxr(v124 + 1, p_shared_owners));
      do
        v125 = __ldaxr(p_shared_owners);
      while (__stlxr(v125 - 1, p_shared_owners));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      v121 = v206;
      v126 = v207;
      if (v207)
      {
        v127 = (unint64_t *)&v207->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
        do
          v129 = __ldaxr(v127);
        while (__stlxr(v129 - 1, v127));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
    }
    if (v215)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v121 + 96))(v193, v121, 1);
      if (!v209)
        goto LABEL_180;
LABEL_156:
      v130 = v210;
      if (v210)
      {
        v131 = v211;
        if (v211)
        {
          v132 = a2;
          v133 = v6;
          v135 = v212;
          v134 = v213;
          v136 = v208;
          if (v214 && v208)
          {
            v137 = v206;
            v138 = v207;
            if (v207)
            {
              v139 = (unint64_t *)&v207->__shared_owners_;
              do
                v140 = __ldxr(v139);
              while (__stxr(v140 + 1, v139));
              do
                v141 = __ldaxr(v139);
              while (__stlxr(v141 - 1, v139));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v137 + 88))(v137, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v136 = v208;
          }
          v142 = v130 - 1;
          v143 = 2 * v135;
          v144 = v131 - 1;
          if (v131 == 1)
          {
            v6 = v133;
            a2 = v132;
          }
          else
          {
            v145 = 2 * v134;
            a2 = v132;
            if (v130 == 1)
            {
              v6 = v133;
              do
              {
                *v136 = vcvt_f16_f32(vmulq_f32(v132[4], vcvtq_f32_f16(*v136)));
                v136 = (float16x4_t *)((char *)v136 + v145);
                --v144;
              }
              while (v144);
            }
            else
            {
              v146 = 0;
              v6 = v133;
              do
              {
                v147 = v136;
                v148 = v130 - 1;
                do
                {
                  *v147 = vcvt_f16_f32(vmulq_f32(v132[4], vcvtq_f32_f16(*v147)));
                  v147 = (float16x4_t *)((char *)v147 + v143);
                  --v148;
                }
                while (v148);
                *v147 = vcvt_f16_f32(vmulq_f32(v132[4], vcvtq_f32_f16(*v147)));
                v136 = (float16x4_t *)((char *)v136 + v145);
                ++v146;
              }
              while (v146 != v144);
            }
          }
          if (v130 != 1)
          {
            do
            {
              *v136 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v136)));
              v136 = (float16x4_t *)((char *)v136 + v143);
              --v142;
            }
            while (v142);
          }
          *v136 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v136)));
        }
      }
      goto LABEL_180;
    }
  }
  v193[0] = 0;
  if (v209)
    goto LABEL_156;
LABEL_180:
  v149 = v193[0];
  v193[0] = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = v207;
  if (v207)
  {
    v151 = (unint64_t *)&v207->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
LABEL_5:
  sub_2231D3D90(v6, (uint64_t)v200);
  sub_2231D4288(v6, (uint64_t)v195);
  sub_2231D48A8(v6, (uint64_t)v205);
  sub_2231D494C(v6, (uint64_t)v193);
  sub_2231D4E60(v6, (uint64_t)v191);
  sub_2231D432C(v6, (uint64_t)v186);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v181);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v176);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v171);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v169);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v167);
  sub_2231CC874((uint64_t)a4, (uint64_t)v162);
  v9 = *a1;
  v154 = *a2;
  v156 = a2[1];
  v158 = a2[2];
  v159 = a2[3];
  v10 = sub_2231D021C((uint64_t)a4);
  v11 = sub_2231D021C(v6);
  v153 = (uint64_t)a4;
  v12 = atomic_load((unsigned __int8 *)&qword_2540CC650);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC650))
  {
    qword_2540CC648 = 0;
    __cxa_guard_release(&qword_2540CC650);
  }
  if (HIDWORD(v10) && (_DWORD)v10)
  {
    v13 = 0;
    v14 = vadd_f32(v9, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v19 = vmlaq_lane_f32(vmulq_n_f32(v154, v14.f32[0]), v156, v14, 1);
    v20 = vadd_f32(v9, _D2);
    v21 = (float32x2_t)vaddq_f32(v159, vaddq_f32(v158, v19)).u64[0];
    v22 = vsub_f32(v21, v9);
    v23 = vsub_f32(vadd_f32(*(float32x2_t *)v159.f32, vadd_f32(*(float32x2_t *)v158.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v154, v20.f32[0]), v156, v20, 1))), v21);
    v24 = (float)(v11 - 1);
    v25 = (float)(HIDWORD(v11) - 1);
    LOWORD(v4) = -1025;
    HIWORD(_S14) = 0x8000;
    __asm { FMOV            V0.4S, #1.0 }
    v155 = (float32x4_t)_Q0;
    v157 = v24;
    do
    {
      v28 = 0;
      *(float *)_Q0.i32 = (float)v13;
      v160 = _Q0;
      do
      {
        while (1)
        {
          v29.f32[0] = (float)v28;
          _Q0.i64[1] = v160.i64[1];
          v29.i32[1] = v160.i32[0];
          v30 = qword_2540CC648;
          *(float32x2_t *)_Q0.i8 = vmla_f32(v22, v23, v29);
          v161 = _Q0.i64[0];
          if (*(float *)_Q0.i32 >= 0.0
            && *(float *)_Q0.i32 <= v24
            && *(float *)&_Q0.i32[1] >= 0.0
            && *(float *)&_Q0.i32[1] <= v25)
          {
            break;
          }
          *(_WORD *)(v183 + 2 * (v184 * v28 + v185 * v13)) = -1025;
          *(_WORD *)(v178 + 2 * (v179 * v28 + v180 * v13)) = 0;
          v33 = v174;
          v34 = v175;
          v35 = v173;
          if (!v173)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v63 = qword_255795648;
              for (i = qword_255795650; v63 != i; v63 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v63)(*(_QWORD *)(v63 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v37 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v35 + 2 * (v33 * v28 + v34 * v13)) = v30;
          v38 = v165;
          v39 = v166;
          v40 = v164;
          if (!v164)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v65 = qword_255795648;
              for (j = qword_255795650; v65 != j; v65 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v65)(*(_QWORD *)(v65 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v42 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v40 + 2 * (v38 * v28++ + v39 * v13)) = 0x8000800080008000;
          if (v28 == (_DWORD)v10)
            goto LABEL_9;
        }
        v43 = vadd_f32(*(float32x2_t *)_Q0.i8, (float32x2_t)0x3F0000003F000000);
        LOWORD(_S14) = *(_WORD *)(v202 + 2 * (v203 * v43.f32[0] + v204 * v43.f32[1]));
        LOWORD(v30) = *(_WORD *)(v197 + 2 * (v198 * v43.f32[0] + v199 * v43.f32[1]));
        v44 = sub_223CD41E8((float *)&v161, (uint64_t)v205);
        v45 = (float32x2_t)v161;
        v46 = v189;
        v47 = v190;
        v48 = v188;
        if (!v188
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v49 = v23;
        v50 = v22;
        v51 = v25;
        _Q0 = (int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v44), (uint64x2_t)xmmword_22464F4A0);
        _D1.i32[0] = v44;
        _D1.i32[1] = WORD1(v44);
        *(int16x4_t *)_Q0.i8 = vmovn_s32(vmovn_hight_s64(_D1, _Q0));
        __asm { FCVT            S1, H0 }
        _H2 = _Q0.i16[1];
        __asm { FCVT            S2, H2 }
        v55 = _S2 > 0.0;
        if (*(float *)_D1.i32 > 0.0)
          ++v55;
        _H1 = _Q0.i16[2];
        __asm { FCVT            S1, H1 }
        if (_S1 > 0.0)
          ++v55;
        _H1 = _Q0.i16[3];
        __asm { FCVT            S1, H1 }
        if (_S1 <= 0.0)
          v60 = 0;
        else
          v60 = -1;
        if (v55 == v60)
        {
          v61 = *(double *)&qword_2540CC648;
        }
        else
        {
          v66 = a2[4];
          v67 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v66, v155))));
          v68 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(v66, vcvtq_f32_f16(*(float16x4_t *)_Q0.i8))));
          if ((v67 & 1) != 0)
            v61 = v68;
          else
            v61 = *(double *)_Q0.i64;
        }
        *(float32x2_t *)_Q0.i8 = vadd_f32(v45, (float32x2_t)0x3F0000003F000000);
        v69 = *(_QWORD *)(v48 + 2
                              * (v46 * *(float *)_Q0.i32 + v47 * *(float *)&_Q0.i32[1]));
        __asm { FCVT            S0, H14 }
        _NF = *(float *)_Q0.i32 < 0.0;
        if (*(float *)_Q0.i32 >= 0.0)
          v71 = _S14;
        else
          v71 = v4;
        *(_WORD *)(v183 + 2 * (v184 * v28 + v185 * v13)) = v71;
        if (_NF)
          v72 = 0.0;
        else
          v72 = *(float *)&v30;
        *(_WORD *)(v178 + 2 * (v179 * v28 + v180 * v13)) = LOWORD(v72);
        v73 = v174;
        v74 = v175;
        v75 = v173;
        HIWORD(_S14) = 0x8000;
        if (!v173
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(double *)(v75 + 2 * (v73 * v28 + v74 * v13)) = v61;
        v76 = v165;
        v77 = v166;
        v78 = v164;
        v25 = v51;
        v22 = v50;
        v23 = v49;
        v24 = v157;
        if (!v164
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v78 + 2 * (v76 * v28++ + v77 * v13)) = v69;
      }
      while (v28 != (_DWORD)v10);
LABEL_9:
      ++v13;
    }
    while (v13 != HIDWORD(v10));
  }
  v79 = (_OWORD *)sub_2231CC494(v6);
  *(_OWORD *)sub_2231CC494(v153) = *v79;
  v80 = (uint64_t **)sub_2231D0424(v6);
  v81 = (uint64_t *)sub_2231D0490(v153);
  if (v81 != (uint64_t *)v80)
    sub_2231F6E10(v81, *v80, v80[1], 0xCCCCCCCCCCCCCCCDLL * (v80[1] - *v80));
  v82 = sub_2231D04FC(v6);
  v83 = sub_2231D04FC(v153);
  sub_2231CFEAC(v83, v82);
  v161 = sub_2231D041C(v6);
  sub_2231CBAC0(v153, &v161);
  v84 = v163;
  if (v163)
  {
    v85 = (unint64_t *)&v163->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v168;
  if (v168)
  {
    v88 = (unint64_t *)&v168->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v170;
  if (v170)
  {
    v91 = (unint64_t *)&v170->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v172;
  if (v172)
  {
    v94 = (unint64_t *)&v172->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v177;
  if (v177)
  {
    v97 = (unint64_t *)&v177->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v182;
  if (v182)
  {
    v100 = (unint64_t *)&v182->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v187;
  if (v187)
  {
    v103 = (unint64_t *)&v187->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v192;
  if (v192)
  {
    v106 = (unint64_t *)&v192->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v194;
  if (v194)
  {
    v109 = (unint64_t *)&v194->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v207;
  if (v207)
  {
    v112 = (unint64_t *)&v207->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v196;
  if (v196)
  {
    v115 = (unint64_t *)&v196->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v201;
  if (v201)
  {
    v118 = (unint64_t *)&v201->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
}

void sub_2237F02D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F0318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a71;
  uint64_t v71;

  sub_2231CD9B0((uint64_t)&a24);
  sub_2231CDC3C((uint64_t)&a34);
  sub_2231CDC3C((uint64_t)&a44);
  sub_2231CD9B0((uint64_t)&a54);
  sub_2231BD974((uint64_t)&a64);
  sub_2231BD974((uint64_t)&a71);
  sub_2231D4840((uint64_t)&STACK[0x228]);
  sub_22319F500((uint64_t)&STACK[0x278]);
  sub_22319F500((uint64_t)&STACK[0x2C8]);
  sub_2231D4840(v71 - 232);
  sub_22319EF60((uint64_t)&STACK[0x318]);
  sub_22319EF60((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_2237F043C(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  float v5;
  uint64_t v7;
  float32x2_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  unsigned int v15;
  float32x2_t v16;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  unsigned int v29;
  float32x2_t v30;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t j;
  uint64_t v66;
  _OWORD *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float16x4_t *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  float16x4_t *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  float32x4_t v147;
  __int128 v148;
  uint64_t v149;
  _BYTE v150[16];
  std::__shared_weak_count *v151;
  uint64_t v152;
  int v153;
  int v154;
  _BYTE v155[16];
  std::__shared_weak_count *v156;
  _BYTE v157[16];
  std::__shared_weak_count *v158;
  uint64_t v159;
  int v160;
  int v161;
  _BYTE v162[16];
  std::__shared_weak_count *v163;
  _BYTE v164[16];
  std::__shared_weak_count *v165;
  uint64_t v166;
  int v167;
  int v168;
  _BYTE v169[16];
  std::__shared_weak_count *v170;
  uint64_t v171;
  int v172;
  int v173;
  _BYTE v174[16];
  std::__shared_weak_count *v175;
  uint64_t v176;
  int v177;
  int v178;
  _BYTE v179[16];
  std::__shared_weak_count *v180;
  _QWORD v181[2];
  std::__shared_weak_count *v182;
  uint64_t v183;
  int v184;
  int v185;
  _BYTE v186[16];
  std::__shared_weak_count *v187;
  uint64_t v188;
  int v189;
  int v190;
  _BYTE v191[16];
  std::__shared_weak_count *v192;
  uint64_t v193;
  int v194;
  int v195;
  _BYTE v196[8];
  uint64_t v197;
  std::__shared_weak_count *v198;
  float16x4_t *v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  char v206;

  v7 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v7);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v196);
  v109 = v197;
  if (v197)
  {
    v110 = v198;
    if (v198)
    {
      p_shared_owners = (unint64_t *)&v198->__shared_owners_;
      do
        v112 = __ldxr(p_shared_owners);
      while (__stxr(v112 + 1, p_shared_owners));
      do
        v113 = __ldaxr(p_shared_owners);
      while (__stlxr(v113 - 1, p_shared_owners));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
      v109 = v197;
      v114 = v198;
      if (v198)
      {
        v115 = (unint64_t *)&v198->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        do
          v117 = __ldaxr(v115);
        while (__stlxr(v117 - 1, v115));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
    }
    if (v206)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v109 + 96))(v181, v109, 1);
      if (!v200)
        goto LABEL_170;
LABEL_146:
      v118 = v201;
      if (v201)
      {
        v119 = v202;
        if (v202)
        {
          v120 = v7;
          v122 = v203;
          v121 = v204;
          v123 = v199;
          if (v205 && v199)
          {
            v124 = v197;
            v125 = v198;
            if (v198)
            {
              v126 = (unint64_t *)&v198->__shared_owners_;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
              do
                v128 = __ldaxr(v126);
              while (__stlxr(v128 - 1, v126));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v124 + 88))(v124, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v123 = v199;
          }
          v129 = v118 - 1;
          v130 = 2 * v122;
          v131 = v119 - 1;
          if (v119 == 1)
          {
            v7 = v120;
          }
          else if (v118 == 1)
          {
            v136 = 2 * v121;
            v7 = v120;
            do
            {
              *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
              v123 = (float16x4_t *)((char *)v123 + v136);
              --v131;
            }
            while (v131);
          }
          else
          {
            v132 = 0;
            v133 = 2 * v121;
            v7 = v120;
            do
            {
              v134 = v123;
              v135 = v118 - 1;
              do
              {
                *v134 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v134)));
                v134 = (float16x4_t *)((char *)v134 + v130);
                --v135;
              }
              while (v135);
              *v134 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v134)));
              v123 = (float16x4_t *)((char *)v123 + v133);
              ++v132;
            }
            while (v132 != v131);
          }
          if (v118 != 1)
          {
            do
            {
              *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
              v123 = (float16x4_t *)((char *)v123 + v130);
              --v129;
            }
            while (v129);
          }
          *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
        }
      }
      goto LABEL_170;
    }
  }
  v181[0] = 0;
  if (v200)
    goto LABEL_146;
LABEL_170:
  v137 = v181[0];
  v181[0] = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = v198;
  if (v198)
  {
    v139 = (unint64_t *)&v198->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
LABEL_5:
  sub_2231D3D90(v7, (uint64_t)v191);
  sub_2231D4288(v7, (uint64_t)v186);
  sub_2231D48A8(v7, (uint64_t)v196);
  sub_2231D494C(v7, (uint64_t)v181);
  sub_2231D4E60(v7, (uint64_t)v179);
  sub_2231D432C(v7, (uint64_t)v174);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v169);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v164);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v162);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v157);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v155);
  sub_2231CC874((uint64_t)a4, (uint64_t)v150);
  v10 = *a1;
  v141 = *a2;
  v142 = a2[1];
  v143 = a2[2];
  v147 = a2[3];
  v11 = sub_2231D021C((uint64_t)a4);
  v12 = sub_2231D021C(v7);
  v144 = (uint64_t)a4;
  v14 = atomic_load((unsigned __int8 *)&qword_2540CC660);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC660))
  {
    qword_2540CC658 = 0;
    __cxa_guard_release(&qword_2540CC660);
  }
  if (HIDWORD(v11) && (_DWORD)v11)
  {
    v15 = 0;
    v16 = vadd_f32(v10, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v21 = vmlaq_lane_f32(vmulq_n_f32(v141, v16.f32[0]), v142, v16, 1);
    v22 = vadd_f32(v10, _D2);
    v23 = (float32x2_t)vaddq_f32(v147, vaddq_f32(v143, v21)).u64[0];
    *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)v147.f32, vadd_f32(*(float32x2_t *)v143.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v141, v22.f32[0]), v142, v22, 1)));
    v24 = vsub_f32(v23, v10);
    v25 = vsub_f32(*(float32x2_t *)&v13, v23);
    v26 = (float)(v12 - 1);
    v27 = (float)(HIDWORD(v12) - 1);
    LOWORD(v4) = -1025;
    HIWORD(_S14) = 0x8000;
    v145 = HIDWORD(v11);
    v146 = v11;
    do
    {
      v29 = 0;
      *(float *)&v13 = (float)v15;
      v148 = v13;
      do
      {
        while (1)
        {
          v30.f32[0] = (float)v29;
          *((_QWORD *)&v13 + 1) = *((_QWORD *)&v148 + 1);
          v30.i32[1] = v148;
          *(float32x2_t *)&v13 = vmla_f32(v24, v25, v30);
          if (*(float *)&v13 >= 0.0
            && *(float *)&v13 <= v26
            && *((float *)&v13 + 1) >= 0.0
            && *((float *)&v13 + 1) <= v27)
          {
            break;
          }
          *(_WORD *)(v171 + 2 * (v172 * v29 + v173 * v15)) = -1025;
          *(_WORD *)(v166 + 2 * (v167 * v29 + v168 * v15)) = 0;
          v33 = v153;
          v34 = v154;
          v35 = v152;
          if (!v152)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v64 = qword_255795648;
              for (i = qword_255795650; v64 != i; v64 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v64)(*(_QWORD *)(v64 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v37 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v35 + 2 * (v33 * v29 + v34 * v15)) = 0x8000800080008000;
          v38 = v160;
          v39 = v161;
          v40 = v159;
          if (!v159)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v66 = qword_255795648;
              for (j = qword_255795650; v66 != j; v66 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v66)(*(_QWORD *)(v66 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v42 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v40 + 2 * (v38 * v29++ + v39 * v15)) = 0xFF00FF00FF00FF00;
          if (v29 == (_DWORD)v11)
            goto LABEL_9;
        }
        *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)&v13, (float32x2_t)0x3F0000003F000000);
        v43 = *(float *)&v13;
        v44 = *((float *)&v13 + 1);
        LOWORD(_S14) = *(_WORD *)(v193
                                + 2
                                * (v194 * *(float *)&v13 + v195 * *((float *)&v13 + 1)));
        LOWORD(v5) = *(_WORD *)(v188
                              + 2 * (v189 * *(float *)&v13 + v190 * *((float *)&v13 + 1)));
        v45 = v177;
        v46 = v178;
        v47 = v176;
        if (!v176
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v48 = *(_QWORD *)(v47 + 2 * (v45 * v43 + v46 * v44));
        v49 = v184;
        v50 = v185;
        v51 = v183;
        if (!v183
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v52 = *(_QWORD *)(v51 + 2 * (v49 * v43 + v50 * v44));
        __asm { FCVT            S0, H14 }
        _NF = _S0 < 0.0;
        if (_S0 >= 0.0)
          v55 = _S14;
        else
          v55 = v4;
        *(_WORD *)(v171 + 2 * (v172 * v29 + v173 * v15)) = v55;
        if (_NF)
          v56 = 0.0;
        else
          v56 = v5;
        *(_WORD *)(v166 + 2 * (v167 * v29 + v168 * v15)) = LOWORD(v56);
        v57 = v153;
        v58 = v154;
        v59 = v152;
        HIWORD(_S14) = 0x8000;
        if (!v152
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v59 + 2 * (v57 * v29 + v58 * v15)) = v48;
        v60 = v160;
        v61 = v161;
        v62 = v159;
        if (!v159
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v62 + 2 * (v60 * v29 + v61 * v15)) = v52;
        LODWORD(v11) = v146;
        ++v29;
      }
      while (v29 != v146);
LABEL_9:
      ++v15;
    }
    while (v15 != (_DWORD)v145);
  }
  v67 = (_OWORD *)sub_2231CC494(v7);
  *(_OWORD *)sub_2231CC494(v144) = *v67;
  v68 = (uint64_t **)sub_2231D0424(v7);
  v69 = (uint64_t *)sub_2231D0490(v144);
  if (v69 != (uint64_t *)v68)
    sub_2231F6E10(v69, *v68, v68[1], 0xCCCCCCCCCCCCCCCDLL * (v68[1] - *v68));
  v70 = sub_2231D04FC(v7);
  v71 = sub_2231D04FC(v144);
  sub_2231CFEAC(v71, v70);
  v149 = sub_2231D041C(v7);
  sub_2231CBAC0(v144, &v149);
  v72 = v151;
  if (v151)
  {
    v73 = (unint64_t *)&v151->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v156;
  if (v156)
  {
    v76 = (unint64_t *)&v156->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v158;
  if (v158)
  {
    v79 = (unint64_t *)&v158->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v163;
  if (v163)
  {
    v82 = (unint64_t *)&v163->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v165;
  if (v165)
  {
    v85 = (unint64_t *)&v165->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v170;
  if (v170)
  {
    v88 = (unint64_t *)&v170->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v175;
  if (v175)
  {
    v91 = (unint64_t *)&v175->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v180;
  if (v180)
  {
    v94 = (unint64_t *)&v180->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v182;
  if (v182)
  {
    v97 = (unint64_t *)&v182->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v198;
  if (v198)
  {
    v100 = (unint64_t *)&v198->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v187;
  if (v187)
  {
    v103 = (unint64_t *)&v187->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v192;
  if (v192)
  {
    v106 = (unint64_t *)&v192->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_2237F122C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2B8];
  STACK[0x2B8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_2231CD9B0((uint64_t)&a22);
  sub_2231CDC3C((uint64_t)&a32);
  sub_2231CDC3C((uint64_t)&a42);
  sub_2231CD9B0((uint64_t)&a52);
  sub_2231BD974((uint64_t)&a62);
  sub_2231BD974((uint64_t)&a69);
  sub_2231D4840((uint64_t)&STACK[0x218]);
  sub_22319F500((uint64_t)&STACK[0x268]);
  sub_22319F500((uint64_t)&STACK[0x2B8]);
  sub_2231D4840(v69 - 232);
  sub_22319EF60((uint64_t)&STACK[0x308]);
  sub_22319EF60((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void sub_2237F1394(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  float v5;
  uint64_t v7;
  float32x2_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  unsigned int v15;
  float32x2_t v16;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  unsigned int v29;
  float32x2_t v30;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t j;
  uint64_t v66;
  _OWORD *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float16x4_t *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  float16x4_t *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  float32x4_t v147;
  __int128 v148;
  uint64_t v149;
  _BYTE v150[16];
  std::__shared_weak_count *v151;
  uint64_t v152;
  int v153;
  int v154;
  _BYTE v155[16];
  std::__shared_weak_count *v156;
  uint64_t v157;
  int v158;
  int v159;
  _BYTE v160[16];
  std::__shared_weak_count *v161;
  _BYTE v162[16];
  std::__shared_weak_count *v163;
  _BYTE v164[16];
  std::__shared_weak_count *v165;
  uint64_t v166;
  int v167;
  int v168;
  _BYTE v169[16];
  std::__shared_weak_count *v170;
  uint64_t v171;
  int v172;
  int v173;
  _BYTE v174[16];
  std::__shared_weak_count *v175;
  uint64_t v176;
  int v177;
  int v178;
  _BYTE v179[16];
  std::__shared_weak_count *v180;
  uint64_t v181;
  int v182;
  int v183;
  _QWORD v184[2];
  std::__shared_weak_count *v185;
  _BYTE v186[16];
  std::__shared_weak_count *v187;
  uint64_t v188;
  int v189;
  int v190;
  _BYTE v191[16];
  std::__shared_weak_count *v192;
  uint64_t v193;
  int v194;
  int v195;
  _BYTE v196[8];
  uint64_t v197;
  std::__shared_weak_count *v198;
  float16x4_t *v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  char v206;

  v7 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v7);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v196);
  v109 = v197;
  if (v197)
  {
    v110 = v198;
    if (v198)
    {
      p_shared_owners = (unint64_t *)&v198->__shared_owners_;
      do
        v112 = __ldxr(p_shared_owners);
      while (__stxr(v112 + 1, p_shared_owners));
      do
        v113 = __ldaxr(p_shared_owners);
      while (__stlxr(v113 - 1, p_shared_owners));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
      v109 = v197;
      v114 = v198;
      if (v198)
      {
        v115 = (unint64_t *)&v198->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        do
          v117 = __ldaxr(v115);
        while (__stlxr(v117 - 1, v115));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
    }
    if (v206)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v109 + 96))(v184, v109, 1);
      if (!v200)
        goto LABEL_170;
LABEL_146:
      v118 = v201;
      if (v201)
      {
        v119 = v202;
        if (v202)
        {
          v120 = v7;
          v122 = v203;
          v121 = v204;
          v123 = v199;
          if (v205 && v199)
          {
            v124 = v197;
            v125 = v198;
            if (v198)
            {
              v126 = (unint64_t *)&v198->__shared_owners_;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
              do
                v128 = __ldaxr(v126);
              while (__stlxr(v128 - 1, v126));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v124 + 88))(v124, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v123 = v199;
          }
          v129 = v118 - 1;
          v130 = 2 * v122;
          v131 = v119 - 1;
          if (v119 == 1)
          {
            v7 = v120;
          }
          else if (v118 == 1)
          {
            v136 = 2 * v121;
            v7 = v120;
            do
            {
              *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
              v123 = (float16x4_t *)((char *)v123 + v136);
              --v131;
            }
            while (v131);
          }
          else
          {
            v132 = 0;
            v133 = 2 * v121;
            v7 = v120;
            do
            {
              v134 = v123;
              v135 = v118 - 1;
              do
              {
                *v134 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v134)));
                v134 = (float16x4_t *)((char *)v134 + v130);
                --v135;
              }
              while (v135);
              *v134 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v134)));
              v123 = (float16x4_t *)((char *)v123 + v133);
              ++v132;
            }
            while (v132 != v131);
          }
          if (v118 != 1)
          {
            do
            {
              *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
              v123 = (float16x4_t *)((char *)v123 + v130);
              --v129;
            }
            while (v129);
          }
          *v123 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v123)));
        }
      }
      goto LABEL_170;
    }
  }
  v184[0] = 0;
  if (v200)
    goto LABEL_146;
LABEL_170:
  v137 = v184[0];
  v184[0] = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = v198;
  if (v198)
  {
    v139 = (unint64_t *)&v198->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
LABEL_5:
  sub_2231D3D90(v7, (uint64_t)v191);
  sub_2231D4288(v7, (uint64_t)v186);
  sub_2231D48A8(v7, (uint64_t)v196);
  sub_2231D494C(v7, (uint64_t)v184);
  sub_2231D4E60(v7, (uint64_t)v179);
  sub_2231D432C(v7, (uint64_t)v174);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v169);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v164);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v162);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v160);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v155);
  sub_2231CC874((uint64_t)a4, (uint64_t)v150);
  v10 = *a1;
  v141 = *a2;
  v142 = a2[1];
  v143 = a2[2];
  v147 = a2[3];
  v11 = sub_2231D021C((uint64_t)a4);
  v12 = sub_2231D021C(v7);
  v144 = (uint64_t)a4;
  v14 = atomic_load((unsigned __int8 *)&qword_2540CC670);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC670))
  {
    qword_2540CC668 = 0;
    __cxa_guard_release(&qword_2540CC670);
  }
  if (HIDWORD(v11) && (_DWORD)v11)
  {
    v15 = 0;
    v16 = vadd_f32(v10, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v21 = vmlaq_lane_f32(vmulq_n_f32(v141, v16.f32[0]), v142, v16, 1);
    v22 = vadd_f32(v10, _D2);
    v23 = (float32x2_t)vaddq_f32(v147, vaddq_f32(v143, v21)).u64[0];
    *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)v147.f32, vadd_f32(*(float32x2_t *)v143.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v141, v22.f32[0]), v142, v22, 1)));
    v24 = vsub_f32(v23, v10);
    v25 = vsub_f32(*(float32x2_t *)&v13, v23);
    v26 = (float)(v12 - 1);
    v27 = (float)(HIDWORD(v12) - 1);
    LOWORD(v4) = -1025;
    HIWORD(_S14) = 0x8000;
    v145 = HIDWORD(v11);
    v146 = v11;
    do
    {
      v29 = 0;
      *(float *)&v13 = (float)v15;
      v148 = v13;
      do
      {
        while (1)
        {
          v30.f32[0] = (float)v29;
          *((_QWORD *)&v13 + 1) = *((_QWORD *)&v148 + 1);
          v30.i32[1] = v148;
          *(float32x2_t *)&v13 = vmla_f32(v24, v25, v30);
          if (*(float *)&v13 >= 0.0
            && *(float *)&v13 <= v26
            && *((float *)&v13 + 1) >= 0.0
            && *((float *)&v13 + 1) <= v27)
          {
            break;
          }
          *(_WORD *)(v171 + 2 * (v172 * v29 + v173 * v15)) = -1025;
          *(_WORD *)(v166 + 2 * (v167 * v29 + v168 * v15)) = 0;
          v33 = v153;
          v34 = v154;
          v35 = v152;
          if (!v152)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v64 = qword_255795648;
              for (i = qword_255795650; v64 != i; v64 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v64)(*(_QWORD *)(v64 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v37 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v35 + 2 * (v33 * v29 + v34 * v15)) = 0x8000800080008000;
          v39 = v158;
          v38 = v159;
          v40 = v157;
          if (!v157)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v66 = qword_255795648;
              for (j = qword_255795650; v66 != j; v66 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v66)(*(_QWORD *)(v66 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v42 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v40 + 2 * (v39 * v29++ + v38 * v15)) = 0xFF00FF00FF00FF00;
          if (v29 == (_DWORD)v11)
            goto LABEL_9;
        }
        *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)&v13, (float32x2_t)0x3F0000003F000000);
        v43 = *(float *)&v13;
        v44 = *((float *)&v13 + 1);
        LOWORD(_S14) = *(_WORD *)(v193
                                + 2
                                * (v194 * *(float *)&v13 + v195 * *((float *)&v13 + 1)));
        LOWORD(v5) = *(_WORD *)(v188
                              + 2 * (v189 * *(float *)&v13 + v190 * *((float *)&v13 + 1)));
        v45 = v177;
        v46 = v178;
        v47 = v176;
        if (!v176
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v48 = *(_QWORD *)(v47 + 2 * (v45 * v43 + v46 * v44));
        v49 = v182;
        v50 = v183;
        v51 = v181;
        if (!v181
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v52 = *(_QWORD *)(v51 + 2 * (v49 * v43 + v50 * v44));
        __asm { FCVT            S0, H14 }
        _NF = _S0 < 0.0;
        if (_S0 >= 0.0)
          v55 = _S14;
        else
          v55 = v4;
        *(_WORD *)(v171 + 2 * (v172 * v29 + v173 * v15)) = v55;
        if (_NF)
          v56 = 0.0;
        else
          v56 = v5;
        *(_WORD *)(v166 + 2 * (v167 * v29 + v168 * v15)) = LOWORD(v56);
        v57 = v153;
        v58 = v154;
        v59 = v152;
        HIWORD(_S14) = 0x8000;
        if (!v152
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v59 + 2 * (v57 * v29 + v58 * v15)) = v48;
        v60 = v158;
        v61 = v159;
        v62 = v157;
        if (!v157
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v62 + 2 * (v60 * v29 + v61 * v15)) = v52;
        LODWORD(v11) = v146;
        ++v29;
      }
      while (v29 != v146);
LABEL_9:
      ++v15;
    }
    while (v15 != (_DWORD)v145);
  }
  v67 = (_OWORD *)sub_2231CC494(v7);
  *(_OWORD *)sub_2231CC494(v144) = *v67;
  v68 = (uint64_t **)sub_2231D0424(v7);
  v69 = (uint64_t *)sub_2231D0490(v144);
  if (v69 != (uint64_t *)v68)
    sub_2231F6E10(v69, *v68, v68[1], 0xCCCCCCCCCCCCCCCDLL * (v68[1] - *v68));
  v70 = sub_2231D04FC(v7);
  v71 = sub_2231D04FC(v144);
  sub_2231CFEAC(v71, v70);
  v149 = sub_2231D041C(v7);
  sub_2231CBAC0(v144, &v149);
  v72 = v151;
  if (v151)
  {
    v73 = (unint64_t *)&v151->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v156;
  if (v156)
  {
    v76 = (unint64_t *)&v156->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v161;
  if (v161)
  {
    v79 = (unint64_t *)&v161->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v163;
  if (v163)
  {
    v82 = (unint64_t *)&v163->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v165;
  if (v165)
  {
    v85 = (unint64_t *)&v165->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v170;
  if (v170)
  {
    v88 = (unint64_t *)&v170->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v175;
  if (v175)
  {
    v91 = (unint64_t *)&v175->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v180;
  if (v180)
  {
    v94 = (unint64_t *)&v180->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v185;
  if (v185)
  {
    v97 = (unint64_t *)&v185->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v198;
  if (v198)
  {
    v100 = (unint64_t *)&v198->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v187;
  if (v187)
  {
    v103 = (unint64_t *)&v187->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v192;
  if (v192)
  {
    v106 = (unint64_t *)&v192->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_2237F217C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2B8];
  STACK[0x2B8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F21BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_2231CD9B0((uint64_t)&a22);
  sub_2231CDC3C((uint64_t)&a32);
  sub_2231CDC3C((uint64_t)&a42);
  sub_2231CD9B0((uint64_t)&a52);
  sub_2231BD974((uint64_t)&a62);
  sub_2231BD974((uint64_t)&a69);
  sub_2231D4840((uint64_t)&STACK[0x218]);
  sub_22319F500((uint64_t)&STACK[0x268]);
  sub_22319F500((uint64_t)&STACK[0x2B8]);
  sub_2231D4840(v69 - 232);
  sub_22319EF60((uint64_t)&STACK[0x308]);
  sub_22319EF60((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void sub_2237F22E4(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  float32x2_t v14;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  unsigned int v27;
  float32x2_t v28;
  uint64_t v29;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  int v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  unint64_t v52;
  float32x2_t v53;
  int v54;
  int v55;
  uint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v66;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t k;
  float32x4_t v79;
  char v80;
  double v81;
  uint64_t v82;
  int v84;
  float v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v137;
  float32x4_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  float16x4_t *v153;
  float32x4_t *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  float16x4_t *v164;
  int v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float v175;
  float32x4_t v176;
  float32x4_t v177;
  int64x2_t v178;
  uint64_t v179;
  char v180[16];
  std::__shared_weak_count *v181;
  uint64_t v182;
  int v183;
  int v184;
  char v185[16];
  std::__shared_weak_count *v186;
  char v187[16];
  std::__shared_weak_count *v188;
  uint64_t v189;
  int v190;
  int v191;
  char v192[16];
  std::__shared_weak_count *v193;
  uint64_t v194;
  int v195;
  int v196;
  char v197[16];
  std::__shared_weak_count *v198;
  uint64_t v199;
  int v200;
  int v201;
  char v202[16];
  std::__shared_weak_count *v203;
  uint64_t v204;
  int v205;
  int v206;
  char v207[16];
  std::__shared_weak_count *v208;
  uint64_t v209;
  int v210;
  int v211;
  char v212[16];
  std::__shared_weak_count *v213;
  _QWORD v214[2];
  std::__shared_weak_count *v215;
  uint64_t v216;
  int v217;
  int v218;
  char v219[16];
  std::__shared_weak_count *v220;
  uint64_t v221;
  int v222;
  int v223;
  char v224[16];
  std::__shared_weak_count *v225;
  uint64_t v226;
  int v227;
  int v228;
  char v229[8];
  uint64_t v230;
  std::__shared_weak_count *v231;
  float16x4_t *v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  char v238;
  char v239;

  v6 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v6);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v229);
  v137 = v230;
  if (v230)
  {
    v138 = a2;
    v139 = v231;
    if (v231)
    {
      p_shared_owners = (unint64_t *)&v231->__shared_owners_;
      do
        v141 = __ldxr(p_shared_owners);
      while (__stxr(v141 + 1, p_shared_owners));
      do
        v142 = __ldaxr(p_shared_owners);
      while (__stlxr(v142 - 1, p_shared_owners));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
      v137 = v230;
      v143 = v231;
      if (v231)
      {
        v144 = (unint64_t *)&v231->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
    }
    a2 = v138;
    if (v239)
    {
      v147 = v6;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 96))(v214, v137, 1);
      if (!v233)
        goto LABEL_197;
LABEL_175:
      v148 = v234;
      if (v234)
      {
        v149 = v235;
        if (v235)
        {
          v150 = a4;
          v152 = v236;
          v151 = v237;
          v153 = v232;
          if (v238 && v232)
          {
            v154 = a2;
            v155 = v230;
            v156 = v231;
            if (v231)
            {
              v157 = (unint64_t *)&v231->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
              do
                v159 = __ldaxr(v157);
              while (__stlxr(v159 - 1, v157));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v155 + 88))(v155, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v153 = v232;
            a2 = v154;
          }
          v160 = v148 - 1;
          v161 = 2 * v152;
          a4 = v150;
          v162 = v149 - 1;
          if (v149 != 1)
          {
            if (v148 == 1)
            {
              do
              {
                *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
                v153 = (float16x4_t *)((char *)v153 + 2 * v151);
                --v162;
              }
              while (v162);
            }
            else
            {
              v163 = 0;
              do
              {
                v164 = v153;
                v165 = v148 - 1;
                do
                {
                  *v164 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v164)));
                  v164 = (float16x4_t *)((char *)v164 + v161);
                  --v165;
                }
                while (v165);
                *v164 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v164)));
                v153 = (float16x4_t *)((char *)v153 + 2 * v151);
                ++v163;
              }
              while (v163 != v162);
            }
          }
          if (v148 != 1)
          {
            do
            {
              *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
              v153 = (float16x4_t *)((char *)v153 + v161);
              --v160;
            }
            while (v160);
          }
          *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
        }
      }
      goto LABEL_197;
    }
  }
  v147 = v6;
  v214[0] = 0;
  if (v233)
    goto LABEL_175;
LABEL_197:
  v166 = v214[0];
  v214[0] = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = v231;
  v6 = v147;
  if (v231)
  {
    v168 = (unint64_t *)&v231->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
LABEL_5:
  sub_2231D3D90(v6, (uint64_t)v224);
  sub_2231D4288(v6, (uint64_t)v219);
  sub_2231D48A8(v6, (uint64_t)v229);
  sub_2231D494C(v6, (uint64_t)v214);
  sub_2231D4E60(v6, (uint64_t)v212);
  sub_2231D432C(v6, (uint64_t)v207);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v202);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v197);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v192);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v187);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v185);
  sub_2231CC874((uint64_t)a4, (uint64_t)v180);
  v9 = *a1;
  v171 = *a2;
  v174 = a2[1];
  v176 = a2[2];
  v173 = a2;
  v177 = a2[3];
  v10 = sub_2231D021C((uint64_t)a4);
  v11 = sub_2231D021C(v6);
  v170 = v6;
  v12 = atomic_load((unsigned __int8 *)&qword_2540CC680);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC680))
  {
    qword_2540CC678 = 0;
    __cxa_guard_release(&qword_2540CC680);
  }
  if (HIDWORD(v10) && (_DWORD)v10)
  {
    v13 = 0;
    v14 = vadd_f32(v9, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v19 = vmlaq_lane_f32(vmulq_n_f32(v171, v14.f32[0]), v174, v14, 1);
    v20 = vadd_f32(v9, _D2);
    v21 = (float32x2_t)vaddq_f32(v177, vaddq_f32(v176, v19)).u64[0];
    v22 = vsub_f32(v21, v9);
    v23 = vsub_f32(vadd_f32(*(float32x2_t *)v177.f32, vadd_f32(*(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v171, v20.f32[0]), v174, v20, 1))), v21);
    v24 = (float)(v11 - 1);
    v25 = (float)(HIDWORD(v11) - 1);
    LOWORD(_S15) = -1025;
    __asm { FMOV            V0.4S, #1.0 }
    v172 = (float32x4_t)_Q0;
    v175 = v24;
    do
    {
      v27 = 0;
      *(float *)_Q0.i32 = (float)v13;
      v178 = _Q0;
      do
      {
        while (1)
        {
          v28.f32[0] = (float)v27;
          _Q0.i64[1] = v178.i64[1];
          v28.i32[1] = v178.i32[0];
          v29 = qword_2540CC678;
          *(float32x2_t *)_Q0.i8 = vmla_f32(v22, v23, v28);
          v179 = _Q0.i64[0];
          if (*(float *)_Q0.i32 >= 0.0
            && *(float *)_Q0.i32 <= v24
            && *(float *)&_Q0.i32[1] >= 0.0
            && *(float *)&_Q0.i32[1] <= v25)
          {
            break;
          }
          *(_WORD *)(v204 + 2 * (v205 * v27 + v206 * v13)) = _S15;
          *(_WORD *)(v199 + 2 * (v200 * v27 + v201 * v13)) = 0;
          v32 = v195;
          v33 = v196;
          v34 = v194;
          if (!v194)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v35 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v73 = qword_255795648;
              for (i = qword_255795650; v73 != i; v73 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v73)(*(_QWORD *)(v73 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v34 + 2 * (v32 * v27 + v33 * v13)) = v29;
          v37 = v183;
          v38 = v184;
          v39 = v182;
          if (!v182)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v40 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v75 = qword_255795648;
              for (j = qword_255795650; v75 != j; v75 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v75)(*(_QWORD *)(v75 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v39 + 2 * (v37 * v27 + v38 * v13)) = 0x8000800080008000;
          v42 = v190;
          v43 = v191;
          v44 = v189;
          if (!v189)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v45 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v77 = qword_255795648;
              for (k = qword_255795650; v77 != k; v77 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v77)(*(_QWORD *)(v77 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v46 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v44 + 2 * (v42 * v27++ + v43 * v13)) = 0xFF00FF00FF00FF00;
          if (v27 == (_DWORD)v10)
            goto LABEL_9;
        }
        v47 = _S15;
        v48 = v23;
        v49 = v22;
        v50 = v25;
        v51 = vadd_f32(*(float32x2_t *)_Q0.i8, (float32x2_t)0x3F0000003F000000);
        LOWORD(_S15) = *(_WORD *)(v226 + 2 * (v227 * v51.f32[0] + v228 * v51.f32[1]));
        LOWORD(v29) = *(_WORD *)(v221 + 2 * (v222 * v51.f32[0] + v223 * v51.f32[1]));
        v52 = sub_223CD41E8((float *)&v179, (uint64_t)v229);
        v53 = (float32x2_t)v179;
        v54 = v210;
        v55 = v211;
        v56 = v209;
        v57 = (float32x2_t)v179;
        if (!v209)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v57 = (float32x2_t)v179;
        }
        v58 = vadd_f32(v53, (float32x2_t)0x3F0000003F000000);
        v59 = *(_QWORD *)(v56 + 2 * (v54 * v58.f32[0] + v55 * v58.f32[1]));
        v60 = v217;
        v61 = v218;
        v62 = v216;
        if (!v216
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        _Q0 = (int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v52), (uint64x2_t)xmmword_22464F4A0);
        _D1.i32[0] = v52;
        _D1.i32[1] = WORD1(v52);
        *(int16x4_t *)_Q0.i8 = vmovn_s32(vmovn_hight_s64(_D1, _Q0));
        __asm { FCVT            S1, H0 }
        _H2 = _Q0.i16[1];
        __asm { FCVT            S2, H2 }
        v66 = _S2 > 0.0;
        if (*(float *)_D1.i32 > 0.0)
          ++v66;
        _H1 = _Q0.i16[2];
        __asm { FCVT            S1, H1 }
        if (_S1 > 0.0)
          ++v66;
        _H1 = _Q0.i16[3];
        __asm { FCVT            S1, H1 }
        if (_S1 <= 0.0)
          v71 = 0;
        else
          v71 = -1;
        if (v66 == v71)
        {
          v72 = *(double *)&qword_2540CC678;
        }
        else
        {
          v79 = v173[4];
          v80 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v79, v172))));
          v81 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(v79, vcvtq_f32_f16(*(float16x4_t *)_Q0.i8))));
          if ((v80 & 1) != 0)
            v72 = v81;
          else
            v72 = *(double *)_Q0.i64;
        }
        *(float32x2_t *)_Q0.i8 = vadd_f32(v57, (float32x2_t)0x3F0000003F000000);
        v82 = *(_QWORD *)(v62 + 2
                              * (v60 * *(float *)_Q0.i32 + v61 * *(float *)&_Q0.i32[1]));
        __asm { FCVT            S0, H15 }
        _NF = *(float *)_Q0.i32 < 0.0;
        if (*(float *)_Q0.i32 >= 0.0)
          v84 = _S15;
        else
          v84 = v47;
        _S15 = v47;
        *(_WORD *)(v204 + 2 * (v205 * v27 + v206 * v13)) = v84;
        if (_NF)
          v85 = 0.0;
        else
          v85 = *(float *)&v29;
        *(_WORD *)(v199 + 2 * (v200 * v27 + v201 * v13)) = LOWORD(v85);
        v86 = v195;
        v87 = v196;
        v88 = v194;
        if (!v194
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(double *)(v88 + 2 * (v86 * v27 + v87 * v13)) = v72;
        v89 = v183;
        v90 = v184;
        v91 = v182;
        v25 = v50;
        v22 = v49;
        v23 = v48;
        v24 = v175;
        if (!v182
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v91 + 2 * (v89 * v27 + v90 * v13)) = v59;
        v92 = v190;
        v93 = v191;
        v94 = v189;
        if (!v189
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v94 + 2 * (v92 * v27++ + v93 * v13)) = v82;
      }
      while (v27 != (_DWORD)v10);
LABEL_9:
      ++v13;
    }
    while (v13 != HIDWORD(v10));
  }
  v95 = (_OWORD *)sub_2231CC494(v170);
  *(_OWORD *)sub_2231CC494((uint64_t)a4) = *v95;
  v96 = (uint64_t **)sub_2231D0424(v170);
  v97 = (uint64_t *)sub_2231D0490((uint64_t)a4);
  if (v97 != (uint64_t *)v96)
    sub_2231F6E10(v97, *v96, v96[1], 0xCCCCCCCCCCCCCCCDLL * (v96[1] - *v96));
  v98 = sub_2231D04FC(v170);
  v99 = sub_2231D04FC((uint64_t)a4);
  sub_2231CFEAC(v99, v98);
  v179 = sub_2231D041C(v170);
  sub_2231CBAC0((uint64_t)a4, &v179);
  v100 = v181;
  if (v181)
  {
    v101 = (unint64_t *)&v181->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v186;
  if (v186)
  {
    v104 = (unint64_t *)&v186->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v188;
  if (v188)
  {
    v107 = (unint64_t *)&v188->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v193;
  if (v193)
  {
    v110 = (unint64_t *)&v193->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v198;
  if (v198)
  {
    v113 = (unint64_t *)&v198->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v203;
  if (v203)
  {
    v116 = (unint64_t *)&v203->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v208;
  if (v208)
  {
    v119 = (unint64_t *)&v208->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v213;
  if (v213)
  {
    v122 = (unint64_t *)&v213->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v215;
  if (v215)
  {
    v125 = (unint64_t *)&v215->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v231;
  if (v231)
  {
    v128 = (unint64_t *)&v231->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v220;
  if (v220)
  {
    v131 = (unint64_t *)&v220->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v225;
  if (v225)
  {
    v134 = (unint64_t *)&v225->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_2237F33DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a71;
  uint64_t v71;

  sub_2231CD9B0((uint64_t)&a24);
  sub_2231CDC3C((uint64_t)&a34);
  sub_2231CDC3C((uint64_t)&a44);
  sub_2231CD9B0((uint64_t)&a54);
  sub_2231BD974((uint64_t)&a64);
  sub_2231BD974((uint64_t)&a71);
  sub_2231D4840((uint64_t)&STACK[0x228]);
  sub_22319F500((uint64_t)&STACK[0x278]);
  sub_22319F500((uint64_t)&STACK[0x2C8]);
  sub_2231D4840(v71 - 232);
  sub_22319EF60((uint64_t)&STACK[0x318]);
  sub_22319EF60((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_2237F355C(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  float32x2_t v14;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  unsigned int v27;
  float32x2_t v28;
  uint64_t v29;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  int v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  unint64_t v52;
  float32x2_t v53;
  int v54;
  int v55;
  uint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v66;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t k;
  float32x4_t v79;
  char v80;
  double v81;
  uint64_t v82;
  int v84;
  float v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v137;
  float32x4_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  float16x4_t *v153;
  float32x4_t *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  float16x4_t *v164;
  int v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float v175;
  float32x4_t v176;
  float32x4_t v177;
  int64x2_t v178;
  uint64_t v179;
  char v180[16];
  std::__shared_weak_count *v181;
  uint64_t v182;
  int v183;
  int v184;
  char v185[16];
  std::__shared_weak_count *v186;
  uint64_t v187;
  int v188;
  int v189;
  char v190[16];
  std::__shared_weak_count *v191;
  char v192[16];
  std::__shared_weak_count *v193;
  uint64_t v194;
  int v195;
  int v196;
  char v197[16];
  std::__shared_weak_count *v198;
  uint64_t v199;
  int v200;
  int v201;
  char v202[16];
  std::__shared_weak_count *v203;
  uint64_t v204;
  int v205;
  int v206;
  char v207[16];
  std::__shared_weak_count *v208;
  uint64_t v209;
  int v210;
  int v211;
  char v212[16];
  std::__shared_weak_count *v213;
  uint64_t v214;
  int v215;
  int v216;
  _QWORD v217[2];
  std::__shared_weak_count *v218;
  char v219[16];
  std::__shared_weak_count *v220;
  uint64_t v221;
  int v222;
  int v223;
  char v224[16];
  std::__shared_weak_count *v225;
  uint64_t v226;
  int v227;
  int v228;
  char v229[8];
  uint64_t v230;
  std::__shared_weak_count *v231;
  float16x4_t *v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  char v238;
  char v239;

  v6 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v6);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v229);
  v137 = v230;
  if (v230)
  {
    v138 = a2;
    v139 = v231;
    if (v231)
    {
      p_shared_owners = (unint64_t *)&v231->__shared_owners_;
      do
        v141 = __ldxr(p_shared_owners);
      while (__stxr(v141 + 1, p_shared_owners));
      do
        v142 = __ldaxr(p_shared_owners);
      while (__stlxr(v142 - 1, p_shared_owners));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
      v137 = v230;
      v143 = v231;
      if (v231)
      {
        v144 = (unint64_t *)&v231->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
    }
    a2 = v138;
    if (v239)
    {
      v147 = v6;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 96))(v217, v137, 1);
      if (!v233)
        goto LABEL_197;
LABEL_175:
      v148 = v234;
      if (v234)
      {
        v149 = v235;
        if (v235)
        {
          v150 = a4;
          v152 = v236;
          v151 = v237;
          v153 = v232;
          if (v238 && v232)
          {
            v154 = a2;
            v155 = v230;
            v156 = v231;
            if (v231)
            {
              v157 = (unint64_t *)&v231->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
              do
                v159 = __ldaxr(v157);
              while (__stlxr(v159 - 1, v157));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v155 + 88))(v155, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v153 = v232;
            a2 = v154;
          }
          v160 = v148 - 1;
          v161 = 2 * v152;
          a4 = v150;
          v162 = v149 - 1;
          if (v149 != 1)
          {
            if (v148 == 1)
            {
              do
              {
                *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
                v153 = (float16x4_t *)((char *)v153 + 2 * v151);
                --v162;
              }
              while (v162);
            }
            else
            {
              v163 = 0;
              do
              {
                v164 = v153;
                v165 = v148 - 1;
                do
                {
                  *v164 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v164)));
                  v164 = (float16x4_t *)((char *)v164 + v161);
                  --v165;
                }
                while (v165);
                *v164 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v164)));
                v153 = (float16x4_t *)((char *)v153 + 2 * v151);
                ++v163;
              }
              while (v163 != v162);
            }
          }
          if (v148 != 1)
          {
            do
            {
              *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
              v153 = (float16x4_t *)((char *)v153 + v161);
              --v160;
            }
            while (v160);
          }
          *v153 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v153)));
        }
      }
      goto LABEL_197;
    }
  }
  v147 = v6;
  v217[0] = 0;
  if (v233)
    goto LABEL_175;
LABEL_197:
  v166 = v217[0];
  v217[0] = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = v231;
  v6 = v147;
  if (v231)
  {
    v168 = (unint64_t *)&v231->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
LABEL_5:
  sub_2231D3D90(v6, (uint64_t)v224);
  sub_2231D4288(v6, (uint64_t)v219);
  sub_2231D48A8(v6, (uint64_t)v229);
  sub_2231D494C(v6, (uint64_t)v217);
  sub_2231D4E60(v6, (uint64_t)v212);
  sub_2231D432C(v6, (uint64_t)v207);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v202);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v197);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v192);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v190);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v185);
  sub_2231CC874((uint64_t)a4, (uint64_t)v180);
  v9 = *a1;
  v171 = *a2;
  v174 = a2[1];
  v176 = a2[2];
  v173 = a2;
  v177 = a2[3];
  v10 = sub_2231D021C((uint64_t)a4);
  v11 = sub_2231D021C(v6);
  v170 = v6;
  v12 = atomic_load((unsigned __int8 *)&qword_2540CC690);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC690))
  {
    qword_2540CC688 = 0;
    __cxa_guard_release(&qword_2540CC690);
  }
  if (HIDWORD(v10) && (_DWORD)v10)
  {
    v13 = 0;
    v14 = vadd_f32(v9, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v19 = vmlaq_lane_f32(vmulq_n_f32(v171, v14.f32[0]), v174, v14, 1);
    v20 = vadd_f32(v9, _D2);
    v21 = (float32x2_t)vaddq_f32(v177, vaddq_f32(v176, v19)).u64[0];
    v22 = vsub_f32(v21, v9);
    v23 = vsub_f32(vadd_f32(*(float32x2_t *)v177.f32, vadd_f32(*(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v171, v20.f32[0]), v174, v20, 1))), v21);
    v24 = (float)(v11 - 1);
    v25 = (float)(HIDWORD(v11) - 1);
    LOWORD(_S15) = -1025;
    __asm { FMOV            V0.4S, #1.0 }
    v172 = (float32x4_t)_Q0;
    v175 = v24;
    do
    {
      v27 = 0;
      *(float *)_Q0.i32 = (float)v13;
      v178 = _Q0;
      do
      {
        while (1)
        {
          v28.f32[0] = (float)v27;
          _Q0.i64[1] = v178.i64[1];
          v28.i32[1] = v178.i32[0];
          v29 = qword_2540CC688;
          *(float32x2_t *)_Q0.i8 = vmla_f32(v22, v23, v28);
          v179 = _Q0.i64[0];
          if (*(float *)_Q0.i32 >= 0.0
            && *(float *)_Q0.i32 <= v24
            && *(float *)&_Q0.i32[1] >= 0.0
            && *(float *)&_Q0.i32[1] <= v25)
          {
            break;
          }
          *(_WORD *)(v204 + 2 * (v205 * v27 + v206 * v13)) = _S15;
          *(_WORD *)(v199 + 2 * (v200 * v27 + v201 * v13)) = 0;
          v32 = v195;
          v33 = v196;
          v34 = v194;
          if (!v194)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v35 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v73 = qword_255795648;
              for (i = qword_255795650; v73 != i; v73 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v73)(*(_QWORD *)(v73 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v34 + 2 * (v32 * v27 + v33 * v13)) = v29;
          v37 = v183;
          v38 = v184;
          v39 = v182;
          if (!v182)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v40 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v75 = qword_255795648;
              for (j = qword_255795650; v75 != j; v75 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v75)(*(_QWORD *)(v75 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v39 + 2 * (v37 * v27 + v38 * v13)) = 0x8000800080008000;
          v42 = v188;
          v43 = v189;
          v44 = v187;
          if (!v187)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v45 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v77 = qword_255795648;
              for (k = qword_255795650; v77 != k; v77 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v77)(*(_QWORD *)(v77 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v46 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v44 + 2 * (v42 * v27++ + v43 * v13)) = 0xFF00FF00FF00FF00;
          if (v27 == (_DWORD)v10)
            goto LABEL_9;
        }
        v47 = _S15;
        v48 = v23;
        v49 = v22;
        v50 = v25;
        v51 = vadd_f32(*(float32x2_t *)_Q0.i8, (float32x2_t)0x3F0000003F000000);
        LOWORD(_S15) = *(_WORD *)(v226 + 2 * (v227 * v51.f32[0] + v228 * v51.f32[1]));
        LOWORD(v29) = *(_WORD *)(v221 + 2 * (v222 * v51.f32[0] + v223 * v51.f32[1]));
        v52 = sub_223CD41E8((float *)&v179, (uint64_t)v229);
        v53 = (float32x2_t)v179;
        v54 = v210;
        v55 = v211;
        v56 = v209;
        v57 = (float32x2_t)v179;
        if (!v209)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v57 = (float32x2_t)v179;
        }
        v58 = vadd_f32(v53, (float32x2_t)0x3F0000003F000000);
        v59 = *(_QWORD *)(v56 + 2 * (v54 * v58.f32[0] + v55 * v58.f32[1]));
        v60 = v215;
        v61 = v216;
        v62 = v214;
        if (!v214
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        _Q0 = (int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v52), (uint64x2_t)xmmword_22464F4A0);
        _D1.i32[0] = v52;
        _D1.i32[1] = WORD1(v52);
        *(int16x4_t *)_Q0.i8 = vmovn_s32(vmovn_hight_s64(_D1, _Q0));
        __asm { FCVT            S1, H0 }
        _H2 = _Q0.i16[1];
        __asm { FCVT            S2, H2 }
        v66 = _S2 > 0.0;
        if (*(float *)_D1.i32 > 0.0)
          ++v66;
        _H1 = _Q0.i16[2];
        __asm { FCVT            S1, H1 }
        if (_S1 > 0.0)
          ++v66;
        _H1 = _Q0.i16[3];
        __asm { FCVT            S1, H1 }
        if (_S1 <= 0.0)
          v71 = 0;
        else
          v71 = -1;
        if (v66 == v71)
        {
          v72 = *(double *)&qword_2540CC688;
        }
        else
        {
          v79 = v173[4];
          v80 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v79, v172))));
          v81 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(v79, vcvtq_f32_f16(*(float16x4_t *)_Q0.i8))));
          if ((v80 & 1) != 0)
            v72 = v81;
          else
            v72 = *(double *)_Q0.i64;
        }
        *(float32x2_t *)_Q0.i8 = vadd_f32(v57, (float32x2_t)0x3F0000003F000000);
        v82 = *(_QWORD *)(v62 + 2
                              * (v60 * *(float *)_Q0.i32 + v61 * *(float *)&_Q0.i32[1]));
        __asm { FCVT            S0, H15 }
        _NF = *(float *)_Q0.i32 < 0.0;
        if (*(float *)_Q0.i32 >= 0.0)
          v84 = _S15;
        else
          v84 = v47;
        _S15 = v47;
        *(_WORD *)(v204 + 2 * (v205 * v27 + v206 * v13)) = v84;
        if (_NF)
          v85 = 0.0;
        else
          v85 = *(float *)&v29;
        *(_WORD *)(v199 + 2 * (v200 * v27 + v201 * v13)) = LOWORD(v85);
        v86 = v195;
        v87 = v196;
        v88 = v194;
        if (!v194
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(double *)(v88 + 2 * (v86 * v27 + v87 * v13)) = v72;
        v89 = v183;
        v90 = v184;
        v91 = v182;
        v25 = v50;
        v22 = v49;
        v23 = v48;
        v24 = v175;
        if (!v182
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v91 + 2 * (v89 * v27 + v90 * v13)) = v59;
        v92 = v188;
        v93 = v189;
        v94 = v187;
        if (!v187
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v94 + 2 * (v92 * v27++ + v93 * v13)) = v82;
      }
      while (v27 != (_DWORD)v10);
LABEL_9:
      ++v13;
    }
    while (v13 != HIDWORD(v10));
  }
  v95 = (_OWORD *)sub_2231CC494(v170);
  *(_OWORD *)sub_2231CC494((uint64_t)a4) = *v95;
  v96 = (uint64_t **)sub_2231D0424(v170);
  v97 = (uint64_t *)sub_2231D0490((uint64_t)a4);
  if (v97 != (uint64_t *)v96)
    sub_2231F6E10(v97, *v96, v96[1], 0xCCCCCCCCCCCCCCCDLL * (v96[1] - *v96));
  v98 = sub_2231D04FC(v170);
  v99 = sub_2231D04FC((uint64_t)a4);
  sub_2231CFEAC(v99, v98);
  v179 = sub_2231D041C(v170);
  sub_2231CBAC0((uint64_t)a4, &v179);
  v100 = v181;
  if (v181)
  {
    v101 = (unint64_t *)&v181->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v186;
  if (v186)
  {
    v104 = (unint64_t *)&v186->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v191;
  if (v191)
  {
    v107 = (unint64_t *)&v191->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v193;
  if (v193)
  {
    v110 = (unint64_t *)&v193->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v198;
  if (v198)
  {
    v113 = (unint64_t *)&v198->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v203;
  if (v203)
  {
    v116 = (unint64_t *)&v203->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v208;
  if (v208)
  {
    v119 = (unint64_t *)&v208->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v213;
  if (v213)
  {
    v122 = (unint64_t *)&v213->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v218;
  if (v218)
  {
    v125 = (unint64_t *)&v218->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v231;
  if (v231)
  {
    v128 = (unint64_t *)&v231->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v220;
  if (v220)
  {
    v131 = (unint64_t *)&v220->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v225;
  if (v225)
  {
    v134 = (unint64_t *)&v225->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_2237F4654(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F4694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a71;
  uint64_t v71;

  sub_2231CD9B0((uint64_t)&a24);
  sub_2231CDC3C((uint64_t)&a34);
  sub_2231CDC3C((uint64_t)&a44);
  sub_2231CD9B0((uint64_t)&a54);
  sub_2231BD974((uint64_t)&a64);
  sub_2231BD974((uint64_t)&a71);
  sub_2231D4840((uint64_t)&STACK[0x228]);
  sub_22319F500((uint64_t)&STACK[0x278]);
  sub_22319F500((uint64_t)&STACK[0x2C8]);
  sub_2231D4840(v71 - 232);
  sub_22319EF60((uint64_t)&STACK[0x318]);
  sub_22319EF60((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_2237F47D4(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  float v5;
  uint64_t v7;
  float32x2_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  unsigned int v15;
  float32x2_t v16;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  unsigned int v29;
  float32x2_t v30;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v63;
  float v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t k;
  _OWORD *v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  float16x4_t *v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  float16x4_t *v147;
  int v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  float32x4_t v159;
  uint64_t v160;
  float32x4_t v161;
  __int128 v162;
  uint64_t v163;
  char v164[16];
  std::__shared_weak_count *v165;
  uint64_t v166;
  int v167;
  int v168;
  char v169[16];
  std::__shared_weak_count *v170;
  unint64_t v171;
  int v172;
  int v173;
  char v174[16];
  std::__shared_weak_count *v175;
  uint64_t v176;
  int v177;
  int v178;
  char v179[16];
  std::__shared_weak_count *v180;
  char v181[16];
  std::__shared_weak_count *v182;
  uint64_t v183;
  int v184;
  int v185;
  char v186[16];
  std::__shared_weak_count *v187;
  uint64_t v188;
  int v189;
  int v190;
  char v191[16];
  std::__shared_weak_count *v192;
  uint64_t v193;
  int v194;
  int v195;
  char v196[16];
  std::__shared_weak_count *v197;
  uint64_t v198;
  int v199;
  int v200;
  _QWORD v201[2];
  std::__shared_weak_count *v202;
  uint64_t v203;
  int v204;
  int v205;
  char v206[16];
  std::__shared_weak_count *v207;
  uint64_t v208;
  int v209;
  int v210;
  char v211[16];
  std::__shared_weak_count *v212;
  uint64_t v213;
  int v214;
  int v215;
  char v216[8];
  uint64_t v217;
  std::__shared_weak_count *v218;
  float16x4_t *v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  char v225;
  char v226;

  v7 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v7);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v216);
  v121 = v217;
  if (v217)
  {
    v122 = v7;
    v123 = v218;
    if (v218)
    {
      p_shared_owners = (unint64_t *)&v218->__shared_owners_;
      do
        v125 = __ldxr(p_shared_owners);
      while (__stxr(v125 + 1, p_shared_owners));
      do
        v126 = __ldaxr(p_shared_owners);
      while (__stlxr(v126 - 1, p_shared_owners));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
      v121 = v217;
      v127 = v218;
      if (v218)
      {
        v128 = (unint64_t *)&v218->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
        do
          v130 = __ldaxr(v128);
        while (__stlxr(v130 - 1, v128));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
    }
    v7 = v122;
    if (v226)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v121 + 96))(v201, v121, 1);
      if (!v220)
        goto LABEL_186;
LABEL_164:
      v131 = v221;
      if (v221)
      {
        v132 = v222;
        if (v222)
        {
          v134 = v223;
          v133 = v224;
          v135 = v219;
          if (v225 && v219)
          {
            v136 = v7;
            v137 = v217;
            v138 = v218;
            if (v218)
            {
              v139 = (unint64_t *)&v218->__shared_owners_;
              do
                v140 = __ldxr(v139);
              while (__stxr(v140 + 1, v139));
              do
                v141 = __ldaxr(v139);
              while (__stlxr(v141 - 1, v139));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v137 + 88))(v137, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v135 = v219;
            v7 = v136;
          }
          v142 = v131 - 1;
          v143 = 2 * v134;
          v144 = v132 - 1;
          if (v132 != 1)
          {
            v145 = 2 * v133;
            if (v131 == 1)
            {
              do
              {
                *v135 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v135)));
                v135 = (float16x4_t *)((char *)v135 + v145);
                --v144;
              }
              while (v144);
            }
            else
            {
              v146 = 0;
              do
              {
                v147 = v135;
                v148 = v131 - 1;
                do
                {
                  *v147 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v147)));
                  v147 = (float16x4_t *)((char *)v147 + v143);
                  --v148;
                }
                while (v148);
                *v147 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v147)));
                v135 = (float16x4_t *)((char *)v135 + v145);
                ++v146;
              }
              while (v146 != v144);
            }
          }
          if (v131 != 1)
          {
            do
            {
              *v135 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v135)));
              v135 = (float16x4_t *)((char *)v135 + v143);
              --v142;
            }
            while (v142);
          }
          *v135 = vcvt_f16_f32(vmulq_f32(a2[4], vcvtq_f32_f16(*v135)));
        }
      }
      goto LABEL_186;
    }
  }
  v201[0] = 0;
  if (v220)
    goto LABEL_164;
LABEL_186:
  v149 = v201[0];
  v201[0] = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = v218;
  if (v218)
  {
    v151 = (unint64_t *)&v218->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
LABEL_5:
  sub_2231D3D90(v7, (uint64_t)v211);
  sub_2231D4288(v7, (uint64_t)v206);
  sub_2231D48A8(v7, (uint64_t)v216);
  sub_2231D494C(v7, (uint64_t)v201);
  sub_2231D4E60(v7, (uint64_t)v196);
  sub_2231D432C(v7, (uint64_t)v191);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v186);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v181);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v179);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v174);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v169);
  sub_2231CC874((uint64_t)a4, (uint64_t)v164);
  v10 = *a1;
  v153 = *a2;
  v154 = a2[1];
  v159 = a2[2];
  v161 = a2[3];
  v11 = sub_2231D021C((uint64_t)a4);
  v12 = sub_2231D021C(v7);
  v155 = v7;
  v156 = (uint64_t)a4;
  v14 = atomic_load((unsigned __int8 *)&qword_2540CC6A0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6A0))
  {
    qword_2540CC698 = 0;
    __cxa_guard_release(&qword_2540CC6A0);
  }
  if (HIDWORD(v11) && (_DWORD)v11)
  {
    v15 = 0;
    v16 = vadd_f32(v10, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v21 = vmlaq_lane_f32(vmulq_n_f32(v153, v16.f32[0]), v154, v16, 1);
    v22 = vadd_f32(v10, _D2);
    v23 = (float32x2_t)vaddq_f32(v161, vaddq_f32(v159, v21)).u64[0];
    *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)v161.f32, vadd_f32(*(float32x2_t *)v159.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v153, v22.f32[0]), v154, v22, 1)));
    v24 = vsub_f32(v23, v10);
    v25 = vsub_f32(*(float32x2_t *)&v13, v23);
    v26 = (float)(v12 - 1);
    v27 = (float)(HIDWORD(v12) - 1);
    LOWORD(v4) = -1025;
    HIWORD(_S14) = 0x8000;
    v157 = HIDWORD(v11);
    v158 = v11;
    do
    {
      v29 = 0;
      *(float *)&v13 = (float)v15;
      v162 = v13;
      do
      {
        while (1)
        {
          v30.f32[0] = (float)v29;
          *((_QWORD *)&v13 + 1) = *((_QWORD *)&v162 + 1);
          v30.i32[1] = v162;
          *(float32x2_t *)&v13 = vmla_f32(v24, v25, v30);
          if (*(float *)&v13 >= 0.0
            && *(float *)&v13 <= v26
            && *((float *)&v13 + 1) >= 0.0
            && *((float *)&v13 + 1) <= v27)
          {
            break;
          }
          *(_WORD *)(v188 + 2 * (v189 * v29 + v190 * v15)) = -1025;
          *(_WORD *)(v183 + 2 * (v184 * v29 + v185 * v15)) = 0;
          v33 = v167;
          v34 = v168;
          v35 = v166;
          if (!v166)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v73 = qword_255795648;
              for (i = qword_255795650; v73 != i; v73 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v73)(*(_QWORD *)(v73 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v37 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v35 + 2 * (v33 * v29 + v34 * v15)) = 0x8000800080008000;
          v38 = v177;
          v39 = v178;
          v40 = v176;
          if (!v176)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v75 = qword_255795648;
              for (j = qword_255795650; v75 != j; v75 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v75)(*(_QWORD *)(v75 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v42 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v40 + 2 * (v38 * v29 + v39 * v15)) = 0xFF00FF00FF00FF00;
          v43 = v172;
          v44 = v173;
          v45 = v171;
          if (!v171)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v46 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v77 = qword_255795648;
              for (k = qword_255795650; v77 != k; v77 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v77)(*(_QWORD *)(v77 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v47 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v45 + 2 * (v43 * v29++ + v44 * v15)) = 0xFF00FF00FF00FF00;
          if (v29 == (_DWORD)v11)
            goto LABEL_9;
        }
        *(float32x2_t *)&v13 = vadd_f32(*(float32x2_t *)&v13, (float32x2_t)0x3F0000003F000000);
        v48 = *(float *)&v13;
        v49 = *((float *)&v13 + 1);
        LOWORD(_S14) = *(_WORD *)(v213
                                + 2
                                * (v214 * *(float *)&v13 + v215 * *((float *)&v13 + 1)));
        LOWORD(v5) = *(_WORD *)(v208
                              + 2 * (v209 * *(float *)&v13 + v210 * *((float *)&v13 + 1)));
        v50 = v194;
        v51 = v195;
        v52 = v193;
        if (!v193
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v53 = *(_QWORD *)(v52 + 2 * (v50 * v48 + v51 * v49));
        v54 = v204;
        v55 = v205;
        v56 = v203;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v160 = *(_QWORD *)(v56 + 2 * (v54 * v48 + v55 * v49));
        v57 = v199;
        v58 = v200;
        v59 = v198;
        if (!v198
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v60 = *(_QWORD *)(v59 + 2 * (v57 * v48 + v58 * v49));
        __asm { FCVT            S0, H14 }
        _NF = _S0 < 0.0;
        if (_S0 >= 0.0)
          v63 = _S14;
        else
          v63 = v4;
        *(_WORD *)(v188 + 2 * (v189 * v29 + v190 * v15)) = v63;
        if (_NF)
          v64 = 0.0;
        else
          v64 = v5;
        *(_WORD *)(v183 + 2 * (v184 * v29 + v185 * v15)) = LOWORD(v64);
        v65 = v167;
        v66 = v168;
        v67 = v166;
        HIWORD(_S14) = 0x8000;
        if (!v166
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v67 + 2 * (v65 * v29 + v66 * v15)) = v53;
        v68 = v177;
        v69 = v178;
        v70 = v176;
        if (!v176
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v70 + 2 * (v68 * v29 + v69 * v15)) = v160;
        v71 = v172;
        v72 = v173;
        v11 = v171;
        if (!v171
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v11 + 2 * (v71 * v29 + v72 * v15)) = v60;
        LODWORD(v11) = v158;
        ++v29;
      }
      while (v29 != v158);
LABEL_9:
      ++v15;
    }
    while (v15 != (_DWORD)v157);
  }
  v79 = (_OWORD *)sub_2231CC494(v155);
  *(_OWORD *)sub_2231CC494(v156) = *v79;
  v80 = (uint64_t **)sub_2231D0424(v155);
  v81 = (uint64_t *)sub_2231D0490(v156);
  if (v81 != (uint64_t *)v80)
    sub_2231F6E10(v81, *v80, v80[1], 0xCCCCCCCCCCCCCCCDLL * (v80[1] - *v80));
  v82 = sub_2231D04FC(v155);
  v83 = sub_2231D04FC(v156);
  sub_2231CFEAC(v83, v82);
  v163 = sub_2231D041C(v155);
  sub_2231CBAC0(v156, &v163);
  v84 = v165;
  if (v165)
  {
    v85 = (unint64_t *)&v165->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v170;
  if (v170)
  {
    v88 = (unint64_t *)&v170->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v175;
  if (v175)
  {
    v91 = (unint64_t *)&v175->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v180;
  if (v180)
  {
    v94 = (unint64_t *)&v180->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v182;
  if (v182)
  {
    v97 = (unint64_t *)&v182->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v187;
  if (v187)
  {
    v100 = (unint64_t *)&v187->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v192;
  if (v192)
  {
    v103 = (unint64_t *)&v192->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v197;
  if (v197)
  {
    v106 = (unint64_t *)&v197->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v202;
  if (v202)
  {
    v109 = (unint64_t *)&v202->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v218;
  if (v218)
  {
    v112 = (unint64_t *)&v218->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v207;
  if (v207)
  {
    v115 = (unint64_t *)&v207->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v212;
  if (v212)
  {
    v118 = (unint64_t *)&v212->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
}

void sub_2237F57D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2B8];
  STACK[0x2B8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F5814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_2231CD9B0((uint64_t)&a22);
  sub_2231CDC3C((uint64_t)&a32);
  sub_2231CDC3C((uint64_t)&a42);
  sub_2231CD9B0((uint64_t)&a52);
  sub_2231BD974((uint64_t)&a62);
  sub_2231BD974((uint64_t)&a69);
  sub_2231D4840((uint64_t)&STACK[0x218]);
  sub_22319F500((uint64_t)&STACK[0x268]);
  sub_22319F500((uint64_t)&STACK[0x2B8]);
  sub_2231D4840(v69 - 232);
  sub_22319EF60((uint64_t)&STACK[0x308]);
  sub_22319EF60((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void sub_2237F5958(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  float v4;
  uint64_t v6;
  float32x2_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  float32x2_t v14;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float v26;
  unsigned int v28;
  float32x2_t v29;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float32x2_t v57;
  unint64_t v58;
  float32x2_t v60;
  int v61;
  int v62;
  uint64_t v63;
  float32x2_t v64;
  float32x2_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v78;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  uint64_t v86;
  uint64_t j;
  uint64_t v88;
  uint64_t k;
  uint64_t v90;
  uint64_t m;
  float32x4_t v92;
  uint64_t v94;
  float v96;
  float v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  _OWORD *v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  float16x4_t *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  float32x4_t *v176;
  int v177;
  float16x4_t *v178;
  int v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  float32x4_t v185;
  float32x4_t *v186;
  int v187;
  float32x4_t v188;
  float32x4_t v189;
  float v190;
  float32x4_t v191;
  int64x2_t v192;
  float32x4_t v193;
  int64x2_t v194;
  uint64_t v195;
  char v196[16];
  std::__shared_weak_count *v197;
  unint64_t v198;
  int v199;
  int v200;
  char v201[16];
  std::__shared_weak_count *v202;
  uint64_t v203;
  int v204;
  int v205;
  char v206[16];
  std::__shared_weak_count *v207;
  uint64_t v208;
  int v209;
  int v210;
  char v211[16];
  std::__shared_weak_count *v212;
  uint64_t v213;
  int v214;
  int v215;
  char v216[16];
  std::__shared_weak_count *v217;
  uint64_t v218;
  int v219;
  int v220;
  char v221[16];
  std::__shared_weak_count *v222;
  uint64_t v223;
  int v224;
  int v225;
  char v226[16];
  std::__shared_weak_count *v227;
  uint64_t v228;
  int v229;
  int v230;
  char v231[16];
  std::__shared_weak_count *v232;
  uint64_t v233;
  int v234;
  int v235;
  _QWORD v236[2];
  std::__shared_weak_count *v237;
  uint64_t v238;
  int v239;
  int v240;
  char v241[16];
  std::__shared_weak_count *v242;
  uint64_t v243;
  int v244;
  int v245;
  char v246[16];
  std::__shared_weak_count *v247;
  uint64_t v248;
  int v249;
  int v250;
  char v251[8];
  uint64_t v252;
  std::__shared_weak_count *v253;
  float16x4_t *v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  char v260;
  char v261;

  v6 = a3;
  if ((!sub_2231D01EC(a3) || !sub_2231D01EC((uint64_t)a4))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/ImageScaleConversion.cpp", 103, (uint64_t)"(input.IsValid() && output.IsValid())", 37, (uint64_t)"Input and output images are expected to be valid.", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v186 = a2;
  if (a2[7].i32[1])
    goto LABEL_5;
  sub_2231D1074(a4, v6);
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(a2[4], _Q1)))) & 1) == 0)
    return;
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v251);
  v151 = v252;
  if (v252)
  {
    v152 = v253;
    if (v253)
    {
      p_shared_owners = (unint64_t *)&v253->__shared_owners_;
      do
        v154 = __ldxr(p_shared_owners);
      while (__stxr(v154 + 1, p_shared_owners));
      do
        v155 = __ldaxr(p_shared_owners);
      while (__stlxr(v155 - 1, p_shared_owners));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
      v151 = v252;
      v156 = v253;
      if (v253)
      {
        v157 = (unint64_t *)&v253->__shared_owners_;
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
        do
          v159 = __ldaxr(v157);
        while (__stlxr(v159 - 1, v157));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
    }
    if (v261)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v151 + 96))(v236, v151, 1);
      if (!v255)
        goto LABEL_218;
LABEL_194:
      v160 = v256;
      if (v256)
      {
        v161 = v257;
        if (v257)
        {
          v162 = v6;
          v163 = a4;
          v165 = v258;
          v164 = v259;
          v166 = v254;
          if (v260 && v254)
          {
            v167 = v252;
            v168 = v253;
            if (v253)
            {
              v169 = (unint64_t *)&v253->__shared_owners_;
              do
                v170 = __ldxr(v169);
              while (__stxr(v170 + 1, v169));
              do
                v171 = __ldaxr(v169);
              while (__stlxr(v171 - 1, v169));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v167 + 88))(v167, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v166 = v254;
          }
          v172 = v160 - 1;
          v173 = 2 * v165;
          v174 = v161 - 1;
          if (v161 == 1)
          {
            a4 = v163;
            v6 = v162;
            v176 = v186;
          }
          else
          {
            v175 = 2 * v164;
            v6 = v162;
            v176 = v186;
            if (v160 == 1)
            {
              a4 = v163;
              do
              {
                *v166 = vcvt_f16_f32(vmulq_f32(v186[4], vcvtq_f32_f16(*v166)));
                v166 = (float16x4_t *)((char *)v166 + v175);
                --v174;
              }
              while (v174);
            }
            else
            {
              v177 = 0;
              a4 = v163;
              do
              {
                v178 = v166;
                v179 = v160 - 1;
                do
                {
                  *v178 = vcvt_f16_f32(vmulq_f32(v186[4], vcvtq_f32_f16(*v178)));
                  v178 = (float16x4_t *)((char *)v178 + v173);
                  --v179;
                }
                while (v179);
                *v178 = vcvt_f16_f32(vmulq_f32(v186[4], vcvtq_f32_f16(*v178)));
                v166 = (float16x4_t *)((char *)v166 + v175);
                ++v177;
              }
              while (v177 != v174);
            }
          }
          if (v160 != 1)
          {
            do
            {
              *v166 = vcvt_f16_f32(vmulq_f32(v176[4], vcvtq_f32_f16(*v166)));
              v166 = (float16x4_t *)((char *)v166 + v173);
              --v172;
            }
            while (v172);
          }
          *v166 = vcvt_f16_f32(vmulq_f32(v176[4], vcvtq_f32_f16(*v166)));
        }
      }
      goto LABEL_218;
    }
  }
  v236[0] = 0;
  if (v255)
    goto LABEL_194;
LABEL_218:
  v180 = v236[0];
  v236[0] = 0;
  if (v180)
    (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  v181 = v253;
  a2 = v186;
  if (v253)
  {
    v182 = (unint64_t *)&v253->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
LABEL_5:
  sub_2231D3D90(v6, (uint64_t)v246);
  sub_2231D4288(v6, (uint64_t)v241);
  sub_2231D48A8(v6, (uint64_t)v251);
  sub_2231D494C(v6, (uint64_t)v236);
  sub_2231D4E60(v6, (uint64_t)v231);
  sub_2231D432C(v6, (uint64_t)v226);
  sub_2231CC34C((uint64_t)a4, (uint64_t)v221);
  sub_2231CC3F0((uint64_t)a4, (uint64_t)v216);
  sub_2231CD8A8((uint64_t)a4, (uint64_t)v211);
  sub_2231CDAE0((uint64_t)a4, (uint64_t)v206);
  sub_2231CDCA4((uint64_t)a4, (uint64_t)v201);
  sub_2231CC874((uint64_t)a4, (uint64_t)v196);
  v9 = *a1;
  v188 = *a2;
  v189 = a2[1];
  v191 = a2[2];
  v193 = a2[3];
  v10 = sub_2231D021C((uint64_t)a4);
  v11 = sub_2231D021C(v6);
  v12 = atomic_load((unsigned __int8 *)&qword_2540CC6B0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6B0))
  {
    qword_2540CC6A8 = 0;
    __cxa_guard_release(&qword_2540CC6B0);
  }
  if (HIDWORD(v10) && (_DWORD)v10)
  {
    v13 = 0;
    v14 = vadd_f32(v9, 0);
    __asm { FMOV            V2.2S, #1.0 }
    v19 = vmlaq_lane_f32(vmulq_n_f32(v188, v14.f32[0]), v189, v14, 1);
    v20 = vadd_f32(v9, _D2);
    v21 = (float32x2_t)vaddq_f32(v193, vaddq_f32(v191, v19)).u64[0];
    v22 = vsub_f32(v21, v9);
    v23 = vsub_f32(vadd_f32(*(float32x2_t *)v193.f32, vadd_f32(*(float32x2_t *)v191.f32, (float32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmulq_n_f32(v188, v20.f32[0]), v189, v20, 1))), v21);
    v24 = (float)(v11 - 1);
    v25 = (float)(HIDWORD(v11) - 1);
    LOWORD(v4) = -1025;
    HIWORD(v26) = 0x8000;
    __asm { FMOV            V0.4S, #1.0 }
    v185 = (float32x4_t)_Q0;
    v187 = v10;
    v184 = HIDWORD(v10);
    v190 = v24;
    do
    {
      v28 = 0;
      *(float *)_Q0.i32 = (float)v13;
      v194 = _Q0;
      do
      {
        while (1)
        {
          v29.f32[0] = (float)v28;
          _Q0.i64[1] = v194.i64[1];
          v29.i32[1] = v194.i32[0];
          _D11 = qword_2540CC6A8;
          *(float32x2_t *)_Q0.i8 = vmla_f32(v22, v23, v29);
          v195 = _Q0.i64[0];
          if (*(float *)_Q0.i32 >= 0.0
            && *(float *)_Q0.i32 <= v24
            && *(float *)&_Q0.i32[1] >= 0.0
            && *(float *)&_Q0.i32[1] <= v25)
          {
            break;
          }
          *(_WORD *)(v223 + 2 * (v224 * v28 + v225 * v13)) = LOWORD(v4);
          *(_WORD *)(v218 + 2 * (v219 * v28 + v220 * v13)) = 0;
          v33 = v214;
          v34 = v215;
          v35 = v213;
          if (!v213)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v84 = qword_255795648;
              for (i = qword_255795650; v84 != i; v84 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v84)(*(_QWORD *)(v84 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v37 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v35 + 2 * (v33 * v28 + v34 * v13)) = _D11;
          v38 = v199;
          v39 = v200;
          v40 = v198;
          if (!v198)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v86 = qword_255795648;
              for (j = qword_255795650; v86 != j; v86 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v86)(*(_QWORD *)(v86 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v42 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v40 + 2 * (v38 * v28 + v39 * v13)) = 0x8000800080008000;
          v43 = v209;
          v44 = v210;
          v45 = v208;
          if (!v208)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v46 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v88 = qword_255795648;
              for (k = qword_255795650; v88 != k; v88 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v88)(*(_QWORD *)(v88 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v47 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v45 + 2 * (v43 * v28 + v44 * v13)) = 0xFF00FF00FF00FF00;
          v48 = v204;
          v49 = v205;
          v50 = v203;
          if (!v203)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v51 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v90 = qword_255795648;
              for (m = qword_255795650; v90 != m; v90 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v90)(*(_QWORD *)(v90 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v52 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          *(_QWORD *)(v50 + 2 * (v48 * v28++ + v49 * v13)) = 0xFF00FF00FF00FF00;
          if (v28 == (_DWORD)v10)
            goto LABEL_9;
        }
        v53 = v4;
        v54 = v23;
        v55 = v22;
        v56 = v25;
        v57 = vadd_f32(*(float32x2_t *)_Q0.i8, (float32x2_t)0x3F0000003F000000);
        LOWORD(_D11) = *(_WORD *)(v248 + 2 * (v249 * v57.f32[0] + v250 * v57.f32[1]));
        LOWORD(v26) = *(_WORD *)(v243 + 2 * (v244 * v57.f32[0] + v245 * v57.f32[1]));
        v58 = sub_223CD41E8((float *)&v195, (uint64_t)v251);
        v60 = (float32x2_t)v195;
        v61 = v229;
        v62 = v230;
        v63 = v228;
        v64 = (float32x2_t)v195;
        if (!v228)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v64 = (float32x2_t)v195;
        }
        v65 = vadd_f32(v60, (float32x2_t)0x3F0000003F000000);
        v66 = *(_QWORD *)(v63 + 2 * (v61 * v65.f32[0] + v62 * v65.f32[1]));
        v67 = v239;
        v68 = v240;
        v69 = v238;
        v70 = v64;
        if (!v238)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v70 = (float32x2_t)v195;
        }
        v71 = vadd_f32(v64, (float32x2_t)0x3F0000003F000000);
        v72 = *(_QWORD *)(v69 + 2 * (v67 * v71.f32[0] + v68 * v71.f32[1]));
        v73 = v234;
        v74 = v235;
        v75 = v233;
        if (!v233
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        _Q0 = (int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v58), (uint64x2_t)xmmword_22464F4A0);
        _D1.i32[0] = v58;
        _D1.i32[1] = WORD1(v58);
        *(int16x4_t *)_Q2.i8 = vmovn_s32(vmovn_hight_s64(_D1, _Q0));
        __asm { FCVT            S0, H2 }
        _D1.i16[0] = _Q2.i16[1];
        __asm { FCVT            S1, H1 }
        v78 = *(float *)_D1.i32 > 0.0;
        if (*(float *)_Q0.i32 > 0.0)
          ++v78;
        _H0 = _Q2.i16[2];
        __asm { FCVT            S0, H0 }
        if (_S0 > 0.0)
          ++v78;
        v192 = _Q2;
        _H0 = _Q2.i16[3];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0)
          v83 = 0;
        else
          v83 = -1;
        if (v78 == v83)
        {
          _Q0.i64[0] = qword_2540CC6A8;
        }
        else
        {
          v92 = v186[4];
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v92, v185)))) & 1) == 0)
            goto LABEL_81;
          _Q0 = (int64x2_t)vmulq_f32(v92, vcvtq_f32_f16(*(float16x4_t *)_Q2.i8));
          *(float16x4_t *)_Q0.i8 = vcvt_f16_f32((float32x4_t)_Q0);
        }
        v192 = _Q0;
LABEL_81:
        _D0 = vadd_f32(v70, (float32x2_t)0x3F0000003F000000);
        v94 = *(_QWORD *)(v75 + 2 * (v73 * _D0.f32[0] + v74 * _D0.f32[1]));
        __asm { FCVT            S0, H11 }
        _NF = _D0.f32[0] < 0.0;
        v4 = v53;
        if (_D0.f32[0] >= 0.0)
          v96 = *(float *)&_D11;
        else
          v96 = v53;
        *(_WORD *)(v223 + 2 * (v224 * v28 + v225 * v13)) = LOWORD(v96);
        if (_NF)
          v97 = 0.0;
        else
          v97 = v26;
        *(_WORD *)(v218 + 2 * (v219 * v28 + v220 * v13)) = LOWORD(v97);
        v98 = v214;
        v99 = v215;
        v100 = v213;
        v25 = v56;
        v22 = v55;
        v23 = v54;
        v24 = v190;
        HIWORD(v26) = 0x8000;
        if (!v213
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        _Q0 = v192;
        *(_QWORD *)(v100 + 2 * (v98 * v28 + v99 * v13)) = v192.i64[0];
        v101 = v199;
        v102 = v200;
        v10 = v198;
        if (!v198
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v10 + 2 * (v101 * v28 + v102 * v13)) = v66;
        v103 = v209;
        v104 = v210;
        v105 = v208;
        LODWORD(v10) = v187;
        if (!v208
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v105 + 2 * (v103 * v28 + v104 * v13)) = v72;
        v106 = v204;
        v107 = v205;
        v108 = v203;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)(v108 + 2 * (v106 * v28++ + v107 * v13)) = v94;
      }
      while (v28 != v187);
LABEL_9:
      ++v13;
    }
    while (v13 != (_DWORD)v184);
  }
  v109 = (_OWORD *)sub_2231CC494(v6);
  *(_OWORD *)sub_2231CC494((uint64_t)a4) = *v109;
  v110 = (uint64_t **)sub_2231D0424(v6);
  v111 = (uint64_t *)sub_2231D0490((uint64_t)a4);
  if (v111 != (uint64_t *)v110)
    sub_2231F6E10(v111, *v110, v110[1], 0xCCCCCCCCCCCCCCCDLL * (v110[1] - *v110));
  v112 = sub_2231D04FC(v6);
  v113 = sub_2231D04FC((uint64_t)a4);
  sub_2231CFEAC(v113, v112);
  v195 = sub_2231D041C(v6);
  sub_2231CBAC0((uint64_t)a4, &v195);
  v114 = v197;
  if (v197)
  {
    v115 = (unint64_t *)&v197->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v202;
  if (v202)
  {
    v118 = (unint64_t *)&v202->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v207;
  if (v207)
  {
    v121 = (unint64_t *)&v207->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v212;
  if (v212)
  {
    v124 = (unint64_t *)&v212->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v217;
  if (v217)
  {
    v127 = (unint64_t *)&v217->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v222;
  if (v222)
  {
    v130 = (unint64_t *)&v222->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v227;
  if (v227)
  {
    v133 = (unint64_t *)&v227->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v232;
  if (v232)
  {
    v136 = (unint64_t *)&v232->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v237;
  if (v237)
  {
    v139 = (unint64_t *)&v237->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v253;
  if (v253)
  {
    v142 = (unint64_t *)&v253->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v242;
  if (v242)
  {
    v145 = (unint64_t *)&v242->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v247;
  if (v247)
  {
    v148 = (unint64_t *)&v247->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
}

void sub_2237F6C9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2D8];
  STACK[0x2D8] = 0;
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_2231CD9B0(v1 - 232);
    _Unwind_Resume(a1);
  }
  sub_2231CD9B0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_2237F6CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  sub_2231CD9B0((uint64_t)&a26);
  sub_2231CDC3C((uint64_t)&a36);
  sub_2231CDC3C((uint64_t)&a46);
  sub_2231CD9B0((uint64_t)&a56);
  sub_2231BD974((uint64_t)&a66);
  sub_2231BD974((uint64_t)&STACK[0x200]);
  sub_2231D4840((uint64_t)&STACK[0x238]);
  sub_22319F500((uint64_t)&STACK[0x288]);
  sub_22319F500((uint64_t)&STACK[0x2D8]);
  sub_2231D4840(v66 - 232);
  sub_22319EF60((uint64_t)&STACK[0x328]);
  sub_22319EF60((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

uint64_t sub_2237F6E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  char *v62;
  uint64_t v64;
  _QWORD v65[70];

  v3 = a3;
  v5 = (*(_DWORD *)(a2 + 92) * *(_DWORD *)(a2 + 88));
  v6 = *(_QWORD *)(a3 + 88);
  v7 = *(char **)(a1 + 672);
  v8 = *(_BYTE **)(a1 + 664);
  v9 = v7 - v8;
  v10 = (v7 - v8) >> 3;
  v11 = v5 - v10;
  if (v5 == v10)
  {
    if (v9 >= 1)
      memset_pattern16(*(void **)(a1 + 664), &unk_22464FB20, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
    goto LABEL_51;
  }
  if (v5 > v10)
  {
    v12 = *(_QWORD *)(a1 + 680);
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      v21 = &v7[8 * v11];
      memset_pattern16(*(void **)(a1 + 672), &unk_22464FB20, ((8 * v5 - v9 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_QWORD *)(a1 + 672) = v21;
      goto LABEL_26;
    }
    v61 = *(_QWORD *)(a3 + 88);
    v13 = v12 - (_QWORD)v8;
    v14 = (v12 - (uint64_t)v8) >> 2;
    if (v14 <= v5)
      v14 = (*(_DWORD *)(a2 + 92) * *(_DWORD *)(a2 + 88));
    v15 = v13 >= 0x7FFFFFFFFFFFFFF8;
    v16 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v14;
    if (v16 >> 61)
      goto LABEL_63;
    v17 = 8 * v16;
    v18 = (char *)operator new(8 * v16);
    v19 = &v18[8 * v10];
    memset_pattern16(v19, &unk_22464FB20, ((8 * v5 - v9 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v7 == v8)
    {
      v6 = v61;
      goto LABEL_24;
    }
    v20 = v7 - v8 - 8;
    if (v20 >= 0x58)
    {
      v6 = v61;
      if ((unint64_t)(v8 - v18) >= 0x20)
      {
        v22 = (v20 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v7[-v23];
        v19 -= v23;
        v25 = &v18[8 * v10 - 16];
        v26 = v7 - 16;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
          *(_OWORD *)v25 = v28;
          v25 -= 32;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v7 = v24;
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
      }
    }
    else
    {
      v6 = v61;
    }
    do
    {
      v29 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v19 - 1) = v29;
      v19 -= 8;
    }
    while (v7 != v8);
LABEL_23:
    v7 = *(char **)(a1 + 664);
LABEL_24:
    *(_QWORD *)(a1 + 664) = v19;
    *(_QWORD *)(a1 + 672) = &v18[8 * v5];
    *(_QWORD *)(a1 + 680) = &v18[v17];
    v3 = a3;
    if (v7)
      operator delete(v7);
    goto LABEL_26;
  }
  if (v5 < v10)
    *(_QWORD *)(a1 + 672) = &v8[8 * v5];
LABEL_26:
  v30 = *(_QWORD *)(a1 + 688);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 696) - v30) >> 2);
  if (v5 <= v31)
  {
    if (v5 < v31)
      *(_QWORD *)(a1 + 696) = v30 + 12 * v5;
  }
  else
  {
    sub_2231DC564((char **)(a1 + 688), v5 - v31);
  }
  v32 = *(char **)(a1 + 720);
  v33 = *(_BYTE **)(a1 + 712);
  v34 = (v32 - v33) >> 3;
  v35 = v5 - v34;
  if (v5 > v34)
  {
    v36 = *(_QWORD *)(a1 + 728);
    if (v35 <= (v36 - (uint64_t)v32) >> 3)
    {
      bzero(*(void **)(a1 + 720), 8 * v35);
      *(_QWORD *)(a1 + 720) = &v32[8 * v35];
      goto LABEL_51;
    }
    v64 = v3;
    v37 = v36 - (_QWORD)v33;
    v38 = v37 >> 2;
    if (v37 >> 2 <= v5)
      v38 = v5;
    v15 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8;
    v39 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v15)
      v39 = v38;
    if (!(v39 >> 61))
    {
      v40 = 8 * v39;
      v41 = (char *)operator new(8 * v39);
      v42 = &v41[8 * v34];
      v62 = &v41[v40];
      bzero(v42, 8 * v35);
      v43 = &v42[8 * v35];
      if (v32 == v33)
      {
        v3 = v64;
        *(_QWORD *)(a1 + 712) = v42;
        *(_QWORD *)(a1 + 720) = v43;
        *(_QWORD *)(a1 + 728) = v62;
        if (!v32)
          goto LABEL_51;
      }
      else
      {
        v44 = v32 - v33 - 8;
        v3 = v64;
        if (v44 < 0x58)
          goto LABEL_66;
        if ((unint64_t)(v33 - v41) < 0x20)
          goto LABEL_66;
        v45 = (v44 >> 3) + 1;
        v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        v47 = &v32[-v46];
        v42 -= v46;
        v48 = &v41[8 * v34 - 16];
        v49 = v32 - 16;
        v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *(_OWORD *)v49;
          *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
          *(_OWORD *)v48 = v51;
          v48 -= 32;
          v49 -= 32;
          v50 -= 4;
        }
        while (v50);
        v32 = v47;
        if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          do
          {
            v52 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v42 - 1) = v52;
            v42 -= 8;
          }
          while (v32 != v33);
        }
        v32 = *(char **)(a1 + 712);
        *(_QWORD *)(a1 + 712) = v42;
        *(_QWORD *)(a1 + 720) = v43;
        *(_QWORD *)(a1 + 728) = v62;
        if (!v32)
          goto LABEL_51;
      }
      operator delete(v32);
      goto LABEL_51;
    }
LABEL_63:
    sub_223174E94();
  }
  if (v5 < v34)
    *(_QWORD *)(a1 + 720) = &v33[8 * v5];
LABEL_51:
  if (sub_2231D021C(a1) == v6)
  {
    v53 = *(void **)(a1 + 640);
    v54 = *(_QWORD *)(a1 + 648) - (_QWORD)v53;
    if (v54 >= 1)
      memset(v53, 255, 4 * (((unint64_t)v54 >> 2) - ((unint64_t)v54 > 3)) + 4);
  }
  else
  {
    sub_2231CBABC(v65, v3, 63);
    sub_2231D1108((_QWORD *)a1, (uint64_t)v65);
    sub_2231CE350(v65);
    v55 = (HIDWORD(v6) * v6);
    v56 = *(_QWORD *)(a1 + 640);
    v57 = (*(_QWORD *)(a1 + 648) - v56) >> 2;
    if (v55 <= v57)
    {
      if (v55 < v57)
        *(_QWORD *)(a1 + 648) = v56 + 4 * v55;
    }
    else
    {
      sub_2237F84A4(a1 + 640, v55 - v57, flt_22464F4B4);
    }
    v58 = *(_QWORD *)(a1 + 736);
    v59 = (*(_QWORD *)(a1 + 744) - v58) >> 3;
    if (v55 <= v59)
    {
      if (v55 < v59)
        *(_QWORD *)(a1 + 744) = v58 + 8 * v55;
    }
    else
    {
      sub_223341C68((uint64_t *)(a1 + 736), v55 - v59);
    }
  }
  return sub_2231D321C(a1, 0);
}

void sub_2237F7300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231CE350((uint64_t *)va);
  _Unwind_Resume(a1);
}

float32x2_t *sub_2237F7314(float32x2_t *result, float32x4_t *a2, float32x2_t *a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8)
{
  int v8;
  int v9;
  __int32 v10;
  __int32 v11;
  int v13;
  unsigned int v14;
  unsigned int v15;
  float32x2_t v16;
  float32x2_t v18;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  float32x2_t v30;

  v8 = *(_DWORD *)(a4 + 32);
  v9 = *(_DWORD *)(a4 + 36);
  v10 = a2[34].i32[3];
  v11 = a2[35].i32[0];
  if (v9)
    _ZF = v8 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = 0;
      do
      {
        v16.f32[0] = (float)v15;
        v16.f32[1] = (float)v14;
        _H4 = *(_WORD *)(*(_QWORD *)(a4 + 24) + 2 * (*(_DWORD *)(a4 + 40) * v15 + *(_DWORD *)(a4 + 44) * v14));
        v18 = vadd_f32(result[95], v16);
        *(float32x2_t *)a8.f32 = vadd_f32(vmul_f32(v18, a3[4]), a3[5]);
        __asm { FCVT            S4, H4 }
        a8.i32[2] = 1.0;
        v23 = *(_QWORD *)&result[86] + 12 * (v13 + v15);
        v24 = vmulq_n_f32(a8, _S4);
        *(_DWORD *)(v23 + 8) = v24.i32[2];
        *(_QWORD *)v23 = v24.i64[0];
        v25 = vmlaq_n_f32(vaddq_f32(a2[6], vmlaq_lane_f32(vmulq_n_f32(a2[4], v18.f32[0]), a2[5], v18, 1)), a2[7], 1.0 / _S4);
        a8 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2);
        *(_QWORD *)(*(_QWORD *)&result[89] + 8 * (v13 + v15++)) = vdivq_f32(v25, a8).u64[0];
      }
      while (v8 != v15);
      ++v14;
      v13 += v15;
    }
    while (v14 != v9);
  }
  if (v11)
    v26 = v10 == 0;
  else
    v26 = 1;
  if (!v26)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = 0;
      do
      {
        v30.f32[0] = (float)v29;
        v30.f32[1] = (float)v28;
        *(float32x2_t *)(*(_QWORD *)&result[92] + 8 * (v27 + v29++)) = vadd_f32(a3[17], vmul_f32(a3[16], vadd_f32(result[95], v30)));
      }
      while (v10 != v29);
      ++v28;
      v27 += v29;
    }
    while (v28 != v11);
  }
  return result;
}

void sub_2237F7450(_QWORD *a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v7;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v31;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  float v41;
  float v42;
  int8x16_t v43;
  __int32 v44;
  unsigned int v45;
  uint64_t v46;
  int32x2_t *v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float v57;
  int8x16_t v58;
  float v59;
  float v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x2_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  _WORD *v80;
  float v81;
  float v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  float32x2_t v88;
  float32x4_t v90;
  unsigned int v91;
  BOOL v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  float v99;
  int v100;
  float v101;
  float v102;
  float v104;
  float v105;
  unsigned int v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  uint64_t v110;
  int8x16_t v111;
  float32x2_t v112;
  float v113;
  float v114;
  float v116;
  float v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  float32x4_t *v139;
  float32x4_t v140;
  float32x2_t v141;
  int v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  float32x4_t *v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x4_t v153;
  int v154;
  float32x2_t v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  int v159;
  char v160[16];
  std::__shared_weak_count *v161;
  uint64_t v162;
  int v163;
  int v164;
  char v165[16];
  std::__shared_weak_count *v166;
  uint64_t v167;
  int v168;
  int v169;
  char v170[16];
  std::__shared_weak_count *v171;
  uint64_t v172;
  int v173;
  int v174;
  char v175[16];
  std::__shared_weak_count *v176;
  uint64_t v177;
  int v178;
  int v179;
  char v180[16];
  std::__shared_weak_count *v181;
  uint64_t v182;
  int v183;
  int v184;

  v7 = sub_2231D021C(a2);
  sub_2231D3D90(a2, (uint64_t)v170);
  sub_2231D4288(a2, (uint64_t)v165);
  sub_2231D432C(a2, (uint64_t)v160);
  v14 = HIDWORD(v7) - 1;
  if (HIDWORD(v7) != 1)
  {
    v15 = (v7 - 1);
    if ((_DWORD)v7 != 1)
    {
      v16 = 0;
      v150 = a3 + 29;
      v17 = (float)(a3[34].i32[3] - 1);
      v18 = (float)(a3[35].i32[0] - 1);
      v13.i32[0] = 0;
      v19 = 1.0;
      v139 = a3;
      v143 = v7;
      do
      {
        v20 = 0;
        v21 = v173;
        v22 = v172 + 2 * (v174 * v16);
        v148 = v168;
        v147 = v167 + 2 * (v169 * v16);
        v149 = v16 + 1;
        v158 = v172 + 2 * (v174 * (v16 + 1));
        v159 = v163;
        v23 = v162 + 2 * (v164 * v16);
        v157 = v16;
        v146 = v16 * v7;
        do
        {
          v24 = (v21 * v20);
          _H0 = *(_WORD *)(v22 + 2 * v24);
          __asm { FCVT            S1, H0 }
          if (_S1 > 0.0 && _S1 > -65504.0)
          {
            v31 = v23 + 2 * (v20 * v159);
            _Q0.i16[0] = *(_WORD *)(v31 + 4);
            __asm { FCVT            S2, H0 }
            _Q0.i32[0] = *(_DWORD *)v31;
            _Q0 = (int8x16_t)vcvtq_f32_f16(*(float16x4_t *)_Q0.i8);
            v33 = ((_Q0.i32[0] & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F || (_Q0.i32[0] & 0x7FFFFFFF) == 0;
            v34 = ((_Q0.i32[1] & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F || (_Q0.i32[1] & 0x7FFFFFFF) == 0;
            v35 = ((_S2 & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F || (_S2 & 0x7FFFFFFF) == 0;
            v36 = v34 && v35;
            if (v33)
              v33 = v36;
            if (v33)
            {
              _H3 = *(_WORD *)(v22 + 2 * (v21 + v21 * v20));
              __asm { FCVT            S3, H3 }
              if (_S3 > 0.0)
              {
                _H4 = *(_WORD *)(v158 + 2 * v24);
                __asm { FCVT            S4, H4 }
                if (_S4 > 0.0)
                {
                  v41 = vabds_f32(_S1, _S4);
                  v42 = vabds_f32(_S1, _S3);
                  if (v41 >= v42)
                    v42 = v41;
                  if (v42 <= (float)(a3[35].f32[2] * _S1))
                  {
                    v43 = _Q0;
                    v43.i32[2] = _S2;
                    v44 = v150[5].i32[1];
                    v45 = v20 + v157 * v44;
                    v46 = a1[86];
                    v47 = (int32x2_t *)(v46 + 12 * v45);
                    v9.i32[0] = v47[1].i32[0];
                    *(int32x2_t *)v10.f32 = *v47;
                    v48 = vmulq_n_f32(a3[8], COERCE_FLOAT(*v47));
                    v49 = (float32x2_t)vdupq_lane_s32(*v47, 1).u64[0];
                    v50 = v10;
                    v50.i32[2] = v9.i32[0];
                    v51 = v45 + 1;
                    v52 = v46 + 12 * v51;
                    v11.i64[0] = *(_QWORD *)v52;
                    v11.i32[2] = *(_DWORD *)(v52 + 8);
                    v53 = v45 + v44;
                    v54 = v46 + 12 * v53;
                    v12.i64[0] = *(_QWORD *)v54;
                    v12.i32[2] = *(_DWORD *)(v54 + 8);
                    v11 = (int8x16_t)vsubq_f32((float32x4_t)v11, v50);
                    v55 = vmlaq_lane_f32(v48, a3[9], *(float32x2_t *)v10.f32, 1);
                    v56 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
                    v57 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1), *(float32x2_t *)v11.i8, 1), v56, v56).f32[0];
                    v58 = (int8x16_t)vsubq_f32(v12, v50);
                    v12 = (float32x4_t)vextq_s8(v58, v58, 8uLL);
                    v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1), *(float32x2_t *)v58.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32).f32[0];
                    v60 = v57 >= v59 ? v57 : v59;
                    v10 = a3[10];
                    v62 = vmlaq_n_f32(v55, v10, *(float *)v9.i32);
                    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v43.i8), v49, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v9.i8);
                    v61 = (int8x16_t)vaddq_f32(a3[11], v62);
                    v9 = (int8x16_t)vnegq_f32((float32x4_t)v43);
                    _Q0 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v13, v10), 0), v43, v9);
                    v9.i32[0] = v150->i32[2];
                    v62.i32[0] = v150[1].i32[1];
                    v49.i32[0] = v150[2].i32[0];
                    _D16 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v150->f32, *(float *)_Q0.i32), *(float32x2_t *)((char *)&v150->u64[1] + 4), *(float32x2_t *)_Q0.i8, 1), *(float32x2_t *)&v150[1].u32[2], (float32x4_t)_Q0, 2);
                    _D5 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)_Q0.i8), *(float32x2_t *)v62.f32, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL), v49);
                    _Q0.i64[0] = vextq_s8(v61, v61, 8uLL).u64[0];
                    v65 = vmla_f32(vmla_lane_f32(vmul_f32(_D16, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), _D16, 1), *(float32x2_t *)_Q0.i8, _D5);
                    if (v65.f32[0] < 0.0)
                    {
                      v66 = a1[89];
                      v67 = *(float32x2_t *)(v66 + 8 * v45);
                      v68 = vsub_f32(*(float32x2_t *)(v66 + 8 * v51), v67);
                      *(float32x2_t *)_Q0.i8 = vsub_f32(*(float32x2_t *)(v66 + 8 * v53), v67);
                      *(int32x2_t *)v9.i8 = vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1);
                      v69 = vmla_lane_f32(vmul_f32(v68, v68), (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1), v68, 1).f32[0];
                      v70 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), *(float32x2_t *)v9.i8, *(float32x2_t *)_Q0.i8, 1).f32[0];
                      if (v69 >= v70)
                        v71 = v69;
                      else
                        v71 = v70;
                      v72 = sqrtf(v71 + v71);
                      v73 = a3[35].f32[1];
                      if (v73 >= v72)
                        v73 = v72;
                      v74 = v67.f32[0];
                      if (v67.f32[0] >= 0.0 && v67.f32[0] <= v17)
                      {
                        v75 = v67.f32[1];
                        if (v67.f32[1] >= 0.0 && v67.f32[1] <= v18)
                        {
                          v141 = v67;
                          v151 = v65;
                          v152 = _D5;
                          v153 = (float32x4_t)v61;
                          _H13 = *(_WORD *)(v147 + 2 * (v148 * v20));
                          _S3 = _D16.i32[1];
                          v62.i64[0] = a3[4].i64[1];
                          v62.i32[1] = a3[5].i32[2];
                          v62.i32[2] = a3[6].i32[2];
                          v140 = v62;
                          v155 = _D16;
                          __asm
                          {
                            FCVT            H4, S16
                            FCVT            H3, S3
                            FCVT            H5, S5
                          }
                          v80 = (_WORD *)(a1[83] + 8 * (v146 + v20));
                          *v80 = _H4;
                          v80[1] = _S3;
                          v80[2] = _H5;
                          v80[3] = 15360;
                          v81 = v73 * 0.5;
                          if ((float)(*(float *)(a4 + 236) * 0.5) >= (float)(v73 * 0.5))
                            v82 = v73 * 0.5;
                          else
                            v82 = *(float *)(a4 + 236) * 0.5;
                          v83 = (int)fmaxf(v82, v19);
                          v84 = (int)v74;
                          v85 = *(_DWORD *)(a4 + 192);
                          v144 = (int)v74;
                          v145 = (int)v75;
                          v86 = *(_DWORD *)(a4 + 196) - 1;
                          if (v86 >= v83 + (int)v75)
                            v86 = v83 + (int)v75;
                          v156 = v86;
                          v154 = *(_DWORD *)(a4 + 192);
                          if (v85 - 1 >= v83 + v84)
                            v87 = v83 + v84;
                          else
                            v87 = v85 - 1;
                          v88 = (float32x2_t)a1[95];
                          sub_2231CC34C((uint64_t)a1, (uint64_t)v180);
                          sub_2231CC3F0((uint64_t)a1, (uint64_t)v175);
                          v91 = (v145 - v83) & ~((v145 - v83) >> 31);
                          v92 = v91 > v156 || ((v144 - v83) & ~((v144 - v83) >> 31)) > v87;
                          v14 = HIDWORD(v7) - 1;
                          if (!v92)
                          {
                            __asm { FCVT            S1, H13 }
                            *(int32x2_t *)_Q0.i8 = vdup_lane_s32((int32x2_t)v155, 1);
                            v9 = (int8x16_t)vmulq_f32(v140, v140);
                            v99 = vmla_f32(vmla_lane_f32(vmul_f32(_D1, *(float32x2_t *)v9.i8), _D1, *(float32x2_t *)v9.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), _D1).f32[0];
                            v100 = v91 * v154;
                            *(float32x2_t *)v9.i8 = vsub_f32(v88, v141);
                            v101 = (float)((float)(v99 * -0.09) + 0.1) * (float)((float)(v99 * -0.09) + 0.1);
                            if (v101 <= 0.01)
                              v102 = (float)((float)(v99 * -0.09) + 0.1) * (float)((float)(v99 * -0.09) + 0.1);
                            else
                              v102 = 0.01;
                            if (v101 >= 0.0001 && v99 < 1.0)
                              v104 = v102;
                            else
                              v104 = 0.0001;
                            if (v99 > 0.0)
                              v105 = v104;
                            else
                              v105 = 0.01;
                            do
                            {
                              v106 = (v144 - v83) & ~((v144 - v83) >> 31);
                              do
                              {
                                v107.f32[0] = (float)v106;
                                v107.f32[1] = (float)v91;
                                v108 = vadd_f32(*(float32x2_t *)v9.i8, v107);
                                v109 = vmla_lane_f32(vmul_f32(v108, v108), (float32x2_t)vdup_lane_s32((int32x2_t)v108, 1), v108, 1).f32[0];
                                if (v109 <= (float)((float)(v81 * v81) + 0.001))
                                {
                                  v110 = v100 + v106;
                                  v90.i64[0] = *(_QWORD *)(a1[92] + 8 * v110);
                                  v90.i32[2] = 1.0;
                                  v90 = vmulq_n_f32(v90, vdiv_f32(v151, vadd_f32(v152, vmla_lane_f32(vmul_f32(v155, *(float32x2_t *)v90.f32), *(float32x2_t *)_Q0.i8, *(float32x2_t *)v90.f32, 1))).f32[0]);
                                  v111 = (int8x16_t)vsubq_f32(v90, v153);
                                  v112 = (float32x2_t)vextq_s8(v111, v111, 8uLL).u64[0];
                                  v113 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1), *(float32x2_t *)v111.i8, 1), v112, v112).f32[0];
                                  if (v113 > v60)
                                    v90 = vmlaq_n_f32(v153, (float32x4_t)v111, sqrtf(v60 / v113));
                                  v114 = (float)(sqrtf(v109) + 1.0) * v105;
                                  _H6 = 15360;
                                  if (v114 > 0.0001)
                                  {
                                    _H6 = 0;
                                    if (v114 < 0.01)
                                    {
                                      v116 = (float)((float)(sqrtf(v114) + -0.01) / -0.09) + 1.0;
                                      if (v116 <= 1.0)
                                        v117 = v116;
                                      else
                                        v117 = 1.0;
                                      if (v116 >= 0.0)
                                        _S6 = v117;
                                      else
                                        _S6 = 0.0;
                                      __asm { FCVT            H6, S6 }
                                    }
                                  }
                                  v119 = v183 * v106 + v184 * v91;
                                  v120 = v178 * v106 + v179 * v91;
                                  v121 = v177;
                                  _S5 = v90.i32[2];
                                  __asm { FCVT            H5, S5 }
                                  _H7 = *(_WORD *)(v182 + 2 * v119);
                                  __asm { FCVT            S7, H7 }
                                  if (_S7 <= -65504.0)
                                    goto LABEL_77;
                                  __asm { FCVT            S16, H5 }
                                  if (_S7 > _S16)
                                    goto LABEL_77;
                                  if (_S7 == _S16)
                                  {
                                    _H7 = *(_WORD *)(v177 + 2 * v120);
                                    __asm
                                    {
                                      FCVT            S7, H7
                                      FCVT            S16, H6
                                    }
                                    if (_S7 < _S16)
                                    {
LABEL_77:
                                      *(_WORD *)(v182 + 2 * v119) = _H5;
                                      *(_WORD *)(v121 + 2 * v120) = _H6;
                                      *(_DWORD *)(a1[80] + 4 * v110) = v146 + v20;
                                    }
                                  }
                                }
                                ++v106;
                              }
                              while (v106 <= v87);
                              v100 += v154;
                              ++v91;
                            }
                            while (v91 <= v156);
                          }
                          v93 = v176;
                          a3 = v139;
                          LODWORD(v7) = v143;
                          v13.i32[0] = 0;
                          v19 = 1.0;
                          if (!v176)
                            goto LABEL_58;
                          p_shared_owners = (unint64_t *)&v176->__shared_owners_;
                          do
                            v95 = __ldaxr(p_shared_owners);
                          while (__stlxr(v95 - 1, p_shared_owners));
                          if (!v95)
                          {
                            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                            std::__shared_weak_count::__release_weak(v93);
                            v14 = HIDWORD(v7) - 1;
                            LODWORD(v7) = v143;
                            v19 = 1.0;
                            v13.i32[0] = 0;
                            v96 = v181;
                            if (!v181)
                              goto LABEL_6;
                          }
                          else
                          {
LABEL_58:
                            v96 = v181;
                            if (!v181)
                              goto LABEL_6;
                          }
                          v97 = (unint64_t *)&v96->__shared_owners_;
                          do
                            v98 = __ldaxr(v97);
                          while (__stlxr(v98 - 1, v97));
                          if (!v98)
                          {
                            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                            std::__shared_weak_count::__release_weak(v96);
                            v14 = HIDWORD(v7) - 1;
                            v19 = 1.0;
                            v13.i32[0] = 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_6:
          ++v20;
        }
        while (v20 != v15);
        v16 = v149;
      }
      while (v149 != v14);
    }
  }
  v130 = v161;
  if (v161)
  {
    v131 = (unint64_t *)&v161->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v166;
  if (v166)
  {
    v134 = (unint64_t *)&v166->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v171;
  if (v171)
  {
    v137 = (unint64_t *)&v171->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
}

void sub_2237F7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_22319EF60((uint64_t)&a46);
  sub_22319EF60((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_2237F7D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_22319EF60((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_2237F7D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_2231BD974(v53 - 208);
  sub_2231D4840((uint64_t)&a36);
  sub_22319EF60((uint64_t)&a46);
  sub_22319EF60((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t sub_2237F7D68(uint64_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  int v61;
  uint64_t result;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  int32x2_t v69;
  uint64_t v70;
  float32x2_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  BOOL v83;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v18 = *((unsigned int *)a1 + 2);
  v87 = *((unsigned int *)a1 + 3);
  v19 = *(_QWORD *)(a4 + 8);
  if (!v19)
    goto LABEL_36;
  v20 = *(std::__shared_weak_count **)(a4 + 16);
  if (!v20)
    goto LABEL_109;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v19 = *(_QWORD *)(a4 + 8);
  v24 = *(std::__shared_weak_count **)(a4 + 16);
  if (!v24)
    goto LABEL_109;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (v27)
  {
LABEL_109:
    if (*(_BYTE *)(a4 + 49))
      goto LABEL_14;
LABEL_36:
    v88 = 0;
    v28 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v28 != 1)
      goto LABEL_15;
LABEL_37:
    v43 = *(unsigned int *)(a4 + 44);
    v44 = *(unsigned int *)(a4 + 32);
    if ((_DWORD)v43 == (_DWORD)v44)
    {
      v45 = *(_DWORD *)(a4 + 36);
      v46 = *(void **)(a4 + 24);
      if (*(_BYTE *)(a4 + 48) && v46)
      {
        v47 = *(_QWORD *)(a4 + 8);
        v48 = *(std::__shared_weak_count **)(a4 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          do
            v51 = __ldaxr(v49);
          while (__stlxr(v51 - 1, v49));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v47 + 88))(v47, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v46 = *(void **)(a4 + 24);
      }
      v52 = (v45 * v43);
      if (!(_DWORD)v52 || v46)
      {
        if (!(_DWORD)v52)
          goto LABEL_75;
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_67;
      }
      memset_pattern16(v46, &unk_2245F6D00, 4 * v52);
      goto LABEL_75;
    }
    if (!(_DWORD)v44)
      goto LABEL_75;
    v53 = *(_DWORD *)(a4 + 36);
    if (!v53)
      goto LABEL_75;
    v54 = *(char **)(a4 + 24);
    if (*(_BYTE *)(a4 + 48) && v54)
    {
      v55 = *(_QWORD *)(a4 + 8);
      v56 = *(std::__shared_weak_count **)(a4 + 16);
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v55 + 88))(v55, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v54 = *(char **)(a4 + 24);
    }
    v60 = 4 * v44;
    v61 = v53 - 1;
    if (v53 == 1)
    {
LABEL_70:
      if (v54
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        memset_pattern16(v54, &unk_2245F6D00, v60);
        goto LABEL_75;
      }
    }
    else
    {
      while (v54
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        memset_pattern16(v54, &unk_2245F6D00, v60);
        v54 += 4 * v43;
        if (!--v61)
          goto LABEL_70;
      }
    }
LABEL_67:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!*(_BYTE *)(a4 + 49))
    goto LABEL_36;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(&v88, v19, 1);
  v28 = *(unsigned int *)(a4 + 40);
  if ((_DWORD)v28 == 1)
    goto LABEL_37;
LABEL_15:
  v29 = *(_DWORD *)(a4 + 32);
  if (v29)
  {
    v30 = *(_DWORD *)(a4 + 36);
    if (v30)
    {
      v31 = *(unsigned int *)(a4 + 44);
      v32 = *(_DWORD **)(a4 + 24);
      if (*(_BYTE *)(a4 + 48) && v32)
      {
        v33 = *(_QWORD *)(a4 + 8);
        v34 = *(std::__shared_weak_count **)(a4 + 16);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          do
            v37 = __ldaxr(v35);
          while (__stlxr(v37 - 1, v35));
          if (!v37)
          {
            v86 = v33;
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
            v33 = v86;
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v33 + 88))(v33, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v32 = *(_DWORD **)(a4 + 24);
      }
      v38 = v29 - 1;
      v39 = v30 - 1;
      if (v30 != 1)
      {
        if (v29 == 1)
        {
          do
          {
            *v32 = -947920896;
            v32 += v31;
            --v39;
          }
          while (v39);
LABEL_74:
          *v32 = -947920896;
          goto LABEL_75;
        }
        v40 = 0;
        do
        {
          v41 = v32;
          v42 = v29 - 1;
          do
          {
            *v41 = -947920896;
            v41 += v28;
            --v42;
          }
          while (v42);
          *v41 = -947920896;
          v32 += v31;
          ++v40;
        }
        while (v40 != v39);
      }
      if (v29 != 1)
      {
        do
        {
          *v32 = -947920896;
          v32 += v28;
          --v38;
        }
        while (v38);
      }
      goto LABEL_74;
    }
  }
LABEL_75:
  result = v88;
  v88 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if ((_DWORD)v87 && (_DWORD)v18)
  {
    v63 = 0;
    v64 = *((_DWORD *)a1 + 5);
    v65 = *a1;
    do
    {
      v66 = 0;
      v67 = 0;
      v68 = *((_DWORD *)a1 + 4);
      LODWORD(a10) = a2[11].i32[0];
      LODWORD(a11) = a2[11].i32[1];
      a10 = (double)*(unint64_t *)&a10 + -0.5;
      *(float *)&a10 = a10;
      a11 = (double)*(unint64_t *)&a11 + -0.5;
      *(float *)&a11 = a11;
      v69 = *(int32x2_t *)(a4 + 40);
      v70 = *(_QWORD *)(a4 + 24);
      do
      {
        _H16 = *(_WORD *)(v65 + 2 * (v64 * v63) + 2 * v66);
        __asm { FCVT            S16, H16 }
        if (_S16 > 0.0 && _S16 > -65504.0)
        {
          v11.f32[0] = (float)(int)v67;
          v11.f32[1] = (float)(int)v63;
          v77 = a2[4];
          *(float32x2_t *)v11.f32 = vadd_f32(vmul_f32(v77, *(float32x2_t *)v11.f32), a2[5]);
          v11.i32[2] = 1.0;
          v78 = (int8x16_t)vmulq_n_f32(v11, _S16);
          v77.i32[0] = a3[1].i32[0];
          v12.i32[0] = a3[3].i32[0];
          v13.i32[0] = a3[5].i32[0];
          *(float32x2_t *)v79.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v78.i32), a3[2], *(float32x2_t *)v78.i8, 1), a3[4], (float32x4_t)v78, 2);
          v80 = vmla_lane_f32(vmul_f32(v77, *(float32x2_t *)v78.i8), v12, *(float32x2_t *)v78.i8, 1);
          v81 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
          *(float32x2_t *)&v79.u32[2] = vmla_f32(v80, *(float32x2_t *)v81.f32, v13);
          *(float32x2_t *)v81.f32 = a3[6];
          result = (uint64_t)&a3[7];
          v81.i32[2] = a3[7].i32[0];
          v11 = vaddq_f32(v81, v79);
          if (v11.f32[2] > 0.000001)
          {
            *(float32x2_t *)v11.f32 = vadd_f32(a2[3], vdiv_f32(vmul_f32(*(float32x2_t *)v11.f32, a2[2]), (float32x2_t)vdup_laneq_s32((int32x4_t)v11, 2)));
            _NF = v11.f32[0] >= -0.5 && v11.f32[0] < *(float *)&a10;
            v83 = !_NF || v11.f32[1] < -0.5;
            if (!v83 && v11.f32[1] < *(float *)&a11)
            {
              *(int32x2_t *)v11.f32 = vmul_s32(v69, vcvt_s32_f32(vrndm_f32(vadd_f32(*(float32x2_t *)v11.f32, (float32x2_t)0x3F0000003F000000))));
              result = vadd_s32(vdup_lane_s32(*(int32x2_t *)v11.f32, 1), *(int32x2_t *)v11.f32).u32[0];
              v11.i32[0] = *(_DWORD *)(v70 + 4 * result);
              if (v11.f32[2] < v11.f32[0] || (v11.f32[0] > 0.0 ? (v85 = v11.f32[0] <= -65504.0) : (v85 = 1), v85))
                *(_DWORD *)(v70 + 4 * result) = v11.i32[2];
            }
          }
        }
        ++v67;
        v66 += v68;
      }
      while (v18 != v67);
      ++v63;
    }
    while (v63 != v87);
  }
  return result;
}

void sub_2237F83AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237F83D4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2237F843C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2237F84A4(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_22316E078();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_223174E94();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_2237F8704(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2236B4CF4(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2237F87F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237F880C(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24EC5A470;
  sub_22449A388(a1, a2, (uint64_t)&v15);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC5A2D0;
  *(_OWORD *)(v4 + 8) = v16;
  *(_OWORD *)(v4 + 24) = v17;
  *(_OWORD *)(v4 + 40) = v18;
  *(_QWORD *)(v4 + 56) = v19;
  *(_OWORD *)(v4 + 64) = v20;
  *(_QWORD *)(v4 + 80) = v21;
  *(_QWORD *)(v4 + 104) = v23;
  *(_OWORD *)(v4 + 88) = v22;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A4A8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  *a3 = v4;
  a3[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a3[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v15, v4, 24);
  v9 = v15[1];
  v8 = v15[2];
  *(_OWORD *)(a3 + 3) = *v15;
  *(_OWORD *)(a3 + 5) = v9;
  *(_OWORD *)(a3 + 7) = v8;
  v15 = 0;
  MEMORY[0x227684CE8]();
  a3[9] = a3[3];
  a3[14] = a3[8];
  v10 = *((_OWORD *)a3 + 3);
  *((_OWORD *)a3 + 5) = *((_OWORD *)a3 + 2);
  *((_OWORD *)a3 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 104))(*a3);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a3 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2237F8A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_2237F8A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_2237F8A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_2237F8A64(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237F8ACC()
{
  return 24;
}

uint64_t sub_2237F8AD4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2237F8ADC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_2237F8AF4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2237F8B74()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237F8B88()
{
  return 24;
}

__int128 *sub_2237F8B94()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E330);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E330))
  {
    v2 = sub_2237F8C6C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578E318, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578E328 = *((_QWORD *)v2 + 2);
      xmmword_25578E318 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E318, &dword_22314D000);
    __cxa_guard_release(&qword_25578E330);
  }
  if (byte_25578E32F >= 0)
    return &xmmword_25578E318;
  else
    return (__int128 *)xmmword_25578E318;
}

void sub_2237F8C54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E330);
  _Unwind_Resume(a1);
}

__int128 *sub_2237F8C6C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E350);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E350))
    return &xmmword_25578E338;
  v2 = sub_2237F8D48();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578E338, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578E348 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578E338 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E338, &dword_22314D000);
  __cxa_guard_release(&qword_25578E350);
  return &xmmword_25578E338;
}

void sub_2237F8D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E350);
  _Unwind_Resume(a1);
}

std::string *sub_2237F8D48()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E370);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E370))
    return &stru_25578E358;
  sub_2237F8F60((uint64_t)__p);
  sub_2237F8E38((char *)__p, &stru_25578E358);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E358, &dword_22314D000);
  __cxa_guard_release(&qword_25578E370);
  return &stru_25578E358;
}

void sub_2237F8DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E370);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E370);
  _Unwind_Resume(a1);
}

void sub_2237F8E38(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EB5EC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2237F8F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2237F8F60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E390);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E390))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb32f>]", qword_25578E378);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E378, &dword_22314D000);
    __cxa_guard_release(&qword_25578E390);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E3B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E3B0))
  {
    v5 = sub_2231A38CC(qword_25578E378, "<", 0);
    sub_2231A37C8(qword_25578E378, 0, v5, qword_25578E398);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E398, &dword_22314D000);
    __cxa_guard_release(&qword_25578E3B0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E3D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E3D0))
  {
    sub_224573040((uint64_t)qword_25578E398, (uint64_t)&xmmword_25578E3B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E3B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E3D0);
  }
  if (byte_25578E3CF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E3B8, *((unint64_t *)&xmmword_25578E3B8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E3B8;
    *(_QWORD *)(a1 + 16) = unk_25578E3C8;
  }
}

void sub_2237F90FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E3D0);
  _Unwind_Resume(a1);
}

void sub_2237F9114(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E3B0);
  _Unwind_Resume(a1);
}

void sub_2237F912C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E390);
  _Unwind_Resume(a1);
}

void sub_2237F9148(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237F916C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2237F91BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2237F922C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237F9294()
{
  return 24;
}

uint64_t sub_2237F929C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2237F92A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2237F92BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2237F9340(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_2237F944C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2237F9490(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, int8x16_t a4@<Q0>, int8x16_t a5@<Q2>)
{
  uint64_t v6;
  float v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  __int16 *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float *v31;
  uint32x2_t *v32;
  float *v33;
  __int16 *v34;
  int v35;
  __int16 *v36;
  uint64_t v62;
  int v63;
  __int16 *v64;
  float32x4_t v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD v74[3];
  float *v75;
  float *v76;
  uint32x2_t *v77;
  char v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint32x2_t v83[2];
  int v84;
  int v85;
  __int16 *v86[4];
  __int16 *v87[2];

  v6 = a1;
  if ((*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56) || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/LightEstimation.cpp", 37, (uint64_t)"(kf1.Width() == kf2.Width() && kf1.Height() == kf2.Height())", 60, (uint64_t)"Image sizes must match", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v85 = 0;
  v84 = 2139095040;
  memset(v83, 0, 12);
  a4.i64[0] = 0;
  v81 = 0;
  v82 = 0.0;
  v79 = 0;
  v80 = 0.0;
  v78 = 0;
  v74[0] = &v85;
  v74[1] = &v84;
  v74[2] = &v78;
  v75 = (float *)&v81;
  v76 = (float *)&v79;
  v77 = v83;
  v8 = 0.0;
  if (*(_DWORD *)(v6 + 32) && (v9 = *(_DWORD *)(v6 + 36)) != 0)
  {
    v10 = *(_DWORD *)(v6 + 40);
    a5.i32[0] = 0;
    if (v10)
    {
      v11 = v10 - 1;
      v12 = *(unsigned int *)(v6 + 48);
      v70 = a3;
      v71 = *(unsigned int *)(v6 + 52);
      v14 = *(unsigned int *)(a2 + 48);
      v13 = *(unsigned int *)(a2 + 52);
      v15 = *(__int16 **)(v6 + 24);
      v73 = v10 - 1;
      if (*(_BYTE *)(v6 + 72) && v15)
      {
        v16 = *(_QWORD *)(v6 + 8);
        v17 = *(std::__shared_weak_count **)(v6 + 16);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v16 + 88))(v16, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v15 = *(__int16 **)(v6 + 24);
        v11 = v73;
      }
      v21 = *(__int16 **)(a2 + 24);
      if (*(_BYTE *)(a2 + 72) && v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        v23 = *(std::__shared_weak_count **)(a2 + 16);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v22 + 88))(v22, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v21 = *(__int16 **)(a2 + 24);
        v11 = v73;
      }
      v27 = v9 - 1;
      v28 = 2 * v12;
      v29 = 2 * v14;
      v69 = v6;
      if (v11)
      {
        if (v9 == 1)
        {
          v62 = 2 * v13;
          do
          {
            v87[0] = v21;
            v63 = v11;
            sub_2237F99E0(v86, (uint64_t)v74, v15, v87);
            v15 += v71;
            v21 = (__int16 *)((char *)v21 + v62);
            v11 = v63 - 1;
          }
          while (v63 != 1);
        }
        else
        {
          v30 = 0;
          v31 = v76;
          v32 = v77;
          v72 = 2 * v71;
          v33 = v75;
          do
          {
            v34 = v15;
            v35 = v27;
            v36 = v21;
            do
            {
              _H0 = v34[3];
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0)
              {
                _H0 = v36[3];
                __asm { FCVT            S0, H0 }
                if (_S0 > 0.0)
                {
                  _H0 = *v34;
                  __asm { FCVT            S0, H0 }
                  _H1 = *v36;
                  __asm { FCVT            S1, H1 }
                  if (_S1 <= 10.0 && _S0 <= 10.0 && _S0 >= 0.001 && _S1 >= 0.001)
                  {
                    *v33 = (float)(_S0 * _S0) + *v33;
                    *v31 = (float)(_S0 * _S1) + *v31;
                    ++v32->i32[0];
                  }
                  _H0 = v34[1];
                  __asm { FCVT            S0, H0 }
                  _H1 = v36[1];
                  __asm { FCVT            S1, H1 }
                  if (_S1 <= 10.0 && _S0 <= 10.0 && _S0 >= 0.001 && _S1 >= 0.001)
                  {
                    v33[1] = (float)(_S0 * _S0) + v33[1];
                    v31[1] = (float)(_S0 * _S1) + v31[1];
                    ++v32->i32[1];
                  }
                  _H0 = v36[2];
                  __asm { FCVT            S0, H0 }
                  if (_S0 <= 10.0)
                  {
                    _H1 = v34[2];
                    __asm { FCVT            S1, H1 }
                    if (_S1 <= 10.0 && _S1 >= 0.001 && _S0 >= 0.001)
                    {
                      v33[2] = (float)(_S1 * _S1) + v33[2];
                      v31[2] = (float)(_S1 * _S0) + v31[2];
                      ++v32[1].i32[0];
                    }
                  }
                }
              }
              v36 = (__int16 *)((char *)v36 + v29);
              v34 = (__int16 *)((char *)v34 + v28);
              --v35;
            }
            while (v35);
            v87[0] = v36;
            sub_2237F99E0(v86, (uint64_t)v74, v34, v87);
            v15 = (__int16 *)((char *)v15 + v72);
            v21 += v13;
            ++v30;
          }
          while (v30 != v73);
        }
      }
      v87[0] = v21;
      if (v27)
      {
        v64 = &v21[(unint64_t)v29 / 2];
        v6 = v69;
        do
        {
          sub_2237F99E0(v86, (uint64_t)v74, v15, v87);
          v87[0] = v64;
          v15 = (__int16 *)((char *)v15 + v28);
          v64 = (__int16 *)((char *)v64 + v29);
          --v27;
        }
        while (v27);
      }
      else
      {
        v6 = v69;
      }
      sub_2237F99E0(v86, (uint64_t)v74, v15, v87);
      v8 = *(float *)&v81;
      *(float *)a5.i32 = (float)v83[0].u32[0];
      *(float32x2_t *)a4.i8 = vcvt_f32_u32(*(uint32x2_t *)((char *)v83 + 4));
      a3 = v70;
    }
  }
  else
  {
    a5.i32[0] = 0;
  }
  __asm { FMOV            V3.2S, #1.0 }
  *(int32x2_t *)(a3 + 12) = _D3;
  *(_DWORD *)(a3 + 20) = 1065353216;
  *(float *)_D3.i32 = (float)(*(_DWORD *)(v6 + 60) * *(_DWORD *)(v6 + 56));
  v66 = vdivq_f32((float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), a4, 0xCuLL), (float32x4_t)vdupq_lane_s32(_D3, 0));
  *(_DWORD *)(a3 + 8) = v66.i32[2];
  *(_QWORD *)a3 = v66.i64[0];
  if (v8 <= 0.0)
  {
    v67 = *((float *)&v81 + 1);
    if (*((float *)&v81 + 1) <= 0.0)
    {
LABEL_71:
      v68 = v82;
      if (v82 <= 0.0)
        return;
      goto LABEL_72;
    }
  }
  else
  {
    *(float *)(a3 + 12) = (float)(1.0 / v8) * *(float *)&v79;
    v67 = *((float *)&v81 + 1);
    if (*((float *)&v81 + 1) <= 0.0)
      goto LABEL_71;
  }
  *(float *)(a3 + 16) = (float)(1.0 / v67) * *((float *)&v79 + 1);
  v68 = v82;
  if (v82 > 0.0)
LABEL_72:
    *(float *)(a3 + 20) = (float)(1.0 / v68) * v80;
}

float sub_2237F99E0(__int16 **a1, uint64_t a2, __int16 *a3, __int16 **a4)
{
  __int16 *v4;
  float result;
  _DWORD *v18;
  float *v19;
  uint64_t v27;
  uint64_t v28;
  uint64_t v35;
  uint64_t v36;

  *a1 = a3;
  v4 = *a4;
  a1[2] = *a4;
  _H0 = a3[3];
  __asm { FCVT            S0, H0 }
  if (result > 0.0)
  {
    _H0 = v4[3];
    __asm { FCVT            S0, H0 }
    if (result > 0.0)
    {
      _H0 = *a3;
      __asm { FCVT            S1, H0 }
      _H0 = *v4;
      __asm { FCVT            S2, H0 }
      if (_S2 <= 10.0 && _S1 <= 10.0 && _S1 >= 0.001 && _S2 >= 0.001)
      {
        v19 = *(float **)(a2 + 32);
        v18 = *(_DWORD **)(a2 + 40);
        **(float **)(a2 + 24) = (float)(_S1 * _S1) + **(float **)(a2 + 24);
        *v19 = (float)(_S1 * _S2) + *v19;
        ++*v18;
      }
      _H1 = a3[1];
      __asm { FCVT            S1, H1 }
      _H2 = v4[1];
      __asm { FCVT            S2, H2 }
      if (_S2 <= 10.0 && _S1 <= 10.0 && _S1 >= 0.001 && _S2 >= 0.001)
      {
        v28 = *(_QWORD *)(a2 + 32);
        v27 = *(_QWORD *)(a2 + 40);
        *(float *)(*(_QWORD *)(a2 + 24) + 4) = (float)(_S1 * _S1) + *(float *)(*(_QWORD *)(a2 + 24) + 4);
        *(float *)(v28 + 4) = (float)(_S1 * _S2) + *(float *)(v28 + 4);
        ++*(_DWORD *)(v27 + 4);
      }
      _H0 = a3[2];
      __asm { FCVT            S0, H0 }
      _H1 = v4[2];
      __asm { FCVT            S1, H1 }
      if (_S1 <= 10.0 && result <= 10.0 && result >= 0.001 && _S1 >= 0.001)
      {
        v36 = *(_QWORD *)(a2 + 32);
        v35 = *(_QWORD *)(a2 + 40);
        *(float *)(*(_QWORD *)(a2 + 24) + 8) = (float)(result * result) + *(float *)(*(_QWORD *)(a2 + 24) + 8);
        result = (float)(result * _S1) + *(float *)(v36 + 8);
        *(float *)(v36 + 8) = result;
        ++*(_DWORD *)(v35 + 8);
      }
    }
  }
  return result;
}

_QWORD *sub_2237F9B44(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[101];
  if (v2)
  {
    a1[102] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[98];
  if (v3)
  {
    a1[99] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 1);
  return a1;
}

void sub_2237F9B8C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[101];
  if (v2)
  {
    a1[102] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[98];
  if (v3)
  {
    a1[99] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2237F9BE4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[101];
  if (v2)
  {
    a1[102] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[98];
  if (v3)
  {
    a1[99] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 1);
  return a1;
}

void sub_2237F9C2C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[101];
  if (v2)
  {
    a1[102] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[98];
  if (v3)
  {
    a1[99] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2237F9C84(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (void *)a1[92];
  if (v2)
  {
    a1[93] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[89];
  if (v3)
  {
    a1[90] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[86];
  if (v4)
  {
    a1[87] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[83];
  if (v5)
  {
    a1[84] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[80];
  if (v6)
  {
    a1[81] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[71];
  if (!v7)
    return sub_2231CE350(a1);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return sub_2231CE350(a1);
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return sub_2231CE350(a1);
}

void sub_2237F9D40()
{
  JUMPOUT(0x227684CE8);
}

float sub_2237F9D54(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, int a7)
{
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  simd_float4 v32;
  simd_float4 v33;
  float32x4_t v34;
  float32x4_t v35;
  __int32 v36;
  float32x2_t v37;
  __int32 v38;
  float32x2_t v39;
  simd_float4 v45;
  simd_float4 v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float result;
  simd_float4x4 v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;

  v14 = a2 + 29;
  v15 = sub_2231D021C((uint64_t)a4);
  v16 = sub_2231D021C((uint64_t)a5);
  v17 = sub_2231D0224((uint64_t)a5);
  v18 = *(float *)(a1 + 8);
  if (a7)
  {
    v19 = *(float *)(v17 + 16);
    v18 = v18
        * (float)((float)((float)v16 / (float)v15)
                * (float)(v19 / *(float *)(sub_2231D0224((uint64_t)a4) + 16)));
  }
  sub_2231D022C(a5, (uint64_t)&v56);
  sub_2231D0324(a4, (uint64_t)&v52);
  v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)a6->f32)), v57, *a6, 1), v58, *(float32x4_t *)a6->f32, 2), v59, *(float32x4_t *)a6->f32, 3);
  v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)a6[2].f32)), v57, a6[2], 1), v58, *(float32x4_t *)a6[2].f32, 2), v59, *(float32x4_t *)a6[2].f32, 3);
  v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)a6[4].f32)), v57, a6[4], 1), v58, *(float32x4_t *)a6[4].f32, 2), v59, *(float32x4_t *)a6[4].f32, 3);
  v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)a6[6].f32)), v57, a6[6], 1), v58, *(float32x4_t *)a6[6].f32, 2), v59, *(float32x4_t *)a6[6].f32, 3);
  v24 = v55;
  v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v53.f32[0]), v21, *(float32x2_t *)v53.f32, 1), v22, v53, 2), v23, v53, 3);
  v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v54.f32[0]), v21, *(float32x2_t *)v54.f32, 1), v22, v54, 2), v23, v54, 3);
  v27 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v55.f32[0]), v21, *(float32x2_t *)v55.f32, 1), v22, v55, 2);
  a2[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v52.f32[0]), v21, *(float32x2_t *)v52.f32, 1), v22, v52, 2), v23, v52, 3);
  a2[5] = v25;
  v28 = a2 + 4;
  v28[2] = v26;
  v28[3] = vmlaq_laneq_f32(v27, v23, v24, 3);
  v29 = *(float32x4_t *)a6[6].f32;
  v31 = *(float32x4_t *)a6->f32;
  v30 = *(float32x4_t *)a6[2].f32;
  v28[6] = *(float32x4_t *)a6[4].f32;
  v28[7] = v29;
  v28[4] = v31;
  v28[5] = v30;
  sub_2231D0324(a5, (uint64_t)&v51);
  v32 = v51.columns[1];
  v28[12] = (float32x4_t)v51.columns[0];
  v28[13] = (float32x4_t)v32;
  v33 = v51.columns[3];
  v28[14] = (float32x4_t)v51.columns[2];
  v28[15] = (float32x4_t)v33;
  v34 = v53;
  v28[8] = v52;
  v28[9] = v34;
  v35 = v55;
  v28[10] = v54;
  v28[11] = v35;
  v36 = a6[1].i32[0];
  v35.i32[0] = a6[3].i32[0];
  v37 = a6[2];
  v38 = a6[5].i32[0];
  v39 = a6[4];
  *(float32x2_t *)v14->f32 = *a6;
  v14->i32[2] = v36;
  *(float32x2_t *)((char *)&v14->u64[1] + 4) = v37;
  v14[1].i32[1] = v35.i32[0];
  *(float32x2_t *)&v14[1].u32[2] = v39;
  v14[2].i32[0] = v38;
  __asm { FMOV            V0.4S, #1.0 }
  *(float32x4_t *)((char *)v14 + 36) = _Q0;
  *(uint64_t *)((char *)v28[28].i64 + 4) = 0;
  v28[28].i32[3] = v15 - 1;
  v28[29].i32[0] = HIDWORD(v15) - 1;
  *(uint64_t *)((char *)v28[29].i64 + 4) = 0;
  *(uint64_t *)((char *)&v28[29].i64[1] + 4) = v16;
  *(uint64_t *)((char *)v14[5].i64 + 4) = v15;
  *(uint64_t *)((char *)&v14[5].i64[1] + 4) = v16;
  v28[31].i32[2] = *(_DWORD *)(a1 + 12);
  v28[31].f32[1] = v18;
  sub_22322BC80((simd_float4x4 *)v28, &v51);
  v45 = v51.columns[1];
  *(simd_float4 *)(a3 + 64) = v51.columns[0];
  *(simd_float4 *)(a3 + 80) = v45;
  v46 = v51.columns[3];
  *(simd_float4 *)(a3 + 96) = v51.columns[2];
  *(simd_float4 *)(a3 + 112) = v46;
  v47 = v28[12];
  v48 = v28[13];
  v49 = v28[15];
  *(float32x4_t *)(a3 + 160) = v28[14];
  *(float32x4_t *)(a3 + 176) = v49;
  *(float32x4_t *)(a3 + 128) = v47;
  *(float32x4_t *)(a3 + 144) = v48;
  *(_QWORD *)(a3 + 192) = v16;
  result = v18 * 0.5;
  *(float *)(a3 + 236) = v18 * 0.5;
  return result;
}

_QWORD *sub_2237F9FC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *a1 = off_24EC5A720;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[13];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[9];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[7];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[7];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  *a1 = off_24EC63798;
  sub_22323DFE4((uint64_t)(a1 + 3), a1[4]);
  return a1;
}

void sub_2237FA180(void ***a1, void ***a2, unsigned int a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v14;
  size_t v15;
  const char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  void ***v22;
  const char *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE object[24];
  __int128 v91;
  void *__p[2];
  unint64_t v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (sub_223225C34(a2) && sub_223226504(a2, v6, v7, v8, v9, v10) == a3)
    return;
  sub_2237FAAAC(&v87);
  if (**(int **)(v87 + 56) <= 3)
  {
    v11 = *(unsigned __int8 *)(v87 + 72);
    v12 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
    if (v11 || v12 != 0)
    {
      v14 = v12;
      v80[0] = &v87;
      v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v80[2] = std::chrono::system_clock::now().__d_.__rep_;
      v81 = 3;
      v82 = "unknown file";
      v83 = 70;
      v85 = 0;
      v86 = 0;
      v84 = "unknown function";
      v79 = v87;
      if (*(char *)(v87 + 39) < 0)
      {
        v16 = *(const char **)(v87 + 16);
        v15 = *(_QWORD *)(v87 + 24);
        v78 = v87 + 16;
        v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        v15 = *(unsigned __int8 *)(v87 + 39);
        v16 = (const char *)(v87 + 16);
        v78 = v87 + 16;
        v17 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v17 & 1) != 0)
          goto LABEL_12;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v91 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_12:
      if (byte_255788F57 >= 0)
        v19 = (const char *)&xmmword_255788F40;
      else
        v19 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v20 = byte_255788F57;
      else
        v20 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v19, v16);
      v21 = &object[8];
      if (v20 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v20 >= 0x17)
      {
        v77 = a3;
        v22 = a1;
        v23 = v16;
        v24 = v14;
        v25 = v11;
        v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v26 = v20 | 7;
        v27 = v26 + 1;
        v21 = operator new(v26 + 1);
        *(_QWORD *)&object[16] = v20;
        *(_QWORD *)&v91 = v27 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v21;
        v11 = v25;
        v14 = v24;
        v16 = v23;
        a1 = v22;
        a3 = v77;
      }
      else
      {
        BYTE7(v91) = v20;
        if (!v20)
        {
LABEL_26:
          v21[v20] = 0;
          BYTE8(v91) = 1;
          v28 = __p;
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v15 >= 0x17)
          {
            v30 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v30 = v15 | 7;
            v31 = v30 + 1;
            v28 = operator new(v30 + 1);
            __p[1] = (void *)v15;
            v93 = v31 | 0x8000000000000000;
            __p[0] = v28;
          }
          else
          {
            HIBYTE(v93) = v15;
            if (!v15)
            {
              LOBYTE(__p[0]) = 0;
              v94 = 1;
              v29 = *(NSObject **)object;
              if ((SHIBYTE(v93) & 0x80000000) == 0)
                goto LABEL_30;
              goto LABEL_36;
            }
          }
          memmove(v28, v16, v15);
          *((_BYTE *)v28 + v15) = 0;
          v94 = 1;
          v29 = *(NSObject **)object;
          if ((SHIBYTE(v93) & 0x80000000) == 0)
          {
LABEL_30:
            if (!BYTE8(v91))
              goto LABEL_39;
            goto LABEL_37;
          }
LABEL_36:
          operator delete(__p[0]);
          if (!BYTE8(v91))
          {
LABEL_39:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v14 && *(_QWORD *)(v14 + 24))
            {
              v32 = _os_log_pack_size();
              v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
              v34 = (std::__shared_weak_count *)operator new();
              v35 = v34;
              v34->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v34->__shared_weak_owners_ = 0;
              v34[1].__vftable = v33;
              *(_QWORD *)object = v33;
              *(_QWORD *)&object[8] = v33;
              *(_QWORD *)&object[16] = v34;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
              v91 = 0uLL;
              __p[0] = 0;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v35);
              }
              v39 = *(_QWORD *)object;
              v40 = (_DWORD *)_os_log_pack_fill();
              *v40 = 67109120;
              v40[1] = a3;
              v41 = operator new();
              v42 = *(unsigned __int8 *)(v79 + 39);
              v43 = v78;
              if ((v42 & 0x80u) != 0)
              {
                v43 = *(_QWORD *)(v79 + 16);
                v42 = *(_QWORD *)(v79 + 24);
              }
              *(_QWORD *)v41 = v39;
              *(_OWORD *)(v41 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v41 + 24) = v91;
              v91 = 0uLL;
              *(_QWORD *)(v41 + 40) = v43;
              *(_QWORD *)(v41 + 48) = v42;
              *(_BYTE *)(v41 + 56) = 1;
              v88 = 0;
              v89 = v41;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v89);
              v44 = v89;
              v89 = 0;
              if (v44)
              {
                v45 = *(std::__shared_weak_count **)(v44 + 32);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                v48 = *(std::__shared_weak_count **)(v44 + 16);
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
                v51 = v88;
                v88 = 0;
                if (v51)
                {
                  v52 = *(std::__shared_weak_count **)(v51 + 32);
                  if (v52)
                  {
                    v53 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  v55 = *(std::__shared_weak_count **)(v51 + 16);
                  if (v55)
                  {
                    v56 = (unint64_t *)&v55->__shared_owners_;
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                    }
                  }
                  MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
                }
              }
              v58 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
              if (*((_QWORD *)&v91 + 1))
              {
                v59 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v62 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
            }
            else
            {
              os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 67109120;
              *(_DWORD *)&object[4] = a3;
              v64 = (void *)_os_log_send_and_compose_impl();
              if (v64)
                free(v64);
            }
            if (v11)
            {
              sub_22322C138((uint64_t)v80, "Allocating buffer for SurfaceWarpFuser size: %d", a3);
              sub_223182C08((uint64_t)v80);
            }
            sub_223182C08((uint64_t)v80);
            v65 = v86;
            if (v86)
            {
              v66 = (unint64_t *)&v86->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            goto LABEL_93;
          }
LABEL_37:
          if (SBYTE7(v91) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_39;
        }
      }
      memmove(v21, v19, v20);
      goto LABEL_26;
    }
  }
LABEL_93:
  nullsub_30(a1);
  sub_223226080(object, a1, a3, 0x20u, v68, v69);
  v70 = *(_OWORD *)object;
  *(_QWORD *)object = 0;
  *(_QWORD *)&object[8] = 0;
  v71 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v70;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
}

void sub_2237FA980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237FA9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_22319A054(&a26);
  sub_22319A054(&a25);
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237FA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FAA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FAA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237FAAAC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_2540CC6C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CC6C0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kf");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC6B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_2540CC6C0);
  }
  *a1 = qword_2540CC6B8;
}

void sub_2237FAB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_2540CC6C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_2540CC6C0);
  _Unwind_Resume(a1);
}

void sub_2237FABA0(void ***a1, void ***a2, unsigned int a3, const char *a4, unsigned int a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  size_t v24;
  const char *v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  void *v29;
  unsigned int v30;
  unint64_t v31;
  void ***v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  void ***v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  const char *v104;
  __int128 v105;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *object;
  void *v117[2];
  __int128 v118;
  void *__p[2];
  unint64_t v120;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  if (sub_223225C34(a2)
    && sub_223229330(a2, v10, v11, v12, v13, v14) == a5
    && sub_223229314(a2, v15, v16, v17, v18, v19) == (_DWORD)a4)
  {
    return;
  }
  sub_2237FAAAC(&v113);
  if (**(int **)(v113 + 56) <= 3)
  {
    v20 = *(unsigned __int8 *)(v113 + 72);
    v21 = sub_22322F254(v113, "OSLogSurrogateAppender", 1, 0);
    v22 = v21;
    if (v20 || v21 != 0)
    {
      v103 = v20;
      *(_QWORD *)&v105 = &v113;
      *((std::chrono::steady_clock::time_point *)&v105 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v107 = 3;
      v108 = "unknown file";
      v109 = 78;
      v111 = 0;
      v112 = 0;
      v110 = "unknown function";
      v101 = v113;
      if (*(char *)(v113 + 39) < 0)
      {
        v25 = *(const char **)(v113 + 16);
        v24 = *(_QWORD *)(v113 + 24);
      }
      else
      {
        v24 = *(unsigned __int8 *)(v113 + 39);
        v25 = (const char *)(v113 + 16);
      }
      v100 = v113 + 16;
      v102 = a3;
      v104 = a4;
      v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v118 && SHIBYTE(v117[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v27 = (const char *)&xmmword_255788F40;
      else
        v27 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v28 = byte_255788F57;
      else
        v28 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v27, v25);
      v29 = v117;
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v28 >= 0x17)
      {
        v30 = a5;
        v31 = v22;
        v32 = a1;
        v33 = v25;
        v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v34 = v28 | 7;
        v35 = v34 + 1;
        v29 = operator new(v34 + 1);
        v117[1] = (void *)v28;
        *(_QWORD *)&v118 = v35 | 0x8000000000000000;
        v117[0] = v29;
        v25 = v33;
        a1 = v32;
        v22 = v31;
        a5 = v30;
      }
      else
      {
        BYTE7(v118) = v28;
        if (!v28)
        {
LABEL_27:
          *((_BYTE *)v29 + v28) = 0;
          BYTE8(v118) = 1;
          v36 = __p;
          if (v24 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v24 >= 0x17)
          {
            v38 = a1;
            v39 = v25;
            v40 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v40 = v24 | 7;
            v41 = v40 + 1;
            v36 = operator new(v40 + 1);
            __p[1] = (void *)v24;
            v120 = v41 | 0x8000000000000000;
            __p[0] = v36;
            v25 = v39;
            a1 = v38;
          }
          else
          {
            HIBYTE(v120) = v24;
            if (!v24)
            {
              LOBYTE(__p[0]) = 0;
              v121 = 1;
              v37 = object;
              if ((SHIBYTE(v120) & 0x80000000) == 0)
                goto LABEL_31;
              goto LABEL_37;
            }
          }
          memmove(v36, v25, v24);
          *((_BYTE *)v36 + v24) = 0;
          v121 = 1;
          v37 = object;
          if ((SHIBYTE(v120) & 0x80000000) == 0)
          {
LABEL_31:
            if (!BYTE8(v118))
              goto LABEL_40;
            goto LABEL_38;
          }
LABEL_37:
          operator delete(__p[0]);
          if (!BYTE8(v118))
          {
LABEL_40:
            if (object)
              os_release(object);
            if (v22 && *(_QWORD *)(v22 + 24))
            {
              v42 = _os_log_pack_size();
              v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
              v44 = (std::__shared_weak_count *)operator new();
              a4 = v104;
              v45 = v44;
              v44->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v44->__shared_owners_;
              v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v44->__shared_weak_owners_ = 0;
              v44[1].__vftable = v43;
              object = v43;
              v117[0] = v43;
              v117[1] = v44;
              do
                v47 = __ldxr(p_shared_owners);
              while (__stxr(v47 + 1, p_shared_owners));
              v118 = 0uLL;
              __p[0] = 0;
              do
                v48 = __ldaxr(p_shared_owners);
              while (__stlxr(v48 - 1, p_shared_owners));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v45);
              }
              v49 = object;
              v50 = _os_log_pack_fill();
              *(_DWORD *)v50 = 67109376;
              *(_DWORD *)(v50 + 4) = (_DWORD)v104;
              *(_WORD *)(v50 + 8) = 1024;
              *(_DWORD *)(v50 + 10) = a5;
              v51 = operator new();
              v52 = *(unsigned __int8 *)(v101 + 39);
              v53 = v100;
              if ((v52 & 0x80u) != 0)
              {
                v53 = *(_QWORD *)(v101 + 16);
                v52 = *(_QWORD *)(v101 + 24);
              }
              *(_QWORD *)v51 = v49;
              *(_OWORD *)(v51 + 8) = *(_OWORD *)v117;
              v117[0] = 0;
              v117[1] = 0;
              *(_OWORD *)(v51 + 24) = v118;
              v118 = 0uLL;
              *(_QWORD *)(v51 + 40) = v53;
              *(_QWORD *)(v51 + 48) = v52;
              *(_BYTE *)(v51 + 56) = 1;
              v114 = 0;
              v115 = v51;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v115);
              v54 = v103;
              v55 = v115;
              v115 = 0;
              if (v55)
              {
                v56 = *(std::__shared_weak_count **)(v55 + 32);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = *(std::__shared_weak_count **)(v55 + 16);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                MEMORY[0x227684CE8](v55, 0x10F0C40B62ED6C6);
                v62 = v114;
                v114 = 0;
                if (v62)
                {
                  v63 = *(std::__shared_weak_count **)(v62 + 32);
                  if (v63)
                  {
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  v66 = *(std::__shared_weak_count **)(v62 + 16);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
                }
              }
              v69 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
              if (*((_QWORD *)&v118 + 1))
              {
                v70 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              v72 = (std::__shared_weak_count *)v117[1];
              if (v117[1])
              {
                v73 = (unint64_t *)((char *)v117[1] + 8);
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
            }
            else
            {
              os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
              LODWORD(object) = 67109376;
              a4 = v104;
              HIDWORD(object) = (_DWORD)v104;
              LOWORD(v117[0]) = 1024;
              *(_DWORD *)((char *)v117 + 2) = a5;
              v75 = (void *)_os_log_send_and_compose_impl();
              v54 = v103;
              if (v75)
                free(v75);
            }
            if (v54)
            {
              sub_22322C138((uint64_t)&v105, "Allocating texture for SurfaceWarpFuser size: %dx%d", (_DWORD)a4, a5);
              sub_223182C08((uint64_t)&v105);
            }
            sub_223182C08((uint64_t)&v105);
            v76 = v112;
            if (v112)
            {
              v77 = (unint64_t *)&v112->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            a3 = v102;
            goto LABEL_95;
          }
LABEL_38:
          if (SBYTE7(v118) < 0)
            operator delete(v117[0]);
          goto LABEL_40;
        }
      }
      memmove(v29, v27, v28);
      goto LABEL_27;
    }
  }
LABEL_95:
  sub_2232290AC(a3, a4, a5, 0, &object);
  sub_223229188((_QWORD **)&object, 0, v79, v80, v81, v82);
  sub_223229198((_QWORD **)&object, 3u, v83, v84, v85, v86);
  nullsub_30(a1);
  sub_223229208(&v105, a1, (uint64_t **)&object, v87, v88, v89);
  v90 = v105;
  v105 = 0uLL;
  v91 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v90;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)v117[0];
  if (v117[0])
  {
    v98 = (unint64_t *)((char *)v117[0] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_2237FB448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237FB488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_22319A054(&a26);
  sub_22319A054(&a25);
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2237FB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FB4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FB4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237FB5A0(uint64_t a1, void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;

  sub_223228EB4(&v61);
  sub_223228F70(&v61, 0, v4, v5, v6, v7);
  sub_223228F50(&v61, 0, v8, v9, v10, v11);
  sub_223228F60(&v61, 0, v12, v13, v14, v15);
  sub_223228F30(&v61, 1, v16, v17, v18, v19);
  sub_223228F40(&v61, 1, v20, v21, v22, v23);
  sub_223228F80(&v61, 0, v24, v25, v26, v27);
  nullsub_30(a2);
  sub_223228F90(&v60, a2, &v61, v28, v29, v30);
  v35 = v60;
  v60 = 0uLL;
  v36 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v35;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_223228F30(&v61, 0, v31, v32, v33, v34);
  sub_223228F40(&v61, 0, v42, v43, v44, v45);
  nullsub_30(a2);
  sub_223228F90(&v60, a2, &v61, v46, v47, v48);
  v49 = v60;
  v60 = 0uLL;
  v50 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v49;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_2237FA180(a2, (void ***)(a1 + 176), 0x30u);
  if (!*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)(a1 + 208) = 0;
    v57 = v62;
    if (!v62)
      return;
    goto LABEL_27;
  }
  v56 = sub_223CEFC14();
  *(_BYTE *)(a1 + 208) = v56;
  if (v56)
  {
    *(_QWORD *)&v60 = 0x80000000A0;
    sub_223CECDF0(a1 + 216, a2, (unsigned int *)&v60);
  }
  v57 = v62;
  if (v62)
  {
LABEL_27:
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_2237FB7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FB820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FB834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237FB848(uint64_t a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  const void *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  size_t v9;
  int v10;
  int v11;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_27:
    sub_223198218("map::at:  key not found");
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  else
    v5 = (uint64_t *)a2[1];
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v2 + 55);
      v7 = v6 >= 0 ? (uint64_t *)(v2 + 4) : v2[4];
      v8 = v6 >= 0 ? (uint64_t *)*((unsigned __int8 *)v2 + 55) : v2[5];
      v9 = (size_t)(v8 >= v5 ? v5 : v8);
      v10 = memcmp(v4, v7, v9);
      if (v10)
        break;
      if (v5 >= v8)
        goto LABEL_22;
LABEL_8:
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_27;
    }
    if (v10 < 0)
      goto LABEL_8;
LABEL_22:
    v11 = memcmp(v7, v4, v9);
    if (v11)
    {
      if ((v11 & 0x80000000) == 0)
        return (uint64_t *)(v2 + 7);
      goto LABEL_26;
    }
    if (v8 >= v5)
      return (uint64_t *)(v2 + 7);
LABEL_26:
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_27;
  }
}

const char *sub_2237FB924(uint64_t a1, const char *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17;
  const char *v18;
  unsigned int v19;
  _QWORD **v20;
  const char *v21;
  unsigned int v22;
  const char *v23;
  unsigned int v24;
  _QWORD **v25;
  const char *v26;
  unsigned int v27;
  _QWORD **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  unsigned int v58;
  const char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD **v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD **v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  _BYTE *v156;
  char *v157;
  const char *v158;
  char *v159;
  const char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD **v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD **v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD **v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD **v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD **v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD **v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD **v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD **v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD **v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD **v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD **v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD **v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD **v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD **v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD **v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD **v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void ***v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  int v310;
  _QWORD **v313;
  void ***v314;
  int32x2_t v316;
  _QWORD *v317;
  std::__shared_weak_count *v318;
  _BYTE __p[32];
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  __int128 v323;
  void **v324;
  std::__shared_weak_count *v325;
  _OWORD v326[2];
  uint32x2_t v327;
  int v328;

  sub_2232265F4((uint64_t)a2, a2, a3, (uint64_t)a4, a5, a6, &v324);
  v17 = sub_2231D020C(a6);
  v310 = sub_2231D0214(a6) * v17;
  v313 = (_QWORD **)(a1 + 80);
  sub_2237FA180(&v324, (void ***)(a1 + 80), 4 * v310);
  v18 = (const char *)sub_2231D020C(a6);
  v19 = sub_2231D0214(a6);
  v20 = (_QWORD **)(a1 + 112);
  sub_2237FABA0(&v324, (void ***)(a1 + 112), 0x19u, v18, v19);
  v21 = (const char *)sub_2231D020C(a6);
  v22 = sub_2231D0214(a6);
  v314 = (void ***)(a1 + 128);
  sub_2237FABA0(&v324, (void ***)(a1 + 128), 0x19u, v21, v22);
  v23 = (const char *)sub_2231D020C(a6);
  v24 = sub_2231D0214(a6);
  v25 = (_QWORD **)(a1 + 160);
  sub_2237FABA0(&v324, (void ***)(a1 + 160), 0x17u, v23, v24);
  v26 = (const char *)sub_2231D020C(a6);
  v27 = sub_2231D0214(a6);
  v28 = (_QWORD **)(a1 + 144);
  sub_2237FABA0(&v324, (void ***)(a1 + 144), 0x17u, v26, v27);
  v29 = sub_2231D021C(a6);
  if (4 * (v29 * HIDWORD(v29)) != sub_223226504((void ***)(a1 + 80), v30, v31, v32, v33, v34)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 38, (uint64_t)"buffer.length() == size[0] * size[1] * element_size", 51, (uint64_t)"Incorrect buffer size", 21, (void (*)(void **))sub_22457406C)|| ((v35 = sub_2231D021C(a6), sub_223229314((void ***)(a1 + 112), v36, v37, v38, v39, v40) != (_DWORD)v35)|| sub_223229330((void ***)(a1 + 112), v41, v42, v43, v44, v45) != HIDWORD(v35))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp",
         43,
         (uint64_t)"texture.width() == size[0] && texture.height() == size[1]",
         57,
         (uint64_t)"Incorrect buffer size",
         21,
         (void (*)(void **))sub_22457406C)
    || ((v46 = sub_2231D021C(a6), sub_223229314(v314, v47, v48, v49, v50, v51) != (_DWORD)v46)
     || sub_223229330(v314, v52, v53, v54, v55, v56) != HIDWORD(v46))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 43, (uint64_t)"texture.width() == size[0] && texture.height() == size[1]", 57, (uint64_t)"Incorrect buffer size", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223226BBC((uint64_t)a2, (uint64_t)__p);
  sub_223CEF07C((uint64_t)__p, "Keyframing.SurfaceWarpFuser.CopyDepthConfidence", 0x2FuLL);
  v57 = (const char *)sub_2231D6E0C(a6, 0);
  *(_QWORD *)&v326[0] = 0;
  DWORD2(v326[0]) = 0;
  v58 = sub_2231D020C(a6);
  v322 = __PAIR64__(sub_2231D0214(a6), v58);
  LODWORD(v323) = 1;
  v317 = 0;
  LODWORD(v318) = 0;
  sub_223225EB8((uint64_t)__p, v57, 0, 0, (uint64_t)v326, (uint64_t)&v322, (uint64_t **)(a1 + 112), 0, 0, (uint64_t)&v317);
  v59 = (const char *)sub_2231D6E0C(a6, 1u);
  *(_QWORD *)&v326[0] = 0;
  DWORD2(v326[0]) = 0;
  v60 = sub_2231D020C(a6);
  v322 = __PAIR64__(sub_2231D0214(a6), v60);
  LODWORD(v323) = 1;
  v317 = 0;
  LODWORD(v318) = 0;
  sub_223225EB8((uint64_t)__p, v59, 0, 0, (uint64_t)v326, (uint64_t)&v322, (uint64_t **)v314, 0, 0, (uint64_t)&v317);
  sub_223226DF0((uint64_t)__p, v61, v62, v63, v64, v65);
  sub_223226D74(__p);
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  sub_223226F4C(&v322, (uint64_t *)__p);
  v66 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_133;
  v67 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if (*(_BYTE *)(a1 + 208))
    {
LABEL_14:
      v69 = *(_OWORD *)(a3 + 144);
      v70 = *(_OWORD *)(a3 + 160);
      v71 = *(_OWORD *)(a3 + 176);
      *(_OWORD *)__p = *(_OWORD *)(a3 + 128);
      *(_OWORD *)&__p[16] = v69;
      v320 = v70;
      v321 = v71;
      v74 = sub_2231D0224(a6);
      if ((_QWORD)v323
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 171, (uint64_t)"command_encoder.internal() == nullptr", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223CEE3D8(a1 + 216, a2, (float32x2_t *)__p, (float32x2_t *)v74, v72, v73);
      sub_223226BD8((uint64_t)a2, (uint64_t)v326);
      v75 = *(_OWORD *)((char *)v326 + 8);
      *((_QWORD *)&v326[0] + 1) = 0;
      *(_QWORD *)&v326[1] = 0;
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
      v323 = v75;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(p_shared_owners);
        while (__stlxr(v78 - 1, p_shared_owners));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      sub_223226D74(v326);
      sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.CompressRenderedDepth", 0x31uLL);
      BYTE7(v326[1]) = 21;
      strcpy((char *)v326, "CompressRenderedDepth");
      v79 = sub_2237FB848(a1 + 24, (const void **)v326);
      sub_22322712C((uint64_t)&v322, (_QWORD **)v79, v80, v81, v82, v83);
      if (SBYTE7(v326[1]) < 0)
        operator delete(*(void **)&v326[0]);
      sub_223227180((uint64_t)&v322, (_QWORD **)(a1 + 384), 0, 0, v84, v85);
      sub_223227180((uint64_t)&v322, (_QWORD **)(a1 + 400), 1u, 0, v86, v87);
      sub_22322715C((uint64_t)&v322, v313, 0, 1u, 2, v88);
      v326[0] = xmmword_22464FC70;
      v317 = (_QWORD *)vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(v74 + 88)), (float32x2_t)vdup_n_s32(0x3D800000u))));
      LODWORD(v318) = 1;
      sub_2232271B4((uint64_t)&v322, (uint64_t)&v317, (uint64_t)v326, v89, v90, v91);
      v25 = (_QWORD **)(a1 + 160);
      v28 = (_QWORD **)(a1 + 144);
      v20 = (_QWORD **)(a1 + 112);
      goto LABEL_35;
    }
  }
  else
  {
LABEL_133:
    if (*(_BYTE *)(a1 + 208))
      goto LABEL_14;
  }
  sub_223226BD8((uint64_t)a2, (uint64_t)__p);
  v92 = *(_OWORD *)&__p[8];
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
  v323 = v92;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  sub_223226D74(__p);
  sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.ClearRasterizationBuffers", 0x35uLL);
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8D00;
  strcpy(*(char **)__p, "ClearRasterizationBuffers");
  v96 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)&v322, (_QWORD **)v96, v97, v98, v99, v100);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223227140((uint64_t)&v322, a3, 0x260u, 0, 0, v101);
  sub_22322715C((uint64_t)&v322, v313, 0, 1u, 2, v102);
  v103 = sub_2231D020C(a6);
  v104 = sub_2231D0214(a6);
  *(_OWORD *)__p = xmmword_22464FC70;
  *(uint32x2_t *)&v326[0] = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v104, v103)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  DWORD2(v326[0]) = 1;
  sub_2232271B4((uint64_t)&v322, (uint64_t)v326, (uint64_t)__p, v105, v106, v107);
  sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.GenerateSurfels", 0x2BuLL);
  __p[23] = 15;
  strcpy(__p, "GenerateSurfels");
  v108 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)&v322, (_QWORD **)v108, v109, v110, v111, v112);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v113 = (_QWORD **)sub_2231D2C04(a5, 0);
  sub_223227180((uint64_t)&v322, v113, 0, 3, v114, v115);
  v116 = (_QWORD **)sub_2231D2C04(a5, 1u);
  sub_223227180((uint64_t)&v322, v116, 1u, 3, v117, v118);
  v119 = (_QWORD **)sub_2231D2C04(a5, 5u);
  sub_223227180((uint64_t)&v322, v119, 2u, 3, v120, v121);
  sub_223227140((uint64_t)&v322, a3, 0x260u, 0, 0, v122);
  sub_22322715C((uint64_t)&v322, v313, 0, 1u, 3, v123);
  v124 = sub_2231D020C(a5);
  v125 = sub_2231D0214(a5);
  *(_OWORD *)__p = xmmword_22464FC70;
  *(uint32x2_t *)&v326[0] = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v125, v124)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  DWORD2(v326[0]) = 1;
  sub_2232271B4((uint64_t)&v322, (uint64_t)v326, (uint64_t)__p, v126, v127, v128);
LABEL_35:
  if ((a7 & 4) != 0)
  {
    __asm { FMOV            V1.4S, #1.0 }
    if ((vminvq_u32((uint32x4_t)vceqq_f32(a4[4], _Q1)) & 0x80000000) == 0)
    {
      sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.ColorCorrection", 0x2BuLL);
      __p[23] = 15;
      strcpy(__p, "ColorCorrection");
      v134 = sub_2237FB848(a1 + 24, (const void **)__p);
      sub_22322712C((uint64_t)&v322, (_QWORD **)v134, v135, v136, v137, v138);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v139 = (_QWORD *)sub_2231D6E0C(a6, 2u);
      v140 = v139[1];
      *(_QWORD *)&v326[0] = *v139;
      *((_QWORD *)&v326[0] + 1) = v140;
      if (v140)
      {
        v141 = (unint64_t *)(v140 + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      if (!sub_223225C34(v326)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 254, (uint64_t)"color_texture", 13, (uint64_t)"Requested color texture is not valid", 36, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223227180((uint64_t)&v322, (_QWORD **)v326, 0, 2, v143, v144);
      sub_223227140((uint64_t)&v322, (uint64_t)a4, 0x90u, 0, 0, v145);
      v146 = sub_2231D020C(a6);
      v147 = sub_2231D0214(a6);
      *(_OWORD *)__p = xmmword_22464FC70;
      v317 = (_QWORD *)vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v147, v146)), (float32x2_t)vdup_n_s32(0x3D800000u))));
      LODWORD(v318) = 1;
      sub_2232271B4((uint64_t)&v322, (uint64_t)&v317, (uint64_t)__p, v148, v149, v150);
      v151 = (std::__shared_weak_count *)*((_QWORD *)&v326[0] + 1);
      if (*((_QWORD *)&v326[0] + 1))
      {
        v152 = (unint64_t *)(*((_QWORD *)&v326[0] + 1) + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
    }
  }
  sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.FuseRawframeToKeyframe", 0x32uLL);
  HIDWORD(v154) = a7 - 35;
  LODWORD(v154) = a7 - 35;
  switch((v154 >> 2))
  {
    case 0u:
      v155 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v155;
      *(_OWORD *)&__p[8] = xmmword_2245B8D50;
      qmemcpy(v155, "FuseRawframeToKeyframe_Base", 27);
      v156 = v155 + 27;
      break;
    case 1u:
      v162 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v162;
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      qmemcpy(v162, "FuseRawframeToKeyframe_Color", 28);
      v156 = v162 + 28;
      break;
    case 2u:
      v157 = (char *)operator new(0x28uLL);
      *(_QWORD *)__p = v157;
      *(_OWORD *)&__p[8] = xmmword_2245C77E0;
      qmemcpy(v157, "FuseRawframeToKeyframe_", 23);
      v157[31] = 115;
      v158 = "Semantics";
      goto LABEL_53;
    case 3u:
      v159 = (char *)operator new(0x30uLL);
      *(_QWORD *)__p = v159;
      *(_OWORD *)&__p[8] = xmmword_2245C7A50;
      qmemcpy(v159, "FuseRawframeToKeyframe_", 23);
      v159[39] = 115;
      v160 = "ColorAndSemantics";
      goto LABEL_58;
    case 4u:
      v157 = (char *)operator new(0x28uLL);
      *(_QWORD *)__p = v157;
      *(_OWORD *)&__p[8] = xmmword_2245C77E0;
      qmemcpy(v157, "FuseRawframeToKeyframe_", 23);
      v157[31] = 115;
      v158 = "Materials";
LABEL_53:
      *(_QWORD *)(v157 + 23) = *(_QWORD *)v158;
      v156 = v157 + 32;
      break;
    case 5u:
      v159 = (char *)operator new(0x30uLL);
      *(_QWORD *)__p = v159;
      *(_OWORD *)&__p[8] = xmmword_2245C7A50;
      qmemcpy(v159, "FuseRawframeToKeyframe_", 23);
      v159[39] = 115;
      v160 = "ColorAndMaterials";
LABEL_58:
      *(_OWORD *)(v159 + 23) = *(_OWORD *)v160;
      v156 = v159 + 40;
      break;
    case 6u:
      v163 = (char *)operator new(0x30uLL);
      qmemcpy(v163, "FuseRawframeToKeyframe_SemanticsAndMaterials", 44);
      *(_QWORD *)__p = v163;
      *(_OWORD *)&__p[8] = xmmword_2245C43F0;
      v156 = v163 + 44;
      break;
    case 7u:
      v161 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v161;
      *(_OWORD *)&__p[8] = xmmword_2245B8D70;
      qmemcpy(v161, "FuseRawframeToKeyframe_All", 26);
      v156 = v161 + 26;
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 974, (uint64_t)"", 0, (uint64_t)"Invalid fusion mask", 19, (void (*)(void **))sub_22457406C);
      abort();
  }
  *v156 = 0;
  v164 = a1 + 24;
  v165 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)&v322, (_QWORD **)v165, v166, v167, v168, v169);
  v170 = operator new(0xCuLL);
  *((_QWORD *)&v326[0] + 1) = v170 + 3;
  *(_QWORD *)&v326[1] = v170 + 3;
  *(_QWORD *)v170 = 0x300000000;
  v170[2] = 4;
  *(_QWORD *)&v326[0] = v170;
  sub_22322719C((uint64_t)&v322, (_QWORD **)(a1 + 48), (uint64_t)v326, 0, v171, v172);
  if (*(_QWORD *)&v326[0])
  {
    *((_QWORD *)&v326[0] + 1) = *(_QWORD *)&v326[0];
    operator delete(*(void **)&v326[0]);
  }
  v173 = operator new(8uLL);
  *(_QWORD *)&v326[0] = v173;
  *v173 = 0x200000001;
  *((_QWORD *)&v326[0] + 1) = v173 + 1;
  *(_QWORD *)&v326[1] = v173 + 1;
  sub_22322719C((uint64_t)&v322, (_QWORD **)(a1 + 64), (uint64_t)v326, 1u, v174, v175);
  if (*(_QWORD *)&v326[0])
  {
    *((_QWORD *)&v326[0] + 1) = *(_QWORD *)&v326[0];
    operator delete(*(void **)&v326[0]);
  }
  v176 = (_QWORD **)sub_2231D2C04(a5, 0);
  sub_223227180((uint64_t)&v322, v176, 3u, 3, v177, v178);
  v179 = (_QWORD **)sub_2231D2C04(a5, 1u);
  sub_223227180((uint64_t)&v322, v179, 4u, 3, v180, v181);
  sub_223227180((uint64_t)&v322, v20, 9u, 0, v182, v183);
  sub_223227180((uint64_t)&v322, v314, 0xAu, 0, v184, v185);
  v186 = (_QWORD **)sub_2231D6E0C(a6, 0);
  sub_223227180((uint64_t)&v322, v186, 0xBu, 1, v187, v188);
  v189 = (_QWORD **)sub_2231D6E0C(a6, 1u);
  sub_223227180((uint64_t)&v322, v189, 0xCu, 1, v190, v191);
  v192 = (_QWORD **)sub_2231D6E0C(a6, 5u);
  sub_223227180((uint64_t)&v322, v192, 0xDu, 2, v193, v194);
  v195 = (_QWORD **)sub_2231D2C04(a5, 5u);
  sub_223227180((uint64_t)&v322, v195, 5u, 3, v196, v197);
  sub_223227180((uint64_t)&v322, v25, 0x14u, 1, v198, v199);
  sub_2232291A8(&v317);
  if ((a7 & 4) != 0)
  {
    v205 = (_QWORD **)sub_2231D2C04(a5, 2u);
    sub_223227180((uint64_t)&v322, v205, 0, 3, v206, v207);
    v202 = (_QWORD **)sub_2231D6E0C(a6, 2u);
  }
  else
  {
    v202 = &v317;
    sub_223227180((uint64_t)&v322, &v317, 0, 3, v200, v201);
  }
  sub_223227180((uint64_t)&v322, v202, 6u, 2, v203, v204);
  if ((a7 & 8) != 0)
  {
    v213 = (_QWORD **)sub_2231D2C04(a5, 3u);
    sub_223227180((uint64_t)&v322, v213, 1u, 3, v214, v215);
    v210 = (_QWORD **)sub_2231D6E0C(a6, 3u);
  }
  else
  {
    v210 = &v317;
    sub_223227180((uint64_t)&v322, &v317, 1u, 3, v208, v209);
  }
  sub_223227180((uint64_t)&v322, v210, 7u, 2, v211, v212);
  if ((a7 & 0x10) != 0)
  {
    v221 = (_QWORD **)sub_2231D2C04(a5, 4u);
    sub_223227180((uint64_t)&v322, v221, 2u, 3, v222, v223);
    v218 = (_QWORD **)sub_2231D6E0C(a6, 4u);
  }
  else
  {
    v218 = &v317;
    sub_223227180((uint64_t)&v322, &v317, 2u, 3, v216, v217);
  }
  sub_223227180((uint64_t)&v322, v218, 8u, 2, v219, v220);
  if (*(_BYTE *)(a3 + 896))
  {
    if (*a8
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 351, (uint64_t)"warped_surface", 14, (uint64_t)"Invalid warped surface!", 23, (void (*)(void **))sub_22457406C))
    {
      if (a9)
      {
        if ((a9 & 4) != 0)
        {
          v225 = (_QWORD **)sub_2231D6E0C(*a8, 2u);
          sub_223227180((uint64_t)&v322, v225, 0xEu, 1, v226, v227);
        }
        if ((a9 & 8) != 0)
        {
          v228 = (_QWORD **)sub_2231D6E0C(*a8, 3u);
          sub_223227180((uint64_t)&v322, v228, 0xFu, 1, v229, v230);
        }
        if ((a9 & 0x10) != 0)
        {
          v231 = (_QWORD **)sub_2231D6E0C(*a8, 4u);
          sub_223227180((uint64_t)&v322, v231, 0x10u, 1, v232, v233);
        }
        if ((a9 & 1) != 0)
        {
          v234 = (_QWORD **)sub_2231D6E0C(*a8, 0);
          sub_223227180((uint64_t)&v322, v234, 0x11u, 1, v235, v236);
        }
        if ((a9 & 2) != 0)
        {
          v237 = (_QWORD **)sub_2231D6E0C(*a8, 1u);
          sub_223227180((uint64_t)&v322, v237, 0x12u, 1, v238, v239);
        }
        if ((a9 & 0x20) != 0)
        {
          v240 = (_QWORD **)sub_2231D6E0C(*a8, 5u);
          sub_223227180((uint64_t)&v322, v240, 0x13u, 1, v241, v242);
        }
        goto LABEL_90;
      }
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 354, (uint64_t)"warped_surfaces_mask", 20, (uint64_t)"Even though it was requested to write warpingresults, the mask for the desired surfaces is 0(no desired surfaces).", 114, (void (*)(void **))sub_22457406C))goto LABEL_90;
    }
    abort();
  }
LABEL_90:
  sub_223227140((uint64_t)&v322, a3 + 608, 0x130u, 0, 0, v224);
  sub_223227140((uint64_t)&v322, (uint64_t)a4, 0x90u, 1u, 0, v243);
  sub_22322715C((uint64_t)&v322, v313, 0, 2u, 1, v244);
  if (*(_BYTE *)(a3 + 897))
    sub_2237FA180(&v324, (void ***)(a1 + 176), 48 * v310);
  v246 = (_QWORD **)(a1 + 176);
  sub_22322715C((uint64_t)&v322, (_QWORD **)(a1 + 176), 0, 4u, 2, v245);
  v247 = sub_2231D020C(a6);
  v248 = sub_2231D0214(a6);
  v326[0] = xmmword_22464FC70;
  v327 = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v248, v247)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  v328 = 1;
  sub_2232271B4((uint64_t)&v322, (uint64_t)&v327, (uint64_t)v326, v249, v250, v251);
  v252 = v318;
  if (!v318)
    goto LABEL_96;
  v253 = (unint64_t *)&v318->__shared_owners_;
  do
    v254 = __ldaxr(v253);
  while (__stlxr(v254 - 1, v253));
  if (v254)
  {
LABEL_96:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
  std::__shared_weak_count::__release_weak(v252);
  if ((__p[23] & 0x80000000) != 0)
LABEL_97:
    operator delete(*(void **)__p);
LABEL_98:
  sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.DetectSceneChange", 0x2DuLL);
  __p[23] = 17;
  strcpy(__p, "DetectSceneChange");
  v255 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)&v322, (_QWORD **)v255, v256, v257, v258, v259);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223227180((uint64_t)&v322, v25, 0x14u, 0, v260, v261);
  sub_223227180((uint64_t)&v322, v28, 0x15u, 1, v262, v263);
  v264 = *(_QWORD ***)a10;
  if (!sub_223225C34(*(_QWORD **)a10)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 418, (uint64_t)"counter_buffer", 14, (uint64_t)"Expected a valid buffer!", 24, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22322715C((uint64_t)&v322, v264, *(_DWORD *)(a10 + 8), 3u, 3, v265);
  v266 = sub_2231D020C(a6);
  v267 = sub_2231D0214(a6);
  *(_OWORD *)__p = xmmword_22464FC70;
  *(uint32x2_t *)&v326[0] = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v267, v266)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  DWORD2(v326[0]) = 1;
  sub_2232271B4((uint64_t)&v322, (uint64_t)v326, (uint64_t)__p, v268, v269, v270);
  if (*(_BYTE *)(a3 + 897))
  {
    v316 = *(int32x2_t *)(a12 + 16);
    if ((!sub_223225C34((_QWORD *)(a1 + 176))
       || 48 * (unint64_t)vmul_lane_s32(v316, v316, 1).u32[0] > sub_223226504((void ***)(a1 + 176), v276, v277, v278, v279, v280))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 450, (uint64_t)"global_buffer && global_buffer.length() >= num_pixels * sizeof(LightChangeResult)", 81, (uint64_t)"Expected a valid global buffer with enough size to hold all pixels!", 67, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_125;
    }
    v281 = (void ***)(a1 + 192);
    sub_2237FA180(&v324, v281, 48 * HIDWORD(*(_QWORD *)(a12 + 24)) * *(_QWORD *)(a12 + 24));
    sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.ReduceLightChangePerThreadgroup", 0x3BuLL);
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
    strcpy(*(char **)__p, "ReduceLightChangePerThreadgroup");
    v282 = sub_2237FB848(v164, (const void **)__p);
    sub_22322712C((uint64_t)&v322, (_QWORD **)v282, v283, v284, v285, v286);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_223227140((uint64_t)&v322, a12, 0x20u, 0, 0, v287);
    sub_22322715C((uint64_t)&v322, v246, 0, 1u, 1, v288);
    sub_22322715C((uint64_t)&v322, v281, 0, 2u, 2, v289);
    *(_QWORD *)&v326[0] = *(_QWORD *)(a12 + 24);
    DWORD2(v326[0]) = 1;
    *(_QWORD *)__p = 0x1000000010;
    *(_DWORD *)&__p[8] = 1;
    sub_2232271B4((uint64_t)&v322, (uint64_t)v326, (uint64_t)__p, v290, v291, v292);
    sub_223CEEF34((uint64_t)&v322, "Keyframing.SurfaceWarpFuser.ReduceAndSolveLightChangeInThreadgroup", 0x42uLL);
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8E00;
    strcpy(*(char **)__p, "ReduceAndSolveLightChangeInThreadgroup");
    v293 = sub_2237FB848(v164, (const void **)__p);
    sub_22322712C((uint64_t)&v322, (_QWORD **)v293, v294, v295, v296, v297);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_223227140((uint64_t)&v322, a12, 0x20u, 0, 0, v298);
    v300 = *(_BYTE *)a12 ? 3 : 1;
    sub_22322715C((uint64_t)&v322, v281, 0, 2u, v300, v299);
    v301 = *(_QWORD ***)a11;
    if (!sub_223225C34(*(_QWORD **)a11)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 485, (uint64_t)"detection_result", 16, (uint64_t)"Expected a valid buffer!", 24, (void (*)(void **))sub_22457406C))
    {
LABEL_125:
      abort();
    }
    sub_22322715C((uint64_t)&v322, v301, *(_DWORD *)(a11 + 8), 3u, 2, v302);
    *(_QWORD *)__p = 0x100000001;
    *(_DWORD *)&__p[8] = 1;
    sub_2232271B4((uint64_t)&v322, (uint64_t)__p, (uint64_t)v326, v303, v304, v305);
  }
  sub_223226DF0((uint64_t)&v322, v271, v272, v273, v274, v275);
  sub_223226D74(&v322);
  v306 = v325;
  if (v325)
  {
    v307 = (unint64_t *)&v325->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  return a2;
}

void sub_2237FCFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  sub_223167354(v32 - 144);
  sub_223226D74(&a32);
  sub_223167354(v32 - 160);
  _Unwind_Resume(a1);
}

void sub_2237FD0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_223226D74((uint64_t *)va);
  sub_223167354(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_2237FD0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  sub_223226D74(&a32);
  sub_223167354(v32 - 160);
  _Unwind_Resume(a1);
}

void sub_2237FD10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  if (a28 < 0)
    operator delete(__p);
  sub_223226D74(&a35);
  sub_223167354(v35 - 160);
  _Unwind_Resume(a1);
}

void sub_2237FD148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2237FD15C(uint64_t a1, void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;

  sub_223228EB4(&v60);
  sub_223228F70(&v60, 0, v4, v5, v6, v7);
  sub_223228F50(&v60, 0, v8, v9, v10, v11);
  sub_223228F60(&v60, 0, v12, v13, v14, v15);
  sub_223228F30(&v60, 1, v16, v17, v18, v19);
  sub_223228F40(&v60, 1, v20, v21, v22, v23);
  sub_223228F80(&v60, 0, v24, v25, v26, v27);
  nullsub_30(a2);
  sub_223228F90(&v59, a2, &v60, v28, v29, v30);
  v35 = v59;
  v59 = 0uLL;
  v36 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v35;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_223228F30(&v60, 0, v31, v32, v33, v34);
  sub_223228F40(&v60, 0, v42, v43, v44, v45);
  nullsub_30(a2);
  sub_223228F90(&v59, a2, &v60, v46, v47, v48);
  v49 = v59;
  v59 = 0uLL;
  v50 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v49;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v61;
  if (v61)
  {
    v57 = (unint64_t *)&v61->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_2237FD368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FD37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FD390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237FD3A4(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  void ***v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *p_p;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  size_t v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  void *v104;
  int v105;
  void ***v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  NSObject *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  void *v122;
  _DWORD *v123;
  char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  void ***v184;
  unint64_t v185;
  char *category;
  char *categorya;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  __int128 v192;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v194;
  const char *v195;
  int v196;
  const char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *object;
  void *v204[2];
  __int128 v205;
  void *__p;
  size_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;

  v210 = *MEMORY[0x24BDAC8D0];
  v8 = (void ***)(a1 + 18);
  if (sub_223225C34(a1 + 18) && sub_223226504(v8, v9, v10, v11, v12, v13) == a3)
    goto LABEL_109;
  sub_2237FAAAC(&v200);
  if (**(int **)(v200 + 56) <= 3)
  {
    v14 = *(unsigned __int8 *)(v200 + 72);
    v15 = sub_22322F254(v200, "OSLogSurrogateAppender", 1, 0);
    v16 = v15;
    if (v14 || v15 != 0)
    {
      v182 = v14;
      category = (char *)a2;
      *(_QWORD *)&v192 = &v200;
      *((std::chrono::steady_clock::time_point *)&v192 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v194 = 3;
      v195 = "unknown file";
      v196 = 519;
      v198 = 0;
      v199 = 0;
      v197 = "unknown function";
      v18 = v200;
      v19 = (const char *)(v200 + 16);
      v180 = v200 + 16;
      if (*(char *)(v200 + 39) < 0)
      {
        v19 = *(const char **)(v200 + 16);
        v20 = *(_QWORD *)(v200 + 24);
        v188 = a4;
        v190 = a3;
        v184 = v8;
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v200 + 39);
        v188 = a4;
        v190 = a3;
        v184 = v8;
        v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v21 & 1) != 0)
          goto LABEL_12;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v205 && SHIBYTE(v204[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_12:
      if (byte_255788F57 >= 0)
        v23 = (const char *)&xmmword_255788F40;
      else
        v23 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v24 = byte_255788F57;
      else
        v24 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v23, v19);
      v25 = v204;
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v24 >= 0x17)
      {
        v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v26 = v24 | 7;
        v27 = v26 + 1;
        v25 = operator new(v26 + 1);
        v204[1] = (void *)v24;
        *(_QWORD *)&v205 = v27 | 0x8000000000000000;
        v204[0] = v25;
      }
      else
      {
        BYTE7(v205) = v24;
        if (!v24)
        {
LABEL_26:
          *((_BYTE *)v25 + v24) = 0;
          BYTE8(v205) = 1;
          p_p = &__p;
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          a4 = v188;
          v8 = v184;
          if (v20 >= 0x17)
          {
            v30 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v30 = v20 | 7;
            v31 = v30 + 1;
            p_p = operator new(v30 + 1);
            v207 = v20;
            v208 = v31 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v208) = v20;
            if (!v20)
            {
              LOBYTE(__p) = 0;
              v209 = 1;
              v29 = object;
              if ((SHIBYTE(v208) & 0x80000000) == 0)
                goto LABEL_30;
              goto LABEL_36;
            }
          }
          memmove(p_p, v19, v20);
          *((_BYTE *)p_p + v20) = 0;
          v209 = 1;
          v29 = object;
          if ((SHIBYTE(v208) & 0x80000000) == 0)
          {
LABEL_30:
            if (!BYTE8(v205))
              goto LABEL_39;
            goto LABEL_37;
          }
LABEL_36:
          operator delete(__p);
          if (!BYTE8(v205))
          {
LABEL_39:
            if (object)
              os_release(object);
            if (v16 && *(_QWORD *)(v16 + 24))
            {
              v32 = _os_log_pack_size();
              v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
              v34 = (std::__shared_weak_count *)operator new();
              v35 = v34;
              v34->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v34->__shared_weak_owners_ = 0;
              v34[1].__vftable = v33;
              object = v33;
              v204[0] = v33;
              v204[1] = v34;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
              v205 = 0uLL;
              __p = 0;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v35);
              }
              v39 = object;
              v40 = (_DWORD *)_os_log_pack_fill();
              *v40 = 67109120;
              v40[1] = v190;
              v41 = (char *)operator new();
              v42 = *(unsigned __int8 *)(v18 + 39);
              v43 = v180;
              if ((v42 & 0x80u) != 0)
              {
                v43 = *(_QWORD *)(v18 + 16);
                v42 = *(_QWORD *)(v18 + 24);
              }
              *(_QWORD *)v41 = v39;
              *(_OWORD *)(v41 + 8) = *(_OWORD *)v204;
              v204[0] = 0;
              v204[1] = 0;
              *(_OWORD *)(v41 + 24) = v205;
              v205 = 0uLL;
              *((_QWORD *)v41 + 5) = v43;
              *((_QWORD *)v41 + 6) = v42;
              v41[56] = 1;
              v201 = 0;
              v202 = v41;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v202);
              v44 = v182;
              v45 = v202;
              v202 = 0;
              a2 = (uint64_t)category;
              a3 = v190;
              if (v45)
              {
                v46 = (std::__shared_weak_count *)*((_QWORD *)v45 + 4);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = (std::__shared_weak_count *)*((_QWORD *)v45 + 2);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                v52 = v201;
                v201 = 0;
                if (v52)
                {
                  v53 = *(std::__shared_weak_count **)(v52 + 32);
                  if (v53)
                  {
                    v54 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  v56 = *(std::__shared_weak_count **)(v52 + 16);
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
                }
              }
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
              if (*((_QWORD *)&v205 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v62 = (std::__shared_weak_count *)v204[1];
              if (v204[1])
              {
                v63 = (unint64_t *)((char *)v204[1] + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
            }
            else
            {
              os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
              LODWORD(object) = 67109120;
              a3 = v190;
              HIDWORD(object) = v190;
              v65 = (void *)_os_log_send_and_compose_impl();
              a2 = (uint64_t)category;
              v44 = v182;
              if (v65)
                free(v65);
            }
            if (v44)
            {
              sub_22322C138((uint64_t)&v192, "Allocating complete semantic histogram size: %d", a3);
              sub_223182C08((uint64_t)&v192);
            }
            sub_223182C08((uint64_t)&v192);
            v66 = v199;
            if (v199)
            {
              v67 = (unint64_t *)&v199->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            goto LABEL_93;
          }
LABEL_37:
          if (SBYTE7(v205) < 0)
            operator delete(v204[0]);
          goto LABEL_39;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_26;
    }
  }
LABEL_93:
  sub_223227930((uint64_t *)&v202);
  sub_2232265F4(a2, v69, v70, v71, v72, v73, &object);
  nullsub_30(&object);
  sub_223226080(&v192, (void ***)&object, a3, 0x20u, v74, v75);
  v81 = v192;
  v192 = 0uLL;
  v82 = (std::__shared_weak_count *)a1[19];
  *((_OWORD *)a1 + 9) = v81;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)v204[0];
  if (v204[0])
  {
    v89 = (unint64_t *)((char *)v204[0] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  sub_22322797C(&v202, v76, v77, v78, v79, v80);
LABEL_109:
  if (sub_223225C34(a1 + 20) && sub_223226504((void ***)a1 + 20, v91, v92, v93, v94, v95) == a4)
    goto LABEL_215;
  sub_2237FAAAC(&v200);
  if (**(int **)(v200 + 56) <= 3)
  {
    v96 = *(unsigned __int8 *)(v200 + 72);
    v97 = sub_22322F254(v200, "OSLogSurrogateAppender", 1, 0);
    v98 = v97;
    if (v96 || v97)
    {
      *(_QWORD *)&v192 = &v200;
      *((std::chrono::steady_clock::time_point *)&v192 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v194 = 3;
      v195 = "unknown file";
      v196 = 527;
      v198 = 0;
      v199 = 0;
      v197 = "unknown function";
      v99 = *(_QWORD *)v192;
      if (*(char *)(*(_QWORD *)v192 + 39) < 0)
      {
        v100 = *(_QWORD *)(v99 + 24);
        categorya = *(char **)(v99 + 16);
      }
      else
      {
        v100 = *(unsigned __int8 *)(*(_QWORD *)v192 + 39);
        categorya = (char *)(*(_QWORD *)v192 + 16);
      }
      v181 = *(_QWORD *)v192 + 16;
      v183 = *(_QWORD *)v192;
      v185 = v98;
      v189 = a4;
      v191 = a3;
      v101 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v205 && SHIBYTE(v204[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v102 = (const char *)&xmmword_255788F40;
      else
        v102 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v103 = byte_255788F57;
      else
        v103 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v102, categorya);
      v104 = v204;
      if (v103 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v103 >= 0x17)
      {
        v105 = v96;
        v106 = v8;
        v107 = a2;
        v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v108 = v103 | 7;
        v109 = v108 + 1;
        v104 = operator new(v108 + 1);
        v204[1] = (void *)v103;
        *(_QWORD *)&v205 = v109 | 0x8000000000000000;
        v204[0] = v104;
        a2 = v107;
        v8 = v106;
        v96 = v105;
      }
      else
      {
        BYTE7(v205) = v103;
        if (!v103)
        {
LABEL_132:
          *((_BYTE *)v104 + v103) = 0;
          BYTE8(v205) = 1;
          v110 = &__p;
          if (v100 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          a4 = v189;
          if (v100 >= 0x17)
          {
            v113 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v100 | 7) != 0x17)
              v113 = v100 | 7;
            v114 = v113 + 1;
            v110 = operator new(v113 + 1);
            v207 = v100;
            v208 = v114 | 0x8000000000000000;
            __p = v110;
          }
          else
          {
            HIBYTE(v208) = v100;
            if (!v100)
            {
              LOBYTE(__p) = 0;
              v209 = 1;
              v111 = object;
              if ((SHIBYTE(v208) & 0x80000000) == 0)
                goto LABEL_136;
              goto LABEL_142;
            }
          }
          memmove(v110, categorya, v100);
          *((_BYTE *)v110 + v100) = 0;
          v209 = 1;
          v111 = object;
          if ((SHIBYTE(v208) & 0x80000000) == 0)
          {
LABEL_136:
            v112 = v185;
            if (!BYTE8(v205))
              goto LABEL_145;
            goto LABEL_143;
          }
LABEL_142:
          operator delete(__p);
          v112 = v185;
          if (!BYTE8(v205))
          {
LABEL_145:
            if (object)
              os_release(object);
            if (v112 && *(_QWORD *)(v112 + 24))
            {
              v115 = _os_log_pack_size();
              v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
              v117 = (std::__shared_weak_count *)operator new();
              v118 = v117;
              v117->__shared_owners_ = 0;
              v119 = (unint64_t *)&v117->__shared_owners_;
              v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v117->__shared_weak_owners_ = 0;
              v117[1].__vftable = v116;
              object = v116;
              v204[0] = v116;
              v204[1] = v117;
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
              v205 = 0uLL;
              __p = 0;
              do
                v121 = __ldaxr(v119);
              while (__stlxr(v121 - 1, v119));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v118);
              }
              v122 = object;
              v123 = (_DWORD *)_os_log_pack_fill();
              *v123 = 67109120;
              v123[1] = v189;
              v124 = (char *)operator new();
              v125 = v96;
              v126 = *(unsigned __int8 *)(v183 + 39);
              v127 = v181;
              if ((v126 & 0x80u) != 0)
              {
                v127 = *(_QWORD *)(v183 + 16);
                v126 = *(_QWORD *)(v183 + 24);
              }
              *(_QWORD *)v124 = v122;
              *(_OWORD *)(v124 + 8) = *(_OWORD *)v204;
              v204[0] = 0;
              v204[1] = 0;
              *(_OWORD *)(v124 + 24) = v205;
              v205 = 0uLL;
              *((_QWORD *)v124 + 5) = v127;
              *((_QWORD *)v124 + 6) = v126;
              v124[56] = 1;
              v201 = 0;
              v202 = v124;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v185 + 24) + 40))(*(_QWORD *)(v185 + 24), &v202);
              v128 = v202;
              v202 = 0;
              a3 = v191;
              if (v128)
              {
                v129 = (std::__shared_weak_count *)*((_QWORD *)v128 + 4);
                if (v129)
                {
                  v130 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                v132 = (std::__shared_weak_count *)*((_QWORD *)v128 + 2);
                if (v132)
                {
                  v133 = (unint64_t *)&v132->__shared_owners_;
                  do
                    v134 = __ldaxr(v133);
                  while (__stlxr(v134 - 1, v133));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                    std::__shared_weak_count::__release_weak(v132);
                  }
                }
                MEMORY[0x227684CE8](v128, 0x10F0C40B62ED6C6);
                v135 = v201;
                v201 = 0;
                if (v135)
                {
                  v136 = *(std::__shared_weak_count **)(v135 + 32);
                  if (v136)
                  {
                    v137 = (unint64_t *)&v136->__shared_owners_;
                    do
                      v138 = __ldaxr(v137);
                    while (__stlxr(v138 - 1, v137));
                    if (!v138)
                    {
                      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                      std::__shared_weak_count::__release_weak(v136);
                    }
                  }
                  v139 = *(std::__shared_weak_count **)(v135 + 16);
                  if (v139)
                  {
                    v140 = (unint64_t *)&v139->__shared_owners_;
                    do
                      v141 = __ldaxr(v140);
                    while (__stlxr(v141 - 1, v140));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                      std::__shared_weak_count::__release_weak(v139);
                    }
                  }
                  MEMORY[0x227684CE8](v135, 0x10F0C40B62ED6C6);
                }
              }
              v142 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
              v96 = v125;
              if (*((_QWORD *)&v205 + 1))
              {
                v143 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              v145 = (std::__shared_weak_count *)v204[1];
              if (v204[1])
              {
                v146 = (unint64_t *)((char *)v204[1] + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
            }
            else
            {
              os_log_type_enabled(v111, OS_LOG_TYPE_INFO);
              LODWORD(object) = 67109120;
              HIDWORD(object) = v189;
              v148 = (void *)_os_log_send_and_compose_impl();
              a3 = v191;
              if (v148)
                free(v148);
            }
            if (v96)
            {
              sub_22322C138((uint64_t)&v192, "Allocating complete material histogram size: %d", v189);
              sub_223182C08((uint64_t)&v192);
            }
            sub_223182C08((uint64_t)&v192);
            v149 = v199;
            if (v199)
            {
              v150 = (unint64_t *)&v199->__shared_owners_;
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            goto LABEL_199;
          }
LABEL_143:
          if (SBYTE7(v205) < 0)
            operator delete(v204[0]);
          goto LABEL_145;
        }
      }
      memmove(v104, v102, v103);
      goto LABEL_132;
    }
  }
LABEL_199:
  sub_223227930((uint64_t *)&v202);
  sub_2232265F4(a2, v152, v153, v154, v155, v156, &object);
  nullsub_30(&object);
  sub_223226080(&v192, (void ***)&object, a4, 0x20u, v157, v158);
  v164 = v192;
  v192 = 0uLL;
  v165 = (std::__shared_weak_count *)a1[21];
  *((_OWORD *)a1 + 10) = v164;
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v169 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (std::__shared_weak_count *)v204[0];
  if (v204[0])
  {
    v172 = (unint64_t *)((char *)v204[0] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  sub_22322797C(&v202, v159, v160, v161, v162, v163);
LABEL_215:
  sub_223226BBC(a2, (uint64_t)&object);
  sub_223CEF07C((uint64_t)&object, "Keyframing.NVSWarpFuser.InitializeBuffers", 0x29uLL);
  LODWORD(v192) = 0;
  DWORD1(v192) = a3;
  sub_223225FEC((uint64_t)&object, v8, (unsigned int *)&v192, 0);
  LODWORD(v192) = 0;
  DWORD1(v192) = a4;
  sub_223225FEC((uint64_t)&object, (_QWORD **)a1 + 20, (unsigned int *)&v192, 0);
  sub_223226DF0((uint64_t)&object, v174, v175, v176, v177, v178);
  sub_223226D74(&object);
  return a2;
}

void sub_2237FE450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237FE498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237FE52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237FE540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

const char *sub_2237FE698(uint64_t a1, const char *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, int a9)
{
  int v14;
  int v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD **v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  _BYTE *v116;
  _OWORD *v117;
  __int128 v118;
  const char *v119;
  char *v120;
  const char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD **v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD **v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD **v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD **v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD **v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD **v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD **v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD **v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD **v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD **v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD **v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD **v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD **v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *p_shared_owners;
  unint64_t v206;
  void *v211[2];
  _QWORD *v212;
  _BYTE __p[24];
  _QWORD v214[3];
  void **v215;
  std::__shared_weak_count *v216;
  uint32x2_t v217;
  int v218;

  sub_2232265F4((uint64_t)a2, a2, a3, (uint64_t)a4, a5, a6, &v215);
  v14 = sub_2231D020C(a6);
  v15 = sub_2231D0214(a6);
  sub_2237FA180(&v215, (void ***)(a1 + 80), 4 * v14 * v15);
  v16 = (const char *)sub_2231D020C(a6);
  v17 = sub_2231D0214(a6);
  sub_2237FABA0(&v215, (void ***)(a1 + 112), 0x19u, v16, v17);
  v18 = (const char *)sub_2231D020C(a6);
  v19 = sub_2231D0214(a6);
  sub_2237FABA0(&v215, (void ***)(a1 + 128), 0x19u, v18, v19);
  v20 = sub_2231D021C(a6);
  if (4 * (v20 * HIDWORD(v20)) != sub_223226504((void ***)(a1 + 80), v21, v22, v23, v24, v25)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 38, (uint64_t)"buffer.length() == size[0] * size[1] * element_size", 51, (uint64_t)"Incorrect buffer size", 21, (void (*)(void **))sub_22457406C)|| ((v26 = sub_2231D021C(a6), sub_223229314((void ***)(a1 + 112), v27, v28, v29, v30, v31) != (_DWORD)v26)|| sub_223229330((void ***)(a1 + 112), v32, v33, v34, v35, v36) != HIDWORD(v26))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp",
         43,
         (uint64_t)"texture.width() == size[0] && texture.height() == size[1]",
         57,
         (uint64_t)"Incorrect buffer size",
         21,
         (void (*)(void **))sub_22457406C)
    || ((v37 = sub_2231D021C(a6),
         sub_223229314((void ***)(a1 + 128), v38, v39, v40, v41, v42) != (_DWORD)v37)
     || sub_223229330((void ***)(a1 + 128), v43, v44, v45, v46, v47) != HIDWORD(v37))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 43, (uint64_t)"texture.width() == size[0] && texture.height() == size[1]", 57, (uint64_t)"Incorrect buffer size", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223226BBC((uint64_t)a2, (uint64_t)v214);
  sub_223CEF07C((uint64_t)v214, "Keyframing.NVSWarpFuser.CopyDepthConfidence", 0x2BuLL);
  v48 = (const char *)sub_2231D6E0C(a6, 0);
  *(_QWORD *)__p = 0;
  *(_DWORD *)&__p[8] = 0;
  LODWORD(v211[0]) = sub_2231D020C(a6);
  HIDWORD(v211[0]) = sub_2231D0214(a6);
  LODWORD(v211[1]) = 1;
  v217 = 0;
  v218 = 0;
  sub_223225EB8((uint64_t)v214, v48, 0, 0, (uint64_t)__p, (uint64_t)v211, (uint64_t **)(a1 + 112), 0, 0, (uint64_t)&v217);
  v49 = (const char *)sub_2231D6E0C(a6, 1u);
  *(_QWORD *)__p = 0;
  *(_DWORD *)&__p[8] = 0;
  v50 = sub_2231D020C(a6);
  v211[0] = (void *)__PAIR64__(sub_2231D0214(a6), v50);
  LODWORD(v211[1]) = 1;
  v217 = 0;
  v218 = 0;
  sub_223225EB8((uint64_t)v214, v49, 0, 0, (uint64_t)__p, (uint64_t)v211, (uint64_t **)(a1 + 128), 0, 0, (uint64_t)&v217);
  sub_223226DF0((uint64_t)v214, v51, v52, v53, v54, v55);
  sub_223226D74(v214);
  sub_223226BD8((uint64_t)a2, (uint64_t)v214);
  sub_223CEEF34((uint64_t)v214, "Keyframing.NVSWarpFuser.ClearRasterizationBuffers", 0x31uLL);
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8D00;
  strcpy(*(char **)__p, "ClearRasterizationBuffers");
  v56 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)v214, (_QWORD **)v56, v57, v58, v59, v60);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223227140((uint64_t)v214, a3, 0x260u, 0, 0, v61);
  sub_22322715C((uint64_t)v214, (_QWORD **)(a1 + 80), 0, 1u, 2, v62);
  v63 = sub_2231D020C(a6);
  v64 = sub_2231D0214(a6);
  *(_OWORD *)__p = xmmword_22464FC70;
  v211[0] = (void *)vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v64, v63)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  LODWORD(v211[1]) = 1;
  sub_2232271B4((uint64_t)v214, (uint64_t)v211, (uint64_t)__p, v65, v66, v67);
  sub_223CEEF34((uint64_t)v214, "Keyframing.NVSWarpFuser.GenerateSurfels", 0x27uLL);
  __p[23] = 15;
  strcpy(__p, "GenerateSurfels");
  v68 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)v214, (_QWORD **)v68, v69, v70, v71, v72);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v73 = (_QWORD **)sub_2231D2C04(a5, 0);
  sub_223227180((uint64_t)v214, v73, 0, 3, v74, v75);
  v76 = (_QWORD **)sub_2231D2C04(a5, 1u);
  sub_223227180((uint64_t)v214, v76, 1u, 3, v77, v78);
  v79 = (_QWORD **)sub_2231D2C04(a5, 5u);
  sub_223227180((uint64_t)v214, v79, 2u, 3, v80, v81);
  sub_223227140((uint64_t)v214, a3, 0x260u, 0, 0, v82);
  sub_22322715C((uint64_t)v214, (_QWORD **)(a1 + 80), 0, 1u, 3, v83);
  v84 = sub_2231D020C(a5);
  v85 = sub_2231D0214(a5);
  *(_OWORD *)__p = xmmword_22464FC70;
  v211[0] = (void *)vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v85, v84)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  LODWORD(v211[1]) = 1;
  sub_2232271B4((uint64_t)v214, (uint64_t)v211, (uint64_t)__p, v86, v87, v88);
  if ((a7 & 4) != 0)
  {
    __asm { FMOV            V1.4S, #1.0 }
    if ((vminvq_u32((uint32x4_t)vceqq_f32(a4[4], _Q1)) & 0x80000000) == 0)
    {
      sub_223CEEF34((uint64_t)v214, "Keyframing.NVSWarpFuser.ColorCorrection", 0x27uLL);
      __p[23] = 15;
      strcpy(__p, "ColorCorrection");
      v94 = sub_2237FB848(a1 + 24, (const void **)__p);
      sub_22322712C((uint64_t)v214, (_QWORD **)v94, v95, v96, v97, v98);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v99 = sub_2231D6E0C(a6, 2u);
      v100 = *(unint64_t **)(v99 + 8);
      v211[0] = *(void **)v99;
      v211[1] = v100;
      if (v100)
      {
        v101 = v100 + 1;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      if (!sub_223225C34(v211)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 660, (uint64_t)"color_texture", 13, (uint64_t)"Requested color texture is not valid", 36, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223227180((uint64_t)v214, (_QWORD **)v211, 0, 2, v103, v104);
      sub_223227140((uint64_t)v214, (uint64_t)a4, 0x90u, 0, 0, v105);
      v106 = sub_2231D020C(a6);
      v107 = sub_2231D0214(a6);
      *(_OWORD *)__p = xmmword_22464FC70;
      v217 = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v107, v106)), (float32x2_t)vdup_n_s32(0x3D800000u))));
      v218 = 1;
      sub_2232271B4((uint64_t)v214, (uint64_t)&v217, (uint64_t)__p, v108, v109, v110);
      v111 = (std::__shared_weak_count *)v211[1];
      if (v211[1])
      {
        v112 = (unint64_t *)((char *)v211[1] + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
    }
  }
  sub_223CEEF34((uint64_t)v214, "Keyframing.NVSWarpFuser.InverseWarpAndFuseNVS", 0x2DuLL);
  HIDWORD(v114) = a7 - 35;
  LODWORD(v114) = a7 - 35;
  switch((v114 >> 2))
  {
    case 0u:
      v115 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v115;
      *(_OWORD *)&__p[8] = xmmword_2245B8D70;
      qmemcpy(v115, "InverseWarpAndFuseNVS_Base", 26);
      v116 = v115 + 26;
      break;
    case 1u:
      v123 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v123;
      *(_OWORD *)&__p[8] = xmmword_2245B8D50;
      qmemcpy(v123, "InverseWarpAndFuseNVS_Color", 27);
      v116 = v123 + 27;
      break;
    case 2u:
      v117 = operator new(0x20uLL);
      *(_QWORD *)__p = v117;
      v118 = xmmword_2245B8EA0;
      v119 = "InverseWarpAndFuseNVS_Semantics";
      goto LABEL_31;
    case 3u:
      v120 = (char *)operator new(0x28uLL);
      *(_QWORD *)__p = v120;
      *(_OWORD *)&__p[8] = xmmword_2245B9440;
      v121 = "InverseWarpAndFuseNVS_ColorAndSemantics";
      goto LABEL_36;
    case 4u:
      v117 = operator new(0x20uLL);
      *(_QWORD *)__p = v117;
      v118 = xmmword_2245B8EA0;
      v119 = "InverseWarpAndFuseNVS_Materials";
LABEL_31:
      *(_OWORD *)&__p[8] = v118;
      *v117 = *(_OWORD *)v119;
      *(_OWORD *)((char *)v117 + 15) = *(_OWORD *)(v119 + 15);
      v116 = (char *)v117 + 31;
      break;
    case 5u:
      v120 = (char *)operator new(0x28uLL);
      *(_QWORD *)__p = v120;
      *(_OWORD *)&__p[8] = xmmword_2245B9440;
      v121 = "InverseWarpAndFuseNVS_ColorAndMaterials";
LABEL_36:
      v124 = *((_OWORD *)v121 + 1);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v124;
      *(_QWORD *)(v120 + 31) = *(_QWORD *)(v121 + 31);
      v116 = v120 + 39;
      break;
    case 6u:
      v125 = (char *)operator new(0x30uLL);
      *(_QWORD *)__p = v125;
      *(_OWORD *)&__p[8] = xmmword_2245C76D0;
      qmemcpy(v125, "InverseWarpAndFuseNVS_SemanticsAndMaterials", 43);
      v116 = v125 + 43;
      break;
    case 7u:
      v122 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v122;
      *(_OWORD *)&__p[8] = xmmword_2245B8D00;
      qmemcpy(v122, "InverseWarpAndFuseNVS_All", 25);
      v116 = v122 + 25;
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 563, (uint64_t)"", 0, (uint64_t)"Invalid fusion mask!", 20, (void (*)(void **))sub_22457406C);
      abort();
  }
  *v116 = 0;
  v126 = sub_2237FB848(a1 + 24, (const void **)__p);
  sub_22322712C((uint64_t)v214, (_QWORD **)v126, v127, v128, v129, v130);
  v131 = operator new(0xCuLL);
  v211[1] = v131 + 3;
  v212 = v131 + 3;
  *(_QWORD *)v131 = 0x300000000;
  v131[2] = 4;
  v211[0] = v131;
  sub_22322719C((uint64_t)v214, (_QWORD **)(a1 + 48), (uint64_t)v211, 0, v132, v133);
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  v134 = operator new(8uLL);
  v211[0] = v134;
  *v134 = 0x200000001;
  v211[1] = v134 + 1;
  v212 = v134 + 1;
  sub_22322719C((uint64_t)v214, (_QWORD **)(a1 + 64), (uint64_t)v211, 1u, v135, v136);
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  if ((a7 & 4) != 0)
  {
    v138 = (_QWORD **)sub_2231D2C04(a5, 2u);
    sub_223227180((uint64_t)v214, v138, 0, 3, v139, v140);
    v141 = (_QWORD **)sub_2231D6E0C(a6, 2u);
    sub_223227180((uint64_t)v214, v141, 6u, 2, v142, v143);
  }
  if ((a7 & 8) != 0)
  {
    v144 = (_QWORD **)sub_2231D2C04(a5, 3u);
    sub_223227180((uint64_t)v214, v144, 1u, 3, v145, v146);
  }
  if ((a7 & 0x10) != 0)
  {
    v147 = (_QWORD **)sub_2231D2C04(a5, 4u);
    sub_223227180((uint64_t)v214, v147, 2u, 3, v148, v149);
  }
  if ((a7 & 1) != 0)
  {
    v150 = (_QWORD **)sub_2231D2C04(a5, 0);
    sub_223227180((uint64_t)v214, v150, 3u, 3, v151, v152);
    sub_223227180((uint64_t)v214, (_QWORD **)(a1 + 112), 7u, 0, v153, v154);
    v155 = (_QWORD **)sub_2231D6E0C(a6, 0);
    sub_223227180((uint64_t)v214, v155, 9u, 1, v156, v157);
  }
  if ((a7 & 2) != 0)
  {
    v158 = (_QWORD **)sub_2231D2C04(a5, 1u);
    sub_223227180((uint64_t)v214, v158, 4u, 3, v159, v160);
    sub_223227180((uint64_t)v214, (_QWORD **)(a1 + 128), 8u, 0, v161, v162);
    v163 = (_QWORD **)sub_2231D6E0C(a6, 1u);
    sub_223227180((uint64_t)v214, v163, 0xAu, 1, v164, v165);
  }
  if ((a7 & 0x20) != 0)
  {
    v166 = (_QWORD **)sub_2231D2C04(a5, 5u);
    sub_223227180((uint64_t)v214, v166, 5u, 3, v167, v168);
    v169 = (_QWORD **)sub_2231D6E0C(a6, 5u);
    sub_223227180((uint64_t)v214, v169, 0xBu, 2, v170, v171);
  }
  if (*(_BYTE *)(a3 + 896))
  {
    if (*a8
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 738, (uint64_t)"warped_surface", 14, (uint64_t)"Invalid warped surface!", 23, (void (*)(void **))sub_22457406C))
    {
      if (a9)
      {
        if ((a9 & 4) != 0)
        {
          v172 = (_QWORD **)sub_2231D6E0C(*a8, 2u);
          sub_223227180((uint64_t)v214, v172, 0xCu, 1, v173, v174);
        }
        if ((a9 & 8) != 0)
        {
          v175 = (_QWORD **)sub_2231D6E0C(*a8, 3u);
          sub_223227180((uint64_t)v214, v175, 0xDu, 1, v176, v177);
        }
        if ((a9 & 0x10) != 0)
        {
          v178 = (_QWORD **)sub_2231D6E0C(*a8, 4u);
          sub_223227180((uint64_t)v214, v178, 0xEu, 1, v179, v180);
        }
        if ((a9 & 1) != 0)
        {
          v181 = (_QWORD **)sub_2231D6E0C(*a8, 0);
          sub_223227180((uint64_t)v214, v181, 0xFu, 1, v182, v183);
        }
        if ((a9 & 2) != 0)
        {
          v184 = (_QWORD **)sub_2231D6E0C(*a8, 1u);
          sub_223227180((uint64_t)v214, v184, 0x10u, 1, v185, v186);
        }
        if ((a9 & 0x20) != 0)
        {
          v187 = (_QWORD **)sub_2231D6E0C(*a8, 5u);
          sub_223227180((uint64_t)v214, v187, 0x11u, 1, v188, v189);
        }
        goto LABEL_71;
      }
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/Processing.cpp", 741, (uint64_t)"warped_surfaces_mask", 20, (uint64_t)"Even though it was requested to write warpingresults, the mask for the desired surfaces is 0(no desired surfaces).", 114, (void (*)(void **))sub_22457406C))goto LABEL_71;
    }
    abort();
  }
LABEL_71:
  sub_223227140((uint64_t)v214, a3 + 608, 0x130u, 0, 0, v137);
  sub_223227140((uint64_t)v214, (uint64_t)a4, 0x90u, 1u, 0, v190);
  sub_22322715C((uint64_t)v214, (_QWORD **)(a1 + 80), 0, 2u, 1, v191);
  sub_22322715C((uint64_t)v214, (_QWORD **)(a1 + 144), 0, 3u, 3, v192);
  sub_22322715C((uint64_t)v214, (_QWORD **)(a1 + 160), 0, 4u, 3, v193);
  v194 = sub_2231D020C(a6);
  v195 = sub_2231D0214(a6);
  *(_OWORD *)v211 = xmmword_22464FC70;
  v217 = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v195, v194)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  v218 = 1;
  sub_2232271B4((uint64_t)v214, (uint64_t)&v217, (uint64_t)v211, v196, v197, v198);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223226DF0((uint64_t)v214, v199, v200, v201, v202, v203);
  sub_223226D74(v214);
  v204 = v216;
  if (v216)
  {
    p_shared_owners = (unint64_t *)&v216->__shared_owners_;
    do
      v206 = __ldaxr(p_shared_owners);
    while (__stlxr(v206 - 1, p_shared_owners));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  return a2;
}

void sub_2237FF4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  sub_223167354((uint64_t)&a19);
  sub_223226D74(&a30);
  sub_223167354(v30 - 120);
  _Unwind_Resume(a1);
}

void sub_2237FF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  sub_223226D74(&a27);
  sub_223167354(v27 - 120);
  _Unwind_Resume(a1);
}

void sub_2237FF574(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_2237FF588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  if (a28 < 0)
    operator delete(__p);
  sub_223226D74(&a30);
  sub_223167354(v30 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_2237FF5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  __int128 v34;
  _QWORD v35[3];
  uint32x2_t v36;
  int v37;

  sub_223226BD8(a2, (uint64_t)v35);
  sub_223CEEF34((uint64_t)v35, "Keyframing.NVSWarpFuser.CompleteToCompressedHistogram", 0x35uLL);
  __p = operator new(0x20uLL);
  v34 = xmmword_2245B8E30;
  strcpy((char *)__p, "CompleteToCompressedHistogram");
  v8 = sub_2237FB848(a1 + 24, (const void **)&__p);
  sub_22322712C((uint64_t)v35, (_QWORD **)v8, v9, v10, v11, v12);
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  sub_22322715C((uint64_t)v35, (_QWORD **)(a1 + 144), 0, 0, 3, v13);
  sub_22322715C((uint64_t)v35, (_QWORD **)(a1 + 160), 0, 1u, 3, v14);
  sub_223227140((uint64_t)v35, a3, 0x90u, 2u, 0, v15);
  v16 = (_QWORD **)sub_2231D2C04(a4, 3u);
  sub_223227180((uint64_t)v35, v16, 0, 1, v17, v18);
  v19 = (_QWORD **)sub_2231D2C04(a4, 4u);
  sub_223227180((uint64_t)v35, v19, 1u, 1, v20, v21);
  v22 = sub_2231D020C(a4);
  v23 = sub_2231D0214(a4);
  __p = *(void **)(a1 + 8);
  LODWORD(v34) = *(_DWORD *)(a1 + 16);
  DWORD1(v34) = 1;
  v36 = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v23, v22)), vcvt_f32_u32((uint32x2_t)__p))));
  v37 = 1;
  sub_2232271B4((uint64_t)v35, (uint64_t)&v36, (uint64_t)&__p, v24, v25, v26);
  sub_223226DF0((uint64_t)v35, v27, v28, v29, v30, v31);
  sub_223226D74(v35);
  return a2;
}

void sub_2237FF768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223226D74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2237FF77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_223226D74(&a15);
    _Unwind_Resume(a1);
  }
  sub_223226D74(&a15);
  _Unwind_Resume(a1);
}

void sub_2237FF7B8(_QWORD *a1)
{
  sub_223800750(a1);
  JUMPOUT(0x227684CE8);
}

char *sub_2237FF7DC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_2237FF830@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_2237FF88C(_QWORD *a1@<X8>)
{
  void *v2;
  __int128 v3;
  char v4;
  char v5[22];
  __int16 v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10[2];
  __int16 v11;
  void *v12;
  __int128 v13;
  char v14;
  void *v15;
  __int128 v16;
  char v17;
  void *v18;
  __int128 v19;
  char v20;
  void *v21;
  __int128 v22;
  char v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void *v40[4];
  void *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *__p;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x20uLL);
  v3 = xmmword_2245B8D00;
  strcpy((char *)v2, "ClearRasterizationBuffers");
  v4 = 1;
  v6 = 277;
  strcpy(v5, "CompressRenderedDepth");
  v8 = 15;
  strcpy((char *)v7, "GenerateSurfels");
  v9 = 1;
  v11 = 271;
  strcpy((char *)v10, "ColorCorrection");
  v12 = operator new(0x20uLL);
  v13 = xmmword_2245B8D50;
  strcpy((char *)v12, "FuseRawframeToKeyframe_Base");
  v14 = 1;
  v15 = operator new(0x20uLL);
  v16 = xmmword_2245C6440;
  strcpy((char *)v15, "FuseRawframeToKeyframe_Color");
  v17 = 1;
  v18 = operator new(0x28uLL);
  v19 = xmmword_2245C77E0;
  strcpy((char *)v18, "FuseRawframeToKeyframe_Semantics");
  v20 = 1;
  v21 = operator new(0x28uLL);
  v22 = xmmword_2245C77E0;
  strcpy((char *)v21, "FuseRawframeToKeyframe_Materials");
  v23 = 1;
  v24 = operator new(0x30uLL);
  v25 = 40;
  v26 = 0x8000000000000030;
  strcpy((char *)v24, "FuseRawframeToKeyframe_ColorAndSemantics");
  v27 = 1;
  v28 = operator new(0x30uLL);
  v29 = 40;
  v30 = 0x8000000000000030;
  strcpy((char *)v28, "FuseRawframeToKeyframe_ColorAndMaterials");
  v31 = 1;
  v32 = operator new(0x30uLL);
  v33 = 44;
  v34 = 0x8000000000000030;
  strcpy((char *)v32, "FuseRawframeToKeyframe_SemanticsAndMaterials");
  v35 = 1;
  v36 = operator new(0x20uLL);
  v37 = 26;
  v38 = 0x8000000000000020;
  strcpy((char *)v36, "FuseRawframeToKeyframe_All");
  v39 = 1;
  *(_WORD *)((char *)&v40[2] + 7) = 273;
  strcpy((char *)v40, "DetectSceneChange");
  v41 = operator new(0x20uLL);
  v42 = 31;
  v43 = 0x8000000000000020;
  strcpy((char *)v41, "ReduceLightChangePerThreadgroup");
  v44 = 1;
  __p = operator new(0x28uLL);
  v46 = 38;
  v47 = 0x8000000000000028;
  strcpy((char *)__p, "ReduceAndSolveLightChangeInThreadgroup");
  v48 = 0;
  sub_223800880(a1, (uint64_t)&v2, 0xFuLL);
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v41);
  if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v40[0]);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v36);
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v32);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v28);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v24);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v21);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v18);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_12:
    if (((char)v11 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v12);
  if (((char)v11 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v10[0]);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_14:
    if (((char)v6 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v7[0]);
  if (((char)v6 & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v3) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v2);
    return;
  }
LABEL_30:
  operator delete(*(void **)v5);
  if (SHIBYTE(v3) < 0)
    goto LABEL_31;
}

void sub_2237FFDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *__p;
  char a84;

  if (a84 < 0)
  {
    operator delete(__p);
    if ((a82 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a80 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((a82 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a17 & 0x80000000) == 0)
LABEL_32:
      _Unwind_Resume(a1);
LABEL_31:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_30:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_32;
  goto LABEL_31;
}

_QWORD *sub_2237FFF70(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[21];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[19];
      if (v5)
        goto LABEL_6;
      return sub_2237F9FC0(a1);
    }
  }
  v5 = (std::__shared_weak_count *)a1[19];
  if (!v5)
    return sub_2237F9FC0(a1);
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return sub_2237F9FC0(a1);
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return sub_2237F9FC0(a1);
}

void sub_22380001C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[21];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[19];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[19];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  sub_2237F9FC0(a1);
  JUMPOUT(0x227684CE8);
}

char *sub_2238000CC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_223800120@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_22380017C(_QWORD *a1@<X8>)
{
  void *v2;
  __int128 v3;
  char v4;
  void *v5[2];
  __int16 v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  __int128 v11;
  char v12;
  void *v13;
  __int128 v14;
  char v15;
  void *v16;
  __int128 v17;
  char v18;
  void *v19;
  __int128 v20;
  char v21;
  void *v22;
  __int128 v23;
  char v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void *__p;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x20uLL);
  v3 = xmmword_2245B8D00;
  strcpy((char *)v2, "ClearRasterizationBuffers");
  v4 = 1;
  v6 = 271;
  strcpy((char *)v5, "GenerateSurfels");
  v8 = 15;
  strcpy((char *)v7, "ColorCorrection");
  v9 = 1;
  v10 = operator new(0x20uLL);
  v11 = xmmword_2245B8D70;
  strcpy((char *)v10, "InverseWarpAndFuseNVS_Base");
  v12 = 1;
  v13 = operator new(0x20uLL);
  v14 = xmmword_2245B8D50;
  strcpy((char *)v13, "InverseWarpAndFuseNVS_Color");
  v15 = 1;
  v16 = operator new(0x20uLL);
  v17 = xmmword_2245B8EA0;
  strcpy((char *)v16, "InverseWarpAndFuseNVS_Semantics");
  v18 = 1;
  v19 = operator new(0x20uLL);
  v20 = xmmword_2245B8EA0;
  strcpy((char *)v19, "InverseWarpAndFuseNVS_Materials");
  v21 = 1;
  v22 = operator new(0x28uLL);
  v23 = xmmword_2245B9440;
  strcpy((char *)v22, "InverseWarpAndFuseNVS_ColorAndSemantics");
  v24 = 1;
  v25 = operator new(0x28uLL);
  v26 = 39;
  v27 = 0x8000000000000028;
  strcpy((char *)v25, "InverseWarpAndFuseNVS_ColorAndMaterials");
  v28 = 1;
  v29 = operator new(0x30uLL);
  v30 = 43;
  v31 = 0x8000000000000030;
  strcpy((char *)v29, "InverseWarpAndFuseNVS_SemanticsAndMaterials");
  v32 = 1;
  v33 = operator new(0x20uLL);
  v34 = 25;
  v35 = 0x8000000000000020;
  strcpy((char *)v33, "InverseWarpAndFuseNVS_All");
  v36 = 1;
  __p = operator new(0x20uLL);
  v38 = 29;
  v39 = 0x8000000000000020;
  strcpy((char *)__p, "CompleteToCompressedHistogram");
  v40 = 1;
  sub_223800880(a1, (uint64_t)&v2, 0xCuLL);
  if (SHIBYTE(v39) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v25);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v22);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v19);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v16);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v13);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v10);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    if (((char)v6 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v7[0]);
  if (((char)v6 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v3) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v2);
    return;
  }
LABEL_24:
  operator delete(v5[0]);
  if (SHIBYTE(v3) < 0)
    goto LABEL_25;
}

void sub_2238005D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *__p;
  char a78;

  if (a78 < 0)
  {
    operator delete(__p);
    if ((a76 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a74 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((a76 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a17 & 0x80000000) == 0)
LABEL_26:
      _Unwind_Resume(a1);
LABEL_25:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_24:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_26;
  goto LABEL_25;
}

_QWORD *sub_223800750(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  sub_223CEC820((uint64_t)(a1 + 27));
  v2 = (std::__shared_weak_count *)a1[25];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[23];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[23];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[21];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[19];
      if (v11)
        goto LABEL_16;
      return sub_2237F9FC0(a1);
    }
  }
  v11 = (std::__shared_weak_count *)a1[19];
  if (!v11)
    return sub_2237F9FC0(a1);
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return sub_2237F9FC0(a1);
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return sub_2237F9FC0(a1);
}

_QWORD *sub_223800880(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
      sub_22316E078();
    v5 = 32 * a3;
    v6 = operator new(32 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_223197FA4(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v6[v7 + 24] = *(_BYTE *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_223800958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2238009A8(&a9);
  _Unwind_Resume(a1);
}

void sub_22380096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0)
      operator delete(*(void **)(v10 + v11 - 32));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2238009A8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2238009A8(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223800A40()
{
  JUMPOUT(0x227684CE8);
}

double sub_223800A54(_DWORD *a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int32x4_t v21;
  int v22;
  float v23;
  float v24;
  double result;
  int32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  v11 = a3[3];
  v13 = a1[4];
  v12 = a1[5];
  v14 = a1[6];
  v15 = a1[7];
  __asm { FMOV            V5.4S, #1.0 }
  v21 = _Q5;
  v22 = a1[9];
  if ((a5 & 0xFF00000000) != 0)
  {
    v23 = *(float *)&a6;
    v21 = _Q5;
    if ((a6 & 0xFF00000000) != 0)
    {
      v26 = _Q5;
      v27 = a3[3];
      v28 = a3[2];
      v29 = a3[1];
      v30 = *a3;
      v24 = *(float *)&a5;
      if (*(float *)&a5 <= 0.0
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 110, (uint64_t)"*clipping_point_lux_current > 0.f", 33, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C)|| v23 <= 0.0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 111, (uint64_t)"*clipping_point_lux_candidate > 0.f", 35, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(float *)v21.i32 = v23 / v24;
      v21 = vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
      v21.i32[3] = 1.0;
      v9 = v29;
      v8 = v30;
      v11 = v27;
      v10 = v28;
      _Q5 = v26;
    }
  }
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(int32x4_t *)(a2 + 64) = _Q5;
  *(int32x4_t *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 96) = *a4;
  *(_DWORD *)(a2 + 112) = v13;
  *(_DWORD *)(a2 + 116) = v15;
  *(_DWORD *)(a2 + 104) = v22;
  *(_DWORD *)(a2 + 108) = v12;
  *(_QWORD *)&result = 452930346;
  *(_DWORD *)(a2 + 120) = v14;
  *(_DWORD *)(a2 + 124) = 452930346;
  *(_WORD *)(a2 + 128) = -229;
  return result;
}

__n128 sub_223800BB4(uint64_t a1, __int128 *a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float *a7, int a8)
{
  float32x2_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  char v46;
  _OWORD v47[4];
  _BYTE v48[64];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  float v58;
  float32x4_t v59[29];
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int32 v63;
  uint64_t v64;
  __int32 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = 0x3DCCCCCD40400000;
  v58 = 1.5;
  sub_2237F9D54(a1, v59, (uint64_t)v48, a4, a5, a6, a8);
  v12 = (float32x2_t *)sub_2231D0224((uint64_t)a5);
  v46 = 0;
  sub_223CEC0BC(v12, a7, &v46, (uint64_t)v47, v13);
  v14 = v47[1];
  v15 = v47[2];
  v16 = v47[3];
  *a2 = v47[0];
  a2[1] = v14;
  a2[2] = v15;
  a2[3] = v16;
  v17 = v59[5];
  v18 = v59[6];
  v19 = v59[7];
  a2[4] = (__int128)v59[4];
  a2[5] = (__int128)v17;
  a2[6] = (__int128)v18;
  a2[7] = (__int128)v19;
  v20 = v59[9];
  v21 = v59[10];
  v22 = v59[11];
  a2[8] = (__int128)v59[8];
  a2[9] = (__int128)v20;
  a2[10] = (__int128)v21;
  a2[11] = (__int128)v22;
  v23 = v59[17];
  v24 = v59[18];
  v25 = v59[19];
  a2[16] = (__int128)v59[16];
  a2[17] = (__int128)v23;
  a2[18] = (__int128)v24;
  a2[19] = (__int128)v25;
  v26 = v59[13];
  v27 = v59[14];
  v28 = v59[15];
  a2[12] = (__int128)v59[12];
  a2[13] = (__int128)v26;
  a2[14] = (__int128)v27;
  a2[15] = (__int128)v28;
  v29 = v60;
  v30 = v62;
  v26.i32[0] = v63;
  v31 = v64;
  v27.i32[0] = v65;
  *((_DWORD *)a2 + 118) = v61;
  *((_QWORD *)a2 + 58) = v29;
  *((_DWORD *)a2 + 122) = v26.i32[0];
  *((_QWORD *)a2 + 60) = v30;
  *((_DWORD *)a2 + 126) = v27.i32[0];
  *((_QWORD *)a2 + 62) = v31;
  v32 = v67;
  a2[32] = v66;
  a2[33] = v32;
  HIDWORD(v33) = HIDWORD(v68);
  a2[34] = v68;
  *((_QWORD *)a2 + 70) = v69;
  *((_QWORD *)a2 + 71) = v70;
  *((_QWORD *)a2 + 72) = v71;
  *(_QWORD *)&v33 = *(_QWORD *)a7;
  *((float *)&v33 + 2) = 1.0 / COERCE_FLOAT(HIDWORD(*(_QWORD *)a7));
  a2[37] = v33;
  v34 = *a2;
  v35 = a2[1];
  v36 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v36;
  *(_OWORD *)a3 = v34;
  *(_OWORD *)(a3 + 16) = v35;
  v37 = v50;
  v38 = v51;
  v39 = v52;
  *(_OWORD *)(a3 + 64) = v49;
  *(_OWORD *)(a3 + 80) = v37;
  *(_OWORD *)(a3 + 96) = v38;
  *(_OWORD *)(a3 + 112) = v39;
  v40 = v54;
  v41 = v55;
  v42 = v56;
  *(_OWORD *)(a3 + 128) = v53;
  *(_OWORD *)(a3 + 144) = v40;
  *(_OWORD *)(a3 + 160) = v41;
  *(_OWORD *)(a3 + 176) = v42;
  v44 = a2[29];
  v43 = a2[31];
  *(_OWORD *)(a3 + 224) = a2[30];
  *(_OWORD *)(a3 + 240) = v43;
  *(_OWORD *)(a3 + 208) = v44;
  *(_QWORD *)(a3 + 192) = v57;
  *(float *)(a3 + 256) = v58 + v58;
  *(_QWORD *)&v44 = *(_QWORD *)a7;
  *((float *)&v44 + 2) = 1.0 / COERCE_FLOAT(HIDWORD(*(_QWORD *)a7));
  *(_OWORD *)(a3 + 272) = v44;
  *(_BYTE *)(a3 + 288) = 0;
  result.n128_u64[0] = v44;
  result.n128_u32[2] = DWORD2(v44);
  return result;
}

void sub_223800D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int32x4_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  const char **v38;
  const char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  int v64;
  int8x16_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int8x16_t v68;
  float32x4_t v69;
  __n128 v70;
  float32x2_t v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  float *v75;
  int v81;
  int8x16_t v82;
  __n128 v83;
  __n128 v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  int v96;
  const char *v97;
  float v98;
  float v99;
  float v100;
  float *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float *v107;
  float *v108;
  float *v109;
  float *v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t *v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned __int8 *v121;
  __n128 v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x2_t v125;
  int32x4_t v126;
  float32x2_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  std::string v138;
  __int128 v139;
  _DWORD v140[2];
  _QWORD v141[2];
  std::__shared_weak_count *v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  void *__p;
  int v148;
  char v149;
  char v150;
  _BYTE v151[18];
  int v152;
  int v153;
  uint64_t v154;
  char v155;
  const char *v156;
  unint64_t v157;
  const char *v158;
  uint64_t v159;
  float *v160;
  float *v161;
  unint64_t v162;
  _BYTE v163[4];
  int v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      v8 = v6;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v8[2];
    }
    v9 = *(_QWORD *)(v7 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      v156 = "cv3d.recon.";
      v157 = 11;
      v158 = "FramePreprocessing";
      v159 = 18;
      sub_2231A9820((uint64_t)&v156, (uint64_t)&v160, 0, 0, &v138);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
        {
          qmemcpy(v140, "ixels", 5);
          *(_QWORD *)&v139 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v139 + 1) = 2;
          v14 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          {
            if (*(_BYTE *)(a1 + 56))
            {
              if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              sub_223C3BF78(a1, (uint64_t)&__p);
              v2 = *(_QWORD *)&v151[10];
              v114 = *(std::__shared_weak_count **)&v151[2];
              v3 = v152;
              v117 = v153;
            }
            v15.i64[0] = *(_QWORD *)(a1 + 1336);
            v130 = v15;
            v15.i32[2] = *(_DWORD *)(a1 + 1344);
            v124 = v15;
            v15.i64[0] = *(_QWORD *)(a1 + 1352);
            v126 = v15;
            v15.i32[2] = *(_DWORD *)(a1 + 1360);
            v123 = v15;
            v15.i32[0] = *(_DWORD *)(a1 + 1376);
            v136 = *(float32x2_t *)v15.i8;
            v15.i64[0] = *(_QWORD *)(a1 + 1368);
            v128 = (int8x16_t)v15;
            v15.i64[0] = *(_QWORD *)(a1 + 1384);
            v15.i32[2] = *(_DWORD *)(a1 + 1392);
            v133 = (float32x4_t)v15;
            sub_2241498F4((uint64_t)&v156, 0);
            v16 = *(_QWORD *)(a2 + 8);
            v115 = v14;
            if (!v16)
              goto LABEL_30;
            v17 = *(std::__shared_weak_count **)(a2 + 16);
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldxr(p_shared_owners);
              while (__stxr(v19 + 1, p_shared_owners));
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
              v16 = *(_QWORD *)(a2 + 8);
              v21 = *(std::__shared_weak_count **)(a2 + 16);
              if (v21)
              {
                v22 = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
                do
                  v24 = __ldaxr(v22);
                while (__stlxr(v24 - 1, v22));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }
            }
            if (*(_BYTE *)(a2 + 49))
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(&v146, v16, 1);
            else
LABEL_30:
              v146 = 0;
            v25 = *(_QWORD *)(a2 + 32);
            v26 = HIDWORD(v25);
            if (*(_BYTE *)(a2 + 48))
            {
              v27 = *(unsigned __int8 **)(a2 + 24);
              if (v27)
              {
                v28 = *(_QWORD *)(a2 + 8);
                v29 = *(std::__shared_weak_count **)(a2 + 16);
                if (v29)
                {
                  v30 = (unint64_t *)&v29->__shared_owners_;
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                  do
                    v32 = __ldaxr(v30);
                  while (__stlxr(v32 - 1, v30));
                  if (!v32)
                  {
                    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                    std::__shared_weak_count::__release_weak(v29);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v28 + 88))(v28, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v27 = *(unsigned __int8 **)(a2 + 24);
                LODWORD(v26) = *(_DWORD *)(a2 + 36);
              }
            }
            else
            {
              v27 = *(unsigned __int8 **)(a2 + 24);
            }
            v135 = (float32x2_t *)a1;
            v118 = *(unsigned int *)(a2 + 44);
            v33 = (v118 * v26);
            v119 = v25;
            if ((_DWORD)v33)
              _ZF = v25 == 0;
            else
              _ZF = 1;
            if (!_ZF)
            {
              v63 = v27;
              v64 = 0;
              v65 = v128;
              v65.i32[2] = v136.i32[0];
              v132 = (float32x2_t)vzip1q_s32(v130, v126).u64[0];
              v66 = (float32x2_t)vtrn2q_s32(v124, v123).u64[0];
              v67 = (float32x2_t)vzip2q_s32(v124, v123).u64[0];
              v68 = (int8x16_t)vnegq_f32(v133);
              *(float32x2_t *)v69.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v130.i8, *(int32x2_t *)v126.i8), *(float *)v68.i32), v66, *(float32x2_t *)v133.f32, 1), v67, v133, 2);
              v70 = (__n128)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v66, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v66, 1), 0xCuLL);
              v127 = (float32x2_t)v70.n128_u64[0];
              *(float32x2_t *)&v69.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v68.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), *(float32x2_t *)v133.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), v136);
              v129 = v69;
              v131 = v67;
              v116 = &v63[v33];
              v71 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1);
              v134 = (float32x4_t)v65;
              v125 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
              do
              {
                v72 = 0;
                v73 = &v63[v119];
                v137 = (float)v64;
                v120 = v64;
                v74 = v64 * v117;
                v121 = v63;
                do
                {
                  _H0 = *(_WORD *)(v2 + 2 * (v74 + v3 * v72));
                  __asm { FCVT            S0, H0 }
                  if (_S0 > -65504.0)
                  {
                    v81 = *v63;
                    v70.n128_f32[0] = (float)v72;
                    v70.n128_f32[1] = v137;
                    v70.n128_u64[0] = (unint64_t)vadd_f32(vmul_f32(v135[159], (float32x2_t)v70.n128_u64[0]), v135[160]);
                    v70.n128_u32[2] = 1.0;
                    v82 = (int8x16_t)vmulq_n_f32((float32x4_t)v70, _S0);
                    v70.n128_u64[0] = (unint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v132, *(float *)v82.i32), v127, *(float32x2_t *)v82.i8, 1), v131, (float32x4_t)v82, 2);
                    v83.n128_u64[1] = v134.u64[1];
                    v83.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v82.i8), v71, *(float32x2_t *)v82.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), v125);
                    v70.n128_u64[1] = v83.n128_u64[0];
                    v84 = (__n128)vaddq_f32(v129, (float32x4_t)v70);
                    v85 = (_QWORD *)v157;
                    if (v157 >= (unint64_t)v158)
                    {
                      v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - (_QWORD)v156) >> 2);
                      v88 = v87 + 1;
                      if (v87 + 1 > 0x1555555555555555)
                        goto LABEL_153;
                      if (0x5555555555555556 * ((v158 - v156) >> 2) > v88)
                        v88 = 0x5555555555555556 * ((v158 - v156) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((v158 - v156) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v88 = 0x1555555555555555;
                      if (v88)
                      {
                        v122 = v84;
                        LODWORD(v141[0]) = v88;
                        if (HIDWORD(v159) == -1)
                          goto LABEL_152;
                        __p = v141;
                        v89 = ((uint64_t (*)(void **, uint64_t *))off_24EC5A868[HIDWORD(v159)])(&__p, &v159);
                        v84 = v122;
                      }
                      else
                      {
                        v89 = 0;
                        v90 = 0;
                      }
                      v91 = v89 + 12 * v87;
                      *(_QWORD *)v91 = v84.n128_u64[0];
                      *(_DWORD *)(v91 + 8) = v84.n128_u32[2];
                      v93 = v156;
                      v92 = (char *)v157;
                      v94 = (const char *)v91;
                      if ((const char *)v157 != v156)
                      {
                        do
                        {
                          v95 = *(_QWORD *)(v92 - 12);
                          v92 -= 12;
                          v96 = *((_DWORD *)v92 + 2);
                          *(_QWORD *)(v94 - 12) = v95;
                          v94 -= 12;
                          *((_DWORD *)v94 + 2) = v96;
                        }
                        while (v92 != v93);
                        v92 = (char *)v156;
                      }
                      v86 = (char *)(v91 + 12);
                      v156 = v94;
                      v157 = v91 + 12;
                      v97 = v158;
                      v158 = (const char *)(v89 + 12 * v90);
                      if (v92)
                      {
                        __p = v92;
                        v148 = -1431655765 * ((unint64_t)(v97 - v92) >> 2);
                        if (HIDWORD(v159) == -1)
                          sub_22316DD70();
                        v141[0] = &__p;
                        ((void (*)(_QWORD *, uint64_t *))off_24EC5A878[HIDWORD(v159)])(v141, &v159);
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v157 + 8) = v84.n128_u32[2];
                      *v85 = v84.n128_u64[0];
                      v86 = (char *)v85 + 12;
                    }
                    v157 = (unint64_t)v86;
                    v84.n128_u32[0] = 1063675494;
                    if ((v81 & 2) != 0)
                      v70.n128_f32[0] = 0.9;
                    else
                      v70.n128_f32[0] = 0.5;
                    if ((v81 & 4) != 0)
                      v83.n128_f32[0] = 0.9;
                    else
                      v83.n128_f32[0] = 0.5;
                    if ((v81 & 1) == 0)
                      v84.n128_f32[0] = 0.5;
                    if (v81)
                      v98 = v70.n128_f32[0];
                    else
                      v98 = 0.0;
                    if (v81)
                      v99 = v83.n128_f32[0];
                    else
                      v99 = 0.0;
                    if (v81)
                      v100 = v84.n128_f32[0];
                    else
                      v100 = 0.0;
                    v101 = v161;
                    if ((unint64_t)v161 < v162)
                    {
                      *v161 = v98;
                      v101[1] = v99;
                      v75 = v101 + 3;
                      v101[2] = v100;
                    }
                    else
                    {
                      v102 = 0xAAAAAAAAAAAAAAABLL * (v161 - v160);
                      v103 = v102 + 1;
                      if (v102 + 1 > 0x1555555555555555)
LABEL_153:
                        sub_22316E078();
                      if (0x5555555555555556 * ((uint64_t)(v162 - (_QWORD)v160) >> 2) > v103)
                        v103 = 0x5555555555555556 * ((uint64_t)(v162 - (_QWORD)v160) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v162 - (_QWORD)v160) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v104 = 0x1555555555555555;
                      else
                        v104 = v103;
                      if (v104)
                      {
                        LODWORD(v141[0]) = v104;
                        if (v164 == -1)
LABEL_152:
                          sub_22316DD70();
                        __p = v141;
                        v105 = ((uint64_t (*)(void **, _BYTE *, __n128, __n128, __n128))off_24EC5A868[v164])(&__p, v163, v84, v70, v83);
                      }
                      else
                      {
                        v105 = 0;
                        v106 = 0;
                      }
                      v107 = (float *)(v105 + 12 * v102);
                      *v107 = v98;
                      v107[1] = v99;
                      v107[2] = v100;
                      v109 = v160;
                      v108 = v161;
                      v110 = v107;
                      if (v161 != v160)
                      {
                        do
                        {
                          v111 = *(_QWORD *)(v108 - 3);
                          v108 -= 3;
                          v112 = *((_DWORD *)v108 + 2);
                          *(_QWORD *)(v110 - 3) = v111;
                          v110 -= 3;
                          *((_DWORD *)v110 + 2) = v112;
                        }
                        while (v108 != v109);
                        v108 = v160;
                      }
                      v75 = v107 + 3;
                      v160 = v110;
                      v161 = v107 + 3;
                      v113 = v162;
                      v162 = v105 + 12 * v106;
                      if (v108)
                      {
                        __p = v108;
                        v148 = -1431655765 * ((v113 - (unint64_t)v108) >> 2);
                        if (v164 == -1)
                          sub_22316DD70();
                        v141[0] = &__p;
                        ((void (*)(_QWORD *, _BYTE *))off_24EC5A878[v164])(v141, v163);
                      }
                    }
                    v161 = v75;
                  }
                  ++v63;
                  ++v72;
                }
                while (v63 != v73);
                v63 = &v121[v118];
                v64 = v120 + 1;
              }
              while (&v121[v118] != v116);
            }
            v35 = v146;
            v146 = 0;
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            if (v114)
            {
              v36 = (unint64_t *)&v114->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            __p = (void *)0x705F676E69796C66;
            v148 = v140[0];
            v149 = v140[1];
            v150 = 0;
            *(_QWORD *)v151 = v154;
            v151[8] = v155;
            *(_WORD *)&v151[9] = 269;
            v140[0] = 0;
            LOBYTE(v140[1]) = 0;
            v154 = 0;
            v155 = 0;
            sub_22329F414((uint64_t)&v156, (__int128 *)&__p, &v139, &v143);
            if (v151[10] && (v151[9] & 0x80000000) != 0)
              operator delete(__p);
            sub_22316F8F4((uint64_t *)&v156);
            v38 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
            v39 = *v38;
            v40 = (std::__shared_weak_count *)v38[1];
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v44 = v144;
            v43 = v145;
            v141[0] = &off_24EC6A3B8;
            v141[1] = v144;
            v142 = v145;
            v144 = 0;
            v145 = 0;
            v156 = v39;
            v157 = (unint64_t)v40;
            if (v40)
            {
              v45 = (unint64_t *)&v40->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            v158 = (const char *)&off_24EC6A3B8;
            v159 = v44;
            v160 = (float *)v43;
            if (v43)
            {
              v47 = (unint64_t *)&v43->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            (*(void (**)(uint64_t *, const char **))(*v115 + 16))(v115, &v156);
            v49 = (std::__shared_weak_count *)v160;
            if (v160)
            {
              v50 = (unint64_t *)(v160 + 2);
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v52 = (std::__shared_weak_count *)v157;
            if (v157)
            {
              v53 = (unint64_t *)(v157 + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = v142;
            if (v142)
            {
              v56 = (unint64_t *)&v142->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            if (v40)
            {
              v58 = (unint64_t *)&v40->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v60 = v145;
            if (v145)
            {
              v61 = (unint64_t *)&v145->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22380197C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a71;
  unint64_t *p_shared_owners;
  unint64_t v73;

  sub_22316F8F4(&a71);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  sub_2231874DC((uint64_t)&a41);
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223801B00(uint64_t a1, void ***a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  void **v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  void **v90;
  std::__shared_weak_count *v91;
  uint64_t (**v92)();
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  __int16 v99;
  char v100[24];
  char *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (!sub_223225C34(a2)
    || (v11 = *(_DWORD *)(a3 + 24), v11 != sub_223229314(a2, v6, v7, v8, v9, v10))
    || (v17 = *(_DWORD *)(a3 + 28), v17 != sub_223229330(a2, v12, v13, v14, v15, v16)))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include/Reconstruction/Gpu/Utils.h", 128, (uint64_t)"texture && (img.Width() == texture.width()) && (img.Height() == texture.height())", 81, (uint64_t)"Texture and image size don't match", 34, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v90 = *a2;
  v91 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v92 = &off_24EC20EB8;
  v21 = *(_QWORD *)(a3 + 8);
  v22 = *(std::__shared_weak_count **)(a3 + 16);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = *(_QWORD *)(a3 + 40);
    v26 = *(_DWORD *)(a3 + 48);
    v27 = *(_WORD *)(a3 + 52);
    do
      v28 = __ldxr(v23);
    while (__stxr(v28 + 1, v23));
  }
  else
  {
    v25 = *(_QWORD *)(a3 + 40);
    v26 = *(_DWORD *)(a3 + 48);
    v27 = *(_WORD *)(a3 + 52);
  }
  v93 = v21;
  v94 = v22;
  v95 = *(_QWORD *)(a3 + 24);
  v96 = *(_DWORD *)(a3 + 32);
  v97 = v25;
  v98 = v26;
  v99 = v27;
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v101 = 0;
  v31 = (char *)operator new(0x50uLL);
  v36 = v31;
  v38 = v90;
  v37 = v91;
  *(_QWORD *)v31 = &off_24EC5AD68;
  *((_QWORD *)v31 + 1) = v38;
  *((_QWORD *)v31 + 2) = v37;
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *((_QWORD *)v31 + 3) = &off_24EC20EB8;
  v41 = v94;
  if (v94)
  {
    v42 = &v94->__shared_owners_;
    do
      v43 = __ldxr((unint64_t *)v42);
    while (__stxr(v43 + 1, (unint64_t *)v42));
    v44 = v97;
    v45 = v98;
    v46 = v99;
    do
      v47 = __ldxr((unint64_t *)v42);
    while (__stxr(v47 + 1, (unint64_t *)v42));
  }
  else
  {
    v44 = v97;
    v45 = v98;
    v46 = v99;
  }
  *((_QWORD *)v31 + 4) = v93;
  *((_QWORD *)v31 + 5) = v41;
  *((_QWORD *)v31 + 6) = v95;
  *((_DWORD *)v31 + 14) = v96;
  *((_QWORD *)v31 + 8) = v44;
  *((_DWORD *)v31 + 18) = v45;
  *((_WORD *)v31 + 38) = v46;
  if (v41)
  {
    v48 = (unint64_t *)&v41->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v101 = v36;
  sub_2232268C4(a1, v100, v32, v33, v34, v35);
  v55 = v101;
  if (v101 == v100)
  {
    v56 = 4;
    v55 = v100;
    goto LABEL_39;
  }
  if (v101)
  {
    v56 = 5;
LABEL_39:
    (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
  }
  if (v94)
  {
    v57 = &v94->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v91)
  {
    v59 = &v91->__shared_owners_;
    do
      v60 = __ldaxr((unint64_t *)v59);
    while (__stlxr(v60 - 1, (unint64_t *)v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  sub_2232267C8(a1, v50, v51, v52, v53, v54);
  sub_223226BB0(a1, v61, v62, v63, v64, v65);
  sub_2232266BC(a1, v66, v67, v68, v69, v70, &v86);
  sub_223226F40(&v86, v71, v72, v73, v74, (uint64_t)&v88);
  v75 = v89;
  v76 = v88;
  *((_QWORD *)&v88 + 1) = 0;
  v89 = 0;
  *(_OWORD *)a1 = v76;
  v77 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v75;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v89;
  if (v89)
  {
    v81 = (unint64_t *)&v89->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v87;
  if (v87)
  {
    v84 = (unint64_t *)&v87->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_223801F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223801F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a7);
  v10 = *(_QWORD **)(v8 - 48);
  if (v10 == v7)
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 72);
  }
  else
  {
    if (!v10)
    {
      sub_22380B4B0((uint64_t)va);
      _Unwind_Resume(a1);
    }
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
  sub_22380B4B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223801F78(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_223801FE0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = off_24EC5A898;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_22380208C(uint64_t a1, void ***a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  char *category;
  void *v107[3];
  int v108;
  const char *v109;
  int v110;
  const char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  _BYTE object[24];
  __int128 v116;
  void *__p[2];
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;

  *(_QWORD *)a1 = off_24EC5A898;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1 + 8;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 36) = 0x3F3333333F19999ALL;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = operator new(0x48uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24EC37568;
  v7[3] = &off_24EC5A6F0;
  *((_OWORD *)v7 + 2) = xmmword_2245F6700;
  v7[6] = 0x400F1AA000000000;
  v7[7] = 0x3F8000000000003FLL;
  v7[8] = 0;
  *(_QWORD *)(a1 + 8) = v7 + 3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)a1 = &off_24EC5A8C0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (!sub_223CEFC14())
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2540CC6E0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6E0))
    {
      sub_22455F53C(v107);
      sub_223174DE4(object, "cv3d.recon.kf");
      sub_2232300E0((uint64_t **)v107, (uint64_t)object, &qword_2540CC6D8);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_2540CC6E0);
    }
    v114 = qword_2540CC6D8;
    if (**(int **)(qword_2540CC6D8 + 56) <= 4)
    {
      v9 = *(unsigned __int8 *)(qword_2540CC6D8 + 72);
      v10 = sub_22322F254(qword_2540CC6D8, "OSLogSurrogateAppender", 1, 0);
      v11 = v10;
      if (v9 || v10)
      {
        v107[0] = &v114;
        v107[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        v107[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
        v108 = 4;
        v109 = "unknown file";
        v110 = 237;
        v112 = 0;
        v113 = 0;
        v111 = "unknown function";
        v12 = *(_QWORD *)v107[0];
        v103 = *(_QWORD *)v107[0];
        if (*(char *)(*(_QWORD *)v107[0] + 39) < 0)
        {
          v13 = *(_QWORD *)(v12 + 24);
          category = *(char **)(v12 + 16);
        }
        else
        {
          v13 = *(unsigned __int8 *)(*(_QWORD *)v107[0] + 39);
          category = (char *)(*(_QWORD *)v107[0] + 16);
        }
        v104 = v9;
        v102 = *(_QWORD *)v107[0] + 16;
        v105 = v11;
        v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
          if ((_BYTE)v116 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v15 = (const char *)&xmmword_255788F40;
        else
          v15 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v16 = byte_255788F57;
        else
          v16 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v15, category);
        v17 = &object[8];
        if (v16 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = operator new(v18 + 1);
          *(_QWORD *)&object[16] = v16;
          *(_QWORD *)&v116 = v19 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v17;
        }
        else
        {
          BYTE7(v116) = v16;
          if (!v16)
          {
LABEL_24:
            v17[v16] = 0;
            BYTE8(v116) = 1;
            v20 = __p;
            if (v13 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v13 >= 0x17)
            {
              v21 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v13 | 7) != 0x17)
                v21 = v13 | 7;
              v22 = v21 + 1;
              v20 = operator new(v21 + 1);
              __p[1] = (void *)v13;
              v118 = v22 | 0x8000000000000000;
              __p[0] = v20;
            }
            else
            {
              HIBYTE(v118) = v13;
              if (!v13)
                goto LABEL_32;
            }
            memmove(v20, category, v13);
LABEL_32:
            *((_BYTE *)v20 + v13) = 0;
            v119 = 1;
            v23 = *(NSObject **)object;
            if (SHIBYTE(v118) < 0)
              operator delete(__p[0]);
            if (BYTE8(v116) && SBYTE7(v116) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v105 && *(_QWORD *)(v105 + 24))
            {
              v24 = _os_log_pack_size();
              v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
              v26 = (std::__shared_weak_count *)operator new();
              v27 = v26;
              v26->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v26->__shared_weak_owners_ = 0;
              v26[1].__vftable = v25;
              *(_QWORD *)object = v25;
              *(_QWORD *)&object[8] = v25;
              *(_QWORD *)&object[16] = v26;
              do
                v29 = __ldxr(p_shared_owners);
              while (__stxr(v29 + 1, p_shared_owners));
              v116 = 0uLL;
              __p[0] = 0;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v27);
              }
              v31 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v32 = operator new();
              v33 = *(unsigned __int8 *)(v103 + 39);
              v34 = v102;
              if ((v33 & 0x80u) != 0)
              {
                v34 = *(_QWORD *)(v103 + 16);
                v33 = *(_QWORD *)(v103 + 24);
              }
              *(_QWORD *)v32 = v31;
              *(_OWORD *)(v32 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v32 + 24) = v116;
              v116 = 0uLL;
              *(_QWORD *)(v32 + 40) = v34;
              *(_QWORD *)(v32 + 48) = v33;
              *(_BYTE *)(v32 + 56) = 16;
              v120 = 0;
              v121 = v32;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v105 + 24) + 40))(*(_QWORD *)(v105 + 24), &v121);
              v35 = v121;
              v121 = 0;
              if (v35)
              {
                v36 = *(std::__shared_weak_count **)(v35 + 32);
                if (v36)
                {
                  v37 = (unint64_t *)&v36->__shared_owners_;
                  do
                    v38 = __ldaxr(v37);
                  while (__stlxr(v38 - 1, v37));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                }
                v39 = *(std::__shared_weak_count **)(v35 + 16);
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
                v42 = v120;
                v120 = 0;
                if (v42)
                {
                  v43 = *(std::__shared_weak_count **)(v42 + 32);
                  if (v43)
                  {
                    v44 = (unint64_t *)&v43->__shared_owners_;
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  v46 = *(std::__shared_weak_count **)(v42 + 16);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  MEMORY[0x227684CE8](v42, 0x10F0C40B62ED6C6);
                }
              }
              v49 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
              if (*((_QWORD *)&v116 + 1))
              {
                v50 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v53 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
            }
            else
            {
              os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
              *(_WORD *)object = 0;
              v55 = (void *)_os_log_send_and_compose_impl();
              if (v55)
                free(v55);
            }
            if (v104)
            {
              sub_22322C138((uint64_t)v107, "Gpu device does not support RGBA16U/16f read_write and Apple7 family features. The fused frames will have random values due to undefined behavior. Keyframing should be run on Apple Silicon.");
              sub_223182C08((uint64_t)v107);
            }
            sub_223182C08((uint64_t)v107);
            v56 = v113;
            if (v113)
            {
              v57 = (unint64_t *)&v113->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            goto LABEL_91;
          }
        }
        memmove(v17, v15, v16);
        goto LABEL_24;
      }
    }
  }
LABEL_91:
  v59 = operator new(0x48uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24EC373F8;
  *((_OWORD *)v59 + 2) = xmmword_2245F6700;
  v59[6] = 0x400F1AA000000000;
  v59[7] = 0x3F8000000000003FLL;
  v59[8] = 0;
  v59[3] = &off_24EC5A840;
  v60 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v59 + 3;
  *(_QWORD *)(a1 + 16) = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *(_DWORD *)(*(_QWORD *)v6 + 32) = a3;
  v63 = (char *)operator new(0x250uLL);
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *(_QWORD *)v63 = &off_24EC5AA70;
  bzero(v63 + 32, 0x230uLL);
  *((_QWORD *)v63 + 3) = off_24EC5A720;
  *((_DWORD *)v63 + 10) = 1;
  *((_QWORD *)v63 + 7) = 0;
  *((_QWORD *)v63 + 6) = v63 + 56;
  *((_QWORD *)v63 + 8) = 0;
  *(_OWORD *)(v63 + 72) = 0u;
  *(_OWORD *)(v63 + 88) = 0u;
  *(_OWORD *)(v63 + 104) = 0u;
  *(_OWORD *)(v63 + 120) = 0u;
  sub_2232291A8((_QWORD *)v63 + 17);
  sub_2232291A8((_QWORD *)v63 + 19);
  *((_QWORD *)v63 + 3) = &off_24EC5A780;
  sub_2232291A8((_QWORD *)v63 + 21);
  sub_2232291A8((_QWORD *)v63 + 23);
  *(_OWORD *)(v63 + 200) = 0u;
  *(_OWORD *)(v63 + 216) = 0u;
  v63[232] = 1;
  sub_223CECC60((uint64_t)(v63 + 240));
  v64 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v63 + 24;
  *(_QWORD *)(a1 + 120) = v63;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_223CE9B34(*(_QWORD *)(a1 + 112), a2);
  sub_223227930((uint64_t *)v107);
  nullsub_30(a2);
  sub_223226DFC(object, a2, v67, v68, v69, v70);
  v71 = *(_OWORD *)object;
  *(_QWORD *)object = 0;
  *(_QWORD *)&object[8] = 0;
  v72 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v71;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v76 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  nullsub_30(a2);
  sub_223226080(object, a2, 8u, 0, v78, v79);
  v80 = *(_OWORD *)object;
  *(_QWORD *)object = 0;
  *(_QWORD *)&object[8] = 0;
  v81 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v80;
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v85 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  nullsub_30(a2);
  sub_223226080(object, a2, 2u, 0, v87, v88);
  v94 = *(_OWORD *)object;
  *(_QWORD *)object = 0;
  *(_QWORD *)&object[8] = 0;
  v95 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v94;
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v99 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  sub_22322797C(v107, v89, v90, v91, v92, v93);
  return a1;
}

void sub_223802C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  _QWORD *v41;
  uint64_t v42;

  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a21);
  sub_223167354(a17);
  sub_223167354(v42);
  sub_223167354(a18);
  sub_223167354(a13);
  sub_223801FE0(v41);
  _Unwind_Resume(a1);
}

void **sub_223802E40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void ***v17;
  void ***v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  float32x2_t **v77;
  float32x2_t **v78;
  std::__shared_weak_count *v79;
  float32x2_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unsigned int *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  unsigned __int8 *v101;
  char v102;
  int v103;
  BOOL v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  unsigned int v113;
  int *v114;
  float32x2_t **v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  std::mutex *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  std::string *v123;
  std::string *v124;
  uint64_t v125;
  uint64_t *v126;
  std::string::size_type v127;
  std::string *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  int v131;
  __n128 *v134;
  std::string *v135;
  size_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v154;
  uint64_t *v155;
  float32x2_t v156;
  uint64_t v157;
  _QWORD *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int32x4_t v171;
  int32x4_t v172;
  float32x2_t v173;
  float32x4_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  _BOOL4 v180;
  float32x2_t **v181;
  uint64_t v182;
  unint64_t v183;
  float32x2_t **v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  float32x2_t **v189;
  unint64_t v190;
  float32x2_t **v191;
  float32x2_t **v192;
  float32x2_t **v193;
  __int128 v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  __int128 v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  unsigned __int32 v211;
  __int128 v212;
  unint64_t *v213;
  unint64_t v214;
  const void *v215;
  _DWORD *v216;
  unsigned int v217;
  uint64_t v218;
  float v219;
  float v220;
  uint64_t v221;
  uint64_t *v222;
  std::string::value_type v223;
  uint64_t v224;
  int v225;
  unint64_t *v226;
  unint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int32x4_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  void ***v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  __int128 v255;
  unint64_t *v256;
  unint64_t v257;
  int v258;
  std::string::size_type v259;
  std::string::pointer v260;
  __int16 v261;
  unint64_t v262;
  unint64_t v263;
  void ***v264;
  _BOOL4 v265;
  void ***v266;
  unsigned int v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned __int8 v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  unsigned int v277;
  _BOOL4 v278;
  BOOL v279;
  uint64_t *v280;
  unsigned int v281;
  _BOOL4 v282;
  char *v283;
  _QWORD *v284;
  unsigned __int8 v285;
  int v286;
  unint64_t v287;
  unint64_t v288;
  void ***v289;
  const char *v290;
  const char *v291;
  uint64_t v292;
  size_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t **v308;
  float32x2_t *v309;
  float32x2_t *v310;
  int8x16_t v311;
  float32x2_t v312;
  float32x2_t v313;
  int8x16_t v314;
  float32x2_t v315;
  int8x16_t v316;
  float32x2_t v317;
  float32x4_t v318;
  float32x2_t v319;
  float32x2_t v320;
  float32x2_t *v321;
  float32x2_t v322;
  float32x2_t *v323;
  float32x2_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x2_t *v327;
  float32x4_t v328;
  void *v329;
  void *v330;
  void *v331;
  void **v332;
  void **v333;
  char *v334;
  char *v335;
  void *v336;
  void *v337;
  float32x2_t *v338;
  float32x2_t *v339;
  void *v340;
  void *v341;
  unsigned int *v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  unsigned __int8 v356;
  const char *v357;
  size_t v358;
  char *v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  NSObject *v364;
  uint64_t v365;
  uint64_t v366;
  size_t v367;
  void *v368;
  _QWORD *v369;
  size_t v370;
  size_t v371;
  _BYTE *v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  size_t v376;
  size_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::string::size_type v385;
  std::string::size_type v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::string::size_type v396;
  std::string::size_type v397;
  std::string::size_type v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::string::size_type v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *size;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  void ***v423;
  std::string *v424;
  std::string *v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t *v436;
  unsigned int v437;
  unsigned int v438;
  _BOOL4 v439;
  _BOOL4 v440;
  int v441;
  uint64_t *v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  std::mutex *v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  _QWORD *v458;
  unint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  _QWORD *v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  std::string::size_type v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  int v482;
  unsigned __int8 v483;
  __int16 v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  std::string::size_type v493;
  std::string::size_type v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  int8x16_t v504;
  __int128 v505;
  unint64_t *v506;
  unint64_t v507;
  __int16 data;
  unint64_t v509;
  std::string::pointer v510;
  int8x16_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  float v524;
  float v525;
  float v526;
  float v527;
  float v528;
  BOOL v531;
  BOOL v532;
  char v533;
  char v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::runtime_error *exception;
  unint64_t v539;
  unsigned __int8 *v540;
  char v541;
  unint64_t v542;
  unsigned int *v543;
  uint64_t v544;
  uint64_t *v545;
  void ***v546;
  void ***v547;
  void ***v548;
  int32x4_t v549;
  int32x4_t v550;
  int8x16_t v551;
  uint64_t v552;
  _QWORD *v553;
  BOOL v554;
  uint64_t v555;
  float32x2_t **v556;
  float32x2_t **v557;
  std::__shared_weak_count *v558;
  unsigned int v559;
  std::__shared_weak_count *v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  uint64_t v563;
  uint64_t v564;
  int32x4_t v565;
  float32x2_t v566;
  void ***v567;
  const char *v568;
  float32x4_t v569;
  float32x2_t v570;
  float32x2_t v571;
  float32x4_t v572;
  unint64_t v573;
  const char *__s;
  char *__sa[2];
  float32x2_t __sb;
  _QWORD *__sc;
  const char *category;
  float32x2_t categorya;
  uint64_t categoryb;
  void ***v581;
  float32x2_t *v582;
  char v583;
  __int128 v584;
  _BYTE v585[19];
  char v586;
  void *v587;
  float32x2_t *v588;
  void *v589;
  __int128 v590;
  std::__shared_weak_count *v591;
  std::__shared_weak_count *v592;
  _BYTE v593[32];
  int8x16_t v594;
  float32x2_t v595;
  unsigned __int32 v596;
  int v597;
  float32x2_t v598[58];
  void **v599;
  std::__shared_weak_count *v600;
  char v601[16];
  std::__shared_weak_count *v602;
  void *v603;
  _QWORD *v604;
  __int128 v605;
  uint32x2_t v606;
  _BYTE __p[608];
  __int128 v608;
  void ***v609;
  std::__shared_weak_count *v610;
  void *v611;
  int v612;
  char v613;
  unsigned int v614;
  void *v615;
  std::__shared_weak_count *v616;
  char v617;
  uint64_t v618;
  unint64_t v619;
  char v620[24];
  char *v621;
  __int128 __dst[38];
  _BYTE v623[304];
  std::string v624;
  char *v625;
  std::string::size_type v626;
  int v627;
  std::string __src[13];
  uint64_t v629;

  v629 = *MEMORY[0x24BDAC8D0];
  sub_223227930((uint64_t *)&v603);
  sub_223226F40((void ***)(a1 + 128), v6, v7, v8, v9, (uint64_t)v601);
  sub_223226E78((void ***)(a1 + 128), v10, v11, v12, v13, v14, &v599);
  sub_2231D70F0(v598, &v599, a2);
  v15 = *(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(v15 + 208))
  {
    v16 = sub_2231D0224((uint64_t)v598);
    v17 = (void ***)sub_2231D2C04((uint64_t)v598, 0);
    v18 = (void ***)sub_2231D2C04((uint64_t)v598, 1u);
    sub_223CED4F8(v15 + 216, v601, v16, v17, v18, v19);
  }
  v20 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32) && !*(_BYTE *)(a1 + 33))
  {
    v23 = *(_QWORD *)(a1 + 8);
    v22 = *(_DWORD *)(v23 + 40) | 4;
    if ((v22 & ~*(_DWORD *)(v23 + 32)) == 0)
      goto LABEL_9;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_DWORD *)(v21 + 40);
    if ((v22 & ~*(_DWORD *)(v21 + 32)) == 0)
      goto LABEL_9;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 333, (uint64_t)"(cur_warp_mask & warp_fuse_params_->GetSurfaceFusionMask()) == cur_warp_mask", 76, (uint64_t)"Only attributes present in the fusion mask can be written to warping result.Please update the warping mask accordingly!", 119, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_9:
  *(_BYTE *)(a1 + 28) = 0;
  v24 = *a3;
  v25 = 4 * *a3;
  v548 = (void ***)(a1 + 80);
  if (*a3)
  {
    if (!sub_223225C34((_QWORD *)(a1 + 80))
      || v25 > sub_223226504(v548, v26, v27, v28, v29, v30)
      || sub_223226504(v548, v31, v32, v33, v34, v35) > (unint64_t)(8 * v24))
    {
      nullsub_30(&v599);
      sub_223226080(__dst, &v599, v25, 0, v41, v42);
      v43 = __dst[0];
      __dst[0] = 0uLL;
      v44 = *(std::__shared_weak_count **)(a1 + 88);
      *(_OWORD *)(a1 + 80) = v43;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (*((_QWORD *)&__dst[0] + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    v50 = (void *)sub_223226520(v548, v36, v37, v38, v39, v40);
    if (!v50
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (v24 >= 1)
      bzero(v50, 4 * (v24 - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
    v544 = *a3;
    v547 = (void ***)(a1 + 96);
    if (*a3)
    {
      if (!sub_223225C34((_QWORD *)(a1 + 96))
        || v544 > (unint64_t)sub_223226504(v547, v51, v52, v53, v54, v55)
        || sub_223226504(v547, v56, v57, v58, v59, v60) > (unint64_t)(2 * v544))
      {
        nullsub_30(&v599);
        sub_223226080(__dst, &v599, v544, 0, v66, v67);
        v68 = v50;
        v69 = __dst[0];
        __dst[0] = 0uLL;
        v70 = *(std::__shared_weak_count **)(a1 + 104);
        *(_OWORD *)(a1 + 96) = v69;
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
        if (*((_QWORD *)&__dst[0] + 1))
        {
          v74 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v50 = v68;
      }
      v540 = (unsigned __int8 *)sub_223226520(v547, v61, v62, v63, v64, v65);
      if (!v540
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (v544 >= 1)
        bzero(v540, v544);
      v541 = 0;
      v542 = v24;
      v543 = (unsigned int *)v50;
      v539 = v25;
      v563 = a1;
      v76 = *a3;
      if (!*a3)
        goto LABEL_47;
      goto LABEL_138;
    }
    v544 = 0;
    v540 = 0;
  }
  else
  {
    v50 = 0;
    v544 = 0;
    v540 = 0;
    v547 = (void ***)(a1 + 96);
  }
  v541 = 1;
  v542 = v24;
  v543 = (unsigned int *)v50;
  v539 = v25;
  v563 = a1;
  v76 = *a3;
  if (*a3)
  {
LABEL_138:
    v559 = v22;
    v546 = (void ***)(a1 + 128);
    v556 = 0;
    v77 = 0;
    v78 = 0;
    v561 = 0;
    v562 = 0;
    v154 = 0;
    v155 = (uint64_t *)a3[1];
    v554 = v20 != 0;
    v545 = &v155[10 * v76];
    v156 = (float32x2_t)vdup_n_s32(0x3D800000u);
    while (1)
    {
      v157 = *v155;
      if (!*v155)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 351, (uint64_t)"output.keyframe", 15, (uint64_t)"Invalid output keyframe pointer.", 32, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v157 = *v155;
      }
      v158 = operator new(0x240uLL);
      v158[1] = 0;
      v158[2] = 0;
      *v158 = &off_24EC20F48;
      v564 = (uint64_t)(v158 + 3);
      sub_2231D0CD4(v158 + 3, v157);
      sub_223226E78(v546, v159, v160, v161, v162, v163, __dst);
      v553 = v158;
      v164 = operator new(0x1E8uLL);
      v164[1] = 0;
      v165 = v164 + 1;
      v164[2] = 0;
      *v164 = &off_24EC37498;
      v558 = (std::__shared_weak_count *)v164;
      v582 = (float32x2_t *)(v164 + 3);
      sub_2231D70F0(v164 + 3, (void ***)__dst, (uint64_t)(v158 + 3));
      v175 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_147;
      v176 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
        if (v77 < v556)
        {
LABEL_148:
          *v77 = v582;
          v77[1] = (float32x2_t *)v558;
          do
            v178 = __ldxr(v165);
          while (__stxr(v178 + 1, v165));
          v77 += 2;
          v557 = v78;
          if (!v559)
            goto LABEL_188;
          goto LABEL_151;
        }
      }
      else
      {
LABEL_147:
        if (v77 < v556)
          goto LABEL_148;
      }
      v181 = v78;
      v182 = ((char *)v77 - (char *)v78) >> 4;
      v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) >> 60)
        sub_22316E078();
      v184 = v181;
      v185 = (char *)v556 - (char *)v181;
      v186 = v556 - v181;
      if (v186 > v183)
        v183 = v186;
      if (v185 >= 0x7FFFFFFFFFFFFFF0)
        v187 = 0xFFFFFFFFFFFFFFFLL;
      else
        v187 = v183;
      if (v187 >> 60)
        sub_223174E94();
      v188 = (char *)operator new(16 * v187);
      v189 = (float32x2_t **)&v188[16 * v182];
      v556 = (float32x2_t **)&v188[16 * v187];
      *v189 = v582;
      v189[1] = (float32x2_t *)v558;
      do
        v190 = __ldxr(v165);
      while (__stxr(v190 + 1, v165));
      v191 = v184;
      if (v77 == v184)
      {
        v192 = v189;
      }
      else
      {
        v192 = v189;
        v193 = v77;
        do
        {
          v194 = *((_OWORD *)v193 - 1);
          v193 -= 2;
          v171.i32[3] = HIDWORD(v194);
          *((_OWORD *)v192 - 1) = v194;
          v192 -= 2;
          *v193 = 0;
          v193[1] = 0;
        }
        while (v193 != v191);
        do
        {
          v195 = (std::__shared_weak_count *)*(v77 - 1);
          if (v195)
          {
            v196 = (unint64_t *)&v195->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          v77 -= 2;
        }
        while (v77 != v191);
      }
      v77 = v189 + 2;
      if (v191)
        operator delete(v191);
      v557 = v192;
      if (!v559)
      {
LABEL_188:
        if (v154)
        {
          v205 = (unint64_t *)&v154->__shared_owners_;
          do
            v206 = __ldaxr(v205);
          while (__stlxr(v206 - 1, v205));
          if (!v206)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        v560 = 0;
        v562 = 0;
        goto LABEL_194;
      }
LABEL_151:
      if (v561)
      {
        v179 = v562;
        if (!v562)
        {
          v180 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 372, (uint64_t)"warped_surface_output != nullptr", 32, (uint64_t)"Invalid warped surface pointer", 30, (void (*)(void **))sub_22457406C);
          v179 = 0;
          if (v180)
            abort();
        }
        v560 = v154;
        ((void (*)(std::__shared_weak_count *, uint64_t, char *, uint64_t))v179->__on_zero_shared)(v179, v559 | 0x100000000, v601, 1);
      }
      else
      {
        sub_2232265F4((uint64_t)v601, v166, v167, v168, v169, v170, __dst);
        v198 = sub_2231D0224(*v155);
        v199 = (std::__shared_weak_count *)operator new(0x1E8uLL);
        v199->__shared_owners_ = 0;
        v199->__shared_weak_owners_ = 0;
        v560 = v199;
        v199->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37498;
        v562 = v199 + 1;
        sub_2231D69A8(&v199[1].__vftable, (uint64_t)__dst, v198, v559);
        if (!v154)
          goto LABEL_179;
        v200 = (unint64_t *)&v154->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
          v202 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
          if (*((_QWORD *)&__dst[0] + 1))
          {
LABEL_180:
            v203 = (unint64_t *)&v202->__shared_owners_;
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
        }
        else
        {
LABEL_179:
          v202 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
          if (*((_QWORD *)&__dst[0] + 1))
            goto LABEL_180;
        }
      }
LABEL_194:
      v171.i64[0] = v155[2];
      v171.i32[2] = *((_DWORD *)v155 + 6);
      v172.i64[0] = v155[4];
      v172.i32[2] = *((_DWORD *)v155 + 10);
      v173.i32[0] = *((_DWORD *)v155 + 14);
      v174.i64[0] = v155[8];
      v174.i32[2] = *((_DWORD *)v155 + 18);
      *(_QWORD *)&v207 = vzip1q_s32(v171, v172).u64[0];
      v208 = (int8x16_t)vnegq_f32(v174);
      v209 = (int8x16_t)vtrn2q_s32(v171, v172);
      v209.i32[2] = HIDWORD(v155[6]);
      v210 = (int8x16_t)vzip2q_s32(v171, v172);
      v210.i32[2] = v173.i32[0];
      v211 = vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)v155[6], *(float32x2_t *)v208.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v155[6], 1), *(float32x2_t *)v174.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), v173).u32[0];
      *((_QWORD *)&v207 + 1) = v155[6];
      HIDWORD(v212) = 0;
      LODWORD(v212) = vdupq_lane_s32(*(int32x2_t *)&v209, 0).i32[3];
      *(_QWORD *)((char *)&v212 + 4) = vextq_s8(v209, v210, 4uLL).u64[0];
      v210.i64[1] = vdupq_laneq_s32((int32x4_t)v210, 2).u32[0];
      *(_OWORD *)&v593[16] = v212;
      v594 = v210;
      *(_OWORD *)v593 = v207;
      v595 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v207, *(float *)v208.i32), *(float32x2_t *)v209.i8, *(float32x2_t *)v174.f32, 1), *(float32x2_t *)v210.i8, v174, 2);
      v596 = v211;
      v597 = 1065353216;
      v591 = v562;
      v592 = v560;
      if (v560)
      {
        v213 = (unint64_t *)&v560->__shared_owners_;
        do
          v214 = __ldxr(v213);
        while (__stxr(v214 + 1, v213));
      }
      v611 = v548;
      v612 = 4 * v561;
      v609 = v547;
      LODWORD(v610) = v561;
      if (!sub_2231D01EC((uint64_t)v582)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 267, (uint64_t)"destination_surface.IsValid()", 29, (uint64_t)"Invalid destination buffer!", 27, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_675;
      }
      v215 = *(const void **)(v563 + 8);
      if (!v215
        || (v216 = __dynamic_cast(v215, (const struct __class_type_info *)&unk_24EC5A700, (const struct __class_type_info *)&unk_24EC5A850, 0)) == 0)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Gpu/WarpFuseParameters.h", 86, (uint64_t)"warp_fuse_param_gpu", 19, (uint64_t)"Failed to obtain a valid WarpFuseParamGpuWrapper!", 49, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_675;
        }
        v216 = 0;
      }
      *(_QWORD *)&__p[576] = 0x3DCCCCCD40400000;
      LODWORD(__src[10].__r_.__value_.__r.__words[2]) = 1077936128;
      LOWORD(__src[12].__r_.__value_.__l.__data_) = 0;
      sub_223800BB4((uint64_t)v216, (__int128 *)__p, (uint64_t)__src, v598, v582, (float32x2_t *)v593, flt_22464FD4C, 0);
      v627 = 0xFFFF;
      v217 = sub_2231D020C((uint64_t)v582);
      v218 = sub_2231D0214((uint64_t)v582);
      v219 = *(float *)(v563 + 40);
      HIDWORD(v604) = (float)(*(float *)(v563 + 36)
                                          * (float)vmul_lane_s32((int32x2_t)__src[8].__r_.__value_.__l.__data_, (int32x2_t)__src[8].__r_.__value_.__l.__data_, 1).u32[0]);
      v220 = 1.0 - v219;
      if (v219 > 1.0)
        v220 = 0.0;
      if (v219 < 0.0)
        v220 = 1.0;
      *(float *)&v605 = v220;
      *((float *)&v605 + 1) = 1.0 / v220;
      *((_QWORD *)&v605 + 1) = __src[8].__r_.__value_.__l.__data_;
      v606 = vmin_u32(vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__src[8].__r_.__value_.__l.__data_), v156))), (uint32x2_t)0x1000000010);
      LOBYTE(v604) = 0;
      if (COERCE_INT(fabs(1.0 / v220)) >= 2139095040
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Gpu/WarpFuseParameters.cpp", 130, (uint64_t)"std::isfinite(light_change_params.upper_scale_threshold)", 56, (uint64_t)"This will result to undefined behavior in shader!", 49, (void (*)(void **))sub_22457406C))
      {
LABEL_675:
        abort();
      }
      __dst[0] = *(_OWORD *)&__src[2].__r_.__value_.__r.__words[2];
      __dst[1] = *(_OWORD *)&__src[3].__r_.__value_.__r.__words[1];
      __dst[2] = *(_OWORD *)&__src[4].__r_.__value_.__l.__data_;
      __dst[3] = *(_OWORD *)&__src[4].__r_.__value_.__r.__words[2];
      *(_QWORD *)&v608 = v217 | (unint64_t)(v218 << 32);
      v221 = *(_QWORD *)sub_2231D050C((uint64_t)v582);
      v222 = (uint64_t *)sub_2231D050C((uint64_t)v598);
      sub_223800A54(v216, (uint64_t)&v624, __dst, &v608, v221, *v222);
      __src[12].__r_.__value_.__s.__data_[0] = v562 != 0;
      v223 = *(_BYTE *)(v563 + 33);
      if (v223)
        v223 = *(_BYTE *)(v563 + 32) != 0;
      __src[12].__r_.__value_.__s.__data_[1] = v223;
      v224 = *(_QWORD *)(v563 + 112);
      memcpy(__dst, __p, sizeof(__dst));
      memcpy(v623, __src, sizeof(v623));
      v225 = v216[8];
      v615 = v562;
      v616 = v592;
      if (v592)
      {
        v226 = (unint64_t *)&v592->__shared_owners_;
        do
          v227 = __ldxr(v226);
        while (__stxr(v227 + 1, v226));
      }
      sub_2237FB924(v224, v601, (uint64_t)__dst, (float32x4_t *)&v624, (uint64_t)v598, (uint64_t)v582, v225, (uint64_t *)&v615, v559, (uint64_t)&v611, (uint64_t)&v609, (uint64_t)&v604);
      v234 = v616;
      if (!v616)
        goto LABEL_218;
      v235 = (unint64_t *)&v616->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
        v237 = v592;
        if (!v592)
          goto LABEL_224;
      }
      else
      {
LABEL_218:
        v237 = v592;
        if (!v592)
          goto LABEL_224;
      }
      v238 = (unint64_t *)&v237->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
LABEL_224:
      if (!v554)
      {
        v554 = 0;
        goto LABEL_228;
      }
      if (*(_BYTE *)(v563 + 33))
      {
        v554 = 1;
        goto LABEL_228;
      }
      v264 = (void ***)v562;
      if (!v562)
      {
        v265 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 387, (uint64_t)"warped_surface_output != nullptr", 32, (uint64_t)"Invalid warped surface pointer", 30, (void (*)(void **))sub_22457406C);
        v264 = 0;
        if (v265)
          abort();
      }
      v266 = v264 + 50;
      v267 = sub_223229314(v264 + 50, v228, v229, v230, v231, v232);
      v619 = v267 | (unint64_t)(sub_223229330(v266, v268, v269, v270, v271, v272) << 32);
      v273 = atomic_load((unsigned __int8 *)&qword_2540CC6E8);
      if ((v273 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6E8))
      {
        qword_2540CC860 = 0;
        qword_2540CC868 = 0;
        qword_2540CC858 = (uint64_t)&qword_2540CC860;
        __cxa_atexit((void (*)(void *))sub_223809BC4, &qword_2540CC858, &dword_22314D000);
        __cxa_guard_release(&qword_2540CC6E8);
      }
      v274 = qword_2540CC860;
      v275 = v619;
      v581 = v266;
      if (qword_2540CC860)
      {
        v276 = &qword_2540CC860;
        do
        {
          v277 = *(_DWORD *)(v274 + 32);
          v104 = v277 == (_DWORD)v619;
          v278 = v277 < v619;
          if (v104)
            v278 = *(_DWORD *)(v274 + 36) < HIDWORD(v619);
          v279 = !v278;
          if (v278)
            v280 = (uint64_t *)(v274 + 8);
          else
            v280 = (uint64_t *)v274;
          if (v279)
            v276 = (uint64_t *)v274;
          v274 = *v280;
        }
        while (*v280);
        if (v276 != &qword_2540CC860)
        {
          v281 = *((_DWORD *)v276 + 8);
          v104 = (_DWORD)v619 == v281;
          v282 = v619 < v281;
          if (v104)
            v282 = HIDWORD(v619) < *((_DWORD *)v276 + 9);
          if (!v282)
          {
            v351 = v276[5];
            if ((_DWORD)v619 != *(_DWORD *)(v351 + 136) || HIDWORD(v619) != *(_DWORD *)(v351 + 140))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ImagePool.h", 260, (uint64_t)"it->second->ImageSize() == size", 31, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v351 = v276[5];
            }
            v353 = v276[6];
            v609 = (void ***)v351;
            v610 = (std::__shared_weak_count *)v353;
            if (v353)
            {
              v354 = (unint64_t *)(v353 + 8);
              do
                v355 = __ldxr(v354);
              while (__stxr(v355 + 1, v354));
            }
            goto LABEL_517;
          }
        }
      }
      v283 = (char *)operator new(0xA8uLL);
      *((_QWORD *)v283 + 1) = 0;
      *((_QWORD *)v283 + 2) = 0;
      *(_QWORD *)v283 = &off_24EC5A950;
      *((_QWORD *)v283 + 3) = v275;
      *(_OWORD *)(v283 + 40) = 0u;
      *(_OWORD *)(v283 + 56) = 0u;
      *(_OWORD *)(v283 + 72) = xmmword_2245C43A0;
      *(_OWORD *)(v283 + 88) = 0u;
      *(_OWORD *)(v283 + 104) = 0u;
      *(_OWORD *)(v283 + 120) = 0u;
      *((_QWORD *)v283 + 17) = 0;
      v284 = operator new(0x70uLL);
      v284[1] = 0;
      v284[2] = 0;
      *v284 = &off_24EC5A9A0;
      v284[3] = 850045863;
      *((_OWORD *)v284 + 2) = 0u;
      *((_OWORD *)v284 + 3) = 0u;
      *((_OWORD *)v284 + 4) = 0u;
      v284[10] = 0;
      v284[11] = v283 + 24;
      v284[12] = v275;
      *((_QWORD *)v283 + 18) = v284 + 3;
      *((_QWORD *)v283 + 19) = v284;
      *((_QWORD *)v283 + 20) = v275;
      v609 = (void ***)(v283 + 24);
      v610 = (std::__shared_weak_count *)v283;
      v285 = atomic_load((unsigned __int8 *)&qword_2540CC6F8);
      if ((v285 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6F8))
      {
        sub_22455F53C(__p);
        sub_223174DE4(__dst, "cv3d.recon.frame");
        sub_2232300E0((uint64_t **)__p, (uint64_t)__dst, &qword_2540CC6F0);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        __cxa_guard_release(&qword_2540CC6F8);
      }
      v618 = qword_2540CC6F0;
      if (**(int **)(qword_2540CC6F0 + 56) <= 3)
      {
        v286 = *(unsigned __int8 *)(qword_2540CC6F0 + 72);
        v287 = sub_22322F254(qword_2540CC6F0, "OSLogSurrogateAppender", 1, 0);
        v288 = v287;
        if (v286 || v287)
        {
          *(_QWORD *)__p = &v618;
          *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
          *(_DWORD *)&__p[24] = 3;
          *(_QWORD *)&__p[32] = "unknown file";
          *(_DWORD *)&__p[40] = 256;
          *(_QWORD *)&__p[48] = "unknown function";
          *(_QWORD *)&__p[56] = 0;
          *(_QWORD *)&__p[64] = 0;
          v289 = v609;
          v614 = 31;
          DWORD2(__dst[1]) = 0;
          sub_2231A0B14((uint64_t)__src, (uint64_t)__dst, &v614);
          if (DWORD2(__dst[1]) == -1)
            sub_22316DD70();
          __src[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v624;
          ((void (*)(void **__return_ptr, std::string *, __int128 *))off_24EC5A9F8[DWORD2(__dst[1])])(&v615, __src, __dst);
          if (DWORD2(__dst[1]) != -1)
            ((void (*)(std::string *, __int128 *))off_24EC5A9E0[DWORD2(__dst[1])])(__src, __dst);
          v290 = (const char *)&v615;
          if (v617 < 0)
            v290 = (const char *)v615;
          __s = v290;
          DWORD2(__dst[1]) = 0;
          sub_2231BFC9C((uint64_t)__src, (uint64_t)__dst, (unsigned int *)&v619);
          if (DWORD2(__dst[1]) == -1)
            sub_22316DD70();
          __src[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v624;
          ((void (*)(void **__return_ptr, std::string *, __int128 *))off_24EC5A9F8[DWORD2(__dst[1])])(&v611, __src, __dst);
          if (DWORD2(__dst[1]) != -1)
            ((void (*)(std::string *, __int128 *))off_24EC5A9E0[DWORD2(__dst[1])])(__src, __dst);
          v291 = (const char *)&v611;
          if (v613 < 0)
            v291 = (const char *)v611;
          v568 = v291;
          v292 = **(_QWORD **)__p;
          if (*(char *)(**(_QWORD **)__p + 39) < 0)
          {
            v293 = *(_QWORD *)(v292 + 24);
            category = *(const char **)(v292 + 16);
          }
          else
          {
            v293 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
            category = (const char *)(**(_QWORD **)__p + 16);
          }
          v552 = **(_QWORD **)__p + 16;
          v555 = **(_QWORD **)__p;
          v567 = v289;
          v573 = v288;
          v356 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v356 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)__src);
            sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
            if (__src[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__src[0].__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v357 = (const char *)&xmmword_255788F40;
          else
            v357 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v358 = byte_255788F57;
          else
            v358 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)&__dst[0] = os_log_create(v357, category);
          if (v358 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v358 >= 0x17)
          {
            v360 = v286;
            v361 = (v358 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v358 | 7) != 0x17)
              v361 = v358 | 7;
            v362 = v361 + 1;
            v359 = (char *)operator new(v361 + 1);
            *((_QWORD *)&__dst[1] + 1) = v362 | 0x8000000000000000;
            *((_QWORD *)&__dst[0] + 1) = v359;
            *(_QWORD *)&__dst[1] = v358;
            v286 = v360;
          }
          else
          {
            HIBYTE(__dst[1]) = v358;
            v359 = (char *)__dst + 8;
            if (!v358)
            {
LABEL_367:
              v359[v358] = 0;
              LOBYTE(__dst[2]) = 1;
              if (v293 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v293 >= 0x17)
              {
                v365 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v293 | 7) != 0x17)
                  v365 = v293 | 7;
                v366 = v365 + 1;
                v363 = (char *)operator new(v365 + 1);
                *((_QWORD *)&__dst[3] + 1) = v366 | 0x8000000000000000;
                *((_QWORD *)&__dst[2] + 1) = v363;
                *(_QWORD *)&__dst[3] = v293;
              }
              else
              {
                HIBYTE(__dst[3]) = v293;
                v363 = (char *)&__dst[2] + 8;
                if (!v293)
                {
                  BYTE8(__dst[2]) = 0;
                  LOBYTE(__dst[4]) = 1;
                  v364 = *(NSObject **)&__dst[0];
                  if ((SHIBYTE(__dst[3]) & 0x80000000) == 0)
                    goto LABEL_371;
LABEL_377:
                  operator delete(*((void **)&__dst[2] + 1));
                  if (LOBYTE(__dst[2]))
                    goto LABEL_378;
                  goto LABEL_380;
                }
              }
              memmove(v363, category, v293);
              v363[v293] = 0;
              LOBYTE(__dst[4]) = 1;
              v364 = *(NSObject **)&__dst[0];
              if (SHIBYTE(__dst[3]) < 0)
                goto LABEL_377;
LABEL_371:
              if (LOBYTE(__dst[2]))
              {
LABEL_378:
                if (SHIBYTE(__dst[1]) < 0)
                  operator delete(*((void **)&__dst[0] + 1));
              }
LABEL_380:
              if (*(_QWORD *)&__dst[0])
                os_release(*(void **)&__dst[0]);
              if (v573 && *(_QWORD *)(v573 + 24))
              {
                v367 = _os_log_pack_size();
                v368 = operator new(v367, (std::align_val_t)8uLL);
                v369 = (_QWORD *)operator new();
                *v369 = &off_24EC1F7F0;
                v369[1] = 0;
                v369[2] = 0;
                v369[3] = v368;
                v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v368;
                v624.__r_.__value_.__l.__size_ = (std::string::size_type)v368;
                v624.__r_.__value_.__r.__words[2] = (std::string::size_type)v369;
                v625 = 0;
                v626 = 0;
                v370 = strlen(__s);
                if (v370 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v371 = v370;
                if (v370 >= 0x17)
                {
                  v374 = (v370 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v370 | 7) != 0x17)
                    v374 = v370 | 7;
                  v375 = v374 + 1;
                  v372 = operator new(v374 + 1);
                  *(_QWORD *)&v593[16] = v375 | 0x8000000000000000;
                  *(_QWORD *)v593 = v372;
                  *(_QWORD *)&v593[8] = v371;
                }
                else
                {
                  v593[23] = v370;
                  v372 = v593;
                  if (!v370)
                  {
LABEL_397:
                    v372[v371] = 0;
                    v376 = strlen(v568);
                    if (v376 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v377 = v376;
                    if (v376 >= 0x17)
                    {
                      v379 = (v376 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v376 | 7) != 0x17)
                        v379 = v376 | 7;
                      v380 = v379 + 1;
                      v378 = operator new(v379 + 1);
                      *((_QWORD *)&v605 + 1) = v380 | 0x8000000000000000;
                      v604 = v378;
                      *(_QWORD *)&v605 = v377;
                    }
                    else
                    {
                      HIBYTE(v605) = v376;
                      v378 = &v604;
                      if (!v376)
                        goto LABEL_405;
                    }
                    memcpy(v378, v568, v377);
LABEL_405:
                    *((_BYTE *)v378 + v377) = 0;
                    *(_QWORD *)&__dst[1] = *(_QWORD *)&v593[8];
                    *(_QWORD *)((char *)&__dst[1] + 7) = *(_QWORD *)&v593[15];
                    *((_QWORD *)&__dst[2] + 1) = v605;
                    *(_QWORD *)((char *)&__dst[2] + 15) = *(_QWORD *)((char *)&v605 + 7);
                    *(_QWORD *)&__dst[0] = off_24EC24648;
                    *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)v593;
                    HIBYTE(__dst[1]) = v593[23];
                    *(_QWORD *)&__dst[2] = v604;
                    BYTE7(__dst[3]) = HIBYTE(v605);
                    v381 = (char *)operator new(0x50uLL);
                    *((_QWORD *)v381 + 1) = 0;
                    *((_QWORD *)v381 + 2) = 0;
                    *((_QWORD *)v381 + 3) = off_24EC24648;
                    *(_QWORD *)v381 = &off_24EC245F8;
                    *((_OWORD *)v381 + 2) = *(__int128 *)((char *)__dst + 8);
                    *((_QWORD *)v381 + 6) = *((_QWORD *)&__dst[1] + 1);
                    *((_QWORD *)&__dst[0] + 1) = 0;
                    __dst[1] = 0uLL;
                    *(_OWORD *)(v381 + 56) = __dst[2];
                    *((_QWORD *)v381 + 9) = *(_QWORD *)&__dst[3];
                    memset(&__dst[2], 0, 24);
                    v382 = (std::__shared_weak_count *)v626;
                    v625 = v381 + 24;
                    v626 = (std::string::size_type)v381;
                    if (!v382)
                      goto LABEL_409;
                    v383 = (unint64_t *)&v382->__shared_owners_;
                    do
                      v384 = __ldaxr(v383);
                    while (__stlxr(v384 - 1, v383));
                    if (v384)
                    {
LABEL_409:
                      if ((SBYTE7(__dst[3]) & 0x80000000) == 0)
                        goto LABEL_410;
LABEL_414:
                      operator delete(*(void **)&__dst[2]);
                      if (SHIBYTE(__dst[1]) < 0)
                        goto LABEL_415;
LABEL_411:
                      __src[0] = v624;
                      v385 = (std::string::size_type)v625;
                      v386 = v624.__r_.__value_.__r.__words[2];
                      if (!v624.__r_.__value_.__r.__words[2])
                        goto LABEL_418;
LABEL_416:
                      v387 = (unint64_t *)(v386 + 8);
                      do
                        v388 = __ldxr(v387);
                      while (__stxr(v388 + 1, v387));
                      goto LABEL_418;
                    }
                    ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                    std::__shared_weak_count::__release_weak(v382);
                    if (SBYTE7(__dst[3]) < 0)
                      goto LABEL_414;
LABEL_410:
                    if ((SHIBYTE(__dst[1]) & 0x80000000) == 0)
                      goto LABEL_411;
LABEL_415:
                    operator delete(*((void **)&__dst[0] + 1));
                    __src[0] = v624;
                    v385 = (std::string::size_type)v625;
                    v386 = v624.__r_.__value_.__r.__words[2];
                    if (v624.__r_.__value_.__r.__words[2])
                      goto LABEL_416;
LABEL_418:
                    v389 = (std::__shared_weak_count *)v626;
                    __src[1].__r_.__value_.__r.__words[0] = v385;
                    __src[1].__r_.__value_.__l.__size_ = v626;
                    if (v626)
                    {
                      v390 = (unint64_t *)(v626 + 8);
                      do
                        v391 = __ldxr(v390);
                      while (__stxr(v391 + 1, v390));
                      __src[1].__r_.__value_.__r.__words[2] = v385;
                      do
                        v392 = __ldaxr(v390);
                      while (__stlxr(v392 - 1, v390));
                      if (!v392)
                      {
                        ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                        std::__shared_weak_count::__release_weak(v389);
                      }
                    }
                    else
                    {
                      __src[1].__r_.__value_.__r.__words[2] = v385;
                    }
                    v393 = (std::__shared_weak_count *)v624.__r_.__value_.__r.__words[2];
                    if (v624.__r_.__value_.__r.__words[2])
                    {
                      v394 = (unint64_t *)(v624.__r_.__value_.__r.__words[2] + 8);
                      do
                        v395 = __ldaxr(v394);
                      while (__stlxr(v395 - 1, v394));
                      if (!v395)
                      {
                        ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                        std::__shared_weak_count::__release_weak(v393);
                      }
                    }
                    v396 = __src[0].__r_.__value_.__r.__words[0];
                    if (*(char *)(__src[1].__r_.__value_.__r.__words[2] + 31) >= 0)
                      v397 = __src[1].__r_.__value_.__r.__words[2] + 8;
                    else
                      v397 = *(_QWORD *)(__src[1].__r_.__value_.__r.__words[2] + 8);
                    if (*(char *)(__src[1].__r_.__value_.__r.__words[2] + 55) >= 0)
                      v398 = __src[1].__r_.__value_.__r.__words[2] + 32;
                    else
                      v398 = *(_QWORD *)(__src[1].__r_.__value_.__r.__words[2] + 32);
                    v399 = _os_log_pack_fill();
                    *(_DWORD *)v399 = 134218498;
                    *(_QWORD *)(v399 + 4) = v567;
                    *(_WORD *)(v399 + 12) = 2080;
                    *(_QWORD *)(v399 + 14) = v397;
                    *(_WORD *)(v399 + 22) = 2080;
                    *(_QWORD *)(v399 + 24) = v398;
                    v400 = operator new();
                    v401 = *(unsigned __int8 *)(v555 + 39);
                    v402 = v552;
                    if ((v401 & 0x80u) != 0)
                    {
                      v402 = *(_QWORD *)(v555 + 16);
                      v401 = *(_QWORD *)(v555 + 24);
                    }
                    *(_QWORD *)v400 = v396;
                    *(_OWORD *)(v400 + 8) = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[1];
                    *(_OWORD *)&__src[0].__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v400 + 24) = *(_OWORD *)&__src[1].__r_.__value_.__l.__data_;
                    *(_OWORD *)&__src[1].__r_.__value_.__l.__data_ = 0uLL;
                    *(_QWORD *)(v400 + 40) = v402;
                    *(_QWORD *)(v400 + 48) = v401;
                    *(_BYTE *)(v400 + 56) = 1;
                    v624.__r_.__value_.__r.__words[0] = 0;
                    *(_QWORD *)&__dst[0] = v400;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v573 + 24) + 40))(*(_QWORD *)(v573 + 24), __dst);
                    v403 = *(_QWORD *)&__dst[0];
                    *(_QWORD *)&__dst[0] = 0;
                    if (v403)
                    {
                      v404 = *(std::__shared_weak_count **)(v403 + 32);
                      if (v404)
                      {
                        v405 = (unint64_t *)&v404->__shared_owners_;
                        do
                          v406 = __ldaxr(v405);
                        while (__stlxr(v406 - 1, v405));
                        if (!v406)
                        {
                          ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                          std::__shared_weak_count::__release_weak(v404);
                        }
                      }
                      v407 = *(std::__shared_weak_count **)(v403 + 16);
                      if (v407)
                      {
                        v408 = (unint64_t *)&v407->__shared_owners_;
                        do
                          v409 = __ldaxr(v408);
                        while (__stlxr(v409 - 1, v408));
                        if (!v409)
                        {
                          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                          std::__shared_weak_count::__release_weak(v407);
                        }
                      }
                      MEMORY[0x227684CE8](v403, 0x10F0C40B62ED6C6);
                      v410 = v624.__r_.__value_.__r.__words[0];
                      v624.__r_.__value_.__r.__words[0] = 0;
                      if (v410)
                      {
                        v411 = *(std::__shared_weak_count **)(v410 + 32);
                        if (v411)
                        {
                          v412 = (unint64_t *)&v411->__shared_owners_;
                          do
                            v413 = __ldaxr(v412);
                          while (__stlxr(v413 - 1, v412));
                          if (!v413)
                          {
                            ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                            std::__shared_weak_count::__release_weak(v411);
                          }
                        }
                        v414 = *(std::__shared_weak_count **)(v410 + 16);
                        if (v414)
                        {
                          v415 = (unint64_t *)&v414->__shared_owners_;
                          do
                            v416 = __ldaxr(v415);
                          while (__stlxr(v416 - 1, v415));
                          if (!v416)
                          {
                            ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                            std::__shared_weak_count::__release_weak(v414);
                          }
                        }
                        MEMORY[0x227684CE8](v410, 0x10F0C40B62ED6C6);
                      }
                    }
                    size = (std::__shared_weak_count *)__src[1].__r_.__value_.__l.__size_;
                    if (__src[1].__r_.__value_.__l.__size_)
                    {
                      v418 = (unint64_t *)(__src[1].__r_.__value_.__l.__size_ + 8);
                      do
                        v419 = __ldaxr(v418);
                      while (__stlxr(v419 - 1, v418));
                      if (!v419)
                      {
                        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                        std::__shared_weak_count::__release_weak(size);
                        v420 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
                        if (__src[0].__r_.__value_.__r.__words[2])
                          goto LABEL_467;
                        goto LABEL_470;
                      }
                    }
                    v420 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
                    if (!__src[0].__r_.__value_.__r.__words[2])
                      goto LABEL_470;
LABEL_467:
                    v421 = (unint64_t *)&v420->__shared_owners_;
                    do
                      v422 = __ldaxr(v421);
                    while (__stlxr(v422 - 1, v421));
                    if (v422)
                    {
LABEL_470:
                      if ((v613 & 0x80000000) == 0)
                        goto LABEL_471;
LABEL_390:
                      operator delete(v611);
                      if (v617 < 0)
                      {
LABEL_391:
                        operator delete(v615);
                        if (!v286)
                          goto LABEL_487;
LABEL_473:
                        v423 = v609;
                        LODWORD(v604) = 31;
                        DWORD2(__dst[1]) = 0;
                        sub_2231A0B14((uint64_t)&v624, (uint64_t)__dst, (unsigned int *)&v604);
                        if (DWORD2(__dst[1]) == -1)
                          sub_22316DD70();
                        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v593;
                        ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC5A9F8[DWORD2(__dst[1])])(__src, &v624, __dst);
                        if (DWORD2(__dst[1]) != -1)
                          ((void (*)(std::string *, __int128 *))off_24EC5A9E0[DWORD2(__dst[1])])(&v624, __dst);
                        if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v424 = __src;
                        else
                          v424 = (std::string *)__src[0].__r_.__value_.__r.__words[0];
                        DWORD2(__dst[1]) = 0;
                        sub_2231BFC9C((uint64_t)v593, (uint64_t)__dst, (unsigned int *)&v619);
                        if (DWORD2(__dst[1]) == -1)
                          sub_22316DD70();
                        *(_QWORD *)v593 = &v615;
                        ((void (*)(std::string *__return_ptr, _BYTE *, __int128 *))off_24EC5A9F8[DWORD2(__dst[1])])(&v624, v593, __dst);
                        if (DWORD2(__dst[1]) != -1)
                          ((void (*)(_BYTE *, __int128 *))off_24EC5A9E0[DWORD2(__dst[1])])(v593, __dst);
                        v425 = &v624;
                        if ((v624.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v425 = (std::string *)v624.__r_.__value_.__r.__words[0];
                        sub_22322C138((uint64_t)__p, "New image pool %p with format %s and size %s", v423, (const char *)v424, (const char *)v425);
                        if (SHIBYTE(v624.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v624.__r_.__value_.__l.__data_);
                          if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_659;
                        }
                        else
                        {
                          if ((SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_486;
LABEL_659:
                          operator delete(__src[0].__r_.__value_.__l.__data_);
                        }
LABEL_486:
                        sub_223182C08((uint64_t)__p);
LABEL_487:
                        sub_223182C08((uint64_t)__p);
                        v426 = *(std::__shared_weak_count **)&__p[64];
                        if (*(_QWORD *)&__p[64])
                        {
                          v427 = (unint64_t *)(*(_QWORD *)&__p[64] + 8);
                          do
                            v428 = __ldaxr(v427);
                          while (__stlxr(v428 - 1, v427));
                          if (!v428)
                          {
                            ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                            std::__shared_weak_count::__release_weak(v426);
                          }
                        }
                        goto LABEL_492;
                      }
LABEL_472:
                      if (v286)
                        goto LABEL_473;
                      goto LABEL_487;
                    }
                    ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
                    std::__shared_weak_count::__release_weak(v420);
                    if (v613 < 0)
                      goto LABEL_390;
LABEL_471:
                    if (v617 < 0)
                      goto LABEL_391;
                    goto LABEL_472;
                  }
                }
                memcpy(v372, __s, v371);
                goto LABEL_397;
              }
              os_log_type_enabled(v364, OS_LOG_TYPE_INFO);
              LODWORD(__dst[0]) = 134218498;
              *(_QWORD *)((char *)__dst + 4) = v567;
              WORD6(__dst[0]) = 2080;
              *(_QWORD *)((char *)__dst + 14) = __s;
              WORD3(__dst[1]) = 2080;
              *((_QWORD *)&__dst[1] + 1) = v568;
              v373 = (void *)_os_log_send_and_compose_impl();
              if (!v373)
                goto LABEL_470;
              free(v373);
              if (v613 < 0)
                goto LABEL_390;
              goto LABEL_471;
            }
          }
          memmove(v359, v357, v358);
          goto LABEL_367;
        }
      }
LABEL_492:
      v429 = v619;
      v430 = (uint64_t)v609;
      v431 = v610;
      *(_QWORD *)&__dst[0] = v619;
      *((_QWORD *)&__dst[0] + 1) = v609;
      *(_QWORD *)&__dst[1] = v610;
      if (v610)
      {
        v432 = (unint64_t *)&v610->__shared_owners_;
        do
          v433 = __ldxr(v432);
        while (__stxr(v433 + 1, v432));
      }
      v434 = &qword_2540CC860;
      v435 = qword_2540CC860;
      if (qword_2540CC860)
      {
        while (1)
        {
          while (1)
          {
            v434 = (uint64_t *)v435;
            v437 = *(_DWORD *)(v435 + 32);
            v438 = *((_DWORD *)v434 + 9);
            v439 = HIDWORD(v429) < v438;
            if ((_DWORD)v429 != v437)
              v439 = v429 < v437;
            if (!v439)
              break;
            v435 = *v434;
            v436 = v434;
            if (!*v434)
              goto LABEL_508;
          }
          v440 = v438 < HIDWORD(v429);
          v441 = (_DWORD)v429 == v437 ? v440 : v437 < v429;
          if (v441 != 1)
            break;
          v435 = v434[1];
          if (!v435)
          {
            v436 = v434 + 1;
            goto LABEL_508;
          }
        }
      }
      else
      {
        v436 = &qword_2540CC860;
LABEL_508:
        v442 = (uint64_t *)operator new(0x38uLL);
        v442[4] = v429;
        v442[5] = v430;
        v442[6] = (uint64_t)v431;
        *((_QWORD *)&__dst[0] + 1) = 0;
        *(_QWORD *)&__dst[1] = 0;
        *v442 = 0;
        v442[1] = 0;
        v442[2] = (uint64_t)v434;
        *v436 = (uint64_t)v442;
        if (*(_QWORD *)qword_2540CC858)
        {
          qword_2540CC858 = *(_QWORD *)qword_2540CC858;
          v442 = (uint64_t *)*v436;
        }
        sub_2231A9A8C((uint64_t *)qword_2540CC860, v442);
        ++qword_2540CC868;
        v431 = *(std::__shared_weak_count **)&__dst[1];
      }
      if (v431)
      {
        v443 = (unint64_t *)&v431->__shared_owners_;
        do
          v444 = __ldaxr(v443);
        while (__stlxr(v444 - 1, v443));
        if (!v444)
        {
          ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
          std::__shared_weak_count::__release_weak(v431);
        }
      }
      v351 = (uint64_t)v609;
LABEL_517:
      v445 = *(_QWORD *)(v351 + 120);
      v446 = *(_QWORD *)(v351 + 128);
      *(_QWORD *)&__dst[0] = v445;
      *((_QWORD *)&__dst[0] + 1) = v446;
      if (v446)
      {
        v447 = (unint64_t *)(v446 + 8);
        do
          v448 = __ldxr(v447);
        while (__stxr(v448 + 1, v447));
      }
      v449 = (std::mutex *)(v351 + 56);
      std::mutex::lock((std::mutex *)(v351 + 56));
      v450 = *(_QWORD *)(v351 + 24);
      if (*(_QWORD *)(v351 + 16) == v450)
      {
        v459 = *(_QWORD *)(v351 + 40);
        if (v459 >= *(_QWORD *)(v351 + 48))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        *(_QWORD *)(v351 + 40) = v459 + 1;
        v458 = (_QWORD *)operator new();
        *v458 = &off_24EC256D8;
        sub_223809ED0((_DWORD *)v351, v458 + 1);
      }
      else
      {
        categoryb = v445;
        __sc = *(_QWORD **)(v450 - 8);
        *(_QWORD *)(v450 - 8) = 0;
        v451 = *(_QWORD *)(v351 + 24);
        v454 = *(_QWORD *)(v451 - 8);
        v452 = (_QWORD *)(v451 - 8);
        v453 = v454;
        *v452 = 0;
        if (v454)
        {
          v455 = *(std::__shared_weak_count **)(v453 + 16);
          if (v455)
          {
            v456 = (unint64_t *)&v455->__shared_owners_;
            do
              v457 = __ldaxr(v456);
            while (__stlxr(v457 - 1, v456));
            if (!v457)
            {
              ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
              std::__shared_weak_count::__release_weak(v455);
            }
          }
          MEMORY[0x227684CE8](v453, 0x10E1C400D19290BLL);
          v449 = (std::mutex *)(v351 + 56);
        }
        *(_QWORD *)(v351 + 24) = v452;
        v445 = categoryb;
        v458 = __sc;
      }
      std::mutex::unlock(v449);
      __src[0].__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)__p = v445;
      *(_QWORD *)&__p[8] = v446;
      if (v446)
      {
        v460 = (unint64_t *)(v446 + 8);
        do
          v461 = __ldxr(v460);
        while (__stxr(v461 + 1, v460));
      }
      *(_QWORD *)&v608 = v458;
      v462 = (_QWORD *)operator new();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)__p = 0;
      *v462 = &off_24EC5AA20;
      v462[1] = 0;
      v462[2] = 0;
      v462[3] = v458;
      v462[4] = v445;
      v462[5] = v446;
      *((_QWORD *)&v608 + 1) = v462;
      v463 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_538;
      v464 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v465 = __ldaxr(v464);
      while (__stlxr(v465 - 1, v464));
      if (!v465)
      {
        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
        std::__shared_weak_count::__release_weak(v463);
        v466 = v610;
        if (!v610)
          goto LABEL_544;
      }
      else
      {
LABEL_538:
        v466 = v610;
        if (!v610)
          goto LABEL_544;
      }
      v467 = (unint64_t *)&v466->__shared_owners_;
      do
        v468 = __ldaxr(v467);
      while (__stlxr(v468 - 1, v467));
      if (!v468)
      {
        ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
        std::__shared_weak_count::__release_weak(v466);
      }
LABEL_544:
      v469 = v608;
      *(_QWORD *)&__dst[0] = &off_24EC20EB8;
      v471 = *(_QWORD *)(v608 + 8);
      v470 = *(std::__shared_weak_count **)(v608 + 16);
      *(_QWORD *)__p = v471;
      *(_QWORD *)&__p[8] = v470;
      if (v470)
      {
        v472 = (unint64_t *)&v470->__shared_owners_;
        do
          v473 = __ldxr(v472);
        while (__stxr(v473 + 1, v472));
        __src[0].__r_.__value_.__l.__size_ = (std::string::size_type)v470;
        do
          v474 = __ldxr(v472);
        while (__stxr(v474 + 1, v472));
        v475 = *(_QWORD *)(v469 + 32);
        v476 = *(_QWORD *)(v469 + 92);
        v477 = *(_DWORD *)(v469 + 108);
        do
          v478 = __ldxr(v472);
        while (__stxr(v478 + 1, v472));
      }
      else
      {
        __src[0].__r_.__value_.__l.__size_ = 0;
        v475 = *(_QWORD *)(v608 + 32);
        v476 = *(_QWORD *)(v608 + 92);
        v477 = *(_DWORD *)(v608 + 108);
      }
      __src[0].__r_.__value_.__r.__words[0] = v471;
      *((_QWORD *)&__dst[0] + 1) = v471;
      *(_QWORD *)&__dst[1] = v470;
      *((_QWORD *)&__dst[1] + 1) = v476;
      LODWORD(__dst[2]) = 2 * v477;
      *((_QWORD *)&__dst[2] + 1) = v475;
      LODWORD(__dst[3]) = 31;
      if (v471)
      {
        if (v470)
        {
          v479 = (unint64_t *)&v470->__shared_owners_;
          do
            v480 = __ldxr(v479);
          while (__stxr(v480 + 1, v479));
          do
            v481 = __ldaxr(v479);
          while (__stlxr(v481 - 1, v479));
          if (!v481)
          {
            ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
            std::__shared_weak_count::__release_weak(v470);
          }
        }
        v482 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v471 + 104))(v471);
        if ((v482 & 0xFFFFFFu) <= 0x10000)
          v483 = 0;
        else
          v483 = v482;
        v484 = v482 & 0xFF00;
        if ((v482 & 0xFF0000) == 0)
          v484 = 0;
        v470 = (std::__shared_weak_count *)__src[0].__r_.__value_.__l.__size_;
        WORD2(__dst[3]) = v484 & 0xFF00 | v483;
        if (!__src[0].__r_.__value_.__l.__size_)
        {
LABEL_571:
          v487 = *(std::__shared_weak_count **)&__p[8];
          if (!*(_QWORD *)&__p[8])
            goto LABEL_577;
          goto LABEL_572;
        }
      }
      else
      {
        WORD2(__dst[3]) = 0;
        if (!v470)
          goto LABEL_571;
      }
      v485 = (unint64_t *)&v470->__shared_owners_;
      do
        v486 = __ldaxr(v485);
      while (__stlxr(v486 - 1, v485));
      if (v486)
        goto LABEL_571;
      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
      std::__shared_weak_count::__release_weak(v470);
      v487 = *(std::__shared_weak_count **)&__p[8];
      if (!*(_QWORD *)&__p[8])
        goto LABEL_577;
LABEL_572:
      v488 = (unint64_t *)&v487->__shared_owners_;
      do
        v489 = __ldaxr(v488);
      while (__stlxr(v489 - 1, v488));
      if (!v489)
      {
        ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
        std::__shared_weak_count::__release_weak(v487);
      }
LABEL_577:
      sub_223801B00((uint64_t)v601, v581, (uint64_t)__dst);
      v490 = *(std::__shared_weak_count **)&__dst[1];
      if (*(_QWORD *)&__dst[1])
      {
        v491 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
        do
          v492 = __ldaxr(v491);
        while (__stlxr(v492 - 1, v491));
        if (!v492)
        {
          ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
          std::__shared_weak_count::__release_weak(v490);
        }
      }
      v590 = v608;
      *(_QWORD *)&__dst[0] = &off_24EC25150;
      v493 = *(_QWORD *)(v608 + 8);
      v494 = *(_QWORD *)(v608 + 16);
      if (v494)
      {
        v495 = (unint64_t *)(v494 + 8);
        do
          v496 = __ldxr(v495);
        while (__stxr(v496 + 1, v495));
        *(_QWORD *)__p = v493;
        *(_QWORD *)&__p[8] = v494;
        __src[0].__r_.__value_.__r.__words[0] = v493;
        __src[0].__r_.__value_.__l.__size_ = v494;
        do
          v497 = __ldxr(v495);
        while (__stxr(v497 + 1, v495));
      }
      else
      {
        *(_QWORD *)__p = *(_QWORD *)(v608 + 8);
        *(_QWORD *)&__p[8] = 0;
        *(_OWORD *)&__src[0].__r_.__value_.__l.__data_ = v493;
      }
      sub_223211434((uint64_t *)__dst + 1, (uint64_t *)__src);
      v498 = (std::__shared_weak_count *)__src[0].__r_.__value_.__l.__size_;
      if (!__src[0].__r_.__value_.__l.__size_)
        goto LABEL_593;
      v499 = (unint64_t *)(__src[0].__r_.__value_.__l.__size_ + 8);
      do
        v500 = __ldaxr(v499);
      while (__stlxr(v500 - 1, v499));
      if (!v500)
      {
        ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
        std::__shared_weak_count::__release_weak(v498);
        v501 = *(std::__shared_weak_count **)&__p[8];
        if (!*(_QWORD *)&__p[8])
          goto LABEL_599;
      }
      else
      {
LABEL_593:
        v501 = *(std::__shared_weak_count **)&__p[8];
        if (!*(_QWORD *)&__p[8])
          goto LABEL_599;
      }
      v502 = (unint64_t *)&v501->__shared_owners_;
      do
        v503 = __ldaxr(v502);
      while (__stlxr(v503 - 1, v502));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
        std::__shared_weak_count::__release_weak(v501);
      }
LABEL_599:
      sub_2231CD8A8(*v155, (uint64_t)__src);
      *(_QWORD *)__p = &off_24EC25150;
      v505 = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[1];
      if (__src[0].__r_.__value_.__r.__words[2])
      {
        v506 = (unint64_t *)(__src[0].__r_.__value_.__r.__words[2] + 8);
        do
          v507 = __ldxr(v506);
        while (__stxr(v507 + 1, v506));
        data = (__int16)__src[3].__r_.__value_.__l.__data_;
        do
          v509 = __ldxr(v506);
        while (__stxr(v509 + 1, v506));
        v510 = __src[1].__r_.__value_.__l.__data_;
        v511 = *(int8x16_t *)&__src[1].__r_.__value_.__r.__words[1];
        *(_OWORD *)&__p[32] = *(_OWORD *)&__src[1].__r_.__value_.__r.__words[1];
        *(std::string *)&__p[48] = __src[2];
        do
          v512 = __ldxr(v506);
        while (__stxr(v512 + 1, v506));
        *(_OWORD *)&__p[8] = v505;
        *(_QWORD *)&__p[24] = v510;
        *(_WORD *)&__p[72] = data;
        do
          v513 = __ldaxr(v506);
        while (__stlxr(v513 - 1, v506));
        if (!v513)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v505 + 1) + 16))(*((_QWORD *)&v505 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v505 + 1));
        }
        do
          v514 = __ldaxr(v506);
        while (__stlxr(v514 - 1, v506));
        if (!v514)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v505 + 1) + 16))(*((_QWORD *)&v505 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v505 + 1));
        }
      }
      else
      {
        *(_QWORD *)&__p[8] = __src[0].__r_.__value_.__l.__size_;
        *(_QWORD *)&__p[16] = 0;
        *(std::string *)&__p[24] = __src[1];
        v511 = *(int8x16_t *)&__src[1].__r_.__value_.__r.__words[1];
        *(std::string *)&__p[48] = __src[2];
        *(_WORD *)&__p[72] = __src[3].__r_.__value_.__l.__data_;
      }
      sub_2237F9490((uint64_t)__dst, (uint64_t)__p, (uint64_t)&v624, v511, v504);
      v515 = *(std::__shared_weak_count **)&__p[16];
      if (!*(_QWORD *)&__p[16])
        goto LABEL_618;
      v516 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v517 = __ldaxr(v516);
      while (__stlxr(v517 - 1, v516));
      if (!v517)
      {
        ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
        std::__shared_weak_count::__release_weak(v515);
        v518 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
        if (__src[0].__r_.__value_.__r.__words[2])
        {
LABEL_619:
          v519 = (unint64_t *)&v518->__shared_owners_;
          do
            v520 = __ldaxr(v519);
          while (__stlxr(v520 - 1, v519));
          if (!v520)
          {
            ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
            std::__shared_weak_count::__release_weak(v518);
          }
        }
      }
      else
      {
LABEL_618:
        v518 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
        if (__src[0].__r_.__value_.__r.__words[2])
          goto LABEL_619;
      }
      v521 = *(std::__shared_weak_count **)&__dst[1];
      if (*(_QWORD *)&__dst[1])
      {
        v522 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
        do
          v523 = __ldaxr(v522);
        while (__stlxr(v523 - 1, v522));
        if (!v523)
        {
          ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
          std::__shared_weak_count::__release_weak(v521);
        }
      }
      v524 = *(float *)(v563 + 36);
      v525 = *(float *)(v563 + 40);
      v526 = 1.0 - v525;
      if (v525 > 1.0)
        v526 = 0.0;
      if (v525 >= 0.0)
        v527 = v526;
      else
        v527 = 1.0;
      v528 = 1.0 / v527;
      if (*((float *)&v624.__r_.__value_.__r.__words[1] + 1) <= (float)(1.0 / v527)
        && *((float *)&v624.__r_.__value_.__r.__words[1] + 1) >= v527
        || *(float *)&v624.__r_.__value_.__l.__data_ <= v524)
      {
        v531 = *((float *)&v624.__r_.__value_.__r.__words[2] + 1) < v527;
        if (*((float *)&v624.__r_.__value_.__r.__words[2] + 1) > v528)
          v531 = 1;
        v532 = *(float *)&v624.__r_.__value_.__r.__words[2] < v527;
        if (*(float *)&v624.__r_.__value_.__r.__words[2] > v528)
          v532 = 1;
        if (*((float *)v624.__r_.__value_.__r.__words + 1) <= v524)
          v532 = 0;
        if (*(float *)&v624.__r_.__value_.__r.__words[1] <= v524)
          v531 = 0;
        v533 = v532 || v531;
      }
      else
      {
        v533 = 1;
      }
      v534 = *(_BYTE *)(v563 + 28) | v533;
      v554 = v534 == 0;
      *(_BYTE *)(v563 + 28) = v534;
      if (v534)
        v559 = *(_DWORD *)(*(_QWORD *)(v563 + 8) + 40);
      v535 = (std::__shared_weak_count *)*((_QWORD *)&v590 + 1);
      if (*((_QWORD *)&v590 + 1))
      {
        v536 = (unint64_t *)(*((_QWORD *)&v590 + 1) + 8);
        do
          v537 = __ldaxr(v536);
        while (__stlxr(v537 - 1, v536));
        if (!v537)
        {
          ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
          std::__shared_weak_count::__release_weak(v535);
        }
      }
LABEL_228:
      if (*(_QWORD *)(v563 + 72) && v562)
      {
        v240 = (std::__shared_weak_count *)operator new(0x240uLL);
        v240->__shared_owners_ = 0;
        v241 = (unint64_t *)&v240->__shared_owners_;
        v240->__shared_weak_owners_ = 0;
        v240->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20F48;
        sub_2231D3000((uint64_t)&v240[1], (uint64_t)v601, (uint64_t)v562);
        v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240[1];
        v624.__r_.__value_.__l.__size_ = (std::string::size_type)v240;
        v242 = (void ***)(*(_QWORD *)(v563 + 112) + 144);
        v248 = sub_223229314(v242, v243, v244, v245, v246, v247);
        v254 = sub_223229330(v242, v249, v250, v251, v252, v253);
        *(_DWORD *)v593 = v248;
        *(_DWORD *)&v593[4] = v254;
        *(_WORD *)__p = 0;
        *(_QWORD *)&__dst[0] = &off_24EC5ABE8;
        sub_22380A870(v593, __p, (uint64_t *)__dst + 1);
        __src[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22278;
        sub_22380B3A8((uint64_t)__dst, (uint64_t *)&__src[0].__r_.__value_.__l.__size_);
        *(_QWORD *)__p = &off_24EC20EB8;
        v255 = *(_OWORD *)&__src[0].__r_.__value_.__r.__words[1];
        if (__src[0].__r_.__value_.__r.__words[2])
        {
          v256 = (unint64_t *)(__src[0].__r_.__value_.__r.__words[2] + 8);
          do
            v257 = __ldxr(v256);
          while (__stxr(v257 + 1, v256));
          v258 = HIDWORD(__src[1].__r_.__value_.__r.__words[2]);
          v259 = __src[1].__r_.__value_.__l.__size_;
          v260 = __src[1].__r_.__value_.__l.__data_;
          v261 = (__int16)__src[2].__r_.__value_.__l.__data_;
          do
            v262 = __ldxr(v256);
          while (__stxr(v262 + 1, v256));
          do
            v263 = __ldxr(v256);
          while (__stxr(v263 + 1, v256));
        }
        else
        {
          v258 = HIDWORD(__src[1].__r_.__value_.__r.__words[2]);
          v259 = __src[1].__r_.__value_.__l.__size_;
          v260 = __src[1].__r_.__value_.__l.__data_;
          v261 = (__int16)__src[2].__r_.__value_.__l.__data_;
        }
        *(_OWORD *)&__p[8] = v255;
        *(_QWORD *)&__p[24] = v259;
        *(_DWORD *)&__p[32] = 2 * v258;
        *(_QWORD *)&__p[40] = v260;
        *(_DWORD *)&__p[48] = 2;
        *(_WORD *)&__p[52] = v261;
        if (*((_QWORD *)&v255 + 1))
        {
          v294 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
          if (!v295)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v255 + 1) + 16))(*((_QWORD *)&v255 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v255 + 1));
          }
          do
            v296 = __ldaxr(v294);
          while (__stlxr(v296 - 1, v294));
          if (!v296)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v255 + 1) + 16))(*((_QWORD *)&v255 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v255 + 1));
          }
        }
        sub_223801B00((uint64_t)v601, v242, (uint64_t)__p);
        v297 = *(std::__shared_weak_count **)&__p[16];
        if (!*(_QWORD *)&__p[16])
          goto LABEL_284;
        v298 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v299 = __ldaxr(v298);
        while (__stlxr(v299 - 1, v298));
        if (!v299)
        {
          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
          std::__shared_weak_count::__release_weak(v297);
          v300 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
          if (__src[0].__r_.__value_.__r.__words[2])
          {
LABEL_285:
            v301 = (unint64_t *)&v300->__shared_owners_;
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
          }
        }
        else
        {
LABEL_284:
          v300 = (std::__shared_weak_count *)__src[0].__r_.__value_.__r.__words[2];
          if (__src[0].__r_.__value_.__r.__words[2])
            goto LABEL_285;
        }
        *(_DWORD *)__p = v561;
        v303 = *(_QWORD *)(v563 + 72);
        if (!v303)
          sub_223198474();
        (*(void (**)(uint64_t, _BYTE *, std::__shared_weak_count *, __int128 *))(*(_QWORD *)v303 + 48))(v303, __p, v240 + 1, __dst);
        v304 = *(std::__shared_weak_count **)&__dst[1];
        if (*(_QWORD *)&__dst[1])
        {
          v305 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        do
          v307 = __ldaxr(v241);
        while (__stlxr(v307 - 1, v241));
        if (!v307)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      v233.i64[0] = v155[2];
      v565 = v233;
      v233.i32[2] = *((_DWORD *)v155 + 6);
      *(int32x4_t *)__sa = v233;
      v233.i64[0] = v155[4];
      v550 = v233;
      v233.i32[2] = *((_DWORD *)v155 + 10);
      v549 = v233;
      v233.i32[0] = *((_DWORD *)v155 + 14);
      v571 = *(float32x2_t *)v233.i8;
      v233.i64[0] = v155[6];
      v551 = (int8x16_t)v233;
      v233.i64[0] = v155[8];
      v233.i32[2] = *((_DWORD *)v155 + 18);
      v569 = (float32x4_t)v233;
      v308 = (uint64_t **)sub_2231D0424((uint64_t)v598);
      sub_22345F4D8(&v587, v308);
      v309 = (float32x2_t *)v587;
      v310 = v588;
      if (v587 == v588)
      {
        v330 = v587;
      }
      else
      {
        v311 = v551;
        v311.i32[2] = v571.i32[0];
        v312 = (float32x2_t)vzip1q_s32(v565, v550).u64[0];
        v313 = (float32x2_t)vtrn2q_s32(*(int32x4_t *)__sa, v549).u64[0];
        v314 = (int8x16_t)vdupq_lane_s32((int32x2_t)v313, 1);
        v315 = (float32x2_t)vzip2q_s32(*(int32x4_t *)__sa, v549).u64[0];
        v316 = (int8x16_t)vnegq_f32(v569);
        *(float32x2_t *)v318.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v565.i8, *(int32x2_t *)v550.i8), *(float *)v316.i32), v313, *(float32x2_t *)v569.f32, 1), v315, v569, 2);
        v317 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v313, 0), v314, 0xCuLL).u64[0];
        *(float32x2_t *)&v318.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v551.i8, *(float32x2_t *)v316.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.i8, 1), *(float32x2_t *)v569.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v316, v316, 8uLL), v571);
        v319 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.i8, 1);
        v320 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
        categorya = v312;
        v572 = v318;
        __sb = v315;
        v566 = v320;
        v570 = v317;
        do
        {
          v322 = *v309;
          v314.i32[0] = v309[1].i32[0];
          v323 = (float32x2_t *)v309[2];
          v321 = (float32x2_t *)v309[3];
          v324 = v309[4];
          v309[3] = 0;
          v309[4] = 0;
          v309[2] = 0;
          *(float32x2_t *)v325.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v312, v322.f32[0]), v317, v322, 1), v315, *(float *)v314.i32);
          *(float32x2_t *)&v325.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v311.i8, v322), v319, v322, 1), *(float32x2_t *)v314.i8, v320);
          v326 = vaddq_f32(v318, v325);
          v327 = v323;
          if (v323 == v321)
          {
            v309[1].i32[0] = v326.i32[2];
            *v309 = *(float32x2_t *)v326.f32;
            v321 = v323;
          }
          else
          {
            do
            {
              v325.i32[0] = v327[1].i32[0];
              *(float32x2_t *)v328.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v312, COERCE_FLOAT(*v327)), v317, *v327, 1), v315, v325.f32[0]);
              *(float32x2_t *)&v328.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v311.i8, *v327), v319, *v327, 1), *(float32x2_t *)v325.f32, v320);
              v314 = (int8x16_t)vaddq_f32(v318, v328);
              v327[1].i32[0] = v314.i32[2];
              *v327 = *(float32x2_t *)v314.i8;
              v327 += 4;
            }
            while (v327 != v321);
            v329 = (void *)v309[2];
            v309[1].i32[0] = v326.i32[2];
            *v309 = *(float32x2_t *)v326.f32;
            if (v329)
            {
              v309[3] = (float32x2_t)v329;
              operator delete(v329);
              v320 = v566;
              v317 = v570;
              v318 = v572;
              v315 = __sb;
              v312 = categorya;
              v311.i64[0] = v551.i64[0];
            }
          }
          v309[2] = (float32x2_t)v323;
          v309[3] = (float32x2_t)v321;
          v309[4] = v324;
          v309 += 5;
        }
        while (v309 != v310);
        v330 = v587;
        v309 = v588;
      }
      *(_QWORD *)&__dst[0] = v330;
      *((_QWORD *)&__dst[0] + 1) = v309;
      v331 = v589;
      *(_QWORD *)&__dst[1] = v589;
      v589 = 0;
      v588 = 0;
      v587 = 0;
      v332 = (void **)sub_2231D0490(v564);
      v333 = v332;
      v334 = (char *)*v332;
      if (*v332)
      {
        v335 = (char *)v332[1];
        v336 = *v332;
        if (v335 != v334)
        {
          do
          {
            v337 = (void *)*((_QWORD *)v335 - 3);
            if (v337)
            {
              *((_QWORD *)v335 - 2) = v337;
              operator delete(v337);
            }
            v335 -= 40;
          }
          while (v335 != v334);
          v336 = *v333;
        }
        v333[1] = v334;
        operator delete(v336);
        *v333 = 0;
        v333[1] = 0;
        v333[2] = 0;
      }
      *v333 = v330;
      v333[1] = v309;
      v333[2] = v331;
      v338 = (float32x2_t *)v587;
      if (v587)
      {
        v339 = v588;
        v340 = v587;
        if (v588 != v587)
        {
          do
          {
            v341 = (void *)v339[-3];
            if (v341)
            {
              v339[-2] = (float32x2_t)v341;
              operator delete(v341);
            }
            v339 -= 5;
          }
          while (v339 != v338);
          v340 = v587;
        }
        v588 = v338;
        operator delete(v340);
      }
      v342 = (unsigned int *)sub_2231D050C((uint64_t)v598);
      if (*((_BYTE *)v342 + 4))
      {
        v343 = *v342;
        if (!*(_BYTE *)(sub_2231D050C(v564) + 4))
          sub_2231CD94C(v564, v343 | 0x100000000);
      }
      v344 = sub_2231D0514((uint64_t)v598);
      if (*(_BYTE *)(v344 + 36))
      {
        v345 = *(_BYTE *)v344;
        __dst[0] = *(_OWORD *)(v344 + 1);
        __dst[1] = *(_OWORD *)(v344 + 17);
        *(_DWORD *)((char *)&__dst[1] + 15) = *(_DWORD *)(v344 + 32);
        if (!*(_BYTE *)(sub_2231D0514(v564) + 36))
        {
          v583 = v345;
          v584 = __dst[0];
          *(_OWORD *)v585 = __dst[1];
          *(_DWORD *)&v585[15] = *(_DWORD *)((char *)&__dst[1] + 15);
          v586 = 1;
          sub_2231CD95C(v564, (uint64_t)&v583);
        }
      }
      v78 = v557;
      v346 = sub_2231D051C((uint64_t)v598);
      sub_2231CDA18(v564, v346);
      sub_2231D3004(v564, (uint64_t)v601, (uint64_t)v582);
      v347 = (std::__shared_weak_count *)v155[1];
      *v155 = v564;
      v155[1] = (uint64_t)v553;
      if (v347)
      {
        v348 = (unint64_t *)&v347->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
      do
        v350 = __ldaxr(v165);
      while (__stlxr(v350 - 1, v165));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
        std::__shared_weak_count::__release_weak(v558);
      }
      v155 += 10;
      v79 = v560;
      ++v561;
      v154 = v560;
      if (v155 == v545)
        goto LABEL_48;
    }
  }
LABEL_47:
  v77 = 0;
  v78 = 0;
  v79 = 0;
LABEL_48:
  v80 = v78;
  kdebug_trace();
  *(_QWORD *)v620 = &off_24EC5AAC0;
  v621 = v620;
  sub_2232268C4((uint64_t)v601, v620, v81, v82, v83, v84);
  v86 = v621;
  if (v621 == v620)
  {
    v88 = 4;
    v86 = v620;
    v87 = v543;
  }
  else
  {
    v87 = v543;
    if (!v621)
      goto LABEL_54;
    v88 = 5;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v86 + 8 * v88))(v86, v85);
LABEL_54:
  sub_223CEECA4((uint64_t)v601, "Keyframing.IntegrateCurrentFrame", 0x20uLL);
  sub_2232267C8((uint64_t)v601, v89, v90, v91, v92, v93);
  sub_223226BB0((uint64_t)v601, v94, v95, v96, v97, v98);
  v99 = v541;
  if (!*(_BYTE *)(v563 + 33))
    v99 = 1;
  if ((v99 & 1) == 0)
  {
    v100 = v544 - 1;
    v101 = v540;
    do
    {
      v103 = *v101++;
      v102 = v103;
      if (v103)
        v104 = 1;
      else
        v104 = v100 == 0;
      --v100;
    }
    while (!v104);
    *(_BYTE *)(v563 + 28) = v102;
  }
  v105 = &v87[v542];
  if (v542 >= 2)
  {
    v107 = v87 + 1;
    v106 = *v87;
    v108 = v539 - 4;
    v109 = v87 + 1;
    do
    {
      v111 = *v109++;
      v110 = v111;
      v112 = v106 >= v111;
      if (v106 <= v111)
        v106 = v110;
      if (!v112)
        v87 = v107;
      v107 = v109;
      v108 -= 4;
    }
    while (v108);
  }
  if (v87 == v105)
    v113 = 0;
  else
    v113 = *v87;
  *(_DWORD *)(v563 + 24) = v113;
  v114 = (int *)(v563 + 24);
  *(_QWORD *)&__dst[0] = "cv3d.recon.";
  *((_QWORD *)&__dst[0] + 1) = 11;
  *(_QWORD *)&__dst[1] = "Stats.Keyframing.Changes";
  *((_QWORD *)&__dst[1] + 1) = 24;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[2], 0, 0, __src);
  sub_224569D7C();
  sub_224569A80();
  v115 = v80;
  if (os_variant_has_internal_diagnostics())
  {
    v116 = sub_2241471F8();
    v117 = v116[2];
    if (!v117)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v117 = v116[2];
    }
    v118 = *(_QWORD *)(v117 + 64);
    v119 = (std::mutex *)(v118 + 32);
    std::mutex::lock((std::mutex *)(v118 + 32));
    v121 = *(_QWORD *)(v118 + 96);
    v120 = *(_QWORD *)(v118 + 104);
    std::mutex::unlock(v119);
    v104 = v121 == v120;
    v115 = v80;
    if (!v104)
    {
      v122 = HIBYTE(__src[0].__r_.__value_.__r.__words[2]);
      v123 = (std::string *)__src[0].__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v124 = v122 >= 0 ? __src : v123;
      v125 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v124);
      v115 = v80;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125))
      {
        memset(__dst, 0, 32);
        LODWORD(__dst[2]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125))
        {
          __p[23] = 10;
          strcpy(__p, "num_pixels");
          v624.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v624.__r_.__value_.__l.__size_ = 2;
          v126 = sub_2241471F8();
          sub_22356F6DC((uint64_t)v126, v125, v114, (uint64_t)__p, (__int128 *)&v624);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  LODWORD(__dst[2]) = 728325624;
  kdebug_trace();
  v127 = HIBYTE(__src[0].__r_.__value_.__r.__words[2]);
  if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v127 = __src[0].__r_.__value_.__l.__size_;
  if (v127 >= 0x11)
  {
    v128 = __src;
    if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = (std::string *)__src[0].__r_.__value_.__r.__words[0];
    v129 = v128->__r_.__value_.__r.__words[0];
    v130 = v128->__r_.__value_.__l.__size_;
    v131 = v128->__r_.__value_.__s.__data_[16];
    if (v129 == 0x6365722E64337663 && v130 == 0x73746174532E6E6FLL && v131 == 46)
    {
      v134 = sub_223187510();
      if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v135 = __src;
      else
        v135 = (std::string *)__src[0].__r_.__value_.__r.__words[0];
      if ((__src[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = HIBYTE(__src[0].__r_.__value_.__r.__words[2]);
      else
        v136 = __src[0].__r_.__value_.__l.__size_;
      sub_223532E4C(v134, v135, v136, (unsigned int *)v114, (uint64_t)"num_pixels", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__src[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src[0].__r_.__value_.__l.__data_);
    if (!v115)
      goto LABEL_111;
  }
  else if (!v115)
  {
LABEL_111:
    if (!v79)
      goto LABEL_125;
    goto LABEL_121;
  }
  while (v77 != v115)
  {
    v137 = (std::__shared_weak_count *)*(v77 - 1);
    if (v137)
    {
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v77 -= 2;
  }
  operator delete(v115);
  if (v79)
  {
LABEL_121:
    v140 = (unint64_t *)&v79->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_125:
  sub_2231D70F4(v598);
  v147 = v600;
  if (v600)
  {
    v148 = (unint64_t *)&v600->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v602;
  if (v602)
  {
    v151 = (unint64_t *)&v602->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  return sub_22322797C(&v603, v142, v143, v144, v145, v146);
}

void sub_22380606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char *a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *v56;
  char *v57;
  unint64_t *v58;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;

  if (LOBYTE(STACK[0xBF8]) && SLOBYTE(STACK[0xBF7]) < 0)
    operator delete((void *)STACK[0xBE0]);
  __cxa_guard_abort(&qword_255788F58);
  if (SLOBYTE(STACK[0x76F]) < 0)
    operator delete((void *)STACK[0x758]);
  if (SLOBYTE(STACK[0x78F]) < 0)
    operator delete((void *)STACK[0x778]);
  sub_223182DAC((uint64_t)&STACK[0x4D0]);
  sub_223167354((uint64_t)&STACK[0x748]);
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 - 1, v58));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v61 = __ldaxr(v56);
  while (__stlxr(v61 - 1, v56));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (a53)
  {
    while (v57 != a53)
    {
      v62 = (std::__shared_weak_count *)*((_QWORD *)v57 - 1);
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(p_shared_owners);
        while (__stlxr(v64 - 1, p_shared_owners));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v57 -= 16;
    }
    operator delete(a53);
  }
  if (a56)
  {
    v65 = (unint64_t *)&a56->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v72 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_22322797C((void **)&STACK[0x4A8], v67, v68, v69, v70, v71);
  _Unwind_Resume(a1);
}

void sub_2238062CC()
{
  JUMPOUT(0x22380658CLL);
}

void sub_2238062D4()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;

  v1 = (unint64_t *)STACK[0x7B8];
  if (STACK[0x7B8] == v0)
  {
    v2 = 4;
    v1 = &STACK[0x7A0];
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  JUMPOUT(0x22380658CLL);
}

void sub_22380630C()
{
  JUMPOUT(0x2238067ECLL);
}

void sub_223806314()
{
  JUMPOUT(0x2238067F4);
}

void sub_22380631C()
{
  JUMPOUT(0x22380682CLL);
}

void sub_223806324(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_22322797C((void **)&STACK[0x4A8], a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_22380633C()
{
  uint64_t v0;

  MEMORY[0x227684CE8](v0, 0x10E1C400D19290BLL);
  JUMPOUT(0x223806360);
}

void sub_22380636C()
{
  JUMPOUT(0x223806550);
}

void sub_223806374()
{
  JUMPOUT(0x2238067ECLL);
}

void sub_22380637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char *a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *v56;
  char *v57;
  unint64_t *v58;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;

  v60 = (std::__shared_weak_count *)STACK[0x7D0];
  if (STACK[0x7D0])
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  sub_223167354((uint64_t)&STACK[0xBE0]);
  sub_223167354((uint64_t)&STACK[0x4D0]);
  sub_223167354((uint64_t)&STACK[0x730]);
  do
    v63 = __ldaxr(v58);
  while (__stlxr(v63 - 1, v58));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v64 = __ldaxr(v56);
  while (__stlxr(v64 - 1, v56));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (a53)
  {
    while (v57 != a53)
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)v57 - 1);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v57 -= 16;
    }
    operator delete(a53);
  }
  if (a56)
  {
    v68 = (unint64_t *)&a56->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v75 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  sub_22322797C((void **)&STACK[0x4A8], v70, v71, v72, v73, v74);
  _Unwind_Resume(a1);
}

void sub_2238064E0(void *a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = sub_22380A3E8((std::mutex *)STACK[0x4D0], v2);
    if (v2)
      v4 = v3;
    else
      v4 = 1;
    if ((v4 & 1) == 0)
    {
      sub_223167354(v2 + 8);
      MEMORY[0x227684CE8](v2, 0x10E1C400D19290BLL);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x22380686CLL);
}

void sub_223806530()
{
  __cxa_end_catch();
  sub_223167354((uint64_t)&STACK[0x4D0]);
  sub_223809E4C((uint64_t *)&STACK[0xBE0]);
  JUMPOUT(0x223806548);
}

void sub_223806560(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x22380686CLL);
}

void sub_223806570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char *a53,std::__shared_weak_count *a54)
{
  std::__shared_weak_count *v54;
  unint64_t *v55;
  char *v56;
  unint64_t *v57;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;

  v72 = v54;
  do
    v59 = __ldaxr(v57);
  while (__stlxr(v59 - 1, v57));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v60 = __ldaxr(v55);
  while (__stlxr(v60 - 1, v55));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (a53)
  {
    while (v56 != a53)
    {
      v61 = (std::__shared_weak_count *)*((_QWORD *)v56 - 1);
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v56 -= 16;
    }
    operator delete(a53);
  }
  if (v72)
  {
    v64 = (unint64_t *)&v72->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v66 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  sub_22322797C(&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

void sub_223806594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  char *v57;
  unint64_t *v58;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;

  v73 = v55;
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 - 1, v58));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v61 = __ldaxr(v56);
  while (__stlxr(v61 - 1, v56));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (v54)
  {
    while (v57 != v54)
    {
      v62 = (std::__shared_weak_count *)*((_QWORD *)v57 - 1);
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(p_shared_owners);
        while (__stlxr(v64 - 1, p_shared_owners));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v57 -= 16;
    }
    operator delete(v54);
  }
  if (v73)
  {
    v65 = (unint64_t *)&v73->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v67 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  sub_22322797C(&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

void sub_2238065A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  void *v56;

  std::__shared_weak_count::~__shared_weak_count(a56);
  operator delete(v56);
  sub_223167354((uint64_t)&STACK[0x7C0]);
  JUMPOUT(0x2238065C8);
}

void sub_2238065D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char *a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *v56;
  char *v57;
  unint64_t *v58;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;

  sub_223167354(a37);
  sub_223167354((uint64_t)&STACK[0xB50]);
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 - 1, v58));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v61 = __ldaxr(v56);
  while (__stlxr(v61 - 1, v56));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (a53)
  {
    while (v57 != a53)
    {
      v62 = (std::__shared_weak_count *)*((_QWORD *)v57 - 1);
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(p_shared_owners);
        while (__stlxr(v64 - 1, p_shared_owners));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v57 -= 16;
    }
    operator delete(a53);
  }
  if (a56)
  {
    v65 = (unint64_t *)&a56->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v72 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_22322797C((void **)&STACK[0x4A8], v67, v68, v69, v70, v71);
  _Unwind_Resume(a1);
}

void sub_223806624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  char *v56;
  unint64_t *v57;
  char *v58;
  unint64_t *v59;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  do
    v61 = __ldaxr(v59);
  while (__stlxr(v61 - 1, v59));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v62 = __ldaxr(v57);
  while (__stlxr(v62 - 1, v57));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (v56)
  {
    while (v58 != v56)
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v58 -= 16;
    }
    operator delete(v56);
  }
  if (a56)
  {
    v66 = (unint64_t *)&a56->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v68 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_22322797C(&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

void sub_22380662C()
{
  sub_223167354((uint64_t)&STACK[0x778]);
  sub_223167354((uint64_t)&STACK[0x260]);
  JUMPOUT(0x2238066F8);
}

void sub_22380663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  char *v56;
  unint64_t *v57;
  char *v58;
  unint64_t *v59;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;

  sub_22319A750((void **)&STACK[0x7C0]);
  sub_22319A750((void **)&STACK[0x238]);
  do
    v61 = __ldaxr(v59);
  while (__stlxr(v61 - 1, v59));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v62 = __ldaxr(v57);
  while (__stlxr(v62 - 1, v57));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (v56)
  {
    while (v58 != v56)
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v58 -= 16;
    }
    operator delete(v56);
  }
  if (a56)
  {
    v66 = (unint64_t *)&a56->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v73 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  sub_22322797C((void **)&STACK[0x4A8], v68, v69, v70, v71, v72);
  _Unwind_Resume(a1);
}

void sub_22380666C()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x22380675CLL);
}

void sub_223806680()
{
  JUMPOUT(0x223806730);
}

void sub_223806688()
{
  sub_223167354((uint64_t)&STACK[0x7C0]);
  JUMPOUT(0x22380672CLL);
}

void sub_2238066C0()
{
  sub_223167354(&STACK[0x260]);
  JUMPOUT(0x2238066F8);
}

void sub_2238066CC()
{
  JUMPOUT(0x2238066F8);
}

void sub_2238066DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  char *v56;
  unint64_t *v57;
  char *v58;
  unint64_t *v59;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  do
    v61 = __ldaxr(v59);
  while (__stlxr(v61 - 1, v59));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v62 = __ldaxr(v57);
  while (__stlxr(v62 - 1, v57));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (v56)
  {
    while (v58 != v56)
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v58 -= 16;
    }
    operator delete(v56);
  }
  if (a56)
  {
    v66 = (unint64_t *)&a56->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v68 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_22322797C(&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

void sub_2238066E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  char *v56;
  unint64_t *v57;
  char *v58;
  unint64_t *v59;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  do
    v61 = __ldaxr(v59);
  while (__stlxr(v61 - 1, v59));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
    std::__shared_weak_count::__release_weak(a54);
  }
  do
    v62 = __ldaxr(v57);
  while (__stlxr(v62 - 1, v57));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
    std::__shared_weak_count::__release_weak(a50);
  }
  if (v56)
  {
    while (v58 != v56)
    {
      v63 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v58 -= 16;
    }
    operator delete(v56);
  }
  if (a56)
  {
    v66 = (unint64_t *)&a56->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  sub_2231D70F4(&STACK[0x2B0]);
  v68 = (std::__shared_weak_count *)STACK[0x488];
  if (STACK[0x488])
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_22322797C(&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

uint64_t sub_223806874(uint64_t a1, int a2)
{
  _QWORD *v4;
  int32x4_t v5;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)a1 = off_24EC5A898;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 36) = 0x3F3333333F19999ALL;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC37568;
  v4[3] = &off_24EC5A6F0;
  *((_OWORD *)v4 + 2) = xmmword_2245F6700;
  v4[6] = 0x400F1AA000000000;
  v4[7] = 0x3F8000000000003FLL;
  v4[8] = 0;
  *(_QWORD *)(a1 + 8) = v4 + 3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = &off_24EC5A8E8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(a1 + 112) = v5;
  *(int32x4_t *)(a1 + 128) = v5;
  *(int32x4_t *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 160) = 2143289344;
  *(_QWORD *)(a1 + 80) = &off_24EC37688;
  *(_QWORD *)(a1 + 88) = &off_24EC20868;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = &off_24EC37688;
  *(_QWORD *)(a1 + 184) = &off_24EC20868;
  *(int32x4_t *)(a1 + 208) = v5;
  *(int32x4_t *)(a1 + 224) = v5;
  *(int32x4_t *)(a1 + 240) = v5;
  *(_DWORD *)(a1 + 256) = 2143289344;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  sub_22345F608(a1 + 280);
  *(_QWORD *)(a1 + 280) = &off_24EC21D68;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  v7 = 0;
  *(_BYTE *)(a1 + 780) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  sub_223208FD4(a1 + 784, (unsigned int *)&v8, &v10, 1, &v7, 1, 0);
  *(_QWORD *)(a1 + 832) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 840));
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_QWORD *)(a1 + 1040) = 0x3F0000003F000000;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_QWORD *)(a1 + 272) = &off_24EC5A5F0;
  *(_QWORD *)(a1 + 1668) = 0x3DCCCCCD40400000;
  *(_DWORD *)(a1 + 1912) = 1069547520;
  sub_22345F608(a1 + 2048);
  *(_QWORD *)(a1 + 2048) = &off_24EC21D68;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  v7 = 0;
  *(_BYTE *)(a1 + 2548) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2528) = 0;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_BYTE *)(a1 + 2536) = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  sub_223208FD4(a1 + 2552, (unsigned int *)&v8, &v10, 1, &v7, 1, 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = a2;
  return a1;
}

void sub_223806AF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_2231F4908(v3);
  sub_2231D0094(v2);
  sub_2237F9B44(v1 + 34);
  v1[22] = &off_24EC220E0;
  v1[10] = &off_24EC220E0;
  sub_223801FE0(v1);
  _Unwind_Resume(a1);
}

void sub_223806B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223806B7C(uint64_t a1, float32x2_t *a2, uint64_t *a3)
{
  float32x2_t *v6;
  float32x2_t v7;
  float32x2_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  float32x2_t *v21;
  std::string::size_type size;
  std::string *v23;
  unsigned __int8 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::mutex *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  __int128 v51;
  int v52;
  float32x4_t v53;
  __int128 v54;
  int8x16_t v55;
  uint64_t v56;
  int8x16_t v57;
  float32x2_t v58;
  int8x16_t v59;
  unsigned __int32 v60;
  int32x4_t *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  BOOL v113;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  BOOL v124;
  int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  BOOL v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  BOOL v134;
  int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  float32x2_t *v139;
  std::string::size_type v140;
  float32x2_t v141;
  float32x2_t *v142;
  std::string::size_type v143;
  float32x2_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  float32x4_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::chrono::steady_clock::time_point v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  std::mutex *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  std::string::size_type v163;
  std::string *v164;
  std::string::size_type v165;
  std::string::size_type v166;
  int v167;
  __n128 *v170;
  std::string *v171;
  size_t v172;
  float v173;
  int8x16_t v174;
  int8x16_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  BOOL v186;
  BOOL v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::string::size_type v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  int v196;
  size_t v197;
  unint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  std::string *v203;
  std::string::size_type v204;
  std::string *v205;
  __int128 v206;
  uint64_t v207;
  __int128 *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  std::mutex *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::string::size_type v227;
  std::string *v228;
  std::string::size_type v229;
  std::string::size_type v230;
  int v231;
  BOOL v232;
  int32x4_t v234;
  uint64_t **v235;
  float32x2_t *v236;
  float32x2_t *v237;
  int8x16_t v238;
  float32x2_t v239;
  float32x2_t v240;
  int8x16_t v241;
  float32x2_t v242;
  int8x16_t v243;
  float32x2_t v244;
  float32x4_t v245;
  float32x2_t v246;
  float32x2_t v247;
  float32x2_t *v248;
  float32x2_t v249;
  float32x2_t *v250;
  float32x2_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x2_t *v254;
  float32x4_t v255;
  void *v256;
  void *v257;
  void *v258;
  void **v259;
  void **v260;
  char *v261;
  char *v262;
  void *v263;
  void *v264;
  float32x2_t *v265;
  float32x2_t *v266;
  void *v267;
  void *v268;
  unsigned int *v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int8x16_t v296;
  std::__shared_weak_count *v297;
  float32x4_t *v298;
  float32x4_t *v299;
  __int128 *v300;
  float32x4_t *v301;
  __int128 v302;
  int v303;
  uint64_t v304;
  _OWORD *v305;
  unint64_t __val;
  float32x2_t *v307;
  int32x4_t v308;
  float32x2_t v309;
  float32x4_t v310;
  float32x2_t v311;
  float32x2_t v312;
  float32x4_t v313;
  int32x4_t v314;
  float32x2_t v315;
  float32x2_t v316;
  char v317;
  __int128 v318;
  _BYTE v319[19];
  char v320;
  void *v321;
  float32x2_t *v322;
  void *v323;
  _BYTE v324[16];
  std::__shared_weak_count *v325;
  _BYTE v326[16];
  std::__shared_weak_count *v327;
  std::string v328;
  __int128 v329;
  std::__shared_weak_count *v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  __int16 v335;
  std::string v336;
  uint64_t (**v337)();
  _OWORD v338[4];
  uint64_t v339;
  __int16 v340;
  __int128 v341;
  std::string v342;
  int v343;
  int v344;
  _BYTE __p[80];
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  int v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  _OWORD v378[12];
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  int v382;
  int v383;
  __int128 v384;
  __int128 v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int v389;
  float32x2_t v390;
  uint64_t (**v391)();
  uint64_t (**v392)(_QWORD);
  __int128 v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int v397;
  float32x2_t v398;
  _BYTE __dst[40];
  int32x4_t v400;
  int32x4_t v401;
  int v402;
  uint64_t v403;

  v403 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C6450;
  strcpy(*(char **)__p, "FusionEngine(cpu).Integrate.Input");
  sub_2231D7968((uint64_t)a2, (const void **)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v6 = (float32x2_t *)sub_2231D0224((uint64_t)a2);
  v7 = vadd_f32(v6[3], (float32x2_t)0x3F0000003F000000);
  v337 = (uint64_t (**)())v6[2];
  *(float32x2_t *)&v338[0] = v7;
  v8 = v6[11];
  sub_223207E58(__p, (int *)&v337);
  v9 = *(_OWORD *)&__p[24];
  *(_OWORD *)__dst = *(_OWORD *)&__p[24];
  v10 = *(_OWORD *)&__p[40];
  v11 = *(_OWORD *)&__p[56];
  v384 = *(_OWORD *)&__p[40];
  v385 = *(_OWORD *)&__p[56];
  v12 = *(_DWORD *)&__p[72];
  v386.i32[0] = *(_DWORD *)&__p[72];
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&__p[8];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_DWORD *)(a1 + 160) = v12;
  *(float32x2_t *)(a1 + 168) = v8;
  v337 = &off_24EC1FE80;
  sub_2231DC6C8(v338);
  *(_BYTE *)(a1 + 28) = 0;
  if (!*(_BYTE *)(a1 + 32))
  {
    v303 = 0;
    v13 = *a3;
    if (!*a3)
      goto LABEL_365;
    goto LABEL_7;
  }
  v303 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 32) >> 2) & 1;
  v13 = *a3;
  if (*a3)
  {
LABEL_7:
    __val = 0;
    v305 = (_OWORD *)(a1 + 1980);
    v14 = a3[1];
    v292 = v14 + 80 * v13;
    __asm { FMOV            V0.4S, #1.0 }
    v302 = _Q0;
    v293 = vdupq_n_s32(0x7FC00000u);
    v300 = (__int128 *)(a1 + 1676);
    v301 = (float32x4_t *)(a1 + 1104);
    v298 = (float32x4_t *)(a1 + 1916);
    v299 = (float32x4_t *)(a1 + 1740);
    v307 = (float32x2_t *)(a1 + 280);
    v304 = (uint64_t)a2;
    do
    {
      v18 = *(_QWORD *)v14;
      if (!*(_QWORD *)v14)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/FusionEngine.cpp", 492, (uint64_t)"output.keyframe", 15, (uint64_t)"Invalid target keyframe", 23, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v18 = *(_QWORD *)v14;
      }
      v19 = operator new(0x240uLL);
      v19[1] = 0;
      v20 = v19 + 1;
      v19[2] = 0;
      *v19 = &off_24EC20F48;
      v21 = (float32x2_t *)(v19 + 3);
      sub_2231D0CD4(v19 + 3, v18);
      std::to_string(&v336, __val);
      *(_QWORD *)__p = "FusionEngine(cpu).Integrate.keyframe ";
      *(_QWORD *)&__p[8] = 37;
      size = HIBYTE(v336.__r_.__value_.__r.__words[2]);
      v23 = &v336;
      if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size = v336.__r_.__value_.__l.__size_;
        v23 = (std::string *)v336.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)&__p[16] = v23;
      *(_QWORD *)&__p[24] = size;
      v297 = (std::__shared_weak_count *)v19;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)&v384);
      sub_2231D7968((uint64_t)v21, (const void **)&v384);
      if (SBYTE7(v385) < 0)
        operator delete((void *)v384);
      v24 = atomic_load((unsigned __int8 *)&qword_2540CC6D0);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC6D0))
      {
        sub_223174DE4(&qword_2540CC840, "Keyframing.FusionEngine(cpu).Integrate");
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CC840, &dword_22314D000);
        __cxa_guard_release(&qword_2540CC6D0);
        a2 = (float32x2_t *)v304;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v25 = sub_2241471F8();
        v26 = v25[2];
        if (!v26)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_374;
          }
          v26 = v25[2];
        }
        v27 = *(_QWORD *)(v26 + 64);
        v28 = (std::mutex *)(v27 + 32);
        std::mutex::lock((std::mutex *)(v27 + 32));
        v30 = *(_QWORD *)(v27 + 96);
        v29 = *(_QWORD *)(v27 + 104);
        std::mutex::unlock(v28);
        if (v30 != v29)
        {
          *(_QWORD *)__p = "cv3d.recon.";
          *(_QWORD *)&__p[8] = 11;
          v31 = byte_2540CC857;
          if (byte_2540CC857 >= 0)
          {
            v32 = &qword_2540CC840;
          }
          else
          {
            v31 = qword_2540CC848;
            v32 = (uint64_t *)qword_2540CC840;
          }
          *(_QWORD *)&__p[16] = v32;
          *(_QWORD *)&__p[24] = v31;
          sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)&v384);
          sub_2241471F8();
          v33 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
          v35 = v34;
          if (SBYTE7(v385) < 0)
          {
            operator delete((void *)v384);
            if (!v35)
              goto LABEL_44;
          }
          else if (!v34)
          {
            goto LABEL_44;
          }
          sub_2231CC34C((uint64_t)v21, (uint64_t)&v384);
          *(_QWORD *)__p = &off_24EC1FE80;
          sub_2231FC64C((uint64_t)&v384, &__p[8]);
          v36 = *(_OWORD *)&__p[8];
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v338[0] + 1);
          v338[0] = v36;
          if (v37)
          {
            p_shared_owners = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v338[1] = *(_OWORD *)&__p[24];
          v338[2] = *(_OWORD *)&__p[40];
          v338[3] = *(_OWORD *)&__p[56];
          v339 = *(_QWORD *)&__p[72];
          v340 = v346;
          v40 = *(std::__shared_weak_count **)&__p[16];
          if (!*(_QWORD *)&__p[16])
            goto LABEL_38;
          v41 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            v43 = (std::__shared_weak_count *)v385;
            if (!(_QWORD)v385)
              goto LABEL_44;
          }
          else
          {
LABEL_38:
            v43 = (std::__shared_weak_count *)v385;
            if (!(_QWORD)v385)
              goto LABEL_44;
          }
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
LABEL_44:
      v46 = (float32x2_t *)sub_2231D0224(*(_QWORD *)v14);
      v47 = vadd_f32(v46[3], (float32x2_t)0x3F0000003F000000);
      *(float32x2_t *)__dst = v46[2];
      *(float32x2_t *)&__dst[8] = v47;
      v48 = v46[11];
      sub_223207E58(__p, (int *)__dst);
      v329 = *(_OWORD *)&__p[24];
      v49 = *(int32x4_t *)&__p[24];
      v51 = *(_OWORD *)&__p[56];
      v384 = *(_OWORD *)&__p[40];
      v50 = *(int32x4_t *)&__p[40];
      v385 = *(_OWORD *)&__p[56];
      v386.i32[0] = *(_DWORD *)&__p[72];
      v52 = *(_DWORD *)&__p[72];
      v53.i32[3] = *(_DWORD *)&__p[20];
      *(_OWORD *)(a1 + 192) = *(_OWORD *)&__p[8];
      *(int32x4_t *)(a1 + 208) = v49;
      *(int32x4_t *)(a1 + 224) = v50;
      *(_OWORD *)(a1 + 240) = v51;
      *(_DWORD *)(a1 + 256) = v52;
      *(float32x2_t *)(a1 + 264) = v48;
      v49.i64[0] = *(_QWORD *)(v14 + 16);
      v49.i32[2] = *(_DWORD *)(v14 + 24);
      v50.i64[0] = *(_QWORD *)(v14 + 32);
      v50.i32[2] = *(_DWORD *)(v14 + 40);
      v53.i64[0] = *(_QWORD *)(v14 + 64);
      v53.i32[2] = *(_DWORD *)(v14 + 72);
      *(_QWORD *)&v54 = vzip1q_s32(v49, v50).u64[0];
      v55 = (int8x16_t)vnegq_f32(v53);
      v56 = *(_QWORD *)(a1 + 8);
      v57 = (int8x16_t)vtrn2q_s32(v49, v50);
      v57.i32[2] = HIDWORD(*(_QWORD *)(v14 + 48));
      v58.i32[0] = *(_DWORD *)(v14 + 56);
      v59 = (int8x16_t)vzip2q_s32(v49, v50);
      v59.i32[2] = v58.i32[0];
      *((_QWORD *)&v54 + 1) = *(_QWORD *)(v14 + 48);
      v60 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v14 + 48), *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v14 + 48), 1), *(float32x2_t *)v53.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), v58).u32[0];
      HIDWORD(v51) = 0;
      LODWORD(v51) = vdupq_lane_s32(*(int32x2_t *)&v57, 0).i32[3];
      *(_QWORD *)((char *)&v51 + 4) = vextq_s8(v57, v59, 4uLL).u64[0];
      v59.i64[1] = vdupq_laneq_s32((int32x4_t)v59, 2).u32[0];
      *(_OWORD *)&__p[16] = v51;
      *(int8x16_t *)&__p[32] = v59;
      *(_OWORD *)__p = v54;
      *(float32x2_t *)&__p[48] = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v54, *(float *)v55.i32), *(float32x2_t *)v57.i8, *(float32x2_t *)v53.f32, 1), *(float32x2_t *)v59.i8, v53, 2);
      *(_DWORD *)&__p[56] = v60;
      *(_DWORD *)&__p[60] = 1065353216;
      sub_2237F9D54(v56, v301, (uint64_t)v300, a2, v21, (float32x2_t *)__p, 0);
      v61 = *(int32x4_t **)(a1 + 8);
      *v305 = v302;
      *(_OWORD *)(a1 + 1996) = v302;
      v62 = *(_OWORD *)(a1 + 1756);
      *v298 = *v299;
      *(_OWORD *)(a1 + 1932) = v62;
      v63 = *(_OWORD *)(a1 + 1788);
      *(_OWORD *)(a1 + 1948) = *(_OWORD *)(a1 + 1772);
      *(_OWORD *)(a1 + 1964) = v63;
      *(int32x4_t *)(a1 + 2016) = vrev64q_s32(v61[1]);
      *(_DWORD *)(a1 + 2012) = v61[2].i32[1];
      *(_DWORD *)(a1 + 2032) = 452930346;
      *(_WORD *)(a1 + 2036) = -229;
      *(_DWORD *)(a1 + 2040) = v61[2].i32[0];
      v64 = *(_QWORD *)sub_2231D050C((uint64_t)v21);
      v65 = *(_QWORD *)sub_2231D050C((uint64_t)a2);
      *v305 = v302;
      *(_OWORD *)(a1 + 1996) = v302;
      if ((v64 & 0xFF00000000) != 0 && (v65 & 0xFF00000000) != 0)
      {
        if (*(float *)&v64 <= 0.0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 110, (uint64_t)"*clipping_point_lux_current > 0.f", 33, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C)|| *(float *)&v65 <= 0.0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 111, (uint64_t)"*clipping_point_lux_candidate > 0.f", 35, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C))
        {
LABEL_374:
          abort();
        }
        v66.i64[0] = *(_QWORD *)(a1 + 1996);
        v66.i32[2] = *(_DWORD *)(a1 + 2004);
        v67 = vmulq_n_f32(v66, *(float *)&v65 / *(float *)&v64);
        *(_DWORD *)(a1 + 2004) = v67.i32[2];
        *(_QWORD *)(a1 + 1996) = v67.i64[0];
      }
      *(_QWORD *)&v329 = &off_24EC25150;
      sub_223210C10((uint64_t)&v329 + 8);
      if (v303)
      {
        sub_2231CD8A8((uint64_t)v21, (uint64_t)__p);
        v68 = *(_QWORD *)&__p[8];
        v69 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v70 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          v72 = *(_WORD *)&__p[72];
          do
            v73 = __ldxr(v70);
          while (__stxr(v73 + 1, v70));
          v74 = *(_QWORD *)&__p[24];
          v384 = *(_OWORD *)&__p[32];
          v385 = *(_OWORD *)&__p[48];
          v386.i64[0] = *(_QWORD *)&__p[64];
          do
            v75 = __ldxr(v70);
          while (__stxr(v75 + 1, v70));
          do
            v76 = __ldaxr(v70);
          while (__stlxr(v76 - 1, v70));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
          do
            v77 = __ldaxr(v70);
          while (__stlxr(v77 - 1, v70));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        else
        {
          v72 = *(_WORD *)&__p[72];
          v74 = *(_QWORD *)&__p[24];
          v384 = *(_OWORD *)&__p[32];
          v385 = *(_OWORD *)&__p[48];
          v386.i64[0] = *(_QWORD *)&__p[64];
        }
        v78 = v330;
        *((_QWORD *)&v329 + 1) = v68;
        v330 = v69;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v331 = v74;
        v332 = v384;
        v333 = v385;
        v334 = v386.i64[0];
        v335 = v72;
        v81 = *(std::__shared_weak_count **)&__p[16];
        a2 = (float32x2_t *)v304;
        if (*(_QWORD *)&__p[16])
        {
          v82 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        *(_BYTE *)(a1 + 1048) = 1;
      }
      v84 = *(_OWORD *)(a1 + 1120);
      *(float32x4_t *)__p = *v301;
      *(_OWORD *)&__p[16] = v84;
      v85 = *(_OWORD *)(a1 + 1152);
      *(_OWORD *)&__p[32] = *(_OWORD *)(a1 + 1136);
      *(_OWORD *)&__p[48] = v85;
      v86 = *(_OWORD *)(a1 + 1184);
      *(_OWORD *)&__p[64] = *(_OWORD *)(a1 + 1168);
      v346 = v86;
      v87 = *(_OWORD *)(a1 + 1216);
      v347 = *(_OWORD *)(a1 + 1200);
      v348 = v87;
      v88 = *(_OWORD *)(a1 + 1232);
      v89 = *(_OWORD *)(a1 + 1248);
      v90 = *(_OWORD *)(a1 + 1280);
      v351 = *(_OWORD *)(a1 + 1264);
      v352 = v90;
      v349 = v88;
      v350 = v89;
      v91 = *(_OWORD *)(a1 + 1344);
      v355 = *(_OWORD *)(a1 + 1328);
      v356 = v91;
      v92 = *(_OWORD *)(a1 + 1312);
      v353 = *(_OWORD *)(a1 + 1296);
      v354 = v92;
      v93 = *(_OWORD *)(a1 + 1408);
      v359 = *(_OWORD *)(a1 + 1392);
      v360 = v93;
      v94 = *(_OWORD *)(a1 + 1376);
      v357 = *(_OWORD *)(a1 + 1360);
      v358 = v94;
      v95 = *(_OWORD *)(a1 + 1424);
      v96 = *(_OWORD *)(a1 + 1440);
      v97 = *(_OWORD *)(a1 + 1472);
      v363 = *(_OWORD *)(a1 + 1456);
      v364 = v97;
      v361 = v95;
      v362 = v96;
      v98 = *(_OWORD *)(a1 + 1488);
      v99 = *(_OWORD *)(a1 + 1504);
      v100 = *(_OWORD *)(a1 + 1552);
      v368 = *(_OWORD *)(a1 + 1536);
      v369 = v100;
      v101 = *(_OWORD *)(a1 + 1520);
      v366 = v99;
      v367 = v101;
      v365 = v98;
      v102 = *(_OWORD *)(a1 + 1584);
      v370 = *(_OWORD *)(a1 + 1568);
      v371 = v102;
      v372 = *(_DWORD *)(a1 + 1600);
      v373 = *(_OWORD *)(a1 + 1604);
      v374 = *(_OWORD *)(a1 + 1620);
      v375 = *(_OWORD *)(a1 + 1636);
      v376 = *(_OWORD *)(a1 + 1652);
      v377 = *(_QWORD *)(a1 + 1668);
      v103 = *v300;
      v104 = *(_OWORD *)(a1 + 1692);
      v105 = *(_OWORD *)(a1 + 1724);
      v378[2] = *(_OWORD *)(a1 + 1708);
      v378[3] = v105;
      v378[0] = v103;
      v378[1] = v104;
      v106 = *(_OWORD *)(a1 + 1788);
      v378[6] = *(_OWORD *)(a1 + 1772);
      v378[7] = v106;
      v107 = *(_OWORD *)(a1 + 1756);
      v378[4] = *v299;
      v378[5] = v107;
      v108 = *(_OWORD *)(a1 + 1852);
      v378[10] = *(_OWORD *)(a1 + 1836);
      v378[11] = v108;
      v109 = *(_OWORD *)(a1 + 1820);
      v378[8] = *(_OWORD *)(a1 + 1804);
      v378[9] = v109;
      v379 = *(_QWORD *)(a1 + 1868);
      v110 = *(_OWORD *)(a1 + 1876);
      v111 = *(_OWORD *)(a1 + 1892);
      v382 = *(_DWORD *)(a1 + 1908);
      v380 = v110;
      v381 = v111;
      v383 = *(_DWORD *)(a1 + 1912);
      v112 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32);
      sub_2231D3D90((uint64_t)a2, (uint64_t)__dst);
      v113 = 0;
      if (*(_DWORD *)&__dst[32] && *(_DWORD *)&__dst[36])
      {
        sub_2231D4288((uint64_t)a2, (uint64_t)&v342);
        v113 = 0;
        if (!v343 || !v344)
          goto LABEL_91;
        sub_2231D432C((uint64_t)a2, (uint64_t)&v384);
        _ZF = !v387.i32[2] || v387.i32[3] == 0;
        v113 = !_ZF;
        v115 = (std::__shared_weak_count *)v385;
        if (!(_QWORD)v385)
          goto LABEL_91;
        v116 = (unint64_t *)(v385 + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
          v118 = (std::__shared_weak_count *)v342.__r_.__value_.__r.__words[2];
          if (!v342.__r_.__value_.__r.__words[2])
            goto LABEL_96;
        }
        else
        {
LABEL_91:
          v118 = (std::__shared_weak_count *)v342.__r_.__value_.__r.__words[2];
          if (!v342.__r_.__value_.__r.__words[2])
            goto LABEL_96;
        }
        v119 = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
LABEL_96:
      v121 = *(std::__shared_weak_count **)&__dst[16];
      if (!*(_QWORD *)&__dst[16])
        goto LABEL_100;
      v122 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
        if (v113)
          goto LABEL_102;
      }
      else
      {
LABEL_100:
        if (v113)
          goto LABEL_102;
      }
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 111, (uint64_t)"!input.Depth().Empty() && !input.Confidence().Empty() && !input.NormalRgba16f().Empty()", 87, (uint64_t)"Should provide depth confidence and normals images", 50, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_372;
      }
LABEL_102:
      if ((v112 & 4) == 0)
        goto LABEL_115;
      sub_2231D48A8((uint64_t)a2, (uint64_t)&v384);
      if (v387.i32[2])
        v124 = v387.i32[3] == 0;
      else
        v124 = 1;
      v125 = v124;
      v126 = (std::__shared_weak_count *)v385;
      if (!(_QWORD)v385)
        goto LABEL_113;
      v127 = (unint64_t *)(v385 + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        if (!v125)
          goto LABEL_115;
      }
      else
      {
LABEL_113:
        if (!v125)
          goto LABEL_115;
      }
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 113, (uint64_t)"!input.ColorRgba16f().Empty()", 29, (uint64_t)"Should provide color images", 27, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_372;
      }
LABEL_115:
      if ((v112 & 8) == 0)
        goto LABEL_128;
      sub_2231D494C((uint64_t)a2, (uint64_t)&v384);
      if (v387.i32[2])
        v129 = v387.i32[3] == 0;
      else
        v129 = 1;
      v130 = v129;
      v131 = (std::__shared_weak_count *)v385;
      if (!(_QWORD)v385)
        goto LABEL_126;
      v132 = (unint64_t *)(v385 + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
        if (!v130)
          goto LABEL_128;
      }
      else
      {
LABEL_126:
        if (!v130)
          goto LABEL_128;
      }
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 116, (uint64_t)"!input.SemanticHistogram().Empty()", 34, (uint64_t)"Should provide semantic images", 30, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_372;
      }
LABEL_128:
      if ((v112 & 0x10) == 0)
        goto LABEL_141;
      sub_2231D4E60((uint64_t)a2, (uint64_t)&v384);
      if (v387.i32[2])
        v134 = v387.i32[3] == 0;
      else
        v134 = 1;
      v135 = v134;
      v136 = (std::__shared_weak_count *)v385;
      if (!(_QWORD)v385)
        goto LABEL_139;
      v137 = (unint64_t *)(v385 + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
        if (!v135)
          goto LABEL_141;
      }
      else
      {
LABEL_139:
        if (!v135)
          goto LABEL_141;
      }
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 119, (uint64_t)"!input.MaterialHistogram().Empty()", 34, (uint64_t)"Should provide material images", 30, (void (*)(void **))sub_22457406C))
      {
LABEL_372:
        abort();
      }
LABEL_141:
      v385 = 0uLL;
      v386 = v293;
      v387 = v293;
      v388 = v293;
      v389 = 2143289344;
      *((_QWORD *)&v384 + 1) = &off_24EC20868;
      *(_QWORD *)&v384 = &off_24EC37688;
      v392 = &off_24EC20868;
      v393 = 0uLL;
      v394 = v293;
      v395 = v293;
      v396 = v293;
      v397 = 2143289344;
      v398 = 0;
      v390 = 0;
      v391 = &off_24EC37688;
      v139 = (float32x2_t *)sub_2231D0224((uint64_t)a2);
      v140 = (std::string::size_type)vadd_f32(v139[3], (float32x2_t)0x3F0000003F000000);
      v342.__r_.__value_.__l.__data_ = (std::string::pointer)v139[2];
      v342.__r_.__value_.__l.__size_ = v140;
      v141 = v139[11];
      sub_223207E58(__dst, (int *)&v342);
      v386 = *(int32x4_t *)&__dst[24];
      v387 = v400;
      v388 = v401;
      v389 = v402;
      v385 = *(_OWORD *)&__dst[8];
      v390 = v141;
      v142 = (float32x2_t *)sub_2231D0224((uint64_t)v21);
      v143 = (std::string::size_type)vadd_f32(v142[3], (float32x2_t)0x3F0000003F000000);
      v342.__r_.__value_.__l.__data_ = (std::string::pointer)v142[2];
      v342.__r_.__value_.__l.__size_ = v143;
      v144 = v142[11];
      sub_223207E58(__dst, (int *)&v342);
      v394 = *(int32x4_t *)&__dst[24];
      v395 = v400;
      v396 = v401;
      v397 = v402;
      v393 = *(_OWORD *)&__dst[8];
      v398 = v144;
      if (*((_QWORD *)&v376 + 1) != *(_QWORD *)&v144
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 131, (uint64_t)"check_size(cameras.dst.ImageSize(), vs_params.dst_size)", 55, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)&v390 != (_QWORD)v376&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 132, (uint64_t)"check_size(cameras.src.ImageSize(), vs_params.src_size)", 55, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)&v398 != v379
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 133, (uint64_t)"check_size(cameras.dst.ImageSize(), fs_params.current_size)", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v145 = sub_2231D0224((uint64_t)a2);
      v146 = sub_2231D0224((uint64_t)v21);
      sub_2237F6E38((uint64_t)v307, v145, v146);
      sub_2231D3D90((uint64_t)a2, (uint64_t)__dst);
      sub_2237F7314(v307, (float32x4_t *)__p, (float32x2_t *)&v384, (uint64_t)__dst, v147, v148, v149, v150);
      v151 = *(std::__shared_weak_count **)&__dst[16];
      if (*(_QWORD *)&__dst[16])
      {
        v152 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728307672;
      kdebug_trace();
      sub_2237F7450(v307, (uint64_t)a2, (float32x4_t *)__p, (uint64_t)v378);
      kdebug_trace();
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728307680;
      kdebug_trace();
      sub_22380BE50(a1 + 272, (uint64_t)__p, v298, (uint64_t)a2, (uint64_t)v21, v112);
      kdebug_trace();
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      *(_QWORD *)&__dst[16] = "Stats.Keyframing.SurfaceWarpFuser";
      *(_QWORD *)&__dst[24] = 33;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v342);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v155 = sub_2241471F8();
        v156 = v155[2];
        if (!v156)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v156 = v155[2];
        }
        v157 = *(_QWORD *)(v156 + 64);
        v158 = (std::mutex *)(v157 + 32);
        std::mutex::lock((std::mutex *)(v157 + 32));
        v160 = *(_QWORD *)(v157 + 96);
        v159 = *(_QWORD *)(v157 + 104);
        std::mutex::unlock(v158);
        if (v160 != v159)
        {
          sub_2241471F8();
          v161 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v161 + 24))(v161))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            v162 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v154.__d_.__rep_) / 1000000.0;
            v154.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            *(float *)&v328.__r_.__value_.__l.__data_ = v162;
            sub_223468AC4((double *)&qword_255788F20, v161, (float *)&v328, "WarpAndFuseKeyframe (ms)");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v163 = HIBYTE(v342.__r_.__value_.__r.__words[2]);
      if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v163 = v342.__r_.__value_.__l.__size_;
      if (v163 >= 0x11)
      {
        v164 = &v342;
        if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v164 = (std::string *)v342.__r_.__value_.__r.__words[0];
        v165 = v164->__r_.__value_.__r.__words[0];
        v166 = v164->__r_.__value_.__l.__size_;
        v167 = v164->__r_.__value_.__s.__data_[16];
        if (v165 == 0x6365722E64337663 && v166 == 0x73746174532E6E6FLL && v167 == 46)
        {
          v170 = sub_223187510();
          if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v171 = &v342;
          else
            v171 = (std::string *)v342.__r_.__value_.__r.__words[0];
          if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v172 = HIBYTE(v342.__r_.__value_.__r.__words[2]);
          else
            v172 = v342.__r_.__value_.__l.__size_;
          v173 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v154.__d_.__rep_) / 1000000.0;
          std::chrono::steady_clock::now();
          *(float *)&v328.__r_.__value_.__l.__data_ = v173;
          sub_2231897A8((uint64_t *)v170, v171, v172, (float *)&v328, (uint64_t)"WarpAndFuseKeyframe (ms)", 24);
          a2 = (float32x2_t *)v304;
        }
      }
      kdebug_trace();
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v342.__r_.__value_.__l.__data_);
        if (!v303)
        {
LABEL_210:
          if (!*(_QWORD *)(a1 + 72))
            goto LABEL_218;
LABEL_211:
          *(_QWORD *)__p = &off_24EC5ABE8;
          sub_2238178E8((uint64_t *)&__p[8]);
          LODWORD(v384) = __val;
          v188 = *(_QWORD *)(a1 + 72);
          if (!v188)
            sub_223198474();
          (*(void (**)(uint64_t, __int128 *, float32x2_t *, _BYTE *))(*(_QWORD *)v188 + 48))(v188, &v384, v307, __p);
          v189 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v190 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
              std::__shared_weak_count::__release_weak(v189);
            }
          }
          goto LABEL_218;
        }
      }
      else if (!v303)
      {
        goto LABEL_210;
      }
      sub_2231D48A8((uint64_t)v307, (uint64_t)__p);
      sub_2237F9490((uint64_t)__p, (uint64_t)&v329, (uint64_t)&v384, v174, v175);
      v176 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v177 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v179 = *(float *)(a1 + 36);
      v180 = *(float *)(a1 + 40);
      v181 = 1.0 - v180;
      if (v180 > 1.0)
        v181 = 0.0;
      if (v180 >= 0.0)
        v182 = v181;
      else
        v182 = 1.0;
      v183 = 1.0 / v182;
      if ((*((float *)&v384 + 3) > (float)(1.0 / v182) || *((float *)&v384 + 3) < v182) && *(float *)&v384 > v179)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        if (!*(_QWORD *)(a1 + 72))
          goto LABEL_218;
        goto LABEL_211;
      }
      v186 = *((float *)&v385 + 1) < v182;
      if (*((float *)&v385 + 1) > v183)
        v186 = 1;
      v187 = *(float *)&v385 < v182;
      if (*(float *)&v385 > v183)
        v187 = 1;
      if (*((float *)&v384 + 1) <= v179)
        v187 = 0;
      if (*((float *)&v384 + 2) <= v179)
        v186 = 0;
      *(_BYTE *)(a1 + 28) |= v187 || v186;
      if (*(_QWORD *)(a1 + 72))
        goto LABEL_211;
LABEL_218:
      *(_QWORD *)__p = "FusionEngine(cpu).Integrate.warped input ";
      *(_QWORD *)&__p[8] = 41;
      v192 = HIBYTE(v336.__r_.__value_.__r.__words[2]);
      v193 = &v336;
      if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v192 = v336.__r_.__value_.__l.__size_;
        v193 = (std::string *)v336.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)&__p[16] = v193;
      *(_QWORD *)&__p[24] = v192;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)&v384);
      sub_2231D7968((uint64_t)v307, (const void **)&v384);
      if (SBYTE7(v385) < 0)
        operator delete((void *)v384);
      *(_QWORD *)__p = "FusionEngine(cpu).Integrate.fused keyframe ";
      *(_QWORD *)&__p[8] = 43;
      v194 = HIBYTE(v336.__r_.__value_.__r.__words[2]);
      v195 = &v336;
      if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v194 = v336.__r_.__value_.__l.__size_;
        v195 = (std::string *)v336.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)&__p[16] = v195;
      *(_QWORD *)&__p[24] = v194;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, (std::string *)&v384);
      sub_2231D7968((uint64_t)v21, (const void **)&v384);
      if (SBYTE7(v385) < 0)
        operator delete((void *)v384);
      v196 = byte_2540CC857;
      if (byte_2540CC857 >= 0)
        v197 = byte_2540CC857;
      else
        v197 = qword_2540CC848;
      v198 = v197 + 13;
      if (v197 + 13 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v198 >= 0x17)
      {
        v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v198 | 7) != 0x17)
          v200 = v198 | 7;
        v201 = v200 + 1;
        v199 = operator new(v200 + 1);
        *(_QWORD *)&__dst[8] = v197 + 13;
        *(_QWORD *)&__dst[16] = v201 | 0x8000000000000000;
        *(_QWORD *)__dst = v199;
        a2 = (float32x2_t *)v304;
      }
      else
      {
        memset(__dst, 0, 24);
        v199 = __dst;
        __dst[23] = v197 + 13;
        if (!v197)
          goto LABEL_240;
      }
      if (v196 >= 0)
        v202 = &qword_2540CC840;
      else
        v202 = (uint64_t *)qword_2540CC840;
      memmove(v199, v202, v197);
LABEL_240:
      strcpy(&v199[v197], ".depth delta ");
      if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v203 = &v336;
      else
        v203 = (std::string *)v336.__r_.__value_.__r.__words[0];
      if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v204 = HIBYTE(v336.__r_.__value_.__r.__words[2]);
      else
        v204 = v336.__r_.__value_.__l.__size_;
      v205 = std::string::append((std::string *)__dst, (const std::string::value_type *)v203, v204);
      v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
      *(_QWORD *)&v385 = *((_QWORD *)&v205->__r_.__value_.__l + 2);
      v384 = v206;
      v205->__r_.__value_.__l.__size_ = 0;
      v205->__r_.__value_.__r.__words[2] = 0;
      v205->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)__p = "cv3d.recon.";
      *(_QWORD *)&__p[8] = 11;
      v207 = BYTE7(v385);
      v208 = &v384;
      if (SBYTE7(v385) < 0)
      {
        v207 = *((_QWORD *)&v384 + 1);
        v208 = (__int128 *)v384;
      }
      *(_QWORD *)&__p[16] = v208;
      *(_QWORD *)&__p[24] = v207;
      sub_2231A9820((uint64_t)__p, (uint64_t)&__p[32], 0, 0, &v328);
      if (SBYTE7(v385) < 0)
      {
        operator delete((void *)v384);
        if ((__dst[23] & 0x80000000) != 0)
LABEL_276:
          operator delete(*(void **)__dst);
      }
      else if ((__dst[23] & 0x80000000) != 0)
      {
        goto LABEL_276;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v209 = sub_2241471F8();
        v210 = v209[2];
        if (!v210)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v210 = v209[2];
        }
        v211 = *(_QWORD *)(v210 + 64);
        v212 = (std::mutex *)(v211 + 32);
        std::mutex::lock((std::mutex *)(v211 + 32));
        v214 = *(_QWORD *)(v211 + 96);
        v213 = *(_QWORD *)(v211 + 104);
        std::mutex::unlock(v212);
        if (v214 != v213)
        {
          sub_2241471F8();
          v215 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
          {
            v384 = 0u;
            v385 = 0u;
            v386.i32[0] = 728325608;
            kdebug_trace();
            sub_2231CC34C((uint64_t)v21, (uint64_t)v326);
            sub_22380919C((uint64_t)__p, (uint64_t)&v337, (uint64_t)v326);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
            {
              *(_QWORD *)&v341 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v291 = v291 & 0xFFFFFFFFFFFFFF00 | 2;
              *((_QWORD *)&v341 + 1) = v291;
              v216 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
              {
                v217 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v215 + 56))(v215);
                __dst[0] = 0;
                __dst[24] = 0;
                sub_22321B368(__p, (__int128 *)__dst, &v341, &v342);
                sub_2231AA5A4((uint64_t)v216, v217, (uint64_t)&v342);
                v218 = (std::__shared_weak_count *)v342.__r_.__value_.__r.__words[2];
                if (v342.__r_.__value_.__r.__words[2])
                {
                  v219 = (unint64_t *)(v342.__r_.__value_.__r.__words[2] + 8);
                  do
                    v220 = __ldaxr(v219);
                  while (__stlxr(v220 - 1, v219));
                  if (!v220)
                  {
                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                    std::__shared_weak_count::__release_weak(v218);
                  }
                }
                if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
              }
            }
            v221 = *(std::__shared_weak_count **)&__p[16];
            if (!*(_QWORD *)&__p[16])
              goto LABEL_270;
            v222 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
              v224 = v327;
              if (v327)
              {
LABEL_271:
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
            }
            else
            {
LABEL_270:
              v224 = v327;
              if (v327)
                goto LABEL_271;
            }
            kdebug_trace();
          }
        }
      }
      v384 = 0u;
      v385 = 0u;
      v386.i32[0] = 728325624;
      kdebug_trace();
      v227 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
      if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v227 = v328.__r_.__value_.__l.__size_;
      if (v227 >= 0x11)
      {
        v228 = &v328;
        if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v228 = (std::string *)v328.__r_.__value_.__r.__words[0];
        v229 = v228->__r_.__value_.__r.__words[0];
        v230 = v228->__r_.__value_.__l.__size_;
        v231 = v228->__r_.__value_.__s.__data_[16];
        v232 = v229 == 0x6365722E64337663 && v230 == 0x73746174532E6E6FLL;
        if (v232 && v231 == 46)
        {
          sub_223187510();
          sub_2231CC34C((uint64_t)v21, (uint64_t)v324);
          sub_22380919C((uint64_t)__p, (uint64_t)&v337, (uint64_t)v324);
          v282 = *(std::__shared_weak_count **)&__p[16];
          if (!*(_QWORD *)&__p[16])
            goto LABEL_356;
          v283 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
            v285 = v325;
            if (!v325)
              goto LABEL_301;
          }
          else
          {
LABEL_356:
            v285 = v325;
            if (!v325)
              goto LABEL_301;
          }
          v286 = (unint64_t *)&v285->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
      }
LABEL_301:
      kdebug_trace();
      if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v328.__r_.__value_.__l.__data_);
      v234.i64[0] = *(_QWORD *)(v14 + 16);
      v308 = v234;
      v234.i32[2] = *(_DWORD *)(v14 + 24);
      v314 = v234;
      v234.i64[0] = *(_QWORD *)(v14 + 32);
      v295 = v234;
      v234.i32[2] = *(_DWORD *)(v14 + 40);
      v294 = v234;
      v234.i32[0] = *(_DWORD *)(v14 + 56);
      v312 = *(float32x2_t *)v234.i8;
      v234.i64[0] = *(_QWORD *)(v14 + 48);
      v296 = (int8x16_t)v234;
      v234.i64[0] = *(_QWORD *)(v14 + 64);
      v234.i32[2] = *(_DWORD *)(v14 + 72);
      v310 = (float32x4_t)v234;
      v235 = (uint64_t **)sub_2231D0424((uint64_t)a2);
      sub_22345F4D8(&v321, v235);
      v236 = (float32x2_t *)v321;
      v237 = v322;
      if (v321 == v322)
      {
        v257 = v321;
      }
      else
      {
        v238 = v296;
        v238.i32[2] = v312.i32[0];
        v239 = (float32x2_t)vzip1q_s32(v308, v295).u64[0];
        v240 = (float32x2_t)vtrn2q_s32(v314, v294).u64[0];
        v241 = (int8x16_t)vdupq_lane_s32((int32x2_t)v240, 1);
        v242 = (float32x2_t)vzip2q_s32(v314, v294).u64[0];
        v243 = (int8x16_t)vnegq_f32(v310);
        *(float32x2_t *)v245.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v308.i8, *(int32x2_t *)v295.i8), *(float *)v243.i32), v240, *(float32x2_t *)v310.f32, 1), v242, v310, 2);
        v244 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v240, 0), v241, 0xCuLL).u64[0];
        *(float32x2_t *)&v245.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v296.i8, *(float32x2_t *)v243.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v296.i8, 1), *(float32x2_t *)v310.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL), v312);
        v246 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v296.i8, 1);
        v247 = (float32x2_t)vextq_s8(v238, v238, 8uLL).u64[0];
        v316 = v239;
        v313 = v245;
        v315 = v242;
        v309 = v247;
        v311 = v244;
        do
        {
          v249 = *v236;
          v241.i32[0] = v236[1].i32[0];
          v250 = (float32x2_t *)v236[2];
          v248 = (float32x2_t *)v236[3];
          v251 = v236[4];
          v236[3] = 0;
          v236[4] = 0;
          v236[2] = 0;
          *(float32x2_t *)v252.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v239, v249.f32[0]), v244, v249, 1), v242, *(float *)v241.i32);
          *(float32x2_t *)&v252.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v238.i8, v249), v246, v249, 1), *(float32x2_t *)v241.i8, v247);
          v253 = vaddq_f32(v245, v252);
          v254 = v250;
          if (v250 == v248)
          {
            v236[1].i32[0] = v253.i32[2];
            *v236 = *(float32x2_t *)v253.f32;
            v248 = v250;
          }
          else
          {
            do
            {
              v252.i32[0] = v254[1].i32[0];
              *(float32x2_t *)v255.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v239, COERCE_FLOAT(*v254)), v244, *v254, 1), v242, v252.f32[0]);
              *(float32x2_t *)&v255.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v238.i8, *v254), v246, *v254, 1), *(float32x2_t *)v252.f32, v247);
              v241 = (int8x16_t)vaddq_f32(v245, v255);
              v254[1].i32[0] = v241.i32[2];
              *v254 = *(float32x2_t *)v241.i8;
              v254 += 4;
            }
            while (v254 != v248);
            v256 = (void *)v236[2];
            v236[1].i32[0] = v253.i32[2];
            *v236 = *(float32x2_t *)v253.f32;
            if (v256)
            {
              v236[3] = (float32x2_t)v256;
              operator delete(v256);
              v247 = v309;
              v244 = v311;
              v245 = v313;
              v242 = v315;
              v239 = v316;
              v238.i64[0] = v296.i64[0];
            }
          }
          v236[2] = (float32x2_t)v250;
          v236[3] = (float32x2_t)v248;
          v236[4] = v251;
          v236 += 5;
        }
        while (v236 != v237);
        v257 = v321;
        v236 = v322;
      }
      *(_QWORD *)__p = v257;
      *(_QWORD *)&__p[8] = v236;
      v258 = v323;
      *(_QWORD *)&__p[16] = v323;
      v323 = 0;
      v322 = 0;
      v321 = 0;
      v259 = (void **)sub_2231D0490((uint64_t)v21);
      v260 = v259;
      v261 = (char *)*v259;
      if (*v259)
      {
        v262 = (char *)v259[1];
        v263 = *v259;
        if (v262 != v261)
        {
          do
          {
            v264 = (void *)*((_QWORD *)v262 - 3);
            if (v264)
            {
              *((_QWORD *)v262 - 2) = v264;
              operator delete(v264);
            }
            v262 -= 40;
          }
          while (v262 != v261);
          v263 = *v260;
        }
        v260[1] = v261;
        operator delete(v263);
        *v260 = 0;
        v260[1] = 0;
        v260[2] = 0;
      }
      *v260 = v257;
      v260[1] = v236;
      v260[2] = v258;
      v265 = (float32x2_t *)v321;
      a2 = (float32x2_t *)v304;
      if (v321)
      {
        v266 = v322;
        v267 = v321;
        if (v322 != v321)
        {
          do
          {
            v268 = (void *)v266[-3];
            if (v268)
            {
              v266[-2] = (float32x2_t)v268;
              operator delete(v268);
            }
            v266 -= 5;
          }
          while (v266 != v265);
          v267 = v321;
        }
        v322 = v265;
        operator delete(v267);
      }
      v269 = (unsigned int *)sub_2231D050C(v304);
      if (*((_BYTE *)v269 + 4))
      {
        v270 = *v269;
        if (!*(_BYTE *)(sub_2231D050C((uint64_t)v21) + 4))
          sub_2231CD94C((uint64_t)v21, v270 | 0x100000000);
      }
      v271 = sub_2231D0514(v304);
      if (*(_BYTE *)(v271 + 36))
      {
        v272 = *(_BYTE *)v271;
        *(_OWORD *)__p = *(_OWORD *)(v271 + 1);
        *(_OWORD *)&__p[16] = *(_OWORD *)(v271 + 17);
        *(_DWORD *)&__p[31] = *(_DWORD *)(v271 + 32);
        if (!*(_BYTE *)(sub_2231D0514((uint64_t)v21) + 36))
        {
          v317 = v272;
          v318 = *(_OWORD *)__p;
          *(_OWORD *)v319 = *(_OWORD *)&__p[16];
          *(_DWORD *)&v319[15] = *(_DWORD *)&__p[31];
          v320 = 1;
          sub_2231CD95C((uint64_t)v21, (uint64_t)&v317);
        }
      }
      v273 = sub_2231D051C(v304);
      sub_2231CDA18((uint64_t)v21, v273);
      do
        v274 = __ldxr(v20);
      while (__stxr(v274 + 1, v20));
      v275 = *(std::__shared_weak_count **)(v14 + 8);
      *(_QWORD *)v14 = v21;
      *(_QWORD *)(v14 + 8) = v297;
      if (!v275)
        goto LABEL_341;
      v276 = (unint64_t *)&v275->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
        v278 = v330;
        if (v330)
        {
LABEL_342:
          v279 = (unint64_t *)&v278->__shared_owners_;
          do
            v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }
      }
      else
      {
LABEL_341:
        v278 = v330;
        if (v330)
          goto LABEL_342;
      }
      if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v336.__r_.__value_.__l.__data_);
      do
        v281 = __ldaxr(v20);
      while (__stlxr(v281 - 1, v20));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
      v14 += 80;
      ++__val;
    }
    while (v14 != v292);
  }
LABEL_365:
  v288 = (std::__shared_weak_count *)*((_QWORD *)&v338[0] + 1);
  if (*((_QWORD *)&v338[0] + 1))
  {
    v289 = (unint64_t *)(*((_QWORD *)&v338[0] + 1) + 8);
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
}

void sub_223808E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a65;
  unint64_t *v65;
  unint64_t v67;

  __cxa_guard_abort(&qword_2540CC6D0);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  do
    v67 = __ldaxr(v65);
  while (__stlxr(v67 - 1, v65));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))a65->__on_zero_shared)(a65);
    std::__shared_weak_count::__release_weak(a65);
  }
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

void sub_22380919C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  float32x4_t v36;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v67;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x8_t v82;
  int8x8_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int16 v96;

  v90[1] = &off_24EC216B8;
  sub_2231FF60C((_DWORD *)(a2 + 64), &v91);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v7)
  {
    if (!v6)
    {
LABEL_20:
      v90[0] = 0;
      v15 = *(_QWORD *)(a3 + 8);
      if (!v15)
        goto LABEL_36;
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v11)
    goto LABEL_16;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_16:
    if (!*(_BYTE *)(a2 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!*(_BYTE *)(a2 + 81))
    goto LABEL_20;
LABEL_17:
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(v90, v6, 0);
  v15 = *(_QWORD *)(a3 + 8);
  if (!v15)
    goto LABEL_36;
LABEL_21:
  v16 = *(std::__shared_weak_count **)(a3 + 16);
  if (!v16)
    goto LABEL_91;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v15 = *(_QWORD *)(a3 + 8);
  v20 = *(std::__shared_weak_count **)(a3 + 16);
  if (!v20)
    goto LABEL_91;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (v23)
  {
LABEL_91:
    if (*(_BYTE *)(a3 + 49))
      goto LABEL_33;
LABEL_36:
    v89 = 0;
    v24 = *(unsigned int *)(a2 + 68);
    if (!(_DWORD)v24)
      goto LABEL_80;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!*(_BYTE *)(a3 + 49))
    goto LABEL_36;
LABEL_33:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(&v89, v15, 1);
  v24 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v24)
  {
LABEL_37:
    v25 = *(unsigned int *)(a2 + 64);
    if (!(_DWORD)v25)
      goto LABEL_80;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = *(_DWORD *)(a2 + 72);
    v30 = *(_DWORD *)(a2 + 76);
    v31 = *(_QWORD *)(a2 + 56);
    v32 = *(_DWORD *)(a3 + 40);
    v33 = *(_DWORD *)(a3 + 44);
    v34 = *(_QWORD *)(a3 + 24);
    v35 = v25 - 1;
    v36 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    __asm { FMOV            V2.4S, #10.0 }
    while (1)
    {
      v41 = v95;
      v42 = HIDWORD(v95);
      v43 = *((_QWORD *)&v92 + 1);
      if (v25 < 0x14)
        break;
      v44 = 0;
      v57 = HIDWORD(v95) * v28;
      v58 = __CFADD__(HIDWORD(v95) * v28, v35);
      v59 = __CFADD__(v30 * v28, v35);
      if (__CFADD__(v33 * v28, v35)
        || v59
        || (_DWORD)v95 != 1
        || v29 != 1
        || v32 != 1
        || v58
        || (unint64_t)(v25 - 1) >> 32)
      {
        goto LABEL_42;
      }
      v44 = 0;
      v60 = 2 * (v30 * v28);
      v61 = v31 + v60;
      v62 = v31 + 2 * v25 + v60;
      v63 = 2 * (v33 * v28);
      v64 = *((_QWORD *)&v92 + 1) + 4 * v57;
      v65 = v64 + 4 * v25;
      _CF = v64 >= v34 + 2 * v25 + v63 || v34 + v63 >= v65;
      v67 = !_CF;
      if (v61 < v65 && v64 < v62)
        goto LABEL_42;
      if (v67)
        goto LABEL_42;
      v69 = v26;
      v70 = v27;
      v71 = v25 & 0xFFFFFFFC;
      do
      {
        v72 = (int8x16_t)vcvtq_f32_f16(*(float16x4_t *)(v31 + 2 * v69));
        v73 = vcvtq_f32_f16(*(float16x4_t *)(v34 + 2 * v70));
        _D7 = vcvt_f16_f32(vsubq_f32((float32x4_t)v72, v73));
        _H16 = _D7.i16[1];
        __asm { FCVT            S16, H16 }
        _S16 = fabsf(_S16);
        __asm
        {
          FCVT            H16, S16
          FCVT            S17, H7
        }
        *(float *)_D17.i32 = fabsf(_S17);
        __asm { FCVT            H17, S17 }
        _D17.i16[1] = LOWORD(_S16);
        LOWORD(_S16) = _D7.i16[2];
        __asm { FCVT            S16, H16 }
        _S16 = fabsf(_S16);
        v82 = (int8x8_t)vmovn_s32(vcgtq_f32((float32x4_t)v72, v36));
        __asm { FCVT            H16, S16 }
        _D17.i16[2] = LOWORD(_S16);
        _D7.i16[0] = _D7.i16[3];
        __asm { FCVT            S7, H7 }
        v83 = (int8x8_t)vmovn_s32(vcgtq_f32(v73, v36));
        *(float *)_D7.i32 = fabsf(*(float *)_D7.i32);
        __asm { FCVT            H7, S7 }
        _D17.i16[3] = _D7.i16[0];
        *(int8x16_t *)(v43 + 4 * v57) = vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v82, v83)), v72, vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vorn_s8(v82, v83)), (int8x16_t)vcvtq_f32_f16(_D17), (int8x16_t)vaddq_f32(v73, _Q2)));
        v57 += 4;
        v70 += 4;
        v69 += 4;
        v71 -= 4;
      }
      while (v71);
      v44 = v25 & 0xFFFFFFFC;
      if (v44 != v25)
        goto LABEL_42;
LABEL_39:
      ++v28;
      v27 += v33;
      v26 += v30;
      if (v28 == v24)
        goto LABEL_80;
    }
    v44 = 0;
LABEL_42:
    v45 = v25 - v44;
    v46 = v41 * v44 + v42 * v28;
    v47 = v27 + v32 * v44;
    v48 = v26 + v29 * v44;
    while (1)
    {
      _H4 = *(_WORD *)(v31 + 2 * v48);
      __asm { FCVT            S3, H4 }
      _H5 = *(_WORD *)(v34 + 2 * v47);
      __asm { FCVT            S5, H5 }
      if (_NF ^ _VF | _ZF)
      {
        if (_S5 > -65504.0)
        {
          _S3 = _S5 + 10.0;
          goto LABEL_44;
        }
      }
      else if (_S5 <= -65504.0)
      {
        goto LABEL_44;
      }
      __asm { FCVT            S3, H4 }
      _S3 = _S3 - _S5;
      __asm
      {
        FCVT            H3, S3
        FCVT            S3, H3
      }
      _S3 = fabsf(_S3);
      __asm
      {
        FCVT            H3, S3
        FCVT            S3, H3
      }
LABEL_44:
      *(float *)(v43 + 4 * v46) = _S3;
      v46 += v41;
      v47 += v32;
      v48 += v29;
      if (!--v45)
        goto LABEL_39;
    }
  }
LABEL_80:
  *(_QWORD *)a1 = &off_24EC216B8;
  *(_OWORD *)(a1 + 8) = v91;
  v91 = 0uLL;
  *(_OWORD *)(a1 + 24) = v92;
  *(_OWORD *)(a1 + 40) = v93;
  *(_OWORD *)(a1 + 56) = v94;
  *(_QWORD *)(a1 + 72) = v95;
  *(_WORD *)(a1 + 80) = v96;
  v84 = v89;
  v89 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = v90[0];
  v90[0] = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_2238096E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    sub_223167354(a10);
    _Unwind_Resume(a1);
  }
  sub_223167354(a10);
  _Unwind_Resume(a1);
}

void sub_223809728(_QWORD *a1)
{
  sub_22380A6C8(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22380974C(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = &off_24EC5A8E8;
  sub_2231CE350(a1 + 256);
  v2 = (void *)a1[135];
  if (v2)
  {
    a1[136] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[132];
  if (v3)
  {
    a1[133] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 35);
  a1[22] = &off_24EC220E0;
  a1[10] = &off_24EC220E0;
  *a1 = off_24EC5A898;
  v4 = (_QWORD *)a1[9];
  if (v4 == a1 + 6)
  {
    v5 = 4;
    v4 = a1 + 6;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22380983C(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = &off_24EC5A8E8;
  sub_2231CE350(a1 + 256);
  v2 = (void *)a1[135];
  if (v2)
  {
    a1[136] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[132];
  if (v3)
  {
    a1[133] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 35);
  a1[22] = &off_24EC220E0;
  a1[10] = &off_24EC220E0;
  *a1 = off_24EC5A898;
  v4 = (_QWORD *)a1[9];
  if (v4 == a1 + 6)
  {
    v5 = 4;
    v4 = a1 + 6;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22380992C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_QWORD *)&v4[v9 - 40];
        *((_DWORD *)v10 - 8) = *(_DWORD *)&v4[v9 - 32];
        *((_QWORD *)v10 - 5) = v12;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 40;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v13 != v2)
      {
        v14 = (void *)*((_QWORD *)v13 - 3);
        if (v14)
        {
          *((_QWORD *)v13 - 2) = v14;
          operator delete(v14);
        }
        v13 -= 40;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_223809A4C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_22316E078();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v4;
  if (v5 > 0x666666666666666)
    sub_223174E94();
  v7 = 40 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v3];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v11 = v9 + 40;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v9[v14];
      v16 = &v13[v14];
      v17 = *(_QWORD *)&v13[v14 - 40];
      *((_DWORD *)v15 - 8) = *(_DWORD *)&v13[v14 - 32];
      *((_QWORD *)v15 - 5) = v17;
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v13[v14 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v13[v14 - 8];
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      v14 -= 40;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v18 != v13)
    {
      v19 = (void *)*((_QWORD *)v18 - 3);
      if (v19)
      {
        *((_QWORD *)v18 - 2) = v19;
        operator delete(v19);
      }
      v18 -= 40;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_223809BC4(uint64_t a1)
{
  sub_223809BEC(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223809BEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_223809BEC(*a1);
    sub_223809BEC(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void sub_223809C6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223809C7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223809CAC(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v2 = *(std::mutex **)(a1 + 144);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 144));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v6 = *(_QWORD **)(a1 + 40);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v6 = *(_QWORD **)(a1 + 40);
    if (!v6)
      return;
  }
  v7 = *(_QWORD **)(a1 + 48);
  if (v7 == v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  else
  {
    do
    {
      v9 = *--v7;
      v8 = v9;
      *v7 = 0;
      if (v9)
      {
        v10 = *(std::__shared_weak_count **)(v8 + 16);
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        MEMORY[0x227684CE8](v8, 0x10E1C400D19290BLL);
      }
    }
    while (v7 != v6);
    v13 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v13);
  }
}

void sub_223809E00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223809E10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223809E40(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_223809E4C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10E1C400D19290BLL);
  }
  return a1;
}

void sub_223809ED0(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24EC257D0;
  sub_22449AB78(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC25818;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC258B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 31);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_22380A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_2232199B0(&a9);
  _Unwind_Resume(a1);
}

void sub_22380A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232199B0(&a9);
  _Unwind_Resume(a1);
}

void sub_22380A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_224494480((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22380A1B8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AA20;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_22380A22C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AA20;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_22380A2A4(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_22380A3E8(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10E1C400D19290BLL);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_22380A378(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE31ENS3_13DynamicBufferEEENS1_18AutoReturn"
                     "ingMakeTIS7_NS_5recon5frame16ImageInitializerILS5_31EEENSA_13ImageReleaserILS5_31EEEEENSt3__110shar"
                     "ed_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_"
                     "EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE31ENS3_13DynamicBufferEEENS1_1"
                                "8AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_31EEENSA_13ImageReleaserILS"
                                "5_31EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS"
                                "7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE31ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_31EEENSA_13ImageReleaserILS5_31EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE31ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS_5recon5frame16ImageInitializerILS5_31EEENSA_13ImageReleaserILS5_31EEEEENSt3__110shared_ptrIS7_EENS1_29ThreadSafeObjectBorrowingPoolINSG_10unique_ptrIS7_NSG_14default_deleteIS7_EEEESF_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_22380A3E8(std::mutex *a1, uint64_t a2)
{
  uint64_t sig;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  std::mutex::lock(a1);
  sig = a1[1].__m_.__sig;
  if (sig)
  {
    std::mutex::lock((std::mutex *)(sig + 56));
    v6 = *(char **)(sig + 24);
    v5 = *(_QWORD *)(sig + 32);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(char **)(sig + 16);
      v9 = (v6 - v8) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_22316E078();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_223174E94();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v7 = v14 + 8;
      if (v6 == v8)
      {
        *(_QWORD *)(sig + 16) = v14;
        *(_QWORD *)(sig + 24) = v7;
        *(_QWORD *)(sig + 32) = v15;
      }
      else
      {
        v16 = v6 - v8 - 8;
        if (v16 < 0x78)
          goto LABEL_43;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v6 - v8 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_43;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v14 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v13[8 * v9 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v14 - 1) = v26;
            v14 -= 8;
          }
          while (v6 != v8);
        }
        v6 = *(char **)(sig + 16);
        v27 = *(char **)(sig + 24);
        *(_QWORD *)(sig + 16) = v14;
        *(_QWORD *)(sig + 24) = v7;
        *(_QWORD *)(sig + 32) = v15;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            v30 = *(std::__shared_weak_count **)(v28 + 16);
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            MEMORY[0x227684CE8](v28, 0x10E1C400D19290BLL);
          }
        }
      }
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = a2;
      v7 = v6 + 8;
    }
    *(_QWORD *)(sig + 24) = v7;
    std::mutex::unlock((std::mutex *)(sig + 56));
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_22380A688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_223809E4C((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_22380A6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  sub_223809E4C(&a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_22380A6C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  *a1 = &off_24EC5A8C0;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[13];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  *a1 = off_24EC5A898;
  v14 = (_QWORD *)a1[9];
  if (v14 == a1 + 6)
  {
    v15 = 4;
    v14 = a1 + 6;
    goto LABEL_25;
  }
  if (v14)
  {
    v15 = 5;
LABEL_25:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = (std::__shared_weak_count *)a1[2];
  if (!v16)
    return a1;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void sub_22380A870(_DWORD *a1@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17[2];
  std::__shared_weak_count *v18;
  uint64_t v19;

  sub_22380AB70(a1, a2, v17);
  v4 = v17[0];
  v17[1] = v17[0];
  if (v17[0])
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v17[0];
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AD18;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v18 = v5;
    v17[0] = 0;
    *a3 = v4;
    a3[1] = (uint64_t)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v5 = 0;
    v18 = 0;
    v17[0] = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  a3[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v19, v4, 2);
  v9 = *(_QWORD *)(v19 + 16);
  *(_OWORD *)(a3 + 3) = *(_OWORD *)v19;
  a3[5] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  a3[6] = a3[3];
  *(_OWORD *)(a3 + 7) = *((_OWORD *)a3 + 2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 104))(*a3);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a3 + 36) = v12 & 0xFF00 | v11;
  if (v4)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v15 = v17[0];
  v17[0] = 0;
  if (v15)
  {
    v16 = *(void **)(v15 + 48);
    if (v16)
      free(v16);
    *(_QWORD *)(v15 + 48) = 0;
    MEMORY[0x227684CE8](v15, 0x1091C406A8758A4);
  }
}

void sub_22380AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22380AC98(&a9);
  _Unwind_Resume(a1);
}

void sub_22380AA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22380AC98(&a9);
  _Unwind_Resume(a1);
}

void sub_22380AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22380AC98(&a9);
  _Unwind_Resume(a1);
}

void sub_22380AA64(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22380AACC()
{
  return 2;
}

uint64_t sub_22380AAD4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_22380AADC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_22380AAF4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

__n128 sub_22380AB70@<Q0>(_DWORD *a1@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __int128 v16;
  _BYTE v17[28];
  unint64_t v18[3];
  __n128 v19;
  unint64_t v20;
  uint64_t v21;

  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  v6 = v5 << 32;
  if (!HIDWORD(v5))
    v6 = 0;
  v7 = v5 != 0;
  if ((_DWORD)v5)
    v8 = HIDWORD(v5) == 0;
  else
    v8 = 1;
  *(_QWORD *)v17 = v5;
  *(_QWORD *)&v17[8] = v6 | v7;
  v17[16] = 0;
  v17[24] = 0;
  if (v8)
    v5 = 0;
  v20 = v5;
  v21 = v6 | v7;
  if (((v6 >> 31) & ((v6 >> 31) - 1)) != 0)
    v9 = 2;
  else
    v9 = v6 >> 31;
  sub_223F79614(v18, &v20, (unint64_t *)&v21, 1, a2, 1, v9);
  v16 = *(_OWORD *)v17;
  HIDWORD(v16) = *(_DWORD *)&v17[12];
  v11 = v18[0];
  v10 = v18[1];
  v12 = v18[2];
  v15 = v19;
  v13 = operator new();
  *(_QWORD *)v13 = &off_24EC5AB40;
  *(_OWORD *)(v13 + 8) = v16;
  *(_OWORD *)(v13 + 20) = *(_OWORD *)&v17[12];
  *(_QWORD *)(v13 + 40) = v11;
  *(_QWORD *)(v13 + 48) = v10;
  *(_QWORD *)(v13 + 56) = v12;
  result = v15;
  *(__n128 *)(v13 + 64) = v15;
  *a3 = v13;
  return result;
}

void sub_22380AC80(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22380AC98(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 48) = 0;
    MEMORY[0x227684CE8](v2, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_22380ACF0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22380AD04()
{
  return 2;
}

__int128 *sub_22380AD10()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E3F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578E3F0))
  {
    v2 = sub_22380ADE8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578E3D8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578E3E8 = *((_QWORD *)v2 + 2);
      xmmword_25578E3D8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E3D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E3F0);
  }
  if (byte_25578E3EF >= 0)
    return &xmmword_25578E3D8;
  else
    return (__int128 *)xmmword_25578E3D8;
}

void sub_22380ADD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E3F0);
  _Unwind_Resume(a1);
}

__int128 *sub_22380ADE8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E410);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E410))
    return &xmmword_25578E3F8;
  v2 = sub_22380AEC4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578E3F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578E408 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578E3F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E3F8, &dword_22314D000);
  __cxa_guard_release(&qword_25578E410);
  return &xmmword_25578E3F8;
}

void sub_22380AEAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E410);
  _Unwind_Resume(a1);
}

std::string *sub_22380AEC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E430);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E430))
    return &stru_25578E418;
  sub_22380B0DC((uint64_t)__p);
  sub_22380AFB4((char *)__p, &stru_25578E418);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578E418, &dword_22314D000);
  __cxa_guard_release(&qword_25578E430);
  return &stru_25578E418;
}

void sub_22380AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578E430);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578E430);
  _Unwind_Resume(a1);
}

void sub_22380AFB4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231DF428();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_22380B0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22380B0DC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578E450);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578E450))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16u>]", qword_25578E438);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E438, &dword_22314D000);
    __cxa_guard_release(&qword_25578E450);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578E470);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578E470))
  {
    v5 = sub_2231A38CC(qword_25578E438, "<", 0);
    sub_2231A37C8(qword_25578E438, 0, v5, qword_25578E458);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578E458, &dword_22314D000);
    __cxa_guard_release(&qword_25578E470);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578E490);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578E490))
  {
    sub_224573040((uint64_t)qword_25578E458, (uint64_t)&xmmword_25578E478);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E478, &dword_22314D000);
    __cxa_guard_release(&qword_25578E490);
  }
  if (byte_25578E48F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578E478, *((unint64_t *)&xmmword_25578E478 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578E478;
    *(_QWORD *)(a1 + 16) = unk_25578E488;
  }
}

void sub_22380B278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E490);
  _Unwind_Resume(a1);
}

void sub_22380B290(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E470);
  _Unwind_Resume(a1);
}

void sub_22380B2A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E450);
  _Unwind_Resume(a1);
}

void sub_22380B2C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22380B2E8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_22380B338(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22380B3A8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231DF520(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_22380B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_22380B4B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_22380B55C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24EC5AD68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22380B614(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24EC5AD68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22380B6CC(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  result = operator new(0x50uLL);
  v3 = result;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC5AD68;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result[3] = &off_24EC20EB8;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = *(_WORD *)(a1 + 76);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = *(_WORD *)(a1 + 76);
  }
  result[4] = v8;
  result[5] = v9;
  result[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)result + 14) = *(_DWORD *)(a1 + 56);
  result[8] = v12;
  *((_DWORD *)result + 18) = v13;
  *((_WORD *)result + 38) = v14;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      return v3;
    }
  }
  return result;
}

void sub_22380B7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC5AD68;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = &off_24EC20EB8;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_DWORD *)(a1 + 72);
    v12 = *(_WORD *)(a1 + 76);
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_DWORD *)(a1 + 72);
    v12 = *(_WORD *)(a1 + 76);
  }
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v14 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a2 + 72) = v11;
  *(_WORD *)(a2 + 76) = v12;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22380B8DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_22380B978(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (v5)
        goto LABEL_6;
LABEL_9:
      operator delete(__p);
      return;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

uint64_t sub_22380BA24(uint64_t a1)
{
  return sub_22380BAA4(a1 + 8);
}

uint64_t sub_22380BA2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb1EvEEvRNS4_13CommandBufferERKNS4_"
                     "7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb1EvEEvRNS4_13CommandBu"
                                "fferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10Mu"
                                "tabilityE1EEEEUlRT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb1EvEEvRNS4_13CommandBufferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3gpu5utils14TextureToImageILN5petal11StorageModeE0ELb1EvEEvRNS4_13CommandBufferERKNS4_7TextureERKNS_3kit3img9ImageViewILNSC_6FormatE0ENSC_13DynamicBufferELNSC_10MutabilityE1EEEEUlRT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22380BA98()
{
  return &unk_24EC5ADC8;
}

uint64_t sub_22380BAA4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3)
      goto LABEL_30;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v2 = *(_QWORD *)(a1 + 24);
    v7 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v7)
      goto LABEL_30;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 69))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(&v23, v2, 1);
        v11 = *(_DWORD *)(a1 + 48);
        if (!*(_BYTE *)(a1 + 68))
          goto LABEL_26;
        goto LABEL_18;
      }
    }
    else
    {
LABEL_30:
      if (*(_BYTE *)(a1 + 69))
        goto LABEL_14;
    }
  }
  v23 = 0;
  v11 = *(_DWORD *)(a1 + 48);
  if (!*(_BYTE *)(a1 + 68))
    goto LABEL_26;
LABEL_18:
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(std::__shared_weak_count **)(a1 + 32);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
LABEL_26:
  v17 = *(const char **)(a1 + 56);
  v19 = 0;
  v20 = 0;
  v21 = *(_QWORD *)(a1 + 40);
  v22 = 1;
  sub_22322934C((void ***)a1, v17, v11, &v19, 0);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22380BC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_22380BC8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22380BC9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22380BCCC(uint64_t a1)
{
  return sub_223800750((_QWORD *)(a1 + 24));
}

void sub_22380BCDC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22380BCF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5AAC0;
  return result;
}

void sub_22380BD14(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5AAC0;
}

uint64_t sub_22380BD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_223226B8C(a2, a2, a3, a4, a5, a6);
  sub_223226B80(a2, v7, v8, v9, v10, v11);
  sub_223226B98(a2, v12, v13, v14, v15, v16);
  sub_223226B8C(a2, v17, v18, v19, v20, v21);
  sub_223226BA4(a2, v22, v23, v24, v25, v26);
  sub_223226B98(a2, v27, v28, v29, v30, v31);
  return kdebug_trace();
}

uint64_t sub_22380BDD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon2kf27FusionEngineComputePipeline14IntegrateFrameERKNS0_5frame17KeyframeBundleCpuERKNS_"
                     "3esn4spanINS1_16KeyframeWithPoseELm18446744073709551615EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon2kf27FusionEngineComputePipeline14IntegrateFrameERKNS0_5frame17KeyframeBund"
                                "leCpuERKNS_3esn4spanINS1_16KeyframeWithPoseELm18446744073709551615EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon2kf27FusionEngineComputePipeline14IntegrateFrameERKNS0_5frame17KeyframeBundleCpuERKNS_3esn4spanINS1_16KeyframeWithPoseELm18446744073709551615EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon2kf27FusionEngineComputePipeline14IntegrateFrameERKNS0_5frame17KeyframeBundleCpuERKNS_3esn4spanINS1_16KeyframeWithPoseELm18446744073709551615EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22380BE44()
{
  return &unk_24EC5AB20;
}

void sub_22380BE50(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  float16x4_t v6;
  float16x4_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t i;
  unsigned __int8 v48;
  uint64_t v49;
  _BOOL8 v50;
  _BOOL4 v51;
  float32x4_t v54;
  BOOL v56;
  float v59;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v74;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  int v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unsigned int v115;
  int v117;
  unsigned int v119;
  unint64_t v120;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t i1;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  _BOOL8 v144;
  _BOOL4 v145;
  float32x4_t v148;
  float v153;
  float32x4_t v156;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v169;
  float v170;
  float v172;
  float v173;
  float v174;
  float v176;
  float v177;
  float v178;
  int v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float32x4_t v187;
  float v188;
  float v189;
  float v190;
  int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  unsigned __int8 v199;
  unsigned __int8 v200;
  unsigned int v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  unsigned int v208;
  int v210;
  unsigned int v212;
  unint64_t v213;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v223;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned __int8 v232;
  uint64_t ii;
  uint64_t v234;
  unsigned __int8 v235;
  uint64_t v236;
  _BOOL8 v237;
  _BOOL4 v238;
  float32x4_t v241;
  float v246;
  float32x4_t v249;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v262;
  float v263;
  float v265;
  float v266;
  float v267;
  float v269;
  float v270;
  float v271;
  int v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float32x4_t v280;
  float v281;
  float v282;
  float v283;
  int v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float32x4_t v290;
  float32x4_t v291;
  unsigned __int8 v295;
  unsigned __int8 v296;
  unsigned int v297;
  uint64_t v298;
  unsigned int v301;
  unsigned int v304;
  __int16 v307;
  unint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  unsigned __int8 v314;
  uint64_t jj;
  uint64_t v316;
  unsigned __int8 v317;
  uint64_t v318;
  uint64_t v321;
  __int16 *v322;
  __int32 v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t v329;
  unsigned __int8 v330;
  uint64_t kk;
  uint64_t v332;
  unsigned __int8 v333;
  _WORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned __int8 v338;
  uint64_t mm;
  uint64_t v340;
  unsigned __int8 v341;
  uint64_t v342;
  _BOOL4 v343;
  _BOOL8 v344;
  float32x4_t v347;
  float v351;
  float32x4_t v353;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v366;
  float v367;
  int v370;
  int v371;
  uint64_t v372;
  unsigned __int8 v373;
  uint64_t v374;
  uint64_t nn;
  unsigned __int8 v376;
  int v377;
  float v379;
  float v380;
  float v381;
  float32x4_t *v382;
  float v383;
  float v384;
  float v385;
  int v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float32x4_t v394;
  float v395;
  float v396;
  float v397;
  int v398;
  float v399;
  float v400;
  float v401;
  float v402;
  double v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  unsigned __int8 v407;
  unsigned __int8 v408;
  unsigned int v409;
  uint64_t v410;
  unsigned int v413;
  unsigned int v416;
  __int16 v421;
  __int16 v422;
  __int16 v423;
  int v424;
  int v425;
  uint64_t v426;
  unsigned __int8 v427;
  uint64_t v428;
  uint64_t i6;
  unsigned __int8 v430;
  unint64_t v433;
  unint64_t v434;
  float16x4_t v435;
  float16x4_t *v436;
  int v437;
  int v438;
  uint64_t v439;
  unsigned __int8 v440;
  uint64_t v441;
  uint64_t i7;
  unsigned __int8 v443;
  _WORD *v444;
  int v445;
  int v446;
  uint64_t v447;
  unsigned __int8 v448;
  uint64_t v449;
  uint64_t i8;
  unsigned __int8 v451;
  _BOOL4 v452;
  _BOOL8 v453;
  float32x4_t v454;
  float v458;
  int v461;
  int v462;
  uint64_t v463;
  unsigned __int8 v464;
  uint64_t v465;
  uint64_t i9;
  unsigned __int8 v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  int32x2_t v471;
  int32x2_t v474;
  unsigned __int8 v476;
  unsigned __int8 v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int v482;
  int v484;
  unsigned int v486;
  __int16 v489;
  int v491;
  int v492;
  uint64_t v493;
  unsigned __int8 v494;
  uint64_t j;
  uint64_t v496;
  unsigned __int8 v497;
  uint64_t v498;
  uint64_t v502;
  __int16 *v503;
  __int32 v505;
  uint64_t v506;
  int v507;
  int v508;
  uint64_t v509;
  unsigned __int8 v510;
  uint64_t k;
  uint64_t v512;
  unsigned __int8 v513;
  _WORD *v514;
  int v515;
  int v516;
  uint64_t v517;
  unsigned __int8 v518;
  uint64_t m;
  uint64_t v520;
  unsigned __int8 v521;
  uint64_t v522;
  _BOOL8 v523;
  _BOOL4 v524;
  float32x4_t v527;
  float v532;
  float v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v541;
  float32x4_t v543;
  float v546;
  float v547;
  float32x4_t v548;
  float v549;
  float v550;
  float v551;
  float v552;
  float v553;
  float v555;
  float v556;
  float v557;
  int v562;
  int v563;
  uint64_t v564;
  unsigned __int8 v565;
  uint64_t v566;
  uint64_t n;
  unsigned __int8 v568;
  float v569;
  float v570;
  float v571;
  float v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  int v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float32x4_t v583;
  float v584;
  float v585;
  float v586;
  int v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float32x4_t v594;
  float32x4_t v595;
  unsigned __int8 v599;
  unsigned __int8 v600;
  unsigned int v601;
  uint64_t v602;
  unsigned int v605;
  unsigned int v608;
  __int16 v611;
  unint64_t v614;
  int v615;
  int v616;
  uint64_t v617;
  unsigned __int8 v618;
  uint64_t i2;
  uint64_t v620;
  unsigned __int8 v621;
  uint64_t v622;
  uint64_t v625;
  __int16 *v626;
  __int32 v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  int v632;
  uint64_t v633;
  unsigned __int8 v634;
  uint64_t i3;
  uint64_t v636;
  unsigned __int8 v637;
  _WORD *v638;
  int v639;
  int v640;
  uint64_t v641;
  unsigned __int8 v642;
  uint64_t i4;
  uint64_t v644;
  unsigned __int8 v645;
  uint64_t v646;
  _BOOL4 v647;
  _BOOL8 v648;
  float32x4_t v651;
  float v655;
  float32x4_t v657;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float v662;
  float v663;
  float v664;
  float v665;
  float v666;
  float v667;
  float v670;
  float v671;
  int v674;
  int v675;
  uint64_t v676;
  unsigned __int8 v677;
  uint64_t v678;
  uint64_t i5;
  unsigned __int8 v680;
  int v681;
  float v683;
  float v684;
  float v685;
  float32x4_t *v686;
  float v687;
  float v688;
  float v689;
  int v690;
  float v691;
  float v692;
  float v693;
  float v694;
  float v695;
  float v696;
  float v697;
  float32x4_t v698;
  float v699;
  float v700;
  float v701;
  int v702;
  float v703;
  float v704;
  float v705;
  float v706;
  unsigned __int8 v710;
  unsigned __int8 v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  unsigned int v720;
  int v722;
  unint64_t v724;
  unsigned int v726;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v733;
  uint64_t v734;
  uint64_t v737;
  uint64_t v738;
  int v739;
  int v740;
  uint64_t v741;
  unsigned __int8 v742;
  uint64_t v743;
  uint64_t i10;
  unsigned __int8 v745;
  uint64_t v746;
  _BOOL4 v747;
  _BOOL8 v748;
  float32x4_t v751;
  float v756;
  float32x4_t v759;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float v764;
  float v765;
  float v766;
  float v767;
  float v768;
  float v769;
  float v772;
  float v773;
  float v775;
  float v776;
  float v777;
  float v779;
  float v780;
  float v781;
  int v782;
  float v783;
  float v784;
  float v785;
  float v786;
  float v787;
  float v788;
  float v789;
  uint64_t v790;
  float32x4_t v791;
  float v792;
  float v793;
  float v794;
  int v795;
  float v796;
  float v797;
  float v798;
  float v799;
  std::__shared_weak_count *v800;
  unint64_t *p_shared_owners;
  unint64_t v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  std::__shared_weak_count *v809;
  unint64_t *v810;
  unint64_t v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  std::__shared_weak_count *v827;
  unint64_t *v828;
  unint64_t v829;
  std::__shared_weak_count *v830;
  unint64_t *v831;
  unint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  std::__shared_weak_count *v851;
  unint64_t *v852;
  unint64_t v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  std::__shared_weak_count *v857;
  unint64_t *v858;
  unint64_t v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  std::__shared_weak_count *v863;
  unint64_t *v864;
  unint64_t v865;
  std::__shared_weak_count *v866;
  unint64_t *v867;
  unint64_t v868;
  std::__shared_weak_count *v869;
  unint64_t *v870;
  unint64_t v871;
  std::__shared_weak_count *v872;
  unint64_t *v873;
  unint64_t v874;
  std::__shared_weak_count *v875;
  unint64_t *v876;
  unint64_t v877;
  std::__shared_weak_count *v878;
  unint64_t *v879;
  unint64_t v880;
  std::__shared_weak_count *v881;
  unint64_t *v882;
  unint64_t v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  std::__shared_weak_count *v890;
  unint64_t *v891;
  unint64_t v892;
  std::__shared_weak_count *v893;
  unint64_t *v894;
  unint64_t v895;
  std::__shared_weak_count *v896;
  unint64_t *v897;
  unint64_t v898;
  std::__shared_weak_count *v899;
  unint64_t *v900;
  unint64_t v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  unint64_t *v905;
  std::__shared_weak_count *v906;
  unint64_t *v907;
  unint64_t v908;
  std::__shared_weak_count *v909;
  unint64_t *v910;
  unint64_t v911;
  std::__shared_weak_count *v912;
  unint64_t *v913;
  unint64_t v914;
  std::__shared_weak_count *v915;
  unint64_t *v916;
  unint64_t v917;
  std::__shared_weak_count *v918;
  unint64_t *v919;
  unint64_t v920;
  std::__shared_weak_count *v921;
  unint64_t *v922;
  unint64_t v923;
  std::__shared_weak_count *v924;
  unint64_t *v925;
  unint64_t v926;
  std::__shared_weak_count *v927;
  unint64_t *v928;
  unint64_t v929;
  std::__shared_weak_count *v930;
  unint64_t *v931;
  unint64_t v932;
  std::__shared_weak_count *v933;
  unint64_t *v934;
  unint64_t v935;
  std::__shared_weak_count *v936;
  unint64_t *v937;
  unint64_t v938;
  std::__shared_weak_count *v939;
  unint64_t *v940;
  unint64_t v941;
  std::__shared_weak_count *v942;
  unint64_t *v943;
  unint64_t v944;
  std::__shared_weak_count *v945;
  unint64_t *v946;
  unint64_t v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  unint64_t v950;
  std::__shared_weak_count *v951;
  unint64_t *v952;
  unint64_t v953;
  std::__shared_weak_count *v954;
  unint64_t *v955;
  unint64_t v956;
  unint64_t *v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  std::__shared_weak_count *v997;
  unint64_t *v998;
  unint64_t v999;
  std::__shared_weak_count *v1000;
  unint64_t *v1001;
  unint64_t v1002;
  std::__shared_weak_count *v1003;
  unint64_t *v1004;
  unint64_t v1005;
  std::__shared_weak_count *v1006;
  unint64_t *v1007;
  unint64_t v1008;
  unint64_t *v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  std::__shared_weak_count *v1013;
  unint64_t *v1014;
  unint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  std::__shared_weak_count *v1019;
  unint64_t *v1020;
  unint64_t v1021;
  std::__shared_weak_count *v1022;
  unint64_t *v1023;
  unint64_t v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::__shared_weak_count *v1028;
  unint64_t *v1029;
  unint64_t v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  std::__shared_weak_count *v1034;
  unint64_t *v1035;
  unint64_t v1036;
  std::__shared_weak_count *v1037;
  unint64_t *v1038;
  unint64_t v1039;
  std::__shared_weak_count *v1040;
  unint64_t *v1041;
  unint64_t v1042;
  std::__shared_weak_count *v1043;
  unint64_t *v1044;
  unint64_t v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  std::__shared_weak_count *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  std::__shared_weak_count *v1055;
  unint64_t *v1056;
  unint64_t v1057;
  std::__shared_weak_count *v1058;
  unint64_t *v1059;
  unint64_t v1060;
  unint64_t *v1061;
  std::__shared_weak_count *v1062;
  unint64_t *v1063;
  unint64_t v1064;
  std::__shared_weak_count *v1065;
  unint64_t *v1066;
  unint64_t v1067;
  std::__shared_weak_count *v1068;
  unint64_t *v1069;
  unint64_t v1070;
  std::__shared_weak_count *v1071;
  unint64_t *v1072;
  unint64_t v1073;
  std::__shared_weak_count *v1074;
  unint64_t *v1075;
  unint64_t v1076;
  std::__shared_weak_count *v1077;
  unint64_t *v1078;
  unint64_t v1079;
  std::__shared_weak_count *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  std::__shared_weak_count *v1083;
  unint64_t *v1084;
  unint64_t v1085;
  std::__shared_weak_count *v1086;
  unint64_t *v1087;
  unint64_t v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  std::__shared_weak_count *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  std::__shared_weak_count *v1101;
  unint64_t *v1102;
  unint64_t v1103;
  std::__shared_weak_count *v1104;
  unint64_t *v1105;
  unint64_t v1106;
  std::__shared_weak_count *v1107;
  unint64_t *v1108;
  unint64_t v1109;
  std::__shared_weak_count *v1110;
  unint64_t *v1111;
  unint64_t v1112;
  unint64_t *v1113;
  std::__shared_weak_count *v1114;
  unint64_t *v1115;
  unint64_t v1116;
  std::__shared_weak_count *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  std::__shared_weak_count *v1120;
  unint64_t *v1121;
  unint64_t v1122;
  std::__shared_weak_count *v1123;
  unint64_t *v1124;
  unint64_t v1125;
  std::__shared_weak_count *v1126;
  unint64_t *v1127;
  unint64_t v1128;
  std::__shared_weak_count *v1129;
  unint64_t *v1130;
  unint64_t v1131;
  std::__shared_weak_count *v1132;
  unint64_t *v1133;
  unint64_t v1134;
  std::__shared_weak_count *v1135;
  unint64_t *v1136;
  unint64_t v1137;
  std::__shared_weak_count *v1138;
  unint64_t *v1139;
  unint64_t v1140;
  std::__shared_weak_count *v1141;
  unint64_t *v1142;
  unint64_t v1143;
  std::__shared_weak_count *v1144;
  unint64_t *v1145;
  unint64_t v1146;
  std::__shared_weak_count *v1147;
  unint64_t *v1148;
  unint64_t v1149;
  std::__shared_weak_count *v1150;
  unint64_t *v1151;
  unint64_t v1152;
  std::__shared_weak_count *v1153;
  unint64_t *v1154;
  unint64_t v1155;
  std::__shared_weak_count *v1156;
  unint64_t *v1157;
  unint64_t v1158;
  std::__shared_weak_count *v1159;
  unint64_t *v1160;
  unint64_t v1161;
  std::__shared_weak_count *v1162;
  unint64_t *v1163;
  unint64_t v1164;
  unint64_t *v1165;
  std::__shared_weak_count *v1166;
  unint64_t *v1167;
  unint64_t v1168;
  std::__shared_weak_count *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  std::__shared_weak_count *v1175;
  unint64_t *v1176;
  unint64_t v1177;
  std::__shared_weak_count *v1178;
  unint64_t *v1179;
  unint64_t v1180;
  std::__shared_weak_count *v1181;
  unint64_t *v1182;
  unint64_t v1183;
  std::__shared_weak_count *v1184;
  unint64_t *v1185;
  unint64_t v1186;
  std::__shared_weak_count *v1187;
  unint64_t *v1188;
  unint64_t v1189;
  std::__shared_weak_count *v1190;
  unint64_t *v1191;
  unint64_t v1192;
  std::__shared_weak_count *v1193;
  unint64_t *v1194;
  unint64_t v1195;
  std::__shared_weak_count *v1196;
  unint64_t *v1197;
  unint64_t v1198;
  std::__shared_weak_count *v1199;
  unint64_t *v1200;
  unint64_t v1201;
  std::__shared_weak_count *v1202;
  unint64_t *v1203;
  unint64_t v1204;
  std::__shared_weak_count *v1205;
  unint64_t *v1206;
  unint64_t v1207;
  std::__shared_weak_count *v1208;
  unint64_t *v1209;
  unint64_t v1210;
  std::__shared_weak_count *v1211;
  unint64_t *v1212;
  unint64_t v1213;
  std::__shared_weak_count *v1214;
  unint64_t *v1215;
  unint64_t v1216;
  unint64_t *v1217;
  uint64_t v1218;
  uint64_t v1219;
  float32x2_t v1220;
  float32x2_t v1221;
  float32x2_t v1222;
  float32x2_t v1223;
  float32x2_t v1224;
  float32x2_t v1225;
  float v1226;
  uint64_t v1227;
  float v1228;
  float32x2_t v1229;
  float v1230;
  float32x2_t v1231;
  float v1232;
  float32x2_t v1233;
  float v1234;
  float v1235;
  float v1236;
  float v1237;
  float v1238;
  float v1239;
  float v1240;
  float32x2_t v1241;
  float v1242;
  float32x2_t v1243;
  unsigned int v1244;
  float32x2_t v1245;
  unsigned int v1246;
  float32x4_t v1247;
  unsigned int v1248;
  float32x4_t v1249;
  float32x4_t v1250;
  int v1251;
  uint64_t v1252;
  int v1253;
  float32x4_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  float32x4_t v1257;
  float32x4_t v1258;
  float32x4_t v1259;
  float32x4_t v1260;
  float32x4_t v1261;
  float32x4_t v1262;
  unsigned int v1263;
  float32x2_t v1264;
  float32x2_t v1265;
  __int16 v1266;
  uint64_t v1267;
  __int16 v1268;
  float32x4_t v1269;
  unsigned int v1270;
  unsigned int v1271;
  __int16 v1272;
  float32x4_t v1273;
  __int16 v1274;
  __int16 v1275;
  float32x4_t v1276;
  float32x4_t v1277;
  float32x4_t v1278;
  float16x4_t v1279;
  float32x2_t v1280;
  float32x4_t v1281;
  __int16 v1282;
  float16x4_t v1283;
  float32x2_t v1284;
  float v1285;
  unsigned int v1286;
  float16x4_t v1287;
  float v1288;
  unint64_t v1289;
  float32x2_t v1290;
  uint64_t v1291;
  float32x4_t v1292;
  __int16 v1293;
  uint64_t v1294;
  uint64_t v1295;
  float32x2_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  float v1300;
  uint64_t v1301;
  uint64_t v1302;
  float32x2_t v1303;
  uint64_t v1304;
  float32x4_t v1305;
  uint64_t v1306;
  _QWORD *v1307;
  uint64_t v1308;
  float32x4_t v1309;
  __int16 v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  float32x2_t v1315;
  uint64_t v1316;
  float32x2_t v1317;
  float v1318;
  uint64_t v1319;
  int v1320;
  float32x4_t v1321;
  uint64_t v1322;
  float32x2_t v1323;
  uint64_t v1324;
  float32x2_t v1325;
  uint64_t v1326;
  float v1327;
  float v1328;
  _QWORD *v1329;
  _QWORD *v1330;
  __int16 v1331;
  float32x4_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  __int16 v1335;
  float32x4_t v1336;
  float v1337;
  uint64_t v1338;
  float v1339;
  float v1340;
  float v1341;
  uint64_t v1342;
  uint64_t v1343;
  float v1344;
  __int16 v1345;
  __int128 v1346;
  uint64_t v1347;
  float v1348;
  float v1349;
  __int16 v1350;
  float32x4_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  __int16 v1354;
  float32x4_t v1355;
  uint64_t v1356;
  float v1357;
  __int16 v1358;
  __int128 v1359;
  __int16 v1360;
  __int128 v1361;
  __int16 v1362;
  __int16 v1363;
  float32x4_t v1364;
  float32x4_t v1365;
  uint64_t v1366;
  __int16 v1367;
  unint64_t v1368;
  int v1369;
  float v1370;
  unint64_t v1371;
  unint64_t v1372;
  unint64_t v1373;
  __int16 v1374;
  float v1375;
  unint64_t v1376;
  unint64_t v1377;
  int v1378;
  float32x4_t v1379;
  float32x4_t v1380;
  float32x4_t v1381;
  float32x4_t v1382;
  float32x4_t v1383;
  float32x4_t v1384;
  float32x4_t v1385;
  float32x4_t v1386;
  float32x4_t v1387;
  float32x4_t v1388;
  float32x4_t v1389;
  float32x4_t v1390;
  float32x4_t v1391;
  float32x4_t v1394;
  float32x4_t v1395;
  float v1396;
  int v1397;
  _DWORD v1398[2];
  unint64_t v1399;
  unint64_t v1400;
  float32x4_t v1401;
  unint64_t v1402;
  unint64_t v1403;
  float32x4_t v1404;
  _BYTE v1405[16];
  std::__shared_weak_count *v1406;
  uint64_t v1407;
  int v1408;
  int v1409;
  uint64_t (**v1410)();
  uint64_t v1411;
  std::__shared_weak_count *v1412;
  uint64_t v1413;
  int v1414;
  int v1415;
  uint64_t (**v1416)();
  uint64_t v1417;
  std::__shared_weak_count *v1418;
  uint64_t v1419;
  int v1420;
  int v1421;
  uint64_t (**v1422)();
  uint64_t v1423;
  std::__shared_weak_count *v1424;
  uint64_t v1425;
  int v1426;
  int v1427;
  _BYTE v1428[16];
  std::__shared_weak_count *v1429;
  uint64_t v1430;
  int v1431;
  int v1432;
  _BYTE v1433[16];
  std::__shared_weak_count *v1434;
  uint64_t v1435;
  int v1436;
  int v1437;
  uint64_t (**v1438)();
  uint64_t v1439;
  std::__shared_weak_count *v1440;
  uint64_t v1441;
  int v1442;
  int v1443;
  uint64_t (**v1444)();
  uint64_t v1445;
  std::__shared_weak_count *v1446;
  uint64_t v1447;
  int v1448;
  int v1449;
  uint64_t (**v1450)();
  uint64_t v1451;
  std::__shared_weak_count *v1452;
  uint64_t v1453;
  int v1454;
  int v1455;
  _BYTE v1456[16];
  std::__shared_weak_count *v1457;
  _BYTE v1458[16];
  std::__shared_weak_count *v1459;
  _BYTE v1460[16];
  std::__shared_weak_count *v1461;
  uint64_t v1462;
  unsigned int v1463;
  unsigned int v1464;
  int v1465;
  int v1466;
  _BYTE v1467[16];
  std::__shared_weak_count *v1468;
  uint64_t v1469;
  int v1470;
  int v1471;
  uint64_t (**v1472)();
  uint64_t v1473;
  std::__shared_weak_count *v1474;
  uint64_t v1475;
  int v1476;
  int v1477;
  uint64_t (**v1478)();
  uint64_t v1479;
  std::__shared_weak_count *v1480;
  uint64_t v1481;
  int v1482;
  int v1483;
  uint64_t (**v1484)();
  uint64_t v1485;
  std::__shared_weak_count *v1486;
  uint64_t v1487;
  int v1488;
  int v1489;
  _BYTE v1490[16];
  std::__shared_weak_count *v1491;
  uint64_t v1492;
  int v1493;
  int v1494;
  _BYTE v1495[16];
  std::__shared_weak_count *v1496;
  uint64_t v1497;
  int v1498;
  int v1499;

  HIDWORD(v8) = a6 - 35;
  LODWORD(v8) = a6 - 35;
  v9 = a5;
  v11 = (uint64_t)a3;
  switch((v8 >> 2))
  {
    case 0u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      v1484 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1485);
      v1478 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1479);
      v1472 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1473);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      v1450 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1451);
      v1444 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1445);
      v1438 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1439);
      v1298 = *(_QWORD *)(a2 + 764);
      sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      v1422 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1423);
      v1416 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1417);
      v1410 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1411);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v16 = atomic_load((unsigned __int8 *)&qword_2540CC700);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC700))
      {
        qword_2540CC7C0 = 0;
        unk_2540CC7C8 = 0;
        __cxa_guard_release(&qword_2540CC700);
      }
      v17 = atomic_load((unsigned __int8 *)&qword_2540CC710);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC710))
      {
        qword_2540CC708 = 0;
        __cxa_guard_release(&qword_2540CC710);
      }
      if (!HIDWORD(v1298) || !(_DWORD)v1298)
        goto LABEL_1263;
      v18 = 0;
      v19 = v1298;
      while (2)
      {
        v20 = 0;
        v21 = v18 * v1298;
        _Q0.f32[0] = (float)v18;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1321 = _Q0;
        do
        {
          _H15 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v20 + v1437 * v18));
          __asm { FCVT            S0, H15 }
          if (_Q0.f32[0] > -65504.0)
          {
            _H1 = *(_WORD *)(v1430 + 2 * (v1432 * v18 + v1431 * (_DWORD)v20));
            __asm { FCVT            S1, H1 }
            v1370 = _S1;
            v1357 = _Q0.f32[0];
          }
          else
          {
            v1370 = *(float *)(v11 + 104);
            v1357 = -65504.0;
          }
          v56 = _Q0.f32[0] <= -65504.0;
          _Q0.i64[0] = 0x7E007E007E007E00;
          v1379 = _Q0;
          _H11 = 32256;
          _H8 = 32256;
          if (!v56)
          {
            v32 = *(_QWORD *)(a1 + 672)
                + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * (v21 + v20));
            _Q0.i32[0] = *(_DWORD *)v32;
            v1379 = _Q0;
            _H8 = *(_WORD *)(v32 + 4);
            _H11 = *(_WORD *)(v32 + 6);
          }
          v33 = v1498 * (_DWORD)v20 + v1499 * v18;
          v34 = v1497;
          v35 = v1493 * (_DWORD)v20 + v1494 * v18;
          v36 = v1492;
          _H12 = *(_WORD *)(v1497 + 2 * v33);
          _H14 = *(_WORD *)(v1492 + 2 * v35);
          v39 = v1469 + 2 * (v1470 * (_DWORD)v20 + v1471 * v18);
          v6.i32[0] = *(_DWORD *)v39;
          _H10 = *(_WORD *)(v39 + 4);
          _H13 = *(_WORD *)(v39 + 6);
          if (*(_BYTE *)(a1 + 776))
          {
            v1338 = v1469 + 2 * (v1470 * (_DWORD)v20 + v1471 * v18);
            v1347 = v1492;
            v42 = v1408;
            v43 = v1409;
            v44 = v1407;
            if (!v1407)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v45 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v46 = qword_255795648;
                for (i = qword_255795650; v46 != i; v46 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v46)(*(_QWORD *)(v46 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v48 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              v19 = v1298;
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              v21 = v18 * v1298;
            }
            v49 = v44 + 2 * (v42 * (_DWORD)v20 + v43 * v18);
            _Q0 = v1379;
            *(_DWORD *)v49 = v1379.i32[0];
            *(_WORD *)(v49 + 4) = _H8;
            *(_WORD *)(v49 + 6) = _H11;
            v11 = (uint64_t)a3;
            v36 = v1347;
            v39 = v1338;
          }
          v50 = 0;
          v51 = 0;
          __asm
          {
            FCVT            S4, H12
            FCVT            S6, H12
          }
          if (_S6 > 0.0 && _S6 > -65504.0)
          {
            v50 = 0;
            v51 = 0;
            v54 = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v11 + 32), vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v11, (float)v20), v1321, *(float32x4_t *)(v11 + 16))), *(float32x4_t *)(v11 + 48), 1.0 / _S4);
            _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2);
            _Q1 = vdivq_f32(v54, _Q0);
            v56 = _Q1.f32[3] <= 0.0 || _Q1.f32[3] <= -65504.0;
            if (!v56 && _Q1.f32[0] >= 0.0)
            {
              v50 = 0;
              v51 = 0;
              if (_Q1.f32[0] < (float)v1463)
              {
                _NF = _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464;
                if (_NF)
                {
                  _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                  __asm { FCVT            S1, H1 }
                  v50 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                  v59 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                  if (_Q1.f32[0] < 2.0)
                    v59 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                  v51 = v59 < _Q1.f32[0];
                  if (!v50)
                    v51 = 0;
                }
              }
            }
          }
          __asm { FCVT            S0, H15 }
          if (_S0 > -65504.0 || v51)
          {
            __asm { FCVT            S21, H14 }
            _Q0.i64[1] = v1379.i64[1];
            v62 = vcvtq_f32_f16(*(float16x4_t *)v1379.f32);
            __asm
            {
              FCVT            S16, H8
              FCVT            S0, H11
            }
            v63 = v62;
            v63.i32[2] = _Q16.i32[0];
            v64 = vcvtq_f32_f16(v6);
            __asm
            {
              FCVT            S18, H10
              FCVT            S20, H13
            }
            v66 = v64;
            v66.i32[2] = _D18.i32[0];
            v67 = *(float *)(v11 + 112);
            v68 = *(float *)(v11 + 104);
            if (v1357 <= 0.0 || v1370 <= v68)
            {
              if (v51)
              {
                _S7 = _S4;
                _S17 = *(float *)(v11 + 104);
                v77 = _S20;
                _Q16 = v66;
                if (v1357 <= 0.0)
                  goto LABEL_138;
                goto LABEL_68;
              }
              _S7 = _S4;
              _S17 = _S21;
              v77 = _S20;
              _Q16 = v66;
            }
            else
            {
              if (_S6 > 0.0 && v68 < _S21)
              {
                if (v1370 <= 0.0)
                {
                  v71 = 0.01;
                  __asm { FCVT            S7, H14 }
                  if (_S7 > 0.0)
                    goto LABEL_71;
                }
                else
                {
                  if (v1370 < 1.0)
                  {
                    v69 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                    v70 = 0.01;
                    if (v69 <= 0.01)
                      v70 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                    if (v69 >= 0.0001)
                      v71 = v70;
                    else
                      v71 = 0.0001;
                    __asm { FCVT            S7, H14 }
                    if (_S7 <= 0.0)
                      goto LABEL_61;
LABEL_71:
                    if (_S7 < 1.0)
                    {
                      v78 = (float)((float)(_S21 * -0.09) + 0.1) * (float)((float)(_S21 * -0.09) + 0.1);
                      v79 = 0.01;
                      if (v78 <= 0.01)
                        v79 = (float)((float)(_S21 * -0.09) + 0.1) * (float)((float)(_S21 * -0.09) + 0.1);
                      if (v78 >= 0.0001)
                        v80 = v79;
                      else
                        v80 = 0.0001;
                      if ((float)((float)((float)(v1357 - _S4) * (float)(v1357 - _S4)) / (float)(v80 + v71)) < 1.1)
                      {
LABEL_94:
                        if (v1370 <= 0.0)
                        {
                          *(float *)&v88 = 0.01;
                        }
                        else
                        {
                          if (v1370 < 1.0)
                          {
                            v86 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                            v87 = 0.01;
                            if (v86 <= 0.01)
                              v87 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                            if (v86 < 0.0001)
                              v87 = 0.0001;
                            goto LABEL_104;
                          }
                          *(float *)&v88 = 0.0001;
                        }
                        v87 = *(float *)&v88;
LABEL_104:
                        v89 = (float)(v80 * v87) / (float)(v80 + v87);
                        v77 = 1.0;
                        v81 = 1.0;
                        if (v89 > 0.0001)
                        {
                          v81 = 0.0;
                          if (v89 < 0.01)
                          {
                            v90 = sqrtf(v89);
                            v91 = 1.0;
                            v92 = (float)((float)(v90 + -0.01) / -0.09) + 1.0;
                            if (v92 <= 1.0)
                              v91 = v92;
                            _NF = v92 < 0.0;
                            v81 = 0.0;
                            if (!_NF)
                              v81 = v91;
                          }
                        }
                        _S7 = (float)((float)(v1357 * v80) + (float)(v87 * _S4)) / (float)(v80 + v87);
                        v93 = vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v62.f32);
                        v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.f32, 1);
                        if (vmla_f32(vmla_lane_f32(v93, v94, *(float32x2_t *)v64.f32, 1), *(float32x2_t *)_Q16.f32, _D18).f32[0] > 0.70711)
                        {
                          if (v1370 <= 0.0)
                          {
                            v97 = 0.01;
                            if (v81 > 0.0)
                              goto LABEL_122;
                          }
                          else
                          {
                            if (v1370 < 1.0)
                            {
                              v95 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                              v96 = 0.01;
                              if (v95 <= 0.01)
                                v96 = (float)((float)(v1370 * -0.09) + 0.1) * (float)((float)(v1370 * -0.09) + 0.1);
                              if (v95 >= 0.0001)
                                v97 = v96;
                              else
                                v97 = 0.0001;
                              if (v81 <= 0.0)
                                goto LABEL_119;
LABEL_122:
                              if (v81 < 1.0)
                              {
                                v99 = (float)((float)(v81 * -0.09) + 0.1) * (float)((float)(v81 * -0.09) + 0.1);
                                v100 = 0.01;
                                if (v99 <= 0.01)
                                  v100 = (float)((float)(v81 * -0.09) + 0.1) * (float)((float)(v81 * -0.09) + 0.1);
                                if (v99 >= 0.0001)
                                  v101 = v100;
                                else
                                  v101 = 0.0001;
                                goto LABEL_132;
                              }
                              *(float *)&v98 = 0.0001;
LABEL_131:
                              v101 = *(float *)&v98;
LABEL_132:
                              v94.f32[0] = v97 + v101;
                              _Q16 = vdivq_f32(vaddq_f32(vmulq_n_f32(v66, v97), vmulq_n_f32(v63, v101)), (float32x4_t)vdupq_lane_s32((int32x2_t)v94, 0));
                              goto LABEL_133;
                            }
                            v97 = 0.0001;
                            if (v81 > 0.0)
                              goto LABEL_122;
                          }
LABEL_119:
                          *(float *)&v98 = 0.01;
                          goto LABEL_131;
                        }
                        _Q16 = v63;
LABEL_133:
                        v102 = *(float *)(v11 + 100);
                        if (v102 >= v81)
                          v102 = v81;
                        if (v81 >= v68)
                          _S17 = v102;
                        else
                          _S17 = *(float *)(v11 + 104);
                        goto LABEL_138;
                      }
                      if (v1357 > _S4 && !v51)
                        goto LABEL_80;
LABEL_78:
                      if (v50)
                      {
                        _S7 = v1357;
                        v81 = v1370;
                        v77 = _Q0.f32[0];
                        _Q16 = v63;
                        if (v1370 > v67)
                          goto LABEL_133;
                      }
                      if (v50 || v1370 > v67)
                      {
                        v82 = *(float *)(v11 + 108);
                        v83 = (float)((float)((float)(v82 * -0.1) + 0.01) / 0.09) + 1.0;
                        v84 = (float)-v83 / v82;
                        v85 = (float)(v82 * _S21) + v83;
                        if (v84 <= _S21)
                          v81 = v85;
                        else
                          v81 = 0.0;
                        _S7 = _S4;
                      }
                      else
                      {
LABEL_80:
                        _S7 = _S4;
                        v81 = _S21;
                      }
                      v77 = _S20;
                      _Q16 = v66;
                      goto LABEL_133;
                    }
                    v73 = (float)(v1357 - _S4) * (float)(v1357 - _S4);
                    v74 = 0.0001;
LABEL_93:
                    v80 = v74;
                    if ((float)(v73 / (float)(v71 + v74)) < 1.1)
                      goto LABEL_94;
                    goto LABEL_78;
                  }
                  v71 = 0.0001;
                  __asm { FCVT            S7, H14 }
                  if (_S7 > 0.0)
                    goto LABEL_71;
                }
LABEL_61:
                v73 = (float)(v1357 - _S4) * (float)(v1357 - _S4);
                v74 = 0.01;
                goto LABEL_93;
              }
              v56 = _S6 > 0.0;
              _S7 = v1357;
              _S17 = v1370;
              v77 = _Q0.f32[0];
              _Q16 = v63;
              if (v56)
              {
                _S7 = _S4;
                _S17 = _S21;
                v77 = _S20;
                _Q16 = v66;
                if (v1370 > v67)
                {
LABEL_68:
                  _S7 = v1357;
                  _S17 = v1370;
                  v77 = _Q0.f32[0];
                  _Q16 = v63;
                }
              }
            }
LABEL_138:
            if (v50 && _S17 <= v68 && v1370 > v67)
            {
              _S7 = v1357;
              _S17 = v1370;
              v77 = _Q0.f32[0];
              _Q16 = v63;
            }
            __asm { FCVT            H0, S7 }
            *(_WORD *)(v34 + 2 * v33) = _H0;
            __asm { FCVT            H0, S17 }
            *(_WORD *)(v36 + 2 * v35) = _H0;
            _Q16.f32[3] = v77;
            *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q16);
            *(_QWORD *)v39 = _Q0.i64[0];
          }
          ++v20;
        }
        while (v20 != v19);
        if (++v18 != HIDWORD(v1298))
          continue;
        break;
      }
LABEL_1263:
      v800 = v1406;
      if (v1406)
      {
        p_shared_owners = (unint64_t *)&v1406->__shared_owners_;
        do
          v802 = __ldaxr(p_shared_owners);
        while (__stlxr(v802 - 1, p_shared_owners));
        if (!v802)
        {
          ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
          std::__shared_weak_count::__release_weak(v800);
        }
      }
      v803 = v1412;
      if (v1412)
      {
        v804 = (unint64_t *)&v1412->__shared_owners_;
        do
          v805 = __ldaxr(v804);
        while (__stlxr(v805 - 1, v804));
        if (!v805)
        {
          ((void (*)(std::__shared_weak_count *))v803->__on_zero_shared)(v803);
          std::__shared_weak_count::__release_weak(v803);
        }
      }
      v806 = v1418;
      if (v1418)
      {
        v807 = (unint64_t *)&v1418->__shared_owners_;
        do
          v808 = __ldaxr(v807);
        while (__stlxr(v808 - 1, v807));
        if (!v808)
        {
          ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
          std::__shared_weak_count::__release_weak(v806);
        }
      }
      v809 = v1424;
      if (v1424)
      {
        v810 = (unint64_t *)&v1424->__shared_owners_;
        do
          v811 = __ldaxr(v810);
        while (__stlxr(v811 - 1, v810));
        if (!v811)
        {
          ((void (*)(std::__shared_weak_count *))v809->__on_zero_shared)(v809);
          std::__shared_weak_count::__release_weak(v809);
        }
      }
      v812 = v1429;
      if (v1429)
      {
        v813 = (unint64_t *)&v1429->__shared_owners_;
        do
          v814 = __ldaxr(v813);
        while (__stlxr(v814 - 1, v813));
        if (!v814)
        {
          ((void (*)(std::__shared_weak_count *))v812->__on_zero_shared)(v812);
          std::__shared_weak_count::__release_weak(v812);
        }
      }
      v815 = v1434;
      if (v1434)
      {
        v816 = (unint64_t *)&v1434->__shared_owners_;
        do
          v817 = __ldaxr(v816);
        while (__stlxr(v817 - 1, v816));
        if (!v817)
        {
          ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
          std::__shared_weak_count::__release_weak(v815);
        }
      }
      v818 = v1440;
      if (v1440)
      {
        v819 = (unint64_t *)&v1440->__shared_owners_;
        do
          v820 = __ldaxr(v819);
        while (__stlxr(v820 - 1, v819));
        if (!v820)
        {
          ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
          std::__shared_weak_count::__release_weak(v818);
        }
      }
      v821 = v1446;
      if (v1446)
      {
        v822 = (unint64_t *)&v1446->__shared_owners_;
        do
          v823 = __ldaxr(v822);
        while (__stlxr(v823 - 1, v822));
        if (!v823)
        {
          ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
          std::__shared_weak_count::__release_weak(v821);
        }
      }
      v824 = v1452;
      if (v1452)
      {
        v825 = (unint64_t *)&v1452->__shared_owners_;
        do
          v826 = __ldaxr(v825);
        while (__stlxr(v826 - 1, v825));
        if (!v826)
        {
          ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
          std::__shared_weak_count::__release_weak(v824);
        }
      }
      v827 = v1457;
      if (v1457)
      {
        v828 = (unint64_t *)&v1457->__shared_owners_;
        do
          v829 = __ldaxr(v828);
        while (__stlxr(v829 - 1, v828));
        if (!v829)
        {
          ((void (*)(std::__shared_weak_count *))v827->__on_zero_shared)(v827);
          std::__shared_weak_count::__release_weak(v827);
        }
      }
      v830 = v1459;
      if (v1459)
      {
        v831 = (unint64_t *)&v1459->__shared_owners_;
        do
          v832 = __ldaxr(v831);
        while (__stlxr(v832 - 1, v831));
        if (!v832)
        {
          ((void (*)(std::__shared_weak_count *))v830->__on_zero_shared)(v830);
          std::__shared_weak_count::__release_weak(v830);
        }
      }
      v833 = v1461;
      if (v1461)
      {
        v834 = (unint64_t *)&v1461->__shared_owners_;
        do
          v835 = __ldaxr(v834);
        while (__stlxr(v835 - 1, v834));
        if (!v835)
        {
          ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
          std::__shared_weak_count::__release_weak(v833);
        }
      }
      v836 = v1468;
      if (v1468)
      {
        v837 = (unint64_t *)&v1468->__shared_owners_;
        do
          v838 = __ldaxr(v837);
        while (__stlxr(v838 - 1, v837));
        if (!v838)
        {
          ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
          std::__shared_weak_count::__release_weak(v836);
        }
      }
      v839 = v1474;
      if (v1474)
      {
        v840 = (unint64_t *)&v1474->__shared_owners_;
        do
          v841 = __ldaxr(v840);
        while (__stlxr(v841 - 1, v840));
        if (!v841)
        {
          ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
          std::__shared_weak_count::__release_weak(v839);
        }
      }
      v842 = v1480;
      if (v1480)
      {
        v843 = (unint64_t *)&v1480->__shared_owners_;
        do
          v844 = __ldaxr(v843);
        while (__stlxr(v844 - 1, v843));
        if (!v844)
        {
          ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
          std::__shared_weak_count::__release_weak(v842);
        }
      }
      v845 = v1486;
      if (v1486)
      {
        v846 = (unint64_t *)&v1486->__shared_owners_;
        do
          v847 = __ldaxr(v846);
        while (__stlxr(v847 - 1, v846));
        if (!v847)
        {
          ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
          std::__shared_weak_count::__release_weak(v845);
        }
      }
      v848 = v1491;
      if (v1491)
      {
        v849 = (unint64_t *)&v1491->__shared_owners_;
        do
          v850 = __ldaxr(v849);
        while (__stlxr(v850 - 1, v849));
        if (!v850)
        {
          ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
          std::__shared_weak_count::__release_weak(v848);
        }
      }
      v851 = v1496;
      if (v1496)
      {
        v852 = (unint64_t *)&v1496->__shared_owners_;
        do
          v853 = __ldaxr(v852);
        while (__stlxr(v853 - 1, v852));
        goto LABEL_1974;
      }
      return;
    case 1u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      sub_2231CD8A8(v9, (uint64_t)&v1484);
      v1478 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1479);
      v1472 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1473);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      sub_2231D48A8(a4, (uint64_t)&v1450);
      v1444 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1445);
      v1438 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1439);
      v1227 = *(_QWORD *)(a2 + 764);
      v1248 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      sub_2231CD8A8(a1 + 8, (uint64_t)&v1422);
      v1416 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1417);
      v1410 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1411);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v1233 = *(float32x2_t *)(v11 + 68);
      v1230 = *(float *)(v11 + 76);
      _Q0.i64[0] = *(_QWORD *)(v11 + 80);
      v1245 = *(float32x2_t *)_Q0.f32;
      v1242 = *(float *)(v11 + 88);
      v1236 = *(float *)(v11 + 64);
      v1239 = *(float *)(v11 + 92);
      v476 = atomic_load((unsigned __int8 *)&qword_2540CC718);
      if ((v476 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC718))
      {
        xmmword_2540CC7D0 = 0uLL;
        __cxa_guard_release(&qword_2540CC718);
      }
      v477 = atomic_load((unsigned __int8 *)&qword_2540CC728);
      if ((v477 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC728))
      {
        qword_2540CC720 = 0;
        __cxa_guard_release(&qword_2540CC728);
      }
      if (!HIDWORD(v1227) || !(_DWORD)v1227)
        goto LABEL_1619;
      v478 = 0;
LABEL_736:
      v479 = 0;
      _Q0.f32[0] = (float)v478;
      _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
      v1250 = _Q0;
      while (1)
      {
        _H8 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v479 + v1437 * v478));
        __asm { FCVT            S0, H8 }
        v482 = v478 * v1227 + v479;
        if (_S0 > -65504.0)
        {
          _H1 = *(_WORD *)(v1430 + 2 * (v1432 * v478 + v1431 * (_DWORD)v479));
          v486 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v482);
          v1253 = v486 / v1248;
          v1251 = v486 % v1248;
          __asm { FCVT            S9, H1 }
          *(float *)&v484 = _S0;
        }
        else
        {
          _S9 = *(float *)(v11 + 104);
          *(float *)&v484 = -65504.0;
        }
        v1366 = v1498 * (_DWORD)v479 + v1499 * v478;
        v1353 = v1497;
        _H10 = *(_WORD *)(v1497 + 2 * v1366);
        v1343 = v1493 * (_DWORD)v479 + v1494 * v478;
        v1334 = v1492;
        v1327 = _S9;
        v1318 = *(float *)&v484;
        v1310 = *(_WORD *)(v1492 + 2 * v1343);
        if (_S0 > -65504.0)
        {
          v491 = v1454;
          v492 = v1455;
          v493 = v1453;
          if (!v1453)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v494 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v494 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v496 = qword_255795648;
              for (j = qword_255795650; v496 != j; v496 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v496)(*(_QWORD *)(v496 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v497 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v497 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v11 = (uint64_t)a3;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          v498 = v493 + 2 * (v491 * v1251 + v492 * v1253);
          _H9 = *(_WORD *)(v498 + 4);
          _H15 = *(_WORD *)(v498 + 6);
          v469.i32[0] = *(_DWORD *)v498;
          _Q0 = vcvtq_f32_f16(*(float16x4_t *)v469.f32);
          *(float32x2_t *)v468.f32 = vmul_f32(v1245, *(float32x2_t *)_Q0.f32);
          __asm { FCVT            S0, H9 }
          v468.f32[2] = v1242 * _Q0.f32[0];
          __asm { FCVT            S0, H15 }
          v1300 = v1239 * _Q0.f32[0];
          v1305 = v468;
          v1374 = *(_DWORD *)v498;
          v489 = HIWORD(*(_DWORD *)v498);
        }
        else
        {
          v1374 = qword_2540CC720;
          _H9 = WORD2(qword_2540CC720);
          v489 = WORD1(qword_2540CC720);
          _H15 = HIWORD(qword_2540CC720);
          v1300 = *((float *)&xmmword_2540CC7D0 + 3);
          v1305 = (float32x4_t)xmmword_2540CC7D0;
        }
        __asm { FCVT            S13, H8 }
        _Q0.i64[0] = 0x7E007E007E007E00;
        v1386 = _Q0;
        _H14 = 32256;
        _H11 = 32256;
        if (_S13 > -65504.0)
        {
          v502 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v482);
          _Q0.i32[0] = *(_DWORD *)v502;
          v1386 = _Q0;
          _H11 = *(_WORD *)(v502 + 4);
          _H14 = *(_WORD *)(v502 + 6);
        }
        v503 = (__int16 *)(v1487 + 2 * (v1488 * (_DWORD)v479 + v1489 * v478));
        _H8 = *v503;
        v505 = *(_DWORD *)(v503 + 1);
        v1274 = v503[3];
        v506 = v1469 + 2 * (v1470 * (_DWORD)v479 + v1471 * v478);
        _Q0.i32[0] = *(_DWORD *)v506;
        v1287 = *(float16x4_t *)_Q0.f32;
        v1282 = *(_WORD *)(v506 + 4);
        v1293 = *(_WORD *)(v506 + 6);
        if (*(_BYTE *)(a1 + 776))
        {
          v507 = v1426;
          v508 = v1427;
          v509 = v1425;
          if (!v1425)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v510 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v510 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v512 = qword_255795648;
              for (k = qword_255795650; v512 != k; v512 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v512)(*(_QWORD *)(v512 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v513 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v513 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v11 = (uint64_t)a3;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          v514 = (_WORD *)(v509 + 2 * (v507 * (_DWORD)v479 + v508 * v478));
          *v514 = v1374;
          v514[1] = v489;
          v514[2] = _H9;
          v514[3] = _H15;
          v515 = v1408;
          v516 = v1409;
          v517 = v1407;
          if (!v1407)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v518 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v518 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v520 = qword_255795648;
              for (m = qword_255795650; v520 != m; v520 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v520)(*(_QWORD *)(v520 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v521 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v521 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v11 = (uint64_t)a3;
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
          }
          v522 = v517 + 2 * (v515 * (_DWORD)v479 + v516 * v478);
          _Q0 = v1386;
          *(_DWORD *)v522 = v1386.i32[0];
          *(_WORD *)(v522 + 4) = _H11;
          *(_WORD *)(v522 + 6) = _H14;
        }
        v523 = 0;
        v524 = 0;
        __asm
        {
          FCVT            S4, H10
          FCVT            S17, H10
        }
        if (_S17 > 0.0 && _S17 > -65504.0)
        {
          v523 = 0;
          v524 = 0;
          v469 = *(float32x4_t *)(v11 + 16);
          v470 = *(float32x4_t *)(v11 + 48);
          v468.i32[3] = v1250.i32[3];
          v527 = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v11 + 32), vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v11, (float)v479), v1250, v469)), v470, 1.0 / _S4);
          _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v527, 2);
          _Q1 = vdivq_f32(v527, _Q0);
          if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
          {
            v523 = 0;
            v524 = 0;
            if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
            {
              _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
              __asm { FCVT            S1, H1 }
              v523 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
              v532 = (float)(1.0 / _Q1.f32[3]) * 1.05;
              if (_Q1.f32[0] < 2.0)
                v532 = (float)(1.0 / _Q1.f32[3]) + 0.1;
              v524 = v532 < _Q1.f32[0];
              if (!v523)
                v524 = 0;
            }
          }
        }
        if (_S13 <= -65504.0 && !v524)
          goto LABEL_738;
        __asm { FCVT            S0, H8 }
        v470.f32[0] = v1236 * _Q0.f32[0];
        _Q0.i32[0] = v505;
        *(float32x2_t *)&v470.i32[1] = vmul_f32(v1233, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.f32));
        _H25 = v1310;
        __asm { FCVT            S22, H25 }
        _H0 = v1274;
        __asm { FCVT            S0, H0 }
        v537 = v1230 * _S0;
        v538 = vcvtq_f32_f16(*(float16x4_t *)v1386.f32);
        __asm { FCVT            S18, H11 }
        v539 = v538;
        v539.i32[2] = _Q18.i32[0];
        __asm { FCVT            S1, H14 }
        v541 = vcvtq_f32_f16(v1287);
        _H2 = v1282;
        __asm { FCVT            S20, H2 }
        v543 = v541;
        v543.i32[2] = _D20.i32[0];
        _H2 = v1293;
        __asm { FCVT            S23, H2 }
        v546 = *(float *)(v11 + 112);
        v547 = *(float *)(v11 + 104);
        if (v1318 <= 0.0 || v1327 <= v547)
        {
          v549 = v1300;
          v548 = v1305;
          if (v524)
          {
            _Q18 = v539;
            v557 = _S1;
            _S17 = v1318;
            _S19 = v1327;
            v1375 = v1300;
            v1387 = v1305;
            if (v1318 > 0.0)
              goto LABEL_821;
            _Q18 = v543;
            v557 = _S23;
            _S17 = _S4;
            _S19 = *(float *)(v11 + 104);
          }
          else
          {
            _Q18 = v543;
            v557 = _S23;
            _S17 = _S4;
            _S19 = _S22;
          }
          v1375 = v537;
          v1387 = v470;
        }
        else
        {
          v549 = v1300;
          v548 = v1305;
          if (_S17 > 0.0 && v547 < _S22)
          {
            if (v1327 <= 0.0)
            {
              v552 = 0.01;
              v553 = *(float *)(v11 + 108);
              __asm { FCVT            S17, H25 }
              if (_S17 <= 0.0)
                goto LABEL_810;
            }
            else if (v1327 >= 1.0)
            {
              v552 = 0.0001;
              v553 = *(float *)(v11 + 108);
              __asm { FCVT            S17, H25 }
              if (_S17 <= 0.0)
                goto LABEL_810;
            }
            else
            {
              v550 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
              v551 = 0.01;
              if (v550 <= 0.01)
                v551 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
              if (v550 >= 0.0001)
                v552 = v551;
              else
                v552 = 0.0001;
              v553 = *(float *)(v11 + 108);
              __asm { FCVT            S17, H25 }
              if (_S17 <= 0.0)
              {
LABEL_810:
                v555 = (float)(v1318 - _S4) * (float)(v1318 - _S4);
                v556 = 0.01;
                goto LABEL_856;
              }
            }
            if (_S17 < 1.0)
            {
              v569 = (float)((float)(_S22 * -0.09) + 0.1) * (float)((float)(_S22 * -0.09) + 0.1);
              v570 = 0.01;
              if (v569 <= 0.01)
                v570 = (float)((float)(_S22 * -0.09) + 0.1) * (float)((float)(_S22 * -0.09) + 0.1);
              if (v569 >= 0.0001)
                v571 = v570;
              else
                v571 = 0.0001;
              if ((float)((float)((float)(v1318 - _S4) * (float)(v1318 - _S4)) / (float)(v571 + v552)) >= 1.1)
                goto LABEL_842;
LABEL_857:
              if (v1327 <= 0.0)
              {
                *(float *)&v578 = 0.01;
              }
              else
              {
                if (v1327 < 1.0)
                {
                  v576 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
                  v577 = 0.01;
                  if (v576 <= 0.01)
                    v577 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
                  if (v576 < 0.0001)
                    v577 = 0.0001;
LABEL_867:
                  v579 = (float)(v571 * v577) / (float)(v571 + v577);
                  v557 = 1.0;
                  v572 = 1.0;
                  if (v579 > 0.0001)
                  {
                    v572 = 0.0;
                    if (v579 < 0.01)
                    {
                      v580 = sqrtf(v579);
                      v581 = 1.0;
                      v582 = (float)((float)(v580 + -0.01) / -0.09) + 1.0;
                      if (v582 <= 1.0)
                        v581 = v582;
                      _NF = v582 < 0.0;
                      v572 = 0.0;
                      if (!_NF)
                        v572 = v581;
                    }
                  }
                  _S17 = (float)((float)(v1318 * v571) + (float)(v577 * _S4)) / (float)(v571 + v577);
                  *(float *)v474.i32 = v1300 + v537;
                  v583 = vaddq_f32(vmulq_n_f32(v1305, v1300), vmulq_n_f32(v470, v537));
                  v470 = (float32x4_t)vdupq_lane_s32(v474, 0);
                  v1387 = vdivq_f32(v583, v470);
                  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v541.f32, *(float32x2_t *)v538.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v538.f32, 1), *(float32x2_t *)v541.f32, 1), *(float32x2_t *)_Q18.f32, _D20).f32[0] <= 0.70711)
                  {
                    _Q18 = v539;
                  }
                  else
                  {
                    if (v1327 <= 0.0)
                    {
                      v586 = 0.01;
                      if (v572 <= 0.0)
                        goto LABEL_882;
                    }
                    else if (v1327 >= 1.0)
                    {
                      v586 = 0.0001;
                      if (v572 <= 0.0)
                        goto LABEL_882;
                    }
                    else
                    {
                      v584 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
                      v585 = 0.01;
                      if (v584 <= 0.01)
                        v585 = (float)((float)(v1327 * -0.09) + 0.1) * (float)((float)(v1327 * -0.09) + 0.1);
                      if (v584 >= 0.0001)
                        v586 = v585;
                      else
                        v586 = 0.0001;
                      if (v572 <= 0.0)
                      {
LABEL_882:
                        *(float *)&v587 = 0.01;
                        goto LABEL_894;
                      }
                    }
                    if (v572 >= 1.0)
                    {
                      *(float *)&v587 = 0.0001;
LABEL_894:
                      v590 = *(float *)&v587;
                    }
                    else
                    {
                      v588 = (float)((float)(v572 * -0.09) + 0.1) * (float)((float)(v572 * -0.09) + 0.1);
                      v589 = 0.01;
                      if (v588 <= 0.01)
                        v589 = (float)((float)(v572 * -0.09) + 0.1) * (float)((float)(v572 * -0.09) + 0.1);
                      if (v588 >= 0.0001)
                        v590 = v589;
                      else
                        v590 = 0.0001;
                    }
                    *(float *)v471.i32 = v586 + v590;
                    _Q18 = vdivq_f32(vaddq_f32(vmulq_n_f32(v543, v586), vmulq_n_f32(v539, v590)), (float32x4_t)vdupq_lane_s32(v471, 0));
                  }
                  goto LABEL_896;
                }
                *(float *)&v578 = 0.0001;
              }
              v577 = *(float *)&v578;
              goto LABEL_867;
            }
            v555 = (float)(v1318 - _S4) * (float)(v1318 - _S4);
            v556 = 0.0001;
LABEL_856:
            v571 = v556;
            if ((float)(v555 / (float)(v552 + v556)) < 1.1)
              goto LABEL_857;
LABEL_842:
            if (v1318 > _S4 && !v524)
              goto LABEL_844;
            if (v523)
            {
              _Q18 = v539;
              v557 = _S1;
              _S17 = v1318;
              v572 = v1327;
              v1387 = v1305;
              *(float *)v474.i32 = v1300;
              if (v1327 > v546)
                goto LABEL_896;
            }
            if (!v523 && v1327 <= v546)
            {
LABEL_844:
              _Q18 = v543;
              v557 = _S23;
              _S17 = _S4;
              v572 = _S22;
              v1387 = v470;
              *(float *)v474.i32 = v537;
              goto LABEL_896;
            }
            v573 = (float)((float)((float)(v553 * -0.1) + 0.01) / 0.09) + 1.0;
            v574 = (float)-v573 / v553;
            v575 = (float)(v553 * _S22) + v573;
            if (v574 <= _S22)
              v572 = v575;
            else
              v572 = 0.0;
            *(float *)v474.i32 = v537 / (float)(v553 * v553);
            _Q18 = v543;
            v557 = _S23;
            _S17 = _S4;
            v1387 = v470;
LABEL_896:
            v591 = *(float *)(v11 + 100);
            if (v591 >= v572)
              v591 = v572;
            if (v572 >= v547)
              _S19 = v591;
            else
              _S19 = *(float *)(v11 + 104);
            if (*(float *)(v11 + 96) >= *(float *)v474.i32)
              v592 = *(float *)v474.i32;
            else
              v592 = *(float *)(v11 + 96);
            v1375 = v592;
            if (!v523)
              goto LABEL_825;
LABEL_822:
            if (_S19 <= v547 && v1327 > v546)
            {
              _Q18 = v539;
              v557 = _S1;
              _S17 = v1318;
              _S19 = v1327;
              v1375 = v549;
              v1387 = v548;
            }
            goto LABEL_825;
          }
          _Q18 = v539;
          v557 = _S1;
          v56 = _S17 > 0.0;
          _S17 = v1318;
          _S19 = v1327;
          v1375 = v1300;
          v1387 = v1305;
          if (v56)
          {
            _Q18 = v543;
            v557 = _S23;
            _S17 = _S4;
            _S19 = _S22;
            v1375 = v537;
            v1387 = v470;
            if (v1327 > v546)
            {
              _Q18 = v539;
              v557 = _S1;
              _S17 = v1318;
              _S19 = v1327;
              v1375 = v1300;
              v1387 = v1305;
              if (v523)
                goto LABEL_822;
              goto LABEL_825;
            }
          }
        }
LABEL_821:
        if (v523)
          goto LABEL_822;
LABEL_825:
        __asm { FCVT            H0, S17 }
        *(_WORD *)(v1353 + 2 * v1366) = _H0;
        __asm { FCVT            H0, S19 }
        *(_WORD *)(v1334 + 2 * v1343) = _H0;
        _Q18.f32[3] = v557;
        *(float16x4_t *)v506 = vcvt_f16_f32(_Q18);
        v562 = v1488;
        v563 = v1489;
        v564 = v1487;
        if (!v1487)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v565 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v565 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v566 = qword_255795648;
            for (n = qword_255795650; v566 != n; v566 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v566)(*(_QWORD *)(v566 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v568 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v568 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v11 = (uint64_t)a3;
          if (!byte_255795670)
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        _Q0 = v1387;
        _Q0.f32[3] = v1375;
        *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
        *(_QWORD *)(v564 + 2 * (v562 * (_DWORD)v479 + v563 * v478)) = _Q0.i64[0];
LABEL_738:
        if (++v479 == v1227)
        {
          if (++v478 != HIDWORD(v1227))
            goto LABEL_736;
LABEL_1619:
          v1010 = v1406;
          if (v1406)
          {
            v1011 = (unint64_t *)&v1406->__shared_owners_;
            do
              v1012 = __ldaxr(v1011);
            while (__stlxr(v1012 - 1, v1011));
            if (!v1012)
            {
              ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
              std::__shared_weak_count::__release_weak(v1010);
            }
          }
          v1013 = v1412;
          if (v1412)
          {
            v1014 = (unint64_t *)&v1412->__shared_owners_;
            do
              v1015 = __ldaxr(v1014);
            while (__stlxr(v1015 - 1, v1014));
            if (!v1015)
            {
              ((void (*)(std::__shared_weak_count *))v1013->__on_zero_shared)(v1013);
              std::__shared_weak_count::__release_weak(v1013);
            }
          }
          v1016 = v1418;
          if (v1418)
          {
            v1017 = (unint64_t *)&v1418->__shared_owners_;
            do
              v1018 = __ldaxr(v1017);
            while (__stlxr(v1018 - 1, v1017));
            if (!v1018)
            {
              ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
              std::__shared_weak_count::__release_weak(v1016);
            }
          }
          v1019 = v1424;
          if (v1424)
          {
            v1020 = (unint64_t *)&v1424->__shared_owners_;
            do
              v1021 = __ldaxr(v1020);
            while (__stlxr(v1021 - 1, v1020));
            if (!v1021)
            {
              ((void (*)(std::__shared_weak_count *))v1019->__on_zero_shared)(v1019);
              std::__shared_weak_count::__release_weak(v1019);
            }
          }
          v1022 = v1429;
          if (v1429)
          {
            v1023 = (unint64_t *)&v1429->__shared_owners_;
            do
              v1024 = __ldaxr(v1023);
            while (__stlxr(v1024 - 1, v1023));
            if (!v1024)
            {
              ((void (*)(std::__shared_weak_count *))v1022->__on_zero_shared)(v1022);
              std::__shared_weak_count::__release_weak(v1022);
            }
          }
          v1025 = v1434;
          if (v1434)
          {
            v1026 = (unint64_t *)&v1434->__shared_owners_;
            do
              v1027 = __ldaxr(v1026);
            while (__stlxr(v1027 - 1, v1026));
            if (!v1027)
            {
              ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
              std::__shared_weak_count::__release_weak(v1025);
            }
          }
          v1028 = v1440;
          if (v1440)
          {
            v1029 = (unint64_t *)&v1440->__shared_owners_;
            do
              v1030 = __ldaxr(v1029);
            while (__stlxr(v1030 - 1, v1029));
            if (!v1030)
            {
              ((void (*)(std::__shared_weak_count *))v1028->__on_zero_shared)(v1028);
              std::__shared_weak_count::__release_weak(v1028);
            }
          }
          v1031 = v1446;
          if (v1446)
          {
            v1032 = (unint64_t *)&v1446->__shared_owners_;
            do
              v1033 = __ldaxr(v1032);
            while (__stlxr(v1033 - 1, v1032));
            if (!v1033)
            {
              ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
              std::__shared_weak_count::__release_weak(v1031);
            }
          }
          v1034 = v1452;
          if (v1452)
          {
            v1035 = (unint64_t *)&v1452->__shared_owners_;
            do
              v1036 = __ldaxr(v1035);
            while (__stlxr(v1036 - 1, v1035));
            if (!v1036)
            {
              ((void (*)(std::__shared_weak_count *))v1034->__on_zero_shared)(v1034);
              std::__shared_weak_count::__release_weak(v1034);
            }
          }
          v1037 = v1457;
          if (v1457)
          {
            v1038 = (unint64_t *)&v1457->__shared_owners_;
            do
              v1039 = __ldaxr(v1038);
            while (__stlxr(v1039 - 1, v1038));
            if (!v1039)
            {
              ((void (*)(std::__shared_weak_count *))v1037->__on_zero_shared)(v1037);
              std::__shared_weak_count::__release_weak(v1037);
            }
          }
          v1040 = v1459;
          if (v1459)
          {
            v1041 = (unint64_t *)&v1459->__shared_owners_;
            do
              v1042 = __ldaxr(v1041);
            while (__stlxr(v1042 - 1, v1041));
            if (!v1042)
            {
              ((void (*)(std::__shared_weak_count *))v1040->__on_zero_shared)(v1040);
              std::__shared_weak_count::__release_weak(v1040);
            }
          }
          v1043 = v1461;
          if (v1461)
          {
            v1044 = (unint64_t *)&v1461->__shared_owners_;
            do
              v1045 = __ldaxr(v1044);
            while (__stlxr(v1045 - 1, v1044));
            if (!v1045)
            {
              ((void (*)(std::__shared_weak_count *))v1043->__on_zero_shared)(v1043);
              std::__shared_weak_count::__release_weak(v1043);
            }
          }
          v1046 = v1468;
          if (v1468)
          {
            v1047 = (unint64_t *)&v1468->__shared_owners_;
            do
              v1048 = __ldaxr(v1047);
            while (__stlxr(v1048 - 1, v1047));
            if (!v1048)
            {
              ((void (*)(std::__shared_weak_count *))v1046->__on_zero_shared)(v1046);
              std::__shared_weak_count::__release_weak(v1046);
            }
          }
          v1049 = v1474;
          if (v1474)
          {
            v1050 = (unint64_t *)&v1474->__shared_owners_;
            do
              v1051 = __ldaxr(v1050);
            while (__stlxr(v1051 - 1, v1050));
            if (!v1051)
            {
              ((void (*)(std::__shared_weak_count *))v1049->__on_zero_shared)(v1049);
              std::__shared_weak_count::__release_weak(v1049);
            }
          }
          v1052 = v1480;
          if (v1480)
          {
            v1053 = (unint64_t *)&v1480->__shared_owners_;
            do
              v1054 = __ldaxr(v1053);
            while (__stlxr(v1054 - 1, v1053));
            if (!v1054)
            {
              ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
              std::__shared_weak_count::__release_weak(v1052);
            }
          }
          v1055 = v1486;
          if (v1486)
          {
            v1056 = (unint64_t *)&v1486->__shared_owners_;
            do
              v1057 = __ldaxr(v1056);
            while (__stlxr(v1057 - 1, v1056));
            if (!v1057)
            {
              ((void (*)(std::__shared_weak_count *))v1055->__on_zero_shared)(v1055);
              std::__shared_weak_count::__release_weak(v1055);
            }
          }
          v1058 = v1491;
          if (v1491)
          {
            v1059 = (unint64_t *)&v1491->__shared_owners_;
            do
              v1060 = __ldaxr(v1059);
            while (__stlxr(v1060 - 1, v1059));
            if (!v1060)
            {
              ((void (*)(std::__shared_weak_count *))v1058->__on_zero_shared)(v1058);
              std::__shared_weak_count::__release_weak(v1058);
            }
          }
          v851 = v1496;
          if (!v1496)
            return;
          v1061 = (unint64_t *)&v1496->__shared_owners_;
          do
            v853 = __ldaxr(v1061);
          while (__stlxr(v853 - 1, v1061));
LABEL_1974:
          if (!v853)
          {
            ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
            std::__shared_weak_count::__release_weak(v851);
          }
          return;
        }
      }
    case 2u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      v1484 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1485);
      sub_2231CDAE0(v9, (uint64_t)&v1478);
      v1472 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1473);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      v1450 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1451);
      sub_2231D494C(a4, (uint64_t)&v1444);
      v1438 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1439);
      v1256 = *(_QWORD *)(a2 + 764);
      v1271 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      v1422 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1423);
      sub_2231CDAE0(a1 + 8, (uint64_t)&v1416);
      v1410 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1411);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v199 = atomic_load((unsigned __int8 *)&qword_2540CC730);
      if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC730))
      {
        qword_2540CC7E0 = 0;
        unk_2540CC7E8 = 0;
        __cxa_guard_release(&qword_2540CC730);
      }
      v200 = atomic_load((unsigned __int8 *)&qword_2540CC740);
      if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC740))
      {
        qword_2540CC738 = 0;
        __cxa_guard_release(&qword_2540CC740);
      }
      if (!HIDWORD(v1256) || !(_DWORD)v1256)
        goto LABEL_1441;
      v201 = 0;
      while (1)
      {
        v202 = 0;
        _Q0.f32[0] = (float)v201;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1278 = _Q0;
        do
        {
          _Q0.i16[0] = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v202 + v1437 * v201));
          __asm { FCVT            S1, H0 }
          v208 = v201 * v1256 + v202;
          if (_S1 > -65504.0)
          {
            _H2 = *(_WORD *)(v1430 + 2 * (v1432 * v201 + v1431 * (_DWORD)v202));
            __asm { FCVT            S3, H2 }
            *(float *)&v210 = _S1;
            v212 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v208);
            v213 = *(_QWORD *)(v1447 + 2 * (v1448 * (v212 % v1271) + v1449 * (v212 / v1271)));
          }
          else
          {
            _S3 = *(float *)(v11 + 104);
            *(float *)&v210 = -65504.0;
            v213 = 0xFE00FE00FE00FE00;
          }
          v1349 = *(float *)&v210;
          v1340 = _S3;
          __asm { FCVT            S11, H0 }
          _Q0.i64[0] = 0x7E007E007E007E00;
          v1382 = _Q0;
          _H8 = 32256;
          _H15 = 32256;
          if (_S11 > -65504.0)
          {
            v217 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v208);
            _Q0.i32[0] = *(_DWORD *)v217;
            v1382 = _Q0;
            _H15 = *(_WORD *)(v217 + 4);
            _H8 = *(_WORD *)(v217 + 6);
          }
          v218 = v1498 * (_DWORD)v202 + v1499 * v201;
          v219 = v1497;
          v220 = v1493 * (_DWORD)v202 + v1494 * v201;
          v221 = v1492;
          _H12 = *(_WORD *)(v1497 + 2 * v218);
          v1360 = *(_WORD *)(v1492 + 2 * v220);
          v1372 = *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v202 + v1483 * v201));
          v223 = v1469 + 2 * (v1470 * (_DWORD)v202 + v1471 * v201);
          v7.i32[0] = *(_DWORD *)v223;
          _H10 = *(_WORD *)(v223 + 4);
          v1330 = (_QWORD *)v223;
          _H9 = *(_WORD *)(v223 + 6);
          if (*(_BYTE *)(a1 + 776))
          {
            v1316 = v1492;
            v1324 = v1493 * (_DWORD)v202 + v1494 * v201;
            v226 = v1497;
            v227 = v1498 * (_DWORD)v202 + v1499 * v201;
            v228 = v213;
            *(_QWORD *)(v1419 + 2 * (v1420 * (_DWORD)v202 + v1421 * v201)) = v213;
            v229 = v1408;
            v230 = v1409;
            v231 = v1407;
            if (!v1407)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v232 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v232 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v234 = qword_255795648;
                for (ii = qword_255795650; v234 != ii; v234 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v234)(*(_QWORD *)(v234 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v235 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              v11 = (uint64_t)a3;
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v236 = v231 + 2 * (v229 * (_DWORD)v202 + v230 * v201);
            _Q0 = v1382;
            *(_DWORD *)v236 = v1382.i32[0];
            *(_WORD *)(v236 + 4) = _H15;
            *(_WORD *)(v236 + 6) = _H8;
            v213 = v228;
            v218 = v227;
            v219 = v226;
            v220 = v1324;
            v221 = v1316;
          }
          v237 = 0;
          v238 = 0;
          __asm
          {
            FCVT            S14, H12
            FCVT            S2, H12
          }
          if (_S2 > 0.0 && _S2 > -65504.0)
          {
            v237 = 0;
            v238 = 0;
            v241 = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v11 + 32), vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v11, (float)v202), v1278, *(float32x4_t *)(v11 + 16))), *(float32x4_t *)(v11 + 48), 1.0 / _S14);
            _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v241, 2);
            _Q1 = vdivq_f32(v241, _Q0);
            if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
            {
              v237 = 0;
              v238 = 0;
              if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
              {
                _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                __asm { FCVT            S1, H1 }
                v237 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                v246 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                if (_Q1.f32[0] < 2.0)
                  v246 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                v238 = v246 < _Q1.f32[0];
                if (!v237)
                  v238 = 0;
              }
            }
          }
          if (_S11 > -65504.0 || v238)
          {
            _H0 = v1360;
            __asm { FCVT            S12, H0 }
            _Q0.i64[1] = v1382.i64[1];
            v249 = vcvtq_f32_f16(*(float16x4_t *)v1382.f32);
            __asm
            {
              FCVT            S17, H15
              FCVT            S15, H8
            }
            v251 = v249;
            v251.i32[2] = _Q17;
            v252 = vcvtq_f32_f16(v7);
            __asm
            {
              FCVT            S19, H10
              FCVT            S0, H9
            }
            v253 = v252;
            v253.i32[2] = _D19.i32[0];
            v254 = *(float *)(v11 + 112);
            v255 = *(float *)(v11 + 104);
            v256 = v1349;
            if (v1349 <= 0.0 || v1340 <= v255)
            {
              if (v238)
              {
                if (v1349 <= 0.0)
                {
                  _S12 = *(float *)(v11 + 104);
                  if (!v237)
                    goto LABEL_298;
                  goto LABEL_360;
                }
                goto LABEL_358;
              }
            }
            else
            {
              if (_S2 > 0.0 && v255 < _S12)
              {
                if (v1340 <= 0.0)
                {
                  v259 = 0.01;
                  _H3 = v1360;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                    goto LABEL_351;
                }
                else if (v1340 >= 1.0)
                {
                  v259 = 0.0001;
                  _H3 = v1360;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                    goto LABEL_351;
                }
                else
                {
                  v257 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                  v258 = 0.01;
                  if (v257 <= 0.01)
                    v258 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                  if (v257 >= 0.0001)
                    v259 = v258;
                  else
                    v259 = 0.0001;
                  _H3 = v1360;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                  {
LABEL_351:
                    v262 = (float)(v1349 - _S14) * (float)(v1349 - _S14);
                    v263 = 0.01;
                    goto LABEL_379;
                  }
                }
                if (_S3 >= 1.0)
                {
                  v262 = (float)(v1349 - _S14) * (float)(v1349 - _S14);
                  v263 = 0.0001;
LABEL_379:
                  v267 = v263;
                  if ((float)(v262 / (float)(v259 + v263)) < 1.1)
                    goto LABEL_380;
LABEL_371:
                  if (v1349 <= _S14 || v238)
                  {
                    if (v237 && v1340 > v254)
                    {
                      _S12 = v1340;
                      _S14 = v1349;
                      v1372 = v213;
                      _Q0.i32[0] = _S15;
                      v253 = v251;
                    }
                    else if (v237 || v1340 > v254)
                    {
                      v273 = *(float *)(v11 + 108);
                      v274 = (float)((float)((float)(v273 * -0.1) + 0.01) / 0.09) + 1.0;
                      v275 = (float)-v274 / v273;
                      v276 = (float)(v273 * _S12) + v274;
                      if (v275 <= _S12)
                        _S12 = v276;
                      else
                        _S12 = 0.0;
                    }
                  }
                  goto LABEL_425;
                }
                v265 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                v266 = 0.01;
                if (v265 <= 0.01)
                  v266 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                if (v265 >= 0.0001)
                  v267 = v266;
                else
                  v267 = 0.0001;
                if ((float)((float)((float)(v1349 - _S14) * (float)(v1349 - _S14)) / (float)(v267 + v259)) >= 1.1)
                  goto LABEL_371;
LABEL_380:
                v1260 = v253;
                v1317 = _D19;
                if (v1340 <= 0.0)
                {
                  *(float *)&v272 = 0.01;
                }
                else
                {
                  if (v1340 < 1.0)
                  {
                    v269 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                    v270 = 0.01;
                    if (v269 <= 0.01)
                      v270 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                    if (v269 >= 0.0001)
                      v271 = v270;
                    else
                      v271 = 0.0001;
LABEL_395:
                    v1265 = *(float32x2_t *)v252.f32;
                    v1325 = *(float32x2_t *)v249.f32;
                    v1361 = _Q17;
                    v1383 = v251;
                    v277 = (float)(v267 * v271) / (float)(v267 + v271);
                    _S12 = 1.0;
                    if (v277 > 0.0001)
                    {
                      _S12 = 0.0;
                      if (v277 < 0.01)
                      {
                        v278 = 1.0;
                        v279 = (float)((float)(sqrtf(v277) + -0.01) / -0.09) + 1.0;
                        if (v279 <= 1.0)
                          v278 = v279;
                        if (v279 >= 0.0)
                          _S12 = v278;
                        else
                          _S12 = 0.0;
                      }
                    }
                    v1401.i64[0] = v1372;
                    v1395.i64[0] = v213;
                    sub_2237EE37C((unint64_t *)&v1401, (unsigned __int16 *)&v1395, *(_BYTE *)(v11 + 118), (__int16 *)&v1404);
                    _Q0.i64[1] = *((_QWORD *)&v1361 + 1);
                    v251 = v1383;
                    v280 = v1383;
                    if (vmla_f32(vmla_lane_f32(vmul_f32(v1265, v1325), (float32x2_t)vdup_lane_s32((int32x2_t)v1325, 1), v1265, 1), *(float32x2_t *)&v1361, v1317).f32[0] > 0.70711)
                    {
                      if (v1340 <= 0.0)
                      {
                        v283 = 0.01;
                        if (_S12 <= 0.0)
                          goto LABEL_411;
                      }
                      else if (v1340 >= 1.0)
                      {
                        v283 = 0.0001;
                        if (_S12 <= 0.0)
                          goto LABEL_411;
                      }
                      else
                      {
                        v281 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                        v282 = 0.01;
                        if (v281 <= 0.01)
                          v282 = (float)((float)(v1340 * -0.09) + 0.1) * (float)((float)(v1340 * -0.09) + 0.1);
                        if (v281 >= 0.0001)
                          v283 = v282;
                        else
                          v283 = 0.0001;
                        if (_S12 <= 0.0)
                        {
LABEL_411:
                          *(float *)&v284 = 0.01;
                          goto LABEL_422;
                        }
                      }
                      if (_S12 >= 1.0)
                      {
                        *(float *)&v284 = 0.0001;
LABEL_422:
                        v287 = *(float *)&v284;
                      }
                      else
                      {
                        v285 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                        v286 = 0.01;
                        if (v285 <= 0.01)
                          v286 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                        if (v285 >= 0.0001)
                          v287 = v286;
                        else
                          v287 = 0.0001;
                      }
                      v280.f32[0] = v283 + v287;
                      _Q0 = vaddq_f32(vmulq_n_f32(v1260, v283), vmulq_n_f32(v1383, v287));
                      v280 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v280.f32, 0));
                    }
                    v256 = v1349;
                    _S14 = (float)((float)(v1349 * v267) + (float)(v271 * _S14)) / (float)(v267 + v271);
                    v1372 = v1404.i64[0];
                    v255 = *(float *)(v11 + 104);
                    _Q0.i32[0] = 1.0;
                    v253 = v280;
LABEL_425:
                    v288 = *(float *)(v11 + 100);
                    if (v288 >= _S12)
                      v288 = _S12;
                    if (_S12 >= v255)
                      _S12 = v288;
                    else
                      _S12 = v255;
                    if (!v237)
                    {
LABEL_298:
                      v203 = v1330;
                      v204 = v1372;
                      goto LABEL_299;
                    }
LABEL_360:
                    if (_S12 > v255)
                      goto LABEL_298;
                    v203 = v1330;
                    v204 = v1372;
                    if (v1340 > v254)
                    {
                      _S12 = v1340;
                      _S14 = v256;
                      v204 = v213;
                      _Q0.i32[0] = _S15;
                      v253 = v251;
                    }
LABEL_299:
                    __asm { FCVT            H1, S14 }
                    *(_WORD *)(v219 + 2 * v218) = _H1;
                    __asm { FCVT            H1, S12 }
                    *(_WORD *)(v221 + 2 * v220) = _H1;
                    v253.i32[3] = _Q0.i32[0];
                    *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(v253);
                    *v203 = _Q0.i64[0];
                    *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v202 + v1483 * v201)) = v204;
                    goto LABEL_300;
                  }
                  *(float *)&v272 = 0.0001;
                }
                v271 = *(float *)&v272;
                goto LABEL_395;
              }
              if (_S2 <= 0.0 || v1340 > v254)
              {
LABEL_358:
                _S12 = v1340;
                _S14 = v1349;
                v1372 = v213;
                _Q0.i32[0] = _S15;
                v253 = v251;
              }
            }
            if (!v237)
              goto LABEL_298;
            goto LABEL_360;
          }
LABEL_300:
          ++v202;
        }
        while (v202 != v1256);
        if (++v201 == HIDWORD(v1256))
        {
LABEL_1441:
          v906 = v1406;
          if (v1406)
          {
            v907 = (unint64_t *)&v1406->__shared_owners_;
            do
              v908 = __ldaxr(v907);
            while (__stlxr(v908 - 1, v907));
            if (!v908)
            {
              ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
              std::__shared_weak_count::__release_weak(v906);
            }
          }
          v909 = v1412;
          if (v1412)
          {
            v910 = (unint64_t *)&v1412->__shared_owners_;
            do
              v911 = __ldaxr(v910);
            while (__stlxr(v911 - 1, v910));
            if (!v911)
            {
              ((void (*)(std::__shared_weak_count *))v909->__on_zero_shared)(v909);
              std::__shared_weak_count::__release_weak(v909);
            }
          }
          v912 = v1418;
          if (v1418)
          {
            v913 = (unint64_t *)&v1418->__shared_owners_;
            do
              v914 = __ldaxr(v913);
            while (__stlxr(v914 - 1, v913));
            if (!v914)
            {
              ((void (*)(std::__shared_weak_count *))v912->__on_zero_shared)(v912);
              std::__shared_weak_count::__release_weak(v912);
            }
          }
          v915 = v1424;
          if (v1424)
          {
            v916 = (unint64_t *)&v1424->__shared_owners_;
            do
              v917 = __ldaxr(v916);
            while (__stlxr(v917 - 1, v916));
            if (!v917)
            {
              ((void (*)(std::__shared_weak_count *))v915->__on_zero_shared)(v915);
              std::__shared_weak_count::__release_weak(v915);
            }
          }
          v918 = v1429;
          if (v1429)
          {
            v919 = (unint64_t *)&v1429->__shared_owners_;
            do
              v920 = __ldaxr(v919);
            while (__stlxr(v920 - 1, v919));
            if (!v920)
            {
              ((void (*)(std::__shared_weak_count *))v918->__on_zero_shared)(v918);
              std::__shared_weak_count::__release_weak(v918);
            }
          }
          v921 = v1434;
          if (v1434)
          {
            v922 = (unint64_t *)&v1434->__shared_owners_;
            do
              v923 = __ldaxr(v922);
            while (__stlxr(v923 - 1, v922));
            if (!v923)
            {
              ((void (*)(std::__shared_weak_count *))v921->__on_zero_shared)(v921);
              std::__shared_weak_count::__release_weak(v921);
            }
          }
          v924 = v1440;
          if (v1440)
          {
            v925 = (unint64_t *)&v1440->__shared_owners_;
            do
              v926 = __ldaxr(v925);
            while (__stlxr(v926 - 1, v925));
            if (!v926)
            {
              ((void (*)(std::__shared_weak_count *))v924->__on_zero_shared)(v924);
              std::__shared_weak_count::__release_weak(v924);
            }
          }
          v927 = v1446;
          if (v1446)
          {
            v928 = (unint64_t *)&v1446->__shared_owners_;
            do
              v929 = __ldaxr(v928);
            while (__stlxr(v929 - 1, v928));
            if (!v929)
            {
              ((void (*)(std::__shared_weak_count *))v927->__on_zero_shared)(v927);
              std::__shared_weak_count::__release_weak(v927);
            }
          }
          v930 = v1452;
          if (v1452)
          {
            v931 = (unint64_t *)&v1452->__shared_owners_;
            do
              v932 = __ldaxr(v931);
            while (__stlxr(v932 - 1, v931));
            if (!v932)
            {
              ((void (*)(std::__shared_weak_count *))v930->__on_zero_shared)(v930);
              std::__shared_weak_count::__release_weak(v930);
            }
          }
          v933 = v1457;
          if (v1457)
          {
            v934 = (unint64_t *)&v1457->__shared_owners_;
            do
              v935 = __ldaxr(v934);
            while (__stlxr(v935 - 1, v934));
            if (!v935)
            {
              ((void (*)(std::__shared_weak_count *))v933->__on_zero_shared)(v933);
              std::__shared_weak_count::__release_weak(v933);
            }
          }
          v936 = v1459;
          if (v1459)
          {
            v937 = (unint64_t *)&v1459->__shared_owners_;
            do
              v938 = __ldaxr(v937);
            while (__stlxr(v938 - 1, v937));
            if (!v938)
            {
              ((void (*)(std::__shared_weak_count *))v936->__on_zero_shared)(v936);
              std::__shared_weak_count::__release_weak(v936);
            }
          }
          v939 = v1461;
          if (v1461)
          {
            v940 = (unint64_t *)&v1461->__shared_owners_;
            do
              v941 = __ldaxr(v940);
            while (__stlxr(v941 - 1, v940));
            if (!v941)
            {
              ((void (*)(std::__shared_weak_count *))v939->__on_zero_shared)(v939);
              std::__shared_weak_count::__release_weak(v939);
            }
          }
          v942 = v1468;
          if (v1468)
          {
            v943 = (unint64_t *)&v1468->__shared_owners_;
            do
              v944 = __ldaxr(v943);
            while (__stlxr(v944 - 1, v943));
            if (!v944)
            {
              ((void (*)(std::__shared_weak_count *))v942->__on_zero_shared)(v942);
              std::__shared_weak_count::__release_weak(v942);
            }
          }
          v945 = v1474;
          if (v1474)
          {
            v946 = (unint64_t *)&v1474->__shared_owners_;
            do
              v947 = __ldaxr(v946);
            while (__stlxr(v947 - 1, v946));
            if (!v947)
            {
              ((void (*)(std::__shared_weak_count *))v945->__on_zero_shared)(v945);
              std::__shared_weak_count::__release_weak(v945);
            }
          }
          v948 = v1480;
          if (v1480)
          {
            v949 = (unint64_t *)&v1480->__shared_owners_;
            do
              v950 = __ldaxr(v949);
            while (__stlxr(v950 - 1, v949));
            if (!v950)
            {
              ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
              std::__shared_weak_count::__release_weak(v948);
            }
          }
          v951 = v1486;
          if (v1486)
          {
            v952 = (unint64_t *)&v1486->__shared_owners_;
            do
              v953 = __ldaxr(v952);
            while (__stlxr(v953 - 1, v952));
            if (!v953)
            {
              ((void (*)(std::__shared_weak_count *))v951->__on_zero_shared)(v951);
              std::__shared_weak_count::__release_weak(v951);
            }
          }
          v954 = v1491;
          if (v1491)
          {
            v955 = (unint64_t *)&v1491->__shared_owners_;
            do
              v956 = __ldaxr(v955);
            while (__stlxr(v956 - 1, v955));
            if (!v956)
            {
              ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
              std::__shared_weak_count::__release_weak(v954);
            }
          }
          v851 = v1496;
          if (!v1496)
            return;
          v957 = (unint64_t *)&v1496->__shared_owners_;
          do
            v853 = __ldaxr(v957);
          while (__stlxr(v853 - 1, v957));
          goto LABEL_1974;
        }
      }
    case 3u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      sub_2231CD8A8(v9, (uint64_t)&v1484);
      sub_2231CDAE0(v9, (uint64_t)&v1478);
      v1472 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1473);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      sub_2231D48A8(a4, (uint64_t)&v1450);
      sub_2231D494C(a4, (uint64_t)&v1444);
      v1438 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1439);
      v1218 = *(_QWORD *)(a2 + 764);
      v1244 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      sub_2231CD8A8(a1 + 8, (uint64_t)&v1422);
      sub_2231CDAE0(a1 + 8, (uint64_t)&v1416);
      v1410 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1411);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v1232 = *(float *)(v11 + 64);
      v1229 = *(float32x2_t *)(v11 + 68);
      v1226 = *(float *)(v11 + 76);
      _Q0.i64[0] = *(_QWORD *)(v11 + 80);
      v1241 = *(float32x2_t *)_Q0.f32;
      v1235 = *(float *)(v11 + 92);
      v1238 = *(float *)(v11 + 88);
      v295 = atomic_load((unsigned __int8 *)&qword_2540CC760);
      if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC760))
      {
        qword_2540CC800 = 0;
        unk_2540CC808 = 0;
        __cxa_guard_release(&qword_2540CC760);
      }
      v296 = atomic_load((unsigned __int8 *)&qword_2540CC770);
      if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC770))
      {
        qword_2540CC768 = 0;
        __cxa_guard_release(&qword_2540CC770);
      }
      if (!HIDWORD(v1218) || !(_DWORD)v1218)
        goto LABEL_1708;
      v297 = 0;
      while (1)
      {
        v298 = 0;
        _Q0.f32[0] = (float)v297;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1247 = _Q0;
        do
        {
          _H9 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v298 + v1437 * v297));
          __asm { FCVT            S0, H9 }
          v301 = v297 * v1218 + v298;
          if (_S0 > -65504.0)
          {
            _H1 = *(_WORD *)(v1430 + 2 * (v1432 * v297 + v1431 * (_DWORD)v298));
            v304 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v301);
            v1320 = v304 / v1244;
            v1313 = v304 % v1244;
            __asm { FCVT            S10, H1 }
            v1341 = _S0;
          }
          else
          {
            _S10 = *(float *)(v11 + 104);
            v1341 = -65504.0;
          }
          v1308 = v1498 * (_DWORD)v298 + v1499 * v297;
          v1304 = v1497;
          _H11 = *(_WORD *)(v1497 + 2 * v1308);
          v1299 = v1493 * (_DWORD)v298 + v1494 * v297;
          v1291 = v1492;
          v1362 = *(_WORD *)(v1492 + 2 * v1299);
          if (_S0 > -65504.0)
          {
            v311 = v1454;
            v312 = v1455;
            v313 = v1453;
            if (!v1453)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v314 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v316 = qword_255795648;
                for (jj = qword_255795650; v316 != jj; v316 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v316)(*(_QWORD *)(v316 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v317 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v317 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v318 = v313 + 2 * (v311 * v1313 + v312 * v1320);
            _H8 = *(_WORD *)(v318 + 4);
            _H15 = *(_WORD *)(v318 + 6);
            v291.i32[0] = *(_DWORD *)v318;
            _Q0 = vcvtq_f32_f16(*(float16x4_t *)v291.f32);
            _Q1.i32[1] = v1241.i32[1];
            *(float32x2_t *)v290.f32 = vmul_f32(v1241, *(float32x2_t *)_Q0.f32);
            __asm
            {
              FCVT            S0, H8
              FCVT            S1, H15
            }
            _Q1.f32[0] = v1235 * _Q1.f32[0];
            v290.f32[2] = v1238 * _Q0.f32[0];
            v1257 = _Q1;
            v1261 = v290;
            v1350 = *(_DWORD *)v318;
            v307 = HIWORD(*(_DWORD *)v318);
            __asm { FCVT            S12, H9 }
            v1285 = _S10;
            if (_S12 <= -65504.0)
            {
LABEL_450:
              v310 = 0xFE00FE00FE00FE00;
              goto LABEL_462;
            }
          }
          else
          {
            v1350 = qword_2540CC768;
            _H8 = WORD2(qword_2540CC768);
            v307 = WORD1(qword_2540CC768);
            _H15 = HIWORD(qword_2540CC768);
            _Q1.i64[1] = unk_2540CC808;
            _Q0.i32[0] = dword_2540CC80C;
            v1257 = _Q0;
            v1261 = *(float32x4_t *)&qword_2540CC800;
            __asm { FCVT            S12, H9 }
            v1285 = _S10;
            if (_S12 <= -65504.0)
              goto LABEL_450;
          }
          v310 = *(_QWORD *)(v1447 + 2 * (v1448 * v1313 + v1449 * v1320));
LABEL_462:
          v1373 = v310;
          _Q0.i64[0] = 0x7E007E007E007E00;
          v1384 = _Q0;
          _H10 = 32256;
          _H14 = 32256;
          if (_S12 > -65504.0)
          {
            v321 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v301);
            _Q0.i32[0] = *(_DWORD *)v321;
            v1384 = _Q0;
            _H14 = *(_WORD *)(v321 + 4);
            _H10 = *(_WORD *)(v321 + 6);
          }
          v322 = (__int16 *)(v1487 + 2 * (v1488 * (_DWORD)v298 + v1489 * v297));
          _H9 = *v322;
          v324 = *(_DWORD *)(v322 + 1);
          v1331 = v322[3];
          v325 = *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v298 + v1483 * v297));
          v326 = v1469 + 2 * (v1470 * (_DWORD)v298 + v1471 * v297);
          _Q0.i32[0] = *(_DWORD *)v326;
          v1279 = *(float16x4_t *)_Q0.f32;
          v1272 = *(_WORD *)(v326 + 4);
          v1266 = *(_WORD *)(v326 + 6);
          if (*(_BYTE *)(a1 + 776))
          {
            v327 = v1426;
            v328 = v1427;
            v329 = v1425;
            if (!v1425)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v330 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v332 = qword_255795648;
                for (kk = qword_255795650; v332 != kk; v332 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v332)(*(_QWORD *)(v332 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v333 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v334 = (_WORD *)(v329 + 2 * (v327 * (_DWORD)v298 + v328 * v297));
            *v334 = v1350;
            v334[1] = v307;
            v334[2] = _H8;
            v334[3] = _H15;
            *(_QWORD *)(v1419 + 2 * (v1420 * (_DWORD)v298 + v1421 * v297)) = v1373;
            v335 = v1408;
            v336 = v1409;
            v337 = v1407;
            if (!v1407)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v338 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v338 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v340 = qword_255795648;
                for (mm = qword_255795650; v340 != mm; v340 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v340)(*(_QWORD *)(v340 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v341 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v341 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v342 = v337 + 2 * (v335 * (_DWORD)v298 + v336 * v297);
            _Q0 = v1384;
            *(_DWORD *)v342 = v1384.i32[0];
            *(_WORD *)(v342 + 4) = _H14;
            *(_WORD *)(v342 + 6) = _H10;
          }
          v343 = 0;
          v344 = 0;
          __asm
          {
            FCVT            S8, H11
            FCVT            S2, H11
          }
          if (_S2 > 0.0 && _S2 > -65504.0)
          {
            v343 = 0;
            v344 = 0;
            v291 = a3[1];
            v290.i32[3] = v1247.i32[3];
            v347 = vmlaq_n_f32(vaddq_f32(a3[2], vmlaq_f32(vmulq_n_f32(*a3, (float)v298), v1247, v291)), a3[3], 1.0 / _S8);
            _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v347, 2);
            _Q1 = vdivq_f32(v347, _Q0);
            if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
            {
              v343 = 0;
              v344 = 0;
              if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
              {
                _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                __asm { FCVT            S1, H1 }
                v344 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                v351 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                if (_Q1.f32[0] < 2.0)
                  v351 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                v343 = v351 < _Q1.f32[0];
                if (!v344)
                  v343 = 0;
              }
            }
          }
          if (_S12 > -65504.0 || v343)
          {
            _Q0.i16[0] = v1362;
            __asm
            {
              FCVT            S15, H0
              FCVT            S0, H9
            }
            v291.f32[0] = v1232 * _Q0.f32[0];
            _Q0.i32[0] = v324;
            _Q1.i32[1] = v1229.i32[1];
            *(float32x2_t *)_Q0.f32 = vmul_f32(v1229, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.f32));
            _Q1.i16[0] = v1331;
            __asm { FCVT            S1, H1 }
            v291.i32[1] = _Q0.i32[0];
            _Q1.f32[0] = v1226 * _Q1.f32[0];
            v1351 = _Q1;
            v291.i32[2] = _Q0.i32[1];
            v1332 = v291;
            v353 = vcvtq_f32_f16(*(float16x4_t *)v1384.f32);
            __asm
            {
              FCVT            S18, H14
              FCVT            S11, H10
            }
            v355 = v353;
            v355.i32[2] = _D18.i32[0];
            v356 = vcvtq_f32_f16(v1279);
            _Q0.i16[0] = v1272;
            __asm { FCVT            S20, H0 }
            _Q0.i16[0] = v1266;
            __asm { FCVT            S0, H0 }
            v357 = v356;
            v357.i32[2] = _D20.i32[0];
            v358 = a3[7].f32[0];
            v359 = a3[6].f32[2];
            v360 = v1341;
            if (v1341 <= 0.0 || v1285 <= v359)
            {
              if (v343)
              {
                if (v1341 <= 0.0)
                {
                  _S15 = a3[6].f32[2];
                  if (!v344)
                    goto LABEL_529;
                  goto LABEL_526;
                }
                goto LABEL_524;
              }
            }
            else
            {
              if (_S2 > 0.0 && v359 < _S15)
              {
                if (v1285 <= 0.0)
                {
                  *(float *)&v377 = 0.01;
                }
                else
                {
                  if (v1285 < 1.0)
                  {
                    v361 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                    v362 = 0.01;
                    if (v361 <= 0.01)
                      v362 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                    if (v361 < 0.0001)
                      v362 = 0.0001;
                    v363 = a3[6].f32[3];
                    _H4 = v1362;
                    __asm { FCVT            S4, H4 }
                    if (_S4 <= 0.0)
                    {
LABEL_517:
                      v366 = (float)(v1341 - _S8) * (float)(v1341 - _S8);
                      v367 = 0.01;
                      goto LABEL_555;
                    }
LABEL_541:
                    if (_S4 < 1.0)
                    {
                      v379 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                      v380 = 0.01;
                      if (v379 <= 0.01)
                        v380 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                      if (v379 >= 0.0001)
                        v381 = v380;
                      else
                        v381 = 0.0001;
                      if ((float)((float)((float)(v1341 - _S8) * (float)(v1341 - _S8)) / (float)(v381 + v362)) >= 1.1)
                        goto LABEL_548;
LABEL_556:
                      v1273 = v357;
                      v1280 = _D20;
                      v1222 = *(float32x2_t *)v353.f32;
                      v1224 = _D18;
                      v1220 = *(float32x2_t *)v356.f32;
                      if (v1285 <= 0.0)
                      {
                        *(float *)&v386 = 0.01;
                      }
                      else
                      {
                        if (v1285 < 1.0)
                        {
                          v383 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                          v384 = 0.01;
                          if (v383 <= 0.01)
                            v384 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                          if (v383 >= 0.0001)
                            v385 = v384;
                          else
                            v385 = 0.0001;
LABEL_573:
                          v1385 = v355;
                          v391 = (float)(v381 * v385) / (float)(v381 + v385);
                          _S15 = 1.0;
                          if (v391 > 0.0001)
                          {
                            _S15 = 0.0;
                            if (v391 < 0.01)
                            {
                              v392 = 1.0;
                              v393 = (float)((float)(sqrtf(v391) + -0.01) / -0.09) + 1.0;
                              if (v393 <= 1.0)
                                v392 = v393;
                              if (v393 >= 0.0)
                                _S15 = v392;
                              else
                                _S15 = 0.0;
                            }
                          }
                          v1401.i64[0] = v325;
                          v1395.i64[0] = v1373;
                          sub_2237EE37C((unint64_t *)&v1401, (unsigned __int16 *)&v1395, a3[7].u8[6], (__int16 *)&v1404);
                          v355 = v1385;
                          v394 = v1385;
                          if (vmla_f32(vmla_lane_f32(vmul_f32(v1220, v1222), (float32x2_t)vdup_lane_s32((int32x2_t)v1222, 1), v1220, 1), v1224, v1280).f32[0] > 0.70711)
                          {
                            if (v1285 <= 0.0)
                            {
                              v397 = 0.01;
                              if (_S15 <= 0.0)
                                goto LABEL_589;
                            }
                            else if (v1285 >= 1.0)
                            {
                              v397 = 0.0001;
                              if (_S15 <= 0.0)
                                goto LABEL_589;
                            }
                            else
                            {
                              v395 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                              v396 = 0.01;
                              if (v395 <= 0.01)
                                v396 = (float)((float)(v1285 * -0.09) + 0.1) * (float)((float)(v1285 * -0.09) + 0.1);
                              if (v395 >= 0.0001)
                                v397 = v396;
                              else
                                v397 = 0.0001;
                              if (_S15 <= 0.0)
                              {
LABEL_589:
                                *(float *)&v398 = 0.01;
                                goto LABEL_600;
                              }
                            }
                            if (_S15 >= 1.0)
                            {
                              *(float *)&v398 = 0.0001;
LABEL_600:
                              v401 = *(float *)&v398;
                            }
                            else
                            {
                              v399 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                              v400 = 0.01;
                              if (v399 <= 0.01)
                                v400 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                              if (v399 >= 0.0001)
                                v401 = v400;
                              else
                                v401 = 0.0001;
                            }
                            v394.f32[0] = v397 + v401;
                            v290 = v1273;
                            v394 = vdivq_f32(vaddq_f32(vmulq_n_f32(v1273, v397), vmulq_n_f32(v1385, v401)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v394.f32, 0));
                          }
                          v360 = v1341;
                          _S8 = (float)((float)(v1341 * v381) + (float)(v385 * _S8)) / (float)(v381 + v385);
                          v291 = v1257;
                          v290.f32[0] = v1257.f32[0] + v1351.f32[0];
                          v1332 = vdivq_f32(vaddq_f32(vmulq_n_f32(v1261, v1257.f32[0]), vmulq_n_f32(v1332, v1351.f32[0])), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v290.f32, 0));
                          v325 = v1404.i64[0];
                          v382 = a3;
                          v359 = a3[6].f32[2];
                          _Q0.i32[0] = 1.0;
                          v291.f32[0] = v1257.f32[0] + v1351.f32[0];
                          v357 = v394;
LABEL_603:
                          v402 = v382[6].f32[1];
                          if (v402 >= _S15)
                            v402 = _S15;
                          if (_S15 >= v359)
                            _S15 = v402;
                          else
                            _S15 = v359;
                          if (v382[6].f32[0] < v291.f32[0])
                            v291.i32[0] = v382[6].i32[0];
                          v1351 = v291;
                          if (!v344)
                          {
LABEL_529:
                            __asm { FCVT            H1, S8 }
                            *(_WORD *)(v1304 + 2 * v1308) = _H1;
                            __asm { FCVT            H1, S15 }
                            *(_WORD *)(v1291 + 2 * v1299) = _H1;
                            v357.i32[3] = _Q0.i32[0];
                            *(float16x4_t *)v326 = vcvt_f16_f32(v357);
                            v370 = v1488;
                            v371 = v1489;
                            v372 = v1487;
                            if (!v1487)
                            {
                              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                              v373 = atomic_load((unsigned __int8 *)&qword_255795680);
                              if ((v373 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                              {
                                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                __cxa_guard_release(&qword_255795680);
                              }
                              if (!byte_255795670 || byte_255795678)
                              {
                                v374 = qword_255795648;
                                for (nn = qword_255795650; v374 != nn; v374 += 16)
                                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v374)(*(_QWORD *)(v374 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                              }
                              v376 = atomic_load((unsigned __int8 *)&qword_255795680);
                              if ((v376 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                              {
                                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                __cxa_guard_release(&qword_255795680);
                              }
                              if (!byte_255795670)
                                abort();
                              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                            }
                            _Q0 = v1332;
                            _Q1.i64[1] = v1351.i64[1];
                            _Q0.i32[3] = v1351.i32[0];
                            *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
                            *(_QWORD *)(v372 + 2 * (v370 * (_DWORD)v298 + v371 * v297)) = _Q0.i64[0];
                            *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v298 + v1483 * v297)) = v325;
                            goto LABEL_444;
                          }
LABEL_526:
                          if (_S15 <= v359 && v1285 > v358)
                          {
                            v325 = v1373;
                            v1332 = v1261;
                            v1351 = v1257;
                            _S15 = v1285;
                            _S8 = v360;
                            _Q0.i32[0] = _S11;
                            v357 = v355;
                          }
                          goto LABEL_529;
                        }
                        *(float *)&v386 = 0.0001;
                      }
                      v385 = *(float *)&v386;
                      goto LABEL_573;
                    }
                    v366 = (float)(v1341 - _S8) * (float)(v1341 - _S8);
                    v367 = 0.0001;
LABEL_555:
                    v381 = v367;
                    if ((float)(v366 / (float)(v362 + v367)) < 1.1)
                      goto LABEL_556;
LABEL_548:
                    if (v1341 > _S8 && !v343)
                    {
LABEL_550:
                      v382 = a3;
                      v291 = v1351;
                      goto LABEL_603;
                    }
                    if (v344 && v1285 > v358)
                    {
                      v325 = v1373;
                      v1332 = v1261;
                      v291.i32[0] = v1257.i32[0];
                      _S15 = v1285;
                      _S8 = v1341;
                      _Q0.i32[0] = _S11;
                      v357 = v355;
                    }
                    else
                    {
                      if (!v344 && v1285 <= v358)
                        goto LABEL_550;
                      v387 = v363 * v363;
                      v388 = (float)((float)((float)(v363 * -0.1) + 0.01) / 0.09) + 1.0;
                      v389 = (float)-v388 / v363;
                      v390 = (float)(v363 * _S15) + v388;
                      if (v389 <= _S15)
                        _S15 = v390;
                      else
                        _S15 = 0.0;
                      v291 = v1351;
                      v291.f32[0] = v1351.f32[0] / v387;
                    }
                    v382 = a3;
                    goto LABEL_603;
                  }
                  *(float *)&v377 = 0.0001;
                }
                v362 = *(float *)&v377;
                v363 = a3[6].f32[3];
                _H4 = v1362;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_517;
                goto LABEL_541;
              }
              if (_S2 <= 0.0 || v1285 > v358)
              {
LABEL_524:
                v325 = v1373;
                v1332 = v1261;
                v1351 = v1257;
                _S15 = v1285;
                _S8 = v1341;
                _Q0.i32[0] = _S11;
                v357 = v355;
              }
            }
            if (!v344)
              goto LABEL_529;
            goto LABEL_526;
          }
LABEL_444:
          ++v298;
          v11 = (uint64_t)a3;
        }
        while (v298 != v1218);
        if (++v297 == HIDWORD(v1218))
        {
LABEL_1708:
          v1062 = v1406;
          if (v1406)
          {
            v1063 = (unint64_t *)&v1406->__shared_owners_;
            do
              v1064 = __ldaxr(v1063);
            while (__stlxr(v1064 - 1, v1063));
            if (!v1064)
            {
              ((void (*)(std::__shared_weak_count *))v1062->__on_zero_shared)(v1062);
              std::__shared_weak_count::__release_weak(v1062);
            }
          }
          v1065 = v1412;
          if (v1412)
          {
            v1066 = (unint64_t *)&v1412->__shared_owners_;
            do
              v1067 = __ldaxr(v1066);
            while (__stlxr(v1067 - 1, v1066));
            if (!v1067)
            {
              ((void (*)(std::__shared_weak_count *))v1065->__on_zero_shared)(v1065);
              std::__shared_weak_count::__release_weak(v1065);
            }
          }
          v1068 = v1418;
          if (v1418)
          {
            v1069 = (unint64_t *)&v1418->__shared_owners_;
            do
              v1070 = __ldaxr(v1069);
            while (__stlxr(v1070 - 1, v1069));
            if (!v1070)
            {
              ((void (*)(std::__shared_weak_count *))v1068->__on_zero_shared)(v1068);
              std::__shared_weak_count::__release_weak(v1068);
            }
          }
          v1071 = v1424;
          if (v1424)
          {
            v1072 = (unint64_t *)&v1424->__shared_owners_;
            do
              v1073 = __ldaxr(v1072);
            while (__stlxr(v1073 - 1, v1072));
            if (!v1073)
            {
              ((void (*)(std::__shared_weak_count *))v1071->__on_zero_shared)(v1071);
              std::__shared_weak_count::__release_weak(v1071);
            }
          }
          v1074 = v1429;
          if (v1429)
          {
            v1075 = (unint64_t *)&v1429->__shared_owners_;
            do
              v1076 = __ldaxr(v1075);
            while (__stlxr(v1076 - 1, v1075));
            if (!v1076)
            {
              ((void (*)(std::__shared_weak_count *))v1074->__on_zero_shared)(v1074);
              std::__shared_weak_count::__release_weak(v1074);
            }
          }
          v1077 = v1434;
          if (v1434)
          {
            v1078 = (unint64_t *)&v1434->__shared_owners_;
            do
              v1079 = __ldaxr(v1078);
            while (__stlxr(v1079 - 1, v1078));
            if (!v1079)
            {
              ((void (*)(std::__shared_weak_count *))v1077->__on_zero_shared)(v1077);
              std::__shared_weak_count::__release_weak(v1077);
            }
          }
          v1080 = v1440;
          if (v1440)
          {
            v1081 = (unint64_t *)&v1440->__shared_owners_;
            do
              v1082 = __ldaxr(v1081);
            while (__stlxr(v1082 - 1, v1081));
            if (!v1082)
            {
              ((void (*)(std::__shared_weak_count *))v1080->__on_zero_shared)(v1080);
              std::__shared_weak_count::__release_weak(v1080);
            }
          }
          v1083 = v1446;
          if (v1446)
          {
            v1084 = (unint64_t *)&v1446->__shared_owners_;
            do
              v1085 = __ldaxr(v1084);
            while (__stlxr(v1085 - 1, v1084));
            if (!v1085)
            {
              ((void (*)(std::__shared_weak_count *))v1083->__on_zero_shared)(v1083);
              std::__shared_weak_count::__release_weak(v1083);
            }
          }
          v1086 = v1452;
          if (v1452)
          {
            v1087 = (unint64_t *)&v1452->__shared_owners_;
            do
              v1088 = __ldaxr(v1087);
            while (__stlxr(v1088 - 1, v1087));
            if (!v1088)
            {
              ((void (*)(std::__shared_weak_count *))v1086->__on_zero_shared)(v1086);
              std::__shared_weak_count::__release_weak(v1086);
            }
          }
          v1089 = v1457;
          if (v1457)
          {
            v1090 = (unint64_t *)&v1457->__shared_owners_;
            do
              v1091 = __ldaxr(v1090);
            while (__stlxr(v1091 - 1, v1090));
            if (!v1091)
            {
              ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
              std::__shared_weak_count::__release_weak(v1089);
            }
          }
          v1092 = v1459;
          if (v1459)
          {
            v1093 = (unint64_t *)&v1459->__shared_owners_;
            do
              v1094 = __ldaxr(v1093);
            while (__stlxr(v1094 - 1, v1093));
            if (!v1094)
            {
              ((void (*)(std::__shared_weak_count *))v1092->__on_zero_shared)(v1092);
              std::__shared_weak_count::__release_weak(v1092);
            }
          }
          v1095 = v1461;
          if (v1461)
          {
            v1096 = (unint64_t *)&v1461->__shared_owners_;
            do
              v1097 = __ldaxr(v1096);
            while (__stlxr(v1097 - 1, v1096));
            if (!v1097)
            {
              ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
              std::__shared_weak_count::__release_weak(v1095);
            }
          }
          v1098 = v1468;
          if (v1468)
          {
            v1099 = (unint64_t *)&v1468->__shared_owners_;
            do
              v1100 = __ldaxr(v1099);
            while (__stlxr(v1100 - 1, v1099));
            if (!v1100)
            {
              ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
              std::__shared_weak_count::__release_weak(v1098);
            }
          }
          v1101 = v1474;
          if (v1474)
          {
            v1102 = (unint64_t *)&v1474->__shared_owners_;
            do
              v1103 = __ldaxr(v1102);
            while (__stlxr(v1103 - 1, v1102));
            if (!v1103)
            {
              ((void (*)(std::__shared_weak_count *))v1101->__on_zero_shared)(v1101);
              std::__shared_weak_count::__release_weak(v1101);
            }
          }
          v1104 = v1480;
          if (v1480)
          {
            v1105 = (unint64_t *)&v1480->__shared_owners_;
            do
              v1106 = __ldaxr(v1105);
            while (__stlxr(v1106 - 1, v1105));
            if (!v1106)
            {
              ((void (*)(std::__shared_weak_count *))v1104->__on_zero_shared)(v1104);
              std::__shared_weak_count::__release_weak(v1104);
            }
          }
          v1107 = v1486;
          if (v1486)
          {
            v1108 = (unint64_t *)&v1486->__shared_owners_;
            do
              v1109 = __ldaxr(v1108);
            while (__stlxr(v1109 - 1, v1108));
            if (!v1109)
            {
              ((void (*)(std::__shared_weak_count *))v1107->__on_zero_shared)(v1107);
              std::__shared_weak_count::__release_weak(v1107);
            }
          }
          v1110 = v1491;
          if (v1491)
          {
            v1111 = (unint64_t *)&v1491->__shared_owners_;
            do
              v1112 = __ldaxr(v1111);
            while (__stlxr(v1112 - 1, v1111));
            if (!v1112)
            {
              ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
              std::__shared_weak_count::__release_weak(v1110);
            }
          }
          v851 = v1496;
          if (!v1496)
            return;
          v1113 = (unint64_t *)&v1496->__shared_owners_;
          do
            v853 = __ldaxr(v1113);
          while (__stlxr(v853 - 1, v1113));
          goto LABEL_1974;
        }
      }
    case 4u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      v1484 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1485);
      v1478 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1479);
      sub_2231CDCA4(v9, (uint64_t)&v1472);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      v1450 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1451);
      v1444 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1445);
      sub_2231D4E60(a4, (uint64_t)&v1438);
      v1255 = *(_QWORD *)(a2 + 764);
      v1270 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      v1422 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1423);
      v1416 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1417);
      sub_2231CDCA4(a1 + 8, (uint64_t)&v1410);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v106 = atomic_load((unsigned __int8 *)&qword_2540CC748);
      if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC748))
      {
        qword_2540CC7F0 = 0;
        unk_2540CC7F8 = 0;
        __cxa_guard_release(&qword_2540CC748);
      }
      v107 = atomic_load((unsigned __int8 *)&qword_2540CC758);
      if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC758))
      {
        qword_2540CC750 = 0;
        __cxa_guard_release(&qword_2540CC758);
      }
      if (!HIDWORD(v1255) || !(_DWORD)v1255)
        goto LABEL_1352;
      v108 = 0;
      while (1)
      {
        v109 = 0;
        _Q0.f32[0] = (float)v108;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1277 = _Q0;
        do
        {
          _Q0.i16[0] = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v109 + v1437 * v108));
          __asm { FCVT            S1, H0 }
          v115 = v108 * v1255 + v109;
          if (_S1 > -65504.0)
          {
            _H2 = *(_WORD *)(v1430 + 2 * (v1432 * v108 + v1431 * (_DWORD)v109));
            __asm { FCVT            S3, H2 }
            *(float *)&v117 = _S1;
            v119 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v115);
            v120 = *(_QWORD *)(v1441 + 2 * (v1442 * (v119 % v1270) + v1443 * (v119 / v1270)));
          }
          else
          {
            _S3 = *(float *)(v11 + 104);
            *(float *)&v117 = -65504.0;
            v120 = 0xFE00FE00FE00FE00;
          }
          v1348 = *(float *)&v117;
          v1339 = _S3;
          __asm { FCVT            S11, H0 }
          _Q0.i64[0] = 0x7E007E007E007E00;
          v1380 = _Q0;
          _H8 = 32256;
          _H15 = 32256;
          if (_S11 > -65504.0)
          {
            v124 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v115);
            _Q0.i32[0] = *(_DWORD *)v124;
            v1380 = _Q0;
            _H15 = *(_WORD *)(v124 + 4);
            _H8 = *(_WORD *)(v124 + 6);
          }
          v125 = v1498 * (_DWORD)v109 + v1499 * v108;
          v126 = v1497;
          v127 = v1493 * (_DWORD)v109 + v1494 * v108;
          v128 = v1492;
          _H12 = *(_WORD *)(v1497 + 2 * v125);
          v1358 = *(_WORD *)(v1492 + 2 * v127);
          v1371 = *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v109 + v1477 * v108));
          v130 = v1469 + 2 * (v1470 * (_DWORD)v109 + v1471 * v108);
          v7.i32[0] = *(_DWORD *)v130;
          _H10 = *(_WORD *)(v130 + 4);
          v1329 = (_QWORD *)v130;
          _H9 = *(_WORD *)(v130 + 6);
          if (*(_BYTE *)(a1 + 776))
          {
            v1314 = v1492;
            v1322 = v1493 * (_DWORD)v109 + v1494 * v108;
            v133 = v1497;
            v134 = v1498 * (_DWORD)v109 + v1499 * v108;
            v135 = v120;
            *(_QWORD *)(v1413 + 2 * (v1414 * (_DWORD)v109 + v1415 * v108)) = v120;
            v136 = v1408;
            v137 = v1409;
            v138 = v1407;
            if (!v1407)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v139 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v141 = qword_255795648;
                for (i1 = qword_255795650; v141 != i1; v141 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v141)(*(_QWORD *)(v141 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v142 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              v11 = (uint64_t)a3;
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v143 = v138 + 2 * (v136 * (_DWORD)v109 + v137 * v108);
            _Q0 = v1380;
            *(_DWORD *)v143 = v1380.i32[0];
            *(_WORD *)(v143 + 4) = _H15;
            *(_WORD *)(v143 + 6) = _H8;
            v120 = v135;
            v125 = v134;
            v126 = v133;
            v127 = v1322;
            v128 = v1314;
          }
          v144 = 0;
          v145 = 0;
          __asm
          {
            FCVT            S14, H12
            FCVT            S2, H12
          }
          if (_S2 > 0.0 && _S2 > -65504.0)
          {
            v144 = 0;
            v145 = 0;
            v148 = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v11 + 32), vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v11, (float)v109), v1277, *(float32x4_t *)(v11 + 16))), *(float32x4_t *)(v11 + 48), 1.0 / _S14);
            _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2);
            _Q1 = vdivq_f32(v148, _Q0);
            if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
            {
              v144 = 0;
              v145 = 0;
              if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
              {
                _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                __asm { FCVT            S1, H1 }
                v144 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                v153 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                if (_Q1.f32[0] < 2.0)
                  v153 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                v145 = v153 < _Q1.f32[0];
                if (!v144)
                  v145 = 0;
              }
            }
          }
          if (_S11 > -65504.0 || v145)
          {
            _H0 = v1358;
            __asm { FCVT            S12, H0 }
            _Q0.i64[1] = v1380.i64[1];
            v156 = vcvtq_f32_f16(*(float16x4_t *)v1380.f32);
            __asm
            {
              FCVT            S17, H15
              FCVT            S15, H8
            }
            v158 = v156;
            v158.i32[2] = _Q17;
            v159 = vcvtq_f32_f16(v7);
            __asm
            {
              FCVT            S19, H10
              FCVT            S0, H9
            }
            v160 = v159;
            v160.i32[2] = _D19.i32[0];
            v161 = *(float *)(v11 + 112);
            v162 = *(float *)(v11 + 104);
            v163 = v1348;
            if (v1348 <= 0.0 || v1339 <= v162)
            {
              if (v145)
              {
                if (v1348 <= 0.0)
                {
                  _S12 = *(float *)(v11 + 104);
                  if (!v144)
                    goto LABEL_153;
                  goto LABEL_215;
                }
                goto LABEL_213;
              }
            }
            else
            {
              if (_S2 > 0.0 && v162 < _S12)
              {
                if (v1339 <= 0.0)
                {
                  v166 = 0.01;
                  _H3 = v1358;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                    goto LABEL_206;
                }
                else if (v1339 >= 1.0)
                {
                  v166 = 0.0001;
                  _H3 = v1358;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                    goto LABEL_206;
                }
                else
                {
                  v164 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                  v165 = 0.01;
                  if (v164 <= 0.01)
                    v165 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                  if (v164 >= 0.0001)
                    v166 = v165;
                  else
                    v166 = 0.0001;
                  _H3 = v1358;
                  __asm { FCVT            S3, H3 }
                  if (_S3 <= 0.0)
                  {
LABEL_206:
                    v169 = (float)(v1348 - _S14) * (float)(v1348 - _S14);
                    v170 = 0.01;
                    goto LABEL_234;
                  }
                }
                if (_S3 >= 1.0)
                {
                  v169 = (float)(v1348 - _S14) * (float)(v1348 - _S14);
                  v170 = 0.0001;
LABEL_234:
                  v174 = v170;
                  if ((float)(v169 / (float)(v166 + v170)) < 1.1)
                    goto LABEL_235;
LABEL_226:
                  if (v1348 <= _S14 || v145)
                  {
                    if (v144 && v1339 > v161)
                    {
                      _S12 = v1339;
                      _S14 = v1348;
                      v1371 = v120;
                      _Q0.i32[0] = _S15;
                      v160 = v158;
                    }
                    else if (v144 || v1339 > v161)
                    {
                      v180 = *(float *)(v11 + 108);
                      v181 = (float)((float)((float)(v180 * -0.1) + 0.01) / 0.09) + 1.0;
                      v182 = (float)-v181 / v180;
                      v183 = (float)(v180 * _S12) + v181;
                      if (v182 <= _S12)
                        _S12 = v183;
                      else
                        _S12 = 0.0;
                    }
                  }
                  goto LABEL_280;
                }
                v172 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                v173 = 0.01;
                if (v172 <= 0.01)
                  v173 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                if (v172 >= 0.0001)
                  v174 = v173;
                else
                  v174 = 0.0001;
                if ((float)((float)((float)(v1348 - _S14) * (float)(v1348 - _S14)) / (float)(v174 + v166)) >= 1.1)
                  goto LABEL_226;
LABEL_235:
                v1259 = v160;
                v1315 = _D19;
                if (v1339 <= 0.0)
                {
                  *(float *)&v179 = 0.01;
                }
                else
                {
                  if (v1339 < 1.0)
                  {
                    v176 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                    v177 = 0.01;
                    if (v176 <= 0.01)
                      v177 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                    if (v176 >= 0.0001)
                      v178 = v177;
                    else
                      v178 = 0.0001;
LABEL_250:
                    v1264 = *(float32x2_t *)v159.f32;
                    v1323 = *(float32x2_t *)v156.f32;
                    v1359 = _Q17;
                    v1381 = v158;
                    v184 = (float)(v174 * v178) / (float)(v174 + v178);
                    _S12 = 1.0;
                    if (v184 > 0.0001)
                    {
                      _S12 = 0.0;
                      if (v184 < 0.01)
                      {
                        v185 = 1.0;
                        v186 = (float)((float)(sqrtf(v184) + -0.01) / -0.09) + 1.0;
                        if (v186 <= 1.0)
                          v185 = v186;
                        if (v186 >= 0.0)
                          _S12 = v185;
                        else
                          _S12 = 0.0;
                      }
                    }
                    v1401.i64[0] = v1371;
                    v1395.i64[0] = v120;
                    sub_2237EE37C((unint64_t *)&v1401, (unsigned __int16 *)&v1395, *(_BYTE *)(v11 + 121), (__int16 *)&v1404);
                    _Q0.i64[1] = *((_QWORD *)&v1359 + 1);
                    v158 = v1381;
                    v187 = v1381;
                    if (vmla_f32(vmla_lane_f32(vmul_f32(v1264, v1323), (float32x2_t)vdup_lane_s32((int32x2_t)v1323, 1), v1264, 1), *(float32x2_t *)&v1359, v1315).f32[0] > 0.70711)
                    {
                      if (v1339 <= 0.0)
                      {
                        v190 = 0.01;
                        if (_S12 <= 0.0)
                          goto LABEL_266;
                      }
                      else if (v1339 >= 1.0)
                      {
                        v190 = 0.0001;
                        if (_S12 <= 0.0)
                          goto LABEL_266;
                      }
                      else
                      {
                        v188 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                        v189 = 0.01;
                        if (v188 <= 0.01)
                          v189 = (float)((float)(v1339 * -0.09) + 0.1) * (float)((float)(v1339 * -0.09) + 0.1);
                        if (v188 >= 0.0001)
                          v190 = v189;
                        else
                          v190 = 0.0001;
                        if (_S12 <= 0.0)
                        {
LABEL_266:
                          *(float *)&v191 = 0.01;
                          goto LABEL_277;
                        }
                      }
                      if (_S12 >= 1.0)
                      {
                        *(float *)&v191 = 0.0001;
LABEL_277:
                        v194 = *(float *)&v191;
                      }
                      else
                      {
                        v192 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                        v193 = 0.01;
                        if (v192 <= 0.01)
                          v193 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                        if (v192 >= 0.0001)
                          v194 = v193;
                        else
                          v194 = 0.0001;
                      }
                      v187.f32[0] = v190 + v194;
                      _Q0 = vaddq_f32(vmulq_n_f32(v1259, v190), vmulq_n_f32(v1381, v194));
                      v187 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 0));
                    }
                    v163 = v1348;
                    _S14 = (float)((float)(v1348 * v174) + (float)(v178 * _S14)) / (float)(v174 + v178);
                    v1371 = v1404.i64[0];
                    v162 = *(float *)(v11 + 104);
                    _Q0.i32[0] = 1.0;
                    v160 = v187;
LABEL_280:
                    v195 = *(float *)(v11 + 100);
                    if (v195 >= _S12)
                      v195 = _S12;
                    if (_S12 >= v162)
                      _S12 = v195;
                    else
                      _S12 = v162;
                    if (!v144)
                    {
LABEL_153:
                      v110 = v1329;
                      v111 = v1371;
                      goto LABEL_154;
                    }
LABEL_215:
                    if (_S12 > v162)
                      goto LABEL_153;
                    v110 = v1329;
                    v111 = v1371;
                    if (v1339 > v161)
                    {
                      _S12 = v1339;
                      _S14 = v163;
                      v111 = v120;
                      _Q0.i32[0] = _S15;
                      v160 = v158;
                    }
LABEL_154:
                    __asm { FCVT            H1, S14 }
                    *(_WORD *)(v126 + 2 * v125) = _H1;
                    __asm { FCVT            H1, S12 }
                    *(_WORD *)(v128 + 2 * v127) = _H1;
                    v160.i32[3] = _Q0.i32[0];
                    *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(v160);
                    *v110 = _Q0.i64[0];
                    *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v109 + v1477 * v108)) = v111;
                    goto LABEL_155;
                  }
                  *(float *)&v179 = 0.0001;
                }
                v178 = *(float *)&v179;
                goto LABEL_250;
              }
              if (_S2 <= 0.0 || v1339 > v161)
              {
LABEL_213:
                _S12 = v1339;
                _S14 = v1348;
                v1371 = v120;
                _Q0.i32[0] = _S15;
                v160 = v158;
              }
            }
            if (!v144)
              goto LABEL_153;
            goto LABEL_215;
          }
LABEL_155:
          ++v109;
        }
        while (v109 != v1255);
        if (++v108 == HIDWORD(v1255))
        {
LABEL_1352:
          v854 = v1406;
          if (v1406)
          {
            v855 = (unint64_t *)&v1406->__shared_owners_;
            do
              v856 = __ldaxr(v855);
            while (__stlxr(v856 - 1, v855));
            if (!v856)
            {
              ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
              std::__shared_weak_count::__release_weak(v854);
            }
          }
          v857 = v1412;
          if (v1412)
          {
            v858 = (unint64_t *)&v1412->__shared_owners_;
            do
              v859 = __ldaxr(v858);
            while (__stlxr(v859 - 1, v858));
            if (!v859)
            {
              ((void (*)(std::__shared_weak_count *))v857->__on_zero_shared)(v857);
              std::__shared_weak_count::__release_weak(v857);
            }
          }
          v860 = v1418;
          if (v1418)
          {
            v861 = (unint64_t *)&v1418->__shared_owners_;
            do
              v862 = __ldaxr(v861);
            while (__stlxr(v862 - 1, v861));
            if (!v862)
            {
              ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
              std::__shared_weak_count::__release_weak(v860);
            }
          }
          v863 = v1424;
          if (v1424)
          {
            v864 = (unint64_t *)&v1424->__shared_owners_;
            do
              v865 = __ldaxr(v864);
            while (__stlxr(v865 - 1, v864));
            if (!v865)
            {
              ((void (*)(std::__shared_weak_count *))v863->__on_zero_shared)(v863);
              std::__shared_weak_count::__release_weak(v863);
            }
          }
          v866 = v1429;
          if (v1429)
          {
            v867 = (unint64_t *)&v1429->__shared_owners_;
            do
              v868 = __ldaxr(v867);
            while (__stlxr(v868 - 1, v867));
            if (!v868)
            {
              ((void (*)(std::__shared_weak_count *))v866->__on_zero_shared)(v866);
              std::__shared_weak_count::__release_weak(v866);
            }
          }
          v869 = v1434;
          if (v1434)
          {
            v870 = (unint64_t *)&v1434->__shared_owners_;
            do
              v871 = __ldaxr(v870);
            while (__stlxr(v871 - 1, v870));
            if (!v871)
            {
              ((void (*)(std::__shared_weak_count *))v869->__on_zero_shared)(v869);
              std::__shared_weak_count::__release_weak(v869);
            }
          }
          v872 = v1440;
          if (v1440)
          {
            v873 = (unint64_t *)&v1440->__shared_owners_;
            do
              v874 = __ldaxr(v873);
            while (__stlxr(v874 - 1, v873));
            if (!v874)
            {
              ((void (*)(std::__shared_weak_count *))v872->__on_zero_shared)(v872);
              std::__shared_weak_count::__release_weak(v872);
            }
          }
          v875 = v1446;
          if (v1446)
          {
            v876 = (unint64_t *)&v1446->__shared_owners_;
            do
              v877 = __ldaxr(v876);
            while (__stlxr(v877 - 1, v876));
            if (!v877)
            {
              ((void (*)(std::__shared_weak_count *))v875->__on_zero_shared)(v875);
              std::__shared_weak_count::__release_weak(v875);
            }
          }
          v878 = v1452;
          if (v1452)
          {
            v879 = (unint64_t *)&v1452->__shared_owners_;
            do
              v880 = __ldaxr(v879);
            while (__stlxr(v880 - 1, v879));
            if (!v880)
            {
              ((void (*)(std::__shared_weak_count *))v878->__on_zero_shared)(v878);
              std::__shared_weak_count::__release_weak(v878);
            }
          }
          v881 = v1457;
          if (v1457)
          {
            v882 = (unint64_t *)&v1457->__shared_owners_;
            do
              v883 = __ldaxr(v882);
            while (__stlxr(v883 - 1, v882));
            if (!v883)
            {
              ((void (*)(std::__shared_weak_count *))v881->__on_zero_shared)(v881);
              std::__shared_weak_count::__release_weak(v881);
            }
          }
          v884 = v1459;
          if (v1459)
          {
            v885 = (unint64_t *)&v1459->__shared_owners_;
            do
              v886 = __ldaxr(v885);
            while (__stlxr(v886 - 1, v885));
            if (!v886)
            {
              ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
              std::__shared_weak_count::__release_weak(v884);
            }
          }
          v887 = v1461;
          if (v1461)
          {
            v888 = (unint64_t *)&v1461->__shared_owners_;
            do
              v889 = __ldaxr(v888);
            while (__stlxr(v889 - 1, v888));
            if (!v889)
            {
              ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
              std::__shared_weak_count::__release_weak(v887);
            }
          }
          v890 = v1468;
          if (v1468)
          {
            v891 = (unint64_t *)&v1468->__shared_owners_;
            do
              v892 = __ldaxr(v891);
            while (__stlxr(v892 - 1, v891));
            if (!v892)
            {
              ((void (*)(std::__shared_weak_count *))v890->__on_zero_shared)(v890);
              std::__shared_weak_count::__release_weak(v890);
            }
          }
          v893 = v1474;
          if (v1474)
          {
            v894 = (unint64_t *)&v1474->__shared_owners_;
            do
              v895 = __ldaxr(v894);
            while (__stlxr(v895 - 1, v894));
            if (!v895)
            {
              ((void (*)(std::__shared_weak_count *))v893->__on_zero_shared)(v893);
              std::__shared_weak_count::__release_weak(v893);
            }
          }
          v896 = v1480;
          if (v1480)
          {
            v897 = (unint64_t *)&v1480->__shared_owners_;
            do
              v898 = __ldaxr(v897);
            while (__stlxr(v898 - 1, v897));
            if (!v898)
            {
              ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
              std::__shared_weak_count::__release_weak(v896);
            }
          }
          v899 = v1486;
          if (v1486)
          {
            v900 = (unint64_t *)&v1486->__shared_owners_;
            do
              v901 = __ldaxr(v900);
            while (__stlxr(v901 - 1, v900));
            if (!v901)
            {
              ((void (*)(std::__shared_weak_count *))v899->__on_zero_shared)(v899);
              std::__shared_weak_count::__release_weak(v899);
            }
          }
          v902 = v1491;
          if (v1491)
          {
            v903 = (unint64_t *)&v1491->__shared_owners_;
            do
              v904 = __ldaxr(v903);
            while (__stlxr(v904 - 1, v903));
            if (!v904)
            {
              ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
              std::__shared_weak_count::__release_weak(v902);
            }
          }
          v851 = v1496;
          if (!v1496)
            return;
          v905 = (unint64_t *)&v1496->__shared_owners_;
          do
            v853 = __ldaxr(v905);
          while (__stlxr(v853 - 1, v905));
          goto LABEL_1974;
        }
      }
    case 5u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      sub_2231CD8A8(v9, (uint64_t)&v1484);
      v1478 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1479);
      sub_2231CDCA4(v9, (uint64_t)&v1472);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      sub_2231D48A8(a4, (uint64_t)&v1450);
      v1444 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1445);
      sub_2231D4E60(a4, (uint64_t)&v1438);
      v1219 = *(_QWORD *)(a2 + 764);
      v1246 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      sub_2231CD8A8(a1 + 8, (uint64_t)&v1422);
      v1416 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1417);
      sub_2231CDCA4(a1 + 8, (uint64_t)&v1410);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v1234 = *(float *)(v11 + 64);
      v1231 = *(float32x2_t *)(v11 + 68);
      v1228 = *(float *)(v11 + 76);
      _Q0.i64[0] = *(_QWORD *)(v11 + 80);
      v1243 = *(float32x2_t *)_Q0.f32;
      v1237 = *(float *)(v11 + 92);
      v1240 = *(float *)(v11 + 88);
      v599 = atomic_load((unsigned __int8 *)&qword_2540CC778);
      if ((v599 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC778))
      {
        xmmword_2540CC810 = 0uLL;
        __cxa_guard_release(&qword_2540CC778);
      }
      v600 = atomic_load((unsigned __int8 *)&qword_2540CC788);
      if ((v600 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC788))
      {
        qword_2540CC780 = 0;
        __cxa_guard_release(&qword_2540CC788);
      }
      if (!HIDWORD(v1219) || !(_DWORD)v1219)
        goto LABEL_1797;
      v601 = 0;
      while (1)
      {
        v602 = 0;
        _Q0.f32[0] = (float)v601;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1249 = _Q0;
        do
        {
          _H9 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v602 + v1437 * v601));
          __asm { FCVT            S0, H9 }
          v605 = v601 * v1219 + v602;
          if (_S0 > -65504.0)
          {
            _H1 = *(_WORD *)(v1430 + 2 * (v1432 * v601 + v1431 * (_DWORD)v602));
            v608 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v605);
            v1320 = v608 / v1246;
            v1313 = v608 % v1246;
            __asm { FCVT            S10, H1 }
            v1344 = _S0;
          }
          else
          {
            _S10 = *(float *)(v11 + 104);
            v1344 = -65504.0;
          }
          v1311 = v1498 * (_DWORD)v602 + v1499 * v601;
          v1306 = v1497;
          _H11 = *(_WORD *)(v1497 + 2 * v1311);
          v1301 = v1493 * (_DWORD)v602 + v1494 * v601;
          v1294 = v1492;
          v1367 = *(_WORD *)(v1492 + 2 * v1301);
          if (_S0 > -65504.0)
          {
            v615 = v1454;
            v616 = v1455;
            v617 = v1453;
            if (!v1453)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v618 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v618 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v620 = qword_255795648;
                for (i2 = qword_255795650; v620 != i2; v620 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v620)(*(_QWORD *)(v620 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v621 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v621 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v622 = v617 + 2 * (v615 * v1313 + v616 * v1320);
            _H8 = *(_WORD *)(v622 + 4);
            _H15 = *(_WORD *)(v622 + 6);
            v595.i32[0] = *(_DWORD *)v622;
            _Q0 = vcvtq_f32_f16(*(float16x4_t *)v595.f32);
            _Q1.i32[1] = v1243.i32[1];
            *(float32x2_t *)v594.f32 = vmul_f32(v1243, *(float32x2_t *)_Q0.f32);
            __asm
            {
              FCVT            S0, H8
              FCVT            S1, H15
            }
            _Q1.f32[0] = v1237 * _Q1.f32[0];
            v594.f32[2] = v1240 * _Q0.f32[0];
            v1258 = _Q1;
            v1262 = v594;
            v1354 = *(_DWORD *)v622;
            v611 = HIWORD(*(_DWORD *)v622);
            __asm { FCVT            S12, H9 }
            v1288 = _S10;
            if (_S12 <= -65504.0)
            {
LABEL_936:
              v614 = 0xFE00FE00FE00FE00;
              goto LABEL_948;
            }
          }
          else
          {
            v1354 = qword_2540CC780;
            _H8 = WORD2(qword_2540CC780);
            v611 = WORD1(qword_2540CC780);
            _H15 = HIWORD(qword_2540CC780);
            _Q1.i64[1] = *((_QWORD *)&xmmword_2540CC810 + 1);
            _Q0.i32[0] = HIDWORD(xmmword_2540CC810);
            v1258 = _Q0;
            v1262 = (float32x4_t)xmmword_2540CC810;
            __asm { FCVT            S12, H9 }
            v1288 = _S10;
            if (_S12 <= -65504.0)
              goto LABEL_936;
          }
          v614 = *(_QWORD *)(v1441 + 2 * (v1442 * v1313 + v1443 * v1320));
LABEL_948:
          v1376 = v614;
          _Q0.i64[0] = 0x7E007E007E007E00;
          v1388 = _Q0;
          _H10 = 32256;
          _H14 = 32256;
          if (_S12 > -65504.0)
          {
            v625 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v605);
            _Q0.i32[0] = *(_DWORD *)v625;
            v1388 = _Q0;
            _H14 = *(_WORD *)(v625 + 4);
            _H10 = *(_WORD *)(v625 + 6);
          }
          v626 = (__int16 *)(v1487 + 2 * (v1488 * (_DWORD)v602 + v1489 * v601));
          _H9 = *v626;
          v628 = *(_DWORD *)(v626 + 1);
          v1335 = v626[3];
          v629 = *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v602 + v1477 * v601));
          v630 = v1469 + 2 * (v1470 * (_DWORD)v602 + v1471 * v601);
          _Q0.i32[0] = *(_DWORD *)v630;
          v1283 = *(float16x4_t *)_Q0.f32;
          v1275 = *(_WORD *)(v630 + 4);
          v1268 = *(_WORD *)(v630 + 6);
          if (*(_BYTE *)(a1 + 776))
          {
            v631 = v1426;
            v632 = v1427;
            v633 = v1425;
            if (!v1425)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v634 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v634 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v636 = qword_255795648;
                for (i3 = qword_255795650; v636 != i3; v636 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v636)(*(_QWORD *)(v636 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v637 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v637 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v638 = (_WORD *)(v633 + 2 * (v631 * (_DWORD)v602 + v632 * v601));
            *v638 = v1354;
            v638[1] = v611;
            v638[2] = _H8;
            v638[3] = _H15;
            *(_QWORD *)(v1413 + 2 * (v1414 * (_DWORD)v602 + v1415 * v601)) = v1376;
            v639 = v1408;
            v640 = v1409;
            v641 = v1407;
            if (!v1407)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v642 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v642 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v644 = qword_255795648;
                for (i4 = qword_255795650; v644 != i4; v644 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v644)(*(_QWORD *)(v644 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v645 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v645 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v646 = v641 + 2 * (v639 * (_DWORD)v602 + v640 * v601);
            _Q0 = v1388;
            *(_DWORD *)v646 = v1388.i32[0];
            *(_WORD *)(v646 + 4) = _H14;
            *(_WORD *)(v646 + 6) = _H10;
          }
          v647 = 0;
          v648 = 0;
          __asm
          {
            FCVT            S8, H11
            FCVT            S2, H11
          }
          if (_S2 > 0.0 && _S2 > -65504.0)
          {
            v647 = 0;
            v648 = 0;
            v595 = a3[1];
            v594.i32[3] = v1249.i32[3];
            v651 = vmlaq_n_f32(vaddq_f32(a3[2], vmlaq_f32(vmulq_n_f32(*a3, (float)v602), v1249, v595)), a3[3], 1.0 / _S8);
            _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v651, 2);
            _Q1 = vdivq_f32(v651, _Q0);
            if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
            {
              v647 = 0;
              v648 = 0;
              if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
              {
                _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                __asm { FCVT            S1, H1 }
                v648 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                v655 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                if (_Q1.f32[0] < 2.0)
                  v655 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                v647 = v655 < _Q1.f32[0];
                if (!v648)
                  v647 = 0;
              }
            }
          }
          if (_S12 > -65504.0 || v647)
          {
            _Q0.i16[0] = v1367;
            __asm
            {
              FCVT            S15, H0
              FCVT            S0, H9
            }
            v595.f32[0] = v1234 * _Q0.f32[0];
            _Q0.i32[0] = v628;
            _Q1.i32[1] = v1231.i32[1];
            *(float32x2_t *)_Q0.f32 = vmul_f32(v1231, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.f32));
            _Q1.i16[0] = v1335;
            __asm { FCVT            S1, H1 }
            v595.i32[1] = _Q0.i32[0];
            _Q1.f32[0] = v1228 * _Q1.f32[0];
            v1355 = _Q1;
            v595.i32[2] = _Q0.i32[1];
            v1336 = v595;
            v657 = vcvtq_f32_f16(*(float16x4_t *)v1388.f32);
            __asm
            {
              FCVT            S18, H14
              FCVT            S11, H10
            }
            v659 = v657;
            v659.i32[2] = _D18.i32[0];
            v660 = vcvtq_f32_f16(v1283);
            _Q0.i16[0] = v1275;
            __asm { FCVT            S20, H0 }
            _Q0.i16[0] = v1268;
            __asm { FCVT            S0, H0 }
            v661 = v660;
            v661.i32[2] = _D20.i32[0];
            v662 = a3[7].f32[0];
            v663 = a3[6].f32[2];
            v664 = v1344;
            if (v1344 <= 0.0 || v1288 <= v663)
            {
              if (v647)
              {
                if (v1344 <= 0.0)
                {
                  _S15 = a3[6].f32[2];
                  if (!v648)
                    goto LABEL_1015;
                  goto LABEL_1012;
                }
                goto LABEL_1010;
              }
            }
            else
            {
              if (_S2 > 0.0 && v663 < _S15)
              {
                if (v1288 <= 0.0)
                {
                  *(float *)&v681 = 0.01;
                }
                else
                {
                  if (v1288 < 1.0)
                  {
                    v665 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                    v666 = 0.01;
                    if (v665 <= 0.01)
                      v666 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                    if (v665 < 0.0001)
                      v666 = 0.0001;
                    v667 = a3[6].f32[3];
                    _H4 = v1367;
                    __asm { FCVT            S4, H4 }
                    if (_S4 <= 0.0)
                    {
LABEL_1003:
                      v670 = (float)(v1344 - _S8) * (float)(v1344 - _S8);
                      v671 = 0.01;
                      goto LABEL_1041;
                    }
LABEL_1027:
                    if (_S4 < 1.0)
                    {
                      v683 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                      v684 = 0.01;
                      if (v683 <= 0.01)
                        v684 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                      if (v683 >= 0.0001)
                        v685 = v684;
                      else
                        v685 = 0.0001;
                      if ((float)((float)((float)(v1344 - _S8) * (float)(v1344 - _S8)) / (float)(v685 + v666)) >= 1.1)
                        goto LABEL_1034;
LABEL_1042:
                      v1276 = v661;
                      v1284 = _D20;
                      v1223 = *(float32x2_t *)v657.f32;
                      v1225 = _D18;
                      v1221 = *(float32x2_t *)v660.f32;
                      if (v1288 <= 0.0)
                      {
                        *(float *)&v690 = 0.01;
                      }
                      else
                      {
                        if (v1288 < 1.0)
                        {
                          v687 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                          v688 = 0.01;
                          if (v687 <= 0.01)
                            v688 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                          if (v687 >= 0.0001)
                            v689 = v688;
                          else
                            v689 = 0.0001;
LABEL_1059:
                          v1389 = v659;
                          v695 = (float)(v685 * v689) / (float)(v685 + v689);
                          _S15 = 1.0;
                          if (v695 > 0.0001)
                          {
                            _S15 = 0.0;
                            if (v695 < 0.01)
                            {
                              v696 = 1.0;
                              v697 = (float)((float)(sqrtf(v695) + -0.01) / -0.09) + 1.0;
                              if (v697 <= 1.0)
                                v696 = v697;
                              if (v697 >= 0.0)
                                _S15 = v696;
                              else
                                _S15 = 0.0;
                            }
                          }
                          v1401.i64[0] = v629;
                          v1395.i64[0] = v1376;
                          sub_2237EE37C((unint64_t *)&v1401, (unsigned __int16 *)&v1395, a3[7].u8[9], (__int16 *)&v1404);
                          v659 = v1389;
                          v698 = v1389;
                          if (vmla_f32(vmla_lane_f32(vmul_f32(v1221, v1223), (float32x2_t)vdup_lane_s32((int32x2_t)v1223, 1), v1221, 1), v1225, v1284).f32[0] > 0.70711)
                          {
                            if (v1288 <= 0.0)
                            {
                              v701 = 0.01;
                              if (_S15 <= 0.0)
                                goto LABEL_1075;
                            }
                            else if (v1288 >= 1.0)
                            {
                              v701 = 0.0001;
                              if (_S15 <= 0.0)
                                goto LABEL_1075;
                            }
                            else
                            {
                              v699 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                              v700 = 0.01;
                              if (v699 <= 0.01)
                                v700 = (float)((float)(v1288 * -0.09) + 0.1) * (float)((float)(v1288 * -0.09) + 0.1);
                              if (v699 >= 0.0001)
                                v701 = v700;
                              else
                                v701 = 0.0001;
                              if (_S15 <= 0.0)
                              {
LABEL_1075:
                                *(float *)&v702 = 0.01;
                                goto LABEL_1086;
                              }
                            }
                            if (_S15 >= 1.0)
                            {
                              *(float *)&v702 = 0.0001;
LABEL_1086:
                              v705 = *(float *)&v702;
                            }
                            else
                            {
                              v703 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                              v704 = 0.01;
                              if (v703 <= 0.01)
                                v704 = (float)((float)(_S15 * -0.09) + 0.1) * (float)((float)(_S15 * -0.09) + 0.1);
                              if (v703 >= 0.0001)
                                v705 = v704;
                              else
                                v705 = 0.0001;
                            }
                            v698.f32[0] = v701 + v705;
                            v594 = v1276;
                            v698 = vdivq_f32(vaddq_f32(vmulq_n_f32(v1276, v701), vmulq_n_f32(v1389, v705)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v698.f32, 0));
                          }
                          v664 = v1344;
                          _S8 = (float)((float)(v1344 * v685) + (float)(v689 * _S8)) / (float)(v685 + v689);
                          v595 = v1258;
                          v594.f32[0] = v1258.f32[0] + v1355.f32[0];
                          v1336 = vdivq_f32(vaddq_f32(vmulq_n_f32(v1262, v1258.f32[0]), vmulq_n_f32(v1336, v1355.f32[0])), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v594.f32, 0));
                          v629 = v1404.i64[0];
                          v686 = a3;
                          v663 = a3[6].f32[2];
                          _Q0.i32[0] = 1.0;
                          v595.f32[0] = v1258.f32[0] + v1355.f32[0];
                          v661 = v698;
LABEL_1089:
                          v706 = v686[6].f32[1];
                          if (v706 >= _S15)
                            v706 = _S15;
                          if (_S15 >= v663)
                            _S15 = v706;
                          else
                            _S15 = v663;
                          if (v686[6].f32[0] < v595.f32[0])
                            v595.i32[0] = v686[6].i32[0];
                          v1355 = v595;
                          if (!v648)
                          {
LABEL_1015:
                            __asm { FCVT            H1, S8 }
                            *(_WORD *)(v1306 + 2 * v1311) = _H1;
                            __asm { FCVT            H1, S15 }
                            *(_WORD *)(v1294 + 2 * v1301) = _H1;
                            v661.i32[3] = _Q0.i32[0];
                            *(float16x4_t *)v630 = vcvt_f16_f32(v661);
                            v674 = v1488;
                            v675 = v1489;
                            v676 = v1487;
                            if (!v1487)
                            {
                              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                              v677 = atomic_load((unsigned __int8 *)&qword_255795680);
                              if ((v677 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                              {
                                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                __cxa_guard_release(&qword_255795680);
                              }
                              if (!byte_255795670 || byte_255795678)
                              {
                                v678 = qword_255795648;
                                for (i5 = qword_255795650; v678 != i5; v678 += 16)
                                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v678)(*(_QWORD *)(v678 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                              }
                              v680 = atomic_load((unsigned __int8 *)&qword_255795680);
                              if ((v680 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                              {
                                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                                __cxa_guard_release(&qword_255795680);
                              }
                              if (!byte_255795670)
                                abort();
                              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                            }
                            _Q0 = v1336;
                            _Q1.i64[1] = v1355.i64[1];
                            _Q0.i32[3] = v1355.i32[0];
                            *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
                            *(_QWORD *)(v676 + 2 * (v674 * (_DWORD)v602 + v675 * v601)) = _Q0.i64[0];
                            *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v602 + v1477 * v601)) = v629;
                            goto LABEL_930;
                          }
LABEL_1012:
                          if (_S15 <= v663 && v1288 > v662)
                          {
                            v1336 = v1262;
                            v629 = v1376;
                            v1355 = v1258;
                            _S15 = v1288;
                            _S8 = v664;
                            _Q0.i32[0] = _S11;
                            v661 = v659;
                          }
                          goto LABEL_1015;
                        }
                        *(float *)&v690 = 0.0001;
                      }
                      v689 = *(float *)&v690;
                      goto LABEL_1059;
                    }
                    v670 = (float)(v1344 - _S8) * (float)(v1344 - _S8);
                    v671 = 0.0001;
LABEL_1041:
                    v685 = v671;
                    if ((float)(v670 / (float)(v666 + v671)) < 1.1)
                      goto LABEL_1042;
LABEL_1034:
                    if (v1344 > _S8 && !v647)
                    {
LABEL_1036:
                      v686 = a3;
                      v595 = v1355;
                      goto LABEL_1089;
                    }
                    if (v648 && v1288 > v662)
                    {
                      v1336 = v1262;
                      v629 = v1376;
                      v595.i32[0] = v1258.i32[0];
                      _S15 = v1288;
                      _S8 = v1344;
                      _Q0.i32[0] = _S11;
                      v661 = v659;
                    }
                    else
                    {
                      if (!v648 && v1288 <= v662)
                        goto LABEL_1036;
                      v691 = v667 * v667;
                      v692 = (float)((float)((float)(v667 * -0.1) + 0.01) / 0.09) + 1.0;
                      v693 = (float)-v692 / v667;
                      v694 = (float)(v667 * _S15) + v692;
                      if (v693 <= _S15)
                        _S15 = v694;
                      else
                        _S15 = 0.0;
                      v595 = v1355;
                      v595.f32[0] = v1355.f32[0] / v691;
                    }
                    v686 = a3;
                    goto LABEL_1089;
                  }
                  *(float *)&v681 = 0.0001;
                }
                v666 = *(float *)&v681;
                v667 = a3[6].f32[3];
                _H4 = v1367;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_1003;
                goto LABEL_1027;
              }
              if (_S2 <= 0.0 || v1288 > v662)
              {
LABEL_1010:
                v1336 = v1262;
                v629 = v1376;
                v1355 = v1258;
                _S15 = v1288;
                _S8 = v1344;
                _Q0.i32[0] = _S11;
                v661 = v659;
              }
            }
            if (!v648)
              goto LABEL_1015;
            goto LABEL_1012;
          }
LABEL_930:
          ++v602;
          v11 = (uint64_t)a3;
        }
        while (v602 != v1219);
        if (++v601 == HIDWORD(v1219))
        {
LABEL_1797:
          v1114 = v1406;
          if (v1406)
          {
            v1115 = (unint64_t *)&v1406->__shared_owners_;
            do
              v1116 = __ldaxr(v1115);
            while (__stlxr(v1116 - 1, v1115));
            if (!v1116)
            {
              ((void (*)(std::__shared_weak_count *))v1114->__on_zero_shared)(v1114);
              std::__shared_weak_count::__release_weak(v1114);
            }
          }
          v1117 = v1412;
          if (v1412)
          {
            v1118 = (unint64_t *)&v1412->__shared_owners_;
            do
              v1119 = __ldaxr(v1118);
            while (__stlxr(v1119 - 1, v1118));
            if (!v1119)
            {
              ((void (*)(std::__shared_weak_count *))v1117->__on_zero_shared)(v1117);
              std::__shared_weak_count::__release_weak(v1117);
            }
          }
          v1120 = v1418;
          if (v1418)
          {
            v1121 = (unint64_t *)&v1418->__shared_owners_;
            do
              v1122 = __ldaxr(v1121);
            while (__stlxr(v1122 - 1, v1121));
            if (!v1122)
            {
              ((void (*)(std::__shared_weak_count *))v1120->__on_zero_shared)(v1120);
              std::__shared_weak_count::__release_weak(v1120);
            }
          }
          v1123 = v1424;
          if (v1424)
          {
            v1124 = (unint64_t *)&v1424->__shared_owners_;
            do
              v1125 = __ldaxr(v1124);
            while (__stlxr(v1125 - 1, v1124));
            if (!v1125)
            {
              ((void (*)(std::__shared_weak_count *))v1123->__on_zero_shared)(v1123);
              std::__shared_weak_count::__release_weak(v1123);
            }
          }
          v1126 = v1429;
          if (v1429)
          {
            v1127 = (unint64_t *)&v1429->__shared_owners_;
            do
              v1128 = __ldaxr(v1127);
            while (__stlxr(v1128 - 1, v1127));
            if (!v1128)
            {
              ((void (*)(std::__shared_weak_count *))v1126->__on_zero_shared)(v1126);
              std::__shared_weak_count::__release_weak(v1126);
            }
          }
          v1129 = v1434;
          if (v1434)
          {
            v1130 = (unint64_t *)&v1434->__shared_owners_;
            do
              v1131 = __ldaxr(v1130);
            while (__stlxr(v1131 - 1, v1130));
            if (!v1131)
            {
              ((void (*)(std::__shared_weak_count *))v1129->__on_zero_shared)(v1129);
              std::__shared_weak_count::__release_weak(v1129);
            }
          }
          v1132 = v1440;
          if (v1440)
          {
            v1133 = (unint64_t *)&v1440->__shared_owners_;
            do
              v1134 = __ldaxr(v1133);
            while (__stlxr(v1134 - 1, v1133));
            if (!v1134)
            {
              ((void (*)(std::__shared_weak_count *))v1132->__on_zero_shared)(v1132);
              std::__shared_weak_count::__release_weak(v1132);
            }
          }
          v1135 = v1446;
          if (v1446)
          {
            v1136 = (unint64_t *)&v1446->__shared_owners_;
            do
              v1137 = __ldaxr(v1136);
            while (__stlxr(v1137 - 1, v1136));
            if (!v1137)
            {
              ((void (*)(std::__shared_weak_count *))v1135->__on_zero_shared)(v1135);
              std::__shared_weak_count::__release_weak(v1135);
            }
          }
          v1138 = v1452;
          if (v1452)
          {
            v1139 = (unint64_t *)&v1452->__shared_owners_;
            do
              v1140 = __ldaxr(v1139);
            while (__stlxr(v1140 - 1, v1139));
            if (!v1140)
            {
              ((void (*)(std::__shared_weak_count *))v1138->__on_zero_shared)(v1138);
              std::__shared_weak_count::__release_weak(v1138);
            }
          }
          v1141 = v1457;
          if (v1457)
          {
            v1142 = (unint64_t *)&v1457->__shared_owners_;
            do
              v1143 = __ldaxr(v1142);
            while (__stlxr(v1143 - 1, v1142));
            if (!v1143)
            {
              ((void (*)(std::__shared_weak_count *))v1141->__on_zero_shared)(v1141);
              std::__shared_weak_count::__release_weak(v1141);
            }
          }
          v1144 = v1459;
          if (v1459)
          {
            v1145 = (unint64_t *)&v1459->__shared_owners_;
            do
              v1146 = __ldaxr(v1145);
            while (__stlxr(v1146 - 1, v1145));
            if (!v1146)
            {
              ((void (*)(std::__shared_weak_count *))v1144->__on_zero_shared)(v1144);
              std::__shared_weak_count::__release_weak(v1144);
            }
          }
          v1147 = v1461;
          if (v1461)
          {
            v1148 = (unint64_t *)&v1461->__shared_owners_;
            do
              v1149 = __ldaxr(v1148);
            while (__stlxr(v1149 - 1, v1148));
            if (!v1149)
            {
              ((void (*)(std::__shared_weak_count *))v1147->__on_zero_shared)(v1147);
              std::__shared_weak_count::__release_weak(v1147);
            }
          }
          v1150 = v1468;
          if (v1468)
          {
            v1151 = (unint64_t *)&v1468->__shared_owners_;
            do
              v1152 = __ldaxr(v1151);
            while (__stlxr(v1152 - 1, v1151));
            if (!v1152)
            {
              ((void (*)(std::__shared_weak_count *))v1150->__on_zero_shared)(v1150);
              std::__shared_weak_count::__release_weak(v1150);
            }
          }
          v1153 = v1474;
          if (v1474)
          {
            v1154 = (unint64_t *)&v1474->__shared_owners_;
            do
              v1155 = __ldaxr(v1154);
            while (__stlxr(v1155 - 1, v1154));
            if (!v1155)
            {
              ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
              std::__shared_weak_count::__release_weak(v1153);
            }
          }
          v1156 = v1480;
          if (v1480)
          {
            v1157 = (unint64_t *)&v1480->__shared_owners_;
            do
              v1158 = __ldaxr(v1157);
            while (__stlxr(v1158 - 1, v1157));
            if (!v1158)
            {
              ((void (*)(std::__shared_weak_count *))v1156->__on_zero_shared)(v1156);
              std::__shared_weak_count::__release_weak(v1156);
            }
          }
          v1159 = v1486;
          if (v1486)
          {
            v1160 = (unint64_t *)&v1486->__shared_owners_;
            do
              v1161 = __ldaxr(v1160);
            while (__stlxr(v1161 - 1, v1160));
            if (!v1161)
            {
              ((void (*)(std::__shared_weak_count *))v1159->__on_zero_shared)(v1159);
              std::__shared_weak_count::__release_weak(v1159);
            }
          }
          v1162 = v1491;
          if (v1491)
          {
            v1163 = (unint64_t *)&v1491->__shared_owners_;
            do
              v1164 = __ldaxr(v1163);
            while (__stlxr(v1164 - 1, v1163));
            if (!v1164)
            {
              ((void (*)(std::__shared_weak_count *))v1162->__on_zero_shared)(v1162);
              std::__shared_weak_count::__release_weak(v1162);
            }
          }
          v851 = v1496;
          if (!v1496)
            return;
          v1165 = (unint64_t *)&v1496->__shared_owners_;
          do
            v853 = __ldaxr(v1165);
          while (__stlxr(v853 - 1, v1165));
          goto LABEL_1974;
        }
      }
    case 6u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      v1484 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1485);
      sub_2231CDAE0(v9, (uint64_t)&v1478);
      sub_2231CDCA4(v9, (uint64_t)&v1472);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      v1450 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1451);
      sub_2231D494C(a4, (uint64_t)&v1444);
      sub_2231D4E60(a4, (uint64_t)&v1438);
      v1252 = *(_QWORD *)(a2 + 764);
      v1263 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      v1422 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1423);
      sub_2231CDAE0(a1 + 8, (uint64_t)&v1416);
      sub_2231CDCA4(a1 + 8, (uint64_t)&v1410);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v710 = atomic_load((unsigned __int8 *)&qword_2540CC790);
      if ((v710 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC790))
      {
        qword_2540CC820 = 0;
        unk_2540CC828 = 0;
        __cxa_guard_release(&qword_2540CC790);
      }
      v711 = atomic_load((unsigned __int8 *)&qword_2540CC7A0);
      if ((v711 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC7A0))
      {
        qword_2540CC798 = 0;
        __cxa_guard_release(&qword_2540CC7A0);
      }
      if (!HIDWORD(v1252) || !(_DWORD)v1252)
        goto LABEL_1530;
      v712 = 0;
      v713 = v1252;
      break;
    case 7u:
      sub_2231CC34C(a5, (uint64_t)v1495);
      sub_2231CC3F0(v9, (uint64_t)v1490);
      sub_2231CD8A8(v9, (uint64_t)&v1484);
      sub_2231CDAE0(v9, (uint64_t)&v1478);
      sub_2231CDCA4(v9, (uint64_t)&v1472);
      sub_2231CC874(v9, (uint64_t)v1467);
      sub_2231D3D90(a4, (uint64_t)v1460);
      sub_2231D4288(a4, (uint64_t)v1458);
      sub_2231D432C(a4, (uint64_t)v1456);
      sub_2231D48A8(a4, (uint64_t)&v1450);
      sub_2231D494C(a4, (uint64_t)&v1444);
      sub_2231D4E60(a4, (uint64_t)&v1438);
      v1267 = *(_QWORD *)(a2 + 764);
      v1286 = sub_2231D021C(a4);
      sub_2231CC34C(a1 + 8, (uint64_t)v1433);
      sub_2231CC3F0(a1 + 8, (uint64_t)v1428);
      sub_2231CD8A8(a1 + 8, (uint64_t)&v1422);
      sub_2231CDAE0(a1 + 8, (uint64_t)&v1416);
      sub_2231CDCA4(a1 + 8, (uint64_t)&v1410);
      sub_2231CC874(a1 + 8, (uint64_t)v1405);
      v1309 = *(float32x4_t *)(v11 + 64);
      v406 = *(float32x4_t *)(v11 + 80);
      v1281 = v406;
      v407 = atomic_load((unsigned __int8 *)&qword_2540CC7A8);
      if ((v407 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC7A8))
      {
        xmmword_2540CC830 = 0uLL;
        __cxa_guard_release(&qword_2540CC7A8);
      }
      v408 = atomic_load((unsigned __int8 *)&qword_2540CC7B8);
      if ((v408 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC7B8))
      {
        qword_2540CC7B0 = 0;
        __cxa_guard_release(&qword_2540CC7B8);
      }
      if (HIDWORD(v1267) && (_DWORD)v1267)
      {
        v409 = 0;
        do
        {
          v410 = 0;
          v406.f32[0] = (float)v409;
          v1292 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v406.f32, 0);
          do
          {
            _H10 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v410 + v1437 * v409));
            __asm { FCVT            S0, H10 }
            v413 = v409 * v1267 + v410;
            if (_S0 > -65504.0)
            {
              _H1 = *(_WORD *)(v1430 + 2 * (v1432 * v409 + v1431 * (_DWORD)v410));
              v416 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v413);
              v1378 = v416 / v1286;
              v1369 = v416 % v1286;
              __asm { FCVT            S1, H1 }
              *(float *)&v403 = _S0;
            }
            else
            {
              _S1 = *(_DWORD *)(v11 + 104);
              LODWORD(v403) = -947920896;
            }
            v404.i32[0] = -947920896;
            v1398[0] = LODWORD(v403);
            v1398[1] = _S1;
            v1352 = v1498 * (_DWORD)v410 + v1499 * v409;
            v1342 = v1497;
            _H0 = *(_WORD *)(v1497 + 2 * v1352);
            __asm { FCVT            S0, H0 }
            v1333 = v1493 * (_DWORD)v410 + v1494 * v409;
            v1326 = v1492;
            _H1 = *(_WORD *)(v1492 + 2 * v1333);
            __asm { FCVT            S1, H1 }
            v1396 = _S0;
            v1397 = _S1;
            if (_NF ^ _VF | _ZF)
            {
              v1363 = qword_2540CC7B0;
              v422 = WORD2(qword_2540CC7B0);
              v421 = WORD1(qword_2540CC7B0);
              v423 = HIWORD(qword_2540CC7B0);
              v1404 = (float32x4_t)xmmword_2540CC830;
            }
            else
            {
              v424 = v1454;
              v425 = v1455;
              v426 = v1453;
              if (!v1453)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v427 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v427 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v428 = qword_255795648;
                  for (i6 = qword_255795650; v428 != i6; v428 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v428)(*(_QWORD *)(v428 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v430 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v430 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              }
              v403 = *(double *)(v426 + 2 * (v424 * v1369 + v425 * v1378));
              v1404 = vmulq_f32(v1281, vcvtq_f32_f16(*(float16x4_t *)&v403));
              v421 = WORD1(v403);
              v422 = WORD2(v403);
              v1363 = LOWORD(v403);
              v423 = HIWORD(v403);
            }
            __asm { FCVT            S10, H10 }
            _Q1 = v1309;
            v1401 = vmulq_f32(v1309, vcvtq_f32_f16(*(float16x4_t *)(v1487 + 2 * (v1488 * (_DWORD)v410 + v1489 * v409))));
            if (_S10 > -65504.0)
              v433 = *(_QWORD *)(v1447 + 2 * (v1448 * v1369 + v1449 * v1378));
            else
              v433 = 0xFE00FE00FE00FE00;
            v1403 = v433;
            v1400 = *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v410 + v1483 * v409));
            if (_S10 > -65504.0)
              v434 = *(_QWORD *)(v1441 + 2 * (v1442 * v1369 + v1443 * v1378));
            else
              v434 = 0xFE00FE00FE00FE00;
            v1402 = v434;
            v1399 = *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v410 + v1477 * v409));
            v435 = (float16x4_t)0x7E007E007E007E00;
            if (_S10 > -65504.0)
              v435 = *(float16x4_t *)(*(_QWORD *)(a1 + 672) + 8
                                                            * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v413));
            v1395 = vcvtq_f32_f16(v435);
            v436 = (float16x4_t *)(v1469 + 2 * (v1470 * (_DWORD)v410 + v1471 * v409));
            v406 = vcvtq_f32_f16(*v436);
            v1394 = v406;
            if (*(_BYTE *)(a1 + 776))
            {
              v437 = v1426;
              v438 = v1427;
              v439 = v1425;
              if (!v1425)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v440 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v440 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v441 = qword_255795648;
                  for (i7 = qword_255795650; v441 != i7; v441 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v441)(*(_QWORD *)(v441 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v443 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v443 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              }
              v444 = (_WORD *)(v439 + 2 * (v437 * (_DWORD)v410 + v438 * v409));
              *v444 = v1363;
              v444[1] = v421;
              v444[2] = v422;
              v444[3] = v423;
              *(_QWORD *)(v1419 + 2 * (v1420 * (_DWORD)v410 + v1421 * v409)) = v1403;
              *(_QWORD *)(v1413 + 2 * (v1414 * (_DWORD)v410 + v1415 * v409)) = v1402;
              v1364 = v1395;
              v445 = v1408;
              v446 = v1409;
              v447 = v1407;
              if (!v1407)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v448 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v448 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v449 = qword_255795648;
                  for (i8 = qword_255795650; v449 != i8; v449 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v449)(*(_QWORD *)(v449 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v451 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v451 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              }
              v406.i64[1] = v1364.i64[1];
              *(float16x4_t *)v406.f32 = vcvt_f16_f32(v1364);
              *(_QWORD *)(v447 + 2 * (v445 * (_DWORD)v410 + v446 * v409)) = v406.i64[0];
            }
            v452 = 0;
            v453 = 0;
            if (v1396 <= 0.0)
            {
              v11 = (uint64_t)a3;
            }
            else
            {
              _Q1.i32[0] = -947920896;
              v11 = (uint64_t)a3;
              if (v1396 > -65504.0)
              {
                v452 = 0;
                v453 = 0;
                v404 = a3[1];
                v405 = a3[2];
                HIDWORD(v403) = v1292.i32[1];
                v454 = vmlaq_n_f32(vaddq_f32(v405, vmlaq_f32(vmulq_n_f32(*a3, (float)v410), v1292, v404)), a3[3], 1.0 / v1396);
                v406 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v454, 2);
                _Q1 = vdivq_f32(v454, v406);
                LODWORD(v403) = -947920896;
                if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
                {
                  v452 = 0;
                  v453 = 0;
                  *(float *)&v403 = (float)v1463;
                  if (_Q1.f32[0] < (float)v1463)
                  {
                    LODWORD(v403) = _Q1.i32[1];
                    v404.f32[0] = (float)v1464;
                    if (_Q1.f32[1] >= 0.0 && _Q1.f32[1] < v404.f32[0])
                    {
                      _H1 = *(_WORD *)(v1462
                                     + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
                      __asm { FCVT            S1, H1 }
                      v453 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
                      *(float *)&v403 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                      v404.i32[0] = 1065772646;
                      v458 = (float)(1.0 / _Q1.f32[3]) * 1.05;
                      if (_Q1.f32[0] < 2.0)
                        v458 = (float)(1.0 / _Q1.f32[3]) + 0.1;
                      v452 = v458 < _Q1.f32[0];
                      if (!v453)
                        v452 = 0;
                    }
                  }
                }
              }
            }
            v406.i32[0] = -947920896;
            if (_S10 > -65504.0 || v452)
            {
              v1297 = v453 | ((unint64_t)v452 << 8) | v1297 & 0xFFFFFFFFFFFF0000;
              sub_2237EBE28(v406, _Q1, v403, *(double *)v404.i64, *(double *)v405.i64, a1 + 784, v11, (uint64_t)&v1401, (uint64_t)&v1396, &v1400, &v1399, (float32x2_t *)&v1394, (uint64_t)&v1404, (uint64_t)v1398, &v1403, &v1402, (float32x2_t *)&v1395, v1297);
              _S0 = v1396;
              __asm { FCVT            H0, S0 }
              *(_WORD *)(v1342 + 2 * v1352) = LOWORD(_S0);
              _S0 = v1397;
              __asm { FCVT            H0, S0 }
              *(_WORD *)(v1326 + 2 * v1333) = _S0;
              *v436 = vcvt_f16_f32(v1394);
              v1365 = v1401;
              v461 = v1488;
              v462 = v1489;
              v463 = v1487;
              if (!v1487)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v464 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v464 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v465 = qword_255795648;
                  for (i9 = qword_255795650; v465 != i9; v465 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v465)(*(_QWORD *)(v465 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v467 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v467 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                v11 = (uint64_t)a3;
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              }
              *(float16x4_t *)v406.f32 = vcvt_f16_f32(v1365);
              *(_QWORD *)(v463 + 2 * (v461 * (_DWORD)v410 + v462 * v409)) = v406.i64[0];
              *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v410 + v1483 * v409)) = v1400;
              *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v410 + v1477 * v409)) = v1399;
            }
            ++v410;
          }
          while (v410 != v1267);
          ++v409;
        }
        while (v409 != HIDWORD(v1267));
      }
      v1166 = v1406;
      if (v1406)
      {
        v1167 = (unint64_t *)&v1406->__shared_owners_;
        do
          v1168 = __ldaxr(v1167);
        while (__stlxr(v1168 - 1, v1167));
        if (!v1168)
        {
          ((void (*)(std::__shared_weak_count *))v1166->__on_zero_shared)(v1166);
          std::__shared_weak_count::__release_weak(v1166);
        }
      }
      v1169 = v1412;
      if (v1412)
      {
        v1170 = (unint64_t *)&v1412->__shared_owners_;
        do
          v1171 = __ldaxr(v1170);
        while (__stlxr(v1171 - 1, v1170));
        if (!v1171)
        {
          ((void (*)(std::__shared_weak_count *))v1169->__on_zero_shared)(v1169);
          std::__shared_weak_count::__release_weak(v1169);
        }
      }
      v1172 = v1418;
      if (v1418)
      {
        v1173 = (unint64_t *)&v1418->__shared_owners_;
        do
          v1174 = __ldaxr(v1173);
        while (__stlxr(v1174 - 1, v1173));
        if (!v1174)
        {
          ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
          std::__shared_weak_count::__release_weak(v1172);
        }
      }
      v1175 = v1424;
      if (v1424)
      {
        v1176 = (unint64_t *)&v1424->__shared_owners_;
        do
          v1177 = __ldaxr(v1176);
        while (__stlxr(v1177 - 1, v1176));
        if (!v1177)
        {
          ((void (*)(std::__shared_weak_count *))v1175->__on_zero_shared)(v1175);
          std::__shared_weak_count::__release_weak(v1175);
        }
      }
      v1178 = v1429;
      if (v1429)
      {
        v1179 = (unint64_t *)&v1429->__shared_owners_;
        do
          v1180 = __ldaxr(v1179);
        while (__stlxr(v1180 - 1, v1179));
        if (!v1180)
        {
          ((void (*)(std::__shared_weak_count *))v1178->__on_zero_shared)(v1178);
          std::__shared_weak_count::__release_weak(v1178);
        }
      }
      v1181 = v1434;
      if (v1434)
      {
        v1182 = (unint64_t *)&v1434->__shared_owners_;
        do
          v1183 = __ldaxr(v1182);
        while (__stlxr(v1183 - 1, v1182));
        if (!v1183)
        {
          ((void (*)(std::__shared_weak_count *))v1181->__on_zero_shared)(v1181);
          std::__shared_weak_count::__release_weak(v1181);
        }
      }
      v1184 = v1440;
      if (v1440)
      {
        v1185 = (unint64_t *)&v1440->__shared_owners_;
        do
          v1186 = __ldaxr(v1185);
        while (__stlxr(v1186 - 1, v1185));
        if (!v1186)
        {
          ((void (*)(std::__shared_weak_count *))v1184->__on_zero_shared)(v1184);
          std::__shared_weak_count::__release_weak(v1184);
        }
      }
      v1187 = v1446;
      if (v1446)
      {
        v1188 = (unint64_t *)&v1446->__shared_owners_;
        do
          v1189 = __ldaxr(v1188);
        while (__stlxr(v1189 - 1, v1188));
        if (!v1189)
        {
          ((void (*)(std::__shared_weak_count *))v1187->__on_zero_shared)(v1187);
          std::__shared_weak_count::__release_weak(v1187);
        }
      }
      v1190 = v1452;
      if (v1452)
      {
        v1191 = (unint64_t *)&v1452->__shared_owners_;
        do
          v1192 = __ldaxr(v1191);
        while (__stlxr(v1192 - 1, v1191));
        if (!v1192)
        {
          ((void (*)(std::__shared_weak_count *))v1190->__on_zero_shared)(v1190);
          std::__shared_weak_count::__release_weak(v1190);
        }
      }
      v1193 = v1457;
      if (v1457)
      {
        v1194 = (unint64_t *)&v1457->__shared_owners_;
        do
          v1195 = __ldaxr(v1194);
        while (__stlxr(v1195 - 1, v1194));
        if (!v1195)
        {
          ((void (*)(std::__shared_weak_count *))v1193->__on_zero_shared)(v1193);
          std::__shared_weak_count::__release_weak(v1193);
        }
      }
      v1196 = v1459;
      if (v1459)
      {
        v1197 = (unint64_t *)&v1459->__shared_owners_;
        do
          v1198 = __ldaxr(v1197);
        while (__stlxr(v1198 - 1, v1197));
        if (!v1198)
        {
          ((void (*)(std::__shared_weak_count *))v1196->__on_zero_shared)(v1196);
          std::__shared_weak_count::__release_weak(v1196);
        }
      }
      v1199 = v1461;
      if (v1461)
      {
        v1200 = (unint64_t *)&v1461->__shared_owners_;
        do
          v1201 = __ldaxr(v1200);
        while (__stlxr(v1201 - 1, v1200));
        if (!v1201)
        {
          ((void (*)(std::__shared_weak_count *))v1199->__on_zero_shared)(v1199);
          std::__shared_weak_count::__release_weak(v1199);
        }
      }
      v1202 = v1468;
      if (v1468)
      {
        v1203 = (unint64_t *)&v1468->__shared_owners_;
        do
          v1204 = __ldaxr(v1203);
        while (__stlxr(v1204 - 1, v1203));
        if (!v1204)
        {
          ((void (*)(std::__shared_weak_count *))v1202->__on_zero_shared)(v1202);
          std::__shared_weak_count::__release_weak(v1202);
        }
      }
      v1205 = v1474;
      if (v1474)
      {
        v1206 = (unint64_t *)&v1474->__shared_owners_;
        do
          v1207 = __ldaxr(v1206);
        while (__stlxr(v1207 - 1, v1206));
        if (!v1207)
        {
          ((void (*)(std::__shared_weak_count *))v1205->__on_zero_shared)(v1205);
          std::__shared_weak_count::__release_weak(v1205);
        }
      }
      v1208 = v1480;
      if (v1480)
      {
        v1209 = (unint64_t *)&v1480->__shared_owners_;
        do
          v1210 = __ldaxr(v1209);
        while (__stlxr(v1210 - 1, v1209));
        if (!v1210)
        {
          ((void (*)(std::__shared_weak_count *))v1208->__on_zero_shared)(v1208);
          std::__shared_weak_count::__release_weak(v1208);
        }
      }
      v1211 = v1486;
      if (v1486)
      {
        v1212 = (unint64_t *)&v1486->__shared_owners_;
        do
          v1213 = __ldaxr(v1212);
        while (__stlxr(v1213 - 1, v1212));
        if (!v1213)
        {
          ((void (*)(std::__shared_weak_count *))v1211->__on_zero_shared)(v1211);
          std::__shared_weak_count::__release_weak(v1211);
        }
      }
      v1214 = v1491;
      if (v1491)
      {
        v1215 = (unint64_t *)&v1491->__shared_owners_;
        do
          v1216 = __ldaxr(v1215);
        while (__stlxr(v1216 - 1, v1215));
        if (!v1216)
        {
          ((void (*)(std::__shared_weak_count *))v1214->__on_zero_shared)(v1214);
          std::__shared_weak_count::__release_weak(v1214);
        }
      }
      v851 = v1496;
      if (!v1496)
        return;
      v1217 = (unint64_t *)&v1496->__shared_owners_;
      do
        v853 = __ldaxr(v1217);
      while (__stlxr(v853 - 1, v1217));
      goto LABEL_1974;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 206, (uint64_t)"", 0, (uint64_t)"Case not handled", 16, (void (*)(void **))sub_22457406C);
      abort();
  }
LABEL_1120:
  v714 = 0;
  _Q0.f32[0] = (float)v712;
  _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
  v1269 = _Q0;
  while (1)
  {
    _H0 = *(_WORD *)(v1435 + 2 * (v1436 * (_DWORD)v714 + v1437 * v712));
    __asm { FCVT            S1, H0 }
    v720 = v712 * v1252 + v714;
    if (_S1 > -65504.0)
    {
      _H2 = *(_WORD *)(v1430 + 2 * (v1432 * v712 + v1431 * (_DWORD)v714));
      v726 = *(_DWORD *)(*(_QWORD *)(a1 + 648) + 4 * v720);
      a4 = v726 / v1263;
      v9 = v726 % v1263;
      __asm { FCVT            S3, H2 }
      *(float *)&v722 = _S1;
      v1377 = *(_QWORD *)(v1447 + 2 * (v1448 * v9 + v1449 * a4));
      __asm { FCVT            S11, H0 }
      if (_S11 > -65504.0)
      {
LABEL_1127:
        v724 = *(_QWORD *)(v1441 + 2 * (v1442 * v9 + v1443 * a4));
        goto LABEL_1131;
      }
    }
    else
    {
      _S3 = *(float *)(v11 + 104);
      *(float *)&v722 = -65504.0;
      v1377 = 0xFE00FE00FE00FE00;
      __asm { FCVT            S11, H0 }
      if (_S11 > -65504.0)
        goto LABEL_1127;
    }
    v724 = 0xFE00FE00FE00FE00;
LABEL_1131:
    v1368 = v724;
    v1337 = *(float *)&v722;
    v1328 = _S3;
    _Q0.i64[0] = 0x7E007E007E007E00;
    v1390 = _Q0;
    _H8 = 32256;
    _H15 = 32256;
    if (_S11 > -65504.0)
    {
      v729 = *(_QWORD *)(a1 + 672) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 648) + 4 * v720);
      _Q0.i32[0] = *(_DWORD *)v729;
      v1390 = _Q0;
      _H15 = *(_WORD *)(v729 + 4);
      _H8 = *(_WORD *)(v729 + 6);
    }
    v730 = v1498 * (_DWORD)v714 + v1499 * v712;
    v731 = v1497;
    _H12 = *(_WORD *)(v1497 + 2 * v730);
    v1319 = v1493 * (_DWORD)v714 + v1494 * v712;
    v1312 = v1492;
    v1345 = *(_WORD *)(v1492 + 2 * v1319);
    v733 = *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v714 + v1483 * v712));
    v1356 = *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v714 + v1477 * v712));
    v734 = v1469 + 2 * (v1470 * (_DWORD)v714 + v1471 * v712);
    v7.i32[0] = *(_DWORD *)v734;
    _H10 = *(_WORD *)(v734 + 4);
    v1307 = (_QWORD *)v734;
    _H9 = *(_WORD *)(v734 + 6);
    if (*(_BYTE *)(a1 + 776))
    {
      v1289 = *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v714 + v1483 * v712));
      v1295 = v1497;
      v1302 = v1498 * (_DWORD)v714 + v1499 * v712;
      v737 = v9;
      v738 = a4;
      *(_QWORD *)(v1419 + 2 * (v1420 * (_DWORD)v714 + v1421 * v712)) = v1377;
      *(_QWORD *)(v1413 + 2 * (v1414 * (_DWORD)v714 + v1415 * v712)) = v724;
      v739 = v1408;
      v740 = v1409;
      v741 = v1407;
      if (!v1407)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v742 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v742 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v743 = qword_255795648;
          for (i10 = qword_255795650; v743 != i10; v743 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v743)(*(_QWORD *)(v743 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v745 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v745 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v11 = (uint64_t)a3;
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        v713 = v1252;
      }
      v746 = v741 + 2 * (v739 * (_DWORD)v714 + v740 * v712);
      _Q0 = v1390;
      *(_DWORD *)v746 = v1390.i32[0];
      *(_WORD *)(v746 + 4) = _H15;
      *(_WORD *)(v746 + 6) = _H8;
      a4 = v738;
      v9 = v737;
      v730 = v1302;
      v731 = v1295;
      v733 = v1289;
    }
    v747 = 0;
    v748 = 0;
    __asm
    {
      FCVT            S14, H12
      FCVT            S2, H12
    }
    if (_S2 > 0.0 && _S2 > -65504.0)
    {
      v747 = 0;
      v748 = 0;
      v751 = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v11 + 32), vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v11, (float)v714), v1269, *(float32x4_t *)(v11 + 16))), *(float32x4_t *)(v11 + 48), 1.0 / _S14);
      _Q0 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v751, 2);
      _Q1 = vdivq_f32(v751, _Q0);
      if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
      {
        v747 = 0;
        v748 = 0;
        if (_Q1.f32[0] < (float)v1463 && _Q1.f32[1] >= 0.0 && _Q1.f32[1] < (float)v1464)
        {
          _H1 = *(_WORD *)(v1462 + 2 * (v1465 * _Q1.f32[0] + v1466 * _Q1.f32[1]));
          __asm { FCVT            S1, H1 }
          v748 = _Q1.f32[0] > -65504.0 && _Q1.f32[0] > 0.0;
          v756 = (float)(1.0 / _Q1.f32[3]) * 1.05;
          if (_Q1.f32[0] < 2.0)
            v756 = (float)(1.0 / _Q1.f32[3]) + 0.1;
          v747 = v756 < _Q1.f32[0];
          if (!v748)
            v747 = 0;
        }
      }
    }
    if (_S11 <= -65504.0 && !v747)
      goto LABEL_1123;
    _H0 = v1345;
    __asm { FCVT            S12, H0 }
    _Q0.i64[1] = v1390.i64[1];
    v759 = vcvtq_f32_f16(*(float16x4_t *)v1390.f32);
    __asm
    {
      FCVT            S17, H15
      FCVT            S15, H8
    }
    v761 = v759;
    v761.i32[2] = _Q17;
    v762 = vcvtq_f32_f16(v7);
    __asm
    {
      FCVT            S19, H10
      FCVT            S0, H9
    }
    v763 = v762;
    v763.i32[2] = _D19.i32[0];
    v764 = *(float *)(v11 + 112);
    v765 = *(float *)(v11 + 104);
    v766 = v1337;
    if (v1337 > 0.0 && v1328 > v765)
    {
      if (_S2 <= 0.0 || v765 >= _S12)
      {
        if (_S2 <= 0.0 || v1328 > v764)
        {
LABEL_1185:
          v1356 = v1368;
          _S12 = v1328;
          _S14 = v1337;
          v733 = v1377;
          _Q0.i32[0] = _S15;
          v763 = v761;
        }
LABEL_1186:
        if (!v748)
          goto LABEL_1121;
        goto LABEL_1187;
      }
      if (v1328 <= 0.0)
      {
        v769 = 0.01;
        _H3 = v1345;
        __asm { FCVT            S3, H3 }
        if (_S3 <= 0.0)
          goto LABEL_1178;
      }
      else if (v1328 >= 1.0)
      {
        v769 = 0.0001;
        _H3 = v1345;
        __asm { FCVT            S3, H3 }
        if (_S3 <= 0.0)
          goto LABEL_1178;
      }
      else
      {
        v767 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
        v768 = 0.01;
        if (v767 <= 0.01)
          v768 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
        if (v767 >= 0.0001)
          v769 = v768;
        else
          v769 = 0.0001;
        _H3 = v1345;
        __asm { FCVT            S3, H3 }
        if (_S3 <= 0.0)
        {
LABEL_1178:
          v772 = (float)(v1337 - _S14) * (float)(v1337 - _S14);
          v773 = 0.01;
          goto LABEL_1206;
        }
      }
      if (_S3 < 1.0)
      {
        v775 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
        v776 = 0.01;
        if (v775 <= 0.01)
          v776 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
        if (v775 >= 0.0001)
          v777 = v776;
        else
          v777 = 0.0001;
        if ((float)((float)((float)(v1337 - _S14) * (float)(v1337 - _S14)) / (float)(v777 + v769)) >= 1.1)
          goto LABEL_1198;
LABEL_1207:
        v1254 = v763;
        v1296 = _D19;
        if (v1328 <= 0.0)
        {
          *(float *)&v782 = 0.01;
        }
        else
        {
          if (v1328 < 1.0)
          {
            v779 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
            v780 = 0.01;
            if (v779 <= 0.01)
              v780 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
            if (v779 >= 0.0001)
              v781 = v780;
            else
              v781 = 0.0001;
LABEL_1222:
            v1290 = *(float32x2_t *)v762.f32;
            v1303 = *(float32x2_t *)v759.f32;
            v1346 = _Q17;
            v1391 = v761;
            v787 = (float)(v777 * v781) / (float)(v777 + v781);
            _S12 = 1.0;
            if (v787 > 0.0001)
            {
              _S12 = 0.0;
              if (v787 < 0.01)
              {
                v788 = 1.0;
                v789 = (float)((float)(sqrtf(v787) + -0.01) / -0.09) + 1.0;
                if (v789 <= 1.0)
                  v788 = v789;
                if (v789 >= 0.0)
                  _S12 = v788;
                else
                  _S12 = 0.0;
              }
            }
            v1401.i64[0] = v733;
            v1395.i64[0] = v1377;
            sub_2237EE37C((unint64_t *)&v1401, (unsigned __int16 *)&v1395, *(_BYTE *)(v11 + 118), (__int16 *)&v1404);
            v790 = v1404.i64[0];
            v1394.i64[0] = v1356;
            v1403 = v1368;
            sub_2237EE37C((unint64_t *)&v1394, (unsigned __int16 *)&v1403, *(_BYTE *)(v11 + 121), (__int16 *)&v1404);
            _Q0.i64[1] = *((_QWORD *)&v1346 + 1);
            v761 = v1391;
            v791 = v1391;
            v733 = v790;
            v713 = v1252;
            if (vmla_f32(vmla_lane_f32(vmul_f32(v1290, v1303), (float32x2_t)vdup_lane_s32((int32x2_t)v1303, 1), v1290, 1), *(float32x2_t *)&v1346, v1296).f32[0] > 0.70711)
            {
              if (v1328 <= 0.0)
              {
                v794 = 0.01;
                if (_S12 <= 0.0)
                  goto LABEL_1238;
              }
              else if (v1328 >= 1.0)
              {
                v794 = 0.0001;
                if (_S12 <= 0.0)
                  goto LABEL_1238;
              }
              else
              {
                v792 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
                v793 = 0.01;
                if (v792 <= 0.01)
                  v793 = (float)((float)(v1328 * -0.09) + 0.1) * (float)((float)(v1328 * -0.09) + 0.1);
                if (v792 >= 0.0001)
                  v794 = v793;
                else
                  v794 = 0.0001;
                if (_S12 <= 0.0)
                {
LABEL_1238:
                  *(float *)&v795 = 0.01;
                  goto LABEL_1249;
                }
              }
              if (_S12 >= 1.0)
              {
                *(float *)&v795 = 0.0001;
LABEL_1249:
                v798 = *(float *)&v795;
              }
              else
              {
                v796 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                v797 = 0.01;
                if (v796 <= 0.01)
                  v797 = (float)((float)(_S12 * -0.09) + 0.1) * (float)((float)(_S12 * -0.09) + 0.1);
                if (v796 >= 0.0001)
                  v798 = v797;
                else
                  v798 = 0.0001;
              }
              v791.f32[0] = v794 + v798;
              _Q0 = vaddq_f32(vmulq_n_f32(v1254, v794), vmulq_n_f32(v1391, v798));
              v791 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v791.f32, 0));
            }
            v766 = v1337;
            _S14 = (float)((float)(v1337 * v777) + (float)(v781 * _S14)) / (float)(v777 + v781);
            v1356 = v1404.i64[0];
            v765 = *(float *)(v11 + 104);
            _Q0.i32[0] = 1.0;
            v763 = v791;
LABEL_1252:
            v799 = *(float *)(v11 + 100);
            if (v799 >= _S12)
              v799 = _S12;
            if (_S12 >= v765)
              _S12 = v799;
            else
              _S12 = v765;
            if (!v748)
              goto LABEL_1121;
            goto LABEL_1187;
          }
          *(float *)&v782 = 0.0001;
        }
        v781 = *(float *)&v782;
        goto LABEL_1222;
      }
      v772 = (float)(v1337 - _S14) * (float)(v1337 - _S14);
      v773 = 0.0001;
LABEL_1206:
      v777 = v773;
      if ((float)(v772 / (float)(v769 + v773)) < 1.1)
        goto LABEL_1207;
LABEL_1198:
      if (v1337 <= _S14 || v747)
      {
        if (v748 && v1328 > v764)
        {
          v1356 = v1368;
          _S12 = v1328;
          _S14 = v1337;
          v733 = v1377;
          _Q0.i32[0] = _S15;
          v763 = v761;
        }
        else if (v748 || v1328 > v764)
        {
          v783 = *(float *)(v11 + 108);
          v784 = (float)((float)((float)(v783 * -0.1) + 0.01) / 0.09) + 1.0;
          v785 = (float)-v784 / v783;
          v786 = (float)(v783 * _S12) + v784;
          if (v785 <= _S12)
            _S12 = v786;
          else
            _S12 = 0.0;
        }
      }
      goto LABEL_1252;
    }
    if (!v747)
      goto LABEL_1186;
    if (v1337 > 0.0)
      goto LABEL_1185;
    _S12 = *(float *)(v11 + 104);
    if (!v748)
      goto LABEL_1121;
LABEL_1187:
    if (_S12 <= v765)
    {
      v715 = v1356;
      if (v1328 > v764)
      {
        v715 = v1368;
        _S12 = v1328;
        _S14 = v766;
        v733 = v1377;
        _Q0.i32[0] = _S15;
        v763 = v761;
      }
      goto LABEL_1122;
    }
LABEL_1121:
    v715 = v1356;
LABEL_1122:
    __asm { FCVT            H1, S14 }
    *(_WORD *)(v731 + 2 * v730) = _H1;
    __asm { FCVT            H1, S12 }
    *(_WORD *)(v1312 + 2 * v1319) = _H1;
    v763.i32[3] = _Q0.i32[0];
    *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(v763);
    *v1307 = _Q0.i64[0];
    *(_QWORD *)(v1481 + 2 * (v1482 * (_DWORD)v714 + v1483 * v712)) = v733;
    *(_QWORD *)(v1475 + 2 * (v1476 * (_DWORD)v714 + v1477 * v712)) = v715;
LABEL_1123:
    if (++v714 == v713)
    {
      if (++v712 == HIDWORD(v1252))
      {
LABEL_1530:
        v958 = v1406;
        if (v1406)
        {
          v959 = (unint64_t *)&v1406->__shared_owners_;
          do
            v960 = __ldaxr(v959);
          while (__stlxr(v960 - 1, v959));
          if (!v960)
          {
            ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
            std::__shared_weak_count::__release_weak(v958);
          }
        }
        v961 = v1412;
        if (v1412)
        {
          v962 = (unint64_t *)&v1412->__shared_owners_;
          do
            v963 = __ldaxr(v962);
          while (__stlxr(v963 - 1, v962));
          if (!v963)
          {
            ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
            std::__shared_weak_count::__release_weak(v961);
          }
        }
        v964 = v1418;
        if (v1418)
        {
          v965 = (unint64_t *)&v1418->__shared_owners_;
          do
            v966 = __ldaxr(v965);
          while (__stlxr(v966 - 1, v965));
          if (!v966)
          {
            ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
            std::__shared_weak_count::__release_weak(v964);
          }
        }
        v967 = v1424;
        if (v1424)
        {
          v968 = (unint64_t *)&v1424->__shared_owners_;
          do
            v969 = __ldaxr(v968);
          while (__stlxr(v969 - 1, v968));
          if (!v969)
          {
            ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
            std::__shared_weak_count::__release_weak(v967);
          }
        }
        v970 = v1429;
        if (v1429)
        {
          v971 = (unint64_t *)&v1429->__shared_owners_;
          do
            v972 = __ldaxr(v971);
          while (__stlxr(v972 - 1, v971));
          if (!v972)
          {
            ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
            std::__shared_weak_count::__release_weak(v970);
          }
        }
        v973 = v1434;
        if (v1434)
        {
          v974 = (unint64_t *)&v1434->__shared_owners_;
          do
            v975 = __ldaxr(v974);
          while (__stlxr(v975 - 1, v974));
          if (!v975)
          {
            ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
            std::__shared_weak_count::__release_weak(v973);
          }
        }
        v976 = v1440;
        if (v1440)
        {
          v977 = (unint64_t *)&v1440->__shared_owners_;
          do
            v978 = __ldaxr(v977);
          while (__stlxr(v978 - 1, v977));
          if (!v978)
          {
            ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
            std::__shared_weak_count::__release_weak(v976);
          }
        }
        v979 = v1446;
        if (v1446)
        {
          v980 = (unint64_t *)&v1446->__shared_owners_;
          do
            v981 = __ldaxr(v980);
          while (__stlxr(v981 - 1, v980));
          if (!v981)
          {
            ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
            std::__shared_weak_count::__release_weak(v979);
          }
        }
        v982 = v1452;
        if (v1452)
        {
          v983 = (unint64_t *)&v1452->__shared_owners_;
          do
            v984 = __ldaxr(v983);
          while (__stlxr(v984 - 1, v983));
          if (!v984)
          {
            ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
            std::__shared_weak_count::__release_weak(v982);
          }
        }
        v985 = v1457;
        if (v1457)
        {
          v986 = (unint64_t *)&v1457->__shared_owners_;
          do
            v987 = __ldaxr(v986);
          while (__stlxr(v987 - 1, v986));
          if (!v987)
          {
            ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
            std::__shared_weak_count::__release_weak(v985);
          }
        }
        v988 = v1459;
        if (v1459)
        {
          v989 = (unint64_t *)&v1459->__shared_owners_;
          do
            v990 = __ldaxr(v989);
          while (__stlxr(v990 - 1, v989));
          if (!v990)
          {
            ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
            std::__shared_weak_count::__release_weak(v988);
          }
        }
        v991 = v1461;
        if (v1461)
        {
          v992 = (unint64_t *)&v1461->__shared_owners_;
          do
            v993 = __ldaxr(v992);
          while (__stlxr(v993 - 1, v992));
          if (!v993)
          {
            ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
            std::__shared_weak_count::__release_weak(v991);
          }
        }
        v994 = v1468;
        if (v1468)
        {
          v995 = (unint64_t *)&v1468->__shared_owners_;
          do
            v996 = __ldaxr(v995);
          while (__stlxr(v996 - 1, v995));
          if (!v996)
          {
            ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
            std::__shared_weak_count::__release_weak(v994);
          }
        }
        v997 = v1474;
        if (v1474)
        {
          v998 = (unint64_t *)&v1474->__shared_owners_;
          do
            v999 = __ldaxr(v998);
          while (__stlxr(v999 - 1, v998));
          if (!v999)
          {
            ((void (*)(std::__shared_weak_count *))v997->__on_zero_shared)(v997);
            std::__shared_weak_count::__release_weak(v997);
          }
        }
        v1000 = v1480;
        if (v1480)
        {
          v1001 = (unint64_t *)&v1480->__shared_owners_;
          do
            v1002 = __ldaxr(v1001);
          while (__stlxr(v1002 - 1, v1001));
          if (!v1002)
          {
            ((void (*)(std::__shared_weak_count *))v1000->__on_zero_shared)(v1000);
            std::__shared_weak_count::__release_weak(v1000);
          }
        }
        v1003 = v1486;
        if (v1486)
        {
          v1004 = (unint64_t *)&v1486->__shared_owners_;
          do
            v1005 = __ldaxr(v1004);
          while (__stlxr(v1005 - 1, v1004));
          if (!v1005)
          {
            ((void (*)(std::__shared_weak_count *))v1003->__on_zero_shared)(v1003);
            std::__shared_weak_count::__release_weak(v1003);
          }
        }
        v1006 = v1491;
        if (v1491)
        {
          v1007 = (unint64_t *)&v1491->__shared_owners_;
          do
            v1008 = __ldaxr(v1007);
          while (__stlxr(v1008 - 1, v1007));
          if (!v1008)
          {
            ((void (*)(std::__shared_weak_count *))v1006->__on_zero_shared)(v1006);
            std::__shared_weak_count::__release_weak(v1006);
          }
        }
        v851 = v1496;
        if (!v1496)
          return;
        v1009 = (unint64_t *)&v1496->__shared_owners_;
        do
          v853 = __ldaxr(v1009);
        while (__stlxr(v853 - 1, v1009));
        goto LABEL_1974;
      }
      goto LABEL_1120;
    }
  }
}

