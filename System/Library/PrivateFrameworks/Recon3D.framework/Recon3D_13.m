void sub_22362649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_2236264AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_2236264C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2236264DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223626428);
    JUMPOUT(0x2236263F8);
  }
  sub_2233236D4(3u);
}

void sub_22362653C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x2236265ACLL);
  JUMPOUT(0x223626584);
}

uint64_t *sub_2236265BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55928;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2235CC310(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2235CC310(&v23);
}

void sub_223626770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2235CC310((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2235CC310((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223626780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2235CC310(&a15);
  _Unwind_Resume(a1);
}

void sub_22362679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2235CC310((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2236267B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x2236266FCLL);
    JUMPOUT(0x2236266CCLL);
  }
  sub_2233236D4(3u);
}

void sub_223626810(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223626880);
  JUMPOUT(0x223626858);
}

void sub_223626890(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2236268DC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22362693C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 96);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_2236269E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55928;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2235CC310(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2235CC310(&v23);
}

void sub_223626B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2235CC310((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2235CC310((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223626BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2235CC310(&a15);
  _Unwind_Resume(a1);
}

void sub_223626BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2235CC310((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223626BD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223626B24);
    JUMPOUT(0x223626AF4);
  }
  sub_2233236D4(3u);
}

void sub_223626C38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223626CA8);
  JUMPOUT(0x223626C80);
}

uint64_t sub_223626CB8(uint64_t *a1, uint64_t a2)
{
  std::promise<void> *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::runtime_error v14;
  std::__assoc_sub_state *state;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::promise<void> v18;

  v4 = std::promise<void>::promise(&v18);
  std::promise<void>::get_future(v4);
  v16 = 0;
  v17 = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5), (v17 = v6) == 0) || (v7 = v6, v8 = *a1, (v16 = v8) == 0))
  {
    std::runtime_error::runtime_error(&v14, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v14.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v14);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v13, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  state = v18.__state_;
  v18.__state_ = 0;
  (*(void (**)(uint64_t, uint64_t, std::__assoc_sub_state **))(*(_QWORD *)v8 + 56))(v8, a2, &state);
  MEMORY[0x227684B68](&state);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return MEMORY[0x227684B68](&v18);
}

uint64_t *sub_223626E68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC55898;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234DDE8C(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234DDE8C(&v23);
}

void sub_22362701C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234DDE8C((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234DDE8C((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_22362702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234DDE8C(&a15);
  _Unwind_Resume(a1);
}

void sub_223627048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234DDE8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22362705C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223626FA8);
    JUMPOUT(0x223626F78);
  }
  sub_2233236D4(3u);
}

void sub_2236270BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x22362712CLL);
  JUMPOUT(0x223627104);
}

uint64_t *sub_22362713C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_2236272F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223627300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_22362731C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223627330(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x22362727CLL);
    JUMPOUT(0x22362724CLL);
  }
  sub_2233236D4(3u);
}

void sub_223627390(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223627400);
  JUMPOUT(0x2236273D8);
}

_DWORD *sub_223627410(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC54F88[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223627500(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC54F88[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2236275F4()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223627608(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC55970;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223627640(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC55970;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223627660(uint64_t a1)
{
  sub_2236196D0(*(_QWORD *)(a1 + 8));
}

uint64_t sub_223627668(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3sng16SessionNodeGroup4Impl28ProcessSaveWor"
                     "kerSnapshotsToERKNS6_21SaveSnapshotToRequestEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3sng16SessionNodeGroup4Impl28Pro"
                                "cessSaveWorkerSnapshotsToERKNS6_21SaveSnapshotToRequestEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3sng16SessionNodeGroup4Impl28ProcessSaveWorkerSnapshotsToERKNS6_21SaveSnapshotToRequestEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3sng16SessionNodeGroup4Impl28ProcessSaveWorkerSnapshotsToERKNS6_21SaveSnapshotToRequestEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236276D4()
{
  return &unk_24EC559D0;
}

void sub_2236276E0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22362772C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22362778C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(unint64_t **)(a1 + 144);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v3 = v2 + 1;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_223627800(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24EC55A38;
  v2 = *(unint64_t **)(a1 + 152);
  if (!v2)
    goto LABEL_5;
  v3 = v2 + 1;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(unint64_t *))(*v2 + 16))(v2);
    v5 = *(unint64_t **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(unint64_t **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  v6 = v5 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v5 + 16))(v5);
LABEL_11:
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2236278BC(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24EC55A38;
  v2 = *(unint64_t **)(a1 + 152);
  if (!v2)
    goto LABEL_5;
  v3 = v2 + 1;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(unint64_t *))(*v2 + 16))(v2);
    v5 = *(unint64_t **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(unint64_t **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  v6 = v5 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v5 + 16))(v5);
LABEL_11:
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

void sub_22362798C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::unique_lock<std::mutex> __lk;

  v2 = *(_QWORD *)(a1 + 144);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v2, &__lk);
  v3 = *(_QWORD *)(v2 + 16);
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (v3)
    goto LABEL_14;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (*(_BYTE *)(v2 + 140))
  {
    v2 = *(_QWORD *)(a1 + 152);
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 24);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v2 + 24));
    std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v2, &__lk);
    v4 = *(_QWORD *)(v2 + 16);
    v8.__ptr_ = 0;
    std::exception_ptr::~exception_ptr(&v8);
    if (!v4)
    {
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      v5 = *(_BYTE *)(v2 + 140) != 0;
      goto LABEL_10;
    }
LABEL_14:
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(v2 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
    return;
  }
  v5 = 0;
LABEL_10:
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (__lk.__m_ = 0, v6 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr((std::exception_ptr *)&__lk), v6))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(a1 + 140) = v5;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_223627AF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__assoc_sub_state *v18;
  std::exception_ptr v20;
  std::exception_ptr v21;
  std::exception_ptr v22[2];
  char v23;

  std::exception_ptr::~exception_ptr(v22);
  if (v23)
    std::mutex::unlock((std::mutex *)v22[1].__ptr_);
  __cxa_begin_catch(a1);
  std::current_exception();
  v20.__ptr_ = &v21;
  std::__assoc_sub_state::set_exception(v18, v20);
  std::exception_ptr::~exception_ptr(&v21);
  __cxa_end_catch();
}

void sub_223627B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_223627B94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC557C0;
  v23 = v6;
  *a1 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a2[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a2, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a3, &v20);
  sub_2234AB028(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_2234AB028(&v23);
}

void sub_223627D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2234AB028((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_2234AB028((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_223627D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_2234AB028(&a15);
  _Unwind_Resume(a1);
}

void sub_223627D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2234AB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223627D88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x223627CD4);
    JUMPOUT(0x223627CA4);
  }
  sub_2233236D4(3u);
}

void sub_223627DE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x223627E58);
  JUMPOUT(0x223627E30);
}

void sub_223627E68()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFE0))
  {
    sub_2236289A4();
    v1 = byte_2540CBC77;
    if (byte_2540CBC77 >= 0)
      v2 = byte_2540CBC77;
    else
      v2 = qword_2540CBC68;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_2540CBC48 + 1) = v2 + 1;
      unk_2540CBC58 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2540CBC48 = v4;
    }
    else
    {
      v4 = &xmmword_2540CBC48;
      unk_2540CBC58 = 0;
      xmmword_2540CBC48 = 0uLL;
      byte_2540CBC5F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBC48, &dword_22314D000);
        __cxa_guard_release(&qword_2540CAFE0);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_2540CBC60;
    else
      v7 = (uint64_t *)qword_2540CBC60;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_223627FA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFE0);
  _Unwind_Resume(a1);
}

void sub_223627FC0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAF98))
  {
    sub_223628140();
    v1 = byte_2540CBB9F;
    if (byte_2540CBB9F >= 0)
      v2 = byte_2540CBB9F;
    else
      v2 = *((_QWORD *)&xmmword_2540CBB88 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2540CBB78 = v2 + 6;
      unk_2540CBB80 = v6 | 0x8000000000000000;
      qword_2540CBB70 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2540CBB78 = 0;
      unk_2540CBB80 = 0;
      qword_2540CBB70 = 0x2074736E6F63;
      byte_2540CBB87 = v2 + 6;
      v4 = (char *)&qword_2540CBB70 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBB70, &dword_22314D000);
        __cxa_guard_release(&qword_2540CAF98);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2540CBB88;
    else
      v8 = (__int128 *)xmmword_2540CBB88;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223628128(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAF98);
  _Unwind_Resume(a1);
}

void sub_223628140()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFA0))
  {
    sub_2236281F8();
    if (byte_2540CBBB7 < 0)
    {
      sub_223197FA4(&xmmword_2540CBB88, (void *)qword_2540CBBA0, unk_2540CBBA8);
    }
    else
    {
      xmmword_2540CBB88 = *(_OWORD *)&qword_2540CBBA0;
      unk_2540CBB98 = unk_2540CBBB0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBB88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFA0);
  }
}

void sub_2236281E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFA0);
  _Unwind_Resume(a1);
}

void sub_2236281F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFA8))
  {
    sub_223628400(__p);
    sub_2236282CC((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBBA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFA8);
  }
}

void sub_22362828C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAFA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAFA8);
  _Unwind_Resume(a1);
}

void sub_2236282CC(char *a1)
{
  __int128 *v2;
  __int128 v3;
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *__dst[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_223621F24();
  if (*((char *)v2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    v12 = *((_QWORD *)v2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CBBA0, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_2236283C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223628400(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAFB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFB0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::frame::FrameBundle>]", qword_2540CBBB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBBB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CAFB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFB8))
  {
    v5 = sub_2231A38CC(qword_2540CBBB8, "<", 0);
    sub_2231A37C8(qword_2540CBBB8, 0, v5, qword_2540CBBD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBBD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CAFC0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFC0))
  {
    sub_224573040((uint64_t)qword_2540CBBD0, (uint64_t)&xmmword_2540CBBE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBBE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFC0);
  }
  if (byte_2540CBBFF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBBE8, *((unint64_t *)&xmmword_2540CBBE8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBBE8;
    __dst[2] = unk_2540CBBF8;
  }
}

void sub_223628594(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFC0);
  _Unwind_Resume(a1);
}

void sub_2236285AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFB8);
  _Unwind_Resume(a1);
}

void sub_2236285C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFB0);
  _Unwind_Resume(a1);
}

char *sub_2236285DC(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_22316E078();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_223174E94();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  v9 = &v7[88 * v6];
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v8 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v8 + 4) = v10;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v11 = v8 + 88;
  v12 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_QWORD *)v13 - 11);
      v13 -= 88;
      v15 = *((_DWORD *)v13 + 2);
      *((_QWORD *)v8 - 11) = v14;
      v8 -= 88;
      *((_DWORD *)v8 + 2) = v15;
      v16 = *((_OWORD *)v13 + 1);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v13 + 4);
      *((_OWORD *)v8 + 1) = v16;
      *((_QWORD *)v13 + 3) = 0;
      *((_QWORD *)v13 + 4) = 0;
      *((_QWORD *)v13 + 2) = 0;
      v17 = *(_OWORD *)(v13 + 40);
      *((_QWORD *)v8 + 7) = *((_QWORD *)v13 + 7);
      *(_OWORD *)(v8 + 40) = v17;
      *((_QWORD *)v13 + 6) = 0;
      *((_QWORD *)v13 + 7) = 0;
      *((_QWORD *)v13 + 5) = 0;
      v18 = *((_OWORD *)v13 + 4);
      *((_QWORD *)v8 + 10) = *((_QWORD *)v13 + 10);
      *((_OWORD *)v8 + 4) = v18;
      *((_QWORD *)v13 + 8) = 0;
      *((_QWORD *)v13 + 9) = 0;
      *((_QWORD *)v13 + 10) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v19 = a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v19 == v13)
        goto LABEL_24;
      if (*(v19 - 1) < 0)
      {
        operator delete(*((void **)v19 - 3));
        if (*(v19 - 25) < 0)
        {
LABEL_21:
          operator delete(*((void **)v19 - 6));
          if ((*(v19 - 49) & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_22;
        }
      }
      else if (*(v19 - 25) < 0)
      {
        goto LABEL_21;
      }
      if ((*(v19 - 49) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_22:
      operator delete(*((void **)v19 - 9));
LABEL_14:
      v19 -= 88;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_24:
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_2236287EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFC8))
  {
    sub_2236288A4();
    if (byte_2540CBC47 < 0)
    {
      sub_223197FA4(&xmmword_2540CBC00, (void *)xmmword_2540CBC30, *((unint64_t *)&xmmword_2540CBC30 + 1));
    }
    else
    {
      xmmword_2540CBC00 = xmmword_2540CBC30;
      unk_2540CBC10 = unk_2540CBC40;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBC00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFC8);
  }
}

void sub_22362888C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFC8);
  _Unwind_Resume(a1);
}

void sub_2236288A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFD0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::frame::FrameBundle (const cv3d::recon::frame::FrameBundle &)]", qword_2540CBC18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBC18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFD0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CAFD8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CAFD8))
    {
      sub_224573040((uint64_t)qword_2540CBC18, (uint64_t)&xmmword_2540CBC30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBC30, &dword_22314D000);
      __cxa_guard_release(&qword_2540CAFD8);
    }
  }
}

void sub_223628974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFD8);
  _Unwind_Resume(a1);
}

void sub_22362898C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFD0);
  _Unwind_Resume(a1);
}

void sub_2236289A4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFE8))
  {
    sub_223628B24();
    v1 = byte_2540CBC8F;
    if (byte_2540CBC8F >= 0)
      v2 = byte_2540CBC8F;
    else
      v2 = *((_QWORD *)&xmmword_2540CBC78 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2540CBC68 = v2 + 6;
      unk_2540CBC70 = v6 | 0x8000000000000000;
      qword_2540CBC60 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2540CBC68 = 0;
      unk_2540CBC70 = 0;
      qword_2540CBC60 = 0x2074736E6F63;
      byte_2540CBC77 = v2 + 6;
      v4 = (char *)&qword_2540CBC60 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBC60, &dword_22314D000);
        __cxa_guard_release(&qword_2540CAFE8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2540CBC78;
    else
      v8 = (__int128 *)xmmword_2540CBC78;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223628B0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFE8);
  _Unwind_Resume(a1);
}

void sub_223628B24()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFF0))
  {
    sub_223628BDC();
    if (byte_2540CBCA7 < 0)
    {
      sub_223197FA4(&xmmword_2540CBC78, (void *)qword_2540CBC90, unk_2540CBC98);
    }
    else
    {
      xmmword_2540CBC78 = *(_OWORD *)&qword_2540CBC90;
      unk_2540CBC88 = unk_2540CBCA0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBC78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFF0);
  }
}

void sub_223628BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAFF0);
  _Unwind_Resume(a1);
}

void sub_223628BDC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAFF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAFF8))
  {
    sub_223628DC8(__p);
    sub_223628CB8((std::string *)&qword_2540CBC90, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBC90, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAFF8);
  }
}

void sub_223628C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAFF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAFF8);
  _Unwind_Resume(a1);
}

void sub_223628CB8(std::string *a1, char *a2)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"void";
  v12 = 0x400000000000000;
  sub_22319BD1C(&__p, (uint64_t)v11, 1uLL);
  sub_2245730F4(a2, (uint64_t *)&__p, a1, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_223628D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223628DC8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB000);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB000))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelError<void>]", qword_2540CBCA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBCA8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB000);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB008);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB008))
  {
    v5 = sub_2231A38CC(qword_2540CBCA8, "<", 0);
    sub_2231A37C8(qword_2540CBCA8, 0, v5, qword_2540CBCC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBCC0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB008);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB010);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB010))
  {
    sub_224573040((uint64_t)qword_2540CBCC0, (uint64_t)&xmmword_2540CBCD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBCD8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB010);
  }
  if (byte_2540CBCEF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBCD8, *((unint64_t *)&xmmword_2540CBCD8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBCD8;
    __dst[2] = unk_2540CBCE8;
  }
}

void sub_223628F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB010);
  _Unwind_Resume(a1);
}

void sub_223628F74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB008);
  _Unwind_Resume(a1);
}

void sub_223628F8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB000);
  _Unwind_Resume(a1);
}

char *sub_223628FA4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_22316E078();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_223174E94();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = &v7[40 * v6];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v10;
  *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v8 + 40;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 40) = *(_OWORD *)(v13 - 5);
      v14 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 40;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 5;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (v15 != v13)
    {
      if (*((char *)v15 - 1) < 0)
        operator delete(*(v15 - 3));
      v15 -= 5;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_223629100(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, uint64_t *a5, __int128 *a6)
{
  __int128 v8;
  __int128 v9;

  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *a6;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 24) = v9;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_22362921C(a1 + 56, *a4, a4[1], 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_223629560((_BYTE *)(a1 + 104), *a5, a5[1], 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
  return a1;
}

void sub_2236291C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  sub_22361923C(v3);
  sub_223620C94(v2);
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*(void **)(v1 + 24));
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22362921C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
      sub_22316E078();
    result = (uint64_t)operator new(88 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 88 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_223629434(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 88;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2236292DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22362936C(&a9);
  _Unwind_Resume(a1);
}

void sub_2236292F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_22362936C(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(char *)(v10 + v11 - 1) < 0)
    {
      operator delete(*(void **)(v13 - 24));
      if ((*(char *)(v13 - 25) & 0x80000000) == 0)
      {
LABEL_6:
        v14 = v10 + v11;
        if (*(char *)(v10 + v11 - 49) < 0)
          goto LABEL_10;
        goto LABEL_3;
      }
    }
    else if ((*(char *)(v13 - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(v10 + v11 - 48));
    v14 = v10 + v11;
    if (*(char *)(v10 + v11 - 49) < 0)
LABEL_10:
      operator delete(*(void **)(v14 - 72));
LABEL_3:
    v11 -= 88;
    if (!v11)
      goto LABEL_2;
  }
}

void ***sub_22362936C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((char *)v4 - 1) < 0)
        {
          operator delete(*(v4 - 3));
          if ((*((char *)v4 - 25) & 0x80000000) == 0)
          {
LABEL_9:
            if (*((char *)v4 - 49) < 0)
              goto LABEL_13;
            goto LABEL_6;
          }
        }
        else if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
          goto LABEL_9;
        }
        operator delete(*(v4 - 6));
        if (*((char *)v4 - 49) < 0)
LABEL_13:
          operator delete(*(v4 - 9));
LABEL_6:
        v4 -= 11;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223629434(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
    v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
    v6 = a1 + 40;
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(v6 + 16) = a2[7];
      *(_OWORD *)v6 = v7;
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v6, (void *)a2[5], a2[6]);
LABEL_6:
  v8 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_223197FA4(v8, (void *)a2[8], a2[9]);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_223629514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 39) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_223629560(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_22316E078();
    result = operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        *(_OWORD *)&v8[v9] = *(_OWORD *)(a2 + v9);
        result = &v8[v9 + 16];
        v11 = (void **)(a2 + v9 + 16);
        if (*(char *)(a2 + v9 + 39) < 0)
        {
          result = sub_223197FA4(result, *v11, *(_QWORD *)(v10 + 24));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v11;
          *(_QWORD *)&v8[v9 + 32] = *(_QWORD *)(a2 + v9 + 32);
        }
        v9 += 40;
      }
      while (v10 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_223629654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2236296A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223629668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2236296A4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2236296A4(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223629738()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB018))
  {
    sub_223629890();
    v1 = byte_2540CBD1F;
    if (byte_2540CBD1F >= 0)
      v2 = byte_2540CBD1F;
    else
      v2 = qword_2540CBD10;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_2540CBCF0 + 1) = v2 + 1;
      unk_2540CBD00 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2540CBCF0 = v4;
    }
    else
    {
      v4 = &xmmword_2540CBCF0;
      unk_2540CBD00 = 0;
      xmmword_2540CBCF0 = 0uLL;
      byte_2540CBD07 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBCF0, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB018);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_2540CBD08;
    else
      v7 = (uint64_t *)qword_2540CBD08;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_223629878(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB018);
  _Unwind_Resume(a1);
}

void sub_223629890()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB020);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB020))
  {
    sub_223629A10();
    v1 = byte_2540CBD37;
    if (byte_2540CBD37 >= 0)
      v2 = byte_2540CBD37;
    else
      v2 = *((_QWORD *)&xmmword_2540CBD20 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2540CBD10 = v2 + 6;
      unk_2540CBD18 = v6 | 0x8000000000000000;
      qword_2540CBD08 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2540CBD10 = 0;
      unk_2540CBD18 = 0;
      qword_2540CBD08 = 0x2074736E6F63;
      byte_2540CBD1F = v2 + 6;
      v4 = (char *)&qword_2540CBD08 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBD08, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB020);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2540CBD20;
    else
      v8 = (__int128 *)xmmword_2540CBD20;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_2236299F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB020);
  _Unwind_Resume(a1);
}

void sub_223629A10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB028);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB028))
  {
    sub_223629AC8();
    if (byte_2540CBD4F < 0)
    {
      sub_223197FA4(&xmmword_2540CBD20, (void *)qword_2540CBD38, unk_2540CBD40);
    }
    else
    {
      xmmword_2540CBD20 = *(_OWORD *)&qword_2540CBD38;
      unk_2540CBD30 = unk_2540CBD48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBD20, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB028);
  }
}

void sub_223629AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB028);
  _Unwind_Resume(a1);
}

void sub_223629AC8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB030);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB030))
  {
    sub_223629D70(__p);
    sub_223629B9C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBD38, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB030);
  }
}

void sub_223629B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB030);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB030);
  _Unwind_Resume(a1);
}

void sub_223629B9C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB038);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB038))
  {
    sub_223629F4C();
    if (byte_2540CBD97 < 0)
    {
      sub_223197FA4(&xmmword_2540CBD50, (void *)xmmword_2540CBD80, *((unint64_t *)&xmmword_2540CBD80 + 1));
    }
    else
    {
      xmmword_2540CBD50 = xmmword_2540CBD80;
      unk_2540CBD60 = unk_2540CBD90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBD50, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB038);
  }
  if (byte_2540CBD67 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBD50, *((unint64_t *)&xmmword_2540CBD50 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBD50;
    v11 = unk_2540CBD60;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CBD38, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223629D28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB038);
  _Unwind_Resume(a1);
}

void sub_223629D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223629D70(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB050);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB050))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeMeshUpdateResult>]", qword_2540CBD98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBD98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB050);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB058);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB058))
  {
    v5 = sub_2231A38CC(qword_2540CBD98, "<", 0);
    sub_2231A37C8(qword_2540CBD98, 0, v5, qword_2540CBDB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBDB0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB058);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB060);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB060))
  {
    sub_224573040((uint64_t)qword_2540CBDB0, (uint64_t)&xmmword_2540CBDC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBDC8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB060);
  }
  if (byte_2540CBDDF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBDC8, *((unint64_t *)&xmmword_2540CBDC8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBDC8;
    __dst[2] = unk_2540CBDD8;
  }
}

void sub_223629F04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB060);
  _Unwind_Resume(a1);
}

void sub_223629F1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB058);
  _Unwind_Resume(a1);
}

void sub_223629F34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB050);
  _Unwind_Resume(a1);
}

void sub_223629F4C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB040))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeMeshUpdateResult]", qword_2540CBD68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBD68, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB040);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB048);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB048))
    {
      sub_224573040((uint64_t)qword_2540CBD68, (uint64_t)&xmmword_2540CBD80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBD80, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB048);
    }
  }
}

void sub_22362A01C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB048);
  _Unwind_Resume(a1);
}

void sub_22362A034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB040);
  _Unwind_Resume(a1);
}

void sub_22362A04C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB068);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB068))
  {
    sub_22362A104();
    if (byte_2540CBE27 < 0)
    {
      sub_223197FA4(&xmmword_2540CBDE0, (void *)xmmword_2540CBE10, *((unint64_t *)&xmmword_2540CBE10 + 1));
    }
    else
    {
      xmmword_2540CBDE0 = xmmword_2540CBE10;
      unk_2540CBDF0 = unk_2540CBE20;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBDE0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB068);
  }
}

void sub_22362A0EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB068);
  _Unwind_Resume(a1);
}

void sub_22362A104()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB070);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB070))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeMeshUpdateResult (const cv3d::recon::sng::MeshingNodeMeshUpdateResult &)]", qword_2540CBDF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBDF8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB070);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB078);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB078))
    {
      sub_224573040((uint64_t)qword_2540CBDF8, (uint64_t)&xmmword_2540CBE10);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBE10, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB078);
    }
  }
}

void sub_22362A1D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB078);
  _Unwind_Resume(a1);
}

void sub_22362A1EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB070);
  _Unwind_Resume(a1);
}

void sub_22362A204()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB080);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB080))
  {
    sub_22362A35C();
    v1 = byte_2540CBE57;
    if (byte_2540CBE57 >= 0)
      v2 = byte_2540CBE57;
    else
      v2 = qword_2540CBE48;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_2540CBE28 + 1) = v2 + 1;
      unk_2540CBE38 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2540CBE28 = v4;
    }
    else
    {
      v4 = &xmmword_2540CBE28;
      unk_2540CBE38 = 0;
      xmmword_2540CBE28 = 0uLL;
      byte_2540CBE3F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBE28, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB080);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_2540CBE40;
    else
      v7 = (uint64_t *)qword_2540CBE40;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22362A344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB080);
  _Unwind_Resume(a1);
}

void sub_22362A35C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB088);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB088))
  {
    sub_22362A4DC();
    v1 = byte_2540CBE6F;
    if (byte_2540CBE6F >= 0)
      v2 = byte_2540CBE6F;
    else
      v2 = *((_QWORD *)&xmmword_2540CBE58 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2540CBE48 = v2 + 6;
      unk_2540CBE50 = v6 | 0x8000000000000000;
      qword_2540CBE40 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2540CBE48 = 0;
      unk_2540CBE50 = 0;
      qword_2540CBE40 = 0x2074736E6F63;
      byte_2540CBE57 = v2 + 6;
      v4 = (char *)&qword_2540CBE40 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBE40, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB088);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2540CBE58;
    else
      v8 = (__int128 *)xmmword_2540CBE58;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22362A4C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB088);
  _Unwind_Resume(a1);
}

void sub_22362A4DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB090);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB090))
  {
    sub_22362A594();
    if (byte_2540CBE87 < 0)
    {
      sub_223197FA4(&xmmword_2540CBE58, (void *)qword_2540CBE70, unk_2540CBE78);
    }
    else
    {
      xmmword_2540CBE58 = *(_OWORD *)&qword_2540CBE70;
      unk_2540CBE68 = unk_2540CBE80;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBE58, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB090);
  }
}

void sub_22362A57C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB090);
  _Unwind_Resume(a1);
}

void sub_22362A594()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB098);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB098))
  {
    sub_22362A83C(__p);
    sub_22362A668((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CBE70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB098);
  }
}

void sub_22362A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB098);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB098);
  _Unwind_Resume(a1);
}

void sub_22362A668(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB0A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0A0))
  {
    sub_22362AA18();
    if (byte_2540CBECF < 0)
    {
      sub_223197FA4(&xmmword_2540CBE88, (void *)xmmword_2540CBEB8, *((unint64_t *)&xmmword_2540CBEB8 + 1));
    }
    else
    {
      xmmword_2540CBE88 = xmmword_2540CBEB8;
      unk_2540CBE98 = unk_2540CBEC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBE88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0A0);
  }
  if (byte_2540CBE9F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBE88, *((unint64_t *)&xmmword_2540CBE88 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBE88;
    v11 = unk_2540CBE98;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CBE70, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22362A7F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0A0);
  _Unwind_Resume(a1);
}

void sub_22362A810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22362A83C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB0B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0B8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeGlobalMeshResult>]", qword_2540CBED0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBED0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB0C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0C0))
  {
    v5 = sub_2231A38CC(qword_2540CBED0, "<", 0);
    sub_2231A37C8(qword_2540CBED0, 0, v5, qword_2540CBEE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBEE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB0C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0C8))
  {
    sub_224573040((uint64_t)qword_2540CBEE8, (uint64_t)&xmmword_2540CBF00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBF00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0C8);
  }
  if (byte_2540CBF17 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CBF00, *((unint64_t *)&xmmword_2540CBF00 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CBF00;
    __dst[2] = unk_2540CBF10;
  }
}

void sub_22362A9D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0C8);
  _Unwind_Resume(a1);
}

void sub_22362A9E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0C0);
  _Unwind_Resume(a1);
}

void sub_22362AA00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0B8);
  _Unwind_Resume(a1);
}

void sub_22362AA18()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalMeshResult]", qword_2540CBEA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBEA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB0B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB0B0))
    {
      sub_224573040((uint64_t)qword_2540CBEA0, (uint64_t)&xmmword_2540CBEB8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBEB8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB0B0);
    }
  }
}

void sub_22362AAE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0B0);
  _Unwind_Resume(a1);
}

void sub_22362AB00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0A8);
  _Unwind_Resume(a1);
}

void sub_22362AB18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0D0))
  {
    sub_22362ABD0();
    if (byte_2540CBF5F < 0)
    {
      sub_223197FA4(&xmmword_2540CBF18, (void *)xmmword_2540CBF48, *((unint64_t *)&xmmword_2540CBF48 + 1));
    }
    else
    {
      xmmword_2540CBF18 = xmmword_2540CBF48;
      unk_2540CBF28 = unk_2540CBF58;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBF18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0D0);
  }
}

void sub_22362ABB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0D0);
  _Unwind_Resume(a1);
}

void sub_22362ABD0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0D8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalMeshResult (const cv3d::recon::sng::MeshingNodeGlobalMeshResult &)]", qword_2540CBF30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CBF30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB0E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB0E0))
    {
      sub_224573040((uint64_t)qword_2540CBF30, (uint64_t)&xmmword_2540CBF48);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CBF48, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB0E0);
    }
  }
}

void sub_22362ACA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0E0);
  _Unwind_Resume(a1);
}

void sub_22362ACB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0D8);
  _Unwind_Resume(a1);
}

void sub_22362ACD0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0E8))
  {
    sub_22362AE2C();
    v1 = byte_255792C9F;
    if (byte_255792C9F >= 0)
      v2 = byte_255792C9F;
    else
      v2 = qword_255792C90;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255792C70 + 1) = v2 + 1;
      unk_255792C80 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255792C70 = v4;
    }
    else
    {
      v4 = &xmmword_255792C70;
      unk_255792C80 = 0;
      xmmword_255792C70 = 0uLL;
      byte_255792C87 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792C70, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB0E8);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255792C88;
    else
      v7 = (uint64_t *)qword_255792C88;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22362AE14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0E8);
  _Unwind_Resume(a1);
}

void sub_22362AE2C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0F0))
  {
    sub_22362AFA4();
    v1 = byte_255792CB7;
    if (byte_255792CB7 >= 0)
      v2 = byte_255792CB7;
    else
      v2 = *((_QWORD *)&xmmword_255792CA0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255792C90 = v2 + 6;
      unk_255792C98 = v6 | 0x8000000000000000;
      qword_255792C88 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255792C90 = 0;
      unk_255792C98 = 0;
      qword_255792C88 = 0x2074736E6F63;
      byte_255792C9F = v2 + 6;
      v4 = (char *)&qword_255792C88 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792C88, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB0F0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255792CA0;
    else
      v8 = (__int128 *)xmmword_255792CA0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22362AF8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0F0);
  _Unwind_Resume(a1);
}

void sub_22362AFA4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB0F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB0F8))
  {
    sub_22362B060();
    if (byte_255792CCF < 0)
    {
      sub_223197FA4(&xmmword_255792CA0, (void *)qword_255792CB8, unk_255792CC0);
    }
    else
    {
      xmmword_255792CA0 = *(_OWORD *)&qword_255792CB8;
      unk_255792CB0 = unk_255792CC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792CA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB0F8);
  }
}

void sub_22362B048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB0F8);
  _Unwind_Resume(a1);
}

void sub_22362B060()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB100);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB100))
  {
    sub_22362B310(__p);
    sub_22362B138((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792CB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB100);
  }
}

void sub_22362B0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB100);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB100);
  _Unwind_Resume(a1);
}

void sub_22362B138(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB108);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB108))
  {
    sub_22362B4EC();
    if (byte_255792D17 < 0)
    {
      sub_223197FA4(&xmmword_255792CD0, (void *)xmmword_255792D00, *((unint64_t *)&xmmword_255792D00 + 1));
    }
    else
    {
      xmmword_255792CD0 = xmmword_255792D00;
      unk_255792CE0 = unk_255792D10;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792CD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB108);
  }
  if (byte_255792CE7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792CD0, *((unint64_t *)&xmmword_255792CD0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792CD0;
    v11 = unk_255792CE0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255792CB8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22362B2C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB108);
  _Unwind_Resume(a1);
}

void sub_22362B2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22362B310(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB120);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB120))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeOccupancyMeshResult>]", qword_255792D18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792D18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB120);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB128);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB128))
  {
    v5 = sub_2231A38CC(qword_255792D18, "<", 0);
    sub_2231A37C8(qword_255792D18, 0, v5, qword_255792D30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792D30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB128);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB130);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB130))
  {
    sub_224573040((uint64_t)qword_255792D30, (uint64_t)&xmmword_255792D48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792D48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB130);
  }
  if (byte_255792D5F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792D48, *((unint64_t *)&xmmword_255792D48 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792D48;
    __dst[2] = unk_255792D58;
  }
}

void sub_22362B4A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB130);
  _Unwind_Resume(a1);
}

void sub_22362B4BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB128);
  _Unwind_Resume(a1);
}

void sub_22362B4D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB120);
  _Unwind_Resume(a1);
}

void sub_22362B4EC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB110))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyMeshResult]", qword_255792CE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792CE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB110);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB118);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB118))
    {
      sub_224573040((uint64_t)qword_255792CE8, (uint64_t)&xmmword_255792D00);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792D00, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB118);
    }
  }
}

void sub_22362B5C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB118);
  _Unwind_Resume(a1);
}

void sub_22362B5DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB110);
  _Unwind_Resume(a1);
}

void sub_22362B5F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB138);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB138))
  {
    sub_22362B6B0();
    if (byte_255792DA7 < 0)
    {
      sub_223197FA4(&xmmword_255792D60, (void *)xmmword_255792D90, *((unint64_t *)&xmmword_255792D90 + 1));
    }
    else
    {
      xmmword_255792D60 = xmmword_255792D90;
      unk_255792D70 = unk_255792DA0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792D60, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB138);
  }
}

void sub_22362B698(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB138);
  _Unwind_Resume(a1);
}

void sub_22362B6B0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB140);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB140))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyMeshResult (const cv3d::recon::sng::MeshingNodeOccupancyMeshResult &)]", qword_255792D78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792D78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB140);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB148);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB148))
    {
      sub_224573040((uint64_t)qword_255792D78, (uint64_t)&xmmword_255792D90);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792D90, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB148);
    }
  }
}

void sub_22362B788(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB148);
  _Unwind_Resume(a1);
}

void sub_22362B7A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB140);
  _Unwind_Resume(a1);
}

void sub_22362B7B8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB150);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB150))
  {
    sub_22362B914();
    v1 = byte_255792DD7;
    if (byte_255792DD7 >= 0)
      v2 = byte_255792DD7;
    else
      v2 = qword_255792DC8;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255792DA8 + 1) = v2 + 1;
      unk_255792DB8 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255792DA8 = v4;
    }
    else
    {
      v4 = &xmmword_255792DA8;
      unk_255792DB8 = 0;
      xmmword_255792DA8 = 0uLL;
      byte_255792DBF = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792DA8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB150);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255792DC0;
    else
      v7 = (uint64_t *)qword_255792DC0;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22362B8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB150);
  _Unwind_Resume(a1);
}

void sub_22362B914()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB158);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB158))
  {
    sub_22362BA8C();
    v1 = byte_255792DEF;
    if (byte_255792DEF >= 0)
      v2 = byte_255792DEF;
    else
      v2 = *((_QWORD *)&xmmword_255792DD8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255792DC8 = v2 + 6;
      unk_255792DD0 = v6 | 0x8000000000000000;
      qword_255792DC0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255792DC8 = 0;
      unk_255792DD0 = 0;
      qword_255792DC0 = 0x2074736E6F63;
      byte_255792DD7 = v2 + 6;
      v4 = (char *)&qword_255792DC0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792DC0, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB158);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255792DD8;
    else
      v8 = (__int128 *)xmmword_255792DD8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22362BA74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB158);
  _Unwind_Resume(a1);
}

void sub_22362BA8C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB160);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB160))
  {
    sub_22362BB48();
    if (byte_255792E07 < 0)
    {
      sub_223197FA4(&xmmword_255792DD8, (void *)qword_255792DF0, unk_255792DF8);
    }
    else
    {
      xmmword_255792DD8 = *(_OWORD *)&qword_255792DF0;
      unk_255792DE8 = unk_255792E00;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792DD8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB160);
  }
}

void sub_22362BB30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB160);
  _Unwind_Resume(a1);
}

void sub_22362BB48()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB168);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB168))
  {
    sub_22362BDF8(__p);
    sub_22362BC20((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792DF0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB168);
  }
}

void sub_22362BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB168);
  _Unwind_Resume(a1);
}

void sub_22362BC20(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB170))
  {
    sub_22362BFD4();
    if (byte_255792E4F < 0)
    {
      sub_223197FA4(&xmmword_255792E08, (void *)xmmword_255792E38, *((unint64_t *)&xmmword_255792E38 + 1));
    }
    else
    {
      xmmword_255792E08 = xmmword_255792E38;
      unk_255792E18 = unk_255792E48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792E08, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB170);
  }
  if (byte_255792E1F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792E08, *((unint64_t *)&xmmword_255792E08 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792E08;
    v11 = unk_255792E18;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255792DF0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22362BDB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB170);
  _Unwind_Resume(a1);
}

void sub_22362BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22362BDF8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB188);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB188))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshResult>]", qword_255792E50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792E50, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB188);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB190);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB190))
  {
    v5 = sub_2231A38CC(qword_255792E50, "<", 0);
    sub_2231A37C8(qword_255792E50, 0, v5, qword_255792E68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792E68, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB190);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB198);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB198))
  {
    sub_224573040((uint64_t)qword_255792E68, (uint64_t)&xmmword_255792E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792E80, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB198);
  }
  if (byte_255792E97 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792E80, *((unint64_t *)&xmmword_255792E80 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792E80;
    __dst[2] = unk_255792E90;
  }
}

void sub_22362BF8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB198);
  _Unwind_Resume(a1);
}

void sub_22362BFA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB190);
  _Unwind_Resume(a1);
}

void sub_22362BFBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB188);
  _Unwind_Resume(a1);
}

void sub_22362BFD4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB178))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshResult]", qword_255792E20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792E20, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB178);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB180);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB180))
    {
      sub_224573040((uint64_t)qword_255792E20, (uint64_t)&xmmword_255792E38);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792E38, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB180);
    }
  }
}

void sub_22362C0AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB180);
  _Unwind_Resume(a1);
}

void sub_22362C0C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB178);
  _Unwind_Resume(a1);
}

void sub_22362C0DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1A0))
  {
    sub_22362C198();
    if (byte_255792EDF < 0)
    {
      sub_223197FA4(&xmmword_255792E98, (void *)xmmword_255792EC8, *((unint64_t *)&xmmword_255792EC8 + 1));
    }
    else
    {
      xmmword_255792E98 = xmmword_255792EC8;
      unk_255792EA8 = unk_255792ED8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792E98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1A0);
  }
}

void sub_22362C180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1A0);
  _Unwind_Resume(a1);
}

void sub_22362C198()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshResult (const cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshResult &)]", qword_255792EB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792EB0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB1B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB1B0))
    {
      sub_224573040((uint64_t)qword_255792EB0, (uint64_t)&xmmword_255792EC8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792EC8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB1B0);
    }
  }
}

void sub_22362C270(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1B0);
  _Unwind_Resume(a1);
}

void sub_22362C288(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1A8);
  _Unwind_Resume(a1);
}

void sub_22362C2A0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1B8))
  {
    sub_22362C3FC();
    v1 = byte_255792F0F;
    if (byte_255792F0F >= 0)
      v2 = byte_255792F0F;
    else
      v2 = qword_255792F00;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255792EE0 + 1) = v2 + 1;
      unk_255792EF0 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255792EE0 = v4;
    }
    else
    {
      v4 = &xmmword_255792EE0;
      unk_255792EF0 = 0;
      xmmword_255792EE0 = 0uLL;
      byte_255792EF7 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792EE0, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB1B8);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255792EF8;
    else
      v7 = (uint64_t *)qword_255792EF8;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22362C3E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1B8);
  _Unwind_Resume(a1);
}

void sub_22362C3FC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1C0))
  {
    sub_22362C574();
    v1 = byte_255792F27;
    if (byte_255792F27 >= 0)
      v2 = byte_255792F27;
    else
      v2 = *((_QWORD *)&xmmword_255792F10 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255792F00 = v2 + 6;
      unk_255792F08 = v6 | 0x8000000000000000;
      qword_255792EF8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255792F00 = 0;
      unk_255792F08 = 0;
      qword_255792EF8 = 0x2074736E6F63;
      byte_255792F0F = v2 + 6;
      v4 = (char *)&qword_255792EF8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792EF8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB1C0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255792F10;
    else
      v8 = (__int128 *)xmmword_255792F10;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22362C55C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1C0);
  _Unwind_Resume(a1);
}

void sub_22362C574()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1C8))
  {
    sub_22362C630();
    if (byte_255792F3F < 0)
    {
      sub_223197FA4(&xmmword_255792F10, (void *)qword_255792F28, unk_255792F30);
    }
    else
    {
      xmmword_255792F10 = *(_OWORD *)&qword_255792F28;
      unk_255792F20 = unk_255792F38;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792F10, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1C8);
  }
}

void sub_22362C618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1C8);
  _Unwind_Resume(a1);
}

void sub_22362C630()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1D0))
  {
    sub_22362C8E0(__p);
    sub_22362C708((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255792F28, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1D0);
  }
}

void sub_22362C6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB1D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB1D0);
  _Unwind_Resume(a1);
}

void sub_22362C708(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB1D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1D8))
  {
    sub_22362CABC();
    if (byte_255792F87 < 0)
    {
      sub_223197FA4(&xmmword_255792F40, (void *)xmmword_255792F70, *((unint64_t *)&xmmword_255792F70 + 1));
    }
    else
    {
      xmmword_255792F40 = xmmword_255792F70;
      unk_255792F50 = unk_255792F80;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792F40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1D8);
  }
  if (byte_255792F57 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792F40, *((unint64_t *)&xmmword_255792F40 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792F40;
    v11 = unk_255792F50;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255792F28, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22362C898(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1D8);
  _Unwind_Resume(a1);
}

void sub_22362C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22362C8E0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB1F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeOccupancyBlockMeshResult>]", qword_255792F88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792F88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB1F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1F8))
  {
    v5 = sub_2231A38CC(qword_255792F88, "<", 0);
    sub_2231A37C8(qword_255792F88, 0, v5, qword_255792FA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792FA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB200);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB200))
  {
    sub_224573040((uint64_t)qword_255792FA0, (uint64_t)&xmmword_255792FB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792FB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB200);
  }
  if (byte_255792FCF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255792FB8, *((unint64_t *)&xmmword_255792FB8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255792FB8;
    __dst[2] = unk_255792FC8;
  }
}

void sub_22362CA74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB200);
  _Unwind_Resume(a1);
}

void sub_22362CA8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1F8);
  _Unwind_Resume(a1);
}

void sub_22362CAA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1F0);
  _Unwind_Resume(a1);
}

void sub_22362CABC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB1E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB1E0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyBlockMeshResult]", qword_255792F58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792F58, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB1E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB1E8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB1E8))
    {
      sub_224573040((uint64_t)qword_255792F58, (uint64_t)&xmmword_255792F70);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792F70, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB1E8);
    }
  }
}

void sub_22362CB94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1E8);
  _Unwind_Resume(a1);
}

void sub_22362CBAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB1E0);
  _Unwind_Resume(a1);
}

void sub_22362CBC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB208);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB208))
  {
    sub_22362CC80();
    if (byte_255793017 < 0)
    {
      sub_223197FA4(&xmmword_255792FD0, (void *)xmmword_255793000, *((unint64_t *)&xmmword_255793000 + 1));
    }
    else
    {
      xmmword_255792FD0 = xmmword_255793000;
      unk_255792FE0 = unk_255793010;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255792FD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB208);
  }
}

void sub_22362CC68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB208);
  _Unwind_Resume(a1);
}

void sub_22362CC80()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB210))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyBlockMeshResult (const cv3d::recon::sng::MeshingNodeOccupancyBlockMeshResult &)]", qword_255792FE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255792FE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB210);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB218);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB218))
    {
      sub_224573040((uint64_t)qword_255792FE8, (uint64_t)&xmmword_255793000);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793000, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB218);
    }
  }
}

void sub_22362CD58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB218);
  _Unwind_Resume(a1);
}

void sub_22362CD70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB210);
  _Unwind_Resume(a1);
}

void sub_22362CD88()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB220);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB220))
  {
    sub_22362CEE4();
    v1 = byte_255793047;
    if (byte_255793047 >= 0)
      v2 = byte_255793047;
    else
      v2 = qword_255793038;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793018 + 1) = v2 + 1;
      unk_255793028 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793018 = v4;
    }
    else
    {
      v4 = &xmmword_255793018;
      unk_255793028 = 0;
      xmmword_255793018 = 0uLL;
      byte_25579302F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793018, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB220);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255793030;
    else
      v7 = (uint64_t *)qword_255793030;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22362CECC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB220);
  _Unwind_Resume(a1);
}

void sub_22362CEE4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB228);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB228))
  {
    sub_22362D05C();
    v1 = byte_25579305F;
    if (byte_25579305F >= 0)
      v2 = byte_25579305F;
    else
      v2 = *((_QWORD *)&xmmword_255793048 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255793038 = v2 + 6;
      unk_255793040 = v6 | 0x8000000000000000;
      qword_255793030 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255793038 = 0;
      unk_255793040 = 0;
      qword_255793030 = 0x2074736E6F63;
      byte_255793047 = v2 + 6;
      v4 = (char *)&qword_255793030 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793030, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB228);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255793048;
    else
      v8 = (__int128 *)xmmword_255793048;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22362D044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB228);
  _Unwind_Resume(a1);
}

void sub_22362D05C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB230);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB230))
  {
    sub_22362D118();
    if (byte_255793077 < 0)
    {
      sub_223197FA4(&xmmword_255793048, (void *)qword_255793060, unk_255793068);
    }
    else
    {
      xmmword_255793048 = *(_OWORD *)&qword_255793060;
      unk_255793058 = unk_255793070;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793048, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB230);
  }
}

void sub_22362D100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB230);
  _Unwind_Resume(a1);
}

void sub_22362D118()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB238);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB238))
  {
    sub_22362D3C8(__p);
    sub_22362D1F0((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793060, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB238);
  }
}

void sub_22362D1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB238);
  _Unwind_Resume(a1);
}

void sub_22362D1F0(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB240);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB240))
  {
    sub_22362D5A4();
    if (byte_2557930BF < 0)
    {
      sub_223197FA4(&xmmword_255793078, (void *)xmmword_2557930A8, *((unint64_t *)&xmmword_2557930A8 + 1));
    }
    else
    {
      xmmword_255793078 = xmmword_2557930A8;
      unk_255793088 = unk_2557930B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793078, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB240);
  }
  if (byte_25579308F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793078, *((unint64_t *)&xmmword_255793078 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793078;
    v11 = unk_255793088;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255793060, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22362D380(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB240);
  _Unwind_Resume(a1);
}

void sub_22362D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22362D3C8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB258);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB258))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::MeshingNodeOccupancyResult>]", qword_2557930C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557930C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB258);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB260);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB260))
  {
    v5 = sub_2231A38CC(qword_2557930C0, "<", 0);
    sub_2231A37C8(qword_2557930C0, 0, v5, qword_2557930D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557930D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB260);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB268);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB268))
  {
    sub_224573040((uint64_t)qword_2557930D8, (uint64_t)&xmmword_2557930F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557930F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB268);
  }
  if (byte_255793107 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557930F0, *((unint64_t *)&xmmword_2557930F0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557930F0;
    __dst[2] = unk_255793100;
  }
}

void sub_22362D55C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB268);
  _Unwind_Resume(a1);
}

void sub_22362D574(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB260);
  _Unwind_Resume(a1);
}

void sub_22362D58C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB258);
  _Unwind_Resume(a1);
}

void sub_22362D5A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB248);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB248))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyResult]", qword_255793090);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793090, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB248);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB250);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB250))
    {
      sub_224573040((uint64_t)qword_255793090, (uint64_t)&xmmword_2557930A8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557930A8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB250);
    }
  }
}

void sub_22362D67C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB250);
  _Unwind_Resume(a1);
}

void sub_22362D694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB248);
  _Unwind_Resume(a1);
}

void sub_22362D6AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB270))
  {
    sub_22362D768();
    if (byte_25579314F < 0)
    {
      sub_223197FA4(&xmmword_255793108, (void *)xmmword_255793138, *((unint64_t *)&xmmword_255793138 + 1));
    }
    else
    {
      xmmword_255793108 = xmmword_255793138;
      unk_255793118 = unk_255793148;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793108, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB270);
  }
}

void sub_22362D750(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB270);
  _Unwind_Resume(a1);
}

void sub_22362D768()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB278);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB278))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyResult (const cv3d::recon::sng::MeshingNodeOccupancyResult &)]", qword_255793120);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793120, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB278);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB280);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB280))
    {
      sub_224573040((uint64_t)qword_255793120, (uint64_t)&xmmword_255793138);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793138, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB280);
    }
  }
}

void sub_22362D840(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB280);
  _Unwind_Resume(a1);
}

void sub_22362D858(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB278);
  _Unwind_Resume(a1);
}

void sub_22362D870(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  char *v7;
  __int128 *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  uint64_t v24;
  int v25;
  size_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *p_dst;
  unint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  char *v38;
  int v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  void **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  void **v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  void **v78;
  char *v79;
  void **v80;
  char *v81;
  uint64_t v84;
  int v85;
  size_t v86;
  unint64_t v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  unint64_t v92;
  void *v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  char *v98;
  int v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  void **v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  int v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  void **v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  char *v127;
  __int128 *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  void **v138;
  char *v139;
  void **v140;
  char *v141;
  uint64_t v144;
  int v145;
  size_t v146;
  unint64_t v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  unint64_t v152;
  void *v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  char *v158;
  int v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  void **v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  int v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  void **v175;
  unint64_t *v176;
  unint64_t v177;
  void **v178;
  void *v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  __int128 *v186;
  char *v187;
  __int128 *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  char *v196;
  uint64_t v197;
  void **v198;
  char *v199;
  void **v200;
  char *v201;
  uint64_t v204;
  int v205;
  size_t v206;
  unint64_t v207;
  __int128 *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 *v211;
  unint64_t v212;
  void *v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  char *v218;
  int v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  void **v223;
  unint64_t *v224;
  unint64_t v225;
  void **v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  int v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  void **v235;
  unint64_t *v236;
  unint64_t v237;
  void **v238;
  void *v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  __int128 *v246;
  char *v247;
  __int128 *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  char *v256;
  uint64_t v257;
  void **v258;
  char *v259;
  void **v260;
  char *v261;
  uint64_t v264;
  int v265;
  size_t v266;
  unint64_t v267;
  __int128 *v268;
  uint64_t v269;
  uint64_t v270;
  __int128 *v271;
  unint64_t v272;
  void *v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  std::__shared_weak_count *v277;
  char *v278;
  int v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  void **v283;
  unint64_t *v284;
  unint64_t v285;
  void **v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  int v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  void **v295;
  unint64_t *v296;
  unint64_t v297;
  void **v298;
  void *v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  __int128 *v306;
  char *v307;
  __int128 *v308;
  char *v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  char *v316;
  uint64_t v317;
  void **v318;
  char *v319;
  void **v320;
  char *v321;
  uint64_t v324;
  int v325;
  size_t v326;
  unint64_t v327;
  __int128 *v328;
  uint64_t v329;
  uint64_t v330;
  __int128 *v331;
  unint64_t v332;
  void *v333;
  __int128 v334;
  uint64_t v335;
  __int128 v336;
  std::__shared_weak_count *v337;
  char *v338;
  int v339;
  std::__shared_weak_count *v340;
  std::__shared_weak_count *v341;
  uint64_t v342;
  void **v343;
  unint64_t *v344;
  unint64_t v345;
  void **v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  int v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count *v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  void **v355;
  unint64_t *v356;
  unint64_t v357;
  void **v358;
  void *v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  __int128 *v366;
  char *v367;
  __int128 *v368;
  char *v369;
  uint64_t v370;
  unint64_t v371;
  void *v372;
  __int128 v373;
  uint64_t v374;
  __int128 v375;
  char *v376;
  uint64_t v377;
  void **v378;
  char *v379;
  void **v380;
  char *v381;
  uint64_t v384;
  int v385;
  size_t v386;
  unint64_t v387;
  __int128 *v388;
  uint64_t v389;
  uint64_t v390;
  __int128 *v391;
  unint64_t v392;
  void *v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  std::__shared_weak_count *v397;
  char *v398;
  int v399;
  std::__shared_weak_count *v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  void **v403;
  unint64_t *v404;
  unint64_t v405;
  void **v406;
  uint64_t v407;
  unint64_t v408;
  char *v409;
  int v410;
  std::__shared_weak_count *v411;
  std::__shared_weak_count *v412;
  std::__shared_weak_count *v413;
  uint64_t v414;
  void **v415;
  unint64_t *v416;
  unint64_t v417;
  void **v418;
  void *v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  __int128 *v426;
  char *v427;
  __int128 *v428;
  char *v429;
  uint64_t v430;
  unint64_t v431;
  void *v432;
  __int128 v433;
  uint64_t v434;
  __int128 v435;
  char *v436;
  uint64_t v437;
  void **v438;
  char *v439;
  void **v440;
  char *v441;
  uint64_t v444;
  int v445;
  size_t v446;
  unint64_t v447;
  __int128 *v448;
  uint64_t v449;
  uint64_t v450;
  __int128 *v451;
  unint64_t v452;
  void *v453;
  __int128 v454;
  uint64_t v455;
  __int128 v456;
  std::__shared_weak_count *v457;
  char *v458;
  int v459;
  std::__shared_weak_count *v460;
  std::__shared_weak_count *v461;
  uint64_t v462;
  void **v463;
  unint64_t *v464;
  unint64_t v465;
  void **v466;
  uint64_t v467;
  unint64_t v468;
  char *v469;
  int v470;
  std::__shared_weak_count *v471;
  std::__shared_weak_count *v472;
  std::__shared_weak_count *v473;
  uint64_t v474;
  void **v475;
  unint64_t *v476;
  unint64_t v477;
  void **v478;
  void *v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  __int128 *v486;
  char *v487;
  __int128 *v488;
  char *v489;
  uint64_t v490;
  unint64_t v491;
  void *v492;
  __int128 v493;
  uint64_t v494;
  __int128 v495;
  char *v496;
  uint64_t v497;
  void **v498;
  char *v499;
  void **v500;
  char *v501;
  uint64_t v504;
  int v505;
  size_t v506;
  unint64_t v507;
  __int128 *v508;
  uint64_t v509;
  uint64_t v510;
  __int128 *v511;
  unint64_t v512;
  void *v513;
  __int128 v514;
  uint64_t v515;
  __int128 v516;
  std::__shared_weak_count *v517;
  char *v518;
  int v519;
  std::__shared_weak_count *v520;
  std::__shared_weak_count *v521;
  uint64_t v522;
  void **v523;
  unint64_t *v524;
  unint64_t v525;
  void **v526;
  uint64_t v527;
  unint64_t v528;
  char *v529;
  int v530;
  std::__shared_weak_count *v531;
  std::__shared_weak_count *v532;
  std::__shared_weak_count *v533;
  uint64_t v534;
  void **v535;
  unint64_t *v536;
  unint64_t v537;
  void **v538;
  void *v539;
  uint64_t v540;
  unint64_t v541;
  char *v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  __int128 *v546;
  char *v547;
  __int128 *v548;
  char *v549;
  uint64_t v550;
  unint64_t v551;
  void *v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  char *v556;
  uint64_t v557;
  void **v558;
  char *v559;
  void **v560;
  char *v561;
  uint64_t v564;
  int v565;
  size_t v566;
  unint64_t v567;
  __int128 *v568;
  uint64_t v569;
  uint64_t v570;
  __int128 *v571;
  unint64_t v572;
  void *v573;
  __int128 v574;
  uint64_t v575;
  __int128 v576;
  std::__shared_weak_count *v577;
  char *v578;
  int v579;
  std::__shared_weak_count *v580;
  std::__shared_weak_count *v581;
  uint64_t v582;
  void **v583;
  unint64_t *v584;
  unint64_t v585;
  void **v586;
  uint64_t v587;
  unint64_t v588;
  char *v589;
  int v590;
  std::__shared_weak_count *v591;
  std::__shared_weak_count *v592;
  std::__shared_weak_count *v593;
  uint64_t v594;
  void **v595;
  unint64_t *v596;
  unint64_t v597;
  void **v598;
  void *v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  __int128 *v606;
  char *v607;
  __int128 *v608;
  char *v609;
  uint64_t v610;
  unint64_t v611;
  void *v612;
  __int128 v613;
  uint64_t v614;
  __int128 v615;
  char *v616;
  uint64_t v617;
  void **v618;
  char *v619;
  void **v620;
  char *v621;
  uint64_t v624;
  int v625;
  size_t v626;
  unint64_t v627;
  __int128 *v628;
  uint64_t v629;
  uint64_t v630;
  __int128 *v631;
  unint64_t v632;
  void *v633;
  __int128 v634;
  uint64_t v635;
  __int128 v636;
  std::__shared_weak_count *v637;
  char *v638;
  int v639;
  std::__shared_weak_count *v640;
  std::__shared_weak_count *v641;
  uint64_t v642;
  void **v643;
  unint64_t *v644;
  unint64_t v645;
  void **v646;
  uint64_t v647;
  unint64_t v648;
  char *v649;
  int v650;
  std::__shared_weak_count *v651;
  std::__shared_weak_count *v652;
  std::__shared_weak_count *v653;
  uint64_t v654;
  void **v655;
  unint64_t *v656;
  unint64_t v657;
  void **v658;
  void *v659;
  uint64_t v660;
  unint64_t v661;
  char *v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  __int128 *v666;
  char *v667;
  __int128 *v668;
  char *v669;
  uint64_t v670;
  unint64_t v671;
  void *v672;
  __int128 v673;
  uint64_t v674;
  __int128 v675;
  char *v676;
  uint64_t v677;
  void **v678;
  char *v679;
  void **v680;
  char *v681;
  uint64_t v684;
  int v685;
  size_t v686;
  unint64_t v687;
  __int128 *v688;
  uint64_t v689;
  uint64_t v690;
  __int128 *v691;
  unint64_t v692;
  void *v693;
  __int128 v694;
  uint64_t v695;
  __int128 v696;
  std::__shared_weak_count *v697;
  char *v698;
  int v699;
  std::__shared_weak_count *v700;
  std::__shared_weak_count *v701;
  uint64_t v702;
  void **v703;
  unint64_t *v704;
  unint64_t v705;
  void **v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  int v710;
  std::__shared_weak_count *v711;
  std::__shared_weak_count *v712;
  std::__shared_weak_count *v713;
  uint64_t v714;
  void **v715;
  unint64_t *v716;
  unint64_t v717;
  void **v718;
  void *v719;
  uint64_t v720;
  unint64_t v721;
  char *v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  __int128 *v726;
  char *v727;
  __int128 *v728;
  char *v729;
  uint64_t v730;
  unint64_t v731;
  void *v732;
  __int128 v733;
  uint64_t v734;
  __int128 v735;
  char *v736;
  uint64_t v737;
  void **v738;
  char *v739;
  void **v740;
  char *v741;
  uint64_t v744;
  int v745;
  size_t v746;
  unint64_t v747;
  __int128 *v748;
  uint64_t v749;
  uint64_t v750;
  __int128 *v751;
  unint64_t v752;
  void *v753;
  __int128 v754;
  uint64_t v755;
  __int128 v756;
  std::__shared_weak_count *v757;
  char *v758;
  int v759;
  std::__shared_weak_count *v760;
  std::__shared_weak_count *v761;
  uint64_t v762;
  void **v763;
  unint64_t *v764;
  unint64_t v765;
  void **v766;
  uint64_t v767;
  unint64_t v768;
  char *v769;
  int v770;
  std::__shared_weak_count *v771;
  std::__shared_weak_count *v772;
  std::__shared_weak_count *v773;
  uint64_t v774;
  void **v775;
  unint64_t *v776;
  unint64_t v777;
  void **v778;
  void *v779;
  uint64_t v780;
  unint64_t v781;
  char *v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  __int128 *v786;
  char *v787;
  __int128 *v788;
  char *v789;
  uint64_t v790;
  unint64_t v791;
  void *v792;
  __int128 v793;
  uint64_t v794;
  __int128 v795;
  char *v796;
  uint64_t v797;
  void **v798;
  char *v799;
  void **v800;
  char *v801;
  uint64_t v804;
  int v805;
  size_t v806;
  unint64_t v807;
  __int128 *v808;
  uint64_t v809;
  uint64_t v810;
  __int128 *v811;
  unint64_t v812;
  void *v813;
  __int128 v814;
  uint64_t v815;
  __int128 v816;
  std::__shared_weak_count *v817;
  char *v818;
  int v819;
  std::__shared_weak_count *v820;
  std::__shared_weak_count *v821;
  uint64_t v822;
  void **v823;
  unint64_t *v824;
  unint64_t v825;
  void **v826;
  uint64_t v827;
  unint64_t v828;
  char *v829;
  int v830;
  std::__shared_weak_count *v831;
  std::__shared_weak_count *v832;
  std::__shared_weak_count *v833;
  uint64_t v834;
  void **v835;
  unint64_t *v836;
  unint64_t v837;
  void **v838;
  void *v839;
  uint64_t v840;
  unint64_t v841;
  char *v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  __int128 *v846;
  char *v847;
  __int128 *v848;
  char *v849;
  uint64_t v850;
  unint64_t v851;
  void *v852;
  __int128 v853;
  uint64_t v854;
  __int128 v855;
  char *v856;
  uint64_t v857;
  void **v858;
  char *v859;
  void **v860;
  char *v861;
  uint64_t v864;
  int v865;
  size_t v866;
  unint64_t v867;
  __int128 *v868;
  uint64_t v869;
  uint64_t v870;
  __int128 *v871;
  unint64_t v872;
  void *v873;
  __int128 v874;
  uint64_t v875;
  __int128 v876;
  std::__shared_weak_count *v877;
  char *v878;
  int v879;
  std::__shared_weak_count *v880;
  std::__shared_weak_count *v881;
  uint64_t v882;
  void **v883;
  unint64_t *v884;
  unint64_t v885;
  void **v886;
  uint64_t v887;
  unint64_t v888;
  char *v889;
  int v890;
  std::__shared_weak_count *v891;
  std::__shared_weak_count *v892;
  std::__shared_weak_count *v893;
  uint64_t v894;
  void **v895;
  unint64_t *v896;
  unint64_t v897;
  void **v898;
  void *v899;
  uint64_t v900;
  unint64_t v901;
  char *v902;
  int v903;
  uint64_t v904;
  unsigned __int8 v905;
  uint64_t v906;
  void **v907;
  char *v908;
  void **v909;
  char *v910;
  uint64_t v911;
  unint64_t v912;
  void *v913;
  __int128 v914;
  uint64_t v915;
  __int128 v916;
  char *v917;
  uint64_t v918;
  __int128 *v919;
  char *v920;
  __int128 *v921;
  char *v922;
  uint64_t v925;
  int v926;
  size_t v927;
  unint64_t v928;
  __int128 *v929;
  uint64_t v930;
  uint64_t v931;
  void **v932;
  unint64_t v933;
  void *v934;
  __int128 v935;
  uint64_t v936;
  __int128 v937;
  std::__shared_weak_count *v938;
  char *v939;
  int v940;
  std::__shared_weak_count *v941;
  std::__shared_weak_count *v942;
  uint64_t v943;
  void **v944;
  unint64_t *v945;
  unint64_t v946;
  void **v947;
  uint64_t v948;
  unint64_t v949;
  char *v950;
  int v951;
  std::__shared_weak_count *v952;
  std::__shared_weak_count *v953;
  std::__shared_weak_count *v954;
  uint64_t v955;
  void **v956;
  unint64_t *v957;
  unint64_t v958;
  void **v959;
  void *v960;
  uint64_t v961;
  unint64_t v962;
  char *v963;
  int v964;
  uint64_t v965;
  uint64_t v966;
  __int128 *v967;
  char *v968;
  __int128 *v969;
  char *v970;
  uint64_t v971;
  unint64_t v972;
  void *v973;
  __int128 v974;
  uint64_t v975;
  __int128 v976;
  char *v977;
  uint64_t v978;
  void **v979;
  char *v980;
  void **v981;
  char *v982;
  uint64_t v985;
  int v986;
  size_t v987;
  unint64_t v988;
  __int128 *v989;
  uint64_t v990;
  uint64_t v991;
  __int128 *v992;
  unint64_t v993;
  void *v994;
  __int128 v995;
  uint64_t v996;
  __int128 v997;
  std::__shared_weak_count *v998;
  char *v999;
  int v1000;
  std::__shared_weak_count *v1001;
  std::__shared_weak_count *v1002;
  uint64_t v1003;
  void **v1004;
  unint64_t *v1005;
  unint64_t v1006;
  void **v1007;
  uint64_t v1008;
  unint64_t v1009;
  char *v1010;
  int v1011;
  std::__shared_weak_count *v1012;
  std::__shared_weak_count *v1013;
  std::__shared_weak_count *v1014;
  uint64_t v1015;
  void **v1016;
  unint64_t *v1017;
  unint64_t v1018;
  void **v1019;
  void *v1020;
  uint64_t v1021;
  unint64_t v1022;
  char *v1023;
  int v1024;
  uint64_t v1025;
  uint64_t v1026;
  __int128 *v1027;
  char *v1028;
  __int128 *v1029;
  char *v1030;
  uint64_t v1031;
  unint64_t v1032;
  void *v1033;
  __int128 v1034;
  uint64_t v1035;
  __int128 v1036;
  char *v1037;
  uint64_t v1038;
  void **v1039;
  char *v1040;
  void **v1041;
  char *v1042;
  uint64_t v1045;
  int v1046;
  size_t v1047;
  unint64_t v1048;
  __int128 *v1049;
  uint64_t v1050;
  uint64_t v1051;
  __int128 *v1052;
  unint64_t v1053;
  void *v1054;
  __int128 v1055;
  uint64_t v1056;
  __int128 v1057;
  std::__shared_weak_count *v1058;
  char *v1059;
  int v1060;
  std::__shared_weak_count *v1061;
  std::__shared_weak_count *v1062;
  uint64_t v1063;
  void **v1064;
  unint64_t *v1065;
  unint64_t v1066;
  void **v1067;
  uint64_t v1068;
  unint64_t v1069;
  char *v1070;
  int v1071;
  std::__shared_weak_count *v1072;
  std::__shared_weak_count *v1073;
  std::__shared_weak_count *v1074;
  uint64_t v1075;
  void **v1076;
  unint64_t *v1077;
  unint64_t v1078;
  void **v1079;
  void *v1080;
  uint64_t v1081;
  unint64_t v1082;
  char *v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  __int128 *v1087;
  char *v1088;
  __int128 *v1089;
  char *v1090;
  uint64_t v1091;
  unint64_t v1092;
  void *v1093;
  __int128 v1094;
  uint64_t v1095;
  __int128 v1096;
  char *v1097;
  uint64_t v1098;
  void **v1099;
  char *v1100;
  void **v1101;
  char *v1102;
  uint64_t v1105;
  int v1106;
  size_t v1107;
  unint64_t v1108;
  __int128 *v1109;
  uint64_t v1110;
  uint64_t v1111;
  __int128 *v1112;
  unint64_t v1113;
  void *v1114;
  __int128 v1115;
  uint64_t v1116;
  __int128 v1117;
  std::__shared_weak_count *v1118;
  char *v1119;
  int v1120;
  std::__shared_weak_count *v1121;
  std::__shared_weak_count *v1122;
  uint64_t v1123;
  void **v1124;
  unint64_t *v1125;
  unint64_t v1126;
  void **v1127;
  uint64_t v1128;
  unint64_t v1129;
  char *v1130;
  int v1131;
  std::__shared_weak_count *v1132;
  std::__shared_weak_count *v1133;
  std::__shared_weak_count *v1134;
  uint64_t v1135;
  void **v1136;
  unint64_t *v1137;
  unint64_t v1138;
  void **v1139;
  void *v1140;
  uint64_t v1141;
  unint64_t v1142;
  char *v1143;
  int v1144;
  uint64_t v1145;
  uint64_t v1146;
  __int128 *v1147;
  char *v1148;
  __int128 *v1149;
  char *v1150;
  uint64_t v1151;
  unint64_t v1152;
  void *v1153;
  __int128 v1154;
  uint64_t v1155;
  __int128 v1156;
  char *v1157;
  uint64_t v1158;
  void **v1159;
  char *v1160;
  void **v1161;
  char *v1162;
  uint64_t v1165;
  int v1166;
  size_t v1167;
  unint64_t v1168;
  __int128 *v1169;
  uint64_t v1170;
  uint64_t v1171;
  __int128 *v1172;
  unint64_t v1173;
  void *v1174;
  __int128 v1175;
  uint64_t v1176;
  __int128 v1177;
  std::__shared_weak_count *v1178;
  char *v1179;
  int v1180;
  std::__shared_weak_count *v1181;
  std::__shared_weak_count *v1182;
  uint64_t v1183;
  void **v1184;
  unint64_t *v1185;
  unint64_t v1186;
  void **v1187;
  uint64_t v1188;
  unint64_t v1189;
  char *v1190;
  int v1191;
  std::__shared_weak_count *v1192;
  std::__shared_weak_count *v1193;
  std::__shared_weak_count *v1194;
  uint64_t v1195;
  void **v1196;
  unint64_t *v1197;
  unint64_t v1198;
  void **v1199;
  void *v1200;
  uint64_t v1201;
  unint64_t v1202;
  char *v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  __int128 *v1207;
  char *v1208;
  __int128 *v1209;
  char *v1210;
  uint64_t v1211;
  unint64_t v1212;
  void *v1213;
  __int128 v1214;
  uint64_t v1215;
  __int128 v1216;
  char *v1217;
  uint64_t v1218;
  void **v1219;
  char *v1220;
  void **v1221;
  char *v1222;
  uint64_t v1225;
  int v1226;
  size_t v1227;
  unint64_t v1228;
  __int128 *v1229;
  uint64_t v1230;
  uint64_t v1231;
  __int128 *v1232;
  unint64_t v1233;
  void *v1234;
  __int128 v1235;
  uint64_t v1236;
  __int128 v1237;
  std::__shared_weak_count *v1238;
  char *v1239;
  int v1240;
  std::__shared_weak_count *v1241;
  std::__shared_weak_count *v1242;
  uint64_t v1243;
  void **v1244;
  unint64_t *v1245;
  unint64_t v1246;
  void **v1247;
  uint64_t v1248;
  unint64_t v1249;
  char *v1250;
  int v1251;
  std::__shared_weak_count *v1252;
  std::__shared_weak_count *v1253;
  std::__shared_weak_count *v1254;
  uint64_t v1255;
  void **v1256;
  unint64_t *v1257;
  unint64_t v1258;
  void **v1259;
  void *v1260;
  uint64_t v1261;
  unint64_t v1262;
  char *v1263;
  int v1264;
  uint64_t v1265;
  uint64_t v1266;
  __int128 *v1267;
  char *v1268;
  __int128 *v1269;
  char *v1270;
  uint64_t v1271;
  unint64_t v1272;
  void *v1273;
  __int128 v1274;
  uint64_t v1275;
  __int128 v1276;
  char *v1277;
  uint64_t v1278;
  void **v1279;
  char *v1280;
  void **v1281;
  char *v1282;
  uint64_t v1285;
  int v1286;
  size_t v1287;
  unint64_t v1288;
  __int128 *v1289;
  uint64_t v1290;
  uint64_t v1291;
  __int128 *v1292;
  unint64_t v1293;
  void *v1294;
  __int128 v1295;
  uint64_t v1296;
  __int128 v1297;
  std::__shared_weak_count *v1298;
  char *v1299;
  int v1300;
  std::__shared_weak_count *v1301;
  std::__shared_weak_count *v1302;
  uint64_t v1303;
  void **v1304;
  unint64_t *v1305;
  unint64_t v1306;
  void **v1307;
  uint64_t v1308;
  unint64_t v1309;
  char *v1310;
  int v1311;
  std::__shared_weak_count *v1312;
  std::__shared_weak_count *v1313;
  std::__shared_weak_count *v1314;
  uint64_t v1315;
  void **v1316;
  unint64_t *v1317;
  unint64_t v1318;
  void **v1319;
  void *v1320;
  uint64_t v1321;
  unint64_t v1322;
  char *v1323;
  int v1324;
  uint64_t v1325;
  uint64_t v1326;
  __int128 *v1327;
  char *v1328;
  __int128 *v1329;
  char *v1330;
  uint64_t v1331;
  unint64_t v1332;
  void *v1333;
  __int128 v1334;
  uint64_t v1335;
  __int128 v1336;
  char *v1337;
  uint64_t v1338;
  void **v1339;
  char *v1340;
  void **v1341;
  char *v1342;
  uint64_t v1345;
  int v1346;
  size_t v1347;
  unint64_t v1348;
  __int128 *v1349;
  uint64_t v1350;
  uint64_t v1351;
  __int128 *v1352;
  unint64_t v1353;
  void *v1354;
  __int128 v1355;
  uint64_t v1356;
  __int128 v1357;
  std::__shared_weak_count *v1358;
  char *v1359;
  int v1360;
  std::__shared_weak_count *v1361;
  std::__shared_weak_count *v1362;
  uint64_t v1363;
  void **v1364;
  unint64_t *v1365;
  unint64_t v1366;
  void **v1367;
  uint64_t v1368;
  unint64_t v1369;
  char *v1370;
  int v1371;
  std::__shared_weak_count *v1372;
  std::__shared_weak_count *v1373;
  std::__shared_weak_count *v1374;
  uint64_t v1375;
  void **v1376;
  unint64_t *v1377;
  unint64_t v1378;
  void **v1379;
  void *v1380;
  uint64_t v1381;
  unint64_t v1382;
  char *v1383;
  int v1384;
  uint64_t v1385;
  uint64_t v1386;
  __int128 *v1387;
  char *v1388;
  __int128 *v1389;
  char *v1390;
  uint64_t v1391;
  unint64_t v1392;
  void *v1393;
  __int128 v1394;
  uint64_t v1395;
  __int128 v1396;
  char *v1397;
  uint64_t v1398;
  void **v1399;
  char *v1400;
  void **v1401;
  char *v1402;
  uint64_t v1405;
  int v1406;
  size_t v1407;
  unint64_t v1408;
  __int128 *v1409;
  uint64_t v1410;
  uint64_t v1411;
  __int128 *v1412;
  unint64_t v1413;
  void *v1414;
  __int128 v1415;
  uint64_t v1416;
  __int128 v1417;
  std::__shared_weak_count *v1418;
  char *v1419;
  int v1420;
  std::__shared_weak_count *v1421;
  std::__shared_weak_count *v1422;
  uint64_t v1423;
  void **v1424;
  unint64_t *v1425;
  unint64_t v1426;
  void **v1427;
  uint64_t v1428;
  unint64_t v1429;
  char *v1430;
  int v1431;
  std::__shared_weak_count *v1432;
  std::__shared_weak_count *v1433;
  std::__shared_weak_count *v1434;
  uint64_t v1435;
  void **v1436;
  unint64_t *v1437;
  unint64_t v1438;
  void **v1439;
  void *v1440;
  uint64_t v1441;
  unint64_t v1442;
  char *v1443;
  int v1444;
  uint64_t v1445;
  uint64_t v1446;
  __int128 *v1447;
  char *v1448;
  __int128 *v1449;
  char *v1450;
  uint64_t v1451;
  unint64_t v1452;
  void *v1453;
  __int128 v1454;
  uint64_t v1455;
  __int128 v1456;
  char *v1457;
  uint64_t v1458;
  void **v1459;
  char *v1460;
  void **v1461;
  char *v1462;
  uint64_t v1465;
  int v1466;
  size_t v1467;
  unint64_t v1468;
  __int128 *v1469;
  uint64_t v1470;
  uint64_t v1471;
  __int128 *v1472;
  unint64_t v1473;
  void *v1474;
  __int128 v1475;
  uint64_t v1476;
  __int128 v1477;
  std::__shared_weak_count *v1478;
  char *v1479;
  int v1480;
  std::__shared_weak_count *v1481;
  std::__shared_weak_count *v1482;
  uint64_t v1483;
  void **v1484;
  unint64_t *v1485;
  unint64_t v1486;
  void **v1487;
  uint64_t v1488;
  unint64_t v1489;
  char *v1490;
  int v1491;
  std::__shared_weak_count *v1492;
  std::__shared_weak_count *v1493;
  std::__shared_weak_count *v1494;
  uint64_t v1495;
  void **v1496;
  unint64_t *v1497;
  unint64_t v1498;
  void **v1499;
  void *v1500;
  uint64_t v1501;
  unint64_t v1502;
  char *v1503;
  int v1504;
  unsigned __int8 v1505;
  int v1506;
  size_t v1507;
  unint64_t v1508;
  __int128 *v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t *v1512;
  unsigned __int8 v1513;
  int v1514;
  size_t v1515;
  unint64_t v1516;
  char *v1517;
  uint64_t v1518;
  uint64_t v1519;
  char *v1520;
  __int128 *v1521;
  unsigned __int8 v1522;
  unsigned __int8 v1523;
  unsigned __int8 v1524;
  size_t v1525;
  uint64_t *v1526;
  _BYTE *v1527;
  size_t v1528;
  uint64_t *v1529;
  _BYTE *v1530;
  unint64_t v1531;
  __int128 *v1532;
  uint64_t v1533;
  uint64_t v1534;
  unsigned __int8 v1535;
  unsigned __int8 v1536;
  unsigned __int8 v1537;
  unsigned __int8 v1538;
  int64x2_t v1539;
  int8x16_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  void *v1543;
  void *v1544[2];
  uint64_t v1545;
  void *v1546[2];
  int64_t v1547;
  void *__s[2];
  __int128 v1549;
  unint64_t v1550;
  __int128 v1551;
  _BYTE v1552[24];
  uint64_t v1553;
  void *v1554[2];
  uint64_t v1555;
  __int128 __dst;
  int64_t v1557;
  __int128 v1558;
  uint64_t v1559;
  uint64_t v1560;

  v1560 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 31) < 0)
  {
    sub_223197FA4(&__dst, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 8);
    v1557 = *(_QWORD *)(a1 + 24);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 48))(*(_QWORD *)(a1 + 96));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBCF0;
    v1559 = unk_2540CBD00;
  }
  v5 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v6 = &v1558;
  }
  else
  {
    v5 = *((_QWORD *)&v1558 + 1);
    v6 = (__int128 *)v1558;
  }
  if (v5 >= 4)
  {
    v7 = (char *)v6 + v5;
    v8 = v6;
    do
    {
      v9 = (char *)memchr(v8, 118, v5 - 3);
      if (!v9)
        break;
      if (*(_DWORD *)v9 == 1684631414)
      {
        if (v9 == v7 || v9 - (char *)v6 == -1)
          break;
        v10 = *a2;
        __s[0] = (void *)v4;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 55) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 32);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 48);
        }
        sub_22363D298();
        if (byte_255793167 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793150, *((unint64_t *)&xmmword_255793150 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793150;
          v1553 = unk_255793160;
        }
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 < *(_QWORD *)(v10 + 16))
          goto LABEL_30;
        goto LABEL_31;
      }
      v8 = (__int128 *)(v9 + 1);
      v5 = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 4);
  }
  v10 = *a2;
  __s[0] = (void *)v4;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 55) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 48);
  }
  sub_22363D298();
  if (byte_255793167 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793150, *((unint64_t *)&xmmword_255793150 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793150;
    v1553 = unk_255793160;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 >= *(_QWORD *)(v10 + 16))
  {
LABEL_31:
    v16 = sub_2236285DC((char **)v10, (uint64_t)__s);
  }
  else
  {
LABEL_30:
    v12 = __s[0];
    *(_DWORD *)(v11 + 8) = __s[1];
    *(_QWORD *)v11 = v12;
    v13 = v1549;
    *(_QWORD *)(v11 + 32) = v1550;
    *(_OWORD *)(v11 + 16) = v13;
    v1550 = 0;
    v1549 = 0uLL;
    v14 = *(_QWORD *)v1552;
    *(_OWORD *)(v11 + 40) = v1551;
    *(_QWORD *)(v11 + 56) = v14;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v15 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v11 + 80) = v1553;
    *(_OWORD *)(v11 + 64) = v15;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v16 = (char *)(v11 + 88);
  }
  *(_QWORD *)(v10 + 8) = v16;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_34;
LABEL_38:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_39;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_38;
LABEL_34:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_35;
LABEL_39:
  operator delete((void *)v1549);
LABEL_35:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v17 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v18 = v1554;
  }
  else
  {
    v17 = (uint64_t)v1554[1];
    v18 = (void **)v1554[0];
  }
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_80;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  v24 = *a2;
  __s[0] = (void *)(v4 + 1);
  LODWORD(__s[1]) = 3;
  v25 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v26 = HIBYTE(v1557);
  else
    v26 = *((_QWORD *)&__dst + 1);
  v27 = v26 + 6;
  if (v26 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v27 >= 0x17)
  {
    v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v29 = v27 | 7;
    v30 = v29 + 1;
    v28 = (__int128 *)operator new(v29 + 1);
    *((_QWORD *)&v1549 + 1) = v26 + 6;
    v1550 = v30 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v28;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v28 = &v1549;
    HIBYTE(v1550) = v26 + 6;
    if (!v26)
      goto LABEL_72;
  }
  if (v25 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v28, p_dst, v26);
LABEL_72:
  strcpy((char *)v28 + v26, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v32 = *(_QWORD *)(v24 + 8);
  if (v32 >= *(_QWORD *)(v24 + 16))
  {
    v38 = sub_2236285DC((char **)v24, (uint64_t)__s);
    v39 = SHIBYTE(v1553);
    *(_QWORD *)(v24 + 8) = v38;
    if (v39 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
LABEL_74:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_75;
    goto LABEL_80;
  }
  v33 = __s[0];
  *(_DWORD *)(v32 + 8) = __s[1];
  *(_QWORD *)v32 = v33;
  v34 = v1549;
  *(_QWORD *)(v32 + 32) = v1550;
  *(_OWORD *)(v32 + 16) = v34;
  v1550 = 0;
  v1549 = 0uLL;
  v35 = *(_QWORD *)v1552;
  *(_OWORD *)(v32 + 40) = v1551;
  *(_QWORD *)(v32 + 56) = v35;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v36 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v32 + 80) = v1553;
  *(_OWORD *)(v32 + 64) = v36;
  *(_QWORD *)(v24 + 8) = v32 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_74;
LABEL_79:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_75:
    operator delete((void *)v1549);
    v37 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v37)
      goto LABEL_84;
    goto LABEL_81;
  }
LABEL_80:
  v37 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v37)
  {
LABEL_84:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v43 = 0;
    goto LABEL_99;
  }
LABEL_81:
  v40 = std::__shared_weak_count::lock(v37);
  if (!v40)
    goto LABEL_84;
  v41 = v40;
  v42 = *(_QWORD *)(a1 + 128);
  if (v42)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v42 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = (void **)v1546[0];
    v46 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_99;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = (void **)v1546[0];
    v46 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_99;
  }
  do
  {
    v47 = a2[1];
    __s[0] = (void *)v4;
    __s[1] = *v43;
    v1550 = 0;
    v1549 = 0uLL;
    v48 = *(_QWORD *)(v47 + 8);
    if (v48 < *(_QWORD *)(v47 + 16))
    {
      *(_OWORD *)v48 = *(_OWORD *)__s;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v47 + 8) = v48 + 40;
    }
    else
    {
      v49 = sub_223628FA4((void **)v47, (uint64_t)__s);
      v50 = SHIBYTE(v1550);
      *(_QWORD *)(v47 + 8) = v49;
      if (v50 < 0)
        operator delete((void *)v1549);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = (void **)v1546[0];
LABEL_99:
  if (v43)
  {
    v1546[1] = v43;
    operator delete(v43);
  }
  v51 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v51 || (v52 = std::__shared_weak_count::lock(v51)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v55 = 0;
    goto LABEL_120;
  }
  v53 = v52;
  v54 = *(_QWORD *)(a1 + 128);
  if (v54)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v54 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
    v55 = (void **)v1546[0];
    v58 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_120;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v55 = (void **)v1546[0];
    v58 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_120;
  }
  v59 = (void *)(v4 + 1);
  do
  {
    v60 = a2[1];
    __s[0] = v59;
    __s[1] = *v55;
    v1550 = 0;
    v1549 = 0uLL;
    v61 = *(_QWORD *)(v60 + 8);
    if (v61 < *(_QWORD *)(v60 + 16))
    {
      *(_OWORD *)v61 = *(_OWORD *)__s;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)(v60 + 8) = v61 + 40;
    }
    else
    {
      v62 = sub_223628FA4((void **)v60, (uint64_t)__s);
      v63 = SHIBYTE(v1550);
      *(_QWORD *)(v60 + 8) = v62;
      if (v63 < 0)
        operator delete((void *)v1549);
    }
    ++v55;
  }
  while (v55 != v58);
  v55 = (void **)v1546[0];
LABEL_120:
  if (v55)
  {
    v1546[1] = v55;
    operator delete(v55);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_125;
LABEL_129:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 199) & 0x80000000) == 0)
        goto LABEL_126;
      goto LABEL_130;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_124;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_129;
LABEL_125:
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_126:
    __dst = *(_OWORD *)(a1 + 176);
    v1557 = *(_QWORD *)(a1 + 192);
    goto LABEL_131;
  }
LABEL_130:
  sub_223197FA4(&__dst, *(void **)(a1 + 176), *(_QWORD *)(a1 + 184));
LABEL_131:
  v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 48))(*(_QWORD *)(a1 + 264));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBCF0;
    v1559 = unk_2540CBD00;
  }
  v65 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v66 = &v1558;
  }
  else
  {
    v65 = *((_QWORD *)&v1558 + 1);
    v66 = (__int128 *)v1558;
  }
  if (v65 >= 4)
  {
    v67 = (char *)v66 + v65;
    v68 = v66;
    do
    {
      v69 = (char *)memchr(v68, 118, v65 - 3);
      if (!v69)
        break;
      if (*(_DWORD *)v69 == 1684631414)
      {
        if (v69 == v67 || v69 - (char *)v66 == -1)
          break;
        v70 = *a2;
        __s[0] = (void *)v64;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 223) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 200), *(_QWORD *)(a1 + 208));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 200);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 216);
        }
        sub_22363D45C();
        if (byte_2557931AF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793198, *((unint64_t *)&xmmword_255793198 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793198;
          v1553 = unk_2557931A8;
        }
        v71 = *(_QWORD *)(v70 + 8);
        if (v71 < *(_QWORD *)(v70 + 16))
          goto LABEL_157;
        goto LABEL_158;
      }
      v68 = (__int128 *)(v69 + 1);
      v65 = v67 - (char *)v68;
    }
    while (v67 - (char *)v68 >= 4);
  }
  v70 = *a2;
  __s[0] = (void *)v64;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 223) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 200);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 216);
  }
  sub_22363D45C();
  if (byte_2557931AF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793198, *((unint64_t *)&xmmword_255793198 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793198;
    v1553 = unk_2557931A8;
  }
  v71 = *(_QWORD *)(v70 + 8);
  if (v71 >= *(_QWORD *)(v70 + 16))
  {
LABEL_158:
    v76 = sub_2236285DC((char **)v70, (uint64_t)__s);
  }
  else
  {
LABEL_157:
    v72 = __s[0];
    *(_DWORD *)(v71 + 8) = __s[1];
    *(_QWORD *)v71 = v72;
    v73 = v1549;
    *(_QWORD *)(v71 + 32) = v1550;
    *(_OWORD *)(v71 + 16) = v73;
    v1550 = 0;
    v1549 = 0uLL;
    v74 = *(_QWORD *)v1552;
    *(_OWORD *)(v71 + 40) = v1551;
    *(_QWORD *)(v71 + 56) = v74;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v75 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v71 + 80) = v1553;
    *(_OWORD *)(v71 + 64) = v75;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v76 = (char *)(v71 + 88);
  }
  *(_QWORD *)(v70 + 8) = v76;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_161;
LABEL_165:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_162;
    goto LABEL_166;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_165;
LABEL_161:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_162;
LABEL_166:
  operator delete((void *)v1549);
LABEL_162:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v77 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v78 = v1554;
  }
  else
  {
    v77 = (uint64_t)v1554[1];
    v78 = (void **)v1554[0];
  }
  if (v77 >= 18)
  {
    v79 = (char *)v78 + v77;
    v80 = v78;
    do
    {
      v81 = (char *)memchr(v80, 67, v77 - 17);
      if (!v81)
        break;
      if (*(_QWORD *)v81 == 0x456C656E6E616843
        && *((_QWORD *)v81 + 1) == 0x696F763C726F7272
        && *((_WORD *)v81 + 8) == 15972)
      {
        if (v81 != v79 && v81 - (char *)v78 != -1)
          goto LABEL_207;
        break;
      }
      v80 = (void **)(v81 + 1);
      v77 = v79 - (char *)v80;
    }
    while (v79 - (char *)v80 >= 18);
  }
  v84 = *a2;
  __s[0] = (void *)(v64 + 1);
  LODWORD(__s[1]) = 3;
  v85 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v86 = HIBYTE(v1557);
  else
    v86 = *((_QWORD *)&__dst + 1);
  v87 = v86 + 6;
  if (v86 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v87 >= 0x17)
  {
    v89 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v89 = v87 | 7;
    v90 = v89 + 1;
    v88 = (__int128 *)operator new(v89 + 1);
    *((_QWORD *)&v1549 + 1) = v86 + 6;
    v1550 = v90 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v88;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v88 = &v1549;
    HIBYTE(v1550) = v86 + 6;
    if (!v86)
      goto LABEL_199;
  }
  if (v85 >= 0)
    v91 = &__dst;
  else
    v91 = (__int128 *)__dst;
  memmove(v88, v91, v86);
LABEL_199:
  strcpy((char *)v88 + v86, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v92 = *(_QWORD *)(v84 + 8);
  if (v92 >= *(_QWORD *)(v84 + 16))
  {
    v98 = sub_2236285DC((char **)v84, (uint64_t)__s);
    v99 = SHIBYTE(v1553);
    *(_QWORD *)(v84 + 8) = v98;
    if (v99 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_206;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_206;
    }
LABEL_201:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_202;
    goto LABEL_207;
  }
  v93 = __s[0];
  *(_DWORD *)(v92 + 8) = __s[1];
  *(_QWORD *)v92 = v93;
  v94 = v1549;
  *(_QWORD *)(v92 + 32) = v1550;
  *(_OWORD *)(v92 + 16) = v94;
  v1550 = 0;
  v1549 = 0uLL;
  v95 = *(_QWORD *)v1552;
  *(_OWORD *)(v92 + 40) = v1551;
  *(_QWORD *)(v92 + 56) = v95;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v96 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v92 + 80) = v1553;
  *(_OWORD *)(v92 + 64) = v96;
  *(_QWORD *)(v84 + 8) = v92 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_201;
LABEL_206:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_202:
    operator delete((void *)v1549);
    v97 = *(std::__shared_weak_count **)(a1 + 304);
    if (!v97)
      goto LABEL_211;
    goto LABEL_208;
  }
LABEL_207:
  v97 = *(std::__shared_weak_count **)(a1 + 304);
  if (!v97)
  {
LABEL_211:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v103 = 0;
    goto LABEL_228;
  }
LABEL_208:
  v100 = std::__shared_weak_count::lock(v97);
  if (!v100)
    goto LABEL_211;
  v101 = v100;
  v102 = *(_QWORD *)(a1 + 296);
  if (v102)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v102 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v104 = (unint64_t *)&v101->__shared_owners_;
  do
    v105 = __ldaxr(v104);
  while (__stlxr(v105 - 1, v104));
  if (v105)
  {
    v103 = (void **)v1546[0];
    v106 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_228;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
    v103 = (void **)v1546[0];
    v106 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_228;
  }
  do
  {
    v107 = a2[1];
    __s[0] = (void *)v64;
    __s[1] = *v103;
    v1550 = 0;
    v1549 = 0uLL;
    v108 = *(_QWORD *)(v107 + 8);
    if (v108 < *(_QWORD *)(v107 + 16))
    {
      *(_OWORD *)v108 = *(_OWORD *)__s;
      *(_QWORD *)(v108 + 24) = 0;
      *(_QWORD *)(v108 + 32) = 0;
      *(_QWORD *)(v108 + 16) = 0;
      *(_QWORD *)(v107 + 8) = v108 + 40;
    }
    else
    {
      v109 = sub_223628FA4((void **)v107, (uint64_t)__s);
      v110 = SHIBYTE(v1550);
      *(_QWORD *)(v107 + 8) = v109;
      if (v110 < 0)
        operator delete((void *)v1549);
    }
    ++v103;
  }
  while (v103 != v106);
  v103 = (void **)v1546[0];
LABEL_228:
  if (v103)
  {
    v1546[1] = v103;
    operator delete(v103);
  }
  v111 = *(std::__shared_weak_count **)(a1 + 304);
  if (!v111 || (v112 = std::__shared_weak_count::lock(v111)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v115 = 0;
    goto LABEL_249;
  }
  v113 = v112;
  v114 = *(_QWORD *)(a1 + 296);
  if (v114)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v114 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v116 = (unint64_t *)&v113->__shared_owners_;
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (v117)
  {
    v115 = (void **)v1546[0];
    v118 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_249;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    v115 = (void **)v1546[0];
    v118 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_249;
  }
  v119 = (void *)(v64 + 1);
  do
  {
    v120 = a2[1];
    __s[0] = v119;
    __s[1] = *v115;
    v1550 = 0;
    v1549 = 0uLL;
    v121 = *(_QWORD *)(v120 + 8);
    if (v121 < *(_QWORD *)(v120 + 16))
    {
      *(_OWORD *)v121 = *(_OWORD *)__s;
      *(_QWORD *)(v121 + 24) = 0;
      *(_QWORD *)(v121 + 32) = 0;
      *(_QWORD *)(v121 + 16) = 0;
      *(_QWORD *)(v120 + 8) = v121 + 40;
    }
    else
    {
      v122 = sub_223628FA4((void **)v120, (uint64_t)__s);
      v123 = SHIBYTE(v1550);
      *(_QWORD *)(v120 + 8) = v122;
      if (v123 < 0)
        operator delete((void *)v1549);
    }
    ++v115;
  }
  while (v115 != v118);
  v115 = (void **)v1546[0];
LABEL_249:
  if (v115)
  {
    v1546[1] = v115;
    operator delete(v115);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_253:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_254;
LABEL_258:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 367) & 0x80000000) == 0)
        goto LABEL_255;
      goto LABEL_259;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_253;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_258;
LABEL_254:
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_255:
    __dst = *(_OWORD *)(a1 + 344);
    v1557 = *(_QWORD *)(a1 + 360);
    goto LABEL_260;
  }
LABEL_259:
  sub_223197FA4(&__dst, *(void **)(a1 + 344), *(_QWORD *)(a1 + 352));
LABEL_260:
  v124 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 432) + 48))(*(_QWORD *)(a1 + 432));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBCF0;
    v1559 = unk_2540CBD00;
  }
  v125 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v126 = &v1558;
  }
  else
  {
    v125 = *((_QWORD *)&v1558 + 1);
    v126 = (__int128 *)v1558;
  }
  if (v125 >= 4)
  {
    v127 = (char *)v126 + v125;
    v128 = v126;
    do
    {
      v129 = (char *)memchr(v128, 118, v125 - 3);
      if (!v129)
        break;
      if (*(_DWORD *)v129 == 1684631414)
      {
        if (v129 == v127 || v129 - (char *)v126 == -1)
          break;
        v130 = *a2;
        __s[0] = (void *)v124;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 391) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 368), *(_QWORD *)(a1 + 376));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 368);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 384);
        }
        sub_22363D620();
        if (byte_2557931F7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557931E0, *((unint64_t *)&xmmword_2557931E0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557931E0;
          v1553 = unk_2557931F0;
        }
        v131 = *(_QWORD *)(v130 + 8);
        if (v131 < *(_QWORD *)(v130 + 16))
          goto LABEL_286;
        goto LABEL_287;
      }
      v128 = (__int128 *)(v129 + 1);
      v125 = v127 - (char *)v128;
    }
    while (v127 - (char *)v128 >= 4);
  }
  v130 = *a2;
  __s[0] = (void *)v124;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 391) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 368), *(_QWORD *)(a1 + 376));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 368);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 384);
  }
  sub_22363D620();
  if (byte_2557931F7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557931E0, *((unint64_t *)&xmmword_2557931E0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557931E0;
    v1553 = unk_2557931F0;
  }
  v131 = *(_QWORD *)(v130 + 8);
  if (v131 >= *(_QWORD *)(v130 + 16))
  {
LABEL_287:
    v136 = sub_2236285DC((char **)v130, (uint64_t)__s);
  }
  else
  {
LABEL_286:
    v132 = __s[0];
    *(_DWORD *)(v131 + 8) = __s[1];
    *(_QWORD *)v131 = v132;
    v133 = v1549;
    *(_QWORD *)(v131 + 32) = v1550;
    *(_OWORD *)(v131 + 16) = v133;
    v1550 = 0;
    v1549 = 0uLL;
    v134 = *(_QWORD *)v1552;
    *(_OWORD *)(v131 + 40) = v1551;
    *(_QWORD *)(v131 + 56) = v134;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v135 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v131 + 80) = v1553;
    *(_OWORD *)(v131 + 64) = v135;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v136 = (char *)(v131 + 88);
  }
  *(_QWORD *)(v130 + 8) = v136;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_290;
LABEL_294:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_291;
    goto LABEL_295;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_294;
LABEL_290:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_291;
LABEL_295:
  operator delete((void *)v1549);
LABEL_291:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v137 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v138 = v1554;
  }
  else
  {
    v137 = (uint64_t)v1554[1];
    v138 = (void **)v1554[0];
  }
  if (v137 >= 18)
  {
    v139 = (char *)v138 + v137;
    v140 = v138;
    do
    {
      v141 = (char *)memchr(v140, 67, v137 - 17);
      if (!v141)
        break;
      if (*(_QWORD *)v141 == 0x456C656E6E616843
        && *((_QWORD *)v141 + 1) == 0x696F763C726F7272
        && *((_WORD *)v141 + 8) == 15972)
      {
        if (v141 != v139 && v141 - (char *)v138 != -1)
          goto LABEL_336;
        break;
      }
      v140 = (void **)(v141 + 1);
      v137 = v139 - (char *)v140;
    }
    while (v139 - (char *)v140 >= 18);
  }
  v144 = *a2;
  __s[0] = (void *)(v124 + 1);
  LODWORD(__s[1]) = 3;
  v145 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v146 = HIBYTE(v1557);
  else
    v146 = *((_QWORD *)&__dst + 1);
  v147 = v146 + 6;
  if (v146 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v147 >= 0x17)
  {
    v149 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v147 | 7) != 0x17)
      v149 = v147 | 7;
    v150 = v149 + 1;
    v148 = (__int128 *)operator new(v149 + 1);
    *((_QWORD *)&v1549 + 1) = v146 + 6;
    v1550 = v150 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v148;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v148 = &v1549;
    HIBYTE(v1550) = v146 + 6;
    if (!v146)
      goto LABEL_328;
  }
  if (v145 >= 0)
    v151 = &__dst;
  else
    v151 = (__int128 *)__dst;
  memmove(v148, v151, v146);
LABEL_328:
  strcpy((char *)v148 + v146, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v152 = *(_QWORD *)(v144 + 8);
  if (v152 >= *(_QWORD *)(v144 + 16))
  {
    v158 = sub_2236285DC((char **)v144, (uint64_t)__s);
    v159 = SHIBYTE(v1553);
    *(_QWORD *)(v144 + 8) = v158;
    if (v159 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_335;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_335;
    }
LABEL_330:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_331;
    goto LABEL_336;
  }
  v153 = __s[0];
  *(_DWORD *)(v152 + 8) = __s[1];
  *(_QWORD *)v152 = v153;
  v154 = v1549;
  *(_QWORD *)(v152 + 32) = v1550;
  *(_OWORD *)(v152 + 16) = v154;
  v1550 = 0;
  v1549 = 0uLL;
  v155 = *(_QWORD *)v1552;
  *(_OWORD *)(v152 + 40) = v1551;
  *(_QWORD *)(v152 + 56) = v155;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v156 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v152 + 80) = v1553;
  *(_OWORD *)(v152 + 64) = v156;
  *(_QWORD *)(v144 + 8) = v152 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_330;
LABEL_335:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_331:
    operator delete((void *)v1549);
    v157 = *(std::__shared_weak_count **)(a1 + 472);
    if (!v157)
      goto LABEL_340;
    goto LABEL_337;
  }
LABEL_336:
  v157 = *(std::__shared_weak_count **)(a1 + 472);
  if (!v157)
  {
LABEL_340:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v163 = 0;
    goto LABEL_357;
  }
LABEL_337:
  v160 = std::__shared_weak_count::lock(v157);
  if (!v160)
    goto LABEL_340;
  v161 = v160;
  v162 = *(_QWORD *)(a1 + 464);
  if (v162)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v162 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v164 = (unint64_t *)&v161->__shared_owners_;
  do
    v165 = __ldaxr(v164);
  while (__stlxr(v165 - 1, v164));
  if (v165)
  {
    v163 = (void **)v1546[0];
    v166 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_357;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
    v163 = (void **)v1546[0];
    v166 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_357;
  }
  do
  {
    v167 = a2[1];
    __s[0] = (void *)v124;
    __s[1] = *v163;
    v1550 = 0;
    v1549 = 0uLL;
    v168 = *(_QWORD *)(v167 + 8);
    if (v168 < *(_QWORD *)(v167 + 16))
    {
      *(_OWORD *)v168 = *(_OWORD *)__s;
      *(_QWORD *)(v168 + 24) = 0;
      *(_QWORD *)(v168 + 32) = 0;
      *(_QWORD *)(v168 + 16) = 0;
      *(_QWORD *)(v167 + 8) = v168 + 40;
    }
    else
    {
      v169 = sub_223628FA4((void **)v167, (uint64_t)__s);
      v170 = SHIBYTE(v1550);
      *(_QWORD *)(v167 + 8) = v169;
      if (v170 < 0)
        operator delete((void *)v1549);
    }
    ++v163;
  }
  while (v163 != v166);
  v163 = (void **)v1546[0];
LABEL_357:
  if (v163)
  {
    v1546[1] = v163;
    operator delete(v163);
  }
  v171 = *(std::__shared_weak_count **)(a1 + 472);
  if (!v171 || (v172 = std::__shared_weak_count::lock(v171)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v175 = 0;
    goto LABEL_378;
  }
  v173 = v172;
  v174 = *(_QWORD *)(a1 + 464);
  if (v174)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v174 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v176 = (unint64_t *)&v173->__shared_owners_;
  do
    v177 = __ldaxr(v176);
  while (__stlxr(v177 - 1, v176));
  if (v177)
  {
    v175 = (void **)v1546[0];
    v178 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_378;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
    v175 = (void **)v1546[0];
    v178 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_378;
  }
  v179 = (void *)(v124 + 1);
  do
  {
    v180 = a2[1];
    __s[0] = v179;
    __s[1] = *v175;
    v1550 = 0;
    v1549 = 0uLL;
    v181 = *(_QWORD *)(v180 + 8);
    if (v181 < *(_QWORD *)(v180 + 16))
    {
      *(_OWORD *)v181 = *(_OWORD *)__s;
      *(_QWORD *)(v181 + 24) = 0;
      *(_QWORD *)(v181 + 32) = 0;
      *(_QWORD *)(v181 + 16) = 0;
      *(_QWORD *)(v180 + 8) = v181 + 40;
    }
    else
    {
      v182 = sub_223628FA4((void **)v180, (uint64_t)__s);
      v183 = SHIBYTE(v1550);
      *(_QWORD *)(v180 + 8) = v182;
      if (v183 < 0)
        operator delete((void *)v1549);
    }
    ++v175;
  }
  while (v175 != v178);
  v175 = (void **)v1546[0];
LABEL_378:
  if (v175)
  {
    v1546[1] = v175;
    operator delete(v175);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_382:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_383;
LABEL_387:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 535) & 0x80000000) == 0)
        goto LABEL_384;
      goto LABEL_388;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_382;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_387;
LABEL_383:
  if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
LABEL_384:
    __dst = *(_OWORD *)(a1 + 512);
    v1557 = *(_QWORD *)(a1 + 528);
    goto LABEL_389;
  }
LABEL_388:
  sub_223197FA4(&__dst, *(void **)(a1 + 512), *(_QWORD *)(a1 + 520));
LABEL_389:
  v184 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 48))(*(_QWORD *)(a1 + 600));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v185 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v186 = &v1558;
  }
  else
  {
    v185 = *((_QWORD *)&v1558 + 1);
    v186 = (__int128 *)v1558;
  }
  if (v185 >= 4)
  {
    v187 = (char *)v186 + v185;
    v188 = v186;
    do
    {
      v189 = (char *)memchr(v188, 118, v185 - 3);
      if (!v189)
        break;
      if (*(_DWORD *)v189 == 1684631414)
      {
        if (v189 == v187 || v189 - (char *)v186 == -1)
          break;
        v190 = *a2;
        __s[0] = (void *)v184;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 559) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 536), *(_QWORD *)(a1 + 544));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 536);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 552);
        }
        sub_22363DE30();
        if (byte_2557932E7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557932D0, *((unint64_t *)&xmmword_2557932D0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557932D0;
          v1553 = unk_2557932E0;
        }
        v191 = *(_QWORD *)(v190 + 8);
        if (v191 < *(_QWORD *)(v190 + 16))
          goto LABEL_415;
        goto LABEL_416;
      }
      v188 = (__int128 *)(v189 + 1);
      v185 = v187 - (char *)v188;
    }
    while (v187 - (char *)v188 >= 4);
  }
  v190 = *a2;
  __s[0] = (void *)v184;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 559) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 536), *(_QWORD *)(a1 + 544));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 536);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 552);
  }
  sub_22363DE30();
  if (byte_2557932E7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557932D0, *((unint64_t *)&xmmword_2557932D0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557932D0;
    v1553 = unk_2557932E0;
  }
  v191 = *(_QWORD *)(v190 + 8);
  if (v191 >= *(_QWORD *)(v190 + 16))
  {
LABEL_416:
    v196 = sub_2236285DC((char **)v190, (uint64_t)__s);
  }
  else
  {
LABEL_415:
    v192 = __s[0];
    *(_DWORD *)(v191 + 8) = __s[1];
    *(_QWORD *)v191 = v192;
    v193 = v1549;
    *(_QWORD *)(v191 + 32) = v1550;
    *(_OWORD *)(v191 + 16) = v193;
    v1550 = 0;
    v1549 = 0uLL;
    v194 = *(_QWORD *)v1552;
    *(_OWORD *)(v191 + 40) = v1551;
    *(_QWORD *)(v191 + 56) = v194;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v195 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v191 + 80) = v1553;
    *(_OWORD *)(v191 + 64) = v195;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v196 = (char *)(v191 + 88);
  }
  *(_QWORD *)(v190 + 8) = v196;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_419;
LABEL_423:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_420;
    goto LABEL_424;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_423;
LABEL_419:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_420;
LABEL_424:
  operator delete((void *)v1549);
LABEL_420:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v197 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v198 = v1554;
  }
  else
  {
    v197 = (uint64_t)v1554[1];
    v198 = (void **)v1554[0];
  }
  if (v197 >= 18)
  {
    v199 = (char *)v198 + v197;
    v200 = v198;
    do
    {
      v201 = (char *)memchr(v200, 67, v197 - 17);
      if (!v201)
        break;
      if (*(_QWORD *)v201 == 0x456C656E6E616843
        && *((_QWORD *)v201 + 1) == 0x696F763C726F7272
        && *((_WORD *)v201 + 8) == 15972)
      {
        if (v201 != v199 && v201 - (char *)v198 != -1)
          goto LABEL_465;
        break;
      }
      v200 = (void **)(v201 + 1);
      v197 = v199 - (char *)v200;
    }
    while (v199 - (char *)v200 >= 18);
  }
  v204 = *a2;
  __s[0] = (void *)(v184 + 1);
  LODWORD(__s[1]) = 3;
  v205 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v206 = HIBYTE(v1557);
  else
    v206 = *((_QWORD *)&__dst + 1);
  v207 = v206 + 6;
  if (v206 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v207 >= 0x17)
  {
    v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v209 = v207 | 7;
    v210 = v209 + 1;
    v208 = (__int128 *)operator new(v209 + 1);
    *((_QWORD *)&v1549 + 1) = v206 + 6;
    v1550 = v210 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v208;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v208 = &v1549;
    HIBYTE(v1550) = v206 + 6;
    if (!v206)
      goto LABEL_457;
  }
  if (v205 >= 0)
    v211 = &__dst;
  else
    v211 = (__int128 *)__dst;
  memmove(v208, v211, v206);
LABEL_457:
  strcpy((char *)v208 + v206, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v212 = *(_QWORD *)(v204 + 8);
  if (v212 >= *(_QWORD *)(v204 + 16))
  {
    v218 = sub_2236285DC((char **)v204, (uint64_t)__s);
    v219 = SHIBYTE(v1553);
    *(_QWORD *)(v204 + 8) = v218;
    if (v219 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_464;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_464;
    }
LABEL_459:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_460;
    goto LABEL_465;
  }
  v213 = __s[0];
  *(_DWORD *)(v212 + 8) = __s[1];
  *(_QWORD *)v212 = v213;
  v214 = v1549;
  *(_QWORD *)(v212 + 32) = v1550;
  *(_OWORD *)(v212 + 16) = v214;
  v1550 = 0;
  v1549 = 0uLL;
  v215 = *(_QWORD *)v1552;
  *(_OWORD *)(v212 + 40) = v1551;
  *(_QWORD *)(v212 + 56) = v215;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v216 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v212 + 80) = v1553;
  *(_OWORD *)(v212 + 64) = v216;
  *(_QWORD *)(v204 + 8) = v212 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_459;
LABEL_464:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_460:
    operator delete((void *)v1549);
    v217 = *(std::__shared_weak_count **)(a1 + 640);
    if (!v217)
      goto LABEL_469;
    goto LABEL_466;
  }
LABEL_465:
  v217 = *(std::__shared_weak_count **)(a1 + 640);
  if (!v217)
  {
LABEL_469:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v223 = 0;
    goto LABEL_486;
  }
LABEL_466:
  v220 = std::__shared_weak_count::lock(v217);
  if (!v220)
    goto LABEL_469;
  v221 = v220;
  v222 = *(_QWORD *)(a1 + 632);
  if (v222)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v222 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v224 = (unint64_t *)&v221->__shared_owners_;
  do
    v225 = __ldaxr(v224);
  while (__stlxr(v225 - 1, v224));
  if (v225)
  {
    v223 = (void **)v1546[0];
    v226 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_486;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
    std::__shared_weak_count::__release_weak(v221);
    v223 = (void **)v1546[0];
    v226 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_486;
  }
  do
  {
    v227 = a2[1];
    __s[0] = (void *)v184;
    __s[1] = *v223;
    v1550 = 0;
    v1549 = 0uLL;
    v228 = *(_QWORD *)(v227 + 8);
    if (v228 < *(_QWORD *)(v227 + 16))
    {
      *(_OWORD *)v228 = *(_OWORD *)__s;
      *(_QWORD *)(v228 + 24) = 0;
      *(_QWORD *)(v228 + 32) = 0;
      *(_QWORD *)(v228 + 16) = 0;
      *(_QWORD *)(v227 + 8) = v228 + 40;
    }
    else
    {
      v229 = sub_223628FA4((void **)v227, (uint64_t)__s);
      v230 = SHIBYTE(v1550);
      *(_QWORD *)(v227 + 8) = v229;
      if (v230 < 0)
        operator delete((void *)v1549);
    }
    ++v223;
  }
  while (v223 != v226);
  v223 = (void **)v1546[0];
LABEL_486:
  if (v223)
  {
    v1546[1] = v223;
    operator delete(v223);
  }
  v231 = *(std::__shared_weak_count **)(a1 + 640);
  if (!v231 || (v232 = std::__shared_weak_count::lock(v231)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v235 = 0;
    goto LABEL_507;
  }
  v233 = v232;
  v234 = *(_QWORD *)(a1 + 632);
  if (v234)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v234 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v236 = (unint64_t *)&v233->__shared_owners_;
  do
    v237 = __ldaxr(v236);
  while (__stlxr(v237 - 1, v236));
  if (v237)
  {
    v235 = (void **)v1546[0];
    v238 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_507;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
    std::__shared_weak_count::__release_weak(v233);
    v235 = (void **)v1546[0];
    v238 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_507;
  }
  v239 = (void *)(v184 + 1);
  do
  {
    v240 = a2[1];
    __s[0] = v239;
    __s[1] = *v235;
    v1550 = 0;
    v1549 = 0uLL;
    v241 = *(_QWORD *)(v240 + 8);
    if (v241 < *(_QWORD *)(v240 + 16))
    {
      *(_OWORD *)v241 = *(_OWORD *)__s;
      *(_QWORD *)(v241 + 24) = 0;
      *(_QWORD *)(v241 + 32) = 0;
      *(_QWORD *)(v241 + 16) = 0;
      *(_QWORD *)(v240 + 8) = v241 + 40;
    }
    else
    {
      v242 = sub_223628FA4((void **)v240, (uint64_t)__s);
      v243 = SHIBYTE(v1550);
      *(_QWORD *)(v240 + 8) = v242;
      if (v243 < 0)
        operator delete((void *)v1549);
    }
    ++v235;
  }
  while (v235 != v238);
  v235 = (void **)v1546[0];
LABEL_507:
  if (v235)
  {
    v1546[1] = v235;
    operator delete(v235);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_511:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_512;
LABEL_516:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 703) & 0x80000000) == 0)
        goto LABEL_513;
      goto LABEL_517;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_511;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_516;
LABEL_512:
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_513:
    __dst = *(_OWORD *)(a1 + 680);
    v1557 = *(_QWORD *)(a1 + 696);
    goto LABEL_518;
  }
LABEL_517:
  sub_223197FA4(&__dst, *(void **)(a1 + 680), *(_QWORD *)(a1 + 688));
LABEL_518:
  v244 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 768) + 48))(*(_QWORD *)(a1 + 768));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v1558 = xmmword_255793318;
    v1559 = unk_255793328;
  }
  v245 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v246 = &v1558;
  }
  else
  {
    v245 = *((_QWORD *)&v1558 + 1);
    v246 = (__int128 *)v1558;
  }
  if (v245 >= 4)
  {
    v247 = (char *)v246 + v245;
    v248 = v246;
    do
    {
      v249 = (char *)memchr(v248, 118, v245 - 3);
      if (!v249)
        break;
      if (*(_DWORD *)v249 == 1684631414)
      {
        if (v249 == v247 || v249 - (char *)v246 == -1)
          break;
        v250 = *a2;
        __s[0] = (void *)v244;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 727) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 704), *(_QWORD *)(a1 + 712));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 704);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 720);
        }
        sub_22363E750();
        if (byte_2557933D7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557933C0;
          v1553 = unk_2557933D0;
        }
        v251 = *(_QWORD *)(v250 + 8);
        if (v251 < *(_QWORD *)(v250 + 16))
          goto LABEL_544;
        goto LABEL_545;
      }
      v248 = (__int128 *)(v249 + 1);
      v245 = v247 - (char *)v248;
    }
    while (v247 - (char *)v248 >= 4);
  }
  v250 = *a2;
  __s[0] = (void *)v244;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 727) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 704), *(_QWORD *)(a1 + 712));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 704);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 720);
  }
  sub_22363E750();
  if (byte_2557933D7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557933C0;
    v1553 = unk_2557933D0;
  }
  v251 = *(_QWORD *)(v250 + 8);
  if (v251 >= *(_QWORD *)(v250 + 16))
  {
LABEL_545:
    v256 = sub_2236285DC((char **)v250, (uint64_t)__s);
  }
  else
  {
LABEL_544:
    v252 = __s[0];
    *(_DWORD *)(v251 + 8) = __s[1];
    *(_QWORD *)v251 = v252;
    v253 = v1549;
    *(_QWORD *)(v251 + 32) = v1550;
    *(_OWORD *)(v251 + 16) = v253;
    v1550 = 0;
    v1549 = 0uLL;
    v254 = *(_QWORD *)v1552;
    *(_OWORD *)(v251 + 40) = v1551;
    *(_QWORD *)(v251 + 56) = v254;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v255 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v251 + 80) = v1553;
    *(_OWORD *)(v251 + 64) = v255;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v256 = (char *)(v251 + 88);
  }
  *(_QWORD *)(v250 + 8) = v256;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_548;
LABEL_552:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_549;
    goto LABEL_553;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_552;
LABEL_548:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_549;
LABEL_553:
  operator delete((void *)v1549);
LABEL_549:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v257 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v258 = v1554;
  }
  else
  {
    v257 = (uint64_t)v1554[1];
    v258 = (void **)v1554[0];
  }
  if (v257 >= 18)
  {
    v259 = (char *)v258 + v257;
    v260 = v258;
    do
    {
      v261 = (char *)memchr(v260, 67, v257 - 17);
      if (!v261)
        break;
      if (*(_QWORD *)v261 == 0x456C656E6E616843
        && *((_QWORD *)v261 + 1) == 0x696F763C726F7272
        && *((_WORD *)v261 + 8) == 15972)
      {
        if (v261 != v259 && v261 - (char *)v258 != -1)
          goto LABEL_594;
        break;
      }
      v260 = (void **)(v261 + 1);
      v257 = v259 - (char *)v260;
    }
    while (v259 - (char *)v260 >= 18);
  }
  v264 = *a2;
  __s[0] = (void *)(v244 + 1);
  LODWORD(__s[1]) = 3;
  v265 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v266 = HIBYTE(v1557);
  else
    v266 = *((_QWORD *)&__dst + 1);
  v267 = v266 + 6;
  if (v266 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v267 >= 0x17)
  {
    v269 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v269 = v267 | 7;
    v270 = v269 + 1;
    v268 = (__int128 *)operator new(v269 + 1);
    *((_QWORD *)&v1549 + 1) = v266 + 6;
    v1550 = v270 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v268;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v268 = &v1549;
    HIBYTE(v1550) = v266 + 6;
    if (!v266)
      goto LABEL_586;
  }
  if (v265 >= 0)
    v271 = &__dst;
  else
    v271 = (__int128 *)__dst;
  memmove(v268, v271, v266);
LABEL_586:
  strcpy((char *)v268 + v266, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v272 = *(_QWORD *)(v264 + 8);
  if (v272 >= *(_QWORD *)(v264 + 16))
  {
    v278 = sub_2236285DC((char **)v264, (uint64_t)__s);
    v279 = SHIBYTE(v1553);
    *(_QWORD *)(v264 + 8) = v278;
    if (v279 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_593;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_593;
    }
LABEL_588:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_589;
    goto LABEL_594;
  }
  v273 = __s[0];
  *(_DWORD *)(v272 + 8) = __s[1];
  *(_QWORD *)v272 = v273;
  v274 = v1549;
  *(_QWORD *)(v272 + 32) = v1550;
  *(_OWORD *)(v272 + 16) = v274;
  v1550 = 0;
  v1549 = 0uLL;
  v275 = *(_QWORD *)v1552;
  *(_OWORD *)(v272 + 40) = v1551;
  *(_QWORD *)(v272 + 56) = v275;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v276 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v272 + 80) = v1553;
  *(_OWORD *)(v272 + 64) = v276;
  *(_QWORD *)(v264 + 8) = v272 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_588;
LABEL_593:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_589:
    operator delete((void *)v1549);
    v277 = *(std::__shared_weak_count **)(a1 + 808);
    if (!v277)
      goto LABEL_598;
    goto LABEL_595;
  }
LABEL_594:
  v277 = *(std::__shared_weak_count **)(a1 + 808);
  if (!v277)
  {
LABEL_598:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v283 = 0;
    goto LABEL_615;
  }
LABEL_595:
  v280 = std::__shared_weak_count::lock(v277);
  if (!v280)
    goto LABEL_598;
  v281 = v280;
  v282 = *(_QWORD *)(a1 + 800);
  if (v282)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v282 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v284 = (unint64_t *)&v281->__shared_owners_;
  do
    v285 = __ldaxr(v284);
  while (__stlxr(v285 - 1, v284));
  if (v285)
  {
    v283 = (void **)v1546[0];
    v286 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_615;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
    std::__shared_weak_count::__release_weak(v281);
    v283 = (void **)v1546[0];
    v286 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_615;
  }
  do
  {
    v287 = a2[1];
    __s[0] = (void *)v244;
    __s[1] = *v283;
    v1550 = 0;
    v1549 = 0uLL;
    v288 = *(_QWORD *)(v287 + 8);
    if (v288 < *(_QWORD *)(v287 + 16))
    {
      *(_OWORD *)v288 = *(_OWORD *)__s;
      *(_QWORD *)(v288 + 24) = 0;
      *(_QWORD *)(v288 + 32) = 0;
      *(_QWORD *)(v288 + 16) = 0;
      *(_QWORD *)(v287 + 8) = v288 + 40;
    }
    else
    {
      v289 = sub_223628FA4((void **)v287, (uint64_t)__s);
      v290 = SHIBYTE(v1550);
      *(_QWORD *)(v287 + 8) = v289;
      if (v290 < 0)
        operator delete((void *)v1549);
    }
    ++v283;
  }
  while (v283 != v286);
  v283 = (void **)v1546[0];
LABEL_615:
  if (v283)
  {
    v1546[1] = v283;
    operator delete(v283);
  }
  v291 = *(std::__shared_weak_count **)(a1 + 808);
  if (!v291 || (v292 = std::__shared_weak_count::lock(v291)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v295 = 0;
    goto LABEL_636;
  }
  v293 = v292;
  v294 = *(_QWORD *)(a1 + 800);
  if (v294)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v294 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v296 = (unint64_t *)&v293->__shared_owners_;
  do
    v297 = __ldaxr(v296);
  while (__stlxr(v297 - 1, v296));
  if (v297)
  {
    v295 = (void **)v1546[0];
    v298 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_636;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
    std::__shared_weak_count::__release_weak(v293);
    v295 = (void **)v1546[0];
    v298 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_636;
  }
  v299 = (void *)(v244 + 1);
  do
  {
    v300 = a2[1];
    __s[0] = v299;
    __s[1] = *v295;
    v1550 = 0;
    v1549 = 0uLL;
    v301 = *(_QWORD *)(v300 + 8);
    if (v301 < *(_QWORD *)(v300 + 16))
    {
      *(_OWORD *)v301 = *(_OWORD *)__s;
      *(_QWORD *)(v301 + 24) = 0;
      *(_QWORD *)(v301 + 32) = 0;
      *(_QWORD *)(v301 + 16) = 0;
      *(_QWORD *)(v300 + 8) = v301 + 40;
    }
    else
    {
      v302 = sub_223628FA4((void **)v300, (uint64_t)__s);
      v303 = SHIBYTE(v1550);
      *(_QWORD *)(v300 + 8) = v302;
      if (v303 < 0)
        operator delete((void *)v1549);
    }
    ++v295;
  }
  while (v295 != v298);
  v295 = (void **)v1546[0];
LABEL_636:
  if (v295)
  {
    v1546[1] = v295;
    operator delete(v295);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_640:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_641;
LABEL_645:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 871) & 0x80000000) == 0)
        goto LABEL_642;
      goto LABEL_646;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_640;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_645;
LABEL_641:
  if ((*(char *)(a1 + 871) & 0x80000000) == 0)
  {
LABEL_642:
    __dst = *(_OWORD *)(a1 + 848);
    v1557 = *(_QWORD *)(a1 + 864);
    goto LABEL_647;
  }
LABEL_646:
  sub_223197FA4(&__dst, *(void **)(a1 + 848), *(_QWORD *)(a1 + 856));
LABEL_647:
  v304 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 936) + 48))(*(_QWORD *)(a1 + 936));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v1558 = xmmword_255793318;
    v1559 = unk_255793328;
  }
  v305 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v306 = &v1558;
  }
  else
  {
    v305 = *((_QWORD *)&v1558 + 1);
    v306 = (__int128 *)v1558;
  }
  if (v305 >= 4)
  {
    v307 = (char *)v306 + v305;
    v308 = v306;
    do
    {
      v309 = (char *)memchr(v308, 118, v305 - 3);
      if (!v309)
        break;
      if (*(_DWORD *)v309 == 1684631414)
      {
        if (v309 == v307 || v309 - (char *)v306 == -1)
          break;
        v310 = *a2;
        __s[0] = (void *)v304;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 895) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 872), *(_QWORD *)(a1 + 880));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 872);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 888);
        }
        sub_22363E914();
        if (byte_25579341F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793408, *((unint64_t *)&xmmword_255793408 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793408;
          v1553 = unk_255793418;
        }
        v311 = *(_QWORD *)(v310 + 8);
        if (v311 < *(_QWORD *)(v310 + 16))
          goto LABEL_673;
        goto LABEL_674;
      }
      v308 = (__int128 *)(v309 + 1);
      v305 = v307 - (char *)v308;
    }
    while (v307 - (char *)v308 >= 4);
  }
  v310 = *a2;
  __s[0] = (void *)v304;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 895) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 872), *(_QWORD *)(a1 + 880));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 872);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 888);
  }
  sub_22363E914();
  if (byte_25579341F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793408, *((unint64_t *)&xmmword_255793408 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793408;
    v1553 = unk_255793418;
  }
  v311 = *(_QWORD *)(v310 + 8);
  if (v311 >= *(_QWORD *)(v310 + 16))
  {
LABEL_674:
    v316 = sub_2236285DC((char **)v310, (uint64_t)__s);
  }
  else
  {
LABEL_673:
    v312 = __s[0];
    *(_DWORD *)(v311 + 8) = __s[1];
    *(_QWORD *)v311 = v312;
    v313 = v1549;
    *(_QWORD *)(v311 + 32) = v1550;
    *(_OWORD *)(v311 + 16) = v313;
    v1550 = 0;
    v1549 = 0uLL;
    v314 = *(_QWORD *)v1552;
    *(_OWORD *)(v311 + 40) = v1551;
    *(_QWORD *)(v311 + 56) = v314;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v315 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v311 + 80) = v1553;
    *(_OWORD *)(v311 + 64) = v315;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v316 = (char *)(v311 + 88);
  }
  *(_QWORD *)(v310 + 8) = v316;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_677;
LABEL_681:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_678;
    goto LABEL_682;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_681;
LABEL_677:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_678;
LABEL_682:
  operator delete((void *)v1549);
LABEL_678:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v317 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v318 = v1554;
  }
  else
  {
    v317 = (uint64_t)v1554[1];
    v318 = (void **)v1554[0];
  }
  if (v317 >= 18)
  {
    v319 = (char *)v318 + v317;
    v320 = v318;
    do
    {
      v321 = (char *)memchr(v320, 67, v317 - 17);
      if (!v321)
        break;
      if (*(_QWORD *)v321 == 0x456C656E6E616843
        && *((_QWORD *)v321 + 1) == 0x696F763C726F7272
        && *((_WORD *)v321 + 8) == 15972)
      {
        if (v321 != v319 && v321 - (char *)v318 != -1)
          goto LABEL_723;
        break;
      }
      v320 = (void **)(v321 + 1);
      v317 = v319 - (char *)v320;
    }
    while (v319 - (char *)v320 >= 18);
  }
  v324 = *a2;
  __s[0] = (void *)(v304 + 1);
  LODWORD(__s[1]) = 3;
  v325 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v326 = HIBYTE(v1557);
  else
    v326 = *((_QWORD *)&__dst + 1);
  v327 = v326 + 6;
  if (v326 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v327 >= 0x17)
  {
    v329 = (v327 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v327 | 7) != 0x17)
      v329 = v327 | 7;
    v330 = v329 + 1;
    v328 = (__int128 *)operator new(v329 + 1);
    *((_QWORD *)&v1549 + 1) = v326 + 6;
    v1550 = v330 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v328;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v328 = &v1549;
    HIBYTE(v1550) = v326 + 6;
    if (!v326)
      goto LABEL_715;
  }
  if (v325 >= 0)
    v331 = &__dst;
  else
    v331 = (__int128 *)__dst;
  memmove(v328, v331, v326);
LABEL_715:
  strcpy((char *)v328 + v326, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v332 = *(_QWORD *)(v324 + 8);
  if (v332 >= *(_QWORD *)(v324 + 16))
  {
    v338 = sub_2236285DC((char **)v324, (uint64_t)__s);
    v339 = SHIBYTE(v1553);
    *(_QWORD *)(v324 + 8) = v338;
    if (v339 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_722;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_722;
    }
LABEL_717:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_718;
    goto LABEL_723;
  }
  v333 = __s[0];
  *(_DWORD *)(v332 + 8) = __s[1];
  *(_QWORD *)v332 = v333;
  v334 = v1549;
  *(_QWORD *)(v332 + 32) = v1550;
  *(_OWORD *)(v332 + 16) = v334;
  v1550 = 0;
  v1549 = 0uLL;
  v335 = *(_QWORD *)v1552;
  *(_OWORD *)(v332 + 40) = v1551;
  *(_QWORD *)(v332 + 56) = v335;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v336 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v332 + 80) = v1553;
  *(_OWORD *)(v332 + 64) = v336;
  *(_QWORD *)(v324 + 8) = v332 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_717;
LABEL_722:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_718:
    operator delete((void *)v1549);
    v337 = *(std::__shared_weak_count **)(a1 + 976);
    if (!v337)
      goto LABEL_727;
    goto LABEL_724;
  }
LABEL_723:
  v337 = *(std::__shared_weak_count **)(a1 + 976);
  if (!v337)
  {
LABEL_727:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v343 = 0;
    goto LABEL_744;
  }
LABEL_724:
  v340 = std::__shared_weak_count::lock(v337);
  if (!v340)
    goto LABEL_727;
  v341 = v340;
  v342 = *(_QWORD *)(a1 + 968);
  if (v342)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v342 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v344 = (unint64_t *)&v341->__shared_owners_;
  do
    v345 = __ldaxr(v344);
  while (__stlxr(v345 - 1, v344));
  if (v345)
  {
    v343 = (void **)v1546[0];
    v346 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_744;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
    std::__shared_weak_count::__release_weak(v341);
    v343 = (void **)v1546[0];
    v346 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_744;
  }
  do
  {
    v347 = a2[1];
    __s[0] = (void *)v304;
    __s[1] = *v343;
    v1550 = 0;
    v1549 = 0uLL;
    v348 = *(_QWORD *)(v347 + 8);
    if (v348 < *(_QWORD *)(v347 + 16))
    {
      *(_OWORD *)v348 = *(_OWORD *)__s;
      *(_QWORD *)(v348 + 24) = 0;
      *(_QWORD *)(v348 + 32) = 0;
      *(_QWORD *)(v348 + 16) = 0;
      *(_QWORD *)(v347 + 8) = v348 + 40;
    }
    else
    {
      v349 = sub_223628FA4((void **)v347, (uint64_t)__s);
      v350 = SHIBYTE(v1550);
      *(_QWORD *)(v347 + 8) = v349;
      if (v350 < 0)
        operator delete((void *)v1549);
    }
    ++v343;
  }
  while (v343 != v346);
  v343 = (void **)v1546[0];
LABEL_744:
  if (v343)
  {
    v1546[1] = v343;
    operator delete(v343);
  }
  v351 = *(std::__shared_weak_count **)(a1 + 976);
  if (!v351 || (v352 = std::__shared_weak_count::lock(v351)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v355 = 0;
    goto LABEL_765;
  }
  v353 = v352;
  v354 = *(_QWORD *)(a1 + 968);
  if (v354)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v354 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v356 = (unint64_t *)&v353->__shared_owners_;
  do
    v357 = __ldaxr(v356);
  while (__stlxr(v357 - 1, v356));
  if (v357)
  {
    v355 = (void **)v1546[0];
    v358 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_765;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
    std::__shared_weak_count::__release_weak(v353);
    v355 = (void **)v1546[0];
    v358 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_765;
  }
  v359 = (void *)(v304 + 1);
  do
  {
    v360 = a2[1];
    __s[0] = v359;
    __s[1] = *v355;
    v1550 = 0;
    v1549 = 0uLL;
    v361 = *(_QWORD *)(v360 + 8);
    if (v361 < *(_QWORD *)(v360 + 16))
    {
      *(_OWORD *)v361 = *(_OWORD *)__s;
      *(_QWORD *)(v361 + 24) = 0;
      *(_QWORD *)(v361 + 32) = 0;
      *(_QWORD *)(v361 + 16) = 0;
      *(_QWORD *)(v360 + 8) = v361 + 40;
    }
    else
    {
      v362 = sub_223628FA4((void **)v360, (uint64_t)__s);
      v363 = SHIBYTE(v1550);
      *(_QWORD *)(v360 + 8) = v362;
      if (v363 < 0)
        operator delete((void *)v1549);
    }
    ++v355;
  }
  while (v355 != v358);
  v355 = (void **)v1546[0];
LABEL_765:
  if (v355)
  {
    v1546[1] = v355;
    operator delete(v355);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_769:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_770;
LABEL_774:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
        goto LABEL_771;
      goto LABEL_775;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_769;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_774;
LABEL_770:
  if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
  {
LABEL_771:
    __dst = *(_OWORD *)(a1 + 1016);
    v1557 = *(_QWORD *)(a1 + 1032);
    goto LABEL_776;
  }
LABEL_775:
  sub_223197FA4(&__dst, *(void **)(a1 + 1016), *(_QWORD *)(a1 + 1024));
LABEL_776:
  v364 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1104) + 48))(*(_QWORD *)(a1 + 1104));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBCF0;
    v1559 = unk_2540CBD00;
  }
  v365 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v366 = &v1558;
  }
  else
  {
    v365 = *((_QWORD *)&v1558 + 1);
    v366 = (__int128 *)v1558;
  }
  if (v365 >= 4)
  {
    v367 = (char *)v366 + v365;
    v368 = v366;
    do
    {
      v369 = (char *)memchr(v368, 118, v365 - 3);
      if (!v369)
        break;
      if (*(_DWORD *)v369 == 1684631414)
      {
        if (v369 == v367 || v369 - (char *)v366 == -1)
          break;
        v370 = *a2;
        __s[0] = (void *)v364;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1063) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1040), *(_QWORD *)(a1 + 1048));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1040);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1056);
        }
        sub_22363EAD8();
        if (byte_255793467 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793450, *((unint64_t *)&xmmword_255793450 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793450;
          v1553 = unk_255793460;
        }
        v371 = *(_QWORD *)(v370 + 8);
        if (v371 < *(_QWORD *)(v370 + 16))
          goto LABEL_802;
        goto LABEL_803;
      }
      v368 = (__int128 *)(v369 + 1);
      v365 = v367 - (char *)v368;
    }
    while (v367 - (char *)v368 >= 4);
  }
  v370 = *a2;
  __s[0] = (void *)v364;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1063) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1040), *(_QWORD *)(a1 + 1048));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1040);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1056);
  }
  sub_22363EAD8();
  if (byte_255793467 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793450, *((unint64_t *)&xmmword_255793450 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793450;
    v1553 = unk_255793460;
  }
  v371 = *(_QWORD *)(v370 + 8);
  if (v371 >= *(_QWORD *)(v370 + 16))
  {
LABEL_803:
    v376 = sub_2236285DC((char **)v370, (uint64_t)__s);
  }
  else
  {
LABEL_802:
    v372 = __s[0];
    *(_DWORD *)(v371 + 8) = __s[1];
    *(_QWORD *)v371 = v372;
    v373 = v1549;
    *(_QWORD *)(v371 + 32) = v1550;
    *(_OWORD *)(v371 + 16) = v373;
    v1550 = 0;
    v1549 = 0uLL;
    v374 = *(_QWORD *)v1552;
    *(_OWORD *)(v371 + 40) = v1551;
    *(_QWORD *)(v371 + 56) = v374;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v375 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v371 + 80) = v1553;
    *(_OWORD *)(v371 + 64) = v375;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v376 = (char *)(v371 + 88);
  }
  *(_QWORD *)(v370 + 8) = v376;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_806;
LABEL_810:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_807;
    goto LABEL_811;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_810;
LABEL_806:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_807;
LABEL_811:
  operator delete((void *)v1549);
LABEL_807:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v377 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v378 = v1554;
  }
  else
  {
    v377 = (uint64_t)v1554[1];
    v378 = (void **)v1554[0];
  }
  if (v377 >= 18)
  {
    v379 = (char *)v378 + v377;
    v380 = v378;
    do
    {
      v381 = (char *)memchr(v380, 67, v377 - 17);
      if (!v381)
        break;
      if (*(_QWORD *)v381 == 0x456C656E6E616843
        && *((_QWORD *)v381 + 1) == 0x696F763C726F7272
        && *((_WORD *)v381 + 8) == 15972)
      {
        if (v381 != v379 && v381 - (char *)v378 != -1)
          goto LABEL_852;
        break;
      }
      v380 = (void **)(v381 + 1);
      v377 = v379 - (char *)v380;
    }
    while (v379 - (char *)v380 >= 18);
  }
  v384 = *a2;
  __s[0] = (void *)(v364 + 1);
  LODWORD(__s[1]) = 3;
  v385 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v386 = HIBYTE(v1557);
  else
    v386 = *((_QWORD *)&__dst + 1);
  v387 = v386 + 6;
  if (v386 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v387 >= 0x17)
  {
    v389 = (v387 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v387 | 7) != 0x17)
      v389 = v387 | 7;
    v390 = v389 + 1;
    v388 = (__int128 *)operator new(v389 + 1);
    *((_QWORD *)&v1549 + 1) = v386 + 6;
    v1550 = v390 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v388;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v388 = &v1549;
    HIBYTE(v1550) = v386 + 6;
    if (!v386)
      goto LABEL_844;
  }
  if (v385 >= 0)
    v391 = &__dst;
  else
    v391 = (__int128 *)__dst;
  memmove(v388, v391, v386);
LABEL_844:
  strcpy((char *)v388 + v386, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v392 = *(_QWORD *)(v384 + 8);
  if (v392 >= *(_QWORD *)(v384 + 16))
  {
    v398 = sub_2236285DC((char **)v384, (uint64_t)__s);
    v399 = SHIBYTE(v1553);
    *(_QWORD *)(v384 + 8) = v398;
    if (v399 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_851;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_851;
    }
LABEL_846:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_847;
    goto LABEL_852;
  }
  v393 = __s[0];
  *(_DWORD *)(v392 + 8) = __s[1];
  *(_QWORD *)v392 = v393;
  v394 = v1549;
  *(_QWORD *)(v392 + 32) = v1550;
  *(_OWORD *)(v392 + 16) = v394;
  v1550 = 0;
  v1549 = 0uLL;
  v395 = *(_QWORD *)v1552;
  *(_OWORD *)(v392 + 40) = v1551;
  *(_QWORD *)(v392 + 56) = v395;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v396 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v392 + 80) = v1553;
  *(_OWORD *)(v392 + 64) = v396;
  *(_QWORD *)(v384 + 8) = v392 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_846;
LABEL_851:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_847:
    operator delete((void *)v1549);
    v397 = *(std::__shared_weak_count **)(a1 + 1144);
    if (!v397)
      goto LABEL_856;
    goto LABEL_853;
  }
LABEL_852:
  v397 = *(std::__shared_weak_count **)(a1 + 1144);
  if (!v397)
  {
LABEL_856:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v403 = 0;
    goto LABEL_873;
  }
LABEL_853:
  v400 = std::__shared_weak_count::lock(v397);
  if (!v400)
    goto LABEL_856;
  v401 = v400;
  v402 = *(_QWORD *)(a1 + 1136);
  if (v402)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v402 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v404 = (unint64_t *)&v401->__shared_owners_;
  do
    v405 = __ldaxr(v404);
  while (__stlxr(v405 - 1, v404));
  if (v405)
  {
    v403 = (void **)v1546[0];
    v406 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_873;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
    v403 = (void **)v1546[0];
    v406 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_873;
  }
  do
  {
    v407 = a2[1];
    __s[0] = (void *)v364;
    __s[1] = *v403;
    v1550 = 0;
    v1549 = 0uLL;
    v408 = *(_QWORD *)(v407 + 8);
    if (v408 < *(_QWORD *)(v407 + 16))
    {
      *(_OWORD *)v408 = *(_OWORD *)__s;
      *(_QWORD *)(v408 + 24) = 0;
      *(_QWORD *)(v408 + 32) = 0;
      *(_QWORD *)(v408 + 16) = 0;
      *(_QWORD *)(v407 + 8) = v408 + 40;
    }
    else
    {
      v409 = sub_223628FA4((void **)v407, (uint64_t)__s);
      v410 = SHIBYTE(v1550);
      *(_QWORD *)(v407 + 8) = v409;
      if (v410 < 0)
        operator delete((void *)v1549);
    }
    ++v403;
  }
  while (v403 != v406);
  v403 = (void **)v1546[0];
LABEL_873:
  if (v403)
  {
    v1546[1] = v403;
    operator delete(v403);
  }
  v411 = *(std::__shared_weak_count **)(a1 + 1144);
  if (!v411 || (v412 = std::__shared_weak_count::lock(v411)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v415 = 0;
    goto LABEL_894;
  }
  v413 = v412;
  v414 = *(_QWORD *)(a1 + 1136);
  if (v414)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v414 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v416 = (unint64_t *)&v413->__shared_owners_;
  do
    v417 = __ldaxr(v416);
  while (__stlxr(v417 - 1, v416));
  if (v417)
  {
    v415 = (void **)v1546[0];
    v418 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_894;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
    std::__shared_weak_count::__release_weak(v413);
    v415 = (void **)v1546[0];
    v418 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_894;
  }
  v419 = (void *)(v364 + 1);
  do
  {
    v420 = a2[1];
    __s[0] = v419;
    __s[1] = *v415;
    v1550 = 0;
    v1549 = 0uLL;
    v421 = *(_QWORD *)(v420 + 8);
    if (v421 < *(_QWORD *)(v420 + 16))
    {
      *(_OWORD *)v421 = *(_OWORD *)__s;
      *(_QWORD *)(v421 + 24) = 0;
      *(_QWORD *)(v421 + 32) = 0;
      *(_QWORD *)(v421 + 16) = 0;
      *(_QWORD *)(v420 + 8) = v421 + 40;
    }
    else
    {
      v422 = sub_223628FA4((void **)v420, (uint64_t)__s);
      v423 = SHIBYTE(v1550);
      *(_QWORD *)(v420 + 8) = v422;
      if (v423 < 0)
        operator delete((void *)v1549);
    }
    ++v415;
  }
  while (v415 != v418);
  v415 = (void **)v1546[0];
LABEL_894:
  if (v415)
  {
    v1546[1] = v415;
    operator delete(v415);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_898:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_899;
LABEL_903:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
        goto LABEL_900;
      goto LABEL_904;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_898;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_903;
LABEL_899:
  if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
  {
LABEL_900:
    __dst = *(_OWORD *)(a1 + 1184);
    v1557 = *(_QWORD *)(a1 + 1200);
    goto LABEL_905;
  }
LABEL_904:
  sub_223197FA4(&__dst, *(void **)(a1 + 1184), *(_QWORD *)(a1 + 1192));
LABEL_905:
  v424 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1272) + 48))(*(_QWORD *)(a1 + 1272));
  sub_22362A204();
  if (byte_2540CBE3F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBE28, *((unint64_t *)&xmmword_2540CBE28 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBE28;
    v1559 = unk_2540CBE38;
  }
  v425 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v426 = &v1558;
  }
  else
  {
    v425 = *((_QWORD *)&v1558 + 1);
    v426 = (__int128 *)v1558;
  }
  if (v425 >= 4)
  {
    v427 = (char *)v426 + v425;
    v428 = v426;
    do
    {
      v429 = (char *)memchr(v428, 118, v425 - 3);
      if (!v429)
        break;
      if (*(_DWORD *)v429 == 1684631414)
      {
        if (v429 == v427 || v429 - (char *)v426 == -1)
          break;
        v430 = *a2;
        __s[0] = (void *)v424;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1231) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1208), *(_QWORD *)(a1 + 1216));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1208);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1224);
        }
        sub_22363EC9C();
        if (byte_2557934AF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793498, *((unint64_t *)&xmmword_255793498 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793498;
          v1553 = unk_2557934A8;
        }
        v431 = *(_QWORD *)(v430 + 8);
        if (v431 < *(_QWORD *)(v430 + 16))
          goto LABEL_931;
        goto LABEL_932;
      }
      v428 = (__int128 *)(v429 + 1);
      v425 = v427 - (char *)v428;
    }
    while (v427 - (char *)v428 >= 4);
  }
  v430 = *a2;
  __s[0] = (void *)v424;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1231) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1208), *(_QWORD *)(a1 + 1216));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1208);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1224);
  }
  sub_22363EC9C();
  if (byte_2557934AF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793498, *((unint64_t *)&xmmword_255793498 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793498;
    v1553 = unk_2557934A8;
  }
  v431 = *(_QWORD *)(v430 + 8);
  if (v431 >= *(_QWORD *)(v430 + 16))
  {
LABEL_932:
    v436 = sub_2236285DC((char **)v430, (uint64_t)__s);
  }
  else
  {
LABEL_931:
    v432 = __s[0];
    *(_DWORD *)(v431 + 8) = __s[1];
    *(_QWORD *)v431 = v432;
    v433 = v1549;
    *(_QWORD *)(v431 + 32) = v1550;
    *(_OWORD *)(v431 + 16) = v433;
    v1550 = 0;
    v1549 = 0uLL;
    v434 = *(_QWORD *)v1552;
    *(_OWORD *)(v431 + 40) = v1551;
    *(_QWORD *)(v431 + 56) = v434;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v435 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v431 + 80) = v1553;
    *(_OWORD *)(v431 + 64) = v435;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v436 = (char *)(v431 + 88);
  }
  *(_QWORD *)(v430 + 8) = v436;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_935;
LABEL_939:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_936;
    goto LABEL_940;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_939;
LABEL_935:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_936;
LABEL_940:
  operator delete((void *)v1549);
LABEL_936:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v437 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v438 = v1554;
  }
  else
  {
    v437 = (uint64_t)v1554[1];
    v438 = (void **)v1554[0];
  }
  if (v437 >= 18)
  {
    v439 = (char *)v438 + v437;
    v440 = v438;
    do
    {
      v441 = (char *)memchr(v440, 67, v437 - 17);
      if (!v441)
        break;
      if (*(_QWORD *)v441 == 0x456C656E6E616843
        && *((_QWORD *)v441 + 1) == 0x696F763C726F7272
        && *((_WORD *)v441 + 8) == 15972)
      {
        if (v441 != v439 && v441 - (char *)v438 != -1)
          goto LABEL_981;
        break;
      }
      v440 = (void **)(v441 + 1);
      v437 = v439 - (char *)v440;
    }
    while (v439 - (char *)v440 >= 18);
  }
  v444 = *a2;
  __s[0] = (void *)(v424 + 1);
  LODWORD(__s[1]) = 3;
  v445 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v446 = HIBYTE(v1557);
  else
    v446 = *((_QWORD *)&__dst + 1);
  v447 = v446 + 6;
  if (v446 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v447 >= 0x17)
  {
    v449 = (v447 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v447 | 7) != 0x17)
      v449 = v447 | 7;
    v450 = v449 + 1;
    v448 = (__int128 *)operator new(v449 + 1);
    *((_QWORD *)&v1549 + 1) = v446 + 6;
    v1550 = v450 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v448;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v448 = &v1549;
    HIBYTE(v1550) = v446 + 6;
    if (!v446)
      goto LABEL_973;
  }
  if (v445 >= 0)
    v451 = &__dst;
  else
    v451 = (__int128 *)__dst;
  memmove(v448, v451, v446);
LABEL_973:
  strcpy((char *)v448 + v446, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v452 = *(_QWORD *)(v444 + 8);
  if (v452 >= *(_QWORD *)(v444 + 16))
  {
    v458 = sub_2236285DC((char **)v444, (uint64_t)__s);
    v459 = SHIBYTE(v1553);
    *(_QWORD *)(v444 + 8) = v458;
    if (v459 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_980;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_980;
    }
LABEL_975:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_976;
    goto LABEL_981;
  }
  v453 = __s[0];
  *(_DWORD *)(v452 + 8) = __s[1];
  *(_QWORD *)v452 = v453;
  v454 = v1549;
  *(_QWORD *)(v452 + 32) = v1550;
  *(_OWORD *)(v452 + 16) = v454;
  v1550 = 0;
  v1549 = 0uLL;
  v455 = *(_QWORD *)v1552;
  *(_OWORD *)(v452 + 40) = v1551;
  *(_QWORD *)(v452 + 56) = v455;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v456 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v452 + 80) = v1553;
  *(_OWORD *)(v452 + 64) = v456;
  *(_QWORD *)(v444 + 8) = v452 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_975;
LABEL_980:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_976:
    operator delete((void *)v1549);
    v457 = *(std::__shared_weak_count **)(a1 + 1312);
    if (!v457)
      goto LABEL_985;
    goto LABEL_982;
  }
LABEL_981:
  v457 = *(std::__shared_weak_count **)(a1 + 1312);
  if (!v457)
  {
LABEL_985:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v463 = 0;
    goto LABEL_1002;
  }
LABEL_982:
  v460 = std::__shared_weak_count::lock(v457);
  if (!v460)
    goto LABEL_985;
  v461 = v460;
  v462 = *(_QWORD *)(a1 + 1304);
  if (v462)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v462 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v464 = (unint64_t *)&v461->__shared_owners_;
  do
    v465 = __ldaxr(v464);
  while (__stlxr(v465 - 1, v464));
  if (v465)
  {
    v463 = (void **)v1546[0];
    v466 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1002;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
    std::__shared_weak_count::__release_weak(v461);
    v463 = (void **)v1546[0];
    v466 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1002;
  }
  do
  {
    v467 = a2[1];
    __s[0] = (void *)v424;
    __s[1] = *v463;
    v1550 = 0;
    v1549 = 0uLL;
    v468 = *(_QWORD *)(v467 + 8);
    if (v468 < *(_QWORD *)(v467 + 16))
    {
      *(_OWORD *)v468 = *(_OWORD *)__s;
      *(_QWORD *)(v468 + 24) = 0;
      *(_QWORD *)(v468 + 32) = 0;
      *(_QWORD *)(v468 + 16) = 0;
      *(_QWORD *)(v467 + 8) = v468 + 40;
    }
    else
    {
      v469 = sub_223628FA4((void **)v467, (uint64_t)__s);
      v470 = SHIBYTE(v1550);
      *(_QWORD *)(v467 + 8) = v469;
      if (v470 < 0)
        operator delete((void *)v1549);
    }
    ++v463;
  }
  while (v463 != v466);
  v463 = (void **)v1546[0];
LABEL_1002:
  if (v463)
  {
    v1546[1] = v463;
    operator delete(v463);
  }
  v471 = *(std::__shared_weak_count **)(a1 + 1312);
  if (!v471 || (v472 = std::__shared_weak_count::lock(v471)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v475 = 0;
    goto LABEL_1023;
  }
  v473 = v472;
  v474 = *(_QWORD *)(a1 + 1304);
  if (v474)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v474 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v476 = (unint64_t *)&v473->__shared_owners_;
  do
    v477 = __ldaxr(v476);
  while (__stlxr(v477 - 1, v476));
  if (v477)
  {
    v475 = (void **)v1546[0];
    v478 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1023;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
    std::__shared_weak_count::__release_weak(v473);
    v475 = (void **)v1546[0];
    v478 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1023;
  }
  v479 = (void *)(v424 + 1);
  do
  {
    v480 = a2[1];
    __s[0] = v479;
    __s[1] = *v475;
    v1550 = 0;
    v1549 = 0uLL;
    v481 = *(_QWORD *)(v480 + 8);
    if (v481 < *(_QWORD *)(v480 + 16))
    {
      *(_OWORD *)v481 = *(_OWORD *)__s;
      *(_QWORD *)(v481 + 24) = 0;
      *(_QWORD *)(v481 + 32) = 0;
      *(_QWORD *)(v481 + 16) = 0;
      *(_QWORD *)(v480 + 8) = v481 + 40;
    }
    else
    {
      v482 = sub_223628FA4((void **)v480, (uint64_t)__s);
      v483 = SHIBYTE(v1550);
      *(_QWORD *)(v480 + 8) = v482;
      if (v483 < 0)
        operator delete((void *)v1549);
    }
    ++v475;
  }
  while (v475 != v478);
  v475 = (void **)v1546[0];
LABEL_1023:
  if (v475)
  {
    v1546[1] = v475;
    operator delete(v475);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1027:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1028;
LABEL_1032:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
        goto LABEL_1029;
      goto LABEL_1033;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1027;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1032;
LABEL_1028:
  if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
  {
LABEL_1029:
    __dst = *(_OWORD *)(a1 + 1352);
    v1557 = *(_QWORD *)(a1 + 1368);
    goto LABEL_1034;
  }
LABEL_1033:
  sub_223197FA4(&__dst, *(void **)(a1 + 1352), *(_QWORD *)(a1 + 1360));
LABEL_1034:
  v484 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1440) + 48))(*(_QWORD *)(a1 + 1440));
  sub_22362ACD0();
  if (byte_255792C87 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255792C70, *((unint64_t *)&xmmword_255792C70 + 1));
  }
  else
  {
    v1558 = xmmword_255792C70;
    v1559 = unk_255792C80;
  }
  v485 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v486 = &v1558;
  }
  else
  {
    v485 = *((_QWORD *)&v1558 + 1);
    v486 = (__int128 *)v1558;
  }
  if (v485 >= 4)
  {
    v487 = (char *)v486 + v485;
    v488 = v486;
    do
    {
      v489 = (char *)memchr(v488, 118, v485 - 3);
      if (!v489)
        break;
      if (*(_DWORD *)v489 == 1684631414)
      {
        if (v489 == v487 || v489 - (char *)v486 == -1)
          break;
        v490 = *a2;
        __s[0] = (void *)v484;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1399) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1376), *(_QWORD *)(a1 + 1384));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1376);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1392);
        }
        sub_22363EE60();
        if (byte_2557934F7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557934E0, *((unint64_t *)&xmmword_2557934E0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557934E0;
          v1553 = unk_2557934F0;
        }
        v491 = *(_QWORD *)(v490 + 8);
        if (v491 < *(_QWORD *)(v490 + 16))
          goto LABEL_1060;
        goto LABEL_1061;
      }
      v488 = (__int128 *)(v489 + 1);
      v485 = v487 - (char *)v488;
    }
    while (v487 - (char *)v488 >= 4);
  }
  v490 = *a2;
  __s[0] = (void *)v484;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1399) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1376), *(_QWORD *)(a1 + 1384));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1376);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1392);
  }
  sub_22363EE60();
  if (byte_2557934F7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557934E0, *((unint64_t *)&xmmword_2557934E0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557934E0;
    v1553 = unk_2557934F0;
  }
  v491 = *(_QWORD *)(v490 + 8);
  if (v491 >= *(_QWORD *)(v490 + 16))
  {
LABEL_1061:
    v496 = sub_2236285DC((char **)v490, (uint64_t)__s);
  }
  else
  {
LABEL_1060:
    v492 = __s[0];
    *(_DWORD *)(v491 + 8) = __s[1];
    *(_QWORD *)v491 = v492;
    v493 = v1549;
    *(_QWORD *)(v491 + 32) = v1550;
    *(_OWORD *)(v491 + 16) = v493;
    v1550 = 0;
    v1549 = 0uLL;
    v494 = *(_QWORD *)v1552;
    *(_OWORD *)(v491 + 40) = v1551;
    *(_QWORD *)(v491 + 56) = v494;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v495 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v491 + 80) = v1553;
    *(_OWORD *)(v491 + 64) = v495;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v496 = (char *)(v491 + 88);
  }
  *(_QWORD *)(v490 + 8) = v496;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1064;
LABEL_1068:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1065;
    goto LABEL_1069;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1068;
LABEL_1064:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1065;
LABEL_1069:
  operator delete((void *)v1549);
LABEL_1065:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v497 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v498 = v1554;
  }
  else
  {
    v497 = (uint64_t)v1554[1];
    v498 = (void **)v1554[0];
  }
  if (v497 >= 18)
  {
    v499 = (char *)v498 + v497;
    v500 = v498;
    do
    {
      v501 = (char *)memchr(v500, 67, v497 - 17);
      if (!v501)
        break;
      if (*(_QWORD *)v501 == 0x456C656E6E616843
        && *((_QWORD *)v501 + 1) == 0x696F763C726F7272
        && *((_WORD *)v501 + 8) == 15972)
      {
        if (v501 != v499 && v501 - (char *)v498 != -1)
          goto LABEL_1110;
        break;
      }
      v500 = (void **)(v501 + 1);
      v497 = v499 - (char *)v500;
    }
    while (v499 - (char *)v500 >= 18);
  }
  v504 = *a2;
  __s[0] = (void *)(v484 + 1);
  LODWORD(__s[1]) = 3;
  v505 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v506 = HIBYTE(v1557);
  else
    v506 = *((_QWORD *)&__dst + 1);
  v507 = v506 + 6;
  if (v506 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v507 >= 0x17)
  {
    v509 = (v507 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v507 | 7) != 0x17)
      v509 = v507 | 7;
    v510 = v509 + 1;
    v508 = (__int128 *)operator new(v509 + 1);
    *((_QWORD *)&v1549 + 1) = v506 + 6;
    v1550 = v510 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v508;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v508 = &v1549;
    HIBYTE(v1550) = v506 + 6;
    if (!v506)
      goto LABEL_1102;
  }
  if (v505 >= 0)
    v511 = &__dst;
  else
    v511 = (__int128 *)__dst;
  memmove(v508, v511, v506);
LABEL_1102:
  strcpy((char *)v508 + v506, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v512 = *(_QWORD *)(v504 + 8);
  if (v512 >= *(_QWORD *)(v504 + 16))
  {
    v518 = sub_2236285DC((char **)v504, (uint64_t)__s);
    v519 = SHIBYTE(v1553);
    *(_QWORD *)(v504 + 8) = v518;
    if (v519 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1109;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1109;
    }
LABEL_1104:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1105;
    goto LABEL_1110;
  }
  v513 = __s[0];
  *(_DWORD *)(v512 + 8) = __s[1];
  *(_QWORD *)v512 = v513;
  v514 = v1549;
  *(_QWORD *)(v512 + 32) = v1550;
  *(_OWORD *)(v512 + 16) = v514;
  v1550 = 0;
  v1549 = 0uLL;
  v515 = *(_QWORD *)v1552;
  *(_OWORD *)(v512 + 40) = v1551;
  *(_QWORD *)(v512 + 56) = v515;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v516 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v512 + 80) = v1553;
  *(_OWORD *)(v512 + 64) = v516;
  *(_QWORD *)(v504 + 8) = v512 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1104;
LABEL_1109:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1105:
    operator delete((void *)v1549);
    v517 = *(std::__shared_weak_count **)(a1 + 1480);
    if (!v517)
      goto LABEL_1114;
    goto LABEL_1111;
  }
LABEL_1110:
  v517 = *(std::__shared_weak_count **)(a1 + 1480);
  if (!v517)
  {
LABEL_1114:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v523 = 0;
    goto LABEL_1131;
  }
LABEL_1111:
  v520 = std::__shared_weak_count::lock(v517);
  if (!v520)
    goto LABEL_1114;
  v521 = v520;
  v522 = *(_QWORD *)(a1 + 1472);
  if (v522)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v522 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v524 = (unint64_t *)&v521->__shared_owners_;
  do
    v525 = __ldaxr(v524);
  while (__stlxr(v525 - 1, v524));
  if (v525)
  {
    v523 = (void **)v1546[0];
    v526 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1131;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
    std::__shared_weak_count::__release_weak(v521);
    v523 = (void **)v1546[0];
    v526 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1131;
  }
  do
  {
    v527 = a2[1];
    __s[0] = (void *)v484;
    __s[1] = *v523;
    v1550 = 0;
    v1549 = 0uLL;
    v528 = *(_QWORD *)(v527 + 8);
    if (v528 < *(_QWORD *)(v527 + 16))
    {
      *(_OWORD *)v528 = *(_OWORD *)__s;
      *(_QWORD *)(v528 + 24) = 0;
      *(_QWORD *)(v528 + 32) = 0;
      *(_QWORD *)(v528 + 16) = 0;
      *(_QWORD *)(v527 + 8) = v528 + 40;
    }
    else
    {
      v529 = sub_223628FA4((void **)v527, (uint64_t)__s);
      v530 = SHIBYTE(v1550);
      *(_QWORD *)(v527 + 8) = v529;
      if (v530 < 0)
        operator delete((void *)v1549);
    }
    ++v523;
  }
  while (v523 != v526);
  v523 = (void **)v1546[0];
LABEL_1131:
  if (v523)
  {
    v1546[1] = v523;
    operator delete(v523);
  }
  v531 = *(std::__shared_weak_count **)(a1 + 1480);
  if (!v531 || (v532 = std::__shared_weak_count::lock(v531)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v535 = 0;
    goto LABEL_1152;
  }
  v533 = v532;
  v534 = *(_QWORD *)(a1 + 1472);
  if (v534)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v534 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v536 = (unint64_t *)&v533->__shared_owners_;
  do
    v537 = __ldaxr(v536);
  while (__stlxr(v537 - 1, v536));
  if (v537)
  {
    v535 = (void **)v1546[0];
    v538 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1152;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
    std::__shared_weak_count::__release_weak(v533);
    v535 = (void **)v1546[0];
    v538 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1152;
  }
  v539 = (void *)(v484 + 1);
  do
  {
    v540 = a2[1];
    __s[0] = v539;
    __s[1] = *v535;
    v1550 = 0;
    v1549 = 0uLL;
    v541 = *(_QWORD *)(v540 + 8);
    if (v541 < *(_QWORD *)(v540 + 16))
    {
      *(_OWORD *)v541 = *(_OWORD *)__s;
      *(_QWORD *)(v541 + 24) = 0;
      *(_QWORD *)(v541 + 32) = 0;
      *(_QWORD *)(v541 + 16) = 0;
      *(_QWORD *)(v540 + 8) = v541 + 40;
    }
    else
    {
      v542 = sub_223628FA4((void **)v540, (uint64_t)__s);
      v543 = SHIBYTE(v1550);
      *(_QWORD *)(v540 + 8) = v542;
      if (v543 < 0)
        operator delete((void *)v1549);
    }
    ++v535;
  }
  while (v535 != v538);
  v535 = (void **)v1546[0];
LABEL_1152:
  if (v535)
  {
    v1546[1] = v535;
    operator delete(v535);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1156:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1157;
LABEL_1161:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1543) & 0x80000000) == 0)
        goto LABEL_1158;
      goto LABEL_1162;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1156;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1161;
LABEL_1157:
  if ((*(char *)(a1 + 1543) & 0x80000000) == 0)
  {
LABEL_1158:
    __dst = *(_OWORD *)(a1 + 1520);
    v1557 = *(_QWORD *)(a1 + 1536);
    goto LABEL_1163;
  }
LABEL_1162:
  sub_223197FA4(&__dst, *(void **)(a1 + 1520), *(_QWORD *)(a1 + 1528));
LABEL_1163:
  v544 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 48))(*(_QWORD *)(a1 + 1608));
  sub_22362B7B8();
  if (byte_255792DBF < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255792DA8, *((unint64_t *)&xmmword_255792DA8 + 1));
  }
  else
  {
    v1558 = xmmword_255792DA8;
    v1559 = unk_255792DB8;
  }
  v545 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v546 = &v1558;
  }
  else
  {
    v545 = *((_QWORD *)&v1558 + 1);
    v546 = (__int128 *)v1558;
  }
  if (v545 >= 4)
  {
    v547 = (char *)v546 + v545;
    v548 = v546;
    do
    {
      v549 = (char *)memchr(v548, 118, v545 - 3);
      if (!v549)
        break;
      if (*(_DWORD *)v549 == 1684631414)
      {
        if (v549 == v547 || v549 - (char *)v546 == -1)
          break;
        v550 = *a2;
        __s[0] = (void *)v544;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1567) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1544), *(_QWORD *)(a1 + 1552));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1544);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1560);
        }
        sub_22363F024();
        if (byte_25579353F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793528, *((unint64_t *)&xmmword_255793528 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793528;
          v1553 = unk_255793538;
        }
        v551 = *(_QWORD *)(v550 + 8);
        if (v551 < *(_QWORD *)(v550 + 16))
          goto LABEL_1189;
        goto LABEL_1190;
      }
      v548 = (__int128 *)(v549 + 1);
      v545 = v547 - (char *)v548;
    }
    while (v547 - (char *)v548 >= 4);
  }
  v550 = *a2;
  __s[0] = (void *)v544;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1567) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1544), *(_QWORD *)(a1 + 1552));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1544);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1560);
  }
  sub_22363F024();
  if (byte_25579353F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793528, *((unint64_t *)&xmmword_255793528 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793528;
    v1553 = unk_255793538;
  }
  v551 = *(_QWORD *)(v550 + 8);
  if (v551 >= *(_QWORD *)(v550 + 16))
  {
LABEL_1190:
    v556 = sub_2236285DC((char **)v550, (uint64_t)__s);
  }
  else
  {
LABEL_1189:
    v552 = __s[0];
    *(_DWORD *)(v551 + 8) = __s[1];
    *(_QWORD *)v551 = v552;
    v553 = v1549;
    *(_QWORD *)(v551 + 32) = v1550;
    *(_OWORD *)(v551 + 16) = v553;
    v1550 = 0;
    v1549 = 0uLL;
    v554 = *(_QWORD *)v1552;
    *(_OWORD *)(v551 + 40) = v1551;
    *(_QWORD *)(v551 + 56) = v554;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v555 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v551 + 80) = v1553;
    *(_OWORD *)(v551 + 64) = v555;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v556 = (char *)(v551 + 88);
  }
  *(_QWORD *)(v550 + 8) = v556;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1193;
LABEL_1197:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1194;
    goto LABEL_1198;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1197;
LABEL_1193:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1194;
LABEL_1198:
  operator delete((void *)v1549);
LABEL_1194:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v557 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v558 = v1554;
  }
  else
  {
    v557 = (uint64_t)v1554[1];
    v558 = (void **)v1554[0];
  }
  if (v557 >= 18)
  {
    v559 = (char *)v558 + v557;
    v560 = v558;
    do
    {
      v561 = (char *)memchr(v560, 67, v557 - 17);
      if (!v561)
        break;
      if (*(_QWORD *)v561 == 0x456C656E6E616843
        && *((_QWORD *)v561 + 1) == 0x696F763C726F7272
        && *((_WORD *)v561 + 8) == 15972)
      {
        if (v561 != v559 && v561 - (char *)v558 != -1)
          goto LABEL_1239;
        break;
      }
      v560 = (void **)(v561 + 1);
      v557 = v559 - (char *)v560;
    }
    while (v559 - (char *)v560 >= 18);
  }
  v564 = *a2;
  __s[0] = (void *)(v544 + 1);
  LODWORD(__s[1]) = 3;
  v565 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v566 = HIBYTE(v1557);
  else
    v566 = *((_QWORD *)&__dst + 1);
  v567 = v566 + 6;
  if (v566 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v567 >= 0x17)
  {
    v569 = (v567 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v567 | 7) != 0x17)
      v569 = v567 | 7;
    v570 = v569 + 1;
    v568 = (__int128 *)operator new(v569 + 1);
    *((_QWORD *)&v1549 + 1) = v566 + 6;
    v1550 = v570 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v568;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v568 = &v1549;
    HIBYTE(v1550) = v566 + 6;
    if (!v566)
      goto LABEL_1231;
  }
  if (v565 >= 0)
    v571 = &__dst;
  else
    v571 = (__int128 *)__dst;
  memmove(v568, v571, v566);
LABEL_1231:
  strcpy((char *)v568 + v566, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v572 = *(_QWORD *)(v564 + 8);
  if (v572 >= *(_QWORD *)(v564 + 16))
  {
    v578 = sub_2236285DC((char **)v564, (uint64_t)__s);
    v579 = SHIBYTE(v1553);
    *(_QWORD *)(v564 + 8) = v578;
    if (v579 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1238;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1238;
    }
LABEL_1233:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1234;
    goto LABEL_1239;
  }
  v573 = __s[0];
  *(_DWORD *)(v572 + 8) = __s[1];
  *(_QWORD *)v572 = v573;
  v574 = v1549;
  *(_QWORD *)(v572 + 32) = v1550;
  *(_OWORD *)(v572 + 16) = v574;
  v1550 = 0;
  v1549 = 0uLL;
  v575 = *(_QWORD *)v1552;
  *(_OWORD *)(v572 + 40) = v1551;
  *(_QWORD *)(v572 + 56) = v575;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v576 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v572 + 80) = v1553;
  *(_OWORD *)(v572 + 64) = v576;
  *(_QWORD *)(v564 + 8) = v572 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1233;
LABEL_1238:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1234:
    operator delete((void *)v1549);
    v577 = *(std::__shared_weak_count **)(a1 + 1648);
    if (!v577)
      goto LABEL_1243;
    goto LABEL_1240;
  }
LABEL_1239:
  v577 = *(std::__shared_weak_count **)(a1 + 1648);
  if (!v577)
  {
LABEL_1243:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v583 = 0;
    goto LABEL_1260;
  }
LABEL_1240:
  v580 = std::__shared_weak_count::lock(v577);
  if (!v580)
    goto LABEL_1243;
  v581 = v580;
  v582 = *(_QWORD *)(a1 + 1640);
  if (v582)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v582 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v584 = (unint64_t *)&v581->__shared_owners_;
  do
    v585 = __ldaxr(v584);
  while (__stlxr(v585 - 1, v584));
  if (v585)
  {
    v583 = (void **)v1546[0];
    v586 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1260;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
    std::__shared_weak_count::__release_weak(v581);
    v583 = (void **)v1546[0];
    v586 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1260;
  }
  do
  {
    v587 = a2[1];
    __s[0] = (void *)v544;
    __s[1] = *v583;
    v1550 = 0;
    v1549 = 0uLL;
    v588 = *(_QWORD *)(v587 + 8);
    if (v588 < *(_QWORD *)(v587 + 16))
    {
      *(_OWORD *)v588 = *(_OWORD *)__s;
      *(_QWORD *)(v588 + 24) = 0;
      *(_QWORD *)(v588 + 32) = 0;
      *(_QWORD *)(v588 + 16) = 0;
      *(_QWORD *)(v587 + 8) = v588 + 40;
    }
    else
    {
      v589 = sub_223628FA4((void **)v587, (uint64_t)__s);
      v590 = SHIBYTE(v1550);
      *(_QWORD *)(v587 + 8) = v589;
      if (v590 < 0)
        operator delete((void *)v1549);
    }
    ++v583;
  }
  while (v583 != v586);
  v583 = (void **)v1546[0];
LABEL_1260:
  if (v583)
  {
    v1546[1] = v583;
    operator delete(v583);
  }
  v591 = *(std::__shared_weak_count **)(a1 + 1648);
  if (!v591 || (v592 = std::__shared_weak_count::lock(v591)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v595 = 0;
    goto LABEL_1281;
  }
  v593 = v592;
  v594 = *(_QWORD *)(a1 + 1640);
  if (v594)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v594 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v596 = (unint64_t *)&v593->__shared_owners_;
  do
    v597 = __ldaxr(v596);
  while (__stlxr(v597 - 1, v596));
  if (v597)
  {
    v595 = (void **)v1546[0];
    v598 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1281;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
    std::__shared_weak_count::__release_weak(v593);
    v595 = (void **)v1546[0];
    v598 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1281;
  }
  v599 = (void *)(v544 + 1);
  do
  {
    v600 = a2[1];
    __s[0] = v599;
    __s[1] = *v595;
    v1550 = 0;
    v1549 = 0uLL;
    v601 = *(_QWORD *)(v600 + 8);
    if (v601 < *(_QWORD *)(v600 + 16))
    {
      *(_OWORD *)v601 = *(_OWORD *)__s;
      *(_QWORD *)(v601 + 24) = 0;
      *(_QWORD *)(v601 + 32) = 0;
      *(_QWORD *)(v601 + 16) = 0;
      *(_QWORD *)(v600 + 8) = v601 + 40;
    }
    else
    {
      v602 = sub_223628FA4((void **)v600, (uint64_t)__s);
      v603 = SHIBYTE(v1550);
      *(_QWORD *)(v600 + 8) = v602;
      if (v603 < 0)
        operator delete((void *)v1549);
    }
    ++v595;
  }
  while (v595 != v598);
  v595 = (void **)v1546[0];
LABEL_1281:
  if (v595)
  {
    v1546[1] = v595;
    operator delete(v595);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1285:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1286;
LABEL_1290:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1711) & 0x80000000) == 0)
        goto LABEL_1287;
      goto LABEL_1291;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1285;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1290;
LABEL_1286:
  if ((*(char *)(a1 + 1711) & 0x80000000) == 0)
  {
LABEL_1287:
    __dst = *(_OWORD *)(a1 + 1688);
    v1557 = *(_QWORD *)(a1 + 1704);
    goto LABEL_1292;
  }
LABEL_1291:
  sub_223197FA4(&__dst, *(void **)(a1 + 1688), *(_QWORD *)(a1 + 1696));
LABEL_1292:
  v604 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1776) + 48))(*(_QWORD *)(a1 + 1776));
  sub_22362C2A0();
  if (byte_255792EF7 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255792EE0, *((unint64_t *)&xmmword_255792EE0 + 1));
  }
  else
  {
    v1558 = xmmword_255792EE0;
    v1559 = unk_255792EF0;
  }
  v605 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v606 = &v1558;
  }
  else
  {
    v605 = *((_QWORD *)&v1558 + 1);
    v606 = (__int128 *)v1558;
  }
  if (v605 >= 4)
  {
    v607 = (char *)v606 + v605;
    v608 = v606;
    do
    {
      v609 = (char *)memchr(v608, 118, v605 - 3);
      if (!v609)
        break;
      if (*(_DWORD *)v609 == 1684631414)
      {
        if (v609 == v607 || v609 - (char *)v606 == -1)
          break;
        v610 = *a2;
        __s[0] = (void *)v604;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1735) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1712), *(_QWORD *)(a1 + 1720));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1712);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1728);
        }
        sub_22363F1E8();
        if (byte_255793587 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793570, *((unint64_t *)&xmmword_255793570 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793570;
          v1553 = unk_255793580;
        }
        v611 = *(_QWORD *)(v610 + 8);
        if (v611 < *(_QWORD *)(v610 + 16))
          goto LABEL_1318;
        goto LABEL_1319;
      }
      v608 = (__int128 *)(v609 + 1);
      v605 = v607 - (char *)v608;
    }
    while (v607 - (char *)v608 >= 4);
  }
  v610 = *a2;
  __s[0] = (void *)v604;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1735) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1712), *(_QWORD *)(a1 + 1720));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1712);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1728);
  }
  sub_22363F1E8();
  if (byte_255793587 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793570, *((unint64_t *)&xmmword_255793570 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793570;
    v1553 = unk_255793580;
  }
  v611 = *(_QWORD *)(v610 + 8);
  if (v611 >= *(_QWORD *)(v610 + 16))
  {
LABEL_1319:
    v616 = sub_2236285DC((char **)v610, (uint64_t)__s);
  }
  else
  {
LABEL_1318:
    v612 = __s[0];
    *(_DWORD *)(v611 + 8) = __s[1];
    *(_QWORD *)v611 = v612;
    v613 = v1549;
    *(_QWORD *)(v611 + 32) = v1550;
    *(_OWORD *)(v611 + 16) = v613;
    v1550 = 0;
    v1549 = 0uLL;
    v614 = *(_QWORD *)v1552;
    *(_OWORD *)(v611 + 40) = v1551;
    *(_QWORD *)(v611 + 56) = v614;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v615 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v611 + 80) = v1553;
    *(_OWORD *)(v611 + 64) = v615;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v616 = (char *)(v611 + 88);
  }
  *(_QWORD *)(v610 + 8) = v616;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1322;
LABEL_1326:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1323;
    goto LABEL_1327;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1326;
LABEL_1322:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1323;
LABEL_1327:
  operator delete((void *)v1549);
LABEL_1323:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v617 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v618 = v1554;
  }
  else
  {
    v617 = (uint64_t)v1554[1];
    v618 = (void **)v1554[0];
  }
  if (v617 >= 18)
  {
    v619 = (char *)v618 + v617;
    v620 = v618;
    do
    {
      v621 = (char *)memchr(v620, 67, v617 - 17);
      if (!v621)
        break;
      if (*(_QWORD *)v621 == 0x456C656E6E616843
        && *((_QWORD *)v621 + 1) == 0x696F763C726F7272
        && *((_WORD *)v621 + 8) == 15972)
      {
        if (v621 != v619 && v621 - (char *)v618 != -1)
          goto LABEL_1368;
        break;
      }
      v620 = (void **)(v621 + 1);
      v617 = v619 - (char *)v620;
    }
    while (v619 - (char *)v620 >= 18);
  }
  v624 = *a2;
  __s[0] = (void *)(v604 + 1);
  LODWORD(__s[1]) = 3;
  v625 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v626 = HIBYTE(v1557);
  else
    v626 = *((_QWORD *)&__dst + 1);
  v627 = v626 + 6;
  if (v626 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v627 >= 0x17)
  {
    v629 = (v627 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v627 | 7) != 0x17)
      v629 = v627 | 7;
    v630 = v629 + 1;
    v628 = (__int128 *)operator new(v629 + 1);
    *((_QWORD *)&v1549 + 1) = v626 + 6;
    v1550 = v630 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v628;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v628 = &v1549;
    HIBYTE(v1550) = v626 + 6;
    if (!v626)
      goto LABEL_1360;
  }
  if (v625 >= 0)
    v631 = &__dst;
  else
    v631 = (__int128 *)__dst;
  memmove(v628, v631, v626);
LABEL_1360:
  strcpy((char *)v628 + v626, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v632 = *(_QWORD *)(v624 + 8);
  if (v632 >= *(_QWORD *)(v624 + 16))
  {
    v638 = sub_2236285DC((char **)v624, (uint64_t)__s);
    v639 = SHIBYTE(v1553);
    *(_QWORD *)(v624 + 8) = v638;
    if (v639 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1367;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1367;
    }
LABEL_1362:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1363;
    goto LABEL_1368;
  }
  v633 = __s[0];
  *(_DWORD *)(v632 + 8) = __s[1];
  *(_QWORD *)v632 = v633;
  v634 = v1549;
  *(_QWORD *)(v632 + 32) = v1550;
  *(_OWORD *)(v632 + 16) = v634;
  v1550 = 0;
  v1549 = 0uLL;
  v635 = *(_QWORD *)v1552;
  *(_OWORD *)(v632 + 40) = v1551;
  *(_QWORD *)(v632 + 56) = v635;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v636 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v632 + 80) = v1553;
  *(_OWORD *)(v632 + 64) = v636;
  *(_QWORD *)(v624 + 8) = v632 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1362;
LABEL_1367:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1363:
    operator delete((void *)v1549);
    v637 = *(std::__shared_weak_count **)(a1 + 1816);
    if (!v637)
      goto LABEL_1372;
    goto LABEL_1369;
  }
LABEL_1368:
  v637 = *(std::__shared_weak_count **)(a1 + 1816);
  if (!v637)
  {
LABEL_1372:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v643 = 0;
    goto LABEL_1389;
  }
LABEL_1369:
  v640 = std::__shared_weak_count::lock(v637);
  if (!v640)
    goto LABEL_1372;
  v641 = v640;
  v642 = *(_QWORD *)(a1 + 1808);
  if (v642)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v642 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v644 = (unint64_t *)&v641->__shared_owners_;
  do
    v645 = __ldaxr(v644);
  while (__stlxr(v645 - 1, v644));
  if (v645)
  {
    v643 = (void **)v1546[0];
    v646 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1389;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
    std::__shared_weak_count::__release_weak(v641);
    v643 = (void **)v1546[0];
    v646 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1389;
  }
  do
  {
    v647 = a2[1];
    __s[0] = (void *)v604;
    __s[1] = *v643;
    v1550 = 0;
    v1549 = 0uLL;
    v648 = *(_QWORD *)(v647 + 8);
    if (v648 < *(_QWORD *)(v647 + 16))
    {
      *(_OWORD *)v648 = *(_OWORD *)__s;
      *(_QWORD *)(v648 + 24) = 0;
      *(_QWORD *)(v648 + 32) = 0;
      *(_QWORD *)(v648 + 16) = 0;
      *(_QWORD *)(v647 + 8) = v648 + 40;
    }
    else
    {
      v649 = sub_223628FA4((void **)v647, (uint64_t)__s);
      v650 = SHIBYTE(v1550);
      *(_QWORD *)(v647 + 8) = v649;
      if (v650 < 0)
        operator delete((void *)v1549);
    }
    ++v643;
  }
  while (v643 != v646);
  v643 = (void **)v1546[0];
LABEL_1389:
  if (v643)
  {
    v1546[1] = v643;
    operator delete(v643);
  }
  v651 = *(std::__shared_weak_count **)(a1 + 1816);
  if (!v651 || (v652 = std::__shared_weak_count::lock(v651)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v655 = 0;
    goto LABEL_1410;
  }
  v653 = v652;
  v654 = *(_QWORD *)(a1 + 1808);
  if (v654)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v654 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v656 = (unint64_t *)&v653->__shared_owners_;
  do
    v657 = __ldaxr(v656);
  while (__stlxr(v657 - 1, v656));
  if (v657)
  {
    v655 = (void **)v1546[0];
    v658 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1410;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
    std::__shared_weak_count::__release_weak(v653);
    v655 = (void **)v1546[0];
    v658 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1410;
  }
  v659 = (void *)(v604 + 1);
  do
  {
    v660 = a2[1];
    __s[0] = v659;
    __s[1] = *v655;
    v1550 = 0;
    v1549 = 0uLL;
    v661 = *(_QWORD *)(v660 + 8);
    if (v661 < *(_QWORD *)(v660 + 16))
    {
      *(_OWORD *)v661 = *(_OWORD *)__s;
      *(_QWORD *)(v661 + 24) = 0;
      *(_QWORD *)(v661 + 32) = 0;
      *(_QWORD *)(v661 + 16) = 0;
      *(_QWORD *)(v660 + 8) = v661 + 40;
    }
    else
    {
      v662 = sub_223628FA4((void **)v660, (uint64_t)__s);
      v663 = SHIBYTE(v1550);
      *(_QWORD *)(v660 + 8) = v662;
      if (v663 < 0)
        operator delete((void *)v1549);
    }
    ++v655;
  }
  while (v655 != v658);
  v655 = (void **)v1546[0];
LABEL_1410:
  if (v655)
  {
    v1546[1] = v655;
    operator delete(v655);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1414:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1415;
LABEL_1419:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 1879) & 0x80000000) == 0)
        goto LABEL_1416;
      goto LABEL_1420;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1414;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1419;
LABEL_1415:
  if ((*(char *)(a1 + 1879) & 0x80000000) == 0)
  {
LABEL_1416:
    __dst = *(_OWORD *)(a1 + 1856);
    v1557 = *(_QWORD *)(a1 + 1872);
    goto LABEL_1421;
  }
LABEL_1420:
  sub_223197FA4(&__dst, *(void **)(a1 + 1856), *(_QWORD *)(a1 + 1864));
LABEL_1421:
  v664 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1944) + 48))(*(_QWORD *)(a1 + 1944));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v665 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v666 = &v1558;
  }
  else
  {
    v665 = *((_QWORD *)&v1558 + 1);
    v666 = (__int128 *)v1558;
  }
  if (v665 >= 4)
  {
    v667 = (char *)v666 + v665;
    v668 = v666;
    do
    {
      v669 = (char *)memchr(v668, 118, v665 - 3);
      if (!v669)
        break;
      if (*(_DWORD *)v669 == 1684631414)
      {
        if (v669 == v667 || v669 - (char *)v666 == -1)
          break;
        v670 = *a2;
        __s[0] = (void *)v664;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 1903) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 1880), *(_QWORD *)(a1 + 1888));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 1880);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1896);
        }
        sub_22363F3AC();
        if (byte_2557935CF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557935B8, *((unint64_t *)&xmmword_2557935B8 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557935B8;
          v1553 = unk_2557935C8;
        }
        v671 = *(_QWORD *)(v670 + 8);
        if (v671 < *(_QWORD *)(v670 + 16))
          goto LABEL_1447;
        goto LABEL_1448;
      }
      v668 = (__int128 *)(v669 + 1);
      v665 = v667 - (char *)v668;
    }
    while (v667 - (char *)v668 >= 4);
  }
  v670 = *a2;
  __s[0] = (void *)v664;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 1903) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 1880), *(_QWORD *)(a1 + 1888));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 1880);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 1896);
  }
  sub_22363F3AC();
  if (byte_2557935CF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557935B8, *((unint64_t *)&xmmword_2557935B8 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557935B8;
    v1553 = unk_2557935C8;
  }
  v671 = *(_QWORD *)(v670 + 8);
  if (v671 >= *(_QWORD *)(v670 + 16))
  {
LABEL_1448:
    v676 = sub_2236285DC((char **)v670, (uint64_t)__s);
  }
  else
  {
LABEL_1447:
    v672 = __s[0];
    *(_DWORD *)(v671 + 8) = __s[1];
    *(_QWORD *)v671 = v672;
    v673 = v1549;
    *(_QWORD *)(v671 + 32) = v1550;
    *(_OWORD *)(v671 + 16) = v673;
    v1550 = 0;
    v1549 = 0uLL;
    v674 = *(_QWORD *)v1552;
    *(_OWORD *)(v671 + 40) = v1551;
    *(_QWORD *)(v671 + 56) = v674;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v675 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v671 + 80) = v1553;
    *(_OWORD *)(v671 + 64) = v675;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v676 = (char *)(v671 + 88);
  }
  *(_QWORD *)(v670 + 8) = v676;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1451;
LABEL_1455:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1452;
    goto LABEL_1456;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1455;
LABEL_1451:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1452;
LABEL_1456:
  operator delete((void *)v1549);
LABEL_1452:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v677 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v678 = v1554;
  }
  else
  {
    v677 = (uint64_t)v1554[1];
    v678 = (void **)v1554[0];
  }
  if (v677 >= 18)
  {
    v679 = (char *)v678 + v677;
    v680 = v678;
    do
    {
      v681 = (char *)memchr(v680, 67, v677 - 17);
      if (!v681)
        break;
      if (*(_QWORD *)v681 == 0x456C656E6E616843
        && *((_QWORD *)v681 + 1) == 0x696F763C726F7272
        && *((_WORD *)v681 + 8) == 15972)
      {
        if (v681 != v679 && v681 - (char *)v678 != -1)
          goto LABEL_1497;
        break;
      }
      v680 = (void **)(v681 + 1);
      v677 = v679 - (char *)v680;
    }
    while (v679 - (char *)v680 >= 18);
  }
  v684 = *a2;
  __s[0] = (void *)(v664 + 1);
  LODWORD(__s[1]) = 3;
  v685 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v686 = HIBYTE(v1557);
  else
    v686 = *((_QWORD *)&__dst + 1);
  v687 = v686 + 6;
  if (v686 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v687 >= 0x17)
  {
    v689 = (v687 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v687 | 7) != 0x17)
      v689 = v687 | 7;
    v690 = v689 + 1;
    v688 = (__int128 *)operator new(v689 + 1);
    *((_QWORD *)&v1549 + 1) = v686 + 6;
    v1550 = v690 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v688;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v688 = &v1549;
    HIBYTE(v1550) = v686 + 6;
    if (!v686)
      goto LABEL_1489;
  }
  if (v685 >= 0)
    v691 = &__dst;
  else
    v691 = (__int128 *)__dst;
  memmove(v688, v691, v686);
LABEL_1489:
  strcpy((char *)v688 + v686, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v692 = *(_QWORD *)(v684 + 8);
  if (v692 >= *(_QWORD *)(v684 + 16))
  {
    v698 = sub_2236285DC((char **)v684, (uint64_t)__s);
    v699 = SHIBYTE(v1553);
    *(_QWORD *)(v684 + 8) = v698;
    if (v699 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1496;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1496;
    }
LABEL_1491:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1492;
    goto LABEL_1497;
  }
  v693 = __s[0];
  *(_DWORD *)(v692 + 8) = __s[1];
  *(_QWORD *)v692 = v693;
  v694 = v1549;
  *(_QWORD *)(v692 + 32) = v1550;
  *(_OWORD *)(v692 + 16) = v694;
  v1550 = 0;
  v1549 = 0uLL;
  v695 = *(_QWORD *)v1552;
  *(_OWORD *)(v692 + 40) = v1551;
  *(_QWORD *)(v692 + 56) = v695;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v696 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v692 + 80) = v1553;
  *(_OWORD *)(v692 + 64) = v696;
  *(_QWORD *)(v684 + 8) = v692 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1491;
LABEL_1496:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1492:
    operator delete((void *)v1549);
    v697 = *(std::__shared_weak_count **)(a1 + 1984);
    if (!v697)
      goto LABEL_1501;
    goto LABEL_1498;
  }
LABEL_1497:
  v697 = *(std::__shared_weak_count **)(a1 + 1984);
  if (!v697)
  {
LABEL_1501:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v703 = 0;
    goto LABEL_1518;
  }
LABEL_1498:
  v700 = std::__shared_weak_count::lock(v697);
  if (!v700)
    goto LABEL_1501;
  v701 = v700;
  v702 = *(_QWORD *)(a1 + 1976);
  if (v702)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v702 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v704 = (unint64_t *)&v701->__shared_owners_;
  do
    v705 = __ldaxr(v704);
  while (__stlxr(v705 - 1, v704));
  if (v705)
  {
    v703 = (void **)v1546[0];
    v706 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1518;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
    std::__shared_weak_count::__release_weak(v701);
    v703 = (void **)v1546[0];
    v706 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1518;
  }
  do
  {
    v707 = a2[1];
    __s[0] = (void *)v664;
    __s[1] = *v703;
    v1550 = 0;
    v1549 = 0uLL;
    v708 = *(_QWORD *)(v707 + 8);
    if (v708 < *(_QWORD *)(v707 + 16))
    {
      *(_OWORD *)v708 = *(_OWORD *)__s;
      *(_QWORD *)(v708 + 24) = 0;
      *(_QWORD *)(v708 + 32) = 0;
      *(_QWORD *)(v708 + 16) = 0;
      *(_QWORD *)(v707 + 8) = v708 + 40;
    }
    else
    {
      v709 = sub_223628FA4((void **)v707, (uint64_t)__s);
      v710 = SHIBYTE(v1550);
      *(_QWORD *)(v707 + 8) = v709;
      if (v710 < 0)
        operator delete((void *)v1549);
    }
    ++v703;
  }
  while (v703 != v706);
  v703 = (void **)v1546[0];
LABEL_1518:
  if (v703)
  {
    v1546[1] = v703;
    operator delete(v703);
  }
  v711 = *(std::__shared_weak_count **)(a1 + 1984);
  if (!v711 || (v712 = std::__shared_weak_count::lock(v711)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v715 = 0;
    goto LABEL_1539;
  }
  v713 = v712;
  v714 = *(_QWORD *)(a1 + 1976);
  if (v714)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v714 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v716 = (unint64_t *)&v713->__shared_owners_;
  do
    v717 = __ldaxr(v716);
  while (__stlxr(v717 - 1, v716));
  if (v717)
  {
    v715 = (void **)v1546[0];
    v718 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1539;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
    std::__shared_weak_count::__release_weak(v713);
    v715 = (void **)v1546[0];
    v718 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1539;
  }
  v719 = (void *)(v664 + 1);
  do
  {
    v720 = a2[1];
    __s[0] = v719;
    __s[1] = *v715;
    v1550 = 0;
    v1549 = 0uLL;
    v721 = *(_QWORD *)(v720 + 8);
    if (v721 < *(_QWORD *)(v720 + 16))
    {
      *(_OWORD *)v721 = *(_OWORD *)__s;
      *(_QWORD *)(v721 + 24) = 0;
      *(_QWORD *)(v721 + 32) = 0;
      *(_QWORD *)(v721 + 16) = 0;
      *(_QWORD *)(v720 + 8) = v721 + 40;
    }
    else
    {
      v722 = sub_223628FA4((void **)v720, (uint64_t)__s);
      v723 = SHIBYTE(v1550);
      *(_QWORD *)(v720 + 8) = v722;
      if (v723 < 0)
        operator delete((void *)v1549);
    }
    ++v715;
  }
  while (v715 != v718);
  v715 = (void **)v1546[0];
LABEL_1539:
  if (v715)
  {
    v1546[1] = v715;
    operator delete(v715);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1543:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1544;
LABEL_1548:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 2047) & 0x80000000) == 0)
        goto LABEL_1545;
      goto LABEL_1549;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1543;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1548;
LABEL_1544:
  if ((*(char *)(a1 + 2047) & 0x80000000) == 0)
  {
LABEL_1545:
    __dst = *(_OWORD *)(a1 + 2024);
    v1557 = *(_QWORD *)(a1 + 2040);
    goto LABEL_1550;
  }
LABEL_1549:
  sub_223197FA4(&__dst, *(void **)(a1 + 2024), *(_QWORD *)(a1 + 2032));
LABEL_1550:
  v724 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2112) + 48))(*(_QWORD *)(a1 + 2112));
  sub_223629738();
  if (byte_2540CBD07 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_2540CBCF0, *((unint64_t *)&xmmword_2540CBCF0 + 1));
  }
  else
  {
    v1558 = xmmword_2540CBCF0;
    v1559 = unk_2540CBD00;
  }
  v725 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v726 = &v1558;
  }
  else
  {
    v725 = *((_QWORD *)&v1558 + 1);
    v726 = (__int128 *)v1558;
  }
  if (v725 >= 4)
  {
    v727 = (char *)v726 + v725;
    v728 = v726;
    do
    {
      v729 = (char *)memchr(v728, 118, v725 - 3);
      if (!v729)
        break;
      if (*(_DWORD *)v729 == 1684631414)
      {
        if (v729 == v727 || v729 - (char *)v726 == -1)
          break;
        v730 = *a2;
        __s[0] = (void *)v724;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 2071) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2048), *(_QWORD *)(a1 + 2056));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2048);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2064);
        }
        sub_22363F570();
        if (byte_255793617 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793600, *((unint64_t *)&xmmword_255793600 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793600;
          v1553 = unk_255793610;
        }
        v731 = *(_QWORD *)(v730 + 8);
        if (v731 < *(_QWORD *)(v730 + 16))
          goto LABEL_1576;
        goto LABEL_1577;
      }
      v728 = (__int128 *)(v729 + 1);
      v725 = v727 - (char *)v728;
    }
    while (v727 - (char *)v728 >= 4);
  }
  v730 = *a2;
  __s[0] = (void *)v724;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 2071) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2048), *(_QWORD *)(a1 + 2056));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2048);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2064);
  }
  sub_22363F570();
  if (byte_255793617 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793600, *((unint64_t *)&xmmword_255793600 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793600;
    v1553 = unk_255793610;
  }
  v731 = *(_QWORD *)(v730 + 8);
  if (v731 >= *(_QWORD *)(v730 + 16))
  {
LABEL_1577:
    v736 = sub_2236285DC((char **)v730, (uint64_t)__s);
  }
  else
  {
LABEL_1576:
    v732 = __s[0];
    *(_DWORD *)(v731 + 8) = __s[1];
    *(_QWORD *)v731 = v732;
    v733 = v1549;
    *(_QWORD *)(v731 + 32) = v1550;
    *(_OWORD *)(v731 + 16) = v733;
    v1550 = 0;
    v1549 = 0uLL;
    v734 = *(_QWORD *)v1552;
    *(_OWORD *)(v731 + 40) = v1551;
    *(_QWORD *)(v731 + 56) = v734;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v735 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v731 + 80) = v1553;
    *(_OWORD *)(v731 + 64) = v735;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v736 = (char *)(v731 + 88);
  }
  *(_QWORD *)(v730 + 8) = v736;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1580;
LABEL_1584:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1581;
    goto LABEL_1585;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1584;
LABEL_1580:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1581;
LABEL_1585:
  operator delete((void *)v1549);
LABEL_1581:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v737 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v738 = v1554;
  }
  else
  {
    v737 = (uint64_t)v1554[1];
    v738 = (void **)v1554[0];
  }
  if (v737 >= 18)
  {
    v739 = (char *)v738 + v737;
    v740 = v738;
    do
    {
      v741 = (char *)memchr(v740, 67, v737 - 17);
      if (!v741)
        break;
      if (*(_QWORD *)v741 == 0x456C656E6E616843
        && *((_QWORD *)v741 + 1) == 0x696F763C726F7272
        && *((_WORD *)v741 + 8) == 15972)
      {
        if (v741 != v739 && v741 - (char *)v738 != -1)
          goto LABEL_1626;
        break;
      }
      v740 = (void **)(v741 + 1);
      v737 = v739 - (char *)v740;
    }
    while (v739 - (char *)v740 >= 18);
  }
  v744 = *a2;
  __s[0] = (void *)(v724 + 1);
  LODWORD(__s[1]) = 3;
  v745 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v746 = HIBYTE(v1557);
  else
    v746 = *((_QWORD *)&__dst + 1);
  v747 = v746 + 6;
  if (v746 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v747 >= 0x17)
  {
    v749 = (v747 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v747 | 7) != 0x17)
      v749 = v747 | 7;
    v750 = v749 + 1;
    v748 = (__int128 *)operator new(v749 + 1);
    *((_QWORD *)&v1549 + 1) = v746 + 6;
    v1550 = v750 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v748;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v748 = &v1549;
    HIBYTE(v1550) = v746 + 6;
    if (!v746)
      goto LABEL_1618;
  }
  if (v745 >= 0)
    v751 = &__dst;
  else
    v751 = (__int128 *)__dst;
  memmove(v748, v751, v746);
LABEL_1618:
  strcpy((char *)v748 + v746, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v752 = *(_QWORD *)(v744 + 8);
  if (v752 >= *(_QWORD *)(v744 + 16))
  {
    v758 = sub_2236285DC((char **)v744, (uint64_t)__s);
    v759 = SHIBYTE(v1553);
    *(_QWORD *)(v744 + 8) = v758;
    if (v759 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1625;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1625;
    }
LABEL_1620:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1621;
    goto LABEL_1626;
  }
  v753 = __s[0];
  *(_DWORD *)(v752 + 8) = __s[1];
  *(_QWORD *)v752 = v753;
  v754 = v1549;
  *(_QWORD *)(v752 + 32) = v1550;
  *(_OWORD *)(v752 + 16) = v754;
  v1550 = 0;
  v1549 = 0uLL;
  v755 = *(_QWORD *)v1552;
  *(_OWORD *)(v752 + 40) = v1551;
  *(_QWORD *)(v752 + 56) = v755;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v756 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v752 + 80) = v1553;
  *(_OWORD *)(v752 + 64) = v756;
  *(_QWORD *)(v744 + 8) = v752 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1620;
LABEL_1625:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1621:
    operator delete((void *)v1549);
    v757 = *(std::__shared_weak_count **)(a1 + 2152);
    if (!v757)
      goto LABEL_1630;
    goto LABEL_1627;
  }
LABEL_1626:
  v757 = *(std::__shared_weak_count **)(a1 + 2152);
  if (!v757)
  {
LABEL_1630:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v763 = 0;
    goto LABEL_1647;
  }
LABEL_1627:
  v760 = std::__shared_weak_count::lock(v757);
  if (!v760)
    goto LABEL_1630;
  v761 = v760;
  v762 = *(_QWORD *)(a1 + 2144);
  if (v762)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v762 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v764 = (unint64_t *)&v761->__shared_owners_;
  do
    v765 = __ldaxr(v764);
  while (__stlxr(v765 - 1, v764));
  if (v765)
  {
    v763 = (void **)v1546[0];
    v766 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1647;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v761->__on_zero_shared)(v761);
    std::__shared_weak_count::__release_weak(v761);
    v763 = (void **)v1546[0];
    v766 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1647;
  }
  do
  {
    v767 = a2[1];
    __s[0] = (void *)v724;
    __s[1] = *v763;
    v1550 = 0;
    v1549 = 0uLL;
    v768 = *(_QWORD *)(v767 + 8);
    if (v768 < *(_QWORD *)(v767 + 16))
    {
      *(_OWORD *)v768 = *(_OWORD *)__s;
      *(_QWORD *)(v768 + 24) = 0;
      *(_QWORD *)(v768 + 32) = 0;
      *(_QWORD *)(v768 + 16) = 0;
      *(_QWORD *)(v767 + 8) = v768 + 40;
    }
    else
    {
      v769 = sub_223628FA4((void **)v767, (uint64_t)__s);
      v770 = SHIBYTE(v1550);
      *(_QWORD *)(v767 + 8) = v769;
      if (v770 < 0)
        operator delete((void *)v1549);
    }
    ++v763;
  }
  while (v763 != v766);
  v763 = (void **)v1546[0];
LABEL_1647:
  if (v763)
  {
    v1546[1] = v763;
    operator delete(v763);
  }
  v771 = *(std::__shared_weak_count **)(a1 + 2152);
  if (!v771 || (v772 = std::__shared_weak_count::lock(v771)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v775 = 0;
    goto LABEL_1668;
  }
  v773 = v772;
  v774 = *(_QWORD *)(a1 + 2144);
  if (v774)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v774 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v776 = (unint64_t *)&v773->__shared_owners_;
  do
    v777 = __ldaxr(v776);
  while (__stlxr(v777 - 1, v776));
  if (v777)
  {
    v775 = (void **)v1546[0];
    v778 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1668;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
    std::__shared_weak_count::__release_weak(v773);
    v775 = (void **)v1546[0];
    v778 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1668;
  }
  v779 = (void *)(v724 + 1);
  do
  {
    v780 = a2[1];
    __s[0] = v779;
    __s[1] = *v775;
    v1550 = 0;
    v1549 = 0uLL;
    v781 = *(_QWORD *)(v780 + 8);
    if (v781 < *(_QWORD *)(v780 + 16))
    {
      *(_OWORD *)v781 = *(_OWORD *)__s;
      *(_QWORD *)(v781 + 24) = 0;
      *(_QWORD *)(v781 + 32) = 0;
      *(_QWORD *)(v781 + 16) = 0;
      *(_QWORD *)(v780 + 8) = v781 + 40;
    }
    else
    {
      v782 = sub_223628FA4((void **)v780, (uint64_t)__s);
      v783 = SHIBYTE(v1550);
      *(_QWORD *)(v780 + 8) = v782;
      if (v783 < 0)
        operator delete((void *)v1549);
    }
    ++v775;
  }
  while (v775 != v778);
  v775 = (void **)v1546[0];
LABEL_1668:
  if (v775)
  {
    v1546[1] = v775;
    operator delete(v775);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1672:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1673;
LABEL_1677:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 2215) & 0x80000000) == 0)
        goto LABEL_1674;
      goto LABEL_1678;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1672;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1677;
LABEL_1673:
  if ((*(char *)(a1 + 2215) & 0x80000000) == 0)
  {
LABEL_1674:
    __dst = *(_OWORD *)(a1 + 2192);
    v1557 = *(_QWORD *)(a1 + 2208);
    goto LABEL_1679;
  }
LABEL_1678:
  sub_223197FA4(&__dst, *(void **)(a1 + 2192), *(_QWORD *)(a1 + 2200));
LABEL_1679:
  v784 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2280) + 48))(*(_QWORD *)(a1 + 2280));
  sub_22362CD88();
  if (byte_25579302F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793018, *((unint64_t *)&xmmword_255793018 + 1));
  }
  else
  {
    v1558 = xmmword_255793018;
    v1559 = unk_255793028;
  }
  v785 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v786 = &v1558;
  }
  else
  {
    v785 = *((_QWORD *)&v1558 + 1);
    v786 = (__int128 *)v1558;
  }
  if (v785 >= 4)
  {
    v787 = (char *)v786 + v785;
    v788 = v786;
    do
    {
      v789 = (char *)memchr(v788, 118, v785 - 3);
      if (!v789)
        break;
      if (*(_DWORD *)v789 == 1684631414)
      {
        if (v789 == v787 || v789 - (char *)v786 == -1)
          break;
        v790 = *a2;
        __s[0] = (void *)v784;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 2239) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2216), *(_QWORD *)(a1 + 2224));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2216);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2232);
        }
        sub_22363F734();
        if (byte_25579365F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793648, *((unint64_t *)&xmmword_255793648 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793648;
          v1553 = unk_255793658;
        }
        v791 = *(_QWORD *)(v790 + 8);
        if (v791 < *(_QWORD *)(v790 + 16))
          goto LABEL_1705;
        goto LABEL_1706;
      }
      v788 = (__int128 *)(v789 + 1);
      v785 = v787 - (char *)v788;
    }
    while (v787 - (char *)v788 >= 4);
  }
  v790 = *a2;
  __s[0] = (void *)v784;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 2239) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2216), *(_QWORD *)(a1 + 2224));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2216);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2232);
  }
  sub_22363F734();
  if (byte_25579365F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793648, *((unint64_t *)&xmmword_255793648 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793648;
    v1553 = unk_255793658;
  }
  v791 = *(_QWORD *)(v790 + 8);
  if (v791 >= *(_QWORD *)(v790 + 16))
  {
LABEL_1706:
    v796 = sub_2236285DC((char **)v790, (uint64_t)__s);
  }
  else
  {
LABEL_1705:
    v792 = __s[0];
    *(_DWORD *)(v791 + 8) = __s[1];
    *(_QWORD *)v791 = v792;
    v793 = v1549;
    *(_QWORD *)(v791 + 32) = v1550;
    *(_OWORD *)(v791 + 16) = v793;
    v1550 = 0;
    v1549 = 0uLL;
    v794 = *(_QWORD *)v1552;
    *(_OWORD *)(v791 + 40) = v1551;
    *(_QWORD *)(v791 + 56) = v794;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v795 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v791 + 80) = v1553;
    *(_OWORD *)(v791 + 64) = v795;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v796 = (char *)(v791 + 88);
  }
  *(_QWORD *)(v790 + 8) = v796;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1709;
LABEL_1713:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1710;
    goto LABEL_1714;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1713;
LABEL_1709:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1710;
LABEL_1714:
  operator delete((void *)v1549);
LABEL_1710:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v797 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v798 = v1554;
  }
  else
  {
    v797 = (uint64_t)v1554[1];
    v798 = (void **)v1554[0];
  }
  if (v797 >= 18)
  {
    v799 = (char *)v798 + v797;
    v800 = v798;
    do
    {
      v801 = (char *)memchr(v800, 67, v797 - 17);
      if (!v801)
        break;
      if (*(_QWORD *)v801 == 0x456C656E6E616843
        && *((_QWORD *)v801 + 1) == 0x696F763C726F7272
        && *((_WORD *)v801 + 8) == 15972)
      {
        if (v801 != v799 && v801 - (char *)v798 != -1)
          goto LABEL_1755;
        break;
      }
      v800 = (void **)(v801 + 1);
      v797 = v799 - (char *)v800;
    }
    while (v799 - (char *)v800 >= 18);
  }
  v804 = *a2;
  __s[0] = (void *)(v784 + 1);
  LODWORD(__s[1]) = 3;
  v805 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v806 = HIBYTE(v1557);
  else
    v806 = *((_QWORD *)&__dst + 1);
  v807 = v806 + 6;
  if (v806 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v807 >= 0x17)
  {
    v809 = (v807 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v807 | 7) != 0x17)
      v809 = v807 | 7;
    v810 = v809 + 1;
    v808 = (__int128 *)operator new(v809 + 1);
    *((_QWORD *)&v1549 + 1) = v806 + 6;
    v1550 = v810 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v808;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v808 = &v1549;
    HIBYTE(v1550) = v806 + 6;
    if (!v806)
      goto LABEL_1747;
  }
  if (v805 >= 0)
    v811 = &__dst;
  else
    v811 = (__int128 *)__dst;
  memmove(v808, v811, v806);
LABEL_1747:
  strcpy((char *)v808 + v806, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v812 = *(_QWORD *)(v804 + 8);
  if (v812 >= *(_QWORD *)(v804 + 16))
  {
    v818 = sub_2236285DC((char **)v804, (uint64_t)__s);
    v819 = SHIBYTE(v1553);
    *(_QWORD *)(v804 + 8) = v818;
    if (v819 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1754;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1754;
    }
LABEL_1749:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1750;
    goto LABEL_1755;
  }
  v813 = __s[0];
  *(_DWORD *)(v812 + 8) = __s[1];
  *(_QWORD *)v812 = v813;
  v814 = v1549;
  *(_QWORD *)(v812 + 32) = v1550;
  *(_OWORD *)(v812 + 16) = v814;
  v1550 = 0;
  v1549 = 0uLL;
  v815 = *(_QWORD *)v1552;
  *(_OWORD *)(v812 + 40) = v1551;
  *(_QWORD *)(v812 + 56) = v815;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v816 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v812 + 80) = v1553;
  *(_OWORD *)(v812 + 64) = v816;
  *(_QWORD *)(v804 + 8) = v812 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1749;
LABEL_1754:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1750:
    operator delete((void *)v1549);
    v817 = *(std::__shared_weak_count **)(a1 + 2320);
    if (!v817)
      goto LABEL_1759;
    goto LABEL_1756;
  }
LABEL_1755:
  v817 = *(std::__shared_weak_count **)(a1 + 2320);
  if (!v817)
  {
LABEL_1759:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v823 = 0;
    goto LABEL_1776;
  }
LABEL_1756:
  v820 = std::__shared_weak_count::lock(v817);
  if (!v820)
    goto LABEL_1759;
  v821 = v820;
  v822 = *(_QWORD *)(a1 + 2312);
  if (v822)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v822 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v824 = (unint64_t *)&v821->__shared_owners_;
  do
    v825 = __ldaxr(v824);
  while (__stlxr(v825 - 1, v824));
  if (v825)
  {
    v823 = (void **)v1546[0];
    v826 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1776;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
    std::__shared_weak_count::__release_weak(v821);
    v823 = (void **)v1546[0];
    v826 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1776;
  }
  do
  {
    v827 = a2[1];
    __s[0] = (void *)v784;
    __s[1] = *v823;
    v1550 = 0;
    v1549 = 0uLL;
    v828 = *(_QWORD *)(v827 + 8);
    if (v828 < *(_QWORD *)(v827 + 16))
    {
      *(_OWORD *)v828 = *(_OWORD *)__s;
      *(_QWORD *)(v828 + 24) = 0;
      *(_QWORD *)(v828 + 32) = 0;
      *(_QWORD *)(v828 + 16) = 0;
      *(_QWORD *)(v827 + 8) = v828 + 40;
    }
    else
    {
      v829 = sub_223628FA4((void **)v827, (uint64_t)__s);
      v830 = SHIBYTE(v1550);
      *(_QWORD *)(v827 + 8) = v829;
      if (v830 < 0)
        operator delete((void *)v1549);
    }
    ++v823;
  }
  while (v823 != v826);
  v823 = (void **)v1546[0];
LABEL_1776:
  if (v823)
  {
    v1546[1] = v823;
    operator delete(v823);
  }
  v831 = *(std::__shared_weak_count **)(a1 + 2320);
  if (!v831 || (v832 = std::__shared_weak_count::lock(v831)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v835 = 0;
    goto LABEL_1797;
  }
  v833 = v832;
  v834 = *(_QWORD *)(a1 + 2312);
  if (v834)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v834 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v836 = (unint64_t *)&v833->__shared_owners_;
  do
    v837 = __ldaxr(v836);
  while (__stlxr(v837 - 1, v836));
  if (v837)
  {
    v835 = (void **)v1546[0];
    v838 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1797;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
    std::__shared_weak_count::__release_weak(v833);
    v835 = (void **)v1546[0];
    v838 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1797;
  }
  v839 = (void *)(v784 + 1);
  do
  {
    v840 = a2[1];
    __s[0] = v839;
    __s[1] = *v835;
    v1550 = 0;
    v1549 = 0uLL;
    v841 = *(_QWORD *)(v840 + 8);
    if (v841 < *(_QWORD *)(v840 + 16))
    {
      *(_OWORD *)v841 = *(_OWORD *)__s;
      *(_QWORD *)(v841 + 24) = 0;
      *(_QWORD *)(v841 + 32) = 0;
      *(_QWORD *)(v841 + 16) = 0;
      *(_QWORD *)(v840 + 8) = v841 + 40;
    }
    else
    {
      v842 = sub_223628FA4((void **)v840, (uint64_t)__s);
      v843 = SHIBYTE(v1550);
      *(_QWORD *)(v840 + 8) = v842;
      if (v843 < 0)
        operator delete((void *)v1549);
    }
    ++v835;
  }
  while (v835 != v838);
  v835 = (void **)v1546[0];
LABEL_1797:
  if (v835)
  {
    v1546[1] = v835;
    operator delete(v835);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1801:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1802;
LABEL_1806:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 2383) & 0x80000000) == 0)
        goto LABEL_1803;
      goto LABEL_1807;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1801;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1806;
LABEL_1802:
  if ((*(char *)(a1 + 2383) & 0x80000000) == 0)
  {
LABEL_1803:
    __dst = *(_OWORD *)(a1 + 2360);
    v1557 = *(_QWORD *)(a1 + 2376);
    goto LABEL_1808;
  }
LABEL_1807:
  sub_223197FA4(&__dst, *(void **)(a1 + 2360), *(_QWORD *)(a1 + 2368));
LABEL_1808:
  v844 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2448) + 48))(*(_QWORD *)(a1 + 2448));
  sub_22363F8F8();
  if (byte_2557936A7 < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793690, *((unint64_t *)&xmmword_255793690 + 1));
  }
  else
  {
    v1558 = xmmword_255793690;
    v1559 = unk_2557936A0;
  }
  v845 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v846 = &v1558;
  }
  else
  {
    v845 = *((_QWORD *)&v1558 + 1);
    v846 = (__int128 *)v1558;
  }
  if (v845 >= 4)
  {
    v847 = (char *)v846 + v845;
    v848 = v846;
    do
    {
      v849 = (char *)memchr(v848, 118, v845 - 3);
      if (!v849)
        break;
      if (*(_DWORD *)v849 == 1684631414)
      {
        if (v849 == v847 || v849 - (char *)v846 == -1)
          break;
        v850 = *a2;
        __s[0] = (void *)v844;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 2407) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2384), *(_QWORD *)(a1 + 2392));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2384);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2400);
        }
        sub_223640408();
        if (byte_2557937AF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793798, *((unint64_t *)&xmmword_255793798 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793798;
          v1553 = unk_2557937A8;
        }
        v851 = *(_QWORD *)(v850 + 8);
        if (v851 < *(_QWORD *)(v850 + 16))
          goto LABEL_1834;
        goto LABEL_1835;
      }
      v848 = (__int128 *)(v849 + 1);
      v845 = v847 - (char *)v848;
    }
    while (v847 - (char *)v848 >= 4);
  }
  v850 = *a2;
  __s[0] = (void *)v844;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 2407) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2384), *(_QWORD *)(a1 + 2392));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2384);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2400);
  }
  sub_223640408();
  if (byte_2557937AF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793798, *((unint64_t *)&xmmword_255793798 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793798;
    v1553 = unk_2557937A8;
  }
  v851 = *(_QWORD *)(v850 + 8);
  if (v851 >= *(_QWORD *)(v850 + 16))
  {
LABEL_1835:
    v856 = sub_2236285DC((char **)v850, (uint64_t)__s);
  }
  else
  {
LABEL_1834:
    v852 = __s[0];
    *(_DWORD *)(v851 + 8) = __s[1];
    *(_QWORD *)v851 = v852;
    v853 = v1549;
    *(_QWORD *)(v851 + 32) = v1550;
    *(_OWORD *)(v851 + 16) = v853;
    v1550 = 0;
    v1549 = 0uLL;
    v854 = *(_QWORD *)v1552;
    *(_OWORD *)(v851 + 40) = v1551;
    *(_QWORD *)(v851 + 56) = v854;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v855 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v851 + 80) = v1553;
    *(_OWORD *)(v851 + 64) = v855;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v856 = (char *)(v851 + 88);
  }
  *(_QWORD *)(v850 + 8) = v856;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1838;
LABEL_1842:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1839;
    goto LABEL_1843;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1842;
LABEL_1838:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1839;
LABEL_1843:
  operator delete((void *)v1549);
LABEL_1839:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v857 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v858 = v1554;
  }
  else
  {
    v857 = (uint64_t)v1554[1];
    v858 = (void **)v1554[0];
  }
  if (v857 >= 18)
  {
    v859 = (char *)v858 + v857;
    v860 = v858;
    do
    {
      v861 = (char *)memchr(v860, 67, v857 - 17);
      if (!v861)
        break;
      if (*(_QWORD *)v861 == 0x456C656E6E616843
        && *((_QWORD *)v861 + 1) == 0x696F763C726F7272
        && *((_WORD *)v861 + 8) == 15972)
      {
        if (v861 != v859 && v861 - (char *)v858 != -1)
          goto LABEL_1884;
        break;
      }
      v860 = (void **)(v861 + 1);
      v857 = v859 - (char *)v860;
    }
    while (v859 - (char *)v860 >= 18);
  }
  v864 = *a2;
  __s[0] = (void *)(v844 + 1);
  LODWORD(__s[1]) = 3;
  v865 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v866 = HIBYTE(v1557);
  else
    v866 = *((_QWORD *)&__dst + 1);
  v867 = v866 + 6;
  if (v866 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v867 >= 0x17)
  {
    v869 = (v867 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v867 | 7) != 0x17)
      v869 = v867 | 7;
    v870 = v869 + 1;
    v868 = (__int128 *)operator new(v869 + 1);
    *((_QWORD *)&v1549 + 1) = v866 + 6;
    v1550 = v870 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v868;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v868 = &v1549;
    HIBYTE(v1550) = v866 + 6;
    if (!v866)
      goto LABEL_1876;
  }
  if (v865 >= 0)
    v871 = &__dst;
  else
    v871 = (__int128 *)__dst;
  memmove(v868, v871, v866);
LABEL_1876:
  strcpy((char *)v868 + v866, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v872 = *(_QWORD *)(v864 + 8);
  if (v872 >= *(_QWORD *)(v864 + 16))
  {
    v878 = sub_2236285DC((char **)v864, (uint64_t)__s);
    v879 = SHIBYTE(v1553);
    *(_QWORD *)(v864 + 8) = v878;
    if (v879 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_1883;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_1883;
    }
LABEL_1878:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_1879;
    goto LABEL_1884;
  }
  v873 = __s[0];
  *(_DWORD *)(v872 + 8) = __s[1];
  *(_QWORD *)v872 = v873;
  v874 = v1549;
  *(_QWORD *)(v872 + 32) = v1550;
  *(_OWORD *)(v872 + 16) = v874;
  v1550 = 0;
  v1549 = 0uLL;
  v875 = *(_QWORD *)v1552;
  *(_OWORD *)(v872 + 40) = v1551;
  *(_QWORD *)(v872 + 56) = v875;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v876 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v872 + 80) = v1553;
  *(_OWORD *)(v872 + 64) = v876;
  *(_QWORD *)(v864 + 8) = v872 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1878;
LABEL_1883:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_1879:
    operator delete((void *)v1549);
    v877 = *(std::__shared_weak_count **)(a1 + 2488);
    if (!v877)
      goto LABEL_1888;
    goto LABEL_1885;
  }
LABEL_1884:
  v877 = *(std::__shared_weak_count **)(a1 + 2488);
  if (!v877)
  {
LABEL_1888:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v883 = 0;
    goto LABEL_1905;
  }
LABEL_1885:
  v880 = std::__shared_weak_count::lock(v877);
  if (!v880)
    goto LABEL_1888;
  v881 = v880;
  v882 = *(_QWORD *)(a1 + 2480);
  if (v882)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v882 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v884 = (unint64_t *)&v881->__shared_owners_;
  do
    v885 = __ldaxr(v884);
  while (__stlxr(v885 - 1, v884));
  if (v885)
  {
    v883 = (void **)v1546[0];
    v886 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1905;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v881->__on_zero_shared)(v881);
    std::__shared_weak_count::__release_weak(v881);
    v883 = (void **)v1546[0];
    v886 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1905;
  }
  do
  {
    v887 = a2[1];
    __s[0] = (void *)v844;
    __s[1] = *v883;
    v1550 = 0;
    v1549 = 0uLL;
    v888 = *(_QWORD *)(v887 + 8);
    if (v888 < *(_QWORD *)(v887 + 16))
    {
      *(_OWORD *)v888 = *(_OWORD *)__s;
      *(_QWORD *)(v888 + 24) = 0;
      *(_QWORD *)(v888 + 32) = 0;
      *(_QWORD *)(v888 + 16) = 0;
      *(_QWORD *)(v887 + 8) = v888 + 40;
    }
    else
    {
      v889 = sub_223628FA4((void **)v887, (uint64_t)__s);
      v890 = SHIBYTE(v1550);
      *(_QWORD *)(v887 + 8) = v889;
      if (v890 < 0)
        operator delete((void *)v1549);
    }
    ++v883;
  }
  while (v883 != v886);
  v883 = (void **)v1546[0];
LABEL_1905:
  if (v883)
  {
    v1546[1] = v883;
    operator delete(v883);
  }
  v891 = *(std::__shared_weak_count **)(a1 + 2488);
  if (!v891 || (v892 = std::__shared_weak_count::lock(v891)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v895 = 0;
    goto LABEL_1926;
  }
  v893 = v892;
  v894 = *(_QWORD *)(a1 + 2480);
  if (v894)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v894 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v896 = (unint64_t *)&v893->__shared_owners_;
  do
    v897 = __ldaxr(v896);
  while (__stlxr(v897 - 1, v896));
  if (v897)
  {
    v895 = (void **)v1546[0];
    v898 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1926;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v893->__on_zero_shared)(v893);
    std::__shared_weak_count::__release_weak(v893);
    v895 = (void **)v1546[0];
    v898 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_1926;
  }
  v899 = (void *)(v844 + 1);
  do
  {
    v900 = a2[1];
    __s[0] = v899;
    __s[1] = *v895;
    v1550 = 0;
    v1549 = 0uLL;
    v901 = *(_QWORD *)(v900 + 8);
    if (v901 < *(_QWORD *)(v900 + 16))
    {
      *(_OWORD *)v901 = *(_OWORD *)__s;
      *(_QWORD *)(v901 + 24) = 0;
      *(_QWORD *)(v901 + 32) = 0;
      *(_QWORD *)(v901 + 16) = 0;
      *(_QWORD *)(v900 + 8) = v901 + 40;
    }
    else
    {
      v902 = sub_223628FA4((void **)v900, (uint64_t)__s);
      v903 = SHIBYTE(v1550);
      *(_QWORD *)(v900 + 8) = v902;
      if (v903 < 0)
        operator delete((void *)v1549);
    }
    ++v895;
  }
  while (v895 != v898);
  v895 = (void **)v1546[0];
LABEL_1926:
  if (v895)
  {
    v1546[1] = v895;
    operator delete(v895);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_1930:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_1931;
LABEL_1935:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 2551) & 0x80000000) == 0)
        goto LABEL_1932;
LABEL_1936:
      sub_223197FA4(v1546, *(void **)(a1 + 2528), *(_QWORD *)(a1 + 2536));
      goto LABEL_1937;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_1930;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_1935;
LABEL_1931:
  if (*(char *)(a1 + 2551) < 0)
    goto LABEL_1936;
LABEL_1932:
  *(_OWORD *)v1546 = *(_OWORD *)(a1 + 2528);
  v1547 = *(_QWORD *)(a1 + 2544);
LABEL_1937:
  v904 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2616) + 48))(*(_QWORD *)(a1 + 2616));
  v905 = atomic_load((unsigned __int8 *)&qword_2540CB4B8);
  if ((v905 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB4B8))
    goto LABEL_1938;
  v1505 = atomic_load((unsigned __int8 *)&qword_2540CB4C0);
  if ((v1505 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4C0))
  {
    v1513 = atomic_load((unsigned __int8 *)&qword_2540CB4C8);
    if ((v1513 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB4C8))
      goto LABEL_3497;
    v1522 = atomic_load((unsigned __int8 *)&qword_2540CB4D0);
    if ((v1522 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB4D0))
    {
LABEL_3591:
      if (byte_25579383F < 0)
      {
        sub_223197FA4(&xmmword_255793810, (void *)qword_255793828, unk_255793830);
      }
      else
      {
        xmmword_255793810 = *(_OWORD *)&qword_255793828;
        unk_255793820 = unk_255793838;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793810, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB4C8);
LABEL_3497:
      v1514 = byte_255793827;
      if (byte_255793827 >= 0)
        v1515 = byte_255793827;
      else
        v1515 = *((_QWORD *)&xmmword_255793810 + 1);
      v1516 = v1515 + 6;
      if (v1515 + 6 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v1516 >= 0x17)
      {
        v1518 = (v1516 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1516 | 7) != 0x17)
          v1518 = v1516 | 7;
        v1519 = v1518 + 1;
        v1520 = (char *)operator new(v1518 + 1);
        qword_255793800 = v1515 + 6;
        unk_255793808 = v1519 | 0x8000000000000000;
        qword_2557937F8 = (uint64_t)v1520;
        *(_DWORD *)v1520 = 1936617315;
        *((_WORD *)v1520 + 2) = 8308;
        v1517 = v1520 + 6;
      }
      else
      {
        qword_255793800 = 0;
        unk_255793808 = 0;
        qword_2557937F8 = 0x2074736E6F63;
        byte_25579380F = v1515 + 6;
        v1517 = (char *)&qword_2557937F8 + 6;
        if (!v1515)
        {
LABEL_3512:
          v1517[v1515] = 0;
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557937F8, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB4C0);
          goto LABEL_3455;
        }
      }
      if (v1514 >= 0)
        v1521 = &xmmword_255793810;
      else
        v1521 = (__int128 *)xmmword_255793810;
      memmove(v1517, v1521, v1515);
      goto LABEL_3512;
    }
    v1523 = atomic_load((unsigned __int8 *)&qword_2540CB4F0);
    if ((v1523 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4F0))
    {
      sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::frame::MappedStateBundle>]", &qword_255793888);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793888, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB4F0);
    }
    v1524 = atomic_load((unsigned __int8 *)&qword_2540CB4F8);
    if ((v1524 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB4F8))
    {
LABEL_3548:
      v1535 = atomic_load((unsigned __int8 *)&qword_2540CB500);
      if ((v1535 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB500))
      {
        if (byte_2557938B7 < 0)
        {
          sub_223197FA4(__s, (void *)xmmword_2557938A0, *((unint64_t *)&xmmword_2557938A0 + 1));
        }
        else
        {
          *(_OWORD *)__s = xmmword_2557938A0;
          *(_QWORD *)&v1549 = unk_2557938B0;
        }
        sub_22456D060((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2557938B8);
        if (SBYTE7(v1549) < 0)
          operator delete(__s[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557938B8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB500);
      }
      if (byte_2557938CF < 0)
      {
        sub_223197FA4(v1554, (void *)xmmword_2557938B8, *((unint64_t *)&xmmword_2557938B8 + 1));
      }
      else
      {
        *(_OWORD *)v1554 = xmmword_2557938B8;
        v1555 = unk_2557938C8;
      }
      v1536 = atomic_load((unsigned __int8 *)&qword_2540CB4D8);
      if ((v1536 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4D8))
      {
        v1537 = atomic_load((unsigned __int8 *)&qword_2540CB4E0);
        if ((v1537 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4E0))
        {
          sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::frame::MappedStateBundle]", &xmmword_255793858);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793858, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB4E0);
        }
        v1538 = atomic_load((unsigned __int8 *)&qword_2540CB4E8);
        if ((v1538 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4E8))
        {
          if (byte_25579386F < 0)
          {
            sub_223197FA4(__s, (void *)xmmword_255793858, *((unint64_t *)&xmmword_255793858 + 1));
          }
          else
          {
            *(_OWORD *)__s = xmmword_255793858;
            *(_QWORD *)&v1549 = unk_255793868;
          }
          sub_22456D060((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_255793870);
          if (SBYTE7(v1549) < 0)
            operator delete(__s[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793870, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB4E8);
        }
        if (byte_255793887 < 0)
        {
          sub_223197FA4(&xmmword_255793840, (void *)xmmword_255793870, *((unint64_t *)&xmmword_255793870 + 1));
        }
        else
        {
          xmmword_255793840 = xmmword_255793870;
          qword_255793850 = unk_255793880;
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793840, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB4D8);
      }
      if (SHIBYTE(qword_255793850) < 0)
      {
        sub_223197FA4(&v1558, (void *)xmmword_255793840, *((unint64_t *)&xmmword_255793840 + 1));
      }
      else
      {
        v1558 = xmmword_255793840;
        v1559 = qword_255793850;
      }
      sub_22319BD1C(&__dst, (uint64_t)&v1558, 1uLL);
      sub_2245730F4((char *)v1554, (uint64_t *)&__dst, (std::string *)&qword_255793828, v1539, v1540);
      v1541 = __dst;
      if ((_QWORD)__dst)
      {
        v1542 = *((_QWORD *)&__dst + 1);
        v1543 = (void *)__dst;
        if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
        {
          do
          {
            if (*(char *)(v1542 - 1) < 0)
              operator delete(*(void **)(v1542 - 24));
            v1542 -= 24;
          }
          while (v1542 != v1541);
          v1543 = (void *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v1541;
        operator delete(v1543);
      }
      if (SHIBYTE(v1559) < 0)
        operator delete((void *)v1558);
      if (SHIBYTE(v1555) < 0)
        operator delete(v1554[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793828, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB4D0);
      goto LABEL_3591;
    }
    if (byte_25579389F >= 0)
      v1525 = byte_25579389F;
    else
      v1525 = unk_255793890;
    if (byte_25579389F >= 0)
      v1526 = &qword_255793888;
    else
      v1526 = (uint64_t *)qword_255793888;
    v1527 = (char *)v1526 + v1525;
    if ((uint64_t)v1525 >= 1)
    {
      v1528 = v1525;
      v1529 = v1526;
      do
      {
        v1530 = memchr(v1529, 60, v1528);
        if (!v1530)
          break;
        if (*v1530 == 60)
          goto LABEL_3533;
        v1529 = (uint64_t *)(v1530 + 1);
        v1528 = v1527 - (_BYTE *)v1529;
      }
      while (v1527 - (_BYTE *)v1529 > 0);
    }
    v1530 = (char *)v1526 + v1525;
LABEL_3533:
    v1531 = v1530 - (_BYTE *)v1526;
    if (v1530 == v1527)
      v1531 = -1;
    if (v1525 >= v1531)
      v1525 = v1531;
    if (v1525 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v1525 >= 0x17)
    {
      v1533 = (v1525 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1525 | 7) != 0x17)
        v1533 = v1525 | 7;
      v1534 = v1533 + 1;
      v1532 = (__int128 *)operator new(v1533 + 1);
      *((_QWORD *)&xmmword_2557938A0 + 1) = v1525;
      unk_2557938B0 = v1534 | 0x8000000000000000;
      *(_QWORD *)&xmmword_2557938A0 = v1532;
    }
    else
    {
      byte_2557938B7 = v1525;
      v1532 = &xmmword_2557938A0;
      if (!v1525)
        goto LABEL_3547;
    }
    memmove(v1532, v1526, v1525);
LABEL_3547:
    *((_BYTE *)v1532 + v1525) = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557938A0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB4F8);
    goto LABEL_3548;
  }
LABEL_3455:
  v1506 = byte_25579380F;
  if (byte_25579380F >= 0)
    v1507 = byte_25579380F;
  else
    v1507 = qword_255793800;
  v1508 = v1507 + 1;
  if (v1507 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1508 >= 0x17)
  {
    v1510 = (v1508 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1508 | 7) != 0x17)
      v1510 = v1508 | 7;
    v1511 = v1510 + 1;
    v1509 = (__int128 *)operator new(v1510 + 1);
    *((_QWORD *)&xmmword_2557937E0 + 1) = v1507 + 1;
    unk_2557937F0 = v1511 | 0x8000000000000000;
    *(_QWORD *)&xmmword_2557937E0 = v1509;
    goto LABEL_3490;
  }
  v1509 = &xmmword_2557937E0;
  unk_2557937F0 = 0;
  xmmword_2557937E0 = 0uLL;
  byte_2557937F7 = v1507 + 1;
  if (v1507)
  {
LABEL_3490:
    if (v1506 >= 0)
      v1512 = &qword_2557937F8;
    else
      v1512 = (uint64_t *)qword_2557937F8;
    memmove(v1509, v1512, v1507);
  }
  *(_WORD *)((char *)v1509 + v1507) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557937E0, &dword_22314D000);
  __cxa_guard_release(&qword_2540CB4B8);
LABEL_1938:
  if (byte_2557937F7 < 0)
  {
    sub_223197FA4(v1544, (void *)xmmword_2557937E0, *((unint64_t *)&xmmword_2557937E0 + 1));
  }
  else
  {
    *(_OWORD *)v1544 = xmmword_2557937E0;
    v1545 = unk_2557937F0;
  }
  v906 = HIBYTE(v1545);
  if (v1545 >= 0)
  {
    v907 = v1544;
  }
  else
  {
    v906 = (uint64_t)v1544[1];
    v907 = (void **)v1544[0];
  }
  if (v906 >= 4)
  {
    v908 = (char *)v907 + v906;
    v909 = v907;
    do
    {
      v910 = (char *)memchr(v909, 118, v906 - 3);
      if (!v910)
        break;
      if (*(_DWORD *)v910 == 1684631414)
      {
        if (v910 == v908 || v910 - (char *)v907 == -1)
          break;
        v911 = *a2;
        __s[0] = (void *)v904;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1547) < 0)
        {
          sub_223197FA4(&v1549, v1546[0], (unint64_t)v1546[1]);
        }
        else
        {
          v1549 = *(_OWORD *)v1546;
          v1550 = v1547;
        }
        if (*(char *)(a1 + 2575) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2552), *(_QWORD *)(a1 + 2560));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2552);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2568);
        }
        sub_2236405CC();
        if (byte_2557938E7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_2557938D0, *((unint64_t *)&xmmword_2557938D0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_2557938D0;
          v1553 = unk_2557938E0;
        }
        v912 = *(_QWORD *)(v911 + 8);
        if (v912 < *(_QWORD *)(v911 + 16))
          goto LABEL_1964;
        goto LABEL_1965;
      }
      v909 = (void **)(v910 + 1);
      v906 = v908 - (char *)v909;
    }
    while (v908 - (char *)v909 >= 4);
  }
  v911 = *a2;
  __s[0] = (void *)v904;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1547) < 0)
  {
    sub_223197FA4(&v1549, v1546[0], (unint64_t)v1546[1]);
  }
  else
  {
    v1549 = *(_OWORD *)v1546;
    v1550 = v1547;
  }
  if (*(char *)(a1 + 2575) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2552), *(_QWORD *)(a1 + 2560));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2552);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2568);
  }
  sub_2236405CC();
  if (byte_2557938E7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_2557938D0, *((unint64_t *)&xmmword_2557938D0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_2557938D0;
    v1553 = unk_2557938E0;
  }
  v912 = *(_QWORD *)(v911 + 8);
  if (v912 >= *(_QWORD *)(v911 + 16))
  {
LABEL_1965:
    v917 = sub_2236285DC((char **)v911, (uint64_t)__s);
  }
  else
  {
LABEL_1964:
    v913 = __s[0];
    *(_DWORD *)(v912 + 8) = __s[1];
    *(_QWORD *)v912 = v913;
    v914 = v1549;
    *(_QWORD *)(v912 + 32) = v1550;
    *(_OWORD *)(v912 + 16) = v914;
    v1550 = 0;
    v1549 = 0uLL;
    v915 = *(_QWORD *)v1552;
    *(_OWORD *)(v912 + 40) = v1551;
    *(_QWORD *)(v912 + 56) = v915;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v916 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v912 + 80) = v1553;
    *(_OWORD *)(v912 + 64) = v916;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v917 = (char *)(v912 + 88);
  }
  *(_QWORD *)(v911 + 8) = v917;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_1968;
LABEL_1972:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_1969;
    goto LABEL_1973;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_1972;
LABEL_1968:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_1969;
LABEL_1973:
  operator delete((void *)v1549);
LABEL_1969:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(&__dst, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    __dst = xmmword_2540CBC48;
    v1557 = unk_2540CBC58;
  }
  v918 = HIBYTE(v1557);
  if (v1557 >= 0)
  {
    v919 = &__dst;
  }
  else
  {
    v918 = *((_QWORD *)&__dst + 1);
    v919 = (__int128 *)__dst;
  }
  if (v918 >= 18)
  {
    v920 = (char *)v919 + v918;
    v921 = v919;
    do
    {
      v922 = (char *)memchr(v921, 67, v918 - 17);
      if (!v922)
        break;
      if (*(_QWORD *)v922 == 0x456C656E6E616843
        && *((_QWORD *)v922 + 1) == 0x696F763C726F7272
        && *((_WORD *)v922 + 8) == 15972)
      {
        if (v922 != v920 && v922 - (char *)v919 != -1)
          goto LABEL_2014;
        break;
      }
      v921 = (__int128 *)(v922 + 1);
      v918 = v920 - (char *)v921;
    }
    while (v920 - (char *)v921 >= 18);
  }
  v925 = *a2;
  __s[0] = (void *)(v904 + 1);
  LODWORD(__s[1]) = 3;
  v926 = SHIBYTE(v1547);
  if (v1547 >= 0)
    v927 = HIBYTE(v1547);
  else
    v927 = (size_t)v1546[1];
  v928 = v927 + 6;
  if (v927 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v928 >= 0x17)
  {
    v930 = (v928 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v928 | 7) != 0x17)
      v930 = v928 | 7;
    v931 = v930 + 1;
    v929 = (__int128 *)operator new(v930 + 1);
    *((_QWORD *)&v1549 + 1) = v927 + 6;
    v1550 = v931 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v929;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v929 = &v1549;
    HIBYTE(v1550) = v927 + 6;
    if (!v927)
      goto LABEL_2006;
  }
  if (v926 >= 0)
    v932 = v1546;
  else
    v932 = (void **)v1546[0];
  memmove(v929, v932, v927);
LABEL_2006:
  strcpy((char *)v929 + v927, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v933 = *(_QWORD *)(v925 + 8);
  if (v933 >= *(_QWORD *)(v925 + 16))
  {
    v939 = sub_2236285DC((char **)v925, (uint64_t)__s);
    v940 = SHIBYTE(v1553);
    *(_QWORD *)(v925 + 8) = v939;
    if (v940 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2013;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2013;
    }
LABEL_2008:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2009;
    goto LABEL_2014;
  }
  v934 = __s[0];
  *(_DWORD *)(v933 + 8) = __s[1];
  *(_QWORD *)v933 = v934;
  v935 = v1549;
  *(_QWORD *)(v933 + 32) = v1550;
  *(_OWORD *)(v933 + 16) = v935;
  v1550 = 0;
  v1549 = 0uLL;
  v936 = *(_QWORD *)v1552;
  *(_OWORD *)(v933 + 40) = v1551;
  *(_QWORD *)(v933 + 56) = v936;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v937 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v933 + 80) = v1553;
  *(_OWORD *)(v933 + 64) = v937;
  *(_QWORD *)(v925 + 8) = v933 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2008;
LABEL_2013:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2009:
    operator delete((void *)v1549);
    v938 = *(std::__shared_weak_count **)(a1 + 2656);
    if (!v938)
      goto LABEL_2018;
    goto LABEL_2015;
  }
LABEL_2014:
  v938 = *(std::__shared_weak_count **)(a1 + 2656);
  if (!v938)
  {
LABEL_2018:
    v1558 = 0uLL;
    v1559 = 0;
    v944 = 0;
    goto LABEL_2035;
  }
LABEL_2015:
  v941 = std::__shared_weak_count::lock(v938);
  if (!v941)
    goto LABEL_2018;
  v942 = v941;
  v943 = *(_QWORD *)(a1 + 2648);
  if (v943)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v943 + 24))(&v1558);
  }
  else
  {
    v1558 = 0uLL;
    v1559 = 0;
  }
  v945 = (unint64_t *)&v942->__shared_owners_;
  do
    v946 = __ldaxr(v945);
  while (__stlxr(v946 - 1, v945));
  if (v946)
  {
    v947 = (void **)*((_QWORD *)&v1558 + 1);
    v944 = (void **)v1558;
    if ((_QWORD)v1558 == *((_QWORD *)&v1558 + 1))
      goto LABEL_2035;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v942->__on_zero_shared)(v942);
    std::__shared_weak_count::__release_weak(v942);
    v947 = (void **)*((_QWORD *)&v1558 + 1);
    v944 = (void **)v1558;
    if ((_QWORD)v1558 == *((_QWORD *)&v1558 + 1))
      goto LABEL_2035;
  }
  do
  {
    v948 = a2[1];
    __s[0] = (void *)v904;
    __s[1] = *v944;
    v1550 = 0;
    v1549 = 0uLL;
    v949 = *(_QWORD *)(v948 + 8);
    if (v949 < *(_QWORD *)(v948 + 16))
    {
      *(_OWORD *)v949 = *(_OWORD *)__s;
      *(_QWORD *)(v949 + 24) = 0;
      *(_QWORD *)(v949 + 32) = 0;
      *(_QWORD *)(v949 + 16) = 0;
      *(_QWORD *)(v948 + 8) = v949 + 40;
    }
    else
    {
      v950 = sub_223628FA4((void **)v948, (uint64_t)__s);
      v951 = SHIBYTE(v1550);
      *(_QWORD *)(v948 + 8) = v950;
      if (v951 < 0)
        operator delete((void *)v1549);
    }
    ++v944;
  }
  while (v944 != v947);
  v944 = (void **)v1558;
LABEL_2035:
  if (v944)
  {
    *((_QWORD *)&v1558 + 1) = v944;
    operator delete(v944);
  }
  v952 = *(std::__shared_weak_count **)(a1 + 2656);
  if (!v952 || (v953 = std::__shared_weak_count::lock(v952)) == 0)
  {
    v1558 = 0uLL;
    v1559 = 0;
    v956 = 0;
    goto LABEL_2056;
  }
  v954 = v953;
  v955 = *(_QWORD *)(a1 + 2648);
  if (v955)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v955 + 32))(&v1558);
  }
  else
  {
    v1558 = 0uLL;
    v1559 = 0;
  }
  v957 = (unint64_t *)&v954->__shared_owners_;
  do
    v958 = __ldaxr(v957);
  while (__stlxr(v958 - 1, v957));
  if (v958)
  {
    v959 = (void **)*((_QWORD *)&v1558 + 1);
    v956 = (void **)v1558;
    if ((_QWORD)v1558 == *((_QWORD *)&v1558 + 1))
      goto LABEL_2056;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
    std::__shared_weak_count::__release_weak(v954);
    v959 = (void **)*((_QWORD *)&v1558 + 1);
    v956 = (void **)v1558;
    if ((_QWORD)v1558 == *((_QWORD *)&v1558 + 1))
      goto LABEL_2056;
  }
  v960 = (void *)(v904 + 1);
  do
  {
    v961 = a2[1];
    __s[0] = v960;
    __s[1] = *v956;
    v1550 = 0;
    v1549 = 0uLL;
    v962 = *(_QWORD *)(v961 + 8);
    if (v962 < *(_QWORD *)(v961 + 16))
    {
      *(_OWORD *)v962 = *(_OWORD *)__s;
      *(_QWORD *)(v962 + 24) = 0;
      *(_QWORD *)(v962 + 32) = 0;
      *(_QWORD *)(v962 + 16) = 0;
      *(_QWORD *)(v961 + 8) = v962 + 40;
    }
    else
    {
      v963 = sub_223628FA4((void **)v961, (uint64_t)__s);
      v964 = SHIBYTE(v1550);
      *(_QWORD *)(v961 + 8) = v963;
      if (v964 < 0)
        operator delete((void *)v1549);
    }
    ++v956;
  }
  while (v956 != v959);
  v956 = (void **)v1558;
LABEL_2056:
  if (v956)
  {
    *((_QWORD *)&v1558 + 1) = v956;
    operator delete(v956);
  }
  if (SHIBYTE(v1557) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v1545) & 0x80000000) == 0)
    {
LABEL_2060:
      if ((SHIBYTE(v1547) & 0x80000000) == 0)
        goto LABEL_2061;
LABEL_2065:
      operator delete(v1546[0]);
      if ((*(char *)(a1 + 2719) & 0x80000000) == 0)
        goto LABEL_2062;
      goto LABEL_2066;
    }
  }
  else if ((SHIBYTE(v1545) & 0x80000000) == 0)
  {
    goto LABEL_2060;
  }
  operator delete(v1544[0]);
  if (SHIBYTE(v1547) < 0)
    goto LABEL_2065;
LABEL_2061:
  if ((*(char *)(a1 + 2719) & 0x80000000) == 0)
  {
LABEL_2062:
    __dst = *(_OWORD *)(a1 + 2696);
    v1557 = *(_QWORD *)(a1 + 2712);
    goto LABEL_2067;
  }
LABEL_2066:
  sub_223197FA4(&__dst, *(void **)(a1 + 2696), *(_QWORD *)(a1 + 2704));
LABEL_2067:
  v965 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2784) + 48))(*(_QWORD *)(a1 + 2784));
  sub_223640790();
  if (byte_25579392F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793918, *((unint64_t *)&xmmword_255793918 + 1));
  }
  else
  {
    v1558 = xmmword_255793918;
    v1559 = unk_255793928;
  }
  v966 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v967 = &v1558;
  }
  else
  {
    v966 = *((_QWORD *)&v1558 + 1);
    v967 = (__int128 *)v1558;
  }
  if (v966 >= 4)
  {
    v968 = (char *)v967 + v966;
    v969 = v967;
    do
    {
      v970 = (char *)memchr(v969, 118, v966 - 3);
      if (!v970)
        break;
      if (*(_DWORD *)v970 == 1684631414)
      {
        if (v970 == v968 || v970 - (char *)v967 == -1)
          break;
        v971 = *a2;
        __s[0] = (void *)v965;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 2743) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2720), *(_QWORD *)(a1 + 2728));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2720);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2736);
        }
        sub_2236410B4();
        if (byte_255793A1F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793A08, *((unint64_t *)&xmmword_255793A08 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793A08;
          v1553 = unk_255793A18;
        }
        v972 = *(_QWORD *)(v971 + 8);
        if (v972 < *(_QWORD *)(v971 + 16))
          goto LABEL_2093;
        goto LABEL_2094;
      }
      v969 = (__int128 *)(v970 + 1);
      v966 = v968 - (char *)v969;
    }
    while (v968 - (char *)v969 >= 4);
  }
  v971 = *a2;
  __s[0] = (void *)v965;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 2743) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2720), *(_QWORD *)(a1 + 2728));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2720);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2736);
  }
  sub_2236410B4();
  if (byte_255793A1F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793A08, *((unint64_t *)&xmmword_255793A08 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793A08;
    v1553 = unk_255793A18;
  }
  v972 = *(_QWORD *)(v971 + 8);
  if (v972 >= *(_QWORD *)(v971 + 16))
  {
LABEL_2094:
    v977 = sub_2236285DC((char **)v971, (uint64_t)__s);
  }
  else
  {
LABEL_2093:
    v973 = __s[0];
    *(_DWORD *)(v972 + 8) = __s[1];
    *(_QWORD *)v972 = v973;
    v974 = v1549;
    *(_QWORD *)(v972 + 32) = v1550;
    *(_OWORD *)(v972 + 16) = v974;
    v1550 = 0;
    v1549 = 0uLL;
    v975 = *(_QWORD *)v1552;
    *(_OWORD *)(v972 + 40) = v1551;
    *(_QWORD *)(v972 + 56) = v975;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v976 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v972 + 80) = v1553;
    *(_OWORD *)(v972 + 64) = v976;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v977 = (char *)(v972 + 88);
  }
  *(_QWORD *)(v971 + 8) = v977;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2097;
LABEL_2101:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2098;
    goto LABEL_2102;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2101;
LABEL_2097:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2098;
LABEL_2102:
  operator delete((void *)v1549);
LABEL_2098:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v978 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v979 = v1554;
  }
  else
  {
    v978 = (uint64_t)v1554[1];
    v979 = (void **)v1554[0];
  }
  if (v978 >= 18)
  {
    v980 = (char *)v979 + v978;
    v981 = v979;
    do
    {
      v982 = (char *)memchr(v981, 67, v978 - 17);
      if (!v982)
        break;
      if (*(_QWORD *)v982 == 0x456C656E6E616843
        && *((_QWORD *)v982 + 1) == 0x696F763C726F7272
        && *((_WORD *)v982 + 8) == 15972)
      {
        if (v982 != v980 && v982 - (char *)v979 != -1)
          goto LABEL_2143;
        break;
      }
      v981 = (void **)(v982 + 1);
      v978 = v980 - (char *)v981;
    }
    while (v980 - (char *)v981 >= 18);
  }
  v985 = *a2;
  __s[0] = (void *)(v965 + 1);
  LODWORD(__s[1]) = 3;
  v986 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v987 = HIBYTE(v1557);
  else
    v987 = *((_QWORD *)&__dst + 1);
  v988 = v987 + 6;
  if (v987 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v988 >= 0x17)
  {
    v990 = (v988 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v988 | 7) != 0x17)
      v990 = v988 | 7;
    v991 = v990 + 1;
    v989 = (__int128 *)operator new(v990 + 1);
    *((_QWORD *)&v1549 + 1) = v987 + 6;
    v1550 = v991 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v989;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v989 = &v1549;
    HIBYTE(v1550) = v987 + 6;
    if (!v987)
      goto LABEL_2135;
  }
  if (v986 >= 0)
    v992 = &__dst;
  else
    v992 = (__int128 *)__dst;
  memmove(v989, v992, v987);
LABEL_2135:
  strcpy((char *)v989 + v987, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v993 = *(_QWORD *)(v985 + 8);
  if (v993 >= *(_QWORD *)(v985 + 16))
  {
    v999 = sub_2236285DC((char **)v985, (uint64_t)__s);
    v1000 = SHIBYTE(v1553);
    *(_QWORD *)(v985 + 8) = v999;
    if (v1000 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2142;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2142;
    }
LABEL_2137:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2138;
    goto LABEL_2143;
  }
  v994 = __s[0];
  *(_DWORD *)(v993 + 8) = __s[1];
  *(_QWORD *)v993 = v994;
  v995 = v1549;
  *(_QWORD *)(v993 + 32) = v1550;
  *(_OWORD *)(v993 + 16) = v995;
  v1550 = 0;
  v1549 = 0uLL;
  v996 = *(_QWORD *)v1552;
  *(_OWORD *)(v993 + 40) = v1551;
  *(_QWORD *)(v993 + 56) = v996;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v997 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v993 + 80) = v1553;
  *(_OWORD *)(v993 + 64) = v997;
  *(_QWORD *)(v985 + 8) = v993 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2137;
LABEL_2142:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2138:
    operator delete((void *)v1549);
    v998 = *(std::__shared_weak_count **)(a1 + 2824);
    if (!v998)
      goto LABEL_2147;
    goto LABEL_2144;
  }
LABEL_2143:
  v998 = *(std::__shared_weak_count **)(a1 + 2824);
  if (!v998)
  {
LABEL_2147:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1004 = 0;
    goto LABEL_2164;
  }
LABEL_2144:
  v1001 = std::__shared_weak_count::lock(v998);
  if (!v1001)
    goto LABEL_2147;
  v1002 = v1001;
  v1003 = *(_QWORD *)(a1 + 2816);
  if (v1003)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1003 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1005 = (unint64_t *)&v1002->__shared_owners_;
  do
    v1006 = __ldaxr(v1005);
  while (__stlxr(v1006 - 1, v1005));
  if (v1006)
  {
    v1004 = (void **)v1546[0];
    v1007 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2164;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1002->__on_zero_shared)(v1002);
    std::__shared_weak_count::__release_weak(v1002);
    v1004 = (void **)v1546[0];
    v1007 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2164;
  }
  do
  {
    v1008 = a2[1];
    __s[0] = (void *)v965;
    __s[1] = *v1004;
    v1550 = 0;
    v1549 = 0uLL;
    v1009 = *(_QWORD *)(v1008 + 8);
    if (v1009 < *(_QWORD *)(v1008 + 16))
    {
      *(_OWORD *)v1009 = *(_OWORD *)__s;
      *(_QWORD *)(v1009 + 24) = 0;
      *(_QWORD *)(v1009 + 32) = 0;
      *(_QWORD *)(v1009 + 16) = 0;
      *(_QWORD *)(v1008 + 8) = v1009 + 40;
    }
    else
    {
      v1010 = sub_223628FA4((void **)v1008, (uint64_t)__s);
      v1011 = SHIBYTE(v1550);
      *(_QWORD *)(v1008 + 8) = v1010;
      if (v1011 < 0)
        operator delete((void *)v1549);
    }
    ++v1004;
  }
  while (v1004 != v1007);
  v1004 = (void **)v1546[0];
LABEL_2164:
  if (v1004)
  {
    v1546[1] = v1004;
    operator delete(v1004);
  }
  v1012 = *(std::__shared_weak_count **)(a1 + 2824);
  if (!v1012 || (v1013 = std::__shared_weak_count::lock(v1012)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1016 = 0;
    goto LABEL_2185;
  }
  v1014 = v1013;
  v1015 = *(_QWORD *)(a1 + 2816);
  if (v1015)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1015 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1017 = (unint64_t *)&v1014->__shared_owners_;
  do
    v1018 = __ldaxr(v1017);
  while (__stlxr(v1018 - 1, v1017));
  if (v1018)
  {
    v1016 = (void **)v1546[0];
    v1019 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2185;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1014->__on_zero_shared)(v1014);
    std::__shared_weak_count::__release_weak(v1014);
    v1016 = (void **)v1546[0];
    v1019 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2185;
  }
  v1020 = (void *)(v965 + 1);
  do
  {
    v1021 = a2[1];
    __s[0] = v1020;
    __s[1] = *v1016;
    v1550 = 0;
    v1549 = 0uLL;
    v1022 = *(_QWORD *)(v1021 + 8);
    if (v1022 < *(_QWORD *)(v1021 + 16))
    {
      *(_OWORD *)v1022 = *(_OWORD *)__s;
      *(_QWORD *)(v1022 + 24) = 0;
      *(_QWORD *)(v1022 + 32) = 0;
      *(_QWORD *)(v1022 + 16) = 0;
      *(_QWORD *)(v1021 + 8) = v1022 + 40;
    }
    else
    {
      v1023 = sub_223628FA4((void **)v1021, (uint64_t)__s);
      v1024 = SHIBYTE(v1550);
      *(_QWORD *)(v1021 + 8) = v1023;
      if (v1024 < 0)
        operator delete((void *)v1549);
    }
    ++v1016;
  }
  while (v1016 != v1019);
  v1016 = (void **)v1546[0];
LABEL_2185:
  if (v1016)
  {
    v1546[1] = v1016;
    operator delete(v1016);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2189:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2190;
LABEL_2194:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 2887) & 0x80000000) == 0)
        goto LABEL_2191;
      goto LABEL_2195;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2189;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2194;
LABEL_2190:
  if ((*(char *)(a1 + 2887) & 0x80000000) == 0)
  {
LABEL_2191:
    __dst = *(_OWORD *)(a1 + 2864);
    v1557 = *(_QWORD *)(a1 + 2880);
    goto LABEL_2196;
  }
LABEL_2195:
  sub_223197FA4(&__dst, *(void **)(a1 + 2864), *(_QWORD *)(a1 + 2872));
LABEL_2196:
  v1025 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2952) + 48))(*(_QWORD *)(a1 + 2952));
  sub_223640790();
  if (byte_25579392F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793918, *((unint64_t *)&xmmword_255793918 + 1));
  }
  else
  {
    v1558 = xmmword_255793918;
    v1559 = unk_255793928;
  }
  v1026 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1027 = &v1558;
  }
  else
  {
    v1026 = *((_QWORD *)&v1558 + 1);
    v1027 = (__int128 *)v1558;
  }
  if (v1026 >= 4)
  {
    v1028 = (char *)v1027 + v1026;
    v1029 = v1027;
    do
    {
      v1030 = (char *)memchr(v1029, 118, v1026 - 3);
      if (!v1030)
        break;
      if (*(_DWORD *)v1030 == 1684631414)
      {
        if (v1030 == v1028 || v1030 - (char *)v1027 == -1)
          break;
        v1031 = *a2;
        __s[0] = (void *)v1025;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 2911) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 2888), *(_QWORD *)(a1 + 2896));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 2888);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2904);
        }
        sub_223641278();
        if (byte_255793A67 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793A50, *((unint64_t *)&xmmword_255793A50 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793A50;
          v1553 = unk_255793A60;
        }
        v1032 = *(_QWORD *)(v1031 + 8);
        if (v1032 < *(_QWORD *)(v1031 + 16))
          goto LABEL_2222;
        goto LABEL_2223;
      }
      v1029 = (__int128 *)(v1030 + 1);
      v1026 = v1028 - (char *)v1029;
    }
    while (v1028 - (char *)v1029 >= 4);
  }
  v1031 = *a2;
  __s[0] = (void *)v1025;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 2911) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 2888), *(_QWORD *)(a1 + 2896));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 2888);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 2904);
  }
  sub_223641278();
  if (byte_255793A67 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793A50, *((unint64_t *)&xmmword_255793A50 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793A50;
    v1553 = unk_255793A60;
  }
  v1032 = *(_QWORD *)(v1031 + 8);
  if (v1032 >= *(_QWORD *)(v1031 + 16))
  {
LABEL_2223:
    v1037 = sub_2236285DC((char **)v1031, (uint64_t)__s);
  }
  else
  {
LABEL_2222:
    v1033 = __s[0];
    *(_DWORD *)(v1032 + 8) = __s[1];
    *(_QWORD *)v1032 = v1033;
    v1034 = v1549;
    *(_QWORD *)(v1032 + 32) = v1550;
    *(_OWORD *)(v1032 + 16) = v1034;
    v1550 = 0;
    v1549 = 0uLL;
    v1035 = *(_QWORD *)v1552;
    *(_OWORD *)(v1032 + 40) = v1551;
    *(_QWORD *)(v1032 + 56) = v1035;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1036 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1032 + 80) = v1553;
    *(_OWORD *)(v1032 + 64) = v1036;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1037 = (char *)(v1032 + 88);
  }
  *(_QWORD *)(v1031 + 8) = v1037;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2226;
LABEL_2230:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2227;
    goto LABEL_2231;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2230;
LABEL_2226:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2227;
LABEL_2231:
  operator delete((void *)v1549);
LABEL_2227:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1038 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1039 = v1554;
  }
  else
  {
    v1038 = (uint64_t)v1554[1];
    v1039 = (void **)v1554[0];
  }
  if (v1038 >= 18)
  {
    v1040 = (char *)v1039 + v1038;
    v1041 = v1039;
    do
    {
      v1042 = (char *)memchr(v1041, 67, v1038 - 17);
      if (!v1042)
        break;
      if (*(_QWORD *)v1042 == 0x456C656E6E616843
        && *((_QWORD *)v1042 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1042 + 8) == 15972)
      {
        if (v1042 != v1040 && v1042 - (char *)v1039 != -1)
          goto LABEL_2272;
        break;
      }
      v1041 = (void **)(v1042 + 1);
      v1038 = v1040 - (char *)v1041;
    }
    while (v1040 - (char *)v1041 >= 18);
  }
  v1045 = *a2;
  __s[0] = (void *)(v1025 + 1);
  LODWORD(__s[1]) = 3;
  v1046 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1047 = HIBYTE(v1557);
  else
    v1047 = *((_QWORD *)&__dst + 1);
  v1048 = v1047 + 6;
  if (v1047 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1048 >= 0x17)
  {
    v1050 = (v1048 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1048 | 7) != 0x17)
      v1050 = v1048 | 7;
    v1051 = v1050 + 1;
    v1049 = (__int128 *)operator new(v1050 + 1);
    *((_QWORD *)&v1549 + 1) = v1047 + 6;
    v1550 = v1051 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1049;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1049 = &v1549;
    HIBYTE(v1550) = v1047 + 6;
    if (!v1047)
      goto LABEL_2264;
  }
  if (v1046 >= 0)
    v1052 = &__dst;
  else
    v1052 = (__int128 *)__dst;
  memmove(v1049, v1052, v1047);
LABEL_2264:
  strcpy((char *)v1049 + v1047, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1053 = *(_QWORD *)(v1045 + 8);
  if (v1053 >= *(_QWORD *)(v1045 + 16))
  {
    v1059 = sub_2236285DC((char **)v1045, (uint64_t)__s);
    v1060 = SHIBYTE(v1553);
    *(_QWORD *)(v1045 + 8) = v1059;
    if (v1060 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2271;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2271;
    }
LABEL_2266:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2267;
    goto LABEL_2272;
  }
  v1054 = __s[0];
  *(_DWORD *)(v1053 + 8) = __s[1];
  *(_QWORD *)v1053 = v1054;
  v1055 = v1549;
  *(_QWORD *)(v1053 + 32) = v1550;
  *(_OWORD *)(v1053 + 16) = v1055;
  v1550 = 0;
  v1549 = 0uLL;
  v1056 = *(_QWORD *)v1552;
  *(_OWORD *)(v1053 + 40) = v1551;
  *(_QWORD *)(v1053 + 56) = v1056;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1057 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1053 + 80) = v1553;
  *(_OWORD *)(v1053 + 64) = v1057;
  *(_QWORD *)(v1045 + 8) = v1053 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2266;
LABEL_2271:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2267:
    operator delete((void *)v1549);
    v1058 = *(std::__shared_weak_count **)(a1 + 2992);
    if (!v1058)
      goto LABEL_2276;
    goto LABEL_2273;
  }
LABEL_2272:
  v1058 = *(std::__shared_weak_count **)(a1 + 2992);
  if (!v1058)
  {
LABEL_2276:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1064 = 0;
    goto LABEL_2293;
  }
LABEL_2273:
  v1061 = std::__shared_weak_count::lock(v1058);
  if (!v1061)
    goto LABEL_2276;
  v1062 = v1061;
  v1063 = *(_QWORD *)(a1 + 2984);
  if (v1063)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1063 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1065 = (unint64_t *)&v1062->__shared_owners_;
  do
    v1066 = __ldaxr(v1065);
  while (__stlxr(v1066 - 1, v1065));
  if (v1066)
  {
    v1064 = (void **)v1546[0];
    v1067 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2293;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1062->__on_zero_shared)(v1062);
    std::__shared_weak_count::__release_weak(v1062);
    v1064 = (void **)v1546[0];
    v1067 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2293;
  }
  do
  {
    v1068 = a2[1];
    __s[0] = (void *)v1025;
    __s[1] = *v1064;
    v1550 = 0;
    v1549 = 0uLL;
    v1069 = *(_QWORD *)(v1068 + 8);
    if (v1069 < *(_QWORD *)(v1068 + 16))
    {
      *(_OWORD *)v1069 = *(_OWORD *)__s;
      *(_QWORD *)(v1069 + 24) = 0;
      *(_QWORD *)(v1069 + 32) = 0;
      *(_QWORD *)(v1069 + 16) = 0;
      *(_QWORD *)(v1068 + 8) = v1069 + 40;
    }
    else
    {
      v1070 = sub_223628FA4((void **)v1068, (uint64_t)__s);
      v1071 = SHIBYTE(v1550);
      *(_QWORD *)(v1068 + 8) = v1070;
      if (v1071 < 0)
        operator delete((void *)v1549);
    }
    ++v1064;
  }
  while (v1064 != v1067);
  v1064 = (void **)v1546[0];
LABEL_2293:
  if (v1064)
  {
    v1546[1] = v1064;
    operator delete(v1064);
  }
  v1072 = *(std::__shared_weak_count **)(a1 + 2992);
  if (!v1072 || (v1073 = std::__shared_weak_count::lock(v1072)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1076 = 0;
    goto LABEL_2314;
  }
  v1074 = v1073;
  v1075 = *(_QWORD *)(a1 + 2984);
  if (v1075)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1075 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1077 = (unint64_t *)&v1074->__shared_owners_;
  do
    v1078 = __ldaxr(v1077);
  while (__stlxr(v1078 - 1, v1077));
  if (v1078)
  {
    v1076 = (void **)v1546[0];
    v1079 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2314;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1074->__on_zero_shared)(v1074);
    std::__shared_weak_count::__release_weak(v1074);
    v1076 = (void **)v1546[0];
    v1079 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2314;
  }
  v1080 = (void *)(v1025 + 1);
  do
  {
    v1081 = a2[1];
    __s[0] = v1080;
    __s[1] = *v1076;
    v1550 = 0;
    v1549 = 0uLL;
    v1082 = *(_QWORD *)(v1081 + 8);
    if (v1082 < *(_QWORD *)(v1081 + 16))
    {
      *(_OWORD *)v1082 = *(_OWORD *)__s;
      *(_QWORD *)(v1082 + 24) = 0;
      *(_QWORD *)(v1082 + 32) = 0;
      *(_QWORD *)(v1082 + 16) = 0;
      *(_QWORD *)(v1081 + 8) = v1082 + 40;
    }
    else
    {
      v1083 = sub_223628FA4((void **)v1081, (uint64_t)__s);
      v1084 = SHIBYTE(v1550);
      *(_QWORD *)(v1081 + 8) = v1083;
      if (v1084 < 0)
        operator delete((void *)v1549);
    }
    ++v1076;
  }
  while (v1076 != v1079);
  v1076 = (void **)v1546[0];
LABEL_2314:
  if (v1076)
  {
    v1546[1] = v1076;
    operator delete(v1076);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2318:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2319;
LABEL_2323:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3055) & 0x80000000) == 0)
        goto LABEL_2320;
      goto LABEL_2324;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2318;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2323;
LABEL_2319:
  if ((*(char *)(a1 + 3055) & 0x80000000) == 0)
  {
LABEL_2320:
    __dst = *(_OWORD *)(a1 + 3032);
    v1557 = *(_QWORD *)(a1 + 3048);
    goto LABEL_2325;
  }
LABEL_2324:
  sub_223197FA4(&__dst, *(void **)(a1 + 3032), *(_QWORD *)(a1 + 3040));
LABEL_2325:
  v1085 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3120) + 48))(*(_QWORD *)(a1 + 3120));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v1086 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1087 = &v1558;
  }
  else
  {
    v1086 = *((_QWORD *)&v1558 + 1);
    v1087 = (__int128 *)v1558;
  }
  if (v1086 >= 4)
  {
    v1088 = (char *)v1087 + v1086;
    v1089 = v1087;
    do
    {
      v1090 = (char *)memchr(v1089, 118, v1086 - 3);
      if (!v1090)
        break;
      if (*(_DWORD *)v1090 == 1684631414)
      {
        if (v1090 == v1088 || v1090 - (char *)v1087 == -1)
          break;
        v1091 = *a2;
        __s[0] = (void *)v1085;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3079) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3056), *(_QWORD *)(a1 + 3064));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3056);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3072);
        }
        sub_22364143C();
        if (byte_255793AAF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793A98, *((unint64_t *)&xmmword_255793A98 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793A98;
          v1553 = unk_255793AA8;
        }
        v1092 = *(_QWORD *)(v1091 + 8);
        if (v1092 < *(_QWORD *)(v1091 + 16))
          goto LABEL_2351;
        goto LABEL_2352;
      }
      v1089 = (__int128 *)(v1090 + 1);
      v1086 = v1088 - (char *)v1089;
    }
    while (v1088 - (char *)v1089 >= 4);
  }
  v1091 = *a2;
  __s[0] = (void *)v1085;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3079) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3056), *(_QWORD *)(a1 + 3064));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3056);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3072);
  }
  sub_22364143C();
  if (byte_255793AAF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793A98, *((unint64_t *)&xmmword_255793A98 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793A98;
    v1553 = unk_255793AA8;
  }
  v1092 = *(_QWORD *)(v1091 + 8);
  if (v1092 >= *(_QWORD *)(v1091 + 16))
  {
LABEL_2352:
    v1097 = sub_2236285DC((char **)v1091, (uint64_t)__s);
  }
  else
  {
LABEL_2351:
    v1093 = __s[0];
    *(_DWORD *)(v1092 + 8) = __s[1];
    *(_QWORD *)v1092 = v1093;
    v1094 = v1549;
    *(_QWORD *)(v1092 + 32) = v1550;
    *(_OWORD *)(v1092 + 16) = v1094;
    v1550 = 0;
    v1549 = 0uLL;
    v1095 = *(_QWORD *)v1552;
    *(_OWORD *)(v1092 + 40) = v1551;
    *(_QWORD *)(v1092 + 56) = v1095;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1096 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1092 + 80) = v1553;
    *(_OWORD *)(v1092 + 64) = v1096;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1097 = (char *)(v1092 + 88);
  }
  *(_QWORD *)(v1091 + 8) = v1097;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2355;
LABEL_2359:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2356;
    goto LABEL_2360;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2359;
LABEL_2355:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2356;
LABEL_2360:
  operator delete((void *)v1549);
LABEL_2356:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1098 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1099 = v1554;
  }
  else
  {
    v1098 = (uint64_t)v1554[1];
    v1099 = (void **)v1554[0];
  }
  if (v1098 >= 18)
  {
    v1100 = (char *)v1099 + v1098;
    v1101 = v1099;
    do
    {
      v1102 = (char *)memchr(v1101, 67, v1098 - 17);
      if (!v1102)
        break;
      if (*(_QWORD *)v1102 == 0x456C656E6E616843
        && *((_QWORD *)v1102 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1102 + 8) == 15972)
      {
        if (v1102 != v1100 && v1102 - (char *)v1099 != -1)
          goto LABEL_2401;
        break;
      }
      v1101 = (void **)(v1102 + 1);
      v1098 = v1100 - (char *)v1101;
    }
    while (v1100 - (char *)v1101 >= 18);
  }
  v1105 = *a2;
  __s[0] = (void *)(v1085 + 1);
  LODWORD(__s[1]) = 3;
  v1106 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1107 = HIBYTE(v1557);
  else
    v1107 = *((_QWORD *)&__dst + 1);
  v1108 = v1107 + 6;
  if (v1107 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1108 >= 0x17)
  {
    v1110 = (v1108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1108 | 7) != 0x17)
      v1110 = v1108 | 7;
    v1111 = v1110 + 1;
    v1109 = (__int128 *)operator new(v1110 + 1);
    *((_QWORD *)&v1549 + 1) = v1107 + 6;
    v1550 = v1111 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1109;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1109 = &v1549;
    HIBYTE(v1550) = v1107 + 6;
    if (!v1107)
      goto LABEL_2393;
  }
  if (v1106 >= 0)
    v1112 = &__dst;
  else
    v1112 = (__int128 *)__dst;
  memmove(v1109, v1112, v1107);
LABEL_2393:
  strcpy((char *)v1109 + v1107, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1113 = *(_QWORD *)(v1105 + 8);
  if (v1113 >= *(_QWORD *)(v1105 + 16))
  {
    v1119 = sub_2236285DC((char **)v1105, (uint64_t)__s);
    v1120 = SHIBYTE(v1553);
    *(_QWORD *)(v1105 + 8) = v1119;
    if (v1120 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2400;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2400;
    }
LABEL_2395:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2396;
    goto LABEL_2401;
  }
  v1114 = __s[0];
  *(_DWORD *)(v1113 + 8) = __s[1];
  *(_QWORD *)v1113 = v1114;
  v1115 = v1549;
  *(_QWORD *)(v1113 + 32) = v1550;
  *(_OWORD *)(v1113 + 16) = v1115;
  v1550 = 0;
  v1549 = 0uLL;
  v1116 = *(_QWORD *)v1552;
  *(_OWORD *)(v1113 + 40) = v1551;
  *(_QWORD *)(v1113 + 56) = v1116;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1117 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1113 + 80) = v1553;
  *(_OWORD *)(v1113 + 64) = v1117;
  *(_QWORD *)(v1105 + 8) = v1113 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2395;
LABEL_2400:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2396:
    operator delete((void *)v1549);
    v1118 = *(std::__shared_weak_count **)(a1 + 3160);
    if (!v1118)
      goto LABEL_2405;
    goto LABEL_2402;
  }
LABEL_2401:
  v1118 = *(std::__shared_weak_count **)(a1 + 3160);
  if (!v1118)
  {
LABEL_2405:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1124 = 0;
    goto LABEL_2422;
  }
LABEL_2402:
  v1121 = std::__shared_weak_count::lock(v1118);
  if (!v1121)
    goto LABEL_2405;
  v1122 = v1121;
  v1123 = *(_QWORD *)(a1 + 3152);
  if (v1123)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1123 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1125 = (unint64_t *)&v1122->__shared_owners_;
  do
    v1126 = __ldaxr(v1125);
  while (__stlxr(v1126 - 1, v1125));
  if (v1126)
  {
    v1124 = (void **)v1546[0];
    v1127 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2422;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
    std::__shared_weak_count::__release_weak(v1122);
    v1124 = (void **)v1546[0];
    v1127 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2422;
  }
  do
  {
    v1128 = a2[1];
    __s[0] = (void *)v1085;
    __s[1] = *v1124;
    v1550 = 0;
    v1549 = 0uLL;
    v1129 = *(_QWORD *)(v1128 + 8);
    if (v1129 < *(_QWORD *)(v1128 + 16))
    {
      *(_OWORD *)v1129 = *(_OWORD *)__s;
      *(_QWORD *)(v1129 + 24) = 0;
      *(_QWORD *)(v1129 + 32) = 0;
      *(_QWORD *)(v1129 + 16) = 0;
      *(_QWORD *)(v1128 + 8) = v1129 + 40;
    }
    else
    {
      v1130 = sub_223628FA4((void **)v1128, (uint64_t)__s);
      v1131 = SHIBYTE(v1550);
      *(_QWORD *)(v1128 + 8) = v1130;
      if (v1131 < 0)
        operator delete((void *)v1549);
    }
    ++v1124;
  }
  while (v1124 != v1127);
  v1124 = (void **)v1546[0];
LABEL_2422:
  if (v1124)
  {
    v1546[1] = v1124;
    operator delete(v1124);
  }
  v1132 = *(std::__shared_weak_count **)(a1 + 3160);
  if (!v1132 || (v1133 = std::__shared_weak_count::lock(v1132)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1136 = 0;
    goto LABEL_2443;
  }
  v1134 = v1133;
  v1135 = *(_QWORD *)(a1 + 3152);
  if (v1135)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1135 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1137 = (unint64_t *)&v1134->__shared_owners_;
  do
    v1138 = __ldaxr(v1137);
  while (__stlxr(v1138 - 1, v1137));
  if (v1138)
  {
    v1136 = (void **)v1546[0];
    v1139 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2443;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1134->__on_zero_shared)(v1134);
    std::__shared_weak_count::__release_weak(v1134);
    v1136 = (void **)v1546[0];
    v1139 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2443;
  }
  v1140 = (void *)(v1085 + 1);
  do
  {
    v1141 = a2[1];
    __s[0] = v1140;
    __s[1] = *v1136;
    v1550 = 0;
    v1549 = 0uLL;
    v1142 = *(_QWORD *)(v1141 + 8);
    if (v1142 < *(_QWORD *)(v1141 + 16))
    {
      *(_OWORD *)v1142 = *(_OWORD *)__s;
      *(_QWORD *)(v1142 + 24) = 0;
      *(_QWORD *)(v1142 + 32) = 0;
      *(_QWORD *)(v1142 + 16) = 0;
      *(_QWORD *)(v1141 + 8) = v1142 + 40;
    }
    else
    {
      v1143 = sub_223628FA4((void **)v1141, (uint64_t)__s);
      v1144 = SHIBYTE(v1550);
      *(_QWORD *)(v1141 + 8) = v1143;
      if (v1144 < 0)
        operator delete((void *)v1549);
    }
    ++v1136;
  }
  while (v1136 != v1139);
  v1136 = (void **)v1546[0];
LABEL_2443:
  if (v1136)
  {
    v1546[1] = v1136;
    operator delete(v1136);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2447:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2448;
LABEL_2452:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3223) & 0x80000000) == 0)
        goto LABEL_2449;
      goto LABEL_2453;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2447;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2452;
LABEL_2448:
  if ((*(char *)(a1 + 3223) & 0x80000000) == 0)
  {
LABEL_2449:
    __dst = *(_OWORD *)(a1 + 3200);
    v1557 = *(_QWORD *)(a1 + 3216);
    goto LABEL_2454;
  }
LABEL_2453:
  sub_223197FA4(&__dst, *(void **)(a1 + 3200), *(_QWORD *)(a1 + 3208));
LABEL_2454:
  v1145 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3288) + 48))(*(_QWORD *)(a1 + 3288));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v1146 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1147 = &v1558;
  }
  else
  {
    v1146 = *((_QWORD *)&v1558 + 1);
    v1147 = (__int128 *)v1558;
  }
  if (v1146 >= 4)
  {
    v1148 = (char *)v1147 + v1146;
    v1149 = v1147;
    do
    {
      v1150 = (char *)memchr(v1149, 118, v1146 - 3);
      if (!v1150)
        break;
      if (*(_DWORD *)v1150 == 1684631414)
      {
        if (v1150 == v1148 || v1150 - (char *)v1147 == -1)
          break;
        v1151 = *a2;
        __s[0] = (void *)v1145;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3247) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3224), *(_QWORD *)(a1 + 3232));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3224);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3240);
        }
        sub_223641600();
        if (byte_255793AF7 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793AE0, *((unint64_t *)&xmmword_255793AE0 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793AE0;
          v1553 = unk_255793AF0;
        }
        v1152 = *(_QWORD *)(v1151 + 8);
        if (v1152 < *(_QWORD *)(v1151 + 16))
          goto LABEL_2480;
        goto LABEL_2481;
      }
      v1149 = (__int128 *)(v1150 + 1);
      v1146 = v1148 - (char *)v1149;
    }
    while (v1148 - (char *)v1149 >= 4);
  }
  v1151 = *a2;
  __s[0] = (void *)v1145;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3247) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3224), *(_QWORD *)(a1 + 3232));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3224);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3240);
  }
  sub_223641600();
  if (byte_255793AF7 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793AE0, *((unint64_t *)&xmmword_255793AE0 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793AE0;
    v1553 = unk_255793AF0;
  }
  v1152 = *(_QWORD *)(v1151 + 8);
  if (v1152 >= *(_QWORD *)(v1151 + 16))
  {
LABEL_2481:
    v1157 = sub_2236285DC((char **)v1151, (uint64_t)__s);
  }
  else
  {
LABEL_2480:
    v1153 = __s[0];
    *(_DWORD *)(v1152 + 8) = __s[1];
    *(_QWORD *)v1152 = v1153;
    v1154 = v1549;
    *(_QWORD *)(v1152 + 32) = v1550;
    *(_OWORD *)(v1152 + 16) = v1154;
    v1550 = 0;
    v1549 = 0uLL;
    v1155 = *(_QWORD *)v1552;
    *(_OWORD *)(v1152 + 40) = v1551;
    *(_QWORD *)(v1152 + 56) = v1155;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1156 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1152 + 80) = v1553;
    *(_OWORD *)(v1152 + 64) = v1156;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1157 = (char *)(v1152 + 88);
  }
  *(_QWORD *)(v1151 + 8) = v1157;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2484;
LABEL_2488:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2485;
    goto LABEL_2489;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2488;
LABEL_2484:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2485;
LABEL_2489:
  operator delete((void *)v1549);
LABEL_2485:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1158 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1159 = v1554;
  }
  else
  {
    v1158 = (uint64_t)v1554[1];
    v1159 = (void **)v1554[0];
  }
  if (v1158 >= 18)
  {
    v1160 = (char *)v1159 + v1158;
    v1161 = v1159;
    do
    {
      v1162 = (char *)memchr(v1161, 67, v1158 - 17);
      if (!v1162)
        break;
      if (*(_QWORD *)v1162 == 0x456C656E6E616843
        && *((_QWORD *)v1162 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1162 + 8) == 15972)
      {
        if (v1162 != v1160 && v1162 - (char *)v1159 != -1)
          goto LABEL_2530;
        break;
      }
      v1161 = (void **)(v1162 + 1);
      v1158 = v1160 - (char *)v1161;
    }
    while (v1160 - (char *)v1161 >= 18);
  }
  v1165 = *a2;
  __s[0] = (void *)(v1145 + 1);
  LODWORD(__s[1]) = 3;
  v1166 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1167 = HIBYTE(v1557);
  else
    v1167 = *((_QWORD *)&__dst + 1);
  v1168 = v1167 + 6;
  if (v1167 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1168 >= 0x17)
  {
    v1170 = (v1168 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1168 | 7) != 0x17)
      v1170 = v1168 | 7;
    v1171 = v1170 + 1;
    v1169 = (__int128 *)operator new(v1170 + 1);
    *((_QWORD *)&v1549 + 1) = v1167 + 6;
    v1550 = v1171 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1169;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1169 = &v1549;
    HIBYTE(v1550) = v1167 + 6;
    if (!v1167)
      goto LABEL_2522;
  }
  if (v1166 >= 0)
    v1172 = &__dst;
  else
    v1172 = (__int128 *)__dst;
  memmove(v1169, v1172, v1167);
LABEL_2522:
  strcpy((char *)v1169 + v1167, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1173 = *(_QWORD *)(v1165 + 8);
  if (v1173 >= *(_QWORD *)(v1165 + 16))
  {
    v1179 = sub_2236285DC((char **)v1165, (uint64_t)__s);
    v1180 = SHIBYTE(v1553);
    *(_QWORD *)(v1165 + 8) = v1179;
    if (v1180 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2529;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2529;
    }
LABEL_2524:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2525;
    goto LABEL_2530;
  }
  v1174 = __s[0];
  *(_DWORD *)(v1173 + 8) = __s[1];
  *(_QWORD *)v1173 = v1174;
  v1175 = v1549;
  *(_QWORD *)(v1173 + 32) = v1550;
  *(_OWORD *)(v1173 + 16) = v1175;
  v1550 = 0;
  v1549 = 0uLL;
  v1176 = *(_QWORD *)v1552;
  *(_OWORD *)(v1173 + 40) = v1551;
  *(_QWORD *)(v1173 + 56) = v1176;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1177 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1173 + 80) = v1553;
  *(_OWORD *)(v1173 + 64) = v1177;
  *(_QWORD *)(v1165 + 8) = v1173 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2524;
LABEL_2529:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2525:
    operator delete((void *)v1549);
    v1178 = *(std::__shared_weak_count **)(a1 + 3328);
    if (!v1178)
      goto LABEL_2534;
    goto LABEL_2531;
  }
LABEL_2530:
  v1178 = *(std::__shared_weak_count **)(a1 + 3328);
  if (!v1178)
  {
LABEL_2534:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1184 = 0;
    goto LABEL_2551;
  }
LABEL_2531:
  v1181 = std::__shared_weak_count::lock(v1178);
  if (!v1181)
    goto LABEL_2534;
  v1182 = v1181;
  v1183 = *(_QWORD *)(a1 + 3320);
  if (v1183)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1183 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1185 = (unint64_t *)&v1182->__shared_owners_;
  do
    v1186 = __ldaxr(v1185);
  while (__stlxr(v1186 - 1, v1185));
  if (v1186)
  {
    v1184 = (void **)v1546[0];
    v1187 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2551;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
    std::__shared_weak_count::__release_weak(v1182);
    v1184 = (void **)v1546[0];
    v1187 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2551;
  }
  do
  {
    v1188 = a2[1];
    __s[0] = (void *)v1145;
    __s[1] = *v1184;
    v1550 = 0;
    v1549 = 0uLL;
    v1189 = *(_QWORD *)(v1188 + 8);
    if (v1189 < *(_QWORD *)(v1188 + 16))
    {
      *(_OWORD *)v1189 = *(_OWORD *)__s;
      *(_QWORD *)(v1189 + 24) = 0;
      *(_QWORD *)(v1189 + 32) = 0;
      *(_QWORD *)(v1189 + 16) = 0;
      *(_QWORD *)(v1188 + 8) = v1189 + 40;
    }
    else
    {
      v1190 = sub_223628FA4((void **)v1188, (uint64_t)__s);
      v1191 = SHIBYTE(v1550);
      *(_QWORD *)(v1188 + 8) = v1190;
      if (v1191 < 0)
        operator delete((void *)v1549);
    }
    ++v1184;
  }
  while (v1184 != v1187);
  v1184 = (void **)v1546[0];
LABEL_2551:
  if (v1184)
  {
    v1546[1] = v1184;
    operator delete(v1184);
  }
  v1192 = *(std::__shared_weak_count **)(a1 + 3328);
  if (!v1192 || (v1193 = std::__shared_weak_count::lock(v1192)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1196 = 0;
    goto LABEL_2572;
  }
  v1194 = v1193;
  v1195 = *(_QWORD *)(a1 + 3320);
  if (v1195)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1195 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1197 = (unint64_t *)&v1194->__shared_owners_;
  do
    v1198 = __ldaxr(v1197);
  while (__stlxr(v1198 - 1, v1197));
  if (v1198)
  {
    v1196 = (void **)v1546[0];
    v1199 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2572;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1194->__on_zero_shared)(v1194);
    std::__shared_weak_count::__release_weak(v1194);
    v1196 = (void **)v1546[0];
    v1199 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2572;
  }
  v1200 = (void *)(v1145 + 1);
  do
  {
    v1201 = a2[1];
    __s[0] = v1200;
    __s[1] = *v1196;
    v1550 = 0;
    v1549 = 0uLL;
    v1202 = *(_QWORD *)(v1201 + 8);
    if (v1202 < *(_QWORD *)(v1201 + 16))
    {
      *(_OWORD *)v1202 = *(_OWORD *)__s;
      *(_QWORD *)(v1202 + 24) = 0;
      *(_QWORD *)(v1202 + 32) = 0;
      *(_QWORD *)(v1202 + 16) = 0;
      *(_QWORD *)(v1201 + 8) = v1202 + 40;
    }
    else
    {
      v1203 = sub_223628FA4((void **)v1201, (uint64_t)__s);
      v1204 = SHIBYTE(v1550);
      *(_QWORD *)(v1201 + 8) = v1203;
      if (v1204 < 0)
        operator delete((void *)v1549);
    }
    ++v1196;
  }
  while (v1196 != v1199);
  v1196 = (void **)v1546[0];
LABEL_2572:
  if (v1196)
  {
    v1546[1] = v1196;
    operator delete(v1196);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2576:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2577;
LABEL_2581:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3391) & 0x80000000) == 0)
        goto LABEL_2578;
      goto LABEL_2582;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2576;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2581;
LABEL_2577:
  if ((*(char *)(a1 + 3391) & 0x80000000) == 0)
  {
LABEL_2578:
    __dst = *(_OWORD *)(a1 + 3368);
    v1557 = *(_QWORD *)(a1 + 3384);
    goto LABEL_2583;
  }
LABEL_2582:
  sub_223197FA4(&__dst, *(void **)(a1 + 3368), *(_QWORD *)(a1 + 3376));
LABEL_2583:
  v1205 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3456) + 48))(*(_QWORD *)(a1 + 3456));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v1206 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1207 = &v1558;
  }
  else
  {
    v1206 = *((_QWORD *)&v1558 + 1);
    v1207 = (__int128 *)v1558;
  }
  if (v1206 >= 4)
  {
    v1208 = (char *)v1207 + v1206;
    v1209 = v1207;
    do
    {
      v1210 = (char *)memchr(v1209, 118, v1206 - 3);
      if (!v1210)
        break;
      if (*(_DWORD *)v1210 == 1684631414)
      {
        if (v1210 == v1208 || v1210 - (char *)v1207 == -1)
          break;
        v1211 = *a2;
        __s[0] = (void *)v1205;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3415) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3392), *(_QWORD *)(a1 + 3400));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3392);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3408);
        }
        sub_2236417C4();
        if (byte_255793B3F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793B28, *((unint64_t *)&xmmword_255793B28 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793B28;
          v1553 = unk_255793B38;
        }
        v1212 = *(_QWORD *)(v1211 + 8);
        if (v1212 < *(_QWORD *)(v1211 + 16))
          goto LABEL_2609;
        goto LABEL_2610;
      }
      v1209 = (__int128 *)(v1210 + 1);
      v1206 = v1208 - (char *)v1209;
    }
    while (v1208 - (char *)v1209 >= 4);
  }
  v1211 = *a2;
  __s[0] = (void *)v1205;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3415) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3392), *(_QWORD *)(a1 + 3400));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3392);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3408);
  }
  sub_2236417C4();
  if (byte_255793B3F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793B28, *((unint64_t *)&xmmword_255793B28 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793B28;
    v1553 = unk_255793B38;
  }
  v1212 = *(_QWORD *)(v1211 + 8);
  if (v1212 >= *(_QWORD *)(v1211 + 16))
  {
LABEL_2610:
    v1217 = sub_2236285DC((char **)v1211, (uint64_t)__s);
  }
  else
  {
LABEL_2609:
    v1213 = __s[0];
    *(_DWORD *)(v1212 + 8) = __s[1];
    *(_QWORD *)v1212 = v1213;
    v1214 = v1549;
    *(_QWORD *)(v1212 + 32) = v1550;
    *(_OWORD *)(v1212 + 16) = v1214;
    v1550 = 0;
    v1549 = 0uLL;
    v1215 = *(_QWORD *)v1552;
    *(_OWORD *)(v1212 + 40) = v1551;
    *(_QWORD *)(v1212 + 56) = v1215;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1216 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1212 + 80) = v1553;
    *(_OWORD *)(v1212 + 64) = v1216;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1217 = (char *)(v1212 + 88);
  }
  *(_QWORD *)(v1211 + 8) = v1217;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2613;
LABEL_2617:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2614;
    goto LABEL_2618;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2617;
LABEL_2613:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2614;
LABEL_2618:
  operator delete((void *)v1549);
LABEL_2614:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1218 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1219 = v1554;
  }
  else
  {
    v1218 = (uint64_t)v1554[1];
    v1219 = (void **)v1554[0];
  }
  if (v1218 >= 18)
  {
    v1220 = (char *)v1219 + v1218;
    v1221 = v1219;
    do
    {
      v1222 = (char *)memchr(v1221, 67, v1218 - 17);
      if (!v1222)
        break;
      if (*(_QWORD *)v1222 == 0x456C656E6E616843
        && *((_QWORD *)v1222 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1222 + 8) == 15972)
      {
        if (v1222 != v1220 && v1222 - (char *)v1219 != -1)
          goto LABEL_2659;
        break;
      }
      v1221 = (void **)(v1222 + 1);
      v1218 = v1220 - (char *)v1221;
    }
    while (v1220 - (char *)v1221 >= 18);
  }
  v1225 = *a2;
  __s[0] = (void *)(v1205 + 1);
  LODWORD(__s[1]) = 3;
  v1226 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1227 = HIBYTE(v1557);
  else
    v1227 = *((_QWORD *)&__dst + 1);
  v1228 = v1227 + 6;
  if (v1227 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1228 >= 0x17)
  {
    v1230 = (v1228 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1228 | 7) != 0x17)
      v1230 = v1228 | 7;
    v1231 = v1230 + 1;
    v1229 = (__int128 *)operator new(v1230 + 1);
    *((_QWORD *)&v1549 + 1) = v1227 + 6;
    v1550 = v1231 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1229;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1229 = &v1549;
    HIBYTE(v1550) = v1227 + 6;
    if (!v1227)
      goto LABEL_2651;
  }
  if (v1226 >= 0)
    v1232 = &__dst;
  else
    v1232 = (__int128 *)__dst;
  memmove(v1229, v1232, v1227);
LABEL_2651:
  strcpy((char *)v1229 + v1227, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1233 = *(_QWORD *)(v1225 + 8);
  if (v1233 >= *(_QWORD *)(v1225 + 16))
  {
    v1239 = sub_2236285DC((char **)v1225, (uint64_t)__s);
    v1240 = SHIBYTE(v1553);
    *(_QWORD *)(v1225 + 8) = v1239;
    if (v1240 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2658;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2658;
    }
LABEL_2653:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2654;
    goto LABEL_2659;
  }
  v1234 = __s[0];
  *(_DWORD *)(v1233 + 8) = __s[1];
  *(_QWORD *)v1233 = v1234;
  v1235 = v1549;
  *(_QWORD *)(v1233 + 32) = v1550;
  *(_OWORD *)(v1233 + 16) = v1235;
  v1550 = 0;
  v1549 = 0uLL;
  v1236 = *(_QWORD *)v1552;
  *(_OWORD *)(v1233 + 40) = v1551;
  *(_QWORD *)(v1233 + 56) = v1236;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1237 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1233 + 80) = v1553;
  *(_OWORD *)(v1233 + 64) = v1237;
  *(_QWORD *)(v1225 + 8) = v1233 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2653;
LABEL_2658:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2654:
    operator delete((void *)v1549);
    v1238 = *(std::__shared_weak_count **)(a1 + 3496);
    if (!v1238)
      goto LABEL_2663;
    goto LABEL_2660;
  }
LABEL_2659:
  v1238 = *(std::__shared_weak_count **)(a1 + 3496);
  if (!v1238)
  {
LABEL_2663:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1244 = 0;
    goto LABEL_2680;
  }
LABEL_2660:
  v1241 = std::__shared_weak_count::lock(v1238);
  if (!v1241)
    goto LABEL_2663;
  v1242 = v1241;
  v1243 = *(_QWORD *)(a1 + 3488);
  if (v1243)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1243 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1245 = (unint64_t *)&v1242->__shared_owners_;
  do
    v1246 = __ldaxr(v1245);
  while (__stlxr(v1246 - 1, v1245));
  if (v1246)
  {
    v1244 = (void **)v1546[0];
    v1247 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2680;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
    std::__shared_weak_count::__release_weak(v1242);
    v1244 = (void **)v1546[0];
    v1247 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2680;
  }
  do
  {
    v1248 = a2[1];
    __s[0] = (void *)v1205;
    __s[1] = *v1244;
    v1550 = 0;
    v1549 = 0uLL;
    v1249 = *(_QWORD *)(v1248 + 8);
    if (v1249 < *(_QWORD *)(v1248 + 16))
    {
      *(_OWORD *)v1249 = *(_OWORD *)__s;
      *(_QWORD *)(v1249 + 24) = 0;
      *(_QWORD *)(v1249 + 32) = 0;
      *(_QWORD *)(v1249 + 16) = 0;
      *(_QWORD *)(v1248 + 8) = v1249 + 40;
    }
    else
    {
      v1250 = sub_223628FA4((void **)v1248, (uint64_t)__s);
      v1251 = SHIBYTE(v1550);
      *(_QWORD *)(v1248 + 8) = v1250;
      if (v1251 < 0)
        operator delete((void *)v1549);
    }
    ++v1244;
  }
  while (v1244 != v1247);
  v1244 = (void **)v1546[0];
LABEL_2680:
  if (v1244)
  {
    v1546[1] = v1244;
    operator delete(v1244);
  }
  v1252 = *(std::__shared_weak_count **)(a1 + 3496);
  if (!v1252 || (v1253 = std::__shared_weak_count::lock(v1252)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1256 = 0;
    goto LABEL_2701;
  }
  v1254 = v1253;
  v1255 = *(_QWORD *)(a1 + 3488);
  if (v1255)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1255 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1257 = (unint64_t *)&v1254->__shared_owners_;
  do
    v1258 = __ldaxr(v1257);
  while (__stlxr(v1258 - 1, v1257));
  if (v1258)
  {
    v1256 = (void **)v1546[0];
    v1259 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2701;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1254->__on_zero_shared)(v1254);
    std::__shared_weak_count::__release_weak(v1254);
    v1256 = (void **)v1546[0];
    v1259 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2701;
  }
  v1260 = (void *)(v1205 + 1);
  do
  {
    v1261 = a2[1];
    __s[0] = v1260;
    __s[1] = *v1256;
    v1550 = 0;
    v1549 = 0uLL;
    v1262 = *(_QWORD *)(v1261 + 8);
    if (v1262 < *(_QWORD *)(v1261 + 16))
    {
      *(_OWORD *)v1262 = *(_OWORD *)__s;
      *(_QWORD *)(v1262 + 24) = 0;
      *(_QWORD *)(v1262 + 32) = 0;
      *(_QWORD *)(v1262 + 16) = 0;
      *(_QWORD *)(v1261 + 8) = v1262 + 40;
    }
    else
    {
      v1263 = sub_223628FA4((void **)v1261, (uint64_t)__s);
      v1264 = SHIBYTE(v1550);
      *(_QWORD *)(v1261 + 8) = v1263;
      if (v1264 < 0)
        operator delete((void *)v1549);
    }
    ++v1256;
  }
  while (v1256 != v1259);
  v1256 = (void **)v1546[0];
LABEL_2701:
  if (v1256)
  {
    v1546[1] = v1256;
    operator delete(v1256);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2705:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2706;
LABEL_2710:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3559) & 0x80000000) == 0)
        goto LABEL_2707;
      goto LABEL_2711;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2705;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2710;
LABEL_2706:
  if ((*(char *)(a1 + 3559) & 0x80000000) == 0)
  {
LABEL_2707:
    __dst = *(_OWORD *)(a1 + 3536);
    v1557 = *(_QWORD *)(a1 + 3552);
    goto LABEL_2712;
  }
LABEL_2711:
  sub_223197FA4(&__dst, *(void **)(a1 + 3536), *(_QWORD *)(a1 + 3544));
LABEL_2712:
  v1265 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3624) + 48))(*(_QWORD *)(a1 + 3624));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v1266 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1267 = &v1558;
  }
  else
  {
    v1266 = *((_QWORD *)&v1558 + 1);
    v1267 = (__int128 *)v1558;
  }
  if (v1266 >= 4)
  {
    v1268 = (char *)v1267 + v1266;
    v1269 = v1267;
    do
    {
      v1270 = (char *)memchr(v1269, 118, v1266 - 3);
      if (!v1270)
        break;
      if (*(_DWORD *)v1270 == 1684631414)
      {
        if (v1270 == v1268 || v1270 - (char *)v1267 == -1)
          break;
        v1271 = *a2;
        __s[0] = (void *)v1265;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3583) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3560), *(_QWORD *)(a1 + 3568));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3560);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3576);
        }
        sub_223641988();
        if (byte_255793B87 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793B70, *((unint64_t *)&xmmword_255793B70 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793B70;
          v1553 = unk_255793B80;
        }
        v1272 = *(_QWORD *)(v1271 + 8);
        if (v1272 < *(_QWORD *)(v1271 + 16))
          goto LABEL_2738;
        goto LABEL_2739;
      }
      v1269 = (__int128 *)(v1270 + 1);
      v1266 = v1268 - (char *)v1269;
    }
    while (v1268 - (char *)v1269 >= 4);
  }
  v1271 = *a2;
  __s[0] = (void *)v1265;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3583) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3560), *(_QWORD *)(a1 + 3568));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3560);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3576);
  }
  sub_223641988();
  if (byte_255793B87 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793B70, *((unint64_t *)&xmmword_255793B70 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793B70;
    v1553 = unk_255793B80;
  }
  v1272 = *(_QWORD *)(v1271 + 8);
  if (v1272 >= *(_QWORD *)(v1271 + 16))
  {
LABEL_2739:
    v1277 = sub_2236285DC((char **)v1271, (uint64_t)__s);
  }
  else
  {
LABEL_2738:
    v1273 = __s[0];
    *(_DWORD *)(v1272 + 8) = __s[1];
    *(_QWORD *)v1272 = v1273;
    v1274 = v1549;
    *(_QWORD *)(v1272 + 32) = v1550;
    *(_OWORD *)(v1272 + 16) = v1274;
    v1550 = 0;
    v1549 = 0uLL;
    v1275 = *(_QWORD *)v1552;
    *(_OWORD *)(v1272 + 40) = v1551;
    *(_QWORD *)(v1272 + 56) = v1275;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1276 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1272 + 80) = v1553;
    *(_OWORD *)(v1272 + 64) = v1276;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1277 = (char *)(v1272 + 88);
  }
  *(_QWORD *)(v1271 + 8) = v1277;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2742;
LABEL_2746:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2743;
    goto LABEL_2747;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2746;
LABEL_2742:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2743;
LABEL_2747:
  operator delete((void *)v1549);
LABEL_2743:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1278 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1279 = v1554;
  }
  else
  {
    v1278 = (uint64_t)v1554[1];
    v1279 = (void **)v1554[0];
  }
  if (v1278 >= 18)
  {
    v1280 = (char *)v1279 + v1278;
    v1281 = v1279;
    do
    {
      v1282 = (char *)memchr(v1281, 67, v1278 - 17);
      if (!v1282)
        break;
      if (*(_QWORD *)v1282 == 0x456C656E6E616843
        && *((_QWORD *)v1282 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1282 + 8) == 15972)
      {
        if (v1282 != v1280 && v1282 - (char *)v1279 != -1)
          goto LABEL_2788;
        break;
      }
      v1281 = (void **)(v1282 + 1);
      v1278 = v1280 - (char *)v1281;
    }
    while (v1280 - (char *)v1281 >= 18);
  }
  v1285 = *a2;
  __s[0] = (void *)(v1265 + 1);
  LODWORD(__s[1]) = 3;
  v1286 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1287 = HIBYTE(v1557);
  else
    v1287 = *((_QWORD *)&__dst + 1);
  v1288 = v1287 + 6;
  if (v1287 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1288 >= 0x17)
  {
    v1290 = (v1288 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1288 | 7) != 0x17)
      v1290 = v1288 | 7;
    v1291 = v1290 + 1;
    v1289 = (__int128 *)operator new(v1290 + 1);
    *((_QWORD *)&v1549 + 1) = v1287 + 6;
    v1550 = v1291 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1289;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1289 = &v1549;
    HIBYTE(v1550) = v1287 + 6;
    if (!v1287)
      goto LABEL_2780;
  }
  if (v1286 >= 0)
    v1292 = &__dst;
  else
    v1292 = (__int128 *)__dst;
  memmove(v1289, v1292, v1287);
LABEL_2780:
  strcpy((char *)v1289 + v1287, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1293 = *(_QWORD *)(v1285 + 8);
  if (v1293 >= *(_QWORD *)(v1285 + 16))
  {
    v1299 = sub_2236285DC((char **)v1285, (uint64_t)__s);
    v1300 = SHIBYTE(v1553);
    *(_QWORD *)(v1285 + 8) = v1299;
    if (v1300 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2787;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2787;
    }
LABEL_2782:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2783;
    goto LABEL_2788;
  }
  v1294 = __s[0];
  *(_DWORD *)(v1293 + 8) = __s[1];
  *(_QWORD *)v1293 = v1294;
  v1295 = v1549;
  *(_QWORD *)(v1293 + 32) = v1550;
  *(_OWORD *)(v1293 + 16) = v1295;
  v1550 = 0;
  v1549 = 0uLL;
  v1296 = *(_QWORD *)v1552;
  *(_OWORD *)(v1293 + 40) = v1551;
  *(_QWORD *)(v1293 + 56) = v1296;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1297 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1293 + 80) = v1553;
  *(_OWORD *)(v1293 + 64) = v1297;
  *(_QWORD *)(v1285 + 8) = v1293 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2782;
LABEL_2787:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2783:
    operator delete((void *)v1549);
    v1298 = *(std::__shared_weak_count **)(a1 + 3664);
    if (!v1298)
      goto LABEL_2792;
    goto LABEL_2789;
  }
LABEL_2788:
  v1298 = *(std::__shared_weak_count **)(a1 + 3664);
  if (!v1298)
  {
LABEL_2792:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1304 = 0;
    goto LABEL_2809;
  }
LABEL_2789:
  v1301 = std::__shared_weak_count::lock(v1298);
  if (!v1301)
    goto LABEL_2792;
  v1302 = v1301;
  v1303 = *(_QWORD *)(a1 + 3656);
  if (v1303)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1303 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1305 = (unint64_t *)&v1302->__shared_owners_;
  do
    v1306 = __ldaxr(v1305);
  while (__stlxr(v1306 - 1, v1305));
  if (v1306)
  {
    v1304 = (void **)v1546[0];
    v1307 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2809;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1302->__on_zero_shared)(v1302);
    std::__shared_weak_count::__release_weak(v1302);
    v1304 = (void **)v1546[0];
    v1307 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2809;
  }
  do
  {
    v1308 = a2[1];
    __s[0] = (void *)v1265;
    __s[1] = *v1304;
    v1550 = 0;
    v1549 = 0uLL;
    v1309 = *(_QWORD *)(v1308 + 8);
    if (v1309 < *(_QWORD *)(v1308 + 16))
    {
      *(_OWORD *)v1309 = *(_OWORD *)__s;
      *(_QWORD *)(v1309 + 24) = 0;
      *(_QWORD *)(v1309 + 32) = 0;
      *(_QWORD *)(v1309 + 16) = 0;
      *(_QWORD *)(v1308 + 8) = v1309 + 40;
    }
    else
    {
      v1310 = sub_223628FA4((void **)v1308, (uint64_t)__s);
      v1311 = SHIBYTE(v1550);
      *(_QWORD *)(v1308 + 8) = v1310;
      if (v1311 < 0)
        operator delete((void *)v1549);
    }
    ++v1304;
  }
  while (v1304 != v1307);
  v1304 = (void **)v1546[0];
LABEL_2809:
  if (v1304)
  {
    v1546[1] = v1304;
    operator delete(v1304);
  }
  v1312 = *(std::__shared_weak_count **)(a1 + 3664);
  if (!v1312 || (v1313 = std::__shared_weak_count::lock(v1312)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1316 = 0;
    goto LABEL_2830;
  }
  v1314 = v1313;
  v1315 = *(_QWORD *)(a1 + 3656);
  if (v1315)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1315 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1317 = (unint64_t *)&v1314->__shared_owners_;
  do
    v1318 = __ldaxr(v1317);
  while (__stlxr(v1318 - 1, v1317));
  if (v1318)
  {
    v1316 = (void **)v1546[0];
    v1319 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2830;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1314->__on_zero_shared)(v1314);
    std::__shared_weak_count::__release_weak(v1314);
    v1316 = (void **)v1546[0];
    v1319 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2830;
  }
  v1320 = (void *)(v1265 + 1);
  do
  {
    v1321 = a2[1];
    __s[0] = v1320;
    __s[1] = *v1316;
    v1550 = 0;
    v1549 = 0uLL;
    v1322 = *(_QWORD *)(v1321 + 8);
    if (v1322 < *(_QWORD *)(v1321 + 16))
    {
      *(_OWORD *)v1322 = *(_OWORD *)__s;
      *(_QWORD *)(v1322 + 24) = 0;
      *(_QWORD *)(v1322 + 32) = 0;
      *(_QWORD *)(v1322 + 16) = 0;
      *(_QWORD *)(v1321 + 8) = v1322 + 40;
    }
    else
    {
      v1323 = sub_223628FA4((void **)v1321, (uint64_t)__s);
      v1324 = SHIBYTE(v1550);
      *(_QWORD *)(v1321 + 8) = v1323;
      if (v1324 < 0)
        operator delete((void *)v1549);
    }
    ++v1316;
  }
  while (v1316 != v1319);
  v1316 = (void **)v1546[0];
LABEL_2830:
  if (v1316)
  {
    v1546[1] = v1316;
    operator delete(v1316);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2834:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2835;
LABEL_2839:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3727) & 0x80000000) == 0)
        goto LABEL_2836;
      goto LABEL_2840;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2834;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2839;
LABEL_2835:
  if ((*(char *)(a1 + 3727) & 0x80000000) == 0)
  {
LABEL_2836:
    __dst = *(_OWORD *)(a1 + 3704);
    v1557 = *(_QWORD *)(a1 + 3720);
    goto LABEL_2841;
  }
LABEL_2840:
  sub_223197FA4(&__dst, *(void **)(a1 + 3704), *(_QWORD *)(a1 + 3712));
LABEL_2841:
  v1325 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3792) + 48))(*(_QWORD *)(a1 + 3792));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    v1558 = xmmword_255793228;
    v1559 = unk_255793238;
  }
  v1326 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1327 = &v1558;
  }
  else
  {
    v1326 = *((_QWORD *)&v1558 + 1);
    v1327 = (__int128 *)v1558;
  }
  if (v1326 >= 4)
  {
    v1328 = (char *)v1327 + v1326;
    v1329 = v1327;
    do
    {
      v1330 = (char *)memchr(v1329, 118, v1326 - 3);
      if (!v1330)
        break;
      if (*(_DWORD *)v1330 == 1684631414)
      {
        if (v1330 == v1328 || v1330 - (char *)v1327 == -1)
          break;
        v1331 = *a2;
        __s[0] = (void *)v1325;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3751) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3728), *(_QWORD *)(a1 + 3736));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3728);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3744);
        }
        sub_223641B4C();
        if (byte_255793BCF < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793BB8, *((unint64_t *)&xmmword_255793BB8 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793BB8;
          v1553 = unk_255793BC8;
        }
        v1332 = *(_QWORD *)(v1331 + 8);
        if (v1332 < *(_QWORD *)(v1331 + 16))
          goto LABEL_2867;
        goto LABEL_2868;
      }
      v1329 = (__int128 *)(v1330 + 1);
      v1326 = v1328 - (char *)v1329;
    }
    while (v1328 - (char *)v1329 >= 4);
  }
  v1331 = *a2;
  __s[0] = (void *)v1325;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3751) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3728), *(_QWORD *)(a1 + 3736));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3728);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3744);
  }
  sub_223641B4C();
  if (byte_255793BCF < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793BB8, *((unint64_t *)&xmmword_255793BB8 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793BB8;
    v1553 = unk_255793BC8;
  }
  v1332 = *(_QWORD *)(v1331 + 8);
  if (v1332 >= *(_QWORD *)(v1331 + 16))
  {
LABEL_2868:
    v1337 = sub_2236285DC((char **)v1331, (uint64_t)__s);
  }
  else
  {
LABEL_2867:
    v1333 = __s[0];
    *(_DWORD *)(v1332 + 8) = __s[1];
    *(_QWORD *)v1332 = v1333;
    v1334 = v1549;
    *(_QWORD *)(v1332 + 32) = v1550;
    *(_OWORD *)(v1332 + 16) = v1334;
    v1550 = 0;
    v1549 = 0uLL;
    v1335 = *(_QWORD *)v1552;
    *(_OWORD *)(v1332 + 40) = v1551;
    *(_QWORD *)(v1332 + 56) = v1335;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1336 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1332 + 80) = v1553;
    *(_OWORD *)(v1332 + 64) = v1336;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1337 = (char *)(v1332 + 88);
  }
  *(_QWORD *)(v1331 + 8) = v1337;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_2871;
LABEL_2875:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_2872;
    goto LABEL_2876;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2875;
LABEL_2871:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_2872;
LABEL_2876:
  operator delete((void *)v1549);
LABEL_2872:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1338 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1339 = v1554;
  }
  else
  {
    v1338 = (uint64_t)v1554[1];
    v1339 = (void **)v1554[0];
  }
  if (v1338 >= 18)
  {
    v1340 = (char *)v1339 + v1338;
    v1341 = v1339;
    do
    {
      v1342 = (char *)memchr(v1341, 67, v1338 - 17);
      if (!v1342)
        break;
      if (*(_QWORD *)v1342 == 0x456C656E6E616843
        && *((_QWORD *)v1342 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1342 + 8) == 15972)
      {
        if (v1342 != v1340 && v1342 - (char *)v1339 != -1)
          goto LABEL_2917;
        break;
      }
      v1341 = (void **)(v1342 + 1);
      v1338 = v1340 - (char *)v1341;
    }
    while (v1340 - (char *)v1341 >= 18);
  }
  v1345 = *a2;
  __s[0] = (void *)(v1325 + 1);
  LODWORD(__s[1]) = 3;
  v1346 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1347 = HIBYTE(v1557);
  else
    v1347 = *((_QWORD *)&__dst + 1);
  v1348 = v1347 + 6;
  if (v1347 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1348 >= 0x17)
  {
    v1350 = (v1348 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1348 | 7) != 0x17)
      v1350 = v1348 | 7;
    v1351 = v1350 + 1;
    v1349 = (__int128 *)operator new(v1350 + 1);
    *((_QWORD *)&v1549 + 1) = v1347 + 6;
    v1550 = v1351 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1349;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1349 = &v1549;
    HIBYTE(v1550) = v1347 + 6;
    if (!v1347)
      goto LABEL_2909;
  }
  if (v1346 >= 0)
    v1352 = &__dst;
  else
    v1352 = (__int128 *)__dst;
  memmove(v1349, v1352, v1347);
LABEL_2909:
  strcpy((char *)v1349 + v1347, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1353 = *(_QWORD *)(v1345 + 8);
  if (v1353 >= *(_QWORD *)(v1345 + 16))
  {
    v1359 = sub_2236285DC((char **)v1345, (uint64_t)__s);
    v1360 = SHIBYTE(v1553);
    *(_QWORD *)(v1345 + 8) = v1359;
    if (v1360 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_2916;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_2916;
    }
LABEL_2911:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_2912;
    goto LABEL_2917;
  }
  v1354 = __s[0];
  *(_DWORD *)(v1353 + 8) = __s[1];
  *(_QWORD *)v1353 = v1354;
  v1355 = v1549;
  *(_QWORD *)(v1353 + 32) = v1550;
  *(_OWORD *)(v1353 + 16) = v1355;
  v1550 = 0;
  v1549 = 0uLL;
  v1356 = *(_QWORD *)v1552;
  *(_OWORD *)(v1353 + 40) = v1551;
  *(_QWORD *)(v1353 + 56) = v1356;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1357 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1353 + 80) = v1553;
  *(_OWORD *)(v1353 + 64) = v1357;
  *(_QWORD *)(v1345 + 8) = v1353 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_2911;
LABEL_2916:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_2912:
    operator delete((void *)v1549);
    v1358 = *(std::__shared_weak_count **)(a1 + 3832);
    if (!v1358)
      goto LABEL_2921;
    goto LABEL_2918;
  }
LABEL_2917:
  v1358 = *(std::__shared_weak_count **)(a1 + 3832);
  if (!v1358)
  {
LABEL_2921:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1364 = 0;
    goto LABEL_2938;
  }
LABEL_2918:
  v1361 = std::__shared_weak_count::lock(v1358);
  if (!v1361)
    goto LABEL_2921;
  v1362 = v1361;
  v1363 = *(_QWORD *)(a1 + 3824);
  if (v1363)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1363 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1365 = (unint64_t *)&v1362->__shared_owners_;
  do
    v1366 = __ldaxr(v1365);
  while (__stlxr(v1366 - 1, v1365));
  if (v1366)
  {
    v1364 = (void **)v1546[0];
    v1367 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2938;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
    std::__shared_weak_count::__release_weak(v1362);
    v1364 = (void **)v1546[0];
    v1367 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2938;
  }
  do
  {
    v1368 = a2[1];
    __s[0] = (void *)v1325;
    __s[1] = *v1364;
    v1550 = 0;
    v1549 = 0uLL;
    v1369 = *(_QWORD *)(v1368 + 8);
    if (v1369 < *(_QWORD *)(v1368 + 16))
    {
      *(_OWORD *)v1369 = *(_OWORD *)__s;
      *(_QWORD *)(v1369 + 24) = 0;
      *(_QWORD *)(v1369 + 32) = 0;
      *(_QWORD *)(v1369 + 16) = 0;
      *(_QWORD *)(v1368 + 8) = v1369 + 40;
    }
    else
    {
      v1370 = sub_223628FA4((void **)v1368, (uint64_t)__s);
      v1371 = SHIBYTE(v1550);
      *(_QWORD *)(v1368 + 8) = v1370;
      if (v1371 < 0)
        operator delete((void *)v1549);
    }
    ++v1364;
  }
  while (v1364 != v1367);
  v1364 = (void **)v1546[0];
LABEL_2938:
  if (v1364)
  {
    v1546[1] = v1364;
    operator delete(v1364);
  }
  v1372 = *(std::__shared_weak_count **)(a1 + 3832);
  if (!v1372 || (v1373 = std::__shared_weak_count::lock(v1372)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1376 = 0;
    goto LABEL_2959;
  }
  v1374 = v1373;
  v1375 = *(_QWORD *)(a1 + 3824);
  if (v1375)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1375 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1377 = (unint64_t *)&v1374->__shared_owners_;
  do
    v1378 = __ldaxr(v1377);
  while (__stlxr(v1378 - 1, v1377));
  if (v1378)
  {
    v1376 = (void **)v1546[0];
    v1379 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2959;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1374->__on_zero_shared)(v1374);
    std::__shared_weak_count::__release_weak(v1374);
    v1376 = (void **)v1546[0];
    v1379 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_2959;
  }
  v1380 = (void *)(v1325 + 1);
  do
  {
    v1381 = a2[1];
    __s[0] = v1380;
    __s[1] = *v1376;
    v1550 = 0;
    v1549 = 0uLL;
    v1382 = *(_QWORD *)(v1381 + 8);
    if (v1382 < *(_QWORD *)(v1381 + 16))
    {
      *(_OWORD *)v1382 = *(_OWORD *)__s;
      *(_QWORD *)(v1382 + 24) = 0;
      *(_QWORD *)(v1382 + 32) = 0;
      *(_QWORD *)(v1382 + 16) = 0;
      *(_QWORD *)(v1381 + 8) = v1382 + 40;
    }
    else
    {
      v1383 = sub_223628FA4((void **)v1381, (uint64_t)__s);
      v1384 = SHIBYTE(v1550);
      *(_QWORD *)(v1381 + 8) = v1383;
      if (v1384 < 0)
        operator delete((void *)v1549);
    }
    ++v1376;
  }
  while (v1376 != v1379);
  v1376 = (void **)v1546[0];
LABEL_2959:
  if (v1376)
  {
    v1546[1] = v1376;
    operator delete(v1376);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_2963:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_2964;
LABEL_2968:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 3895) & 0x80000000) == 0)
        goto LABEL_2965;
      goto LABEL_2969;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_2963;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_2968;
LABEL_2964:
  if ((*(char *)(a1 + 3895) & 0x80000000) == 0)
  {
LABEL_2965:
    __dst = *(_OWORD *)(a1 + 3872);
    v1557 = *(_QWORD *)(a1 + 3888);
    goto LABEL_2970;
  }
LABEL_2969:
  sub_223197FA4(&__dst, *(void **)(a1 + 3872), *(_QWORD *)(a1 + 3880));
LABEL_2970:
  v1385 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3960) + 48))(*(_QWORD *)(a1 + 3960));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v1558 = xmmword_255793318;
    v1559 = unk_255793328;
  }
  v1386 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1387 = &v1558;
  }
  else
  {
    v1386 = *((_QWORD *)&v1558 + 1);
    v1387 = (__int128 *)v1558;
  }
  if (v1386 >= 4)
  {
    v1388 = (char *)v1387 + v1386;
    v1389 = v1387;
    do
    {
      v1390 = (char *)memchr(v1389, 118, v1386 - 3);
      if (!v1390)
        break;
      if (*(_DWORD *)v1390 == 1684631414)
      {
        if (v1390 == v1388 || v1390 - (char *)v1387 == -1)
          break;
        v1391 = *a2;
        __s[0] = (void *)v1385;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 3919) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 3896), *(_QWORD *)(a1 + 3904));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 3896);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3912);
        }
        sub_223641D10();
        if (byte_255793C17 < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793C00, *((unint64_t *)&xmmword_255793C00 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793C00;
          v1553 = unk_255793C10;
        }
        v1392 = *(_QWORD *)(v1391 + 8);
        if (v1392 < *(_QWORD *)(v1391 + 16))
          goto LABEL_2996;
        goto LABEL_2997;
      }
      v1389 = (__int128 *)(v1390 + 1);
      v1386 = v1388 - (char *)v1389;
    }
    while (v1388 - (char *)v1389 >= 4);
  }
  v1391 = *a2;
  __s[0] = (void *)v1385;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 3919) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 3896), *(_QWORD *)(a1 + 3904));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 3896);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 3912);
  }
  sub_223641D10();
  if (byte_255793C17 < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793C00, *((unint64_t *)&xmmword_255793C00 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793C00;
    v1553 = unk_255793C10;
  }
  v1392 = *(_QWORD *)(v1391 + 8);
  if (v1392 >= *(_QWORD *)(v1391 + 16))
  {
LABEL_2997:
    v1397 = sub_2236285DC((char **)v1391, (uint64_t)__s);
  }
  else
  {
LABEL_2996:
    v1393 = __s[0];
    *(_DWORD *)(v1392 + 8) = __s[1];
    *(_QWORD *)v1392 = v1393;
    v1394 = v1549;
    *(_QWORD *)(v1392 + 32) = v1550;
    *(_OWORD *)(v1392 + 16) = v1394;
    v1550 = 0;
    v1549 = 0uLL;
    v1395 = *(_QWORD *)v1552;
    *(_OWORD *)(v1392 + 40) = v1551;
    *(_QWORD *)(v1392 + 56) = v1395;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1396 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1392 + 80) = v1553;
    *(_OWORD *)(v1392 + 64) = v1396;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1397 = (char *)(v1392 + 88);
  }
  *(_QWORD *)(v1391 + 8) = v1397;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_3000;
LABEL_3004:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_3001;
    goto LABEL_3005;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_3004;
LABEL_3000:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_3001;
LABEL_3005:
  operator delete((void *)v1549);
LABEL_3001:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1398 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1399 = v1554;
  }
  else
  {
    v1398 = (uint64_t)v1554[1];
    v1399 = (void **)v1554[0];
  }
  if (v1398 >= 18)
  {
    v1400 = (char *)v1399 + v1398;
    v1401 = v1399;
    do
    {
      v1402 = (char *)memchr(v1401, 67, v1398 - 17);
      if (!v1402)
        break;
      if (*(_QWORD *)v1402 == 0x456C656E6E616843
        && *((_QWORD *)v1402 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1402 + 8) == 15972)
      {
        if (v1402 != v1400 && v1402 - (char *)v1399 != -1)
          goto LABEL_3046;
        break;
      }
      v1401 = (void **)(v1402 + 1);
      v1398 = v1400 - (char *)v1401;
    }
    while (v1400 - (char *)v1401 >= 18);
  }
  v1405 = *a2;
  __s[0] = (void *)(v1385 + 1);
  LODWORD(__s[1]) = 3;
  v1406 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1407 = HIBYTE(v1557);
  else
    v1407 = *((_QWORD *)&__dst + 1);
  v1408 = v1407 + 6;
  if (v1407 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1408 >= 0x17)
  {
    v1410 = (v1408 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1408 | 7) != 0x17)
      v1410 = v1408 | 7;
    v1411 = v1410 + 1;
    v1409 = (__int128 *)operator new(v1410 + 1);
    *((_QWORD *)&v1549 + 1) = v1407 + 6;
    v1550 = v1411 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1409;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1409 = &v1549;
    HIBYTE(v1550) = v1407 + 6;
    if (!v1407)
      goto LABEL_3038;
  }
  if (v1406 >= 0)
    v1412 = &__dst;
  else
    v1412 = (__int128 *)__dst;
  memmove(v1409, v1412, v1407);
LABEL_3038:
  strcpy((char *)v1409 + v1407, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1413 = *(_QWORD *)(v1405 + 8);
  if (v1413 >= *(_QWORD *)(v1405 + 16))
  {
    v1419 = sub_2236285DC((char **)v1405, (uint64_t)__s);
    v1420 = SHIBYTE(v1553);
    *(_QWORD *)(v1405 + 8) = v1419;
    if (v1420 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_3045;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_3045;
    }
LABEL_3040:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_3041;
    goto LABEL_3046;
  }
  v1414 = __s[0];
  *(_DWORD *)(v1413 + 8) = __s[1];
  *(_QWORD *)v1413 = v1414;
  v1415 = v1549;
  *(_QWORD *)(v1413 + 32) = v1550;
  *(_OWORD *)(v1413 + 16) = v1415;
  v1550 = 0;
  v1549 = 0uLL;
  v1416 = *(_QWORD *)v1552;
  *(_OWORD *)(v1413 + 40) = v1551;
  *(_QWORD *)(v1413 + 56) = v1416;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1417 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1413 + 80) = v1553;
  *(_OWORD *)(v1413 + 64) = v1417;
  *(_QWORD *)(v1405 + 8) = v1413 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_3040;
LABEL_3045:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_3041:
    operator delete((void *)v1549);
    v1418 = *(std::__shared_weak_count **)(a1 + 4000);
    if (!v1418)
      goto LABEL_3050;
    goto LABEL_3047;
  }
LABEL_3046:
  v1418 = *(std::__shared_weak_count **)(a1 + 4000);
  if (!v1418)
  {
LABEL_3050:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1424 = 0;
    goto LABEL_3067;
  }
LABEL_3047:
  v1421 = std::__shared_weak_count::lock(v1418);
  if (!v1421)
    goto LABEL_3050;
  v1422 = v1421;
  v1423 = *(_QWORD *)(a1 + 3992);
  if (v1423)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1423 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1425 = (unint64_t *)&v1422->__shared_owners_;
  do
    v1426 = __ldaxr(v1425);
  while (__stlxr(v1426 - 1, v1425));
  if (v1426)
  {
    v1424 = (void **)v1546[0];
    v1427 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3067;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1422->__on_zero_shared)(v1422);
    std::__shared_weak_count::__release_weak(v1422);
    v1424 = (void **)v1546[0];
    v1427 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3067;
  }
  do
  {
    v1428 = a2[1];
    __s[0] = (void *)v1385;
    __s[1] = *v1424;
    v1550 = 0;
    v1549 = 0uLL;
    v1429 = *(_QWORD *)(v1428 + 8);
    if (v1429 < *(_QWORD *)(v1428 + 16))
    {
      *(_OWORD *)v1429 = *(_OWORD *)__s;
      *(_QWORD *)(v1429 + 24) = 0;
      *(_QWORD *)(v1429 + 32) = 0;
      *(_QWORD *)(v1429 + 16) = 0;
      *(_QWORD *)(v1428 + 8) = v1429 + 40;
    }
    else
    {
      v1430 = sub_223628FA4((void **)v1428, (uint64_t)__s);
      v1431 = SHIBYTE(v1550);
      *(_QWORD *)(v1428 + 8) = v1430;
      if (v1431 < 0)
        operator delete((void *)v1549);
    }
    ++v1424;
  }
  while (v1424 != v1427);
  v1424 = (void **)v1546[0];
LABEL_3067:
  if (v1424)
  {
    v1546[1] = v1424;
    operator delete(v1424);
  }
  v1432 = *(std::__shared_weak_count **)(a1 + 4000);
  if (!v1432 || (v1433 = std::__shared_weak_count::lock(v1432)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1436 = 0;
    goto LABEL_3088;
  }
  v1434 = v1433;
  v1435 = *(_QWORD *)(a1 + 3992);
  if (v1435)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1435 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1437 = (unint64_t *)&v1434->__shared_owners_;
  do
    v1438 = __ldaxr(v1437);
  while (__stlxr(v1438 - 1, v1437));
  if (v1438)
  {
    v1436 = (void **)v1546[0];
    v1439 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3088;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1434->__on_zero_shared)(v1434);
    std::__shared_weak_count::__release_weak(v1434);
    v1436 = (void **)v1546[0];
    v1439 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3088;
  }
  v1440 = (void *)(v1385 + 1);
  do
  {
    v1441 = a2[1];
    __s[0] = v1440;
    __s[1] = *v1436;
    v1550 = 0;
    v1549 = 0uLL;
    v1442 = *(_QWORD *)(v1441 + 8);
    if (v1442 < *(_QWORD *)(v1441 + 16))
    {
      *(_OWORD *)v1442 = *(_OWORD *)__s;
      *(_QWORD *)(v1442 + 24) = 0;
      *(_QWORD *)(v1442 + 32) = 0;
      *(_QWORD *)(v1442 + 16) = 0;
      *(_QWORD *)(v1441 + 8) = v1442 + 40;
    }
    else
    {
      v1443 = sub_223628FA4((void **)v1441, (uint64_t)__s);
      v1444 = SHIBYTE(v1550);
      *(_QWORD *)(v1441 + 8) = v1443;
      if (v1444 < 0)
        operator delete((void *)v1549);
    }
    ++v1436;
  }
  while (v1436 != v1439);
  v1436 = (void **)v1546[0];
LABEL_3088:
  if (v1436)
  {
    v1546[1] = v1436;
    operator delete(v1436);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_3092:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        goto LABEL_3093;
LABEL_3097:
      operator delete((void *)__dst);
      if ((*(char *)(a1 + 4063) & 0x80000000) == 0)
        goto LABEL_3094;
      goto LABEL_3098;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_3092;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_3097;
LABEL_3093:
  if ((*(char *)(a1 + 4063) & 0x80000000) == 0)
  {
LABEL_3094:
    __dst = *(_OWORD *)(a1 + 4040);
    v1557 = *(_QWORD *)(a1 + 4056);
    goto LABEL_3099;
  }
LABEL_3098:
  sub_223197FA4(&__dst, *(void **)(a1 + 4040), *(_QWORD *)(a1 + 4048));
LABEL_3099:
  v1445 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 4128) + 48))(*(_QWORD *)(a1 + 4128));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(&v1558, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    v1558 = xmmword_255793318;
    v1559 = unk_255793328;
  }
  v1446 = HIBYTE(v1559);
  if (v1559 >= 0)
  {
    v1447 = &v1558;
  }
  else
  {
    v1446 = *((_QWORD *)&v1558 + 1);
    v1447 = (__int128 *)v1558;
  }
  if (v1446 >= 4)
  {
    v1448 = (char *)v1447 + v1446;
    v1449 = v1447;
    do
    {
      v1450 = (char *)memchr(v1449, 118, v1446 - 3);
      if (!v1450)
        break;
      if (*(_DWORD *)v1450 == 1684631414)
      {
        if (v1450 == v1448 || v1450 - (char *)v1447 == -1)
          break;
        v1451 = *a2;
        __s[0] = (void *)v1445;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1557) < 0)
        {
          sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v1549 = __dst;
          v1550 = v1557;
        }
        if (*(char *)(a1 + 4087) < 0)
        {
          sub_223197FA4(&v1551, *(void **)(a1 + 4064), *(_QWORD *)(a1 + 4072));
        }
        else
        {
          v1551 = *(_OWORD *)(a1 + 4064);
          *(_QWORD *)v1552 = *(_QWORD *)(a1 + 4080);
        }
        sub_223641ED4();
        if (byte_255793C5F < 0)
        {
          sub_223197FA4(&v1552[8], (void *)xmmword_255793C48, *((unint64_t *)&xmmword_255793C48 + 1));
        }
        else
        {
          *(_OWORD *)&v1552[8] = xmmword_255793C48;
          v1553 = unk_255793C58;
        }
        v1452 = *(_QWORD *)(v1451 + 8);
        if (v1452 < *(_QWORD *)(v1451 + 16))
          goto LABEL_3125;
        goto LABEL_3126;
      }
      v1449 = (__int128 *)(v1450 + 1);
      v1446 = v1448 - (char *)v1449;
    }
    while (v1448 - (char *)v1449 >= 4);
  }
  v1451 = *a2;
  __s[0] = (void *)v1445;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1557) < 0)
  {
    sub_223197FA4(&v1549, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v1549 = __dst;
    v1550 = v1557;
  }
  if (*(char *)(a1 + 4087) < 0)
  {
    sub_223197FA4(&v1551, *(void **)(a1 + 4064), *(_QWORD *)(a1 + 4072));
  }
  else
  {
    v1551 = *(_OWORD *)(a1 + 4064);
    *(_QWORD *)v1552 = *(_QWORD *)(a1 + 4080);
  }
  sub_223641ED4();
  if (byte_255793C5F < 0)
  {
    sub_223197FA4(&v1552[8], (void *)xmmword_255793C48, *((unint64_t *)&xmmword_255793C48 + 1));
  }
  else
  {
    *(_OWORD *)&v1552[8] = xmmword_255793C48;
    v1553 = unk_255793C58;
  }
  v1452 = *(_QWORD *)(v1451 + 8);
  if (v1452 >= *(_QWORD *)(v1451 + 16))
  {
LABEL_3126:
    v1457 = sub_2236285DC((char **)v1451, (uint64_t)__s);
  }
  else
  {
LABEL_3125:
    v1453 = __s[0];
    *(_DWORD *)(v1452 + 8) = __s[1];
    *(_QWORD *)v1452 = v1453;
    v1454 = v1549;
    *(_QWORD *)(v1452 + 32) = v1550;
    *(_OWORD *)(v1452 + 16) = v1454;
    v1550 = 0;
    v1549 = 0uLL;
    v1455 = *(_QWORD *)v1552;
    *(_OWORD *)(v1452 + 40) = v1551;
    *(_QWORD *)(v1452 + 56) = v1455;
    *(_QWORD *)v1552 = 0;
    v1551 = 0uLL;
    v1456 = *(_OWORD *)&v1552[8];
    *(_QWORD *)(v1452 + 80) = v1553;
    *(_OWORD *)(v1452 + 64) = v1456;
    *(_QWORD *)&v1552[8] = 0;
    *(_QWORD *)&v1552[16] = 0;
    v1553 = 0;
    v1457 = (char *)(v1452 + 88);
  }
  *(_QWORD *)(v1451 + 8) = v1457;
  if ((SHIBYTE(v1553) & 0x80000000) == 0)
  {
    if ((v1552[7] & 0x80000000) == 0)
      goto LABEL_3129;
LABEL_3133:
    operator delete((void *)v1551);
    if ((SHIBYTE(v1550) & 0x80000000) == 0)
      goto LABEL_3130;
    goto LABEL_3134;
  }
  operator delete(*(void **)&v1552[8]);
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_3133;
LABEL_3129:
  if ((SHIBYTE(v1550) & 0x80000000) == 0)
    goto LABEL_3130;
LABEL_3134:
  operator delete((void *)v1549);
LABEL_3130:
  sub_223627E68();
  if (byte_2540CBC5F < 0)
  {
    sub_223197FA4(v1554, (void *)xmmword_2540CBC48, *((unint64_t *)&xmmword_2540CBC48 + 1));
  }
  else
  {
    *(_OWORD *)v1554 = xmmword_2540CBC48;
    v1555 = unk_2540CBC58;
  }
  v1458 = HIBYTE(v1555);
  if (v1555 >= 0)
  {
    v1459 = v1554;
  }
  else
  {
    v1458 = (uint64_t)v1554[1];
    v1459 = (void **)v1554[0];
  }
  if (v1458 >= 18)
  {
    v1460 = (char *)v1459 + v1458;
    v1461 = v1459;
    do
    {
      v1462 = (char *)memchr(v1461, 67, v1458 - 17);
      if (!v1462)
        break;
      if (*(_QWORD *)v1462 == 0x456C656E6E616843
        && *((_QWORD *)v1462 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1462 + 8) == 15972)
      {
        if (v1462 != v1460 && v1462 - (char *)v1459 != -1)
          goto LABEL_3175;
        break;
      }
      v1461 = (void **)(v1462 + 1);
      v1458 = v1460 - (char *)v1461;
    }
    while (v1460 - (char *)v1461 >= 18);
  }
  v1465 = *a2;
  __s[0] = (void *)(v1445 + 1);
  LODWORD(__s[1]) = 3;
  v1466 = SHIBYTE(v1557);
  if (v1557 >= 0)
    v1467 = HIBYTE(v1557);
  else
    v1467 = *((_QWORD *)&__dst + 1);
  v1468 = v1467 + 6;
  if (v1467 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1468 >= 0x17)
  {
    v1470 = (v1468 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1468 | 7) != 0x17)
      v1470 = v1468 | 7;
    v1471 = v1470 + 1;
    v1469 = (__int128 *)operator new(v1470 + 1);
    *((_QWORD *)&v1549 + 1) = v1467 + 6;
    v1550 = v1471 | 0x8000000000000000;
    *(_QWORD *)&v1549 = v1469;
  }
  else
  {
    v1550 = 0;
    v1549 = 0uLL;
    v1469 = &v1549;
    HIBYTE(v1550) = v1467 + 6;
    if (!v1467)
      goto LABEL_3167;
  }
  if (v1466 >= 0)
    v1472 = &__dst;
  else
    v1472 = (__int128 *)__dst;
  memmove(v1469, v1472, v1467);
LABEL_3167:
  strcpy((char *)v1469 + v1467, ".Error");
  *(_WORD *)&v1552[7] = 0;
  LOBYTE(v1551) = 0;
  HIBYTE(v1553) = 0;
  v1473 = *(_QWORD *)(v1465 + 8);
  if (v1473 >= *(_QWORD *)(v1465 + 16))
  {
    v1479 = sub_2236285DC((char **)v1465, (uint64_t)__s);
    v1480 = SHIBYTE(v1553);
    *(_QWORD *)(v1465 + 8) = v1479;
    if (v1480 < 0)
    {
      operator delete(*(void **)&v1552[8]);
      if ((v1552[7] & 0x80000000) == 0)
        goto LABEL_3174;
    }
    else if ((v1552[7] & 0x80000000) == 0)
    {
      goto LABEL_3174;
    }
LABEL_3169:
    operator delete((void *)v1551);
    if (SHIBYTE(v1550) < 0)
      goto LABEL_3170;
    goto LABEL_3175;
  }
  v1474 = __s[0];
  *(_DWORD *)(v1473 + 8) = __s[1];
  *(_QWORD *)v1473 = v1474;
  v1475 = v1549;
  *(_QWORD *)(v1473 + 32) = v1550;
  *(_OWORD *)(v1473 + 16) = v1475;
  v1550 = 0;
  v1549 = 0uLL;
  v1476 = *(_QWORD *)v1552;
  *(_OWORD *)(v1473 + 40) = v1551;
  *(_QWORD *)(v1473 + 56) = v1476;
  *(_QWORD *)v1552 = 0;
  v1551 = 0uLL;
  v1477 = *(_OWORD *)&v1552[8];
  *(_QWORD *)(v1473 + 80) = v1553;
  *(_OWORD *)(v1473 + 64) = v1477;
  *(_QWORD *)(v1465 + 8) = v1473 + 88;
  if ((v1552[7] & 0x80000000) != 0)
    goto LABEL_3169;
LABEL_3174:
  if (SHIBYTE(v1550) < 0)
  {
LABEL_3170:
    operator delete((void *)v1549);
    v1478 = *(std::__shared_weak_count **)(a1 + 4168);
    if (!v1478)
      goto LABEL_3179;
    goto LABEL_3176;
  }
LABEL_3175:
  v1478 = *(std::__shared_weak_count **)(a1 + 4168);
  if (!v1478)
  {
LABEL_3179:
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1484 = 0;
    goto LABEL_3196;
  }
LABEL_3176:
  v1481 = std::__shared_weak_count::lock(v1478);
  if (!v1481)
    goto LABEL_3179;
  v1482 = v1481;
  v1483 = *(_QWORD *)(a1 + 4160);
  if (v1483)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1483 + 24))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1485 = (unint64_t *)&v1482->__shared_owners_;
  do
    v1486 = __ldaxr(v1485);
  while (__stlxr(v1486 - 1, v1485));
  if (v1486)
  {
    v1484 = (void **)v1546[0];
    v1487 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3196;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1482->__on_zero_shared)(v1482);
    std::__shared_weak_count::__release_weak(v1482);
    v1484 = (void **)v1546[0];
    v1487 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3196;
  }
  do
  {
    v1488 = a2[1];
    __s[0] = (void *)v1445;
    __s[1] = *v1484;
    v1550 = 0;
    v1549 = 0uLL;
    v1489 = *(_QWORD *)(v1488 + 8);
    if (v1489 < *(_QWORD *)(v1488 + 16))
    {
      *(_OWORD *)v1489 = *(_OWORD *)__s;
      *(_QWORD *)(v1489 + 24) = 0;
      *(_QWORD *)(v1489 + 32) = 0;
      *(_QWORD *)(v1489 + 16) = 0;
      *(_QWORD *)(v1488 + 8) = v1489 + 40;
    }
    else
    {
      v1490 = sub_223628FA4((void **)v1488, (uint64_t)__s);
      v1491 = SHIBYTE(v1550);
      *(_QWORD *)(v1488 + 8) = v1490;
      if (v1491 < 0)
        operator delete((void *)v1549);
    }
    ++v1484;
  }
  while (v1484 != v1487);
  v1484 = (void **)v1546[0];
LABEL_3196:
  if (v1484)
  {
    v1546[1] = v1484;
    operator delete(v1484);
  }
  v1492 = *(std::__shared_weak_count **)(a1 + 4168);
  if (!v1492 || (v1493 = std::__shared_weak_count::lock(v1492)) == 0)
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
    v1496 = 0;
    goto LABEL_3217;
  }
  v1494 = v1493;
  v1495 = *(_QWORD *)(a1 + 4160);
  if (v1495)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1495 + 32))(v1546);
  }
  else
  {
    v1546[0] = 0;
    v1546[1] = 0;
    v1547 = 0;
  }
  v1497 = (unint64_t *)&v1494->__shared_owners_;
  do
    v1498 = __ldaxr(v1497);
  while (__stlxr(v1498 - 1, v1497));
  if (v1498)
  {
    v1496 = (void **)v1546[0];
    v1499 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3217;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1494->__on_zero_shared)(v1494);
    std::__shared_weak_count::__release_weak(v1494);
    v1496 = (void **)v1546[0];
    v1499 = (void **)v1546[1];
    if (v1546[0] == v1546[1])
      goto LABEL_3217;
  }
  v1500 = (void *)(v1445 + 1);
  do
  {
    v1501 = a2[1];
    __s[0] = v1500;
    __s[1] = *v1496;
    v1550 = 0;
    v1549 = 0uLL;
    v1502 = *(_QWORD *)(v1501 + 8);
    if (v1502 < *(_QWORD *)(v1501 + 16))
    {
      *(_OWORD *)v1502 = *(_OWORD *)__s;
      *(_QWORD *)(v1502 + 24) = 0;
      *(_QWORD *)(v1502 + 32) = 0;
      *(_QWORD *)(v1502 + 16) = 0;
      *(_QWORD *)(v1501 + 8) = v1502 + 40;
    }
    else
    {
      v1503 = sub_223628FA4((void **)v1501, (uint64_t)__s);
      v1504 = SHIBYTE(v1550);
      *(_QWORD *)(v1501 + 8) = v1503;
      if (v1504 < 0)
        operator delete((void *)v1549);
    }
    ++v1496;
  }
  while (v1496 != v1499);
  v1496 = (void **)v1546[0];
LABEL_3217:
  if (v1496)
  {
    v1546[1] = v1496;
    operator delete(v1496);
  }
  if (SHIBYTE(v1555) < 0)
  {
    operator delete(v1554[0]);
    if ((SHIBYTE(v1559) & 0x80000000) == 0)
    {
LABEL_3221:
      if ((SHIBYTE(v1557) & 0x80000000) == 0)
        return;
LABEL_3225:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v1559) & 0x80000000) == 0)
  {
    goto LABEL_3221;
  }
  operator delete((void *)v1558);
  if (SHIBYTE(v1557) < 0)
    goto LABEL_3225;
}

void sub_22363B624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  __cxa_guard_abort(&qword_2540CB4C8);
  __cxa_guard_abort(&qword_2540CB4C0);
  __cxa_guard_abort(&qword_2540CB4B8);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22363D298()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB288);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB288))
  {
    sub_22363D354();
    if (byte_255793197 < 0)
    {
      sub_223197FA4(&xmmword_255793150, (void *)xmmword_255793180, *((unint64_t *)&xmmword_255793180 + 1));
    }
    else
    {
      xmmword_255793150 = xmmword_255793180;
      unk_255793160 = unk_255793190;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793150, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB288);
  }
}

void sub_22363D33C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB288);
  _Unwind_Resume(a1);
}

void sub_22363D354()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB290))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::recon::sng::MeshingNodeMeshUpdateResult> (cv3d::kit::concurrency::ChannelLimitedInput<cv3d::recon::frame::FrameBundle, 1>)]", qword_255793168);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793168, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB290);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB298);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB298))
    {
      sub_224573040((uint64_t)qword_255793168, (uint64_t)&xmmword_255793180);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793180, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB298);
    }
  }
}

void sub_22363D42C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB298);
  _Unwind_Resume(a1);
}

void sub_22363D444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB290);
  _Unwind_Resume(a1);
}

void sub_22363D45C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2A0))
  {
    sub_22363D518();
    if (byte_2557931DF < 0)
    {
      sub_223197FA4(&xmmword_255793198, (void *)xmmword_2557931C8, *((unint64_t *)&xmmword_2557931C8 + 1));
    }
    else
    {
      xmmword_255793198 = xmmword_2557931C8;
      unk_2557931A8 = unk_2557931D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793198, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2A0);
  }
}

void sub_22363D500(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2A0);
  _Unwind_Resume(a1);
}

void sub_22363D518()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::recon::sng::MeshingNodeMeshUpdateResult> (cv3d::kit::concurrency::ChannelLimitedInput<std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error>, 1>)]", qword_2557931B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557931B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB2B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB2B0))
    {
      sub_224573040((uint64_t)qword_2557931B0, (uint64_t)&xmmword_2557931C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557931C8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB2B0);
    }
  }
}

void sub_22363D5F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2B0);
  _Unwind_Resume(a1);
}

void sub_22363D608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2A8);
  _Unwind_Resume(a1);
}

void sub_22363D620()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2B8))
  {
    sub_22363D6DC();
    if (byte_255793227 < 0)
    {
      sub_223197FA4(&xmmword_2557931E0, (void *)xmmword_255793210, *((unint64_t *)&xmmword_255793210 + 1));
    }
    else
    {
      xmmword_2557931E0 = xmmword_255793210;
      unk_2557931F0 = unk_255793220;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557931E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2B8);
  }
}

void sub_22363D6C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2B8);
  _Unwind_Resume(a1);
}

void sub_22363D6DC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2C0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::recon::sng::MeshingNodeMeshUpdateResult> (cv3d::kit::concurrency::ChannelLimitedInput<cv3d::recon::sng::KeyframeEngineResultSync, 1>)]", qword_2557931F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557931F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB2C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB2C8))
    {
      sub_224573040((uint64_t)qword_2557931F8, (uint64_t)&xmmword_255793210);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793210, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB2C8);
    }
  }
}

void sub_22363D7B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2C8);
  _Unwind_Resume(a1);
}

void sub_22363D7CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2C0);
  _Unwind_Resume(a1);
}

void sub_22363D7E4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2D0))
  {
    sub_22363D940();
    v1 = byte_255793257;
    if (byte_255793257 >= 0)
      v2 = byte_255793257;
    else
      v2 = qword_255793248;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793228 + 1) = v2 + 1;
      unk_255793238 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793228 = v4;
    }
    else
    {
      v4 = &xmmword_255793228;
      unk_255793238 = 0;
      xmmword_255793228 = 0uLL;
      byte_25579323F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793228, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB2D0);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255793240;
    else
      v7 = (uint64_t *)qword_255793240;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22363D928(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2D0);
  _Unwind_Resume(a1);
}

void sub_22363D940()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2D8))
  {
    sub_22363DAB8();
    v1 = byte_25579326F;
    if (byte_25579326F >= 0)
      v2 = byte_25579326F;
    else
      v2 = *((_QWORD *)&xmmword_255793258 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255793248 = v2 + 6;
      unk_255793250 = v6 | 0x8000000000000000;
      qword_255793240 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255793248 = 0;
      unk_255793250 = 0;
      qword_255793240 = 0x2074736E6F63;
      byte_255793257 = v2 + 6;
      v4 = (char *)&qword_255793240 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793240, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB2D8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255793258;
    else
      v8 = (__int128 *)xmmword_255793258;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22363DAA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2D8);
  _Unwind_Resume(a1);
}

void sub_22363DAB8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2E0))
  {
    sub_22363DB74();
    if (byte_255793287 < 0)
    {
      sub_223197FA4(&xmmword_255793258, (void *)qword_255793270, unk_255793278);
    }
    else
    {
      xmmword_255793258 = *(_OWORD *)&qword_255793270;
      unk_255793268 = unk_255793280;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793258, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2E0);
  }
}

void sub_22363DB5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2E0);
  _Unwind_Resume(a1);
}

void sub_22363DB74()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB2E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2E8))
  {
    sub_22363DC54(__p);
    sub_223628CB8((std::string *)&qword_255793270, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793270, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2E8);
  }
}

void sub_22363DC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB2E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB2E8);
  _Unwind_Resume(a1);
}

void sub_22363DC54(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB2F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<void>]", qword_255793288);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793288, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB2F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB2F8))
  {
    v5 = sub_2231A38CC(qword_255793288, "<", 0);
    sub_2231A37C8(qword_255793288, 0, v5, qword_2557932A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557932A0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB2F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB300);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB300))
  {
    sub_224573040((uint64_t)qword_2557932A0, (uint64_t)&xmmword_2557932B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557932B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB300);
  }
  if (byte_2557932CF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557932B8, *((unint64_t *)&xmmword_2557932B8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557932B8;
    __dst[2] = unk_2557932C8;
  }
}

void sub_22363DDE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB300);
  _Unwind_Resume(a1);
}

void sub_22363DE00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2F8);
  _Unwind_Resume(a1);
}

void sub_22363DE18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB2F0);
  _Unwind_Resume(a1);
}

void sub_22363DE30()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB308);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB308))
  {
    sub_22363DEEC();
    if (byte_255793317 < 0)
    {
      sub_223197FA4(&xmmword_2557932D0, (void *)xmmword_255793300, *((unint64_t *)&xmmword_255793300 + 1));
    }
    else
    {
      xmmword_2557932D0 = xmmword_255793300;
      unk_2557932E0 = unk_255793310;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557932D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB308);
  }
}

void sub_22363DED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB308);
  _Unwind_Resume(a1);
}

void sub_22363DEEC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB310);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB310))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::SpatialMappingResetVolumeRequest &)]", qword_2557932E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557932E8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB310);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB318);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB318))
    {
      sub_224573040((uint64_t)qword_2557932E8, (uint64_t)&xmmword_255793300);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793300, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB318);
    }
  }
}

void sub_22363DFC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB318);
  _Unwind_Resume(a1);
}

void sub_22363DFDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB310);
  _Unwind_Resume(a1);
}

void sub_22363DFF4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB320))
  {
    sub_22363E150();
    v1 = byte_255793347;
    if (byte_255793347 >= 0)
      v2 = byte_255793347;
    else
      v2 = qword_255793338;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793318 + 1) = v2 + 1;
      unk_255793328 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793318 = v4;
    }
    else
    {
      v4 = &xmmword_255793318;
      unk_255793328 = 0;
      xmmword_255793318 = 0uLL;
      byte_25579332F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793318, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB320);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255793330;
    else
      v7 = (uint64_t *)qword_255793330;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22363E138(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB320);
  _Unwind_Resume(a1);
}

void sub_22363E150()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB328);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB328))
  {
    sub_22363E2C8();
    v1 = byte_25579335F;
    if (byte_25579335F >= 0)
      v2 = byte_25579335F;
    else
      v2 = *((_QWORD *)&xmmword_255793348 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255793338 = v2 + 6;
      unk_255793340 = v6 | 0x8000000000000000;
      qword_255793330 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255793338 = 0;
      unk_255793340 = 0;
      qword_255793330 = 0x2074736E6F63;
      byte_255793347 = v2 + 6;
      v4 = (char *)&qword_255793330 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793330, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB328);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255793348;
    else
      v8 = (__int128 *)xmmword_255793348;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22363E2B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB328);
  _Unwind_Resume(a1);
}

void sub_22363E2C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB330);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB330))
  {
    sub_22363E384();
    if (byte_255793377 < 0)
    {
      sub_223197FA4(&xmmword_255793348, (void *)qword_255793360, unk_255793368);
    }
    else
    {
      xmmword_255793348 = *(_OWORD *)&qword_255793360;
      unk_255793358 = unk_255793370;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793348, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB330);
  }
}

void sub_22363E36C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB330);
  _Unwind_Resume(a1);
}

void sub_22363E384()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB338))
  {
    sub_22363E574(__p);
    sub_22363E464((char *)__p, (std::string *)&qword_255793360);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793360, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB338);
  }
}

void sub_22363E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB338);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB338);
  _Unwind_Resume(a1);
}

void sub_22363E464(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"BOOL";
  v12 = 0x400000000000000;
  sub_22319BD1C(&__p, (uint64_t)v11, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_22363E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22363E574(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB340);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB340))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<BOOL>]", qword_255793378);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793378, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB340);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB348);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB348))
  {
    v5 = sub_2231A38CC(qword_255793378, "<", 0);
    sub_2231A37C8(qword_255793378, 0, v5, qword_255793390);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793390, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB348);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB350);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB350))
  {
    sub_224573040((uint64_t)qword_255793390, (uint64_t)&xmmword_2557933A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557933A8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB350);
  }
  if (byte_2557933BF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557933A8, *((unint64_t *)&xmmword_2557933A8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557933A8;
    __dst[2] = unk_2557933B8;
  }
}

void sub_22363E708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB350);
  _Unwind_Resume(a1);
}

void sub_22363E720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB348);
  _Unwind_Resume(a1);
}

void sub_22363E738(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB340);
  _Unwind_Resume(a1);
}

void sub_22363E750()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB358))
  {
    sub_22363E80C();
    if (byte_255793407 < 0)
    {
      sub_223197FA4(&xmmword_2557933C0, (void *)xmmword_2557933F0, *((unint64_t *)&xmmword_2557933F0 + 1));
    }
    else
    {
      xmmword_2557933C0 = xmmword_2557933F0;
      unk_2557933D0 = unk_255793400;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557933C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB358);
  }
}

void sub_22363E7F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB358);
  _Unwind_Resume(a1);
}

void sub_22363E80C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB360);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB360))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::SaveDiagnosticDataRequest &)]", qword_2557933D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557933D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB360);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB368);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB368))
    {
      sub_224573040((uint64_t)qword_2557933D8, (uint64_t)&xmmword_2557933F0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557933F0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB368);
    }
  }
}

void sub_22363E8E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB368);
  _Unwind_Resume(a1);
}

void sub_22363E8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB360);
  _Unwind_Resume(a1);
}

void sub_22363E914()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB370);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB370))
  {
    sub_22363E9D0();
    if (byte_25579344F < 0)
    {
      sub_223197FA4(&xmmword_255793408, (void *)xmmword_255793438, *((unint64_t *)&xmmword_255793438 + 1));
    }
    else
    {
      xmmword_255793408 = xmmword_255793438;
      unk_255793418 = unk_255793448;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793408, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB370);
  }
}

void sub_22363E9B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB370);
  _Unwind_Resume(a1);
}

void sub_22363E9D0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB378))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::SaveMeshesRequest &)]", qword_255793420);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793420, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB378);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB380);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB380))
    {
      sub_224573040((uint64_t)qword_255793420, (uint64_t)&xmmword_255793438);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793438, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB380);
    }
  }
}

void sub_22363EAA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB380);
  _Unwind_Resume(a1);
}

void sub_22363EAC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB378);
  _Unwind_Resume(a1);
}

void sub_22363EAD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB388);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB388))
  {
    sub_22363EB94();
    if (byte_255793497 < 0)
    {
      sub_223197FA4(&xmmword_255793450, (void *)xmmword_255793480, *((unint64_t *)&xmmword_255793480 + 1));
    }
    else
    {
      xmmword_255793450 = xmmword_255793480;
      unk_255793460 = unk_255793490;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793450, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB388);
  }
}

void sub_22363EB7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB388);
  _Unwind_Resume(a1);
}

void sub_22363EB94()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB390))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeMeshUpdateResult (const cv3d::recon::sng::SpatialMappingRemeshRequest &)]", qword_255793468);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793468, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB390);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB398);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB398))
    {
      sub_224573040((uint64_t)qword_255793468, (uint64_t)&xmmword_255793480);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793480, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB398);
    }
  }
}

void sub_22363EC6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB398);
  _Unwind_Resume(a1);
}

void sub_22363EC84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB390);
  _Unwind_Resume(a1);
}

void sub_22363EC9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3A0))
  {
    sub_22363ED58();
    if (byte_2557934DF < 0)
    {
      sub_223197FA4(&xmmword_255793498, (void *)xmmword_2557934C8, *((unint64_t *)&xmmword_2557934C8 + 1));
    }
    else
    {
      xmmword_255793498 = xmmword_2557934C8;
      unk_2557934A8 = unk_2557934D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793498, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3A0);
  }
}

void sub_22363ED40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3A0);
  _Unwind_Resume(a1);
}

void sub_22363ED58()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalMeshResult (const cv3d::recon::sng::MeshingNodeGlobalMeshRequest &)]", qword_2557934B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557934B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB3B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB3B0))
    {
      sub_224573040((uint64_t)qword_2557934B0, (uint64_t)&xmmword_2557934C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557934C8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB3B0);
    }
  }
}

void sub_22363EE30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3B0);
  _Unwind_Resume(a1);
}

void sub_22363EE48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3A8);
  _Unwind_Resume(a1);
}

void sub_22363EE60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3B8))
  {
    sub_22363EF1C();
    if (byte_255793527 < 0)
    {
      sub_223197FA4(&xmmword_2557934E0, (void *)xmmword_255793510, *((unint64_t *)&xmmword_255793510 + 1));
    }
    else
    {
      xmmword_2557934E0 = xmmword_255793510;
      unk_2557934F0 = unk_255793520;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557934E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3B8);
  }
}

void sub_22363EF04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3B8);
  _Unwind_Resume(a1);
}

void sub_22363EF1C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3C0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyMeshResult (const cv3d::recon::sng::MeshingNodeOccupancyMeshRequest &)]", qword_2557934F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557934F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB3C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB3C8))
    {
      sub_224573040((uint64_t)qword_2557934F8, (uint64_t)&xmmword_255793510);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793510, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB3C8);
    }
  }
}

void sub_22363EFF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3C8);
  _Unwind_Resume(a1);
}

void sub_22363F00C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3C0);
  _Unwind_Resume(a1);
}

void sub_22363F024()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3D0))
  {
    sub_22363F0E0();
    if (byte_25579356F < 0)
    {
      sub_223197FA4(&xmmword_255793528, (void *)xmmword_255793558, *((unint64_t *)&xmmword_255793558 + 1));
    }
    else
    {
      xmmword_255793528 = xmmword_255793558;
      unk_255793538 = unk_255793568;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793528, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3D0);
  }
}

void sub_22363F0C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3D0);
  _Unwind_Resume(a1);
}

void sub_22363F0E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3D8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshResult (const cv3d::recon::sng::MeshingNodeGlobalOccupancyMeshRequest &)]", qword_255793540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793540, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB3E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB3E0))
    {
      sub_224573040((uint64_t)qword_255793540, (uint64_t)&xmmword_255793558);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793558, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB3E0);
    }
  }
}

void sub_22363F1B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3E0);
  _Unwind_Resume(a1);
}

void sub_22363F1D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3D8);
  _Unwind_Resume(a1);
}

void sub_22363F1E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3E8))
  {
    sub_22363F2A4();
    if (byte_2557935B7 < 0)
    {
      sub_223197FA4(&xmmword_255793570, (void *)xmmword_2557935A0, *((unint64_t *)&xmmword_2557935A0 + 1));
    }
    else
    {
      xmmword_255793570 = xmmword_2557935A0;
      unk_255793580 = unk_2557935B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793570, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3E8);
  }
}

void sub_22363F28C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3E8);
  _Unwind_Resume(a1);
}

void sub_22363F2A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB3F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB3F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyBlockMeshResult (const cv3d::recon::sng::MeshingNodeOccupancyBlockMeshRequest &)]", qword_255793588);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793588, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB3F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB3F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB3F8))
    {
      sub_224573040((uint64_t)qword_255793588, (uint64_t)&xmmword_2557935A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557935A0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB3F8);
    }
  }
}

void sub_22363F37C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3F8);
  _Unwind_Resume(a1);
}

void sub_22363F394(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB3F0);
  _Unwind_Resume(a1);
}

void sub_22363F3AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB400);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB400))
  {
    sub_22363F468();
    if (byte_2557935FF < 0)
    {
      sub_223197FA4(&xmmword_2557935B8, (void *)xmmword_2557935E8, *((unint64_t *)&xmmword_2557935E8 + 1));
    }
    else
    {
      xmmword_2557935B8 = xmmword_2557935E8;
      unk_2557935C8 = unk_2557935F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557935B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB400);
  }
}

void sub_22363F450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB400);
  _Unwind_Resume(a1);
}

void sub_22363F468()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB408);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB408))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<const std::vector<cv3d::acv::surfacedetection::ContinuousTrackingResult>> &)]", qword_2557935D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557935D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB408);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB410);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB410))
    {
      sub_224573040((uint64_t)qword_2557935D0, (uint64_t)&xmmword_2557935E8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557935E8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB410);
    }
  }
}

void sub_22363F540(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB410);
  _Unwind_Resume(a1);
}

void sub_22363F558(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB408);
  _Unwind_Resume(a1);
}

void sub_22363F570()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB418))
  {
    sub_22363F62C();
    if (byte_255793647 < 0)
    {
      sub_223197FA4(&xmmword_255793600, (void *)xmmword_255793630, *((unint64_t *)&xmmword_255793630 + 1));
    }
    else
    {
      xmmword_255793600 = xmmword_255793630;
      unk_255793610 = unk_255793640;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793600, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB418);
  }
}

void sub_22363F614(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB418);
  _Unwind_Resume(a1);
}

void sub_22363F62C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB420);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB420))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::recon::sng::MeshingNodeMeshUpdateResult> (const std::experimental::expected<std::shared_ptr<const cv3d::recon::kfplanes::PlaneDetectionResult>, cv3d::esn::Error> &)]", qword_255793618);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793618, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB420);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB428);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB428))
    {
      sub_224573040((uint64_t)qword_255793618, (uint64_t)&xmmword_255793630);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793630, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB428);
    }
  }
}

void sub_22363F704(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB428);
  _Unwind_Resume(a1);
}

void sub_22363F71C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB420);
  _Unwind_Resume(a1);
}

void sub_22363F734()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB430);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB430))
  {
    sub_22363F7F0();
    if (byte_25579368F < 0)
    {
      sub_223197FA4(&xmmword_255793648, (void *)xmmword_255793678, *((unint64_t *)&xmmword_255793678 + 1));
    }
    else
    {
      xmmword_255793648 = xmmword_255793678;
      unk_255793658 = unk_255793688;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793648, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB430);
  }
}

void sub_22363F7D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB430);
  _Unwind_Resume(a1);
}

void sub_22363F7F0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB438);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB438))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::MeshingNodeOccupancyResult (const cv3d::recon::sng::MeshingNodeOccupancyRequest &)]", qword_255793660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793660, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB438);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB440);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB440))
    {
      sub_224573040((uint64_t)qword_255793660, (uint64_t)&xmmword_255793678);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793678, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB440);
    }
  }
}

void sub_22363F8C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB440);
  _Unwind_Resume(a1);
}

void sub_22363F8E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB438);
  _Unwind_Resume(a1);
}

void sub_22363F8F8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB448);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB448))
  {
    sub_22363FA54();
    v1 = byte_2557936BF;
    if (byte_2557936BF >= 0)
      v2 = byte_2557936BF;
    else
      v2 = qword_2557936B0;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793690 + 1) = v2 + 1;
      unk_2557936A0 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793690 = v4;
    }
    else
    {
      v4 = &xmmword_255793690;
      unk_2557936A0 = 0;
      xmmword_255793690 = 0uLL;
      byte_2557936A7 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793690, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB448);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_2557936A8;
    else
      v7 = (uint64_t *)qword_2557936A8;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22363FA3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB448);
  _Unwind_Resume(a1);
}

void sub_22363FA54()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB450);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB450))
  {
    sub_22363FBCC();
    v1 = byte_2557936D7;
    if (byte_2557936D7 >= 0)
      v2 = byte_2557936D7;
    else
      v2 = *((_QWORD *)&xmmword_2557936C0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_2557936B0 = v2 + 6;
      unk_2557936B8 = v6 | 0x8000000000000000;
      qword_2557936A8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_2557936B0 = 0;
      unk_2557936B8 = 0;
      qword_2557936A8 = 0x2074736E6F63;
      byte_2557936BF = v2 + 6;
      v4 = (char *)&qword_2557936A8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557936A8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB450);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_2557936C0;
    else
      v8 = (__int128 *)xmmword_2557936C0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22363FBB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB450);
  _Unwind_Resume(a1);
}

void sub_22363FBCC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB458);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB458))
  {
    sub_22363FC88();
    if (byte_2557936EF < 0)
    {
      sub_223197FA4(&xmmword_2557936C0, (void *)qword_2557936D8, unk_2557936E0);
    }
    else
    {
      xmmword_2557936C0 = *(_OWORD *)&qword_2557936D8;
      unk_2557936D0 = unk_2557936E8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557936C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB458);
  }
}

void sub_22363FC70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB458);
  _Unwind_Resume(a1);
}

void sub_22363FC88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB460))
  {
    sub_22363FF4C(__p);
    sub_22363FD60((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557936D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB460);
  }
}

void sub_22363FD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB460);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB460);
  _Unwind_Resume(a1);
}

void sub_22363FD60(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB468);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB468))
  {
    sub_223174DE4(v10, "std::vector");
    sub_223640128((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557936F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB468);
  }
  if (byte_255793707 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557936F0, *((unint64_t *)&xmmword_2557936F0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557936F0;
    v13 = unk_255793700;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2557936D8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_22363FEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB468);
  _Unwind_Resume(a1);
}

void sub_22363FF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_22319BB48((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22363FF4C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB488);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB488))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::vector<cv3d::esn::random::UUID>>]", qword_255793750);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793750, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB488);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB490);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB490))
  {
    v5 = sub_2231A38CC(qword_255793750, "<", 0);
    sub_2231A37C8(qword_255793750, 0, v5, qword_255793768);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793768, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB490);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB498);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB498))
  {
    sub_224573040((uint64_t)qword_255793768, (uint64_t)&xmmword_255793780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793780, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB498);
  }
  if (byte_255793797 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793780, *((unint64_t *)&xmmword_255793780 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793780;
    __dst[2] = unk_255793790;
  }
}

void sub_2236400E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB498);
  _Unwind_Resume(a1);
}

void sub_2236400F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB490);
  _Unwind_Resume(a1);
}

void sub_223640110(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB488);
  _Unwind_Resume(a1);
}

void sub_223640128(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB470);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB470))
  {
    sub_223640300();
    if (byte_25579374F < 0)
    {
      sub_223197FA4(&xmmword_255793708, (void *)xmmword_255793738, *((unint64_t *)&xmmword_255793738 + 1));
    }
    else
    {
      xmmword_255793708 = xmmword_255793738;
      unk_255793718 = unk_255793748;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793708, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB470);
  }
  if (byte_25579371F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793708, *((unint64_t *)&xmmword_255793708 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793708;
    v11 = unk_255793718;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&xmmword_2557936F0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_2236402B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB470);
  _Unwind_Resume(a1);
}

void sub_2236402D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223640300()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB478);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB478))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::esn::random::UUID]", qword_255793720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793720, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB478);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB480);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB480))
    {
      sub_224573040((uint64_t)qword_255793720, (uint64_t)&xmmword_255793738);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793738, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB480);
    }
  }
}

void sub_2236403D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB480);
  _Unwind_Resume(a1);
}

void sub_2236403F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB478);
  _Unwind_Resume(a1);
}

void sub_223640408()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB4A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4A0))
  {
    sub_2236404C4();
    if (byte_2557937DF < 0)
    {
      sub_223197FA4(&xmmword_255793798, (void *)xmmword_2557937C8, *((unint64_t *)&xmmword_2557937C8 + 1));
    }
    else
    {
      xmmword_255793798 = xmmword_2557937C8;
      unk_2557937A8 = unk_2557937D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793798, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB4A0);
  }
}

void sub_2236404AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB4A0);
  _Unwind_Resume(a1);
}

void sub_2236404C4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB4A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB4A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::esn::random::UUID> (const cv3d::recon::sng::GetListOfChunkUUIDInBoundingBoxRequest &)]", qword_2557937B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557937B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB4A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB4B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB4B0))
    {
      sub_224573040((uint64_t)qword_2557937B0, (uint64_t)&xmmword_2557937C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557937C8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB4B0);
    }
  }
}

void sub_22364059C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB4B0);
  _Unwind_Resume(a1);
}

void sub_2236405B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB4A8);
  _Unwind_Resume(a1);
}

void sub_2236405CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB508);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB508))
  {
    sub_223640688();
    if (byte_255793917 < 0)
    {
      sub_223197FA4(&xmmword_2557938D0, (void *)xmmword_255793900, *((unint64_t *)&xmmword_255793900 + 1));
    }
    else
    {
      xmmword_2557938D0 = xmmword_255793900;
      unk_2557938E0 = unk_255793910;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557938D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB508);
  }
}

void sub_223640670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB508);
  _Unwind_Resume(a1);
}

void sub_223640688()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB510);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB510))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::frame::MappedStateBundle (const cv3d::recon::frame::MappedStateRequest &)]", qword_2557938E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557938E8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB510);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB518);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB518))
    {
      sub_224573040((uint64_t)qword_2557938E8, (uint64_t)&xmmword_255793900);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793900, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB518);
    }
  }
}

void sub_223640760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB518);
  _Unwind_Resume(a1);
}

void sub_223640778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB510);
  _Unwind_Resume(a1);
}

void sub_223640790()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB520);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB520))
  {
    sub_2236408EC();
    v1 = byte_255793947;
    if (byte_255793947 >= 0)
      v2 = byte_255793947;
    else
      v2 = qword_255793938;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793918 + 1) = v2 + 1;
      unk_255793928 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793918 = v4;
    }
    else
    {
      v4 = &xmmword_255793918;
      unk_255793928 = 0;
      xmmword_255793918 = 0uLL;
      byte_25579392F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793918, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB520);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255793930;
    else
      v7 = (uint64_t *)qword_255793930;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_2236408D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB520);
  _Unwind_Resume(a1);
}

void sub_2236408EC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB528);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB528))
  {
    sub_223640A64();
    v1 = byte_25579395F;
    if (byte_25579395F >= 0)
      v2 = byte_25579395F;
    else
      v2 = *((_QWORD *)&xmmword_255793948 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255793938 = v2 + 6;
      unk_255793940 = v6 | 0x8000000000000000;
      qword_255793930 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255793938 = 0;
      unk_255793940 = 0;
      qword_255793930 = 0x2074736E6F63;
      byte_255793947 = v2 + 6;
      v4 = (char *)&qword_255793930 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793930, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB528);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255793948;
    else
      v8 = (__int128 *)xmmword_255793948;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223640A4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB528);
  _Unwind_Resume(a1);
}

void sub_223640A64()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB530))
  {
    sub_223640B20();
    if (byte_255793977 < 0)
    {
      sub_223197FA4(&xmmword_255793948, (void *)qword_255793960, unk_255793968);
    }
    else
    {
      xmmword_255793948 = *(_OWORD *)&qword_255793960;
      unk_255793958 = unk_255793970;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793948, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB530);
  }
}

void sub_223640B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB530);
  _Unwind_Resume(a1);
}

void sub_223640B20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB538);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB538))
  {
    sub_223640DD0(__p);
    sub_223640BF8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793960, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB538);
  }
}

void sub_223640BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB538);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB538);
  _Unwind_Resume(a1);
}

void sub_223640BF8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB540);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB540))
  {
    sub_223640FAC();
    if (byte_2557939BF < 0)
    {
      sub_223197FA4(&xmmword_255793978, (void *)xmmword_2557939A8, *((unint64_t *)&xmmword_2557939A8 + 1));
    }
    else
    {
      xmmword_255793978 = xmmword_2557939A8;
      unk_255793988 = unk_2557939B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793978, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB540);
  }
  if (byte_25579398F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793978, *((unint64_t *)&xmmword_255793978 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793978;
    v11 = unk_255793988;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255793960, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223640D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB540);
  _Unwind_Resume(a1);
}

void sub_223640DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223640DD0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB558))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::vlm::PRRResult>]", qword_2557939C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557939C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB558);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB560);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB560))
  {
    v5 = sub_2231A38CC(qword_2557939C0, "<", 0);
    sub_2231A37C8(qword_2557939C0, 0, v5, qword_2557939D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557939D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB560);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB568);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB568))
  {
    sub_224573040((uint64_t)qword_2557939D8, (uint64_t)&xmmword_2557939F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557939F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB568);
  }
  if (byte_255793A07 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557939F0, *((unint64_t *)&xmmword_2557939F0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557939F0;
    __dst[2] = unk_255793A00;
  }
}

void sub_223640F64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB568);
  _Unwind_Resume(a1);
}

void sub_223640F7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB560);
  _Unwind_Resume(a1);
}

void sub_223640F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB558);
  _Unwind_Resume(a1);
}

void sub_223640FAC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB548);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB548))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::vlm::PRRResult]", qword_255793990);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793990, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB548);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB550);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB550))
    {
      sub_224573040((uint64_t)qword_255793990, (uint64_t)&xmmword_2557939A8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557939A8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB550);
    }
  }
}

void sub_223641084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB550);
  _Unwind_Resume(a1);
}

void sub_22364109C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB548);
  _Unwind_Resume(a1);
}

void sub_2236410B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB570);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB570))
  {
    sub_223641170();
    if (byte_255793A4F < 0)
    {
      sub_223197FA4(&xmmword_255793A08, (void *)xmmword_255793A38, *((unint64_t *)&xmmword_255793A38 + 1));
    }
    else
    {
      xmmword_255793A08 = xmmword_255793A38;
      unk_255793A18 = unk_255793A48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793A08, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB570);
  }
}

void sub_223641158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB570);
  _Unwind_Resume(a1);
}

void sub_223641170()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB578);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB578))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::vlm::PRRResult (const cv3d::recon::sng::PRRQuery &)]", qword_255793A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793A20, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB578);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB580);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB580))
    {
      sub_224573040((uint64_t)qword_255793A20, (uint64_t)&xmmword_255793A38);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793A38, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB580);
    }
  }
}

void sub_223641248(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB580);
  _Unwind_Resume(a1);
}

void sub_223641260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB578);
  _Unwind_Resume(a1);
}

void sub_223641278()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB588);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB588))
  {
    sub_223641334();
    if (byte_255793A97 < 0)
    {
      sub_223197FA4(&xmmword_255793A50, (void *)xmmword_255793A80, *((unint64_t *)&xmmword_255793A80 + 1));
    }
    else
    {
      xmmword_255793A50 = xmmword_255793A80;
      unk_255793A60 = unk_255793A90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793A50, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB588);
  }
}

void sub_22364131C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB588);
  _Unwind_Resume(a1);
}

void sub_223641334()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB590);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB590))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::vlm::PRRResult (const cv3d::recon::sng::SyntheticPRRQuery &)]", qword_255793A68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793A68, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB590);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB598);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB598))
    {
      sub_224573040((uint64_t)qword_255793A68, (uint64_t)&xmmword_255793A80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793A80, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB598);
    }
  }
}

void sub_22364140C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB598);
  _Unwind_Resume(a1);
}

void sub_223641424(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB590);
  _Unwind_Resume(a1);
}

void sub_22364143C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5A0))
  {
    sub_2236414F8();
    if (byte_255793ADF < 0)
    {
      sub_223197FA4(&xmmword_255793A98, (void *)xmmword_255793AC8, *((unint64_t *)&xmmword_255793AC8 + 1));
    }
    else
    {
      xmmword_255793A98 = xmmword_255793AC8;
      unk_255793AA8 = unk_255793AD8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793A98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5A0);
  }
}

void sub_2236414E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5A0);
  _Unwind_Resume(a1);
}

void sub_2236414F8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::chrono::duration<double> &)]", qword_255793AB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793AB0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB5B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB5B0))
    {
      sub_224573040((uint64_t)qword_255793AB0, (uint64_t)&xmmword_255793AC8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793AC8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB5B0);
    }
  }
}

void sub_2236415D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5B0);
  _Unwind_Resume(a1);
}

void sub_2236415E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5A8);
  _Unwind_Resume(a1);
}

void sub_223641600()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5B8))
  {
    sub_2236416BC();
    if (byte_255793B27 < 0)
    {
      sub_223197FA4(&xmmword_255793AE0, (void *)xmmword_255793B10, *((unint64_t *)&xmmword_255793B10 + 1));
    }
    else
    {
      xmmword_255793AE0 = xmmword_255793B10;
      unk_255793AF0 = unk_255793B20;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793AE0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5B8);
  }
}

void sub_2236416A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5B8);
  _Unwind_Resume(a1);
}

void sub_2236416BC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5C0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const double &)]", qword_255793AF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793AF8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB5C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB5C8))
    {
      sub_224573040((uint64_t)qword_255793AF8, (uint64_t)&xmmword_255793B10);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793B10, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB5C8);
    }
  }
}

void sub_223641794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5C8);
  _Unwind_Resume(a1);
}

void sub_2236417AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5C0);
  _Unwind_Resume(a1);
}

void sub_2236417C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5D0))
  {
    sub_223641880();
    if (byte_255793B6F < 0)
    {
      sub_223197FA4(&xmmword_255793B28, (void *)xmmword_255793B58, *((unint64_t *)&xmmword_255793B58 + 1));
    }
    else
    {
      xmmword_255793B28 = xmmword_255793B58;
      unk_255793B38 = unk_255793B68;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793B28, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5D0);
  }
}

void sub_223641868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5D0);
  _Unwind_Resume(a1);
}

void sub_223641880()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5D8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::EnableMeshPlaneHarmonyRequest &)]", qword_255793B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793B40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB5E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB5E0))
    {
      sub_224573040((uint64_t)qword_255793B40, (uint64_t)&xmmword_255793B58);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793B58, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB5E0);
    }
  }
}

void sub_223641958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5E0);
  _Unwind_Resume(a1);
}

void sub_223641970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5D8);
  _Unwind_Resume(a1);
}

void sub_223641988()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5E8))
  {
    sub_223641A44();
    if (byte_255793BB7 < 0)
    {
      sub_223197FA4(&xmmword_255793B70, (void *)xmmword_255793BA0, *((unint64_t *)&xmmword_255793BA0 + 1));
    }
    else
    {
      xmmword_255793B70 = xmmword_255793BA0;
      unk_255793B80 = unk_255793BB0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793B70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5E8);
  }
}

void sub_223641A2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5E8);
  _Unwind_Resume(a1);
}

void sub_223641A44()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB5F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB5F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::MappingAttribute &)]", qword_255793B88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793B88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB5F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB5F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB5F8))
    {
      sub_224573040((uint64_t)qword_255793B88, (uint64_t)&xmmword_255793BA0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793BA0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB5F8);
    }
  }
}

void sub_223641B1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5F8);
  _Unwind_Resume(a1);
}

void sub_223641B34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB5F0);
  _Unwind_Resume(a1);
}

void sub_223641B4C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB600);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB600))
  {
    sub_223641C08();
    if (byte_255793BFF < 0)
    {
      sub_223197FA4(&xmmword_255793BB8, (void *)xmmword_255793BE8, *((unint64_t *)&xmmword_255793BE8 + 1));
    }
    else
    {
      xmmword_255793BB8 = xmmword_255793BE8;
      unk_255793BC8 = unk_255793BF8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793BB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB600);
  }
}

void sub_223641BF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB600);
  _Unwind_Resume(a1);
}

void sub_223641C08()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB608))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::EnablePRRRequest &)]", qword_255793BD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793BD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB608);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB610);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB610))
    {
      sub_224573040((uint64_t)qword_255793BD0, (uint64_t)&xmmword_255793BE8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793BE8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB610);
    }
  }
}

void sub_223641CE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB610);
  _Unwind_Resume(a1);
}

void sub_223641CF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB608);
  _Unwind_Resume(a1);
}

void sub_223641D10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB618))
  {
    sub_223641DCC();
    if (byte_255793C47 < 0)
    {
      sub_223197FA4(&xmmword_255793C00, (void *)xmmword_255793C30, *((unint64_t *)&xmmword_255793C30 + 1));
    }
    else
    {
      xmmword_255793C00 = xmmword_255793C30;
      unk_255793C10 = unk_255793C40;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793C00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB618);
  }
}

void sub_223641DB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB618);
  _Unwind_Resume(a1);
}

void sub_223641DCC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB620);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB620))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::EnableSpatialSubdivisionRequest &)]", qword_255793C18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793C18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB620);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB628);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB628))
    {
      sub_224573040((uint64_t)qword_255793C18, (uint64_t)&xmmword_255793C30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793C30, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB628);
    }
  }
}

void sub_223641EA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB628);
  _Unwind_Resume(a1);
}

void sub_223641EBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB620);
  _Unwind_Resume(a1);
}

void sub_223641ED4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB630);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB630))
  {
    sub_223641FA0();
    if (byte_255793C8F < 0)
    {
      sub_223197FA4(&xmmword_255793C48, (void *)xmmword_255793C78, *((unint64_t *)&xmmword_255793C78 + 1));
    }
    else
    {
      xmmword_255793C48 = xmmword_255793C78;
      unk_255793C58 = unk_255793C88;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793C48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB630);
  }
}

void sub_223641F88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB630);
  _Unwind_Resume(a1);
}

void sub_223641FA0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB638))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::EnableOccupancyByProximityRequest &)]", qword_255793C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793C60, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB638);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB640);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB640))
    {
      sub_224573040((uint64_t)qword_255793C60, (uint64_t)&xmmword_255793C78);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793C78, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB640);
    }
  }
}

void sub_223642078(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB640);
  _Unwind_Resume(a1);
}

void sub_223642090(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB638);
  _Unwind_Resume(a1);
}

void sub_2236420A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  void **v6;
  char *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  uint64_t v24;
  int v25;
  size_t size;
  unint64_t v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *p_dst;
  unint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  char *v38;
  int v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  void **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  void **v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  char *v68;
  void **v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  void **v79;
  char *v80;
  void **v81;
  char *v82;
  uint64_t v85;
  int v86;
  size_t v87;
  unint64_t v88;
  std::string *v89;
  uint64_t v90;
  uint64_t v91;
  std::string *v92;
  unint64_t v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  char *v99;
  int v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  void **v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  int v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  void **v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void **v128;
  char *v129;
  void **v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  char *v138;
  uint64_t v139;
  void **v140;
  char *v141;
  void **v142;
  char *v143;
  uint64_t v146;
  int v147;
  size_t v148;
  unint64_t v149;
  std::string *v150;
  uint64_t v151;
  uint64_t v152;
  std::string *v153;
  unint64_t v154;
  void *v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  char *v160;
  int v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  void **v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  int v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  void **v177;
  unint64_t *v178;
  unint64_t v179;
  void **v180;
  void *v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  char *v190;
  void **v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  char *v199;
  uint64_t v200;
  void **v201;
  char *v202;
  void **v203;
  char *v204;
  uint64_t v207;
  int v208;
  size_t v209;
  unint64_t v210;
  std::string *v211;
  uint64_t v212;
  uint64_t v213;
  std::string *v214;
  unint64_t v215;
  void *v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  char *v221;
  int v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  void **v226;
  unint64_t *v227;
  unint64_t v228;
  void **v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  int v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  void **v238;
  unint64_t *v239;
  unint64_t v240;
  void **v241;
  void *v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void **v250;
  char *v251;
  void **v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  char *v260;
  uint64_t v261;
  void **v262;
  char *v263;
  void **v264;
  char *v265;
  uint64_t v268;
  int v269;
  size_t v270;
  unint64_t v271;
  std::string *v272;
  uint64_t v273;
  uint64_t v274;
  std::string *v275;
  unint64_t v276;
  void *v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  std::__shared_weak_count *v281;
  char *v282;
  int v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  void **v287;
  unint64_t *v288;
  unint64_t v289;
  void **v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  int v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  void **v299;
  unint64_t *v300;
  unint64_t v301;
  void **v302;
  void *v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void **v311;
  char *v312;
  void **v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  char *v321;
  uint64_t v322;
  void **v323;
  char *v324;
  void **v325;
  char *v326;
  uint64_t v329;
  int v330;
  size_t v331;
  unint64_t v332;
  std::string *v333;
  uint64_t v334;
  uint64_t v335;
  std::string *v336;
  unint64_t v337;
  void *v338;
  __int128 v339;
  uint64_t v340;
  __int128 v341;
  std::__shared_weak_count *v342;
  char *v343;
  int v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  uint64_t v347;
  void **v348;
  unint64_t *v349;
  unint64_t v350;
  void **v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  int v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  void **v360;
  unint64_t *v361;
  unint64_t v362;
  void **v363;
  void *v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void **v372;
  char *v373;
  void **v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  void *v378;
  __int128 v379;
  uint64_t v380;
  __int128 v381;
  char *v382;
  uint64_t v383;
  void **v384;
  char *v385;
  void **v386;
  char *v387;
  uint64_t v390;
  int v391;
  size_t v392;
  unint64_t v393;
  std::string *v394;
  uint64_t v395;
  uint64_t v396;
  std::string *v397;
  unint64_t v398;
  void *v399;
  __int128 v400;
  uint64_t v401;
  __int128 v402;
  std::__shared_weak_count *v403;
  char *v404;
  int v405;
  std::__shared_weak_count *v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  void **v409;
  unint64_t *v410;
  unint64_t v411;
  void **v412;
  uint64_t v413;
  unint64_t v414;
  char *v415;
  int v416;
  std::__shared_weak_count *v417;
  std::__shared_weak_count *v418;
  std::__shared_weak_count *v419;
  uint64_t v420;
  void **v421;
  unint64_t *v422;
  unint64_t v423;
  void **v424;
  void *v425;
  uint64_t v426;
  unint64_t v427;
  char *v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void **v433;
  char *v434;
  void **v435;
  char *v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  __int128 v440;
  uint64_t v441;
  __int128 v442;
  char *v443;
  uint64_t v444;
  void **v445;
  char *v446;
  void **v447;
  char *v448;
  uint64_t v451;
  int v452;
  size_t v453;
  unint64_t v454;
  std::string *v455;
  uint64_t v456;
  uint64_t v457;
  std::string *v458;
  unint64_t v459;
  void *v460;
  __int128 v461;
  uint64_t v462;
  __int128 v463;
  std::__shared_weak_count *v464;
  char *v465;
  int v466;
  std::__shared_weak_count *v467;
  std::__shared_weak_count *v468;
  uint64_t v469;
  void **v470;
  unint64_t *v471;
  unint64_t v472;
  void **v473;
  uint64_t v474;
  unint64_t v475;
  char *v476;
  int v477;
  std::__shared_weak_count *v478;
  std::__shared_weak_count *v479;
  std::__shared_weak_count *v480;
  uint64_t v481;
  void **v482;
  unint64_t *v483;
  unint64_t v484;
  void **v485;
  void *v486;
  uint64_t v487;
  unint64_t v488;
  char *v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void **v494;
  char *v495;
  void **v496;
  char *v497;
  uint64_t v498;
  unint64_t v499;
  void *v500;
  __int128 v501;
  uint64_t v502;
  __int128 v503;
  char *v504;
  uint64_t v505;
  void **v506;
  char *v507;
  void **v508;
  char *v509;
  uint64_t v512;
  int v513;
  size_t v514;
  unint64_t v515;
  std::string *v516;
  uint64_t v517;
  uint64_t v518;
  std::string *v519;
  unint64_t v520;
  void *v521;
  __int128 v522;
  uint64_t v523;
  __int128 v524;
  std::__shared_weak_count *v525;
  char *v526;
  int v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  uint64_t v530;
  void **v531;
  unint64_t *v532;
  unint64_t v533;
  void **v534;
  uint64_t v535;
  unint64_t v536;
  char *v537;
  int v538;
  std::__shared_weak_count *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count *v541;
  uint64_t v542;
  void **v543;
  unint64_t *v544;
  unint64_t v545;
  void **v546;
  void *v547;
  uint64_t v548;
  unint64_t v549;
  char *v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void **v555;
  char *v556;
  void **v557;
  char *v558;
  uint64_t v559;
  unint64_t v560;
  void *v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  char *v565;
  uint64_t v566;
  void **v567;
  char *v568;
  void **v569;
  char *v570;
  uint64_t v573;
  int v574;
  size_t v575;
  unint64_t v576;
  std::string *v577;
  uint64_t v578;
  uint64_t v579;
  std::string *v580;
  unint64_t v581;
  void *v582;
  __int128 v583;
  uint64_t v584;
  __int128 v585;
  std::__shared_weak_count *v586;
  char *v587;
  int v588;
  std::__shared_weak_count *v589;
  std::__shared_weak_count *v590;
  uint64_t v591;
  void **v592;
  unint64_t *v593;
  unint64_t v594;
  void **v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  int v599;
  std::__shared_weak_count *v600;
  std::__shared_weak_count *v601;
  std::__shared_weak_count *v602;
  uint64_t v603;
  void **v604;
  unint64_t *v605;
  unint64_t v606;
  void **v607;
  void *v608;
  uint64_t v609;
  unint64_t v610;
  char *v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  void **v616;
  char *v617;
  void **v618;
  char *v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  __int128 v623;
  uint64_t v624;
  __int128 v625;
  char *v626;
  uint64_t v627;
  void **v628;
  char *v629;
  void **v630;
  char *v631;
  uint64_t v634;
  int v635;
  size_t v636;
  unint64_t v637;
  std::string *v638;
  uint64_t v639;
  uint64_t v640;
  std::string *v641;
  unint64_t v642;
  void *v643;
  __int128 v644;
  uint64_t v645;
  __int128 v646;
  std::__shared_weak_count *v647;
  char *v648;
  int v649;
  std::__shared_weak_count *v650;
  std::__shared_weak_count *v651;
  uint64_t v652;
  void **v653;
  unint64_t *v654;
  unint64_t v655;
  void **v656;
  uint64_t v657;
  unint64_t v658;
  char *v659;
  int v660;
  std::__shared_weak_count *v661;
  std::__shared_weak_count *v662;
  std::__shared_weak_count *v663;
  uint64_t v664;
  void **v665;
  unint64_t *v666;
  unint64_t v667;
  void **v668;
  void *v669;
  uint64_t v670;
  unint64_t v671;
  char *v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  void **v677;
  char *v678;
  void **v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  void *v683;
  __int128 v684;
  uint64_t v685;
  __int128 v686;
  char *v687;
  uint64_t v688;
  void **v689;
  char *v690;
  void **v691;
  char *v692;
  uint64_t v695;
  int v696;
  size_t v697;
  unint64_t v698;
  std::string *v699;
  uint64_t v700;
  uint64_t v701;
  std::string *v702;
  unint64_t v703;
  void *v704;
  __int128 v705;
  uint64_t v706;
  __int128 v707;
  std::__shared_weak_count *v708;
  char *v709;
  int v710;
  std::__shared_weak_count *v711;
  std::__shared_weak_count *v712;
  uint64_t v713;
  void **v714;
  unint64_t *v715;
  unint64_t v716;
  void **v717;
  uint64_t v718;
  unint64_t v719;
  char *v720;
  int v721;
  std::__shared_weak_count *v722;
  std::__shared_weak_count *v723;
  std::__shared_weak_count *v724;
  uint64_t v725;
  void **v726;
  unint64_t *v727;
  unint64_t v728;
  void **v729;
  void *v730;
  uint64_t v731;
  unint64_t v732;
  char *v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  void **v738;
  char *v739;
  void **v740;
  char *v741;
  uint64_t v742;
  unint64_t v743;
  void *v744;
  __int128 v745;
  uint64_t v746;
  __int128 v747;
  char *v748;
  uint64_t v749;
  void **v750;
  char *v751;
  void **v752;
  char *v753;
  uint64_t v756;
  int v757;
  size_t v758;
  unint64_t v759;
  std::string *v760;
  uint64_t v761;
  uint64_t v762;
  std::string *v763;
  unint64_t v764;
  void *v765;
  __int128 v766;
  uint64_t v767;
  __int128 v768;
  std::__shared_weak_count *v769;
  char *v770;
  int v771;
  std::__shared_weak_count *v772;
  std::__shared_weak_count *v773;
  uint64_t v774;
  void **v775;
  unint64_t *v776;
  unint64_t v777;
  void **v778;
  uint64_t v779;
  unint64_t v780;
  char *v781;
  int v782;
  std::__shared_weak_count *v783;
  std::__shared_weak_count *v784;
  std::__shared_weak_count *v785;
  uint64_t v786;
  void **v787;
  unint64_t *v788;
  unint64_t v789;
  void **v790;
  void *v791;
  uint64_t v792;
  unint64_t v793;
  char *v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  void **v799;
  char *v800;
  void **v801;
  char *v802;
  uint64_t v803;
  unint64_t v804;
  void *v805;
  __int128 v806;
  uint64_t v807;
  __int128 v808;
  char *v809;
  uint64_t v810;
  void **v811;
  char *v812;
  void **v813;
  char *v814;
  uint64_t v817;
  int v818;
  size_t v819;
  unint64_t v820;
  std::string *v821;
  uint64_t v822;
  uint64_t v823;
  std::string *v824;
  unint64_t v825;
  void *v826;
  __int128 v827;
  uint64_t v828;
  __int128 v829;
  std::__shared_weak_count *v830;
  char *v831;
  int v832;
  std::__shared_weak_count *v833;
  std::__shared_weak_count *v834;
  uint64_t v835;
  void **v836;
  unint64_t *v837;
  unint64_t v838;
  void **v839;
  uint64_t v840;
  unint64_t v841;
  char *v842;
  int v843;
  std::__shared_weak_count *v844;
  std::__shared_weak_count *v845;
  std::__shared_weak_count *v846;
  uint64_t v847;
  void **v848;
  unint64_t *v849;
  unint64_t v850;
  void **v851;
  void *v852;
  uint64_t v853;
  unint64_t v854;
  char *v855;
  int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  void **v860;
  char *v861;
  void **v862;
  char *v863;
  uint64_t v864;
  unint64_t v865;
  void *v866;
  __int128 v867;
  uint64_t v868;
  __int128 v869;
  char *v870;
  uint64_t v871;
  void **v872;
  char *v873;
  void **v874;
  char *v875;
  uint64_t v878;
  int v879;
  size_t v880;
  unint64_t v881;
  std::string *v882;
  uint64_t v883;
  uint64_t v884;
  std::string *v885;
  unint64_t v886;
  void *v887;
  __int128 v888;
  uint64_t v889;
  __int128 v890;
  std::__shared_weak_count *v891;
  char *v892;
  int v893;
  std::__shared_weak_count *v894;
  std::__shared_weak_count *v895;
  uint64_t v896;
  void **v897;
  unint64_t *v898;
  unint64_t v899;
  void **v900;
  uint64_t v901;
  unint64_t v902;
  char *v903;
  int v904;
  std::__shared_weak_count *v905;
  std::__shared_weak_count *v906;
  std::__shared_weak_count *v907;
  uint64_t v908;
  void **v909;
  unint64_t *v910;
  unint64_t v911;
  void **v912;
  void *v913;
  uint64_t v914;
  unint64_t v915;
  char *v916;
  int v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  void **v921;
  char *v922;
  void **v923;
  char *v924;
  uint64_t v925;
  unint64_t v926;
  void *v927;
  __int128 v928;
  uint64_t v929;
  __int128 v930;
  char *v931;
  uint64_t v932;
  void **v933;
  char *v934;
  void **v935;
  char *v936;
  uint64_t v939;
  int v940;
  size_t v941;
  unint64_t v942;
  std::string *v943;
  uint64_t v944;
  uint64_t v945;
  std::string *v946;
  unint64_t v947;
  void *v948;
  __int128 v949;
  uint64_t v950;
  __int128 v951;
  std::__shared_weak_count *v952;
  char *v953;
  int v954;
  std::__shared_weak_count *v955;
  std::__shared_weak_count *v956;
  uint64_t v957;
  void **v958;
  unint64_t *v959;
  unint64_t v960;
  void **v961;
  uint64_t v962;
  unint64_t v963;
  char *v964;
  int v965;
  std::__shared_weak_count *v966;
  std::__shared_weak_count *v967;
  std::__shared_weak_count *v968;
  uint64_t v969;
  void **v970;
  unint64_t *v971;
  unint64_t v972;
  void **v973;
  void *v974;
  uint64_t v975;
  unint64_t v976;
  char *v977;
  int v978;
  uint64_t v979;
  uint64_t v980;
  __int128 *v981;
  uint64_t v982;
  void **v983;
  char *v984;
  void **v985;
  char *v986;
  uint64_t v987;
  unint64_t v988;
  void *v989;
  __int128 v990;
  uint64_t v991;
  __int128 v992;
  char *v993;
  uint64_t v994;
  void **v995;
  char *v996;
  void **v997;
  char *v998;
  uint64_t v1001;
  int v1002;
  size_t v1003;
  unint64_t v1004;
  std::string *v1005;
  uint64_t v1006;
  uint64_t v1007;
  std::string *v1008;
  unint64_t v1009;
  void *v1010;
  __int128 v1011;
  uint64_t v1012;
  __int128 v1013;
  std::__shared_weak_count *v1014;
  char *v1015;
  int v1016;
  std::__shared_weak_count *v1017;
  std::__shared_weak_count *v1018;
  uint64_t v1019;
  void **v1020;
  unint64_t *v1021;
  unint64_t v1022;
  void **v1023;
  uint64_t v1024;
  unint64_t v1025;
  char *v1026;
  int v1027;
  std::__shared_weak_count *v1028;
  std::__shared_weak_count *v1029;
  std::__shared_weak_count *v1030;
  uint64_t v1031;
  void **v1032;
  unint64_t *v1033;
  unint64_t v1034;
  void **v1035;
  void *v1036;
  uint64_t v1037;
  unint64_t v1038;
  char *v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  void **v1044;
  char *v1045;
  void **v1046;
  char *v1047;
  uint64_t v1048;
  unint64_t v1049;
  void *v1050;
  __int128 v1051;
  uint64_t v1052;
  __int128 v1053;
  char *v1054;
  uint64_t v1055;
  void **v1056;
  char *v1057;
  void **v1058;
  char *v1059;
  uint64_t v1062;
  int v1063;
  size_t v1064;
  unint64_t v1065;
  std::string *v1066;
  uint64_t v1067;
  uint64_t v1068;
  std::string *v1069;
  unint64_t v1070;
  void *v1071;
  __int128 v1072;
  uint64_t v1073;
  __int128 v1074;
  std::__shared_weak_count *v1075;
  char *v1076;
  int v1077;
  std::__shared_weak_count *v1078;
  std::__shared_weak_count *v1079;
  uint64_t v1080;
  void **v1081;
  unint64_t *v1082;
  unint64_t v1083;
  void **v1084;
  uint64_t v1085;
  unint64_t v1086;
  char *v1087;
  int v1088;
  std::__shared_weak_count *v1089;
  std::__shared_weak_count *v1090;
  std::__shared_weak_count *v1091;
  uint64_t v1092;
  void **v1093;
  unint64_t *v1094;
  unint64_t v1095;
  void **v1096;
  void *v1097;
  uint64_t v1098;
  unint64_t v1099;
  char *v1100;
  int v1101;
  uint64_t v1102;
  uint64_t v1103;
  unsigned __int8 v1104;
  uint64_t v1105;
  void **v1106;
  char *v1107;
  void **v1108;
  char *v1109;
  uint64_t v1110;
  unint64_t v1111;
  void *v1112;
  __int128 v1113;
  uint64_t v1114;
  __int128 v1115;
  char *v1116;
  int64_t v1117;
  std::string *v1118;
  char *v1119;
  std::string *v1120;
  char *v1121;
  uint64_t v1124;
  int v1125;
  size_t v1126;
  unint64_t v1127;
  std::string *v1128;
  uint64_t v1129;
  uint64_t v1130;
  std::string *v1131;
  unint64_t v1132;
  void *v1133;
  __int128 v1134;
  uint64_t v1135;
  __int128 v1136;
  std::__shared_weak_count *v1137;
  char *v1138;
  int v1139;
  std::__shared_weak_count *v1140;
  std::__shared_weak_count *v1141;
  uint64_t v1142;
  void **v1143;
  unint64_t *v1144;
  unint64_t v1145;
  void **v1146;
  uint64_t v1147;
  unint64_t v1148;
  char *v1149;
  int v1150;
  std::__shared_weak_count *v1151;
  std::__shared_weak_count *v1152;
  std::__shared_weak_count *v1153;
  uint64_t v1154;
  void **v1155;
  unint64_t *v1156;
  unint64_t v1157;
  void **v1158;
  void *v1159;
  uint64_t v1160;
  unint64_t v1161;
  char *v1162;
  int v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  void **v1167;
  char *v1168;
  void **v1169;
  char *v1170;
  uint64_t v1171;
  unint64_t v1172;
  void *v1173;
  __int128 v1174;
  uint64_t v1175;
  __int128 v1176;
  char *v1177;
  uint64_t v1178;
  void **v1179;
  char *v1180;
  void **v1181;
  char *v1182;
  uint64_t v1185;
  int v1186;
  size_t v1187;
  unint64_t v1188;
  std::string *v1189;
  uint64_t v1190;
  uint64_t v1191;
  std::string *v1192;
  unint64_t v1193;
  void *v1194;
  __int128 v1195;
  uint64_t v1196;
  __int128 v1197;
  std::__shared_weak_count *v1198;
  char *v1199;
  int v1200;
  std::__shared_weak_count *v1201;
  std::__shared_weak_count *v1202;
  uint64_t v1203;
  void **v1204;
  unint64_t *v1205;
  unint64_t v1206;
  void **v1207;
  uint64_t v1208;
  unint64_t v1209;
  char *v1210;
  int v1211;
  std::__shared_weak_count *v1212;
  std::__shared_weak_count *v1213;
  std::__shared_weak_count *v1214;
  uint64_t v1215;
  void **v1216;
  unint64_t *v1217;
  unint64_t v1218;
  void **v1219;
  void *v1220;
  uint64_t v1221;
  unint64_t v1222;
  char *v1223;
  int v1224;
  unsigned __int8 v1225;
  int v1226;
  size_t v1227;
  unint64_t v1228;
  __int128 *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t *v1232;
  unsigned __int8 v1233;
  int v1234;
  size_t v1235;
  unint64_t v1236;
  char *v1237;
  uint64_t v1238;
  uint64_t v1239;
  char *v1240;
  __int128 *v1241;
  unsigned __int8 v1242;
  unsigned __int8 v1243;
  unsigned __int8 v1244;
  uint64_t v1245;
  uint64_t *v1246;
  _BYTE *v1247;
  size_t v1248;
  uint64_t *v1249;
  _BYTE *v1250;
  unint64_t v1251;
  size_t v1252;
  __int128 *v1253;
  uint64_t v1254;
  uint64_t v1255;
  unsigned __int8 v1256;
  unsigned __int8 v1257;
  unsigned __int8 v1258;
  unsigned __int8 v1259;
  unsigned __int8 v1260;
  size_t v1261;
  uint64_t *v1262;
  _BYTE *v1263;
  size_t v1264;
  uint64_t *v1265;
  _BYTE *v1266;
  unint64_t v1267;
  __int128 *v1268;
  uint64_t v1269;
  uint64_t v1270;
  unsigned __int8 v1271;
  unsigned __int8 v1272;
  unsigned __int8 v1273;
  unsigned __int8 v1274;
  int64x2_t v1275;
  int8x16_t v1276;
  void **v1277;
  void **v1278;
  void *v1279;
  int64x2_t v1280;
  int8x16_t v1281;
  void **v1282;
  void **v1283;
  void *v1284;
  uint64_t v1285;
  void *v1286[2];
  uint64_t v1287;
  std::string v1288;
  void *v1289[2];
  uint64_t v1290;
  void *v1291;
  void **v1292;
  uint64_t v1293;
  void *v1294[2];
  uint64_t v1295;
  void *v1296[2];
  uint64_t v1297;
  std::string __dst;
  void *__s[2];
  std::string v1300;
  __int128 v1301;
  _BYTE v1302[24];
  uint64_t v1303;
  __int128 v1304;
  uint64_t v1305;
  uint64_t v1306;

  v1306 = *MEMORY[0x24BDAC8D0];
  v1285 = a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_223197FA4(&__dst, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    a1 = v1285;
  }
  else
  {
    __dst = *(std::string *)(a1 + 8);
  }
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 48))(*(_QWORD *)(a1 + 96));
  sub_22364EF40();
  v4 = &xmmword_255793000;
  if (byte_255793CA7 < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793C90, *((unint64_t *)&xmmword_255793C90 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793C90;
    v1297 = unk_255793CA0;
  }
  v5 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v6 = v1296;
  }
  else
  {
    v5 = (uint64_t)v1296[1];
    v6 = (void **)v1296[0];
  }
  if (v5 >= 4)
  {
    v7 = (char *)v6 + v5;
    v8 = v6;
    do
    {
      v9 = (char *)memchr(v8, 118, v5 - 3);
      if (!v9)
        break;
      if (*(_DWORD *)v9 == 1684631414)
      {
        if (v9 == v7 || v9 - (char *)v6 == -1)
          break;
        v10 = *a2;
        __s[0] = (void *)v3;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 55) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 32), *(_QWORD *)(v1285 + 40));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 32);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 48);
        }
        sub_223650124();
        if (byte_255793E6F < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793E58, *((unint64_t *)&xmmword_255793E58 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793E58;
          v1303 = unk_255793E68;
        }
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 < *(_QWORD *)(v10 + 16))
          goto LABEL_30;
        goto LABEL_31;
      }
      v8 = (void **)(v9 + 1);
      v5 = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 4);
  }
  v10 = *a2;
  __s[0] = (void *)v3;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 55) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 32), *(_QWORD *)(v1285 + 40));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 32);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 48);
  }
  sub_223650124();
  if (byte_255793E6F < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793E58, *((unint64_t *)&xmmword_255793E58 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793E58;
    v1303 = unk_255793E68;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 >= *(_QWORD *)(v10 + 16))
  {
LABEL_31:
    v16 = sub_2236285DC((char **)v10, (uint64_t)__s);
  }
  else
  {
LABEL_30:
    v12 = __s[0];
    *(_DWORD *)(v11 + 8) = __s[1];
    *(_QWORD *)v11 = v12;
    v13 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v11 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v11 + 16) = v13;
    memset(&v1300, 0, sizeof(v1300));
    v14 = *(_QWORD *)v1302;
    *(_OWORD *)(v11 + 40) = v1301;
    *(_QWORD *)(v11 + 56) = v14;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v15 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v11 + 80) = v1303;
    *(_OWORD *)(v11 + 64) = v15;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v16 = (char *)(v11 + 88);
  }
  *(_QWORD *)(v10 + 8) = v16;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_34;
LABEL_38:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_39;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_38;
LABEL_34:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_35;
LABEL_39:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_35:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v17 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v18 = v1294;
  }
  else
  {
    v17 = (uint64_t)v1294[1];
    v18 = (void **)v1294[0];
  }
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_80;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  v24 = *a2;
  __s[0] = (void *)(v3 + 1);
  LODWORD(__s[1]) = 3;
  v25 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v27 = size + 6;
  if (size + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v27 >= 0x17)
  {
    v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v29 = v27 | 7;
    v30 = v29 + 1;
    v28 = (std::string *)operator new(v29 + 1);
    v1300.__r_.__value_.__l.__size_ = size + 6;
    v1300.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v28 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = size + 6;
    if (!size)
      goto LABEL_72;
  }
  if (v25 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v28, p_dst, size);
LABEL_72:
  strcpy((char *)v28 + size, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v32 = *(_QWORD *)(v24 + 8);
  if (v32 >= *(_QWORD *)(v24 + 16))
  {
    v38 = sub_2236285DC((char **)v24, (uint64_t)__s);
    v4 = &xmmword_255793000;
    v39 = SHIBYTE(v1303);
    *(_QWORD *)(v24 + 8) = v38;
    if (v39 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
LABEL_74:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_75;
    goto LABEL_80;
  }
  v33 = __s[0];
  *(_DWORD *)(v32 + 8) = __s[1];
  *(_QWORD *)v32 = v33;
  v34 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v32 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v32 + 16) = v34;
  memset(&v1300, 0, sizeof(v1300));
  v35 = *(_QWORD *)v1302;
  *(_OWORD *)(v32 + 40) = v1301;
  *(_QWORD *)(v32 + 56) = v35;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v36 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v32 + 80) = v1303;
  *(_OWORD *)(v32 + 64) = v36;
  *(_QWORD *)(v24 + 8) = v32 + 88;
  v4 = &xmmword_255793000;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_74;
LABEL_79:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_75:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v37 = *(std::__shared_weak_count **)(v1285 + 136);
    if (!v37)
      goto LABEL_84;
    goto LABEL_81;
  }
LABEL_80:
  v37 = *(std::__shared_weak_count **)(v1285 + 136);
  if (!v37)
  {
LABEL_84:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v43 = 0;
    goto LABEL_99;
  }
LABEL_81:
  v40 = std::__shared_weak_count::lock(v37);
  if (!v40)
    goto LABEL_84;
  v41 = v40;
  v42 = *(_QWORD *)(v1285 + 128);
  if (v42)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v42 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = (void **)v1291;
    v46 = v1292;
    if (v1291 == v1292)
      goto LABEL_99;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = (void **)v1291;
    v46 = v1292;
    if (v1291 == v1292)
      goto LABEL_99;
  }
  do
  {
    v47 = a2[1];
    __s[0] = (void *)v3;
    __s[1] = *v43;
    memset(&v1300, 0, sizeof(v1300));
    v48 = *(_QWORD *)(v47 + 8);
    if (v48 < *(_QWORD *)(v47 + 16))
    {
      *(_OWORD *)v48 = *(_OWORD *)__s;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v47 + 8) = v48 + 40;
    }
    else
    {
      v49 = sub_223628FA4((void **)v47, (uint64_t)__s);
      v50 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v47 + 8) = v49;
      if (v50 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = (void **)v1291;
LABEL_99:
  if (v43)
  {
    v1292 = v43;
    operator delete(v43);
  }
  v51 = *(std::__shared_weak_count **)(v1285 + 136);
  if (!v51 || (v52 = std::__shared_weak_count::lock(v51)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v55 = 0;
    goto LABEL_120;
  }
  v53 = v52;
  v54 = *(_QWORD *)(v1285 + 128);
  if (v54)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v54 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
    v55 = (void **)v1291;
    v58 = v1292;
    if (v1291 == v1292)
      goto LABEL_120;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v55 = (void **)v1291;
    v58 = v1292;
    if (v1291 == v1292)
      goto LABEL_120;
  }
  v59 = (void *)(v3 + 1);
  do
  {
    v60 = a2[1];
    __s[0] = v59;
    __s[1] = *v55;
    memset(&v1300, 0, sizeof(v1300));
    v61 = *(_QWORD *)(v60 + 8);
    if (v61 < *(_QWORD *)(v60 + 16))
    {
      *(_OWORD *)v61 = *(_OWORD *)__s;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)(v60 + 8) = v61 + 40;
    }
    else
    {
      v62 = sub_223628FA4((void **)v60, (uint64_t)__s);
      v63 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v60 + 8) = v62;
      if (v63 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v55;
  }
  while (v55 != v58);
  v55 = (void **)v1291;
LABEL_120:
  if (v55)
  {
    v1292 = v55;
    operator delete(v55);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_125;
LABEL_129:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v64 = v1285;
      if ((*(char *)(v1285 + 199) & 0x80000000) == 0)
        goto LABEL_126;
      goto LABEL_130;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_124;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_129;
LABEL_125:
  v64 = v1285;
  if ((*(char *)(v1285 + 199) & 0x80000000) == 0)
  {
LABEL_126:
    __dst = *(std::string *)(v64 + 176);
    goto LABEL_131;
  }
LABEL_130:
  sub_223197FA4(&__dst, *(void **)(v64 + 176), *(_QWORD *)(v64 + 184));
  v64 = v1285;
LABEL_131:
  v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 264) + 48))(*(_QWORD *)(v64 + 264));
  sub_22364EF40();
  if (*((char *)v4 + 3239) < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793C90, *((unint64_t *)&xmmword_255793C90 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793C90;
    v1297 = unk_255793CA0;
  }
  v66 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v67 = v1296;
  }
  else
  {
    v66 = (uint64_t)v1296[1];
    v67 = (void **)v1296[0];
  }
  if (v66 >= 4)
  {
    v68 = (char *)v67 + v66;
    v69 = v67;
    do
    {
      v70 = (char *)memchr(v69, 118, v66 - 3);
      if (!v70)
        break;
      if (*(_DWORD *)v70 == 1684631414)
      {
        if (v70 == v68 || v70 - (char *)v67 == -1)
          break;
        v71 = *a2;
        __s[0] = (void *)v65;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 223) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 200), *(_QWORD *)(v1285 + 208));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 200);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 216);
        }
        sub_2236502E8();
        if (byte_255793EB7 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793EA0, *((unint64_t *)&xmmword_255793EA0 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793EA0;
          v1303 = unk_255793EB0;
        }
        v72 = *(_QWORD *)(v71 + 8);
        if (v72 < *(_QWORD *)(v71 + 16))
          goto LABEL_157;
        goto LABEL_158;
      }
      v69 = (void **)(v70 + 1);
      v66 = v68 - (char *)v69;
    }
    while (v68 - (char *)v69 >= 4);
  }
  v71 = *a2;
  __s[0] = (void *)v65;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 223) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 200), *(_QWORD *)(v1285 + 208));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 200);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 216);
  }
  sub_2236502E8();
  if (byte_255793EB7 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793EA0, *((unint64_t *)&xmmword_255793EA0 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793EA0;
    v1303 = unk_255793EB0;
  }
  v72 = *(_QWORD *)(v71 + 8);
  if (v72 >= *(_QWORD *)(v71 + 16))
  {
LABEL_158:
    v77 = sub_2236285DC((char **)v71, (uint64_t)__s);
  }
  else
  {
LABEL_157:
    v73 = __s[0];
    *(_DWORD *)(v72 + 8) = __s[1];
    *(_QWORD *)v72 = v73;
    v74 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v72 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v72 + 16) = v74;
    memset(&v1300, 0, sizeof(v1300));
    v75 = *(_QWORD *)v1302;
    *(_OWORD *)(v72 + 40) = v1301;
    *(_QWORD *)(v72 + 56) = v75;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v76 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v72 + 80) = v1303;
    *(_OWORD *)(v72 + 64) = v76;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v77 = (char *)(v72 + 88);
  }
  *(_QWORD *)(v71 + 8) = v77;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_161;
LABEL_165:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_162;
    goto LABEL_166;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_165;
LABEL_161:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_162;
LABEL_166:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_162:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v78 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v79 = v1294;
  }
  else
  {
    v78 = (uint64_t)v1294[1];
    v79 = (void **)v1294[0];
  }
  if (v78 >= 18)
  {
    v80 = (char *)v79 + v78;
    v81 = v79;
    do
    {
      v82 = (char *)memchr(v81, 67, v78 - 17);
      if (!v82)
        break;
      if (*(_QWORD *)v82 == 0x456C656E6E616843
        && *((_QWORD *)v82 + 1) == 0x696F763C726F7272
        && *((_WORD *)v82 + 8) == 15972)
      {
        if (v82 != v80 && v82 - (char *)v79 != -1)
          goto LABEL_207;
        break;
      }
      v81 = (void **)(v82 + 1);
      v78 = v80 - (char *)v81;
    }
    while (v80 - (char *)v81 >= 18);
  }
  v85 = *a2;
  __s[0] = (void *)(v65 + 1);
  LODWORD(__s[1]) = 3;
  v86 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v87 = __dst.__r_.__value_.__l.__size_;
  v88 = v87 + 6;
  if (v87 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v88 >= 0x17)
  {
    v90 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v90 = v88 | 7;
    v91 = v90 + 1;
    v89 = (std::string *)operator new(v90 + 1);
    v1300.__r_.__value_.__l.__size_ = v87 + 6;
    v1300.__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v89 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v87 + 6;
    if (!v87)
      goto LABEL_199;
  }
  if (v86 >= 0)
    v92 = &__dst;
  else
    v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v89, v92, v87);
LABEL_199:
  strcpy((char *)v89 + v87, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v93 = *(_QWORD *)(v85 + 8);
  if (v93 >= *(_QWORD *)(v85 + 16))
  {
    v99 = sub_2236285DC((char **)v85, (uint64_t)__s);
    v100 = SHIBYTE(v1303);
    *(_QWORD *)(v85 + 8) = v99;
    if (v100 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_206;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_206;
    }
LABEL_201:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_202;
    goto LABEL_207;
  }
  v94 = __s[0];
  *(_DWORD *)(v93 + 8) = __s[1];
  *(_QWORD *)v93 = v94;
  v95 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v93 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v93 + 16) = v95;
  memset(&v1300, 0, sizeof(v1300));
  v96 = *(_QWORD *)v1302;
  *(_OWORD *)(v93 + 40) = v1301;
  *(_QWORD *)(v93 + 56) = v96;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v97 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v93 + 80) = v1303;
  *(_OWORD *)(v93 + 64) = v97;
  *(_QWORD *)(v85 + 8) = v93 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_201;
LABEL_206:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_202:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v98 = *(std::__shared_weak_count **)(v1285 + 304);
    if (!v98)
      goto LABEL_211;
    goto LABEL_208;
  }
LABEL_207:
  v98 = *(std::__shared_weak_count **)(v1285 + 304);
  if (!v98)
  {
LABEL_211:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v104 = 0;
    goto LABEL_228;
  }
LABEL_208:
  v101 = std::__shared_weak_count::lock(v98);
  if (!v101)
    goto LABEL_211;
  v102 = v101;
  v103 = *(_QWORD *)(v1285 + 296);
  if (v103)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v103 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v105 = (unint64_t *)&v102->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (v106)
  {
    v104 = (void **)v1291;
    v107 = v1292;
    if (v1291 == v1292)
      goto LABEL_228;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v104 = (void **)v1291;
    v107 = v1292;
    if (v1291 == v1292)
      goto LABEL_228;
  }
  do
  {
    v108 = a2[1];
    __s[0] = (void *)v65;
    __s[1] = *v104;
    memset(&v1300, 0, sizeof(v1300));
    v109 = *(_QWORD *)(v108 + 8);
    if (v109 < *(_QWORD *)(v108 + 16))
    {
      *(_OWORD *)v109 = *(_OWORD *)__s;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 16) = 0;
      *(_QWORD *)(v108 + 8) = v109 + 40;
    }
    else
    {
      v110 = sub_223628FA4((void **)v108, (uint64_t)__s);
      v111 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v108 + 8) = v110;
      if (v111 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v104;
  }
  while (v104 != v107);
  v104 = (void **)v1291;
LABEL_228:
  if (v104)
  {
    v1292 = v104;
    operator delete(v104);
  }
  v112 = *(std::__shared_weak_count **)(v1285 + 304);
  if (!v112 || (v113 = std::__shared_weak_count::lock(v112)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v116 = 0;
    goto LABEL_249;
  }
  v114 = v113;
  v115 = *(_QWORD *)(v1285 + 296);
  if (v115)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v115 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v117 = (unint64_t *)&v114->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (v118)
  {
    v116 = (void **)v1291;
    v119 = v1292;
    if (v1291 == v1292)
      goto LABEL_249;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    v116 = (void **)v1291;
    v119 = v1292;
    if (v1291 == v1292)
      goto LABEL_249;
  }
  v120 = (void *)(v65 + 1);
  do
  {
    v121 = a2[1];
    __s[0] = v120;
    __s[1] = *v116;
    memset(&v1300, 0, sizeof(v1300));
    v122 = *(_QWORD *)(v121 + 8);
    if (v122 < *(_QWORD *)(v121 + 16))
    {
      *(_OWORD *)v122 = *(_OWORD *)__s;
      *(_QWORD *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = 0;
      *(_QWORD *)(v122 + 16) = 0;
      *(_QWORD *)(v121 + 8) = v122 + 40;
    }
    else
    {
      v123 = sub_223628FA4((void **)v121, (uint64_t)__s);
      v124 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v121 + 8) = v123;
      if (v124 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v116;
  }
  while (v116 != v119);
  v116 = (void **)v1291;
LABEL_249:
  if (v116)
  {
    v1292 = v116;
    operator delete(v116);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_253:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_254;
LABEL_258:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v125 = v1285;
      if ((*(char *)(v1285 + 367) & 0x80000000) == 0)
        goto LABEL_255;
      goto LABEL_259;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_253;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_258;
LABEL_254:
  v125 = v1285;
  if ((*(char *)(v1285 + 367) & 0x80000000) == 0)
  {
LABEL_255:
    __dst = *(std::string *)(v125 + 344);
    goto LABEL_260;
  }
LABEL_259:
  sub_223197FA4(&__dst, *(void **)(v125 + 344), *(_QWORD *)(v125 + 352));
  v125 = v1285;
LABEL_260:
  v126 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v125 + 432) + 48))(*(_QWORD *)(v125 + 432));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793228;
    v1297 = unk_255793238;
  }
  v127 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v128 = v1296;
  }
  else
  {
    v127 = (uint64_t)v1296[1];
    v128 = (void **)v1296[0];
  }
  if (v127 >= 4)
  {
    v129 = (char *)v128 + v127;
    v130 = v128;
    do
    {
      v131 = (char *)memchr(v130, 118, v127 - 3);
      if (!v131)
        break;
      if (*(_DWORD *)v131 == 1684631414)
      {
        if (v131 == v129 || v131 - (char *)v128 == -1)
          break;
        v132 = *a2;
        __s[0] = (void *)v126;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 391) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 368), *(_QWORD *)(v1285 + 376));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 368);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 384);
        }
        sub_2236504AC();
        if (byte_255793EFF < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793EE8, *((unint64_t *)&xmmword_255793EE8 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793EE8;
          v1303 = unk_255793EF8;
        }
        v133 = *(_QWORD *)(v132 + 8);
        if (v133 < *(_QWORD *)(v132 + 16))
          goto LABEL_286;
        goto LABEL_287;
      }
      v130 = (void **)(v131 + 1);
      v127 = v129 - (char *)v130;
    }
    while (v129 - (char *)v130 >= 4);
  }
  v132 = *a2;
  __s[0] = (void *)v126;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 391) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 368), *(_QWORD *)(v1285 + 376));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 368);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 384);
  }
  sub_2236504AC();
  if (byte_255793EFF < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793EE8, *((unint64_t *)&xmmword_255793EE8 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793EE8;
    v1303 = unk_255793EF8;
  }
  v133 = *(_QWORD *)(v132 + 8);
  if (v133 >= *(_QWORD *)(v132 + 16))
  {
LABEL_287:
    v138 = sub_2236285DC((char **)v132, (uint64_t)__s);
  }
  else
  {
LABEL_286:
    v134 = __s[0];
    *(_DWORD *)(v133 + 8) = __s[1];
    *(_QWORD *)v133 = v134;
    v135 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v133 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v133 + 16) = v135;
    memset(&v1300, 0, sizeof(v1300));
    v136 = *(_QWORD *)v1302;
    *(_OWORD *)(v133 + 40) = v1301;
    *(_QWORD *)(v133 + 56) = v136;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v137 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v133 + 80) = v1303;
    *(_OWORD *)(v133 + 64) = v137;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v138 = (char *)(v133 + 88);
  }
  *(_QWORD *)(v132 + 8) = v138;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_290;
LABEL_294:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_291;
    goto LABEL_295;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_294;
LABEL_290:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_291;
LABEL_295:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_291:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v139 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v140 = v1294;
  }
  else
  {
    v139 = (uint64_t)v1294[1];
    v140 = (void **)v1294[0];
  }
  if (v139 >= 18)
  {
    v141 = (char *)v140 + v139;
    v142 = v140;
    do
    {
      v143 = (char *)memchr(v142, 67, v139 - 17);
      if (!v143)
        break;
      if (*(_QWORD *)v143 == 0x456C656E6E616843
        && *((_QWORD *)v143 + 1) == 0x696F763C726F7272
        && *((_WORD *)v143 + 8) == 15972)
      {
        if (v143 != v141 && v143 - (char *)v140 != -1)
          goto LABEL_336;
        break;
      }
      v142 = (void **)(v143 + 1);
      v139 = v141 - (char *)v142;
    }
    while (v141 - (char *)v142 >= 18);
  }
  v146 = *a2;
  __s[0] = (void *)(v126 + 1);
  LODWORD(__s[1]) = 3;
  v147 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v148 = __dst.__r_.__value_.__l.__size_;
  v149 = v148 + 6;
  if (v148 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v149 >= 0x17)
  {
    v151 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v149 | 7) != 0x17)
      v151 = v149 | 7;
    v152 = v151 + 1;
    v150 = (std::string *)operator new(v151 + 1);
    v1300.__r_.__value_.__l.__size_ = v148 + 6;
    v1300.__r_.__value_.__r.__words[2] = v152 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v150 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v148 + 6;
    if (!v148)
      goto LABEL_328;
  }
  if (v147 >= 0)
    v153 = &__dst;
  else
    v153 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v150, v153, v148);
LABEL_328:
  strcpy((char *)v150 + v148, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v154 = *(_QWORD *)(v146 + 8);
  if (v154 >= *(_QWORD *)(v146 + 16))
  {
    v160 = sub_2236285DC((char **)v146, (uint64_t)__s);
    v161 = SHIBYTE(v1303);
    *(_QWORD *)(v146 + 8) = v160;
    if (v161 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_335;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_335;
    }
LABEL_330:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_331;
    goto LABEL_336;
  }
  v155 = __s[0];
  *(_DWORD *)(v154 + 8) = __s[1];
  *(_QWORD *)v154 = v155;
  v156 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v154 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v154 + 16) = v156;
  memset(&v1300, 0, sizeof(v1300));
  v157 = *(_QWORD *)v1302;
  *(_OWORD *)(v154 + 40) = v1301;
  *(_QWORD *)(v154 + 56) = v157;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v158 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v154 + 80) = v1303;
  *(_OWORD *)(v154 + 64) = v158;
  *(_QWORD *)(v146 + 8) = v154 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_330;
LABEL_335:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_331:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v159 = *(std::__shared_weak_count **)(v1285 + 472);
    if (!v159)
      goto LABEL_340;
    goto LABEL_337;
  }
LABEL_336:
  v159 = *(std::__shared_weak_count **)(v1285 + 472);
  if (!v159)
  {
LABEL_340:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v165 = 0;
    goto LABEL_357;
  }
LABEL_337:
  v162 = std::__shared_weak_count::lock(v159);
  if (!v162)
    goto LABEL_340;
  v163 = v162;
  v164 = *(_QWORD *)(v1285 + 464);
  if (v164)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v164 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v166 = (unint64_t *)&v163->__shared_owners_;
  do
    v167 = __ldaxr(v166);
  while (__stlxr(v167 - 1, v166));
  if (v167)
  {
    v165 = (void **)v1291;
    v168 = v1292;
    if (v1291 == v1292)
      goto LABEL_357;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
    v165 = (void **)v1291;
    v168 = v1292;
    if (v1291 == v1292)
      goto LABEL_357;
  }
  do
  {
    v169 = a2[1];
    __s[0] = (void *)v126;
    __s[1] = *v165;
    memset(&v1300, 0, sizeof(v1300));
    v170 = *(_QWORD *)(v169 + 8);
    if (v170 < *(_QWORD *)(v169 + 16))
    {
      *(_OWORD *)v170 = *(_OWORD *)__s;
      *(_QWORD *)(v170 + 24) = 0;
      *(_QWORD *)(v170 + 32) = 0;
      *(_QWORD *)(v170 + 16) = 0;
      *(_QWORD *)(v169 + 8) = v170 + 40;
    }
    else
    {
      v171 = sub_223628FA4((void **)v169, (uint64_t)__s);
      v172 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v169 + 8) = v171;
      if (v172 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v165;
  }
  while (v165 != v168);
  v165 = (void **)v1291;
LABEL_357:
  if (v165)
  {
    v1292 = v165;
    operator delete(v165);
  }
  v173 = *(std::__shared_weak_count **)(v1285 + 472);
  if (!v173 || (v174 = std::__shared_weak_count::lock(v173)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v177 = 0;
    goto LABEL_378;
  }
  v175 = v174;
  v176 = *(_QWORD *)(v1285 + 464);
  if (v176)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v176 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v178 = (unint64_t *)&v175->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (v179)
  {
    v177 = (void **)v1291;
    v180 = v1292;
    if (v1291 == v1292)
      goto LABEL_378;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
    v177 = (void **)v1291;
    v180 = v1292;
    if (v1291 == v1292)
      goto LABEL_378;
  }
  v181 = (void *)(v126 + 1);
  do
  {
    v182 = a2[1];
    __s[0] = v181;
    __s[1] = *v177;
    memset(&v1300, 0, sizeof(v1300));
    v183 = *(_QWORD *)(v182 + 8);
    if (v183 < *(_QWORD *)(v182 + 16))
    {
      *(_OWORD *)v183 = *(_OWORD *)__s;
      *(_QWORD *)(v183 + 24) = 0;
      *(_QWORD *)(v183 + 32) = 0;
      *(_QWORD *)(v183 + 16) = 0;
      *(_QWORD *)(v182 + 8) = v183 + 40;
    }
    else
    {
      v184 = sub_223628FA4((void **)v182, (uint64_t)__s);
      v185 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v182 + 8) = v184;
      if (v185 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v177;
  }
  while (v177 != v180);
  v177 = (void **)v1291;
LABEL_378:
  if (v177)
  {
    v1292 = v177;
    operator delete(v177);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_382:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_383;
LABEL_387:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v186 = v1285;
      if ((*(char *)(v1285 + 535) & 0x80000000) == 0)
        goto LABEL_384;
      goto LABEL_388;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_382;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_387;
LABEL_383:
  v186 = v1285;
  if ((*(char *)(v1285 + 535) & 0x80000000) == 0)
  {
LABEL_384:
    __dst = *(std::string *)(v186 + 512);
    goto LABEL_389;
  }
LABEL_388:
  sub_223197FA4(&__dst, *(void **)(v186 + 512), *(_QWORD *)(v186 + 520));
  v186 = v1285;
LABEL_389:
  v187 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v186 + 600) + 48))(*(_QWORD *)(v186 + 600));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793228;
    v1297 = unk_255793238;
  }
  v188 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v189 = v1296;
  }
  else
  {
    v188 = (uint64_t)v1296[1];
    v189 = (void **)v1296[0];
  }
  if (v188 >= 4)
  {
    v190 = (char *)v189 + v188;
    v191 = v189;
    do
    {
      v192 = (char *)memchr(v191, 118, v188 - 3);
      if (!v192)
        break;
      if (*(_DWORD *)v192 == 1684631414)
      {
        if (v192 == v190 || v192 - (char *)v189 == -1)
          break;
        v193 = *a2;
        __s[0] = (void *)v187;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 559) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 536), *(_QWORD *)(v1285 + 544));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 536);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 552);
        }
        sub_223650670();
        if (byte_255793F47 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793F30, *((unint64_t *)&xmmword_255793F30 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793F30;
          v1303 = unk_255793F40;
        }
        v194 = *(_QWORD *)(v193 + 8);
        if (v194 < *(_QWORD *)(v193 + 16))
          goto LABEL_415;
        goto LABEL_416;
      }
      v191 = (void **)(v192 + 1);
      v188 = v190 - (char *)v191;
    }
    while (v190 - (char *)v191 >= 4);
  }
  v193 = *a2;
  __s[0] = (void *)v187;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 559) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 536), *(_QWORD *)(v1285 + 544));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 536);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 552);
  }
  sub_223650670();
  if (byte_255793F47 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793F30, *((unint64_t *)&xmmword_255793F30 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793F30;
    v1303 = unk_255793F40;
  }
  v194 = *(_QWORD *)(v193 + 8);
  if (v194 >= *(_QWORD *)(v193 + 16))
  {
LABEL_416:
    v199 = sub_2236285DC((char **)v193, (uint64_t)__s);
  }
  else
  {
LABEL_415:
    v195 = __s[0];
    *(_DWORD *)(v194 + 8) = __s[1];
    *(_QWORD *)v194 = v195;
    v196 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v194 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v194 + 16) = v196;
    memset(&v1300, 0, sizeof(v1300));
    v197 = *(_QWORD *)v1302;
    *(_OWORD *)(v194 + 40) = v1301;
    *(_QWORD *)(v194 + 56) = v197;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v198 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v194 + 80) = v1303;
    *(_OWORD *)(v194 + 64) = v198;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v199 = (char *)(v194 + 88);
  }
  *(_QWORD *)(v193 + 8) = v199;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_419;
LABEL_423:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_420;
    goto LABEL_424;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_423;
LABEL_419:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_420;
LABEL_424:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_420:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v200 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v201 = v1294;
  }
  else
  {
    v200 = (uint64_t)v1294[1];
    v201 = (void **)v1294[0];
  }
  if (v200 >= 18)
  {
    v202 = (char *)v201 + v200;
    v203 = v201;
    do
    {
      v204 = (char *)memchr(v203, 67, v200 - 17);
      if (!v204)
        break;
      if (*(_QWORD *)v204 == 0x456C656E6E616843
        && *((_QWORD *)v204 + 1) == 0x696F763C726F7272
        && *((_WORD *)v204 + 8) == 15972)
      {
        if (v204 != v202 && v204 - (char *)v201 != -1)
          goto LABEL_465;
        break;
      }
      v203 = (void **)(v204 + 1);
      v200 = v202 - (char *)v203;
    }
    while (v202 - (char *)v203 >= 18);
  }
  v207 = *a2;
  __s[0] = (void *)(v187 + 1);
  LODWORD(__s[1]) = 3;
  v208 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v209 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v209 = __dst.__r_.__value_.__l.__size_;
  v210 = v209 + 6;
  if (v209 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v210 >= 0x17)
  {
    v212 = (v210 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v210 | 7) != 0x17)
      v212 = v210 | 7;
    v213 = v212 + 1;
    v211 = (std::string *)operator new(v212 + 1);
    v1300.__r_.__value_.__l.__size_ = v209 + 6;
    v1300.__r_.__value_.__r.__words[2] = v213 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v211;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v211 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v209 + 6;
    if (!v209)
      goto LABEL_457;
  }
  if (v208 >= 0)
    v214 = &__dst;
  else
    v214 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v211, v214, v209);
LABEL_457:
  strcpy((char *)v211 + v209, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v215 = *(_QWORD *)(v207 + 8);
  if (v215 >= *(_QWORD *)(v207 + 16))
  {
    v221 = sub_2236285DC((char **)v207, (uint64_t)__s);
    v222 = SHIBYTE(v1303);
    *(_QWORD *)(v207 + 8) = v221;
    if (v222 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_464;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_464;
    }
LABEL_459:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_460;
    goto LABEL_465;
  }
  v216 = __s[0];
  *(_DWORD *)(v215 + 8) = __s[1];
  *(_QWORD *)v215 = v216;
  v217 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v215 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v215 + 16) = v217;
  memset(&v1300, 0, sizeof(v1300));
  v218 = *(_QWORD *)v1302;
  *(_OWORD *)(v215 + 40) = v1301;
  *(_QWORD *)(v215 + 56) = v218;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v219 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v215 + 80) = v1303;
  *(_OWORD *)(v215 + 64) = v219;
  *(_QWORD *)(v207 + 8) = v215 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_459;
LABEL_464:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_460:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v220 = *(std::__shared_weak_count **)(v1285 + 640);
    if (!v220)
      goto LABEL_469;
    goto LABEL_466;
  }
LABEL_465:
  v220 = *(std::__shared_weak_count **)(v1285 + 640);
  if (!v220)
  {
LABEL_469:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v226 = 0;
    goto LABEL_486;
  }
LABEL_466:
  v223 = std::__shared_weak_count::lock(v220);
  if (!v223)
    goto LABEL_469;
  v224 = v223;
  v225 = *(_QWORD *)(v1285 + 632);
  if (v225)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v225 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v227 = (unint64_t *)&v224->__shared_owners_;
  do
    v228 = __ldaxr(v227);
  while (__stlxr(v228 - 1, v227));
  if (v228)
  {
    v226 = (void **)v1291;
    v229 = v1292;
    if (v1291 == v1292)
      goto LABEL_486;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
    v226 = (void **)v1291;
    v229 = v1292;
    if (v1291 == v1292)
      goto LABEL_486;
  }
  do
  {
    v230 = a2[1];
    __s[0] = (void *)v187;
    __s[1] = *v226;
    memset(&v1300, 0, sizeof(v1300));
    v231 = *(_QWORD *)(v230 + 8);
    if (v231 < *(_QWORD *)(v230 + 16))
    {
      *(_OWORD *)v231 = *(_OWORD *)__s;
      *(_QWORD *)(v231 + 24) = 0;
      *(_QWORD *)(v231 + 32) = 0;
      *(_QWORD *)(v231 + 16) = 0;
      *(_QWORD *)(v230 + 8) = v231 + 40;
    }
    else
    {
      v232 = sub_223628FA4((void **)v230, (uint64_t)__s);
      v233 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v230 + 8) = v232;
      if (v233 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v226;
  }
  while (v226 != v229);
  v226 = (void **)v1291;
LABEL_486:
  if (v226)
  {
    v1292 = v226;
    operator delete(v226);
  }
  v234 = *(std::__shared_weak_count **)(v1285 + 640);
  if (!v234 || (v235 = std::__shared_weak_count::lock(v234)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v238 = 0;
    goto LABEL_507;
  }
  v236 = v235;
  v237 = *(_QWORD *)(v1285 + 632);
  if (v237)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v237 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v239 = (unint64_t *)&v236->__shared_owners_;
  do
    v240 = __ldaxr(v239);
  while (__stlxr(v240 - 1, v239));
  if (v240)
  {
    v238 = (void **)v1291;
    v241 = v1292;
    if (v1291 == v1292)
      goto LABEL_507;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
    v238 = (void **)v1291;
    v241 = v1292;
    if (v1291 == v1292)
      goto LABEL_507;
  }
  v242 = (void *)(v187 + 1);
  do
  {
    v243 = a2[1];
    __s[0] = v242;
    __s[1] = *v238;
    memset(&v1300, 0, sizeof(v1300));
    v244 = *(_QWORD *)(v243 + 8);
    if (v244 < *(_QWORD *)(v243 + 16))
    {
      *(_OWORD *)v244 = *(_OWORD *)__s;
      *(_QWORD *)(v244 + 24) = 0;
      *(_QWORD *)(v244 + 32) = 0;
      *(_QWORD *)(v244 + 16) = 0;
      *(_QWORD *)(v243 + 8) = v244 + 40;
    }
    else
    {
      v245 = sub_223628FA4((void **)v243, (uint64_t)__s);
      v246 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v243 + 8) = v245;
      if (v246 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v238;
  }
  while (v238 != v241);
  v238 = (void **)v1291;
LABEL_507:
  if (v238)
  {
    v1292 = v238;
    operator delete(v238);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_511:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_512;
LABEL_516:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v247 = v1285;
      if ((*(char *)(v1285 + 703) & 0x80000000) == 0)
        goto LABEL_513;
      goto LABEL_517;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_511;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_516;
LABEL_512:
  v247 = v1285;
  if ((*(char *)(v1285 + 703) & 0x80000000) == 0)
  {
LABEL_513:
    __dst = *(std::string *)(v247 + 680);
    goto LABEL_518;
  }
LABEL_517:
  sub_223197FA4(&__dst, *(void **)(v247 + 680), *(_QWORD *)(v247 + 688));
  v247 = v1285;
LABEL_518:
  v248 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v247 + 768) + 48))(*(_QWORD *)(v247 + 768));
  sub_22363D7E4();
  if (byte_25579323F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793228, *((unint64_t *)&xmmword_255793228 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793228;
    v1297 = unk_255793238;
  }
  v249 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v250 = v1296;
  }
  else
  {
    v249 = (uint64_t)v1296[1];
    v250 = (void **)v1296[0];
  }
  if (v249 >= 4)
  {
    v251 = (char *)v250 + v249;
    v252 = v250;
    do
    {
      v253 = (char *)memchr(v252, 118, v249 - 3);
      if (!v253)
        break;
      if (*(_DWORD *)v253 == 1684631414)
      {
        if (v253 == v251 || v253 - (char *)v250 == -1)
          break;
        v254 = *a2;
        __s[0] = (void *)v248;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 727) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 704), *(_QWORD *)(v1285 + 712));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 704);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 720);
        }
        sub_223650834();
        if (byte_255793F8F < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793F78;
          v1303 = unk_255793F88;
        }
        v255 = *(_QWORD *)(v254 + 8);
        if (v255 < *(_QWORD *)(v254 + 16))
          goto LABEL_544;
        goto LABEL_545;
      }
      v252 = (void **)(v253 + 1);
      v249 = v251 - (char *)v252;
    }
    while (v251 - (char *)v252 >= 4);
  }
  v254 = *a2;
  __s[0] = (void *)v248;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 727) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 704), *(_QWORD *)(v1285 + 712));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 704);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 720);
  }
  sub_223650834();
  if (byte_255793F8F < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793F78, *((unint64_t *)&xmmword_255793F78 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793F78;
    v1303 = unk_255793F88;
  }
  v255 = *(_QWORD *)(v254 + 8);
  if (v255 >= *(_QWORD *)(v254 + 16))
  {
LABEL_545:
    v260 = sub_2236285DC((char **)v254, (uint64_t)__s);
  }
  else
  {
LABEL_544:
    v256 = __s[0];
    *(_DWORD *)(v255 + 8) = __s[1];
    *(_QWORD *)v255 = v256;
    v257 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v255 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v255 + 16) = v257;
    memset(&v1300, 0, sizeof(v1300));
    v258 = *(_QWORD *)v1302;
    *(_OWORD *)(v255 + 40) = v1301;
    *(_QWORD *)(v255 + 56) = v258;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v259 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v255 + 80) = v1303;
    *(_OWORD *)(v255 + 64) = v259;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v260 = (char *)(v255 + 88);
  }
  *(_QWORD *)(v254 + 8) = v260;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_548;
LABEL_552:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_549;
    goto LABEL_553;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_552;
LABEL_548:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_549;
LABEL_553:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_549:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v261 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v262 = v1294;
  }
  else
  {
    v261 = (uint64_t)v1294[1];
    v262 = (void **)v1294[0];
  }
  if (v261 >= 18)
  {
    v263 = (char *)v262 + v261;
    v264 = v262;
    do
    {
      v265 = (char *)memchr(v264, 67, v261 - 17);
      if (!v265)
        break;
      if (*(_QWORD *)v265 == 0x456C656E6E616843
        && *((_QWORD *)v265 + 1) == 0x696F763C726F7272
        && *((_WORD *)v265 + 8) == 15972)
      {
        if (v265 != v263 && v265 - (char *)v262 != -1)
          goto LABEL_594;
        break;
      }
      v264 = (void **)(v265 + 1);
      v261 = v263 - (char *)v264;
    }
    while (v263 - (char *)v264 >= 18);
  }
  v268 = *a2;
  __s[0] = (void *)(v248 + 1);
  LODWORD(__s[1]) = 3;
  v269 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v270 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v270 = __dst.__r_.__value_.__l.__size_;
  v271 = v270 + 6;
  if (v270 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v271 >= 0x17)
  {
    v273 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v271 | 7) != 0x17)
      v273 = v271 | 7;
    v274 = v273 + 1;
    v272 = (std::string *)operator new(v273 + 1);
    v1300.__r_.__value_.__l.__size_ = v270 + 6;
    v1300.__r_.__value_.__r.__words[2] = v274 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v272;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v272 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v270 + 6;
    if (!v270)
      goto LABEL_586;
  }
  if (v269 >= 0)
    v275 = &__dst;
  else
    v275 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v272, v275, v270);
LABEL_586:
  strcpy((char *)v272 + v270, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v276 = *(_QWORD *)(v268 + 8);
  if (v276 >= *(_QWORD *)(v268 + 16))
  {
    v282 = sub_2236285DC((char **)v268, (uint64_t)__s);
    v283 = SHIBYTE(v1303);
    *(_QWORD *)(v268 + 8) = v282;
    if (v283 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_593;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_593;
    }
LABEL_588:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_589;
    goto LABEL_594;
  }
  v277 = __s[0];
  *(_DWORD *)(v276 + 8) = __s[1];
  *(_QWORD *)v276 = v277;
  v278 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v276 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v276 + 16) = v278;
  memset(&v1300, 0, sizeof(v1300));
  v279 = *(_QWORD *)v1302;
  *(_OWORD *)(v276 + 40) = v1301;
  *(_QWORD *)(v276 + 56) = v279;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v280 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v276 + 80) = v1303;
  *(_OWORD *)(v276 + 64) = v280;
  *(_QWORD *)(v268 + 8) = v276 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_588;
LABEL_593:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_589:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v281 = *(std::__shared_weak_count **)(v1285 + 808);
    if (!v281)
      goto LABEL_598;
    goto LABEL_595;
  }
LABEL_594:
  v281 = *(std::__shared_weak_count **)(v1285 + 808);
  if (!v281)
  {
LABEL_598:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v287 = 0;
    goto LABEL_615;
  }
LABEL_595:
  v284 = std::__shared_weak_count::lock(v281);
  if (!v284)
    goto LABEL_598;
  v285 = v284;
  v286 = *(_QWORD *)(v1285 + 800);
  if (v286)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v286 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v288 = (unint64_t *)&v285->__shared_owners_;
  do
    v289 = __ldaxr(v288);
  while (__stlxr(v289 - 1, v288));
  if (v289)
  {
    v287 = (void **)v1291;
    v290 = v1292;
    if (v1291 == v1292)
      goto LABEL_615;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
    std::__shared_weak_count::__release_weak(v285);
    v287 = (void **)v1291;
    v290 = v1292;
    if (v1291 == v1292)
      goto LABEL_615;
  }
  do
  {
    v291 = a2[1];
    __s[0] = (void *)v248;
    __s[1] = *v287;
    memset(&v1300, 0, sizeof(v1300));
    v292 = *(_QWORD *)(v291 + 8);
    if (v292 < *(_QWORD *)(v291 + 16))
    {
      *(_OWORD *)v292 = *(_OWORD *)__s;
      *(_QWORD *)(v292 + 24) = 0;
      *(_QWORD *)(v292 + 32) = 0;
      *(_QWORD *)(v292 + 16) = 0;
      *(_QWORD *)(v291 + 8) = v292 + 40;
    }
    else
    {
      v293 = sub_223628FA4((void **)v291, (uint64_t)__s);
      v294 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v291 + 8) = v293;
      if (v294 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v287;
  }
  while (v287 != v290);
  v287 = (void **)v1291;
LABEL_615:
  if (v287)
  {
    v1292 = v287;
    operator delete(v287);
  }
  v295 = *(std::__shared_weak_count **)(v1285 + 808);
  if (!v295 || (v296 = std::__shared_weak_count::lock(v295)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v299 = 0;
    goto LABEL_636;
  }
  v297 = v296;
  v298 = *(_QWORD *)(v1285 + 800);
  if (v298)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v298 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v300 = (unint64_t *)&v297->__shared_owners_;
  do
    v301 = __ldaxr(v300);
  while (__stlxr(v301 - 1, v300));
  if (v301)
  {
    v299 = (void **)v1291;
    v302 = v1292;
    if (v1291 == v1292)
      goto LABEL_636;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
    std::__shared_weak_count::__release_weak(v297);
    v299 = (void **)v1291;
    v302 = v1292;
    if (v1291 == v1292)
      goto LABEL_636;
  }
  v303 = (void *)(v248 + 1);
  do
  {
    v304 = a2[1];
    __s[0] = v303;
    __s[1] = *v299;
    memset(&v1300, 0, sizeof(v1300));
    v305 = *(_QWORD *)(v304 + 8);
    if (v305 < *(_QWORD *)(v304 + 16))
    {
      *(_OWORD *)v305 = *(_OWORD *)__s;
      *(_QWORD *)(v305 + 24) = 0;
      *(_QWORD *)(v305 + 32) = 0;
      *(_QWORD *)(v305 + 16) = 0;
      *(_QWORD *)(v304 + 8) = v305 + 40;
    }
    else
    {
      v306 = sub_223628FA4((void **)v304, (uint64_t)__s);
      v307 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v304 + 8) = v306;
      if (v307 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v299;
  }
  while (v299 != v302);
  v299 = (void **)v1291;
LABEL_636:
  if (v299)
  {
    v1292 = v299;
    operator delete(v299);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_640:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_641;
LABEL_645:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v308 = v1285;
      if ((*(char *)(v1285 + 871) & 0x80000000) == 0)
        goto LABEL_642;
      goto LABEL_646;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_640;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_645;
LABEL_641:
  v308 = v1285;
  if ((*(char *)(v1285 + 871) & 0x80000000) == 0)
  {
LABEL_642:
    __dst = *(std::string *)(v308 + 848);
    goto LABEL_647;
  }
LABEL_646:
  sub_223197FA4(&__dst, *(void **)(v308 + 848), *(_QWORD *)(v308 + 856));
  v308 = v1285;
LABEL_647:
  v309 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v308 + 936) + 48))(*(_QWORD *)(v308 + 936));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v310 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v311 = v1296;
  }
  else
  {
    v310 = (uint64_t)v1296[1];
    v311 = (void **)v1296[0];
  }
  if (v310 >= 4)
  {
    v312 = (char *)v311 + v310;
    v313 = v311;
    do
    {
      v314 = (char *)memchr(v313, 118, v310 - 3);
      if (!v314)
        break;
      if (*(_DWORD *)v314 == 1684631414)
      {
        if (v314 == v312 || v314 - (char *)v311 == -1)
          break;
        v315 = *a2;
        __s[0] = (void *)v309;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 895) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 872), *(_QWORD *)(v1285 + 880));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 872);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 888);
        }
        sub_2236509F8();
        if (byte_255793FD7 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255793FC0, *((unint64_t *)&xmmword_255793FC0 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255793FC0;
          v1303 = unk_255793FD0;
        }
        v316 = *(_QWORD *)(v315 + 8);
        if (v316 < *(_QWORD *)(v315 + 16))
          goto LABEL_673;
        goto LABEL_674;
      }
      v313 = (void **)(v314 + 1);
      v310 = v312 - (char *)v313;
    }
    while (v312 - (char *)v313 >= 4);
  }
  v315 = *a2;
  __s[0] = (void *)v309;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 895) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 872), *(_QWORD *)(v1285 + 880));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 872);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 888);
  }
  sub_2236509F8();
  if (byte_255793FD7 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255793FC0, *((unint64_t *)&xmmword_255793FC0 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255793FC0;
    v1303 = unk_255793FD0;
  }
  v316 = *(_QWORD *)(v315 + 8);
  if (v316 >= *(_QWORD *)(v315 + 16))
  {
LABEL_674:
    v321 = sub_2236285DC((char **)v315, (uint64_t)__s);
  }
  else
  {
LABEL_673:
    v317 = __s[0];
    *(_DWORD *)(v316 + 8) = __s[1];
    *(_QWORD *)v316 = v317;
    v318 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v316 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v316 + 16) = v318;
    memset(&v1300, 0, sizeof(v1300));
    v319 = *(_QWORD *)v1302;
    *(_OWORD *)(v316 + 40) = v1301;
    *(_QWORD *)(v316 + 56) = v319;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v320 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v316 + 80) = v1303;
    *(_OWORD *)(v316 + 64) = v320;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v321 = (char *)(v316 + 88);
  }
  *(_QWORD *)(v315 + 8) = v321;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_677;
LABEL_681:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_678;
    goto LABEL_682;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_681;
LABEL_677:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_678;
LABEL_682:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_678:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v322 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v323 = v1294;
  }
  else
  {
    v322 = (uint64_t)v1294[1];
    v323 = (void **)v1294[0];
  }
  if (v322 >= 18)
  {
    v324 = (char *)v323 + v322;
    v325 = v323;
    do
    {
      v326 = (char *)memchr(v325, 67, v322 - 17);
      if (!v326)
        break;
      if (*(_QWORD *)v326 == 0x456C656E6E616843
        && *((_QWORD *)v326 + 1) == 0x696F763C726F7272
        && *((_WORD *)v326 + 8) == 15972)
      {
        if (v326 != v324 && v326 - (char *)v323 != -1)
          goto LABEL_723;
        break;
      }
      v325 = (void **)(v326 + 1);
      v322 = v324 - (char *)v325;
    }
    while (v324 - (char *)v325 >= 18);
  }
  v329 = *a2;
  __s[0] = (void *)(v309 + 1);
  LODWORD(__s[1]) = 3;
  v330 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v331 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v331 = __dst.__r_.__value_.__l.__size_;
  v332 = v331 + 6;
  if (v331 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v332 >= 0x17)
  {
    v334 = (v332 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v332 | 7) != 0x17)
      v334 = v332 | 7;
    v335 = v334 + 1;
    v333 = (std::string *)operator new(v334 + 1);
    v1300.__r_.__value_.__l.__size_ = v331 + 6;
    v1300.__r_.__value_.__r.__words[2] = v335 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v333 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v331 + 6;
    if (!v331)
      goto LABEL_715;
  }
  if (v330 >= 0)
    v336 = &__dst;
  else
    v336 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v333, v336, v331);
LABEL_715:
  strcpy((char *)v333 + v331, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v337 = *(_QWORD *)(v329 + 8);
  if (v337 >= *(_QWORD *)(v329 + 16))
  {
    v343 = sub_2236285DC((char **)v329, (uint64_t)__s);
    v344 = SHIBYTE(v1303);
    *(_QWORD *)(v329 + 8) = v343;
    if (v344 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_722;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_722;
    }
LABEL_717:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_718;
    goto LABEL_723;
  }
  v338 = __s[0];
  *(_DWORD *)(v337 + 8) = __s[1];
  *(_QWORD *)v337 = v338;
  v339 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v337 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v337 + 16) = v339;
  memset(&v1300, 0, sizeof(v1300));
  v340 = *(_QWORD *)v1302;
  *(_OWORD *)(v337 + 40) = v1301;
  *(_QWORD *)(v337 + 56) = v340;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v341 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v337 + 80) = v1303;
  *(_OWORD *)(v337 + 64) = v341;
  *(_QWORD *)(v329 + 8) = v337 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_717;
LABEL_722:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_718:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v342 = *(std::__shared_weak_count **)(v1285 + 976);
    if (!v342)
      goto LABEL_727;
    goto LABEL_724;
  }
LABEL_723:
  v342 = *(std::__shared_weak_count **)(v1285 + 976);
  if (!v342)
  {
LABEL_727:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v348 = 0;
    goto LABEL_744;
  }
LABEL_724:
  v345 = std::__shared_weak_count::lock(v342);
  if (!v345)
    goto LABEL_727;
  v346 = v345;
  v347 = *(_QWORD *)(v1285 + 968);
  if (v347)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v347 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v349 = (unint64_t *)&v346->__shared_owners_;
  do
    v350 = __ldaxr(v349);
  while (__stlxr(v350 - 1, v349));
  if (v350)
  {
    v348 = (void **)v1291;
    v351 = v1292;
    if (v1291 == v1292)
      goto LABEL_744;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
    std::__shared_weak_count::__release_weak(v346);
    v348 = (void **)v1291;
    v351 = v1292;
    if (v1291 == v1292)
      goto LABEL_744;
  }
  do
  {
    v352 = a2[1];
    __s[0] = (void *)v309;
    __s[1] = *v348;
    memset(&v1300, 0, sizeof(v1300));
    v353 = *(_QWORD *)(v352 + 8);
    if (v353 < *(_QWORD *)(v352 + 16))
    {
      *(_OWORD *)v353 = *(_OWORD *)__s;
      *(_QWORD *)(v353 + 24) = 0;
      *(_QWORD *)(v353 + 32) = 0;
      *(_QWORD *)(v353 + 16) = 0;
      *(_QWORD *)(v352 + 8) = v353 + 40;
    }
    else
    {
      v354 = sub_223628FA4((void **)v352, (uint64_t)__s);
      v355 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v352 + 8) = v354;
      if (v355 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v348;
  }
  while (v348 != v351);
  v348 = (void **)v1291;
LABEL_744:
  if (v348)
  {
    v1292 = v348;
    operator delete(v348);
  }
  v356 = *(std::__shared_weak_count **)(v1285 + 976);
  if (!v356 || (v357 = std::__shared_weak_count::lock(v356)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v360 = 0;
    goto LABEL_765;
  }
  v358 = v357;
  v359 = *(_QWORD *)(v1285 + 968);
  if (v359)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v359 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v361 = (unint64_t *)&v358->__shared_owners_;
  do
    v362 = __ldaxr(v361);
  while (__stlxr(v362 - 1, v361));
  if (v362)
  {
    v360 = (void **)v1291;
    v363 = v1292;
    if (v1291 == v1292)
      goto LABEL_765;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
    std::__shared_weak_count::__release_weak(v358);
    v360 = (void **)v1291;
    v363 = v1292;
    if (v1291 == v1292)
      goto LABEL_765;
  }
  v364 = (void *)(v309 + 1);
  do
  {
    v365 = a2[1];
    __s[0] = v364;
    __s[1] = *v360;
    memset(&v1300, 0, sizeof(v1300));
    v366 = *(_QWORD *)(v365 + 8);
    if (v366 < *(_QWORD *)(v365 + 16))
    {
      *(_OWORD *)v366 = *(_OWORD *)__s;
      *(_QWORD *)(v366 + 24) = 0;
      *(_QWORD *)(v366 + 32) = 0;
      *(_QWORD *)(v366 + 16) = 0;
      *(_QWORD *)(v365 + 8) = v366 + 40;
    }
    else
    {
      v367 = sub_223628FA4((void **)v365, (uint64_t)__s);
      v368 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v365 + 8) = v367;
      if (v368 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v360;
  }
  while (v360 != v363);
  v360 = (void **)v1291;
LABEL_765:
  if (v360)
  {
    v1292 = v360;
    operator delete(v360);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_769:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_770;
LABEL_774:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v369 = v1285;
      if ((*(char *)(v1285 + 1039) & 0x80000000) == 0)
        goto LABEL_771;
      goto LABEL_775;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_769;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_774;
LABEL_770:
  v369 = v1285;
  if ((*(char *)(v1285 + 1039) & 0x80000000) == 0)
  {
LABEL_771:
    __dst = *(std::string *)(v369 + 1016);
    goto LABEL_776;
  }
LABEL_775:
  sub_223197FA4(&__dst, *(void **)(v369 + 1016), *(_QWORD *)(v369 + 1024));
  v369 = v1285;
LABEL_776:
  v370 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v369 + 1104) + 48))(*(_QWORD *)(v369 + 1104));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v371 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v372 = v1296;
  }
  else
  {
    v371 = (uint64_t)v1296[1];
    v372 = (void **)v1296[0];
  }
  if (v371 >= 4)
  {
    v373 = (char *)v372 + v371;
    v374 = v372;
    do
    {
      v375 = (char *)memchr(v374, 118, v371 - 3);
      if (!v375)
        break;
      if (*(_DWORD *)v375 == 1684631414)
      {
        if (v375 == v373 || v375 - (char *)v372 == -1)
          break;
        v376 = *a2;
        __s[0] = (void *)v370;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1063) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1040), *(_QWORD *)(v1285 + 1048));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1040);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1056);
        }
        sub_223650BBC();
        if (byte_25579401F < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794008, *((unint64_t *)&xmmword_255794008 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794008;
          v1303 = unk_255794018;
        }
        v377 = *(_QWORD *)(v376 + 8);
        if (v377 < *(_QWORD *)(v376 + 16))
          goto LABEL_802;
        goto LABEL_803;
      }
      v374 = (void **)(v375 + 1);
      v371 = v373 - (char *)v374;
    }
    while (v373 - (char *)v374 >= 4);
  }
  v376 = *a2;
  __s[0] = (void *)v370;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1063) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1040), *(_QWORD *)(v1285 + 1048));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1040);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1056);
  }
  sub_223650BBC();
  if (byte_25579401F < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794008, *((unint64_t *)&xmmword_255794008 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794008;
    v1303 = unk_255794018;
  }
  v377 = *(_QWORD *)(v376 + 8);
  if (v377 >= *(_QWORD *)(v376 + 16))
  {
LABEL_803:
    v382 = sub_2236285DC((char **)v376, (uint64_t)__s);
  }
  else
  {
LABEL_802:
    v378 = __s[0];
    *(_DWORD *)(v377 + 8) = __s[1];
    *(_QWORD *)v377 = v378;
    v379 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v377 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v377 + 16) = v379;
    memset(&v1300, 0, sizeof(v1300));
    v380 = *(_QWORD *)v1302;
    *(_OWORD *)(v377 + 40) = v1301;
    *(_QWORD *)(v377 + 56) = v380;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v381 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v377 + 80) = v1303;
    *(_OWORD *)(v377 + 64) = v381;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v382 = (char *)(v377 + 88);
  }
  *(_QWORD *)(v376 + 8) = v382;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_806;
LABEL_810:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_807;
    goto LABEL_811;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_810;
LABEL_806:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_807;
LABEL_811:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_807:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v383 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v384 = v1294;
  }
  else
  {
    v383 = (uint64_t)v1294[1];
    v384 = (void **)v1294[0];
  }
  if (v383 >= 18)
  {
    v385 = (char *)v384 + v383;
    v386 = v384;
    do
    {
      v387 = (char *)memchr(v386, 67, v383 - 17);
      if (!v387)
        break;
      if (*(_QWORD *)v387 == 0x456C656E6E616843
        && *((_QWORD *)v387 + 1) == 0x696F763C726F7272
        && *((_WORD *)v387 + 8) == 15972)
      {
        if (v387 != v385 && v387 - (char *)v384 != -1)
          goto LABEL_852;
        break;
      }
      v386 = (void **)(v387 + 1);
      v383 = v385 - (char *)v386;
    }
    while (v385 - (char *)v386 >= 18);
  }
  v390 = *a2;
  __s[0] = (void *)(v370 + 1);
  LODWORD(__s[1]) = 3;
  v391 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v392 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v392 = __dst.__r_.__value_.__l.__size_;
  v393 = v392 + 6;
  if (v392 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v393 >= 0x17)
  {
    v395 = (v393 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v393 | 7) != 0x17)
      v395 = v393 | 7;
    v396 = v395 + 1;
    v394 = (std::string *)operator new(v395 + 1);
    v1300.__r_.__value_.__l.__size_ = v392 + 6;
    v1300.__r_.__value_.__r.__words[2] = v396 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v394;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v394 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v392 + 6;
    if (!v392)
      goto LABEL_844;
  }
  if (v391 >= 0)
    v397 = &__dst;
  else
    v397 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v394, v397, v392);
LABEL_844:
  strcpy((char *)v394 + v392, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v398 = *(_QWORD *)(v390 + 8);
  if (v398 >= *(_QWORD *)(v390 + 16))
  {
    v404 = sub_2236285DC((char **)v390, (uint64_t)__s);
    v405 = SHIBYTE(v1303);
    *(_QWORD *)(v390 + 8) = v404;
    if (v405 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_851;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_851;
    }
LABEL_846:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_847;
    goto LABEL_852;
  }
  v399 = __s[0];
  *(_DWORD *)(v398 + 8) = __s[1];
  *(_QWORD *)v398 = v399;
  v400 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v398 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v398 + 16) = v400;
  memset(&v1300, 0, sizeof(v1300));
  v401 = *(_QWORD *)v1302;
  *(_OWORD *)(v398 + 40) = v1301;
  *(_QWORD *)(v398 + 56) = v401;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v402 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v398 + 80) = v1303;
  *(_OWORD *)(v398 + 64) = v402;
  *(_QWORD *)(v390 + 8) = v398 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_846;
LABEL_851:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_847:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v403 = *(std::__shared_weak_count **)(v1285 + 1144);
    if (!v403)
      goto LABEL_856;
    goto LABEL_853;
  }
LABEL_852:
  v403 = *(std::__shared_weak_count **)(v1285 + 1144);
  if (!v403)
  {
LABEL_856:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v409 = 0;
    goto LABEL_873;
  }
LABEL_853:
  v406 = std::__shared_weak_count::lock(v403);
  if (!v406)
    goto LABEL_856;
  v407 = v406;
  v408 = *(_QWORD *)(v1285 + 1136);
  if (v408)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v408 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v410 = (unint64_t *)&v407->__shared_owners_;
  do
    v411 = __ldaxr(v410);
  while (__stlxr(v411 - 1, v410));
  if (v411)
  {
    v409 = (void **)v1291;
    v412 = v1292;
    if (v1291 == v1292)
      goto LABEL_873;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
    std::__shared_weak_count::__release_weak(v407);
    v409 = (void **)v1291;
    v412 = v1292;
    if (v1291 == v1292)
      goto LABEL_873;
  }
  do
  {
    v413 = a2[1];
    __s[0] = (void *)v370;
    __s[1] = *v409;
    memset(&v1300, 0, sizeof(v1300));
    v414 = *(_QWORD *)(v413 + 8);
    if (v414 < *(_QWORD *)(v413 + 16))
    {
      *(_OWORD *)v414 = *(_OWORD *)__s;
      *(_QWORD *)(v414 + 24) = 0;
      *(_QWORD *)(v414 + 32) = 0;
      *(_QWORD *)(v414 + 16) = 0;
      *(_QWORD *)(v413 + 8) = v414 + 40;
    }
    else
    {
      v415 = sub_223628FA4((void **)v413, (uint64_t)__s);
      v416 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v413 + 8) = v415;
      if (v416 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v409;
  }
  while (v409 != v412);
  v409 = (void **)v1291;
LABEL_873:
  if (v409)
  {
    v1292 = v409;
    operator delete(v409);
  }
  v417 = *(std::__shared_weak_count **)(v1285 + 1144);
  if (!v417 || (v418 = std::__shared_weak_count::lock(v417)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v421 = 0;
    goto LABEL_894;
  }
  v419 = v418;
  v420 = *(_QWORD *)(v1285 + 1136);
  if (v420)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v420 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v422 = (unint64_t *)&v419->__shared_owners_;
  do
    v423 = __ldaxr(v422);
  while (__stlxr(v423 - 1, v422));
  if (v423)
  {
    v421 = (void **)v1291;
    v424 = v1292;
    if (v1291 == v1292)
      goto LABEL_894;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
    std::__shared_weak_count::__release_weak(v419);
    v421 = (void **)v1291;
    v424 = v1292;
    if (v1291 == v1292)
      goto LABEL_894;
  }
  v425 = (void *)(v370 + 1);
  do
  {
    v426 = a2[1];
    __s[0] = v425;
    __s[1] = *v421;
    memset(&v1300, 0, sizeof(v1300));
    v427 = *(_QWORD *)(v426 + 8);
    if (v427 < *(_QWORD *)(v426 + 16))
    {
      *(_OWORD *)v427 = *(_OWORD *)__s;
      *(_QWORD *)(v427 + 24) = 0;
      *(_QWORD *)(v427 + 32) = 0;
      *(_QWORD *)(v427 + 16) = 0;
      *(_QWORD *)(v426 + 8) = v427 + 40;
    }
    else
    {
      v428 = sub_223628FA4((void **)v426, (uint64_t)__s);
      v429 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v426 + 8) = v428;
      if (v429 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v421;
  }
  while (v421 != v424);
  v421 = (void **)v1291;
LABEL_894:
  if (v421)
  {
    v1292 = v421;
    operator delete(v421);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_898:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_899;
LABEL_903:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v430 = v1285;
      if ((*(char *)(v1285 + 1207) & 0x80000000) == 0)
        goto LABEL_900;
      goto LABEL_904;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_898;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_903;
LABEL_899:
  v430 = v1285;
  if ((*(char *)(v1285 + 1207) & 0x80000000) == 0)
  {
LABEL_900:
    __dst = *(std::string *)(v430 + 1184);
    goto LABEL_905;
  }
LABEL_904:
  sub_223197FA4(&__dst, *(void **)(v430 + 1184), *(_QWORD *)(v430 + 1192));
  v430 = v1285;
LABEL_905:
  v431 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v430 + 1272) + 48))(*(_QWORD *)(v430 + 1272));
  sub_223650D80();
  if (byte_255794067 < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794050, *((unint64_t *)&xmmword_255794050 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794050;
    v1297 = unk_255794060;
  }
  v432 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v433 = v1296;
  }
  else
  {
    v432 = (uint64_t)v1296[1];
    v433 = (void **)v1296[0];
  }
  if (v432 >= 4)
  {
    v434 = (char *)v433 + v432;
    v435 = v433;
    do
    {
      v436 = (char *)memchr(v435, 118, v432 - 3);
      if (!v436)
        break;
      if (*(_DWORD *)v436 == 1684631414)
      {
        if (v436 == v434 || v436 - (char *)v433 == -1)
          break;
        v437 = *a2;
        __s[0] = (void *)v431;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1231) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1208), *(_QWORD *)(v1285 + 1216));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1208);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1224);
        }
        sub_223651858();
        if (byte_255794187 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794170, *((unint64_t *)&xmmword_255794170 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794170;
          v1303 = unk_255794180;
        }
        v438 = *(_QWORD *)(v437 + 8);
        if (v438 < *(_QWORD *)(v437 + 16))
          goto LABEL_931;
        goto LABEL_932;
      }
      v435 = (void **)(v436 + 1);
      v432 = v434 - (char *)v435;
    }
    while (v434 - (char *)v435 >= 4);
  }
  v437 = *a2;
  __s[0] = (void *)v431;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1231) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1208), *(_QWORD *)(v1285 + 1216));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1208);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1224);
  }
  sub_223651858();
  if (byte_255794187 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794170, *((unint64_t *)&xmmword_255794170 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794170;
    v1303 = unk_255794180;
  }
  v438 = *(_QWORD *)(v437 + 8);
  if (v438 >= *(_QWORD *)(v437 + 16))
  {
LABEL_932:
    v443 = sub_2236285DC((char **)v437, (uint64_t)__s);
  }
  else
  {
LABEL_931:
    v439 = __s[0];
    *(_DWORD *)(v438 + 8) = __s[1];
    *(_QWORD *)v438 = v439;
    v440 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v438 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v438 + 16) = v440;
    memset(&v1300, 0, sizeof(v1300));
    v441 = *(_QWORD *)v1302;
    *(_OWORD *)(v438 + 40) = v1301;
    *(_QWORD *)(v438 + 56) = v441;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v442 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v438 + 80) = v1303;
    *(_OWORD *)(v438 + 64) = v442;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v443 = (char *)(v438 + 88);
  }
  *(_QWORD *)(v437 + 8) = v443;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_935;
LABEL_939:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_936;
    goto LABEL_940;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_939;
LABEL_935:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_936;
LABEL_940:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_936:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v444 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v445 = v1294;
  }
  else
  {
    v444 = (uint64_t)v1294[1];
    v445 = (void **)v1294[0];
  }
  if (v444 >= 18)
  {
    v446 = (char *)v445 + v444;
    v447 = v445;
    do
    {
      v448 = (char *)memchr(v447, 67, v444 - 17);
      if (!v448)
        break;
      if (*(_QWORD *)v448 == 0x456C656E6E616843
        && *((_QWORD *)v448 + 1) == 0x696F763C726F7272
        && *((_WORD *)v448 + 8) == 15972)
      {
        if (v448 != v446 && v448 - (char *)v445 != -1)
          goto LABEL_981;
        break;
      }
      v447 = (void **)(v448 + 1);
      v444 = v446 - (char *)v447;
    }
    while (v446 - (char *)v447 >= 18);
  }
  v451 = *a2;
  __s[0] = (void *)(v431 + 1);
  LODWORD(__s[1]) = 3;
  v452 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v453 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v453 = __dst.__r_.__value_.__l.__size_;
  v454 = v453 + 6;
  if (v453 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v454 >= 0x17)
  {
    v456 = (v454 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v454 | 7) != 0x17)
      v456 = v454 | 7;
    v457 = v456 + 1;
    v455 = (std::string *)operator new(v456 + 1);
    v1300.__r_.__value_.__l.__size_ = v453 + 6;
    v1300.__r_.__value_.__r.__words[2] = v457 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v455;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v455 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v453 + 6;
    if (!v453)
      goto LABEL_973;
  }
  if (v452 >= 0)
    v458 = &__dst;
  else
    v458 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v455, v458, v453);
LABEL_973:
  strcpy((char *)v455 + v453, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v459 = *(_QWORD *)(v451 + 8);
  if (v459 >= *(_QWORD *)(v451 + 16))
  {
    v465 = sub_2236285DC((char **)v451, (uint64_t)__s);
    v466 = SHIBYTE(v1303);
    *(_QWORD *)(v451 + 8) = v465;
    if (v466 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_980;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_980;
    }
LABEL_975:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_976;
    goto LABEL_981;
  }
  v460 = __s[0];
  *(_DWORD *)(v459 + 8) = __s[1];
  *(_QWORD *)v459 = v460;
  v461 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v459 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v459 + 16) = v461;
  memset(&v1300, 0, sizeof(v1300));
  v462 = *(_QWORD *)v1302;
  *(_OWORD *)(v459 + 40) = v1301;
  *(_QWORD *)(v459 + 56) = v462;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v463 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v459 + 80) = v1303;
  *(_OWORD *)(v459 + 64) = v463;
  *(_QWORD *)(v451 + 8) = v459 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_975;
LABEL_980:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_976:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v464 = *(std::__shared_weak_count **)(v1285 + 1312);
    if (!v464)
      goto LABEL_985;
    goto LABEL_982;
  }
LABEL_981:
  v464 = *(std::__shared_weak_count **)(v1285 + 1312);
  if (!v464)
  {
LABEL_985:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v470 = 0;
    goto LABEL_1002;
  }
LABEL_982:
  v467 = std::__shared_weak_count::lock(v464);
  if (!v467)
    goto LABEL_985;
  v468 = v467;
  v469 = *(_QWORD *)(v1285 + 1304);
  if (v469)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v469 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v471 = (unint64_t *)&v468->__shared_owners_;
  do
    v472 = __ldaxr(v471);
  while (__stlxr(v472 - 1, v471));
  if (v472)
  {
    v470 = (void **)v1291;
    v473 = v1292;
    if (v1291 == v1292)
      goto LABEL_1002;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
    std::__shared_weak_count::__release_weak(v468);
    v470 = (void **)v1291;
    v473 = v1292;
    if (v1291 == v1292)
      goto LABEL_1002;
  }
  do
  {
    v474 = a2[1];
    __s[0] = (void *)v431;
    __s[1] = *v470;
    memset(&v1300, 0, sizeof(v1300));
    v475 = *(_QWORD *)(v474 + 8);
    if (v475 < *(_QWORD *)(v474 + 16))
    {
      *(_OWORD *)v475 = *(_OWORD *)__s;
      *(_QWORD *)(v475 + 24) = 0;
      *(_QWORD *)(v475 + 32) = 0;
      *(_QWORD *)(v475 + 16) = 0;
      *(_QWORD *)(v474 + 8) = v475 + 40;
    }
    else
    {
      v476 = sub_223628FA4((void **)v474, (uint64_t)__s);
      v477 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v474 + 8) = v476;
      if (v477 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v470;
  }
  while (v470 != v473);
  v470 = (void **)v1291;
LABEL_1002:
  if (v470)
  {
    v1292 = v470;
    operator delete(v470);
  }
  v478 = *(std::__shared_weak_count **)(v1285 + 1312);
  if (!v478 || (v479 = std::__shared_weak_count::lock(v478)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v482 = 0;
    goto LABEL_1023;
  }
  v480 = v479;
  v481 = *(_QWORD *)(v1285 + 1304);
  if (v481)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v481 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v483 = (unint64_t *)&v480->__shared_owners_;
  do
    v484 = __ldaxr(v483);
  while (__stlxr(v484 - 1, v483));
  if (v484)
  {
    v482 = (void **)v1291;
    v485 = v1292;
    if (v1291 == v1292)
      goto LABEL_1023;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
    std::__shared_weak_count::__release_weak(v480);
    v482 = (void **)v1291;
    v485 = v1292;
    if (v1291 == v1292)
      goto LABEL_1023;
  }
  v486 = (void *)(v431 + 1);
  do
  {
    v487 = a2[1];
    __s[0] = v486;
    __s[1] = *v482;
    memset(&v1300, 0, sizeof(v1300));
    v488 = *(_QWORD *)(v487 + 8);
    if (v488 < *(_QWORD *)(v487 + 16))
    {
      *(_OWORD *)v488 = *(_OWORD *)__s;
      *(_QWORD *)(v488 + 24) = 0;
      *(_QWORD *)(v488 + 32) = 0;
      *(_QWORD *)(v488 + 16) = 0;
      *(_QWORD *)(v487 + 8) = v488 + 40;
    }
    else
    {
      v489 = sub_223628FA4((void **)v487, (uint64_t)__s);
      v490 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v487 + 8) = v489;
      if (v490 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v482;
  }
  while (v482 != v485);
  v482 = (void **)v1291;
LABEL_1023:
  if (v482)
  {
    v1292 = v482;
    operator delete(v482);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1027:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1028;
LABEL_1032:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v491 = v1285;
      if ((*(char *)(v1285 + 1375) & 0x80000000) == 0)
        goto LABEL_1029;
      goto LABEL_1033;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1027;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1032;
LABEL_1028:
  v491 = v1285;
  if ((*(char *)(v1285 + 1375) & 0x80000000) == 0)
  {
LABEL_1029:
    __dst = *(std::string *)(v491 + 1352);
    goto LABEL_1034;
  }
LABEL_1033:
  sub_223197FA4(&__dst, *(void **)(v491 + 1352), *(_QWORD *)(v491 + 1360));
  v491 = v1285;
LABEL_1034:
  v492 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v491 + 1440) + 48))(*(_QWORD *)(v491 + 1440));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v493 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v494 = v1296;
  }
  else
  {
    v493 = (uint64_t)v1296[1];
    v494 = (void **)v1296[0];
  }
  if (v493 >= 4)
  {
    v495 = (char *)v494 + v493;
    v496 = v494;
    do
    {
      v497 = (char *)memchr(v496, 118, v493 - 3);
      if (!v497)
        break;
      if (*(_DWORD *)v497 == 1684631414)
      {
        if (v497 == v495 || v497 - (char *)v494 == -1)
          break;
        v498 = *a2;
        __s[0] = (void *)v492;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1399) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1376), *(_QWORD *)(v1285 + 1384));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1376);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1392);
        }
        sub_22363E750();
        if (byte_2557933D7 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557933C0;
          v1303 = unk_2557933D0;
        }
        v499 = *(_QWORD *)(v498 + 8);
        if (v499 < *(_QWORD *)(v498 + 16))
          goto LABEL_1060;
        goto LABEL_1061;
      }
      v496 = (void **)(v497 + 1);
      v493 = v495 - (char *)v496;
    }
    while (v495 - (char *)v496 >= 4);
  }
  v498 = *a2;
  __s[0] = (void *)v492;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1399) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1376), *(_QWORD *)(v1285 + 1384));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1376);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1392);
  }
  sub_22363E750();
  if (byte_2557933D7 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557933C0, *((unint64_t *)&xmmword_2557933C0 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557933C0;
    v1303 = unk_2557933D0;
  }
  v499 = *(_QWORD *)(v498 + 8);
  if (v499 >= *(_QWORD *)(v498 + 16))
  {
LABEL_1061:
    v504 = sub_2236285DC((char **)v498, (uint64_t)__s);
  }
  else
  {
LABEL_1060:
    v500 = __s[0];
    *(_DWORD *)(v499 + 8) = __s[1];
    *(_QWORD *)v499 = v500;
    v501 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v499 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v499 + 16) = v501;
    memset(&v1300, 0, sizeof(v1300));
    v502 = *(_QWORD *)v1302;
    *(_OWORD *)(v499 + 40) = v1301;
    *(_QWORD *)(v499 + 56) = v502;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v503 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v499 + 80) = v1303;
    *(_OWORD *)(v499 + 64) = v503;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v504 = (char *)(v499 + 88);
  }
  *(_QWORD *)(v498 + 8) = v504;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1064;
LABEL_1068:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1065;
    goto LABEL_1069;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1068;
LABEL_1064:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1065;
LABEL_1069:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1065:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v505 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v506 = v1294;
  }
  else
  {
    v505 = (uint64_t)v1294[1];
    v506 = (void **)v1294[0];
  }
  if (v505 >= 18)
  {
    v507 = (char *)v506 + v505;
    v508 = v506;
    do
    {
      v509 = (char *)memchr(v508, 67, v505 - 17);
      if (!v509)
        break;
      if (*(_QWORD *)v509 == 0x456C656E6E616843
        && *((_QWORD *)v509 + 1) == 0x696F763C726F7272
        && *((_WORD *)v509 + 8) == 15972)
      {
        if (v509 != v507 && v509 - (char *)v506 != -1)
          goto LABEL_1110;
        break;
      }
      v508 = (void **)(v509 + 1);
      v505 = v507 - (char *)v508;
    }
    while (v507 - (char *)v508 >= 18);
  }
  v512 = *a2;
  __s[0] = (void *)(v492 + 1);
  LODWORD(__s[1]) = 3;
  v513 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v514 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v514 = __dst.__r_.__value_.__l.__size_;
  v515 = v514 + 6;
  if (v514 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v515 >= 0x17)
  {
    v517 = (v515 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v515 | 7) != 0x17)
      v517 = v515 | 7;
    v518 = v517 + 1;
    v516 = (std::string *)operator new(v517 + 1);
    v1300.__r_.__value_.__l.__size_ = v514 + 6;
    v1300.__r_.__value_.__r.__words[2] = v518 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v516;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v516 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v514 + 6;
    if (!v514)
      goto LABEL_1102;
  }
  if (v513 >= 0)
    v519 = &__dst;
  else
    v519 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v516, v519, v514);
LABEL_1102:
  strcpy((char *)v516 + v514, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v520 = *(_QWORD *)(v512 + 8);
  if (v520 >= *(_QWORD *)(v512 + 16))
  {
    v526 = sub_2236285DC((char **)v512, (uint64_t)__s);
    v527 = SHIBYTE(v1303);
    *(_QWORD *)(v512 + 8) = v526;
    if (v527 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1109;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1109;
    }
LABEL_1104:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1105;
    goto LABEL_1110;
  }
  v521 = __s[0];
  *(_DWORD *)(v520 + 8) = __s[1];
  *(_QWORD *)v520 = v521;
  v522 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v520 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v520 + 16) = v522;
  memset(&v1300, 0, sizeof(v1300));
  v523 = *(_QWORD *)v1302;
  *(_OWORD *)(v520 + 40) = v1301;
  *(_QWORD *)(v520 + 56) = v523;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v524 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v520 + 80) = v1303;
  *(_OWORD *)(v520 + 64) = v524;
  *(_QWORD *)(v512 + 8) = v520 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1104;
LABEL_1109:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1105:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v525 = *(std::__shared_weak_count **)(v1285 + 1480);
    if (!v525)
      goto LABEL_1114;
    goto LABEL_1111;
  }
LABEL_1110:
  v525 = *(std::__shared_weak_count **)(v1285 + 1480);
  if (!v525)
  {
LABEL_1114:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v531 = 0;
    goto LABEL_1131;
  }
LABEL_1111:
  v528 = std::__shared_weak_count::lock(v525);
  if (!v528)
    goto LABEL_1114;
  v529 = v528;
  v530 = *(_QWORD *)(v1285 + 1472);
  if (v530)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v530 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v532 = (unint64_t *)&v529->__shared_owners_;
  do
    v533 = __ldaxr(v532);
  while (__stlxr(v533 - 1, v532));
  if (v533)
  {
    v531 = (void **)v1291;
    v534 = v1292;
    if (v1291 == v1292)
      goto LABEL_1131;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
    std::__shared_weak_count::__release_weak(v529);
    v531 = (void **)v1291;
    v534 = v1292;
    if (v1291 == v1292)
      goto LABEL_1131;
  }
  do
  {
    v535 = a2[1];
    __s[0] = (void *)v492;
    __s[1] = *v531;
    memset(&v1300, 0, sizeof(v1300));
    v536 = *(_QWORD *)(v535 + 8);
    if (v536 < *(_QWORD *)(v535 + 16))
    {
      *(_OWORD *)v536 = *(_OWORD *)__s;
      *(_QWORD *)(v536 + 24) = 0;
      *(_QWORD *)(v536 + 32) = 0;
      *(_QWORD *)(v536 + 16) = 0;
      *(_QWORD *)(v535 + 8) = v536 + 40;
    }
    else
    {
      v537 = sub_223628FA4((void **)v535, (uint64_t)__s);
      v538 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v535 + 8) = v537;
      if (v538 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v531;
  }
  while (v531 != v534);
  v531 = (void **)v1291;
LABEL_1131:
  if (v531)
  {
    v1292 = v531;
    operator delete(v531);
  }
  v539 = *(std::__shared_weak_count **)(v1285 + 1480);
  if (!v539 || (v540 = std::__shared_weak_count::lock(v539)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v543 = 0;
    goto LABEL_1152;
  }
  v541 = v540;
  v542 = *(_QWORD *)(v1285 + 1472);
  if (v542)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v542 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v544 = (unint64_t *)&v541->__shared_owners_;
  do
    v545 = __ldaxr(v544);
  while (__stlxr(v545 - 1, v544));
  if (v545)
  {
    v543 = (void **)v1291;
    v546 = v1292;
    if (v1291 == v1292)
      goto LABEL_1152;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
    std::__shared_weak_count::__release_weak(v541);
    v543 = (void **)v1291;
    v546 = v1292;
    if (v1291 == v1292)
      goto LABEL_1152;
  }
  v547 = (void *)(v492 + 1);
  do
  {
    v548 = a2[1];
    __s[0] = v547;
    __s[1] = *v543;
    memset(&v1300, 0, sizeof(v1300));
    v549 = *(_QWORD *)(v548 + 8);
    if (v549 < *(_QWORD *)(v548 + 16))
    {
      *(_OWORD *)v549 = *(_OWORD *)__s;
      *(_QWORD *)(v549 + 24) = 0;
      *(_QWORD *)(v549 + 32) = 0;
      *(_QWORD *)(v549 + 16) = 0;
      *(_QWORD *)(v548 + 8) = v549 + 40;
    }
    else
    {
      v550 = sub_223628FA4((void **)v548, (uint64_t)__s);
      v551 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v548 + 8) = v550;
      if (v551 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v543;
  }
  while (v543 != v546);
  v543 = (void **)v1291;
LABEL_1152:
  if (v543)
  {
    v1292 = v543;
    operator delete(v543);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1156:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1157;
LABEL_1161:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v552 = v1285;
      if ((*(char *)(v1285 + 1543) & 0x80000000) == 0)
        goto LABEL_1158;
      goto LABEL_1162;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1156;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1161;
LABEL_1157:
  v552 = v1285;
  if ((*(char *)(v1285 + 1543) & 0x80000000) == 0)
  {
LABEL_1158:
    __dst = *(std::string *)(v552 + 1520);
    goto LABEL_1163;
  }
LABEL_1162:
  sub_223197FA4(&__dst, *(void **)(v552 + 1520), *(_QWORD *)(v552 + 1528));
  v552 = v1285;
LABEL_1163:
  v553 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v552 + 1608) + 48))(*(_QWORD *)(v552 + 1608));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v554 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v555 = v1296;
  }
  else
  {
    v554 = (uint64_t)v1296[1];
    v555 = (void **)v1296[0];
  }
  if (v554 >= 4)
  {
    v556 = (char *)v555 + v554;
    v557 = v555;
    do
    {
      v558 = (char *)memchr(v557, 118, v554 - 3);
      if (!v558)
        break;
      if (*(_DWORD *)v558 == 1684631414)
      {
        if (v558 == v556 || v558 - (char *)v555 == -1)
          break;
        v559 = *a2;
        __s[0] = (void *)v553;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1567) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1544), *(_QWORD *)(v1285 + 1552));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1544);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1560);
        }
        sub_223651A1C();
        if (byte_2557941CF < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557941B8, *((unint64_t *)&xmmword_2557941B8 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557941B8;
          v1303 = unk_2557941C8;
        }
        v560 = *(_QWORD *)(v559 + 8);
        if (v560 < *(_QWORD *)(v559 + 16))
          goto LABEL_1189;
        goto LABEL_1190;
      }
      v557 = (void **)(v558 + 1);
      v554 = v556 - (char *)v557;
    }
    while (v556 - (char *)v557 >= 4);
  }
  v559 = *a2;
  __s[0] = (void *)v553;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1567) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1544), *(_QWORD *)(v1285 + 1552));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1544);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1560);
  }
  sub_223651A1C();
  if (byte_2557941CF < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557941B8, *((unint64_t *)&xmmword_2557941B8 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557941B8;
    v1303 = unk_2557941C8;
  }
  v560 = *(_QWORD *)(v559 + 8);
  if (v560 >= *(_QWORD *)(v559 + 16))
  {
LABEL_1190:
    v565 = sub_2236285DC((char **)v559, (uint64_t)__s);
  }
  else
  {
LABEL_1189:
    v561 = __s[0];
    *(_DWORD *)(v560 + 8) = __s[1];
    *(_QWORD *)v560 = v561;
    v562 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v560 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v560 + 16) = v562;
    memset(&v1300, 0, sizeof(v1300));
    v563 = *(_QWORD *)v1302;
    *(_OWORD *)(v560 + 40) = v1301;
    *(_QWORD *)(v560 + 56) = v563;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v564 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v560 + 80) = v1303;
    *(_OWORD *)(v560 + 64) = v564;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v565 = (char *)(v560 + 88);
  }
  *(_QWORD *)(v559 + 8) = v565;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1193;
LABEL_1197:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1194;
    goto LABEL_1198;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1197;
LABEL_1193:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1194;
LABEL_1198:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1194:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v566 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v567 = v1294;
  }
  else
  {
    v566 = (uint64_t)v1294[1];
    v567 = (void **)v1294[0];
  }
  if (v566 >= 18)
  {
    v568 = (char *)v567 + v566;
    v569 = v567;
    do
    {
      v570 = (char *)memchr(v569, 67, v566 - 17);
      if (!v570)
        break;
      if (*(_QWORD *)v570 == 0x456C656E6E616843
        && *((_QWORD *)v570 + 1) == 0x696F763C726F7272
        && *((_WORD *)v570 + 8) == 15972)
      {
        if (v570 != v568 && v570 - (char *)v567 != -1)
          goto LABEL_1239;
        break;
      }
      v569 = (void **)(v570 + 1);
      v566 = v568 - (char *)v569;
    }
    while (v568 - (char *)v569 >= 18);
  }
  v573 = *a2;
  __s[0] = (void *)(v553 + 1);
  LODWORD(__s[1]) = 3;
  v574 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v575 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v575 = __dst.__r_.__value_.__l.__size_;
  v576 = v575 + 6;
  if (v575 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v576 >= 0x17)
  {
    v578 = (v576 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v576 | 7) != 0x17)
      v578 = v576 | 7;
    v579 = v578 + 1;
    v577 = (std::string *)operator new(v578 + 1);
    v1300.__r_.__value_.__l.__size_ = v575 + 6;
    v1300.__r_.__value_.__r.__words[2] = v579 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v577;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v577 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v575 + 6;
    if (!v575)
      goto LABEL_1231;
  }
  if (v574 >= 0)
    v580 = &__dst;
  else
    v580 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v577, v580, v575);
LABEL_1231:
  strcpy((char *)v577 + v575, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v581 = *(_QWORD *)(v573 + 8);
  if (v581 >= *(_QWORD *)(v573 + 16))
  {
    v587 = sub_2236285DC((char **)v573, (uint64_t)__s);
    v588 = SHIBYTE(v1303);
    *(_QWORD *)(v573 + 8) = v587;
    if (v588 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1238;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1238;
    }
LABEL_1233:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1234;
    goto LABEL_1239;
  }
  v582 = __s[0];
  *(_DWORD *)(v581 + 8) = __s[1];
  *(_QWORD *)v581 = v582;
  v583 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v581 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v581 + 16) = v583;
  memset(&v1300, 0, sizeof(v1300));
  v584 = *(_QWORD *)v1302;
  *(_OWORD *)(v581 + 40) = v1301;
  *(_QWORD *)(v581 + 56) = v584;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v585 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v581 + 80) = v1303;
  *(_OWORD *)(v581 + 64) = v585;
  *(_QWORD *)(v573 + 8) = v581 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1233;
LABEL_1238:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1234:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v586 = *(std::__shared_weak_count **)(v1285 + 1648);
    if (!v586)
      goto LABEL_1243;
    goto LABEL_1240;
  }
LABEL_1239:
  v586 = *(std::__shared_weak_count **)(v1285 + 1648);
  if (!v586)
  {
LABEL_1243:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v592 = 0;
    goto LABEL_1260;
  }
LABEL_1240:
  v589 = std::__shared_weak_count::lock(v586);
  if (!v589)
    goto LABEL_1243;
  v590 = v589;
  v591 = *(_QWORD *)(v1285 + 1640);
  if (v591)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v591 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v593 = (unint64_t *)&v590->__shared_owners_;
  do
    v594 = __ldaxr(v593);
  while (__stlxr(v594 - 1, v593));
  if (v594)
  {
    v592 = (void **)v1291;
    v595 = v1292;
    if (v1291 == v1292)
      goto LABEL_1260;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
    std::__shared_weak_count::__release_weak(v590);
    v592 = (void **)v1291;
    v595 = v1292;
    if (v1291 == v1292)
      goto LABEL_1260;
  }
  do
  {
    v596 = a2[1];
    __s[0] = (void *)v553;
    __s[1] = *v592;
    memset(&v1300, 0, sizeof(v1300));
    v597 = *(_QWORD *)(v596 + 8);
    if (v597 < *(_QWORD *)(v596 + 16))
    {
      *(_OWORD *)v597 = *(_OWORD *)__s;
      *(_QWORD *)(v597 + 24) = 0;
      *(_QWORD *)(v597 + 32) = 0;
      *(_QWORD *)(v597 + 16) = 0;
      *(_QWORD *)(v596 + 8) = v597 + 40;
    }
    else
    {
      v598 = sub_223628FA4((void **)v596, (uint64_t)__s);
      v599 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v596 + 8) = v598;
      if (v599 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v592;
  }
  while (v592 != v595);
  v592 = (void **)v1291;
LABEL_1260:
  if (v592)
  {
    v1292 = v592;
    operator delete(v592);
  }
  v600 = *(std::__shared_weak_count **)(v1285 + 1648);
  if (!v600 || (v601 = std::__shared_weak_count::lock(v600)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v604 = 0;
    goto LABEL_1281;
  }
  v602 = v601;
  v603 = *(_QWORD *)(v1285 + 1640);
  if (v603)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v603 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v605 = (unint64_t *)&v602->__shared_owners_;
  do
    v606 = __ldaxr(v605);
  while (__stlxr(v606 - 1, v605));
  if (v606)
  {
    v604 = (void **)v1291;
    v607 = v1292;
    if (v1291 == v1292)
      goto LABEL_1281;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
    std::__shared_weak_count::__release_weak(v602);
    v604 = (void **)v1291;
    v607 = v1292;
    if (v1291 == v1292)
      goto LABEL_1281;
  }
  v608 = (void *)(v553 + 1);
  do
  {
    v609 = a2[1];
    __s[0] = v608;
    __s[1] = *v604;
    memset(&v1300, 0, sizeof(v1300));
    v610 = *(_QWORD *)(v609 + 8);
    if (v610 < *(_QWORD *)(v609 + 16))
    {
      *(_OWORD *)v610 = *(_OWORD *)__s;
      *(_QWORD *)(v610 + 24) = 0;
      *(_QWORD *)(v610 + 32) = 0;
      *(_QWORD *)(v610 + 16) = 0;
      *(_QWORD *)(v609 + 8) = v610 + 40;
    }
    else
    {
      v611 = sub_223628FA4((void **)v609, (uint64_t)__s);
      v612 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v609 + 8) = v611;
      if (v612 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v604;
  }
  while (v604 != v607);
  v604 = (void **)v1291;
LABEL_1281:
  if (v604)
  {
    v1292 = v604;
    operator delete(v604);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1285:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1286;
LABEL_1290:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v613 = v1285;
      if ((*(char *)(v1285 + 1711) & 0x80000000) == 0)
        goto LABEL_1287;
      goto LABEL_1291;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1285;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1290;
LABEL_1286:
  v613 = v1285;
  if ((*(char *)(v1285 + 1711) & 0x80000000) == 0)
  {
LABEL_1287:
    __dst = *(std::string *)(v613 + 1688);
    goto LABEL_1292;
  }
LABEL_1291:
  sub_223197FA4(&__dst, *(void **)(v613 + 1688), *(_QWORD *)(v613 + 1696));
  v613 = v1285;
LABEL_1292:
  v614 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v613 + 1776) + 48))(*(_QWORD *)(v613 + 1776));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v615 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v616 = v1296;
  }
  else
  {
    v615 = (uint64_t)v1296[1];
    v616 = (void **)v1296[0];
  }
  if (v615 >= 4)
  {
    v617 = (char *)v616 + v615;
    v618 = v616;
    do
    {
      v619 = (char *)memchr(v618, 118, v615 - 3);
      if (!v619)
        break;
      if (*(_DWORD *)v619 == 1684631414)
      {
        if (v619 == v617 || v619 - (char *)v616 == -1)
          break;
        v620 = *a2;
        __s[0] = (void *)v614;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1735) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1712), *(_QWORD *)(v1285 + 1720));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1712);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1728);
        }
        sub_223651BE0();
        if (byte_255794217 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794200, *((unint64_t *)&xmmword_255794200 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794200;
          v1303 = unk_255794210;
        }
        v621 = *(_QWORD *)(v620 + 8);
        if (v621 < *(_QWORD *)(v620 + 16))
          goto LABEL_1318;
        goto LABEL_1319;
      }
      v618 = (void **)(v619 + 1);
      v615 = v617 - (char *)v618;
    }
    while (v617 - (char *)v618 >= 4);
  }
  v620 = *a2;
  __s[0] = (void *)v614;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1735) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1712), *(_QWORD *)(v1285 + 1720));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1712);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1728);
  }
  sub_223651BE0();
  if (byte_255794217 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794200, *((unint64_t *)&xmmword_255794200 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794200;
    v1303 = unk_255794210;
  }
  v621 = *(_QWORD *)(v620 + 8);
  if (v621 >= *(_QWORD *)(v620 + 16))
  {
LABEL_1319:
    v626 = sub_2236285DC((char **)v620, (uint64_t)__s);
  }
  else
  {
LABEL_1318:
    v622 = __s[0];
    *(_DWORD *)(v621 + 8) = __s[1];
    *(_QWORD *)v621 = v622;
    v623 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v621 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v621 + 16) = v623;
    memset(&v1300, 0, sizeof(v1300));
    v624 = *(_QWORD *)v1302;
    *(_OWORD *)(v621 + 40) = v1301;
    *(_QWORD *)(v621 + 56) = v624;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v625 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v621 + 80) = v1303;
    *(_OWORD *)(v621 + 64) = v625;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v626 = (char *)(v621 + 88);
  }
  *(_QWORD *)(v620 + 8) = v626;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1322;
LABEL_1326:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1323;
    goto LABEL_1327;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1326;
LABEL_1322:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1323;
LABEL_1327:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1323:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v627 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v628 = v1294;
  }
  else
  {
    v627 = (uint64_t)v1294[1];
    v628 = (void **)v1294[0];
  }
  if (v627 >= 18)
  {
    v629 = (char *)v628 + v627;
    v630 = v628;
    do
    {
      v631 = (char *)memchr(v630, 67, v627 - 17);
      if (!v631)
        break;
      if (*(_QWORD *)v631 == 0x456C656E6E616843
        && *((_QWORD *)v631 + 1) == 0x696F763C726F7272
        && *((_WORD *)v631 + 8) == 15972)
      {
        if (v631 != v629 && v631 - (char *)v628 != -1)
          goto LABEL_1368;
        break;
      }
      v630 = (void **)(v631 + 1);
      v627 = v629 - (char *)v630;
    }
    while (v629 - (char *)v630 >= 18);
  }
  v634 = *a2;
  __s[0] = (void *)(v614 + 1);
  LODWORD(__s[1]) = 3;
  v635 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v636 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v636 = __dst.__r_.__value_.__l.__size_;
  v637 = v636 + 6;
  if (v636 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v637 >= 0x17)
  {
    v639 = (v637 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v637 | 7) != 0x17)
      v639 = v637 | 7;
    v640 = v639 + 1;
    v638 = (std::string *)operator new(v639 + 1);
    v1300.__r_.__value_.__l.__size_ = v636 + 6;
    v1300.__r_.__value_.__r.__words[2] = v640 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v638;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v638 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v636 + 6;
    if (!v636)
      goto LABEL_1360;
  }
  if (v635 >= 0)
    v641 = &__dst;
  else
    v641 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v638, v641, v636);
LABEL_1360:
  strcpy((char *)v638 + v636, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v642 = *(_QWORD *)(v634 + 8);
  if (v642 >= *(_QWORD *)(v634 + 16))
  {
    v648 = sub_2236285DC((char **)v634, (uint64_t)__s);
    v649 = SHIBYTE(v1303);
    *(_QWORD *)(v634 + 8) = v648;
    if (v649 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1367;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1367;
    }
LABEL_1362:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1363;
    goto LABEL_1368;
  }
  v643 = __s[0];
  *(_DWORD *)(v642 + 8) = __s[1];
  *(_QWORD *)v642 = v643;
  v644 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v642 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v642 + 16) = v644;
  memset(&v1300, 0, sizeof(v1300));
  v645 = *(_QWORD *)v1302;
  *(_OWORD *)(v642 + 40) = v1301;
  *(_QWORD *)(v642 + 56) = v645;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v646 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v642 + 80) = v1303;
  *(_OWORD *)(v642 + 64) = v646;
  *(_QWORD *)(v634 + 8) = v642 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1362;
LABEL_1367:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1363:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v647 = *(std::__shared_weak_count **)(v1285 + 1816);
    if (!v647)
      goto LABEL_1372;
    goto LABEL_1369;
  }
LABEL_1368:
  v647 = *(std::__shared_weak_count **)(v1285 + 1816);
  if (!v647)
  {
LABEL_1372:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v653 = 0;
    goto LABEL_1389;
  }
LABEL_1369:
  v650 = std::__shared_weak_count::lock(v647);
  if (!v650)
    goto LABEL_1372;
  v651 = v650;
  v652 = *(_QWORD *)(v1285 + 1808);
  if (v652)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v652 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v654 = (unint64_t *)&v651->__shared_owners_;
  do
    v655 = __ldaxr(v654);
  while (__stlxr(v655 - 1, v654));
  if (v655)
  {
    v653 = (void **)v1291;
    v656 = v1292;
    if (v1291 == v1292)
      goto LABEL_1389;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
    std::__shared_weak_count::__release_weak(v651);
    v653 = (void **)v1291;
    v656 = v1292;
    if (v1291 == v1292)
      goto LABEL_1389;
  }
  do
  {
    v657 = a2[1];
    __s[0] = (void *)v614;
    __s[1] = *v653;
    memset(&v1300, 0, sizeof(v1300));
    v658 = *(_QWORD *)(v657 + 8);
    if (v658 < *(_QWORD *)(v657 + 16))
    {
      *(_OWORD *)v658 = *(_OWORD *)__s;
      *(_QWORD *)(v658 + 24) = 0;
      *(_QWORD *)(v658 + 32) = 0;
      *(_QWORD *)(v658 + 16) = 0;
      *(_QWORD *)(v657 + 8) = v658 + 40;
    }
    else
    {
      v659 = sub_223628FA4((void **)v657, (uint64_t)__s);
      v660 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v657 + 8) = v659;
      if (v660 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v653;
  }
  while (v653 != v656);
  v653 = (void **)v1291;
LABEL_1389:
  if (v653)
  {
    v1292 = v653;
    operator delete(v653);
  }
  v661 = *(std::__shared_weak_count **)(v1285 + 1816);
  if (!v661 || (v662 = std::__shared_weak_count::lock(v661)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v665 = 0;
    goto LABEL_1410;
  }
  v663 = v662;
  v664 = *(_QWORD *)(v1285 + 1808);
  if (v664)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v664 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v666 = (unint64_t *)&v663->__shared_owners_;
  do
    v667 = __ldaxr(v666);
  while (__stlxr(v667 - 1, v666));
  if (v667)
  {
    v665 = (void **)v1291;
    v668 = v1292;
    if (v1291 == v1292)
      goto LABEL_1410;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
    std::__shared_weak_count::__release_weak(v663);
    v665 = (void **)v1291;
    v668 = v1292;
    if (v1291 == v1292)
      goto LABEL_1410;
  }
  v669 = (void *)(v614 + 1);
  do
  {
    v670 = a2[1];
    __s[0] = v669;
    __s[1] = *v665;
    memset(&v1300, 0, sizeof(v1300));
    v671 = *(_QWORD *)(v670 + 8);
    if (v671 < *(_QWORD *)(v670 + 16))
    {
      *(_OWORD *)v671 = *(_OWORD *)__s;
      *(_QWORD *)(v671 + 24) = 0;
      *(_QWORD *)(v671 + 32) = 0;
      *(_QWORD *)(v671 + 16) = 0;
      *(_QWORD *)(v670 + 8) = v671 + 40;
    }
    else
    {
      v672 = sub_223628FA4((void **)v670, (uint64_t)__s);
      v673 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v670 + 8) = v672;
      if (v673 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v665;
  }
  while (v665 != v668);
  v665 = (void **)v1291;
LABEL_1410:
  if (v665)
  {
    v1292 = v665;
    operator delete(v665);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1414:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1415;
LABEL_1419:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v674 = v1285;
      if ((*(char *)(v1285 + 1879) & 0x80000000) == 0)
        goto LABEL_1416;
      goto LABEL_1420;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1414;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1419;
LABEL_1415:
  v674 = v1285;
  if ((*(char *)(v1285 + 1879) & 0x80000000) == 0)
  {
LABEL_1416:
    __dst = *(std::string *)(v674 + 1856);
    goto LABEL_1421;
  }
LABEL_1420:
  sub_223197FA4(&__dst, *(void **)(v674 + 1856), *(_QWORD *)(v674 + 1864));
  v674 = v1285;
LABEL_1421:
  v675 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v674 + 1944) + 48))(*(_QWORD *)(v674 + 1944));
  sub_223651DA4();
  if (byte_25579425F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794248, *((unint64_t *)&xmmword_255794248 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794248;
    v1297 = unk_255794258;
  }
  v676 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v677 = v1296;
  }
  else
  {
    v676 = (uint64_t)v1296[1];
    v677 = (void **)v1296[0];
  }
  if (v676 >= 4)
  {
    v678 = (char *)v677 + v676;
    v679 = v677;
    do
    {
      v680 = (char *)memchr(v679, 118, v676 - 3);
      if (!v680)
        break;
      if (*(_DWORD *)v680 == 1684631414)
      {
        if (v680 == v678 || v680 - (char *)v677 == -1)
          break;
        v681 = *a2;
        __s[0] = (void *)v675;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 1903) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 1880), *(_QWORD *)(v1285 + 1888));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 1880);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1896);
        }
        sub_2236528D4();
        if (byte_255794367 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794350, *((unint64_t *)&xmmword_255794350 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794350;
          v1303 = unk_255794360;
        }
        v682 = *(_QWORD *)(v681 + 8);
        if (v682 < *(_QWORD *)(v681 + 16))
          goto LABEL_1447;
        goto LABEL_1448;
      }
      v679 = (void **)(v680 + 1);
      v676 = v678 - (char *)v679;
    }
    while (v678 - (char *)v679 >= 4);
  }
  v681 = *a2;
  __s[0] = (void *)v675;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 1903) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 1880), *(_QWORD *)(v1285 + 1888));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 1880);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 1896);
  }
  sub_2236528D4();
  if (byte_255794367 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794350, *((unint64_t *)&xmmword_255794350 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794350;
    v1303 = unk_255794360;
  }
  v682 = *(_QWORD *)(v681 + 8);
  if (v682 >= *(_QWORD *)(v681 + 16))
  {
LABEL_1448:
    v687 = sub_2236285DC((char **)v681, (uint64_t)__s);
  }
  else
  {
LABEL_1447:
    v683 = __s[0];
    *(_DWORD *)(v682 + 8) = __s[1];
    *(_QWORD *)v682 = v683;
    v684 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v682 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v682 + 16) = v684;
    memset(&v1300, 0, sizeof(v1300));
    v685 = *(_QWORD *)v1302;
    *(_OWORD *)(v682 + 40) = v1301;
    *(_QWORD *)(v682 + 56) = v685;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v686 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v682 + 80) = v1303;
    *(_OWORD *)(v682 + 64) = v686;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v687 = (char *)(v682 + 88);
  }
  *(_QWORD *)(v681 + 8) = v687;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1451;
LABEL_1455:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1452;
    goto LABEL_1456;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1455;
LABEL_1451:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1452;
LABEL_1456:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1452:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v688 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v689 = v1294;
  }
  else
  {
    v688 = (uint64_t)v1294[1];
    v689 = (void **)v1294[0];
  }
  if (v688 >= 18)
  {
    v690 = (char *)v689 + v688;
    v691 = v689;
    do
    {
      v692 = (char *)memchr(v691, 67, v688 - 17);
      if (!v692)
        break;
      if (*(_QWORD *)v692 == 0x456C656E6E616843
        && *((_QWORD *)v692 + 1) == 0x696F763C726F7272
        && *((_WORD *)v692 + 8) == 15972)
      {
        if (v692 != v690 && v692 - (char *)v689 != -1)
          goto LABEL_1497;
        break;
      }
      v691 = (void **)(v692 + 1);
      v688 = v690 - (char *)v691;
    }
    while (v690 - (char *)v691 >= 18);
  }
  v695 = *a2;
  __s[0] = (void *)(v675 + 1);
  LODWORD(__s[1]) = 3;
  v696 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v697 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v697 = __dst.__r_.__value_.__l.__size_;
  v698 = v697 + 6;
  if (v697 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v698 >= 0x17)
  {
    v700 = (v698 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v698 | 7) != 0x17)
      v700 = v698 | 7;
    v701 = v700 + 1;
    v699 = (std::string *)operator new(v700 + 1);
    v1300.__r_.__value_.__l.__size_ = v697 + 6;
    v1300.__r_.__value_.__r.__words[2] = v701 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v699;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v699 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v697 + 6;
    if (!v697)
      goto LABEL_1489;
  }
  if (v696 >= 0)
    v702 = &__dst;
  else
    v702 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v699, v702, v697);
LABEL_1489:
  strcpy((char *)v699 + v697, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v703 = *(_QWORD *)(v695 + 8);
  if (v703 >= *(_QWORD *)(v695 + 16))
  {
    v709 = sub_2236285DC((char **)v695, (uint64_t)__s);
    v710 = SHIBYTE(v1303);
    *(_QWORD *)(v695 + 8) = v709;
    if (v710 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1496;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1496;
    }
LABEL_1491:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1492;
    goto LABEL_1497;
  }
  v704 = __s[0];
  *(_DWORD *)(v703 + 8) = __s[1];
  *(_QWORD *)v703 = v704;
  v705 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v703 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v703 + 16) = v705;
  memset(&v1300, 0, sizeof(v1300));
  v706 = *(_QWORD *)v1302;
  *(_OWORD *)(v703 + 40) = v1301;
  *(_QWORD *)(v703 + 56) = v706;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v707 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v703 + 80) = v1303;
  *(_OWORD *)(v703 + 64) = v707;
  *(_QWORD *)(v695 + 8) = v703 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1491;
LABEL_1496:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1492:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v708 = *(std::__shared_weak_count **)(v1285 + 1984);
    if (!v708)
      goto LABEL_1501;
    goto LABEL_1498;
  }
LABEL_1497:
  v708 = *(std::__shared_weak_count **)(v1285 + 1984);
  if (!v708)
  {
LABEL_1501:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v714 = 0;
    goto LABEL_1518;
  }
LABEL_1498:
  v711 = std::__shared_weak_count::lock(v708);
  if (!v711)
    goto LABEL_1501;
  v712 = v711;
  v713 = *(_QWORD *)(v1285 + 1976);
  if (v713)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v713 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v715 = (unint64_t *)&v712->__shared_owners_;
  do
    v716 = __ldaxr(v715);
  while (__stlxr(v716 - 1, v715));
  if (v716)
  {
    v714 = (void **)v1291;
    v717 = v1292;
    if (v1291 == v1292)
      goto LABEL_1518;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
    std::__shared_weak_count::__release_weak(v712);
    v714 = (void **)v1291;
    v717 = v1292;
    if (v1291 == v1292)
      goto LABEL_1518;
  }
  do
  {
    v718 = a2[1];
    __s[0] = (void *)v675;
    __s[1] = *v714;
    memset(&v1300, 0, sizeof(v1300));
    v719 = *(_QWORD *)(v718 + 8);
    if (v719 < *(_QWORD *)(v718 + 16))
    {
      *(_OWORD *)v719 = *(_OWORD *)__s;
      *(_QWORD *)(v719 + 24) = 0;
      *(_QWORD *)(v719 + 32) = 0;
      *(_QWORD *)(v719 + 16) = 0;
      *(_QWORD *)(v718 + 8) = v719 + 40;
    }
    else
    {
      v720 = sub_223628FA4((void **)v718, (uint64_t)__s);
      v721 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v718 + 8) = v720;
      if (v721 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v714;
  }
  while (v714 != v717);
  v714 = (void **)v1291;
LABEL_1518:
  if (v714)
  {
    v1292 = v714;
    operator delete(v714);
  }
  v722 = *(std::__shared_weak_count **)(v1285 + 1984);
  if (!v722 || (v723 = std::__shared_weak_count::lock(v722)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v726 = 0;
    goto LABEL_1539;
  }
  v724 = v723;
  v725 = *(_QWORD *)(v1285 + 1976);
  if (v725)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v725 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v727 = (unint64_t *)&v724->__shared_owners_;
  do
    v728 = __ldaxr(v727);
  while (__stlxr(v728 - 1, v727));
  if (v728)
  {
    v726 = (void **)v1291;
    v729 = v1292;
    if (v1291 == v1292)
      goto LABEL_1539;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
    std::__shared_weak_count::__release_weak(v724);
    v726 = (void **)v1291;
    v729 = v1292;
    if (v1291 == v1292)
      goto LABEL_1539;
  }
  v730 = (void *)(v675 + 1);
  do
  {
    v731 = a2[1];
    __s[0] = v730;
    __s[1] = *v726;
    memset(&v1300, 0, sizeof(v1300));
    v732 = *(_QWORD *)(v731 + 8);
    if (v732 < *(_QWORD *)(v731 + 16))
    {
      *(_OWORD *)v732 = *(_OWORD *)__s;
      *(_QWORD *)(v732 + 24) = 0;
      *(_QWORD *)(v732 + 32) = 0;
      *(_QWORD *)(v732 + 16) = 0;
      *(_QWORD *)(v731 + 8) = v732 + 40;
    }
    else
    {
      v733 = sub_223628FA4((void **)v731, (uint64_t)__s);
      v734 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v731 + 8) = v733;
      if (v734 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v726;
  }
  while (v726 != v729);
  v726 = (void **)v1291;
LABEL_1539:
  if (v726)
  {
    v1292 = v726;
    operator delete(v726);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1543:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1544;
LABEL_1548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v735 = v1285;
      if ((*(char *)(v1285 + 2047) & 0x80000000) == 0)
        goto LABEL_1545;
      goto LABEL_1549;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1543;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1548;
LABEL_1544:
  v735 = v1285;
  if ((*(char *)(v1285 + 2047) & 0x80000000) == 0)
  {
LABEL_1545:
    __dst = *(std::string *)(v735 + 2024);
    goto LABEL_1550;
  }
LABEL_1549:
  sub_223197FA4(&__dst, *(void **)(v735 + 2024), *(_QWORD *)(v735 + 2032));
  v735 = v1285;
LABEL_1550:
  v736 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v735 + 2112) + 48))(*(_QWORD *)(v735 + 2112));
  sub_223651DA4();
  if (byte_25579425F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794248, *((unint64_t *)&xmmword_255794248 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794248;
    v1297 = unk_255794258;
  }
  v737 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v738 = v1296;
  }
  else
  {
    v737 = (uint64_t)v1296[1];
    v738 = (void **)v1296[0];
  }
  if (v737 >= 4)
  {
    v739 = (char *)v738 + v737;
    v740 = v738;
    do
    {
      v741 = (char *)memchr(v740, 118, v737 - 3);
      if (!v741)
        break;
      if (*(_DWORD *)v741 == 1684631414)
      {
        if (v741 == v739 || v741 - (char *)v738 == -1)
          break;
        v742 = *a2;
        __s[0] = (void *)v736;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2071) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2048), *(_QWORD *)(v1285 + 2056));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2048);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2064);
        }
        sub_223652A98();
        if (byte_2557943AF < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794398, *((unint64_t *)&xmmword_255794398 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794398;
          v1303 = unk_2557943A8;
        }
        v743 = *(_QWORD *)(v742 + 8);
        if (v743 < *(_QWORD *)(v742 + 16))
          goto LABEL_1576;
        goto LABEL_1577;
      }
      v740 = (void **)(v741 + 1);
      v737 = v739 - (char *)v740;
    }
    while (v739 - (char *)v740 >= 4);
  }
  v742 = *a2;
  __s[0] = (void *)v736;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2071) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2048), *(_QWORD *)(v1285 + 2056));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2048);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2064);
  }
  sub_223652A98();
  if (byte_2557943AF < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794398, *((unint64_t *)&xmmword_255794398 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794398;
    v1303 = unk_2557943A8;
  }
  v743 = *(_QWORD *)(v742 + 8);
  if (v743 >= *(_QWORD *)(v742 + 16))
  {
LABEL_1577:
    v748 = sub_2236285DC((char **)v742, (uint64_t)__s);
  }
  else
  {
LABEL_1576:
    v744 = __s[0];
    *(_DWORD *)(v743 + 8) = __s[1];
    *(_QWORD *)v743 = v744;
    v745 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v743 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v743 + 16) = v745;
    memset(&v1300, 0, sizeof(v1300));
    v746 = *(_QWORD *)v1302;
    *(_OWORD *)(v743 + 40) = v1301;
    *(_QWORD *)(v743 + 56) = v746;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v747 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v743 + 80) = v1303;
    *(_OWORD *)(v743 + 64) = v747;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v748 = (char *)(v743 + 88);
  }
  *(_QWORD *)(v742 + 8) = v748;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1580;
LABEL_1584:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1581;
    goto LABEL_1585;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1584;
LABEL_1580:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1581;
LABEL_1585:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1581:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v749 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v750 = v1294;
  }
  else
  {
    v749 = (uint64_t)v1294[1];
    v750 = (void **)v1294[0];
  }
  if (v749 >= 18)
  {
    v751 = (char *)v750 + v749;
    v752 = v750;
    do
    {
      v753 = (char *)memchr(v752, 67, v749 - 17);
      if (!v753)
        break;
      if (*(_QWORD *)v753 == 0x456C656E6E616843
        && *((_QWORD *)v753 + 1) == 0x696F763C726F7272
        && *((_WORD *)v753 + 8) == 15972)
      {
        if (v753 != v751 && v753 - (char *)v750 != -1)
          goto LABEL_1626;
        break;
      }
      v752 = (void **)(v753 + 1);
      v749 = v751 - (char *)v752;
    }
    while (v751 - (char *)v752 >= 18);
  }
  v756 = *a2;
  __s[0] = (void *)(v736 + 1);
  LODWORD(__s[1]) = 3;
  v757 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v758 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v758 = __dst.__r_.__value_.__l.__size_;
  v759 = v758 + 6;
  if (v758 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v759 >= 0x17)
  {
    v761 = (v759 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v759 | 7) != 0x17)
      v761 = v759 | 7;
    v762 = v761 + 1;
    v760 = (std::string *)operator new(v761 + 1);
    v1300.__r_.__value_.__l.__size_ = v758 + 6;
    v1300.__r_.__value_.__r.__words[2] = v762 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v760;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v760 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v758 + 6;
    if (!v758)
      goto LABEL_1618;
  }
  if (v757 >= 0)
    v763 = &__dst;
  else
    v763 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v760, v763, v758);
LABEL_1618:
  strcpy((char *)v760 + v758, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v764 = *(_QWORD *)(v756 + 8);
  if (v764 >= *(_QWORD *)(v756 + 16))
  {
    v770 = sub_2236285DC((char **)v756, (uint64_t)__s);
    v771 = SHIBYTE(v1303);
    *(_QWORD *)(v756 + 8) = v770;
    if (v771 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1625;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1625;
    }
LABEL_1620:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1621;
    goto LABEL_1626;
  }
  v765 = __s[0];
  *(_DWORD *)(v764 + 8) = __s[1];
  *(_QWORD *)v764 = v765;
  v766 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v764 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v764 + 16) = v766;
  memset(&v1300, 0, sizeof(v1300));
  v767 = *(_QWORD *)v1302;
  *(_OWORD *)(v764 + 40) = v1301;
  *(_QWORD *)(v764 + 56) = v767;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v768 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v764 + 80) = v1303;
  *(_OWORD *)(v764 + 64) = v768;
  *(_QWORD *)(v756 + 8) = v764 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1620;
LABEL_1625:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1621:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v769 = *(std::__shared_weak_count **)(v1285 + 2152);
    if (!v769)
      goto LABEL_1630;
    goto LABEL_1627;
  }
LABEL_1626:
  v769 = *(std::__shared_weak_count **)(v1285 + 2152);
  if (!v769)
  {
LABEL_1630:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v775 = 0;
    goto LABEL_1647;
  }
LABEL_1627:
  v772 = std::__shared_weak_count::lock(v769);
  if (!v772)
    goto LABEL_1630;
  v773 = v772;
  v774 = *(_QWORD *)(v1285 + 2144);
  if (v774)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v774 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v776 = (unint64_t *)&v773->__shared_owners_;
  do
    v777 = __ldaxr(v776);
  while (__stlxr(v777 - 1, v776));
  if (v777)
  {
    v775 = (void **)v1291;
    v778 = v1292;
    if (v1291 == v1292)
      goto LABEL_1647;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
    std::__shared_weak_count::__release_weak(v773);
    v775 = (void **)v1291;
    v778 = v1292;
    if (v1291 == v1292)
      goto LABEL_1647;
  }
  do
  {
    v779 = a2[1];
    __s[0] = (void *)v736;
    __s[1] = *v775;
    memset(&v1300, 0, sizeof(v1300));
    v780 = *(_QWORD *)(v779 + 8);
    if (v780 < *(_QWORD *)(v779 + 16))
    {
      *(_OWORD *)v780 = *(_OWORD *)__s;
      *(_QWORD *)(v780 + 24) = 0;
      *(_QWORD *)(v780 + 32) = 0;
      *(_QWORD *)(v780 + 16) = 0;
      *(_QWORD *)(v779 + 8) = v780 + 40;
    }
    else
    {
      v781 = sub_223628FA4((void **)v779, (uint64_t)__s);
      v782 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v779 + 8) = v781;
      if (v782 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v775;
  }
  while (v775 != v778);
  v775 = (void **)v1291;
LABEL_1647:
  if (v775)
  {
    v1292 = v775;
    operator delete(v775);
  }
  v783 = *(std::__shared_weak_count **)(v1285 + 2152);
  if (!v783 || (v784 = std::__shared_weak_count::lock(v783)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v787 = 0;
    goto LABEL_1668;
  }
  v785 = v784;
  v786 = *(_QWORD *)(v1285 + 2144);
  if (v786)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v786 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v788 = (unint64_t *)&v785->__shared_owners_;
  do
    v789 = __ldaxr(v788);
  while (__stlxr(v789 - 1, v788));
  if (v789)
  {
    v787 = (void **)v1291;
    v790 = v1292;
    if (v1291 == v1292)
      goto LABEL_1668;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
    std::__shared_weak_count::__release_weak(v785);
    v787 = (void **)v1291;
    v790 = v1292;
    if (v1291 == v1292)
      goto LABEL_1668;
  }
  v791 = (void *)(v736 + 1);
  do
  {
    v792 = a2[1];
    __s[0] = v791;
    __s[1] = *v787;
    memset(&v1300, 0, sizeof(v1300));
    v793 = *(_QWORD *)(v792 + 8);
    if (v793 < *(_QWORD *)(v792 + 16))
    {
      *(_OWORD *)v793 = *(_OWORD *)__s;
      *(_QWORD *)(v793 + 24) = 0;
      *(_QWORD *)(v793 + 32) = 0;
      *(_QWORD *)(v793 + 16) = 0;
      *(_QWORD *)(v792 + 8) = v793 + 40;
    }
    else
    {
      v794 = sub_223628FA4((void **)v792, (uint64_t)__s);
      v795 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v792 + 8) = v794;
      if (v795 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v787;
  }
  while (v787 != v790);
  v787 = (void **)v1291;
LABEL_1668:
  if (v787)
  {
    v1292 = v787;
    operator delete(v787);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1672:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1673;
LABEL_1677:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v796 = v1285;
      if ((*(char *)(v1285 + 2215) & 0x80000000) == 0)
        goto LABEL_1674;
      goto LABEL_1678;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1672;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1677;
LABEL_1673:
  v796 = v1285;
  if ((*(char *)(v1285 + 2215) & 0x80000000) == 0)
  {
LABEL_1674:
    __dst = *(std::string *)(v796 + 2192);
    goto LABEL_1679;
  }
LABEL_1678:
  sub_223197FA4(&__dst, *(void **)(v796 + 2192), *(_QWORD *)(v796 + 2200));
  v796 = v1285;
LABEL_1679:
  v797 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v796 + 2280) + 48))(*(_QWORD *)(v796 + 2280));
  sub_223651DA4();
  if (byte_25579425F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794248, *((unint64_t *)&xmmword_255794248 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794248;
    v1297 = unk_255794258;
  }
  v798 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v799 = v1296;
  }
  else
  {
    v798 = (uint64_t)v1296[1];
    v799 = (void **)v1296[0];
  }
  if (v798 >= 4)
  {
    v800 = (char *)v799 + v798;
    v801 = v799;
    do
    {
      v802 = (char *)memchr(v801, 118, v798 - 3);
      if (!v802)
        break;
      if (*(_DWORD *)v802 == 1684631414)
      {
        if (v802 == v800 || v802 - (char *)v799 == -1)
          break;
        v803 = *a2;
        __s[0] = (void *)v797;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2239) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2216), *(_QWORD *)(v1285 + 2224));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2216);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2232);
        }
        sub_223652C5C();
        if (byte_2557943F7 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557943E0, *((unint64_t *)&xmmword_2557943E0 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557943E0;
          v1303 = unk_2557943F0;
        }
        v804 = *(_QWORD *)(v803 + 8);
        if (v804 < *(_QWORD *)(v803 + 16))
          goto LABEL_1705;
        goto LABEL_1706;
      }
      v801 = (void **)(v802 + 1);
      v798 = v800 - (char *)v801;
    }
    while (v800 - (char *)v801 >= 4);
  }
  v803 = *a2;
  __s[0] = (void *)v797;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2239) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2216), *(_QWORD *)(v1285 + 2224));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2216);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2232);
  }
  sub_223652C5C();
  if (byte_2557943F7 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557943E0, *((unint64_t *)&xmmword_2557943E0 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557943E0;
    v1303 = unk_2557943F0;
  }
  v804 = *(_QWORD *)(v803 + 8);
  if (v804 >= *(_QWORD *)(v803 + 16))
  {
LABEL_1706:
    v809 = sub_2236285DC((char **)v803, (uint64_t)__s);
  }
  else
  {
LABEL_1705:
    v805 = __s[0];
    *(_DWORD *)(v804 + 8) = __s[1];
    *(_QWORD *)v804 = v805;
    v806 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v804 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v804 + 16) = v806;
    memset(&v1300, 0, sizeof(v1300));
    v807 = *(_QWORD *)v1302;
    *(_OWORD *)(v804 + 40) = v1301;
    *(_QWORD *)(v804 + 56) = v807;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v808 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v804 + 80) = v1303;
    *(_OWORD *)(v804 + 64) = v808;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v809 = (char *)(v804 + 88);
  }
  *(_QWORD *)(v803 + 8) = v809;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1709;
LABEL_1713:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1710;
    goto LABEL_1714;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1713;
LABEL_1709:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1710;
LABEL_1714:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1710:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v810 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v811 = v1294;
  }
  else
  {
    v810 = (uint64_t)v1294[1];
    v811 = (void **)v1294[0];
  }
  if (v810 >= 18)
  {
    v812 = (char *)v811 + v810;
    v813 = v811;
    do
    {
      v814 = (char *)memchr(v813, 67, v810 - 17);
      if (!v814)
        break;
      if (*(_QWORD *)v814 == 0x456C656E6E616843
        && *((_QWORD *)v814 + 1) == 0x696F763C726F7272
        && *((_WORD *)v814 + 8) == 15972)
      {
        if (v814 != v812 && v814 - (char *)v811 != -1)
          goto LABEL_1755;
        break;
      }
      v813 = (void **)(v814 + 1);
      v810 = v812 - (char *)v813;
    }
    while (v812 - (char *)v813 >= 18);
  }
  v817 = *a2;
  __s[0] = (void *)(v797 + 1);
  LODWORD(__s[1]) = 3;
  v818 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v819 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v819 = __dst.__r_.__value_.__l.__size_;
  v820 = v819 + 6;
  if (v819 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v820 >= 0x17)
  {
    v822 = (v820 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v820 | 7) != 0x17)
      v822 = v820 | 7;
    v823 = v822 + 1;
    v821 = (std::string *)operator new(v822 + 1);
    v1300.__r_.__value_.__l.__size_ = v819 + 6;
    v1300.__r_.__value_.__r.__words[2] = v823 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v821;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v821 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v819 + 6;
    if (!v819)
      goto LABEL_1747;
  }
  if (v818 >= 0)
    v824 = &__dst;
  else
    v824 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v821, v824, v819);
LABEL_1747:
  strcpy((char *)v821 + v819, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v825 = *(_QWORD *)(v817 + 8);
  if (v825 >= *(_QWORD *)(v817 + 16))
  {
    v831 = sub_2236285DC((char **)v817, (uint64_t)__s);
    v832 = SHIBYTE(v1303);
    *(_QWORD *)(v817 + 8) = v831;
    if (v832 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1754;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1754;
    }
LABEL_1749:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1750;
    goto LABEL_1755;
  }
  v826 = __s[0];
  *(_DWORD *)(v825 + 8) = __s[1];
  *(_QWORD *)v825 = v826;
  v827 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v825 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v825 + 16) = v827;
  memset(&v1300, 0, sizeof(v1300));
  v828 = *(_QWORD *)v1302;
  *(_OWORD *)(v825 + 40) = v1301;
  *(_QWORD *)(v825 + 56) = v828;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v829 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v825 + 80) = v1303;
  *(_OWORD *)(v825 + 64) = v829;
  *(_QWORD *)(v817 + 8) = v825 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1749;
LABEL_1754:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1750:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v830 = *(std::__shared_weak_count **)(v1285 + 2320);
    if (!v830)
      goto LABEL_1759;
    goto LABEL_1756;
  }
LABEL_1755:
  v830 = *(std::__shared_weak_count **)(v1285 + 2320);
  if (!v830)
  {
LABEL_1759:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v836 = 0;
    goto LABEL_1776;
  }
LABEL_1756:
  v833 = std::__shared_weak_count::lock(v830);
  if (!v833)
    goto LABEL_1759;
  v834 = v833;
  v835 = *(_QWORD *)(v1285 + 2312);
  if (v835)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v835 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v837 = (unint64_t *)&v834->__shared_owners_;
  do
    v838 = __ldaxr(v837);
  while (__stlxr(v838 - 1, v837));
  if (v838)
  {
    v836 = (void **)v1291;
    v839 = v1292;
    if (v1291 == v1292)
      goto LABEL_1776;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
    std::__shared_weak_count::__release_weak(v834);
    v836 = (void **)v1291;
    v839 = v1292;
    if (v1291 == v1292)
      goto LABEL_1776;
  }
  do
  {
    v840 = a2[1];
    __s[0] = (void *)v797;
    __s[1] = *v836;
    memset(&v1300, 0, sizeof(v1300));
    v841 = *(_QWORD *)(v840 + 8);
    if (v841 < *(_QWORD *)(v840 + 16))
    {
      *(_OWORD *)v841 = *(_OWORD *)__s;
      *(_QWORD *)(v841 + 24) = 0;
      *(_QWORD *)(v841 + 32) = 0;
      *(_QWORD *)(v841 + 16) = 0;
      *(_QWORD *)(v840 + 8) = v841 + 40;
    }
    else
    {
      v842 = sub_223628FA4((void **)v840, (uint64_t)__s);
      v843 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v840 + 8) = v842;
      if (v843 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v836;
  }
  while (v836 != v839);
  v836 = (void **)v1291;
LABEL_1776:
  if (v836)
  {
    v1292 = v836;
    operator delete(v836);
  }
  v844 = *(std::__shared_weak_count **)(v1285 + 2320);
  if (!v844 || (v845 = std::__shared_weak_count::lock(v844)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v848 = 0;
    goto LABEL_1797;
  }
  v846 = v845;
  v847 = *(_QWORD *)(v1285 + 2312);
  if (v847)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v847 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v849 = (unint64_t *)&v846->__shared_owners_;
  do
    v850 = __ldaxr(v849);
  while (__stlxr(v850 - 1, v849));
  if (v850)
  {
    v848 = (void **)v1291;
    v851 = v1292;
    if (v1291 == v1292)
      goto LABEL_1797;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v846->__on_zero_shared)(v846);
    std::__shared_weak_count::__release_weak(v846);
    v848 = (void **)v1291;
    v851 = v1292;
    if (v1291 == v1292)
      goto LABEL_1797;
  }
  v852 = (void *)(v797 + 1);
  do
  {
    v853 = a2[1];
    __s[0] = v852;
    __s[1] = *v848;
    memset(&v1300, 0, sizeof(v1300));
    v854 = *(_QWORD *)(v853 + 8);
    if (v854 < *(_QWORD *)(v853 + 16))
    {
      *(_OWORD *)v854 = *(_OWORD *)__s;
      *(_QWORD *)(v854 + 24) = 0;
      *(_QWORD *)(v854 + 32) = 0;
      *(_QWORD *)(v854 + 16) = 0;
      *(_QWORD *)(v853 + 8) = v854 + 40;
    }
    else
    {
      v855 = sub_223628FA4((void **)v853, (uint64_t)__s);
      v856 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v853 + 8) = v855;
      if (v856 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v848;
  }
  while (v848 != v851);
  v848 = (void **)v1291;
LABEL_1797:
  if (v848)
  {
    v1292 = v848;
    operator delete(v848);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1801:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1802;
LABEL_1806:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v857 = v1285;
      if ((*(char *)(v1285 + 2383) & 0x80000000) == 0)
        goto LABEL_1803;
      goto LABEL_1807;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1801;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1806;
LABEL_1802:
  v857 = v1285;
  if ((*(char *)(v1285 + 2383) & 0x80000000) == 0)
  {
LABEL_1803:
    __dst = *(std::string *)(v857 + 2360);
    goto LABEL_1808;
  }
LABEL_1807:
  sub_223197FA4(&__dst, *(void **)(v857 + 2360), *(_QWORD *)(v857 + 2368));
  v857 = v1285;
LABEL_1808:
  v858 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v857 + 2448) + 48))(*(_QWORD *)(v857 + 2448));
  sub_223651DA4();
  if (byte_25579425F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794248, *((unint64_t *)&xmmword_255794248 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794248;
    v1297 = unk_255794258;
  }
  v859 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v860 = v1296;
  }
  else
  {
    v859 = (uint64_t)v1296[1];
    v860 = (void **)v1296[0];
  }
  if (v859 >= 4)
  {
    v861 = (char *)v860 + v859;
    v862 = v860;
    do
    {
      v863 = (char *)memchr(v862, 118, v859 - 3);
      if (!v863)
        break;
      if (*(_DWORD *)v863 == 1684631414)
      {
        if (v863 == v861 || v863 - (char *)v860 == -1)
          break;
        v864 = *a2;
        __s[0] = (void *)v858;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2407) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2384), *(_QWORD *)(v1285 + 2392));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2384);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2400);
        }
        sub_223652E20();
        if (byte_25579443F < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794428, *((unint64_t *)&xmmword_255794428 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794428;
          v1303 = unk_255794438;
        }
        v865 = *(_QWORD *)(v864 + 8);
        if (v865 < *(_QWORD *)(v864 + 16))
          goto LABEL_1834;
        goto LABEL_1835;
      }
      v862 = (void **)(v863 + 1);
      v859 = v861 - (char *)v862;
    }
    while (v861 - (char *)v862 >= 4);
  }
  v864 = *a2;
  __s[0] = (void *)v858;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2407) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2384), *(_QWORD *)(v1285 + 2392));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2384);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2400);
  }
  sub_223652E20();
  if (byte_25579443F < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794428, *((unint64_t *)&xmmword_255794428 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794428;
    v1303 = unk_255794438;
  }
  v865 = *(_QWORD *)(v864 + 8);
  if (v865 >= *(_QWORD *)(v864 + 16))
  {
LABEL_1835:
    v870 = sub_2236285DC((char **)v864, (uint64_t)__s);
  }
  else
  {
LABEL_1834:
    v866 = __s[0];
    *(_DWORD *)(v865 + 8) = __s[1];
    *(_QWORD *)v865 = v866;
    v867 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v865 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v865 + 16) = v867;
    memset(&v1300, 0, sizeof(v1300));
    v868 = *(_QWORD *)v1302;
    *(_OWORD *)(v865 + 40) = v1301;
    *(_QWORD *)(v865 + 56) = v868;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v869 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v865 + 80) = v1303;
    *(_OWORD *)(v865 + 64) = v869;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v870 = (char *)(v865 + 88);
  }
  *(_QWORD *)(v864 + 8) = v870;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1838;
LABEL_1842:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1839;
    goto LABEL_1843;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1842;
LABEL_1838:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1839;
LABEL_1843:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1839:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v871 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v872 = v1294;
  }
  else
  {
    v871 = (uint64_t)v1294[1];
    v872 = (void **)v1294[0];
  }
  if (v871 >= 18)
  {
    v873 = (char *)v872 + v871;
    v874 = v872;
    do
    {
      v875 = (char *)memchr(v874, 67, v871 - 17);
      if (!v875)
        break;
      if (*(_QWORD *)v875 == 0x456C656E6E616843
        && *((_QWORD *)v875 + 1) == 0x696F763C726F7272
        && *((_WORD *)v875 + 8) == 15972)
      {
        if (v875 != v873 && v875 - (char *)v872 != -1)
          goto LABEL_1884;
        break;
      }
      v874 = (void **)(v875 + 1);
      v871 = v873 - (char *)v874;
    }
    while (v873 - (char *)v874 >= 18);
  }
  v878 = *a2;
  __s[0] = (void *)(v858 + 1);
  LODWORD(__s[1]) = 3;
  v879 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v880 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v880 = __dst.__r_.__value_.__l.__size_;
  v881 = v880 + 6;
  if (v880 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v881 >= 0x17)
  {
    v883 = (v881 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v881 | 7) != 0x17)
      v883 = v881 | 7;
    v884 = v883 + 1;
    v882 = (std::string *)operator new(v883 + 1);
    v1300.__r_.__value_.__l.__size_ = v880 + 6;
    v1300.__r_.__value_.__r.__words[2] = v884 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v882;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v882 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v880 + 6;
    if (!v880)
      goto LABEL_1876;
  }
  if (v879 >= 0)
    v885 = &__dst;
  else
    v885 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v882, v885, v880);
LABEL_1876:
  strcpy((char *)v882 + v880, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v886 = *(_QWORD *)(v878 + 8);
  if (v886 >= *(_QWORD *)(v878 + 16))
  {
    v892 = sub_2236285DC((char **)v878, (uint64_t)__s);
    v893 = SHIBYTE(v1303);
    *(_QWORD *)(v878 + 8) = v892;
    if (v893 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_1883;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_1883;
    }
LABEL_1878:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1879;
    goto LABEL_1884;
  }
  v887 = __s[0];
  *(_DWORD *)(v886 + 8) = __s[1];
  *(_QWORD *)v886 = v887;
  v888 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v886 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v886 + 16) = v888;
  memset(&v1300, 0, sizeof(v1300));
  v889 = *(_QWORD *)v1302;
  *(_OWORD *)(v886 + 40) = v1301;
  *(_QWORD *)(v886 + 56) = v889;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v890 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v886 + 80) = v1303;
  *(_OWORD *)(v886 + 64) = v890;
  *(_QWORD *)(v878 + 8) = v886 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1878;
LABEL_1883:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1879:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v891 = *(std::__shared_weak_count **)(v1285 + 2488);
    if (!v891)
      goto LABEL_1888;
    goto LABEL_1885;
  }
LABEL_1884:
  v891 = *(std::__shared_weak_count **)(v1285 + 2488);
  if (!v891)
  {
LABEL_1888:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v897 = 0;
    goto LABEL_1905;
  }
LABEL_1885:
  v894 = std::__shared_weak_count::lock(v891);
  if (!v894)
    goto LABEL_1888;
  v895 = v894;
  v896 = *(_QWORD *)(v1285 + 2480);
  if (v896)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v896 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v898 = (unint64_t *)&v895->__shared_owners_;
  do
    v899 = __ldaxr(v898);
  while (__stlxr(v899 - 1, v898));
  if (v899)
  {
    v897 = (void **)v1291;
    v900 = v1292;
    if (v1291 == v1292)
      goto LABEL_1905;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
    std::__shared_weak_count::__release_weak(v895);
    v897 = (void **)v1291;
    v900 = v1292;
    if (v1291 == v1292)
      goto LABEL_1905;
  }
  do
  {
    v901 = a2[1];
    __s[0] = (void *)v858;
    __s[1] = *v897;
    memset(&v1300, 0, sizeof(v1300));
    v902 = *(_QWORD *)(v901 + 8);
    if (v902 < *(_QWORD *)(v901 + 16))
    {
      *(_OWORD *)v902 = *(_OWORD *)__s;
      *(_QWORD *)(v902 + 24) = 0;
      *(_QWORD *)(v902 + 32) = 0;
      *(_QWORD *)(v902 + 16) = 0;
      *(_QWORD *)(v901 + 8) = v902 + 40;
    }
    else
    {
      v903 = sub_223628FA4((void **)v901, (uint64_t)__s);
      v904 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v901 + 8) = v903;
      if (v904 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v897;
  }
  while (v897 != v900);
  v897 = (void **)v1291;
LABEL_1905:
  if (v897)
  {
    v1292 = v897;
    operator delete(v897);
  }
  v905 = *(std::__shared_weak_count **)(v1285 + 2488);
  if (!v905 || (v906 = std::__shared_weak_count::lock(v905)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v909 = 0;
    goto LABEL_1926;
  }
  v907 = v906;
  v908 = *(_QWORD *)(v1285 + 2480);
  if (v908)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v908 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v910 = (unint64_t *)&v907->__shared_owners_;
  do
    v911 = __ldaxr(v910);
  while (__stlxr(v911 - 1, v910));
  if (v911)
  {
    v909 = (void **)v1291;
    v912 = v1292;
    if (v1291 == v1292)
      goto LABEL_1926;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
    std::__shared_weak_count::__release_weak(v907);
    v909 = (void **)v1291;
    v912 = v1292;
    if (v1291 == v1292)
      goto LABEL_1926;
  }
  v913 = (void *)(v858 + 1);
  do
  {
    v914 = a2[1];
    __s[0] = v913;
    __s[1] = *v909;
    memset(&v1300, 0, sizeof(v1300));
    v915 = *(_QWORD *)(v914 + 8);
    if (v915 < *(_QWORD *)(v914 + 16))
    {
      *(_OWORD *)v915 = *(_OWORD *)__s;
      *(_QWORD *)(v915 + 24) = 0;
      *(_QWORD *)(v915 + 32) = 0;
      *(_QWORD *)(v915 + 16) = 0;
      *(_QWORD *)(v914 + 8) = v915 + 40;
    }
    else
    {
      v916 = sub_223628FA4((void **)v914, (uint64_t)__s);
      v917 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v914 + 8) = v916;
      if (v917 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v909;
  }
  while (v909 != v912);
  v909 = (void **)v1291;
LABEL_1926:
  if (v909)
  {
    v1292 = v909;
    operator delete(v909);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_1930:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1931;
LABEL_1935:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v918 = v1285;
      if ((*(char *)(v1285 + 2551) & 0x80000000) == 0)
        goto LABEL_1932;
      goto LABEL_1936;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_1930;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1935;
LABEL_1931:
  v918 = v1285;
  if ((*(char *)(v1285 + 2551) & 0x80000000) == 0)
  {
LABEL_1932:
    __dst = *(std::string *)(v918 + 2528);
    goto LABEL_1937;
  }
LABEL_1936:
  sub_223197FA4(&__dst, *(void **)(v918 + 2528), *(_QWORD *)(v918 + 2536));
  v918 = v1285;
LABEL_1937:
  v919 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v918 + 2616) + 48))(*(_QWORD *)(v918 + 2616));
  sub_223651DA4();
  if (byte_25579425F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255794248, *((unint64_t *)&xmmword_255794248 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255794248;
    v1297 = unk_255794258;
  }
  v920 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v921 = v1296;
  }
  else
  {
    v920 = (uint64_t)v1296[1];
    v921 = (void **)v1296[0];
  }
  if (v920 >= 4)
  {
    v922 = (char *)v921 + v920;
    v923 = v921;
    do
    {
      v924 = (char *)memchr(v923, 118, v920 - 3);
      if (!v924)
        break;
      if (*(_DWORD *)v924 == 1684631414)
      {
        if (v924 == v922 || v924 - (char *)v921 == -1)
          break;
        v925 = *a2;
        __s[0] = (void *)v919;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2575) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2552), *(_QWORD *)(v1285 + 2560));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2552);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2568);
        }
        sub_223652FE4();
        if (byte_255794487 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794470, *((unint64_t *)&xmmword_255794470 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794470;
          v1303 = unk_255794480;
        }
        v926 = *(_QWORD *)(v925 + 8);
        if (v926 < *(_QWORD *)(v925 + 16))
          goto LABEL_1963;
        goto LABEL_1964;
      }
      v923 = (void **)(v924 + 1);
      v920 = v922 - (char *)v923;
    }
    while (v922 - (char *)v923 >= 4);
  }
  v925 = *a2;
  __s[0] = (void *)v919;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2575) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2552), *(_QWORD *)(v1285 + 2560));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2552);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2568);
  }
  sub_223652FE4();
  if (byte_255794487 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794470, *((unint64_t *)&xmmword_255794470 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794470;
    v1303 = unk_255794480;
  }
  v926 = *(_QWORD *)(v925 + 8);
  if (v926 >= *(_QWORD *)(v925 + 16))
  {
LABEL_1964:
    v931 = sub_2236285DC((char **)v925, (uint64_t)__s);
  }
  else
  {
LABEL_1963:
    v927 = __s[0];
    *(_DWORD *)(v926 + 8) = __s[1];
    *(_QWORD *)v926 = v927;
    v928 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v926 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v926 + 16) = v928;
    memset(&v1300, 0, sizeof(v1300));
    v929 = *(_QWORD *)v1302;
    *(_OWORD *)(v926 + 40) = v1301;
    *(_QWORD *)(v926 + 56) = v929;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v930 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v926 + 80) = v1303;
    *(_OWORD *)(v926 + 64) = v930;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v931 = (char *)(v926 + 88);
  }
  *(_QWORD *)(v925 + 8) = v931;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_1967;
LABEL_1971:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1968;
    goto LABEL_1972;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_1971;
LABEL_1967:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1968;
LABEL_1972:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_1968:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v932 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v933 = v1294;
  }
  else
  {
    v932 = (uint64_t)v1294[1];
    v933 = (void **)v1294[0];
  }
  if (v932 >= 18)
  {
    v934 = (char *)v933 + v932;
    v935 = v933;
    do
    {
      v936 = (char *)memchr(v935, 67, v932 - 17);
      if (!v936)
        break;
      if (*(_QWORD *)v936 == 0x456C656E6E616843
        && *((_QWORD *)v936 + 1) == 0x696F763C726F7272
        && *((_WORD *)v936 + 8) == 15972)
      {
        if (v936 != v934 && v936 - (char *)v933 != -1)
          goto LABEL_2013;
        break;
      }
      v935 = (void **)(v936 + 1);
      v932 = v934 - (char *)v935;
    }
    while (v934 - (char *)v935 >= 18);
  }
  v939 = *a2;
  __s[0] = (void *)(v919 + 1);
  LODWORD(__s[1]) = 3;
  v940 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v941 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v941 = __dst.__r_.__value_.__l.__size_;
  v942 = v941 + 6;
  if (v941 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v942 >= 0x17)
  {
    v944 = (v942 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v942 | 7) != 0x17)
      v944 = v942 | 7;
    v945 = v944 + 1;
    v943 = (std::string *)operator new(v944 + 1);
    v1300.__r_.__value_.__l.__size_ = v941 + 6;
    v1300.__r_.__value_.__r.__words[2] = v945 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v943;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v943 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v941 + 6;
    if (!v941)
      goto LABEL_2005;
  }
  if (v940 >= 0)
    v946 = &__dst;
  else
    v946 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v943, v946, v941);
LABEL_2005:
  strcpy((char *)v943 + v941, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v947 = *(_QWORD *)(v939 + 8);
  if (v947 >= *(_QWORD *)(v939 + 16))
  {
    v953 = sub_2236285DC((char **)v939, (uint64_t)__s);
    v954 = SHIBYTE(v1303);
    *(_QWORD *)(v939 + 8) = v953;
    if (v954 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_2012;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_2012;
    }
LABEL_2007:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_2008;
    goto LABEL_2013;
  }
  v948 = __s[0];
  *(_DWORD *)(v947 + 8) = __s[1];
  *(_QWORD *)v947 = v948;
  v949 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v947 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v947 + 16) = v949;
  memset(&v1300, 0, sizeof(v1300));
  v950 = *(_QWORD *)v1302;
  *(_OWORD *)(v947 + 40) = v1301;
  *(_QWORD *)(v947 + 56) = v950;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v951 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v947 + 80) = v1303;
  *(_OWORD *)(v947 + 64) = v951;
  *(_QWORD *)(v939 + 8) = v947 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2007;
LABEL_2012:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_2008:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v952 = *(std::__shared_weak_count **)(v1285 + 2656);
    if (!v952)
      goto LABEL_2017;
    goto LABEL_2014;
  }
LABEL_2013:
  v952 = *(std::__shared_weak_count **)(v1285 + 2656);
  if (!v952)
  {
LABEL_2017:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v958 = 0;
    goto LABEL_2034;
  }
LABEL_2014:
  v955 = std::__shared_weak_count::lock(v952);
  if (!v955)
    goto LABEL_2017;
  v956 = v955;
  v957 = *(_QWORD *)(v1285 + 2648);
  if (v957)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v957 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v959 = (unint64_t *)&v956->__shared_owners_;
  do
    v960 = __ldaxr(v959);
  while (__stlxr(v960 - 1, v959));
  if (v960)
  {
    v958 = (void **)v1291;
    v961 = v1292;
    if (v1291 == v1292)
      goto LABEL_2034;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v956->__on_zero_shared)(v956);
    std::__shared_weak_count::__release_weak(v956);
    v958 = (void **)v1291;
    v961 = v1292;
    if (v1291 == v1292)
      goto LABEL_2034;
  }
  do
  {
    v962 = a2[1];
    __s[0] = (void *)v919;
    __s[1] = *v958;
    memset(&v1300, 0, sizeof(v1300));
    v963 = *(_QWORD *)(v962 + 8);
    if (v963 < *(_QWORD *)(v962 + 16))
    {
      *(_OWORD *)v963 = *(_OWORD *)__s;
      *(_QWORD *)(v963 + 24) = 0;
      *(_QWORD *)(v963 + 32) = 0;
      *(_QWORD *)(v963 + 16) = 0;
      *(_QWORD *)(v962 + 8) = v963 + 40;
    }
    else
    {
      v964 = sub_223628FA4((void **)v962, (uint64_t)__s);
      v965 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v962 + 8) = v964;
      if (v965 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v958;
  }
  while (v958 != v961);
  v958 = (void **)v1291;
LABEL_2034:
  if (v958)
  {
    v1292 = v958;
    operator delete(v958);
  }
  v966 = *(std::__shared_weak_count **)(v1285 + 2656);
  if (!v966 || (v967 = std::__shared_weak_count::lock(v966)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v970 = 0;
    goto LABEL_2055;
  }
  v968 = v967;
  v969 = *(_QWORD *)(v1285 + 2648);
  if (v969)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v969 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v971 = (unint64_t *)&v968->__shared_owners_;
  do
    v972 = __ldaxr(v971);
  while (__stlxr(v972 - 1, v971));
  if (v972)
  {
    v970 = (void **)v1291;
    v973 = v1292;
    if (v1291 == v1292)
      goto LABEL_2055;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v968->__on_zero_shared)(v968);
    std::__shared_weak_count::__release_weak(v968);
    v970 = (void **)v1291;
    v973 = v1292;
    if (v1291 == v1292)
      goto LABEL_2055;
  }
  v974 = (void *)(v919 + 1);
  do
  {
    v975 = a2[1];
    __s[0] = v974;
    __s[1] = *v970;
    memset(&v1300, 0, sizeof(v1300));
    v976 = *(_QWORD *)(v975 + 8);
    if (v976 < *(_QWORD *)(v975 + 16))
    {
      *(_OWORD *)v976 = *(_OWORD *)__s;
      *(_QWORD *)(v976 + 24) = 0;
      *(_QWORD *)(v976 + 32) = 0;
      *(_QWORD *)(v976 + 16) = 0;
      *(_QWORD *)(v975 + 8) = v976 + 40;
    }
    else
    {
      v977 = sub_223628FA4((void **)v975, (uint64_t)__s);
      v978 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v975 + 8) = v977;
      if (v978 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v970;
  }
  while (v970 != v973);
  v970 = (void **)v1291;
LABEL_2055:
  if (v970)
  {
    v1292 = v970;
    operator delete(v970);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_2059:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2060;
LABEL_2064:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v979 = v1285;
      if ((*(char *)(v1285 + 2719) & 0x80000000) == 0)
        goto LABEL_2061;
      goto LABEL_2065;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_2059;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_2064;
LABEL_2060:
  v979 = v1285;
  if ((*(char *)(v1285 + 2719) & 0x80000000) == 0)
  {
LABEL_2061:
    __dst = *(std::string *)(v979 + 2696);
    goto LABEL_2066;
  }
LABEL_2065:
  sub_223197FA4(&__dst, *(void **)(v979 + 2696), *(_QWORD *)(v979 + 2704));
  v979 = v1285;
LABEL_2066:
  v980 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v979 + 2784) + 48))(*(_QWORD *)(v979 + 2784));
  sub_22363F8F8();
  v981 = &xmmword_255793000;
  if (byte_2557936A7 < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793690, *((unint64_t *)&xmmword_255793690 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793690;
    v1297 = unk_2557936A0;
  }
  v982 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v983 = v1296;
  }
  else
  {
    v982 = (uint64_t)v1296[1];
    v983 = (void **)v1296[0];
  }
  if (v982 >= 4)
  {
    v984 = (char *)v983 + v982;
    v985 = v983;
    do
    {
      v986 = (char *)memchr(v985, 118, v982 - 3);
      if (!v986)
        break;
      if (*(_DWORD *)v986 == 1684631414)
      {
        if (v986 == v984 || v986 - (char *)v983 == -1)
          break;
        v987 = *a2;
        __s[0] = (void *)v980;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2743) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2720), *(_QWORD *)(v1285 + 2728));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2720);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2736);
        }
        sub_2236531A8();
        if (byte_2557944CF < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557944B8, *((unint64_t *)&xmmword_2557944B8 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557944B8;
          v1303 = unk_2557944C8;
        }
        v988 = *(_QWORD *)(v987 + 8);
        if (v988 < *(_QWORD *)(v987 + 16))
          goto LABEL_2092;
        goto LABEL_2093;
      }
      v985 = (void **)(v986 + 1);
      v982 = v984 - (char *)v985;
    }
    while (v984 - (char *)v985 >= 4);
  }
  v987 = *a2;
  __s[0] = (void *)v980;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2743) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2720), *(_QWORD *)(v1285 + 2728));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2720);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2736);
  }
  sub_2236531A8();
  if (byte_2557944CF < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557944B8, *((unint64_t *)&xmmword_2557944B8 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557944B8;
    v1303 = unk_2557944C8;
  }
  v988 = *(_QWORD *)(v987 + 8);
  if (v988 >= *(_QWORD *)(v987 + 16))
  {
LABEL_2093:
    v993 = sub_2236285DC((char **)v987, (uint64_t)__s);
  }
  else
  {
LABEL_2092:
    v989 = __s[0];
    *(_DWORD *)(v988 + 8) = __s[1];
    *(_QWORD *)v988 = v989;
    v990 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v988 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v988 + 16) = v990;
    memset(&v1300, 0, sizeof(v1300));
    v991 = *(_QWORD *)v1302;
    *(_OWORD *)(v988 + 40) = v1301;
    *(_QWORD *)(v988 + 56) = v991;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v992 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v988 + 80) = v1303;
    *(_OWORD *)(v988 + 64) = v992;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v993 = (char *)(v988 + 88);
  }
  *(_QWORD *)(v987 + 8) = v993;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_2096;
LABEL_2100:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2097;
    goto LABEL_2101;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2100;
LABEL_2096:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2097;
LABEL_2101:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_2097:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v994 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v995 = v1294;
  }
  else
  {
    v994 = (uint64_t)v1294[1];
    v995 = (void **)v1294[0];
  }
  if (v994 >= 18)
  {
    v996 = (char *)v995 + v994;
    v997 = v995;
    do
    {
      v998 = (char *)memchr(v997, 67, v994 - 17);
      if (!v998)
        break;
      if (*(_QWORD *)v998 == 0x456C656E6E616843
        && *((_QWORD *)v998 + 1) == 0x696F763C726F7272
        && *((_WORD *)v998 + 8) == 15972)
      {
        if (v998 != v996 && v998 - (char *)v995 != -1)
          goto LABEL_2142;
        break;
      }
      v997 = (void **)(v998 + 1);
      v994 = v996 - (char *)v997;
    }
    while (v996 - (char *)v997 >= 18);
  }
  v1001 = *a2;
  __s[0] = (void *)(v980 + 1);
  LODWORD(__s[1]) = 3;
  v1002 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1003 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v1003 = __dst.__r_.__value_.__l.__size_;
  v1004 = v1003 + 6;
  if (v1003 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1004 >= 0x17)
  {
    v1006 = (v1004 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1004 | 7) != 0x17)
      v1006 = v1004 | 7;
    v1007 = v1006 + 1;
    v1005 = (std::string *)operator new(v1006 + 1);
    v1300.__r_.__value_.__l.__size_ = v1003 + 6;
    v1300.__r_.__value_.__r.__words[2] = v1007 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v1005;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v1005 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v1003 + 6;
    if (!v1003)
      goto LABEL_2134;
  }
  if (v1002 >= 0)
    v1008 = &__dst;
  else
    v1008 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v1005, v1008, v1003);
LABEL_2134:
  strcpy((char *)v1005 + v1003, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v1009 = *(_QWORD *)(v1001 + 8);
  if (v1009 >= *(_QWORD *)(v1001 + 16))
  {
    v1015 = sub_2236285DC((char **)v1001, (uint64_t)__s);
    v981 = &xmmword_255793000;
    v1016 = SHIBYTE(v1303);
    *(_QWORD *)(v1001 + 8) = v1015;
    if (v1016 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_2141;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_2141;
    }
LABEL_2136:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_2137;
    goto LABEL_2142;
  }
  v1010 = __s[0];
  *(_DWORD *)(v1009 + 8) = __s[1];
  *(_QWORD *)v1009 = v1010;
  v1011 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1009 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v1009 + 16) = v1011;
  memset(&v1300, 0, sizeof(v1300));
  v1012 = *(_QWORD *)v1302;
  *(_OWORD *)(v1009 + 40) = v1301;
  *(_QWORD *)(v1009 + 56) = v1012;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v1013 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v1009 + 80) = v1303;
  *(_OWORD *)(v1009 + 64) = v1013;
  *(_QWORD *)(v1001 + 8) = v1009 + 88;
  v981 = &xmmword_255793000;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2136;
LABEL_2141:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_2137:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v1014 = *(std::__shared_weak_count **)(v1285 + 2824);
    if (!v1014)
      goto LABEL_2146;
    goto LABEL_2143;
  }
LABEL_2142:
  v1014 = *(std::__shared_weak_count **)(v1285 + 2824);
  if (!v1014)
  {
LABEL_2146:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1020 = 0;
    goto LABEL_2163;
  }
LABEL_2143:
  v1017 = std::__shared_weak_count::lock(v1014);
  if (!v1017)
    goto LABEL_2146;
  v1018 = v1017;
  v1019 = *(_QWORD *)(v1285 + 2816);
  if (v1019)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1019 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1021 = (unint64_t *)&v1018->__shared_owners_;
  do
    v1022 = __ldaxr(v1021);
  while (__stlxr(v1022 - 1, v1021));
  if (v1022)
  {
    v1020 = (void **)v1291;
    v1023 = v1292;
    if (v1291 == v1292)
      goto LABEL_2163;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1018->__on_zero_shared)(v1018);
    std::__shared_weak_count::__release_weak(v1018);
    v1020 = (void **)v1291;
    v1023 = v1292;
    if (v1291 == v1292)
      goto LABEL_2163;
  }
  do
  {
    v1024 = a2[1];
    __s[0] = (void *)v980;
    __s[1] = *v1020;
    memset(&v1300, 0, sizeof(v1300));
    v1025 = *(_QWORD *)(v1024 + 8);
    if (v1025 < *(_QWORD *)(v1024 + 16))
    {
      *(_OWORD *)v1025 = *(_OWORD *)__s;
      *(_QWORD *)(v1025 + 24) = 0;
      *(_QWORD *)(v1025 + 32) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)(v1024 + 8) = v1025 + 40;
    }
    else
    {
      v1026 = sub_223628FA4((void **)v1024, (uint64_t)__s);
      v1027 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1024 + 8) = v1026;
      if (v1027 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1020;
  }
  while (v1020 != v1023);
  v1020 = (void **)v1291;
LABEL_2163:
  if (v1020)
  {
    v1292 = v1020;
    operator delete(v1020);
  }
  v1028 = *(std::__shared_weak_count **)(v1285 + 2824);
  if (!v1028 || (v1029 = std::__shared_weak_count::lock(v1028)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1032 = 0;
    goto LABEL_2184;
  }
  v1030 = v1029;
  v1031 = *(_QWORD *)(v1285 + 2816);
  if (v1031)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1031 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1033 = (unint64_t *)&v1030->__shared_owners_;
  do
    v1034 = __ldaxr(v1033);
  while (__stlxr(v1034 - 1, v1033));
  if (v1034)
  {
    v1032 = (void **)v1291;
    v1035 = v1292;
    if (v1291 == v1292)
      goto LABEL_2184;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1030->__on_zero_shared)(v1030);
    std::__shared_weak_count::__release_weak(v1030);
    v1032 = (void **)v1291;
    v1035 = v1292;
    if (v1291 == v1292)
      goto LABEL_2184;
  }
  v1036 = (void *)(v980 + 1);
  do
  {
    v1037 = a2[1];
    __s[0] = v1036;
    __s[1] = *v1032;
    memset(&v1300, 0, sizeof(v1300));
    v1038 = *(_QWORD *)(v1037 + 8);
    if (v1038 < *(_QWORD *)(v1037 + 16))
    {
      *(_OWORD *)v1038 = *(_OWORD *)__s;
      *(_QWORD *)(v1038 + 24) = 0;
      *(_QWORD *)(v1038 + 32) = 0;
      *(_QWORD *)(v1038 + 16) = 0;
      *(_QWORD *)(v1037 + 8) = v1038 + 40;
    }
    else
    {
      v1039 = sub_223628FA4((void **)v1037, (uint64_t)__s);
      v1040 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1037 + 8) = v1039;
      if (v1040 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1032;
  }
  while (v1032 != v1035);
  v1032 = (void **)v1291;
LABEL_2184:
  if (v1032)
  {
    v1292 = v1032;
    operator delete(v1032);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_2188:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2189;
LABEL_2193:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v1041 = v1285;
      if ((*(char *)(v1285 + 2887) & 0x80000000) == 0)
        goto LABEL_2190;
      goto LABEL_2194;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_2188;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_2193;
LABEL_2189:
  v1041 = v1285;
  if ((*(char *)(v1285 + 2887) & 0x80000000) == 0)
  {
LABEL_2190:
    __dst = *(std::string *)(v1041 + 2864);
    goto LABEL_2195;
  }
LABEL_2194:
  sub_223197FA4(&__dst, *(void **)(v1041 + 2864), *(_QWORD *)(v1041 + 2872));
  v1041 = v1285;
LABEL_2195:
  v1042 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1041 + 2952) + 48))(*(_QWORD *)(v1041 + 2952));
  sub_22363F8F8();
  if (*((char *)v981 + 1703) < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793690, *((unint64_t *)&xmmword_255793690 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793690;
    v1297 = unk_2557936A0;
  }
  v1043 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v1044 = v1296;
  }
  else
  {
    v1043 = (uint64_t)v1296[1];
    v1044 = (void **)v1296[0];
  }
  if (v1043 >= 4)
  {
    v1045 = (char *)v1044 + v1043;
    v1046 = v1044;
    do
    {
      v1047 = (char *)memchr(v1046, 118, v1043 - 3);
      if (!v1047)
        break;
      if (*(_DWORD *)v1047 == 1684631414)
      {
        if (v1047 == v1045 || v1047 - (char *)v1044 == -1)
          break;
        v1048 = *a2;
        __s[0] = (void *)v1042;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 2911) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 2888), *(_QWORD *)(v1285 + 2896));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 2888);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2904);
        }
        sub_22365336C();
        if (byte_255794517 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_255794500, *((unint64_t *)&xmmword_255794500 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_255794500;
          v1303 = unk_255794510;
        }
        v1049 = *(_QWORD *)(v1048 + 8);
        if (v1049 < *(_QWORD *)(v1048 + 16))
          goto LABEL_2221;
        goto LABEL_2222;
      }
      v1046 = (void **)(v1047 + 1);
      v1043 = v1045 - (char *)v1046;
    }
    while (v1045 - (char *)v1046 >= 4);
  }
  v1048 = *a2;
  __s[0] = (void *)v1042;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 2911) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 2888), *(_QWORD *)(v1285 + 2896));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 2888);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 2904);
  }
  sub_22365336C();
  if (byte_255794517 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_255794500, *((unint64_t *)&xmmword_255794500 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_255794500;
    v1303 = unk_255794510;
  }
  v1049 = *(_QWORD *)(v1048 + 8);
  if (v1049 >= *(_QWORD *)(v1048 + 16))
  {
LABEL_2222:
    v1054 = sub_2236285DC((char **)v1048, (uint64_t)__s);
  }
  else
  {
LABEL_2221:
    v1050 = __s[0];
    *(_DWORD *)(v1049 + 8) = __s[1];
    *(_QWORD *)v1049 = v1050;
    v1051 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1049 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v1049 + 16) = v1051;
    memset(&v1300, 0, sizeof(v1300));
    v1052 = *(_QWORD *)v1302;
    *(_OWORD *)(v1049 + 40) = v1301;
    *(_QWORD *)(v1049 + 56) = v1052;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v1053 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v1049 + 80) = v1303;
    *(_OWORD *)(v1049 + 64) = v1053;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v1054 = (char *)(v1049 + 88);
  }
  *(_QWORD *)(v1048 + 8) = v1054;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_2225;
LABEL_2229:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2226;
    goto LABEL_2230;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2229;
LABEL_2225:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2226;
LABEL_2230:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_2226:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v1055 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v1056 = v1294;
  }
  else
  {
    v1055 = (uint64_t)v1294[1];
    v1056 = (void **)v1294[0];
  }
  if (v1055 >= 18)
  {
    v1057 = (char *)v1056 + v1055;
    v1058 = v1056;
    do
    {
      v1059 = (char *)memchr(v1058, 67, v1055 - 17);
      if (!v1059)
        break;
      if (*(_QWORD *)v1059 == 0x456C656E6E616843
        && *((_QWORD *)v1059 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1059 + 8) == 15972)
      {
        if (v1059 != v1057 && v1059 - (char *)v1056 != -1)
          goto LABEL_2271;
        break;
      }
      v1058 = (void **)(v1059 + 1);
      v1055 = v1057 - (char *)v1058;
    }
    while (v1057 - (char *)v1058 >= 18);
  }
  v1062 = *a2;
  __s[0] = (void *)(v1042 + 1);
  LODWORD(__s[1]) = 3;
  v1063 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1064 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v1064 = __dst.__r_.__value_.__l.__size_;
  v1065 = v1064 + 6;
  if (v1064 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1065 >= 0x17)
  {
    v1067 = (v1065 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1065 | 7) != 0x17)
      v1067 = v1065 | 7;
    v1068 = v1067 + 1;
    v1066 = (std::string *)operator new(v1067 + 1);
    v1300.__r_.__value_.__l.__size_ = v1064 + 6;
    v1300.__r_.__value_.__r.__words[2] = v1068 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v1066;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v1066 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v1064 + 6;
    if (!v1064)
      goto LABEL_2263;
  }
  if (v1063 >= 0)
    v1069 = &__dst;
  else
    v1069 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v1066, v1069, v1064);
LABEL_2263:
  strcpy((char *)v1066 + v1064, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v1070 = *(_QWORD *)(v1062 + 8);
  if (v1070 >= *(_QWORD *)(v1062 + 16))
  {
    v1076 = sub_2236285DC((char **)v1062, (uint64_t)__s);
    v1077 = SHIBYTE(v1303);
    *(_QWORD *)(v1062 + 8) = v1076;
    if (v1077 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_2270;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_2270;
    }
LABEL_2265:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_2266;
    goto LABEL_2271;
  }
  v1071 = __s[0];
  *(_DWORD *)(v1070 + 8) = __s[1];
  *(_QWORD *)v1070 = v1071;
  v1072 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1070 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v1070 + 16) = v1072;
  memset(&v1300, 0, sizeof(v1300));
  v1073 = *(_QWORD *)v1302;
  *(_OWORD *)(v1070 + 40) = v1301;
  *(_QWORD *)(v1070 + 56) = v1073;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v1074 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v1070 + 80) = v1303;
  *(_OWORD *)(v1070 + 64) = v1074;
  *(_QWORD *)(v1062 + 8) = v1070 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2265;
LABEL_2270:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_2266:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v1075 = *(std::__shared_weak_count **)(v1285 + 2992);
    if (!v1075)
      goto LABEL_2275;
    goto LABEL_2272;
  }
LABEL_2271:
  v1075 = *(std::__shared_weak_count **)(v1285 + 2992);
  if (!v1075)
  {
LABEL_2275:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1081 = 0;
    goto LABEL_2292;
  }
LABEL_2272:
  v1078 = std::__shared_weak_count::lock(v1075);
  if (!v1078)
    goto LABEL_2275;
  v1079 = v1078;
  v1080 = *(_QWORD *)(v1285 + 2984);
  if (v1080)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1080 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1082 = (unint64_t *)&v1079->__shared_owners_;
  do
    v1083 = __ldaxr(v1082);
  while (__stlxr(v1083 - 1, v1082));
  if (v1083)
  {
    v1081 = (void **)v1291;
    v1084 = v1292;
    if (v1291 == v1292)
      goto LABEL_2292;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
    std::__shared_weak_count::__release_weak(v1079);
    v1081 = (void **)v1291;
    v1084 = v1292;
    if (v1291 == v1292)
      goto LABEL_2292;
  }
  do
  {
    v1085 = a2[1];
    __s[0] = (void *)v1042;
    __s[1] = *v1081;
    memset(&v1300, 0, sizeof(v1300));
    v1086 = *(_QWORD *)(v1085 + 8);
    if (v1086 < *(_QWORD *)(v1085 + 16))
    {
      *(_OWORD *)v1086 = *(_OWORD *)__s;
      *(_QWORD *)(v1086 + 24) = 0;
      *(_QWORD *)(v1086 + 32) = 0;
      *(_QWORD *)(v1086 + 16) = 0;
      *(_QWORD *)(v1085 + 8) = v1086 + 40;
    }
    else
    {
      v1087 = sub_223628FA4((void **)v1085, (uint64_t)__s);
      v1088 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1085 + 8) = v1087;
      if (v1088 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1081;
  }
  while (v1081 != v1084);
  v1081 = (void **)v1291;
LABEL_2292:
  if (v1081)
  {
    v1292 = v1081;
    operator delete(v1081);
  }
  v1089 = *(std::__shared_weak_count **)(v1285 + 2992);
  if (!v1089 || (v1090 = std::__shared_weak_count::lock(v1089)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1093 = 0;
    goto LABEL_2313;
  }
  v1091 = v1090;
  v1092 = *(_QWORD *)(v1285 + 2984);
  if (v1092)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1092 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1094 = (unint64_t *)&v1091->__shared_owners_;
  do
    v1095 = __ldaxr(v1094);
  while (__stlxr(v1095 - 1, v1094));
  if (v1095)
  {
    v1093 = (void **)v1291;
    v1096 = v1292;
    if (v1291 == v1292)
      goto LABEL_2313;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1091->__on_zero_shared)(v1091);
    std::__shared_weak_count::__release_weak(v1091);
    v1093 = (void **)v1291;
    v1096 = v1292;
    if (v1291 == v1292)
      goto LABEL_2313;
  }
  v1097 = (void *)(v1042 + 1);
  do
  {
    v1098 = a2[1];
    __s[0] = v1097;
    __s[1] = *v1093;
    memset(&v1300, 0, sizeof(v1300));
    v1099 = *(_QWORD *)(v1098 + 8);
    if (v1099 < *(_QWORD *)(v1098 + 16))
    {
      *(_OWORD *)v1099 = *(_OWORD *)__s;
      *(_QWORD *)(v1099 + 24) = 0;
      *(_QWORD *)(v1099 + 32) = 0;
      *(_QWORD *)(v1099 + 16) = 0;
      *(_QWORD *)(v1098 + 8) = v1099 + 40;
    }
    else
    {
      v1100 = sub_223628FA4((void **)v1098, (uint64_t)__s);
      v1101 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1098 + 8) = v1100;
      if (v1101 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1093;
  }
  while (v1093 != v1096);
  v1093 = (void **)v1291;
LABEL_2313:
  if (v1093)
  {
    v1292 = v1093;
    operator delete(v1093);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_2317:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2318;
LABEL_2322:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v1102 = v1285;
      if ((*(char *)(v1285 + 3055) & 0x80000000) == 0)
        goto LABEL_2319;
LABEL_2323:
      sub_223197FA4(&v1288, *(void **)(v1102 + 3032), *(_QWORD *)(v1102 + 3040));
      v1102 = v1285;
      goto LABEL_2324;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_2317;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_2322;
LABEL_2318:
  v1102 = v1285;
  if (*(char *)(v1285 + 3055) < 0)
    goto LABEL_2323;
LABEL_2319:
  v1288 = *(std::string *)(v1102 + 3032);
LABEL_2324:
  v1103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1102 + 3120) + 48))(*(_QWORD *)(v1102 + 3120));
  v1104 = atomic_load((unsigned __int8 *)&qword_2540CB930);
  if ((v1104 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB930))
    goto LABEL_2325;
  v1225 = atomic_load((unsigned __int8 *)&qword_2540CB938);
  if ((v1225 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB938))
  {
    v1233 = atomic_load((unsigned __int8 *)&qword_2540CB940);
    if ((v1233 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB940))
      goto LABEL_2802;
    v1242 = atomic_load((unsigned __int8 *)&qword_2540CB948);
    if ((v1242 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB948))
    {
LABEL_2968:
      if (byte_2557945A7 < 0)
      {
        sub_223197FA4(&xmmword_255794578, (void *)qword_255794590, unk_255794598);
      }
      else
      {
        xmmword_255794578 = *(_OWORD *)&qword_255794590;
        unk_255794588 = unk_2557945A0;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794578, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB940);
LABEL_2802:
      v1234 = byte_25579458F;
      if (byte_25579458F >= 0)
        v1235 = byte_25579458F;
      else
        v1235 = *((_QWORD *)&xmmword_255794578 + 1);
      v1236 = v1235 + 6;
      if (v1235 + 6 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v1236 >= 0x17)
      {
        v1238 = (v1236 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1236 | 7) != 0x17)
          v1238 = v1236 | 7;
        v1239 = v1238 + 1;
        v1240 = (char *)operator new(v1238 + 1);
        qword_255794568 = v1235 + 6;
        unk_255794570 = v1239 | 0x8000000000000000;
        qword_255794560 = (uint64_t)v1240;
        *(_DWORD *)v1240 = 1936617315;
        *((_WORD *)v1240 + 2) = 8308;
        v1237 = v1240 + 6;
      }
      else
      {
        qword_255794568 = 0;
        unk_255794570 = 0;
        qword_255794560 = 0x2074736E6F63;
        byte_255794577 = v1235 + 6;
        v1237 = (char *)&qword_255794560 + 6;
        if (!v1235)
        {
LABEL_2817:
          v1237[v1235] = 0;
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794560, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB938);
          goto LABEL_2765;
        }
      }
      if (v1234 >= 0)
        v1241 = &xmmword_255794578;
      else
        v1241 = (__int128 *)xmmword_255794578;
      memmove(v1237, v1241, v1235);
      goto LABEL_2817;
    }
    v1243 = atomic_load((unsigned __int8 *)&qword_2540CB990);
    if ((v1243 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB990))
    {
      sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::experimental::expected<cv3d::recon::frame::KeyframeData, cv3d::kit::cf::ErrorRef>>]", &qword_255794668);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794668, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB990);
    }
    v1244 = atomic_load((unsigned __int8 *)&qword_2540CB998);
    if ((v1244 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB998))
    {
LABEL_2854:
      v1256 = atomic_load((unsigned __int8 *)&qword_2540CB9A0);
      if ((v1256 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9A0))
      {
        if (byte_255794697 < 0)
        {
          sub_223197FA4(__s, (void *)xmmword_255794680, *((unint64_t *)&xmmword_255794680 + 1));
        }
        else
        {
          *(_OWORD *)__s = xmmword_255794680;
          v1300.__r_.__value_.__r.__words[0] = unk_255794690;
        }
        sub_22456D060((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_255794698);
        if (v1300.__r_.__value_.__s.__data_[7] < 0)
          operator delete(__s[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794698, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB9A0);
      }
      if (byte_2557946AF < 0)
      {
        sub_223197FA4(v1289, (void *)xmmword_255794698, *((unint64_t *)&xmmword_255794698 + 1));
      }
      else
      {
        *(_OWORD *)v1289 = xmmword_255794698;
        v1290 = unk_2557946A8;
      }
      v1257 = atomic_load((unsigned __int8 *)&qword_2540CB950);
      if ((v1257 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB950))
        goto LABEL_2953;
      v1258 = atomic_load((unsigned __int8 *)&qword_2540CB958);
      if ((v1258 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB958))
      {
LABEL_2949:
        if (byte_2557945D7 < 0)
        {
          sub_223197FA4(&xmmword_2557945A8, (void *)qword_2557945C0, unk_2557945C8);
        }
        else
        {
          xmmword_2557945A8 = *(_OWORD *)&qword_2557945C0;
          qword_2557945B8 = unk_2557945D0;
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557945A8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB950);
LABEL_2953:
        if (SHIBYTE(qword_2557945B8) < 0)
        {
          sub_223197FA4(&v1304, (void *)xmmword_2557945A8, *((unint64_t *)&xmmword_2557945A8 + 1));
        }
        else
        {
          v1304 = xmmword_2557945A8;
          v1305 = qword_2557945B8;
        }
        sub_22319BD1C(&v1291, (uint64_t)&v1304, 1uLL);
        sub_2245730F4((char *)v1289, (uint64_t *)&v1291, (std::string *)&qword_255794590, v1280, v1281);
        v1282 = (void **)v1291;
        if (v1291)
        {
          v1283 = v1292;
          v1284 = v1291;
          if (v1292 != v1291)
          {
            do
            {
              if (*((char *)v1283 - 1) < 0)
                operator delete(*(v1283 - 3));
              v1283 -= 3;
            }
            while (v1283 != v1282);
            v1284 = v1291;
          }
          v1292 = v1282;
          operator delete(v1284);
        }
        if (SHIBYTE(v1305) < 0)
          operator delete((void *)v1304);
        if (SHIBYTE(v1290) < 0)
          operator delete(v1289[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794590, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB948);
        goto LABEL_2968;
      }
      v1259 = atomic_load((unsigned __int8 *)&qword_2540CB978);
      if ((v1259 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB978))
      {
        sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<cv3d::recon::frame::KeyframeData, cv3d::kit::cf::ErrorRef>]", &qword_255794620);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794620, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB978);
      }
      v1260 = atomic_load((unsigned __int8 *)&qword_2540CB980);
      if ((v1260 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CB980))
      {
LABEL_2900:
        v1271 = atomic_load((unsigned __int8 *)&qword_2540CB988);
        if ((v1271 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB988))
        {
          if (byte_25579464F < 0)
          {
            sub_223197FA4(__s, (void *)xmmword_255794638, *((unint64_t *)&xmmword_255794638 + 1));
          }
          else
          {
            *(_OWORD *)__s = xmmword_255794638;
            v1300.__r_.__value_.__r.__words[0] = unk_255794648;
          }
          sub_22456D060((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_255794650);
          if (v1300.__r_.__value_.__s.__data_[7] < 0)
            operator delete(__s[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794650, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB988);
        }
        if (byte_255794667 < 0)
        {
          sub_223197FA4(v1294, (void *)xmmword_255794650, *((unint64_t *)&xmmword_255794650 + 1));
        }
        else
        {
          *(_OWORD *)v1294 = xmmword_255794650;
          v1295 = unk_255794660;
        }
        sub_223652710();
        if (byte_2557942D7 < 0)
        {
          sub_223197FA4(__s, (void *)xmmword_2557942C0, *((unint64_t *)&xmmword_2557942C0 + 1));
        }
        else
        {
          *(_OWORD *)__s = xmmword_2557942C0;
          v1300.__r_.__value_.__r.__words[0] = unk_2557942D0;
        }
        v1272 = atomic_load((unsigned __int8 *)&qword_2540CB960);
        if ((v1272 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB960))
        {
          v1273 = atomic_load((unsigned __int8 *)&qword_2540CB968);
          if ((v1273 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB968))
          {
            sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::ErrorRef]", byte_2557945F0);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_2557945F0, &dword_22314D000);
            __cxa_guard_release(&qword_2540CB968);
          }
          v1274 = atomic_load((unsigned __int8 *)&qword_2540CB970);
          if ((v1274 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB970))
          {
            if (byte_2557945F0[23] < 0)
              sub_223197FA4(&__dst, *(void **)byte_2557945F0, *(unint64_t *)&byte_2557945F0[8]);
            else
              __dst = *(std::string *)byte_2557945F0;
            sub_22456D060(&__dst, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_255794608);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794608, &dword_22314D000);
            __cxa_guard_release(&qword_2540CB970);
          }
          if (byte_25579461F < 0)
          {
            sub_223197FA4(&xmmword_2557945D8, (void *)xmmword_255794608, *((unint64_t *)&xmmword_255794608 + 1));
          }
          else
          {
            xmmword_2557945D8 = xmmword_255794608;
            qword_2557945E8 = unk_255794618;
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557945D8, &dword_22314D000);
          __cxa_guard_release(&qword_2540CB960);
        }
        if (SHIBYTE(qword_2557945E8) < 0)
        {
          sub_223197FA4(&v1300.__r_.__value_.__s.__data_[8], (void *)xmmword_2557945D8, *((unint64_t *)&xmmword_2557945D8 + 1));
        }
        else
        {
          *(_OWORD *)&v1300.__r_.__value_.__r.__words[1] = xmmword_2557945D8;
          *(_QWORD *)&v1301 = qword_2557945E8;
        }
        sub_22319BD1C(v1296, (uint64_t)__s, 2uLL);
        sub_2245730F4((char *)v1294, (uint64_t *)v1296, (std::string *)&qword_2557945C0, v1275, v1276);
        v1277 = (void **)v1296[0];
        if (v1296[0])
        {
          v1278 = (void **)v1296[1];
          v1279 = v1296[0];
          if (v1296[1] != v1296[0])
          {
            do
            {
              if (*((char *)v1278 - 1) < 0)
                operator delete(*(v1278 - 3));
              v1278 -= 3;
            }
            while (v1278 != v1277);
            v1279 = v1296[0];
          }
          v1296[1] = v1277;
          operator delete(v1279);
        }
        if (SBYTE7(v1301) < 0)
        {
          operator delete((void *)v1300.__r_.__value_.__l.__size_);
          if (v1300.__r_.__value_.__s.__data_[7] < 0)
          {
LABEL_2943:
            operator delete(__s[0]);
            if (SHIBYTE(v1295) < 0)
              goto LABEL_2947;
            goto LABEL_2948;
          }
        }
        else if (v1300.__r_.__value_.__s.__data_[7] < 0)
        {
          goto LABEL_2943;
        }
        if (SHIBYTE(v1295) < 0)
LABEL_2947:
          operator delete(v1294[0]);
LABEL_2948:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557945C0, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB958);
        goto LABEL_2949;
      }
      if (byte_255794637 >= 0)
        v1261 = byte_255794637;
      else
        v1261 = unk_255794628;
      if (byte_255794637 >= 0)
        v1262 = &qword_255794620;
      else
        v1262 = (uint64_t *)qword_255794620;
      v1263 = (char *)v1262 + v1261;
      if ((uint64_t)v1261 >= 1)
      {
        v1264 = v1261;
        v1265 = v1262;
        do
        {
          v1266 = memchr(v1265, 60, v1264);
          if (!v1266)
            break;
          if (*v1266 == 60)
            goto LABEL_2886;
          v1265 = (uint64_t *)(v1266 + 1);
          v1264 = v1263 - (_BYTE *)v1265;
        }
        while (v1263 - (_BYTE *)v1265 > 0);
      }
      v1266 = (char *)v1262 + v1261;
LABEL_2886:
      v1267 = v1266 - (_BYTE *)v1262;
      if (v1266 == v1263)
        v1267 = -1;
      if (v1261 >= v1267)
        v1261 = v1267;
      if (v1261 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v1261 >= 0x17)
      {
        v1269 = (v1261 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1261 | 7) != 0x17)
          v1269 = v1261 | 7;
        v1270 = v1269 + 1;
        v1268 = (__int128 *)operator new(v1269 + 1);
        *((_QWORD *)&xmmword_255794638 + 1) = v1261;
        unk_255794648 = v1270 | 0x8000000000000000;
        *(_QWORD *)&xmmword_255794638 = v1268;
      }
      else
      {
        byte_25579464F = v1261;
        v1268 = &xmmword_255794638;
        if (!v1261)
          goto LABEL_2899;
      }
      memmove(v1268, v1262, v1261);
LABEL_2899:
      *((_BYTE *)v1268 + v1261) = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794638, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB980);
      goto LABEL_2900;
    }
    if (byte_25579467F >= 0)
      v1245 = byte_25579467F;
    else
      v1245 = unk_255794670;
    if (byte_25579467F >= 0)
      v1246 = &qword_255794668;
    else
      v1246 = (uint64_t *)qword_255794668;
    v1247 = (char *)v1246 + v1245;
    if (v1245 >= 1)
    {
      v1248 = v1245;
      v1249 = v1246;
      do
      {
        v1250 = memchr(v1249, 60, v1248);
        if (!v1250)
          break;
        if (*v1250 == 60)
          goto LABEL_2838;
        v1249 = (uint64_t *)(v1250 + 1);
        v1248 = v1247 - (_BYTE *)v1249;
      }
      while (v1247 - (_BYTE *)v1249 > 0);
    }
    v1250 = (char *)v1246 + v1245;
LABEL_2838:
    v1251 = v1250 - (_BYTE *)v1246;
    if (v1250 == v1247)
      v1251 = -1;
    if (v1245 >= v1251)
      v1252 = v1251;
    else
      v1252 = v1245;
    if (v1252 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v1252 >= 0x17)
    {
      v1254 = (v1252 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1252 | 7) != 0x17)
        v1254 = v1252 | 7;
      v1255 = v1254 + 1;
      v1253 = (__int128 *)operator new(v1254 + 1);
      *((_QWORD *)&xmmword_255794680 + 1) = v1252;
      unk_255794690 = v1255 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255794680 = v1253;
    }
    else
    {
      byte_255794697 = v1252;
      v1253 = &xmmword_255794680;
      if (!v1252)
        goto LABEL_2853;
    }
    memmove(v1253, v1246, v1252);
LABEL_2853:
    *((_BYTE *)v1253 + v1252) = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794680, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB998);
    goto LABEL_2854;
  }
LABEL_2765:
  v1226 = byte_255794577;
  if (byte_255794577 >= 0)
    v1227 = byte_255794577;
  else
    v1227 = qword_255794568;
  v1228 = v1227 + 1;
  if (v1227 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1228 >= 0x17)
  {
    v1230 = (v1228 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1228 | 7) != 0x17)
      v1230 = v1228 | 7;
    v1231 = v1230 + 1;
    v1229 = (__int128 *)operator new(v1230 + 1);
    *((_QWORD *)&xmmword_255794548 + 1) = v1227 + 1;
    unk_255794558 = v1231 | 0x8000000000000000;
    *(_QWORD *)&xmmword_255794548 = v1229;
    goto LABEL_2795;
  }
  unk_255794558 = 0;
  xmmword_255794548 = 0uLL;
  v1229 = &xmmword_255794548;
  byte_25579455F = v1227 + 1;
  if (v1227)
  {
LABEL_2795:
    if (v1226 >= 0)
      v1232 = &qword_255794560;
    else
      v1232 = (uint64_t *)qword_255794560;
    memmove(v1229, v1232, v1227);
  }
  *(_WORD *)((char *)v1229 + v1227) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794548, &dword_22314D000);
  __cxa_guard_release(&qword_2540CB930);
LABEL_2325:
  if (byte_25579455F < 0)
  {
    sub_223197FA4(v1286, (void *)xmmword_255794548, *((unint64_t *)&xmmword_255794548 + 1));
  }
  else
  {
    *(_OWORD *)v1286 = xmmword_255794548;
    v1287 = unk_255794558;
  }
  v1105 = HIBYTE(v1287);
  if (v1287 >= 0)
  {
    v1106 = v1286;
  }
  else
  {
    v1105 = (uint64_t)v1286[1];
    v1106 = (void **)v1286[0];
  }
  if (v1105 >= 4)
  {
    v1107 = (char *)v1106 + v1105;
    v1108 = v1106;
    do
    {
      v1109 = (char *)memchr(v1108, 118, v1105 - 3);
      if (!v1109)
        break;
      if (*(_DWORD *)v1109 == 1684631414)
      {
        if (v1109 == v1107 || v1109 - (char *)v1106 == -1)
          break;
        v1110 = *a2;
        __s[0] = (void *)v1103;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(v1288.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, v1288.__r_.__value_.__l.__data_, v1288.__r_.__value_.__l.__size_);
        else
          v1300 = v1288;
        if (*(char *)(v1285 + 3079) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 3056), *(_QWORD *)(v1285 + 3064));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 3056);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 3072);
        }
        sub_223653530();
        if (byte_2557946C7 < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557946B0, *((unint64_t *)&xmmword_2557946B0 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557946B0;
          v1303 = unk_2557946C0;
        }
        v1111 = *(_QWORD *)(v1110 + 8);
        if (v1111 < *(_QWORD *)(v1110 + 16))
          goto LABEL_2351;
        goto LABEL_2352;
      }
      v1108 = (void **)(v1109 + 1);
      v1105 = v1107 - (char *)v1108;
    }
    while (v1107 - (char *)v1108 >= 4);
  }
  v1110 = *a2;
  __s[0] = (void *)v1103;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(v1288.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, v1288.__r_.__value_.__l.__data_, v1288.__r_.__value_.__l.__size_);
  else
    v1300 = v1288;
  if (*(char *)(v1285 + 3079) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 3056), *(_QWORD *)(v1285 + 3064));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 3056);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 3072);
  }
  sub_223653530();
  if (byte_2557946C7 < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557946B0, *((unint64_t *)&xmmword_2557946B0 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557946B0;
    v1303 = unk_2557946C0;
  }
  v1111 = *(_QWORD *)(v1110 + 8);
  if (v1111 >= *(_QWORD *)(v1110 + 16))
  {
LABEL_2352:
    v1116 = sub_2236285DC((char **)v1110, (uint64_t)__s);
  }
  else
  {
LABEL_2351:
    v1112 = __s[0];
    *(_DWORD *)(v1111 + 8) = __s[1];
    *(_QWORD *)v1111 = v1112;
    v1113 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1111 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v1111 + 16) = v1113;
    memset(&v1300, 0, sizeof(v1300));
    v1114 = *(_QWORD *)v1302;
    *(_OWORD *)(v1111 + 40) = v1301;
    *(_QWORD *)(v1111 + 56) = v1114;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v1115 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v1111 + 80) = v1303;
    *(_OWORD *)(v1111 + 64) = v1115;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v1116 = (char *)(v1111 + 88);
  }
  *(_QWORD *)(v1110 + 8) = v1116;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_2355;
LABEL_2359:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2356;
    goto LABEL_2360;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2359;
LABEL_2355:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2356;
LABEL_2360:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_2356:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  else
    __dst = *(std::string *)byte_2540CBC48;
  v1117 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v1118 = &__dst;
  }
  else
  {
    v1117 = __dst.__r_.__value_.__l.__size_;
    v1118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v1117 >= 18)
  {
    v1119 = (char *)v1118 + v1117;
    v1120 = v1118;
    do
    {
      v1121 = (char *)memchr(v1120, 67, v1117 - 17);
      if (!v1121)
        break;
      if (*(_QWORD *)v1121 == 0x456C656E6E616843
        && *((_QWORD *)v1121 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1121 + 8) == 15972)
      {
        if (v1121 != v1119 && v1121 - (char *)v1118 != -1)
          goto LABEL_2401;
        break;
      }
      v1120 = (std::string *)(v1121 + 1);
      v1117 = v1119 - (char *)v1120;
    }
    while (v1119 - (char *)v1120 >= 18);
  }
  v1124 = *a2;
  __s[0] = (void *)(v1103 + 1);
  LODWORD(__s[1]) = 3;
  v1125 = SHIBYTE(v1288.__r_.__value_.__r.__words[2]);
  if ((v1288.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1126 = HIBYTE(v1288.__r_.__value_.__r.__words[2]);
  else
    v1126 = v1288.__r_.__value_.__l.__size_;
  v1127 = v1126 + 6;
  if (v1126 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1127 >= 0x17)
  {
    v1129 = (v1127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1127 | 7) != 0x17)
      v1129 = v1127 | 7;
    v1130 = v1129 + 1;
    v1128 = (std::string *)operator new(v1129 + 1);
    v1300.__r_.__value_.__l.__size_ = v1126 + 6;
    v1300.__r_.__value_.__r.__words[2] = v1130 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v1128;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v1128 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v1126 + 6;
    if (!v1126)
      goto LABEL_2393;
  }
  if (v1125 >= 0)
    v1131 = &v1288;
  else
    v1131 = (std::string *)v1288.__r_.__value_.__r.__words[0];
  memmove(v1128, v1131, v1126);
LABEL_2393:
  strcpy((char *)v1128 + v1126, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v1132 = *(_QWORD *)(v1124 + 8);
  if (v1132 >= *(_QWORD *)(v1124 + 16))
  {
    v1138 = sub_2236285DC((char **)v1124, (uint64_t)__s);
    v1139 = SHIBYTE(v1303);
    *(_QWORD *)(v1124 + 8) = v1138;
    if (v1139 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_2400;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_2400;
    }
LABEL_2395:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_2396;
    goto LABEL_2401;
  }
  v1133 = __s[0];
  *(_DWORD *)(v1132 + 8) = __s[1];
  *(_QWORD *)v1132 = v1133;
  v1134 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1132 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v1132 + 16) = v1134;
  memset(&v1300, 0, sizeof(v1300));
  v1135 = *(_QWORD *)v1302;
  *(_OWORD *)(v1132 + 40) = v1301;
  *(_QWORD *)(v1132 + 56) = v1135;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v1136 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v1132 + 80) = v1303;
  *(_OWORD *)(v1132 + 64) = v1136;
  *(_QWORD *)(v1124 + 8) = v1132 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2395;
LABEL_2400:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_2396:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v1137 = *(std::__shared_weak_count **)(v1285 + 3160);
    if (!v1137)
      goto LABEL_2405;
    goto LABEL_2402;
  }
LABEL_2401:
  v1137 = *(std::__shared_weak_count **)(v1285 + 3160);
  if (!v1137)
  {
LABEL_2405:
    v1296[0] = 0;
    v1296[1] = 0;
    v1297 = 0;
    v1143 = 0;
    goto LABEL_2422;
  }
LABEL_2402:
  v1140 = std::__shared_weak_count::lock(v1137);
  if (!v1140)
    goto LABEL_2405;
  v1141 = v1140;
  v1142 = *(_QWORD *)(v1285 + 3152);
  if (v1142)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1142 + 24))(v1296);
  }
  else
  {
    v1296[0] = 0;
    v1296[1] = 0;
    v1297 = 0;
  }
  v1144 = (unint64_t *)&v1141->__shared_owners_;
  do
    v1145 = __ldaxr(v1144);
  while (__stlxr(v1145 - 1, v1144));
  if (v1145)
  {
    v1143 = (void **)v1296[0];
    v1146 = (void **)v1296[1];
    if (v1296[0] == v1296[1])
      goto LABEL_2422;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1141->__on_zero_shared)(v1141);
    std::__shared_weak_count::__release_weak(v1141);
    v1143 = (void **)v1296[0];
    v1146 = (void **)v1296[1];
    if (v1296[0] == v1296[1])
      goto LABEL_2422;
  }
  do
  {
    v1147 = a2[1];
    __s[0] = (void *)v1103;
    __s[1] = *v1143;
    memset(&v1300, 0, sizeof(v1300));
    v1148 = *(_QWORD *)(v1147 + 8);
    if (v1148 < *(_QWORD *)(v1147 + 16))
    {
      *(_OWORD *)v1148 = *(_OWORD *)__s;
      *(_QWORD *)(v1148 + 24) = 0;
      *(_QWORD *)(v1148 + 32) = 0;
      *(_QWORD *)(v1148 + 16) = 0;
      *(_QWORD *)(v1147 + 8) = v1148 + 40;
    }
    else
    {
      v1149 = sub_223628FA4((void **)v1147, (uint64_t)__s);
      v1150 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1147 + 8) = v1149;
      if (v1150 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1143;
  }
  while (v1143 != v1146);
  v1143 = (void **)v1296[0];
LABEL_2422:
  if (v1143)
  {
    v1296[1] = v1143;
    operator delete(v1143);
  }
  v1151 = *(std::__shared_weak_count **)(v1285 + 3160);
  if (!v1151 || (v1152 = std::__shared_weak_count::lock(v1151)) == 0)
  {
    v1296[0] = 0;
    v1296[1] = 0;
    v1297 = 0;
    v1155 = 0;
    goto LABEL_2443;
  }
  v1153 = v1152;
  v1154 = *(_QWORD *)(v1285 + 3152);
  if (v1154)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1154 + 32))(v1296);
  }
  else
  {
    v1296[0] = 0;
    v1296[1] = 0;
    v1297 = 0;
  }
  v1156 = (unint64_t *)&v1153->__shared_owners_;
  do
    v1157 = __ldaxr(v1156);
  while (__stlxr(v1157 - 1, v1156));
  if (v1157)
  {
    v1155 = (void **)v1296[0];
    v1158 = (void **)v1296[1];
    if (v1296[0] == v1296[1])
      goto LABEL_2443;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
    std::__shared_weak_count::__release_weak(v1153);
    v1155 = (void **)v1296[0];
    v1158 = (void **)v1296[1];
    if (v1296[0] == v1296[1])
      goto LABEL_2443;
  }
  v1159 = (void *)(v1103 + 1);
  do
  {
    v1160 = a2[1];
    __s[0] = v1159;
    __s[1] = *v1155;
    memset(&v1300, 0, sizeof(v1300));
    v1161 = *(_QWORD *)(v1160 + 8);
    if (v1161 < *(_QWORD *)(v1160 + 16))
    {
      *(_OWORD *)v1161 = *(_OWORD *)__s;
      *(_QWORD *)(v1161 + 24) = 0;
      *(_QWORD *)(v1161 + 32) = 0;
      *(_QWORD *)(v1161 + 16) = 0;
      *(_QWORD *)(v1160 + 8) = v1161 + 40;
    }
    else
    {
      v1162 = sub_223628FA4((void **)v1160, (uint64_t)__s);
      v1163 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1160 + 8) = v1162;
      if (v1163 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1155;
  }
  while (v1155 != v1158);
  v1155 = (void **)v1296[0];
LABEL_2443:
  if (v1155)
  {
    v1296[1] = v1155;
    operator delete(v1155);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1287) & 0x80000000) == 0)
    {
LABEL_2447:
      if ((SHIBYTE(v1288.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2448;
LABEL_2452:
      operator delete(v1288.__r_.__value_.__l.__data_);
      v1164 = v1285;
      if ((*(char *)(v1285 + 3223) & 0x80000000) == 0)
        goto LABEL_2449;
      goto LABEL_2453;
    }
  }
  else if ((SHIBYTE(v1287) & 0x80000000) == 0)
  {
    goto LABEL_2447;
  }
  operator delete(v1286[0]);
  if (SHIBYTE(v1288.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_2452;
LABEL_2448:
  v1164 = v1285;
  if ((*(char *)(v1285 + 3223) & 0x80000000) == 0)
  {
LABEL_2449:
    __dst = *(std::string *)(v1164 + 3200);
    goto LABEL_2454;
  }
LABEL_2453:
  sub_223197FA4(&__dst, *(void **)(v1164 + 3200), *(_QWORD *)(v1164 + 3208));
  v1164 = v1285;
LABEL_2454:
  v1165 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1164 + 3288) + 48))(*(_QWORD *)(v1164 + 3288));
  sub_22363DFF4();
  if (byte_25579332F < 0)
  {
    sub_223197FA4(v1296, (void *)xmmword_255793318, *((unint64_t *)&xmmword_255793318 + 1));
  }
  else
  {
    *(_OWORD *)v1296 = xmmword_255793318;
    v1297 = unk_255793328;
  }
  v1166 = HIBYTE(v1297);
  if (v1297 >= 0)
  {
    v1167 = v1296;
  }
  else
  {
    v1166 = (uint64_t)v1296[1];
    v1167 = (void **)v1296[0];
  }
  if (v1166 >= 4)
  {
    v1168 = (char *)v1167 + v1166;
    v1169 = v1167;
    do
    {
      v1170 = (char *)memchr(v1169, 118, v1166 - 3);
      if (!v1170)
        break;
      if (*(_DWORD *)v1170 == 1684631414)
      {
        if (v1170 == v1168 || v1170 - (char *)v1167 == -1)
          break;
        v1171 = *a2;
        __s[0] = (void *)v1165;
        LODWORD(__s[1]) = 4;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v1300 = __dst;
        if (*(char *)(v1285 + 3247) < 0)
        {
          sub_223197FA4(&v1301, *(void **)(v1285 + 3224), *(_QWORD *)(v1285 + 3232));
        }
        else
        {
          v1301 = *(_OWORD *)(v1285 + 3224);
          *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 3240);
        }
        sub_2236536F4();
        if (byte_25579470F < 0)
        {
          sub_223197FA4(&v1302[8], (void *)xmmword_2557946F8, *((unint64_t *)&xmmword_2557946F8 + 1));
        }
        else
        {
          *(_OWORD *)&v1302[8] = xmmword_2557946F8;
          v1303 = unk_255794708;
        }
        v1172 = *(_QWORD *)(v1171 + 8);
        if (v1172 < *(_QWORD *)(v1171 + 16))
          goto LABEL_2480;
        goto LABEL_2481;
      }
      v1169 = (void **)(v1170 + 1);
      v1166 = v1168 - (char *)v1169;
    }
    while (v1168 - (char *)v1169 >= 4);
  }
  v1171 = *a2;
  __s[0] = (void *)v1165;
  LODWORD(__s[1]) = 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v1300, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v1300 = __dst;
  if (*(char *)(v1285 + 3247) < 0)
  {
    sub_223197FA4(&v1301, *(void **)(v1285 + 3224), *(_QWORD *)(v1285 + 3232));
  }
  else
  {
    v1301 = *(_OWORD *)(v1285 + 3224);
    *(_QWORD *)v1302 = *(_QWORD *)(v1285 + 3240);
  }
  sub_2236536F4();
  if (byte_25579470F < 0)
  {
    sub_223197FA4(&v1302[8], (void *)xmmword_2557946F8, *((unint64_t *)&xmmword_2557946F8 + 1));
  }
  else
  {
    *(_OWORD *)&v1302[8] = xmmword_2557946F8;
    v1303 = unk_255794708;
  }
  v1172 = *(_QWORD *)(v1171 + 8);
  if (v1172 >= *(_QWORD *)(v1171 + 16))
  {
LABEL_2481:
    v1177 = sub_2236285DC((char **)v1171, (uint64_t)__s);
  }
  else
  {
LABEL_2480:
    v1173 = __s[0];
    *(_DWORD *)(v1172 + 8) = __s[1];
    *(_QWORD *)v1172 = v1173;
    v1174 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1172 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
    *(_OWORD *)(v1172 + 16) = v1174;
    memset(&v1300, 0, sizeof(v1300));
    v1175 = *(_QWORD *)v1302;
    *(_OWORD *)(v1172 + 40) = v1301;
    *(_QWORD *)(v1172 + 56) = v1175;
    *(_QWORD *)v1302 = 0;
    v1301 = 0uLL;
    v1176 = *(_OWORD *)&v1302[8];
    *(_QWORD *)(v1172 + 80) = v1303;
    *(_OWORD *)(v1172 + 64) = v1176;
    *(_QWORD *)&v1302[8] = 0;
    *(_QWORD *)&v1302[16] = 0;
    v1303 = 0;
    v1177 = (char *)(v1172 + 88);
  }
  *(_QWORD *)(v1171 + 8) = v1177;
  if ((SHIBYTE(v1303) & 0x80000000) == 0)
  {
    if ((v1302[7] & 0x80000000) == 0)
      goto LABEL_2484;
LABEL_2488:
    operator delete((void *)v1301);
    if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2485;
    goto LABEL_2489;
  }
  operator delete(*(void **)&v1302[8]);
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2488;
LABEL_2484:
  if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2485;
LABEL_2489:
  operator delete(v1300.__r_.__value_.__l.__data_);
LABEL_2485:
  sub_223627E68();
  if (byte_2540CBC48[23] < 0)
  {
    sub_223197FA4(v1294, *(void **)byte_2540CBC48, *(unint64_t *)&byte_2540CBC48[8]);
  }
  else
  {
    *(_OWORD *)v1294 = *(_OWORD *)byte_2540CBC48;
    v1295 = *(_QWORD *)&byte_2540CBC48[16];
  }
  v1178 = HIBYTE(v1295);
  if (v1295 >= 0)
  {
    v1179 = v1294;
  }
  else
  {
    v1178 = (uint64_t)v1294[1];
    v1179 = (void **)v1294[0];
  }
  if (v1178 >= 18)
  {
    v1180 = (char *)v1179 + v1178;
    v1181 = v1179;
    do
    {
      v1182 = (char *)memchr(v1181, 67, v1178 - 17);
      if (!v1182)
        break;
      if (*(_QWORD *)v1182 == 0x456C656E6E616843
        && *((_QWORD *)v1182 + 1) == 0x696F763C726F7272
        && *((_WORD *)v1182 + 8) == 15972)
      {
        if (v1182 != v1180 && v1182 - (char *)v1179 != -1)
          goto LABEL_2530;
        break;
      }
      v1181 = (void **)(v1182 + 1);
      v1178 = v1180 - (char *)v1181;
    }
    while (v1180 - (char *)v1181 >= 18);
  }
  v1185 = *a2;
  __s[0] = (void *)(v1165 + 1);
  LODWORD(__s[1]) = 3;
  v1186 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1187 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v1187 = __dst.__r_.__value_.__l.__size_;
  v1188 = v1187 + 6;
  if (v1187 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1188 >= 0x17)
  {
    v1190 = (v1188 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1188 | 7) != 0x17)
      v1190 = v1188 | 7;
    v1191 = v1190 + 1;
    v1189 = (std::string *)operator new(v1190 + 1);
    v1300.__r_.__value_.__l.__size_ = v1187 + 6;
    v1300.__r_.__value_.__r.__words[2] = v1191 | 0x8000000000000000;
    v1300.__r_.__value_.__r.__words[0] = (std::string::size_type)v1189;
  }
  else
  {
    memset(&v1300, 0, sizeof(v1300));
    v1189 = &v1300;
    *((_BYTE *)&v1300.__r_.__value_.__s + 23) = v1187 + 6;
    if (!v1187)
      goto LABEL_2522;
  }
  if (v1186 >= 0)
    v1192 = &__dst;
  else
    v1192 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memmove(v1189, v1192, v1187);
LABEL_2522:
  strcpy((char *)v1189 + v1187, ".Error");
  *(_WORD *)&v1302[7] = 0;
  LOBYTE(v1301) = 0;
  HIBYTE(v1303) = 0;
  v1193 = *(_QWORD *)(v1185 + 8);
  if (v1193 >= *(_QWORD *)(v1185 + 16))
  {
    v1199 = sub_2236285DC((char **)v1185, (uint64_t)__s);
    v1200 = SHIBYTE(v1303);
    *(_QWORD *)(v1185 + 8) = v1199;
    if (v1200 < 0)
    {
      operator delete(*(void **)&v1302[8]);
      if ((v1302[7] & 0x80000000) == 0)
        goto LABEL_2529;
    }
    else if ((v1302[7] & 0x80000000) == 0)
    {
      goto LABEL_2529;
    }
LABEL_2524:
    operator delete((void *)v1301);
    if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_2525;
    goto LABEL_2530;
  }
  v1194 = __s[0];
  *(_DWORD *)(v1193 + 8) = __s[1];
  *(_QWORD *)v1193 = v1194;
  v1195 = *(_OWORD *)&v1300.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1193 + 32) = *((_QWORD *)&v1300.__r_.__value_.__l + 2);
  *(_OWORD *)(v1193 + 16) = v1195;
  memset(&v1300, 0, sizeof(v1300));
  v1196 = *(_QWORD *)v1302;
  *(_OWORD *)(v1193 + 40) = v1301;
  *(_QWORD *)(v1193 + 56) = v1196;
  *(_QWORD *)v1302 = 0;
  v1301 = 0uLL;
  v1197 = *(_OWORD *)&v1302[8];
  *(_QWORD *)(v1193 + 80) = v1303;
  *(_OWORD *)(v1193 + 64) = v1197;
  *(_QWORD *)(v1185 + 8) = v1193 + 88;
  if ((v1302[7] & 0x80000000) != 0)
    goto LABEL_2524;
LABEL_2529:
  if (SHIBYTE(v1300.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_2525:
    operator delete(v1300.__r_.__value_.__l.__data_);
    v1198 = *(std::__shared_weak_count **)(v1285 + 3328);
    if (!v1198)
      goto LABEL_2534;
    goto LABEL_2531;
  }
LABEL_2530:
  v1198 = *(std::__shared_weak_count **)(v1285 + 3328);
  if (!v1198)
  {
LABEL_2534:
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1204 = 0;
    goto LABEL_2551;
  }
LABEL_2531:
  v1201 = std::__shared_weak_count::lock(v1198);
  if (!v1201)
    goto LABEL_2534;
  v1202 = v1201;
  v1203 = *(_QWORD *)(v1285 + 3320);
  if (v1203)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1203 + 24))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1205 = (unint64_t *)&v1202->__shared_owners_;
  do
    v1206 = __ldaxr(v1205);
  while (__stlxr(v1206 - 1, v1205));
  if (v1206)
  {
    v1204 = (void **)v1291;
    v1207 = v1292;
    if (v1291 == v1292)
      goto LABEL_2551;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1202->__on_zero_shared)(v1202);
    std::__shared_weak_count::__release_weak(v1202);
    v1204 = (void **)v1291;
    v1207 = v1292;
    if (v1291 == v1292)
      goto LABEL_2551;
  }
  do
  {
    v1208 = a2[1];
    __s[0] = (void *)v1165;
    __s[1] = *v1204;
    memset(&v1300, 0, sizeof(v1300));
    v1209 = *(_QWORD *)(v1208 + 8);
    if (v1209 < *(_QWORD *)(v1208 + 16))
    {
      *(_OWORD *)v1209 = *(_OWORD *)__s;
      *(_QWORD *)(v1209 + 24) = 0;
      *(_QWORD *)(v1209 + 32) = 0;
      *(_QWORD *)(v1209 + 16) = 0;
      *(_QWORD *)(v1208 + 8) = v1209 + 40;
    }
    else
    {
      v1210 = sub_223628FA4((void **)v1208, (uint64_t)__s);
      v1211 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1208 + 8) = v1210;
      if (v1211 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1204;
  }
  while (v1204 != v1207);
  v1204 = (void **)v1291;
LABEL_2551:
  if (v1204)
  {
    v1292 = v1204;
    operator delete(v1204);
  }
  v1212 = *(std::__shared_weak_count **)(v1285 + 3328);
  if (!v1212 || (v1213 = std::__shared_weak_count::lock(v1212)) == 0)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
    v1216 = 0;
    goto LABEL_2572;
  }
  v1214 = v1213;
  v1215 = *(_QWORD *)(v1285 + 3320);
  if (v1215)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1215 + 32))(&v1291);
  }
  else
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = 0;
  }
  v1217 = (unint64_t *)&v1214->__shared_owners_;
  do
    v1218 = __ldaxr(v1217);
  while (__stlxr(v1218 - 1, v1217));
  if (v1218)
  {
    v1216 = (void **)v1291;
    v1219 = v1292;
    if (v1291 == v1292)
      goto LABEL_2572;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1214->__on_zero_shared)(v1214);
    std::__shared_weak_count::__release_weak(v1214);
    v1216 = (void **)v1291;
    v1219 = v1292;
    if (v1291 == v1292)
      goto LABEL_2572;
  }
  v1220 = (void *)(v1165 + 1);
  do
  {
    v1221 = a2[1];
    __s[0] = v1220;
    __s[1] = *v1216;
    memset(&v1300, 0, sizeof(v1300));
    v1222 = *(_QWORD *)(v1221 + 8);
    if (v1222 < *(_QWORD *)(v1221 + 16))
    {
      *(_OWORD *)v1222 = *(_OWORD *)__s;
      *(_QWORD *)(v1222 + 24) = 0;
      *(_QWORD *)(v1222 + 32) = 0;
      *(_QWORD *)(v1222 + 16) = 0;
      *(_QWORD *)(v1221 + 8) = v1222 + 40;
    }
    else
    {
      v1223 = sub_223628FA4((void **)v1221, (uint64_t)__s);
      v1224 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(v1221 + 8) = v1223;
      if (v1224 < 0)
        operator delete(v1300.__r_.__value_.__l.__data_);
    }
    ++v1216;
  }
  while (v1216 != v1219);
  v1216 = (void **)v1291;
LABEL_2572:
  if (v1216)
  {
    v1292 = v1216;
    operator delete(v1216);
  }
  if (SHIBYTE(v1295) < 0)
  {
    operator delete(v1294[0]);
    if ((SHIBYTE(v1297) & 0x80000000) == 0)
    {
LABEL_2576:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_2580:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v1297) & 0x80000000) == 0)
  {
    goto LABEL_2576;
  }
  operator delete(v1296[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_2580;
}

void sub_22364DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_guard_abort(&qword_2540CB940);
  __cxa_guard_abort(&qword_2540CB938);
  __cxa_guard_abort(&qword_2540CB930);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22364EF40()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB648))
  {
    sub_22364F09C();
    v1 = byte_255793CBF;
    if (byte_255793CBF >= 0)
      v2 = byte_255793CBF;
    else
      v2 = qword_255793CB0;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255793C90 + 1) = v2 + 1;
      unk_255793CA0 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255793C90 = v4;
    }
    else
    {
      v4 = &xmmword_255793C90;
      unk_255793CA0 = 0;
      xmmword_255793C90 = 0uLL;
      byte_255793CA7 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793C90, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB648);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255793CA8;
    else
      v7 = (uint64_t *)qword_255793CA8;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_22364F084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB648);
  _Unwind_Resume(a1);
}

void sub_22364F09C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB650);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB650))
  {
    sub_22364F214();
    v1 = byte_255793CD7;
    if (byte_255793CD7 >= 0)
      v2 = byte_255793CD7;
    else
      v2 = *((_QWORD *)&xmmword_255793CC0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255793CB0 = v2 + 6;
      unk_255793CB8 = v6 | 0x8000000000000000;
      qword_255793CA8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255793CB0 = 0;
      unk_255793CB8 = 0;
      qword_255793CA8 = 0x2074736E6F63;
      byte_255793CBF = v2 + 6;
      v4 = (char *)&qword_255793CA8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793CA8, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB650);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255793CC0;
    else
      v8 = (__int128 *)xmmword_255793CC0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22364F1FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB650);
  _Unwind_Resume(a1);
}

void sub_22364F214()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB658))
  {
    sub_22364F2D0();
    if (byte_255793CEF < 0)
    {
      sub_223197FA4(&xmmword_255793CC0, (void *)qword_255793CD8, unk_255793CE0);
    }
    else
    {
      xmmword_255793CC0 = *(_OWORD *)&qword_255793CD8;
      unk_255793CD0 = unk_255793CE8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793CC0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB658);
  }
}

void sub_22364F2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB658);
  _Unwind_Resume(a1);
}

void sub_22364F2D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB660);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB660))
  {
    sub_22364F580(__p);
    sub_22364F3A8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793CD8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB660);
  }
}

void sub_22364F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB660);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB660);
  _Unwind_Resume(a1);
}

void sub_22364F3A8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB668);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB668))
  {
    sub_22364F75C();
    if (byte_255793D1F < 0)
    {
      sub_223197FA4(&xmmword_255793CF0, (void *)qword_255793D08, unk_255793D10);
    }
    else
    {
      xmmword_255793CF0 = *(_OWORD *)&qword_255793D08;
      unk_255793D00 = unk_255793D18;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793CF0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB668);
  }
  if (byte_255793D07 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793CF0, *((unint64_t *)&xmmword_255793CF0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793CF0;
    v11 = unk_255793D00;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255793CD8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22364F538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB668);
  _Unwind_Resume(a1);
}

void sub_22364F554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22364F580(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB6C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6C8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error>>]", qword_255793E10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793E10, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6C8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB6D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6D0))
  {
    v5 = sub_2231A38CC(qword_255793E10, "<", 0);
    sub_2231A37C8(qword_255793E10, 0, v5, qword_255793E28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793E28, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB6D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6D8))
  {
    sub_224573040((uint64_t)qword_255793E28, (uint64_t)&xmmword_255793E40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793E40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6D8);
  }
  if (byte_255793E57 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793E40, *((unint64_t *)&xmmword_255793E40 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793E40;
    __dst[2] = unk_255793E50;
  }
}

void sub_22364F714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6D8);
  _Unwind_Resume(a1);
}

void sub_22364F72C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6D0);
  _Unwind_Resume(a1);
}

void sub_22364F744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6C8);
  _Unwind_Resume(a1);
}

void sub_22364F75C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB670);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB670))
  {
    sub_22364FAA4(__p);
    sub_22364F834((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255793D08, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB670);
  }
}

void sub_22364F7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB670);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB670);
  _Unwind_Resume(a1);
}

void sub_22364F834(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB678);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB678))
  {
    sub_223174DE4(v10, "std::shared_ptr");
    sub_22364FC80((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793D20, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB678);
  }
  if (byte_255793D37 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793D20, *((unint64_t *)&xmmword_255793D20 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793D20;
    v13 = unk_255793D30;
  }
  sub_22364FF60();
  if (byte_255793D97 < 0)
  {
    sub_223197FA4(&v14, (void *)xmmword_255793D80, *((unint64_t *)&xmmword_255793D80 + 1));
  }
  else
  {
    v14 = xmmword_255793D80;
    v15 = unk_255793D90;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255793D08, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v14);
  if (SHIBYTE(v13) < 0)
    goto LABEL_20;
}

void sub_22364FA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB678);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB678);
  _Unwind_Resume(a1);
}

void sub_22364FA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_22319BB48((void **)&a9);
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22364FAA4(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB6B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6B0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error>]", qword_255793DC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793DC8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB6B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6B8))
  {
    v5 = sub_2231A38CC(qword_255793DC8, "<", 0);
    sub_2231A37C8(qword_255793DC8, 0, v5, qword_255793DE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793DE0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB6C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6C0))
  {
    sub_224573040((uint64_t)qword_255793DE0, (uint64_t)&xmmword_255793DF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793DF8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6C0);
  }
  if (byte_255793E0F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793DF8, *((unint64_t *)&xmmword_255793DF8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793DF8;
    __dst[2] = unk_255793E08;
  }
}

void sub_22364FC38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6C0);
  _Unwind_Resume(a1);
}

void sub_22364FC50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6B8);
  _Unwind_Resume(a1);
}

void sub_22364FC68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6B0);
  _Unwind_Resume(a1);
}

void sub_22364FC80(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB680);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB680))
  {
    sub_22364FE58();
    if (byte_255793D7F < 0)
    {
      sub_223197FA4(&xmmword_255793D38, (void *)xmmword_255793D68, *((unint64_t *)&xmmword_255793D68 + 1));
    }
    else
    {
      xmmword_255793D38 = xmmword_255793D68;
      unk_255793D48 = unk_255793D78;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793D38, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB680);
  }
  if (byte_255793D4F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255793D38, *((unint64_t *)&xmmword_255793D38 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255793D38;
    v11 = unk_255793D48;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&xmmword_255793D20, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_22364FE10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB680);
  _Unwind_Resume(a1);
}

void sub_22364FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22364FE58()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB688);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB688))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kf::KeyframeEngineResult]", qword_255793D50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793D50, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB688);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB690);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB690))
    {
      sub_224573040((uint64_t)qword_255793D50, (uint64_t)&xmmword_255793D68);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793D68, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB690);
    }
  }
}

void sub_22364FF30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB690);
  _Unwind_Resume(a1);
}

void sub_22364FF48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB688);
  _Unwind_Resume(a1);
}

void sub_22364FF60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB698);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB698))
  {
    sub_22365001C();
    if (byte_255793DC7 < 0)
    {
      sub_223197FA4(&xmmword_255793D80, (void *)xmmword_255793DB0, *((unint64_t *)&xmmword_255793DB0 + 1));
    }
    else
    {
      xmmword_255793D80 = xmmword_255793DB0;
      unk_255793D90 = unk_255793DC0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793D80, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB698);
  }
}

void sub_223650004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB698);
  _Unwind_Resume(a1);
}

void sub_22365001C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB6A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6A0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::esn::Error]", qword_255793D98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793D98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6A0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB6A8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB6A8))
    {
      sub_224573040((uint64_t)qword_255793D98, (uint64_t)&xmmword_255793DB0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793DB0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB6A8);
    }
  }
}

void sub_2236500F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6A8);
  _Unwind_Resume(a1);
}

void sub_22365010C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6A0);
  _Unwind_Resume(a1);
}

void sub_223650124()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB6E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6E0))
  {
    sub_2236501E0();
    if (byte_255793E9F < 0)
    {
      sub_223197FA4(&xmmword_255793E58, (void *)xmmword_255793E88, *((unint64_t *)&xmmword_255793E88 + 1));
    }
    else
    {
      xmmword_255793E58 = xmmword_255793E88;
      unk_255793E68 = unk_255793E98;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793E58, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6E0);
  }
}

void sub_2236501C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6E0);
  _Unwind_Resume(a1);
}

void sub_2236501E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB6E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6E8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error> (const cv3d::recon::frame::FrameBundle &)]", qword_255793E70);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793E70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6E8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB6F0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB6F0))
    {
      sub_224573040((uint64_t)qword_255793E70, (uint64_t)&xmmword_255793E88);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793E88, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB6F0);
    }
  }
}

void sub_2236502B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6F0);
  _Unwind_Resume(a1);
}

void sub_2236502D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6E8);
  _Unwind_Resume(a1);
}

void sub_2236502E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB6F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB6F8))
  {
    sub_2236503A4();
    if (byte_255793EE7 < 0)
    {
      sub_223197FA4(&xmmword_255793EA0, (void *)xmmword_255793ED0, *((unint64_t *)&xmmword_255793ED0 + 1));
    }
    else
    {
      xmmword_255793EA0 = xmmword_255793ED0;
      unk_255793EB0 = unk_255793EE0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793EA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB6F8);
  }
}

void sub_22365038C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB6F8);
  _Unwind_Resume(a1);
}

void sub_2236503A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB700);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB700))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error> (const cv3d::recon::sng::FrameBundleSync &)]", qword_255793EB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793EB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB700);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB708);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB708))
    {
      sub_224573040((uint64_t)qword_255793EB8, (uint64_t)&xmmword_255793ED0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793ED0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB708);
    }
  }
}

void sub_22365047C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB708);
  _Unwind_Resume(a1);
}

void sub_223650494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB700);
  _Unwind_Resume(a1);
}

void sub_2236504AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB710);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB710))
  {
    sub_223650568();
    if (byte_255793F2F < 0)
    {
      sub_223197FA4(&xmmword_255793EE8, (void *)xmmword_255793F18, *((unint64_t *)&xmmword_255793F18 + 1));
    }
    else
    {
      xmmword_255793EE8 = xmmword_255793F18;
      unk_255793EF8 = unk_255793F28;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793EE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB710);
  }
}

void sub_223650550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB710);
  _Unwind_Resume(a1);
}

void sub_223650568()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB718))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::KeyframeNodeResetRequest &)]", qword_255793F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793F00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB718);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB720);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB720))
    {
      sub_224573040((uint64_t)qword_255793F00, (uint64_t)&xmmword_255793F18);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793F18, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB720);
    }
  }
}

void sub_223650640(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB720);
  _Unwind_Resume(a1);
}

void sub_223650658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB718);
  _Unwind_Resume(a1);
}

void sub_223650670()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB728);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB728))
  {
    sub_22365072C();
    if (byte_255793F77 < 0)
    {
      sub_223197FA4(&xmmword_255793F30, (void *)xmmword_255793F60, *((unint64_t *)&xmmword_255793F60 + 1));
    }
    else
    {
      xmmword_255793F30 = xmmword_255793F60;
      unk_255793F40 = unk_255793F70;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793F30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB728);
  }
}

void sub_223650714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB728);
  _Unwind_Resume(a1);
}

void sub_22365072C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB730);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB730))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::KeyframeNodeWaitRequest &)]", qword_255793F48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793F48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB730);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB738);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB738))
    {
      sub_224573040((uint64_t)qword_255793F48, (uint64_t)&xmmword_255793F60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793F60, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB738);
    }
  }
}

void sub_223650804(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB738);
  _Unwind_Resume(a1);
}

void sub_22365081C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB730);
  _Unwind_Resume(a1);
}

void sub_223650834()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB740);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB740))
  {
    sub_2236508F0();
    if (byte_255793FBF < 0)
    {
      sub_223197FA4(&xmmword_255793F78, (void *)xmmword_255793FA8, *((unint64_t *)&xmmword_255793FA8 + 1));
    }
    else
    {
      xmmword_255793F78 = xmmword_255793FA8;
      unk_255793F88 = unk_255793FB8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793F78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB740);
  }
}

void sub_2236508D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB740);
  _Unwind_Resume(a1);
}

void sub_2236508F0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB748);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB748))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::FilesystemAccessGrantedRequest &)]", qword_255793F90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793F90, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB748);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB750);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB750))
    {
      sub_224573040((uint64_t)qword_255793F90, (uint64_t)&xmmword_255793FA8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793FA8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB750);
    }
  }
}

void sub_2236509C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB750);
  _Unwind_Resume(a1);
}

void sub_2236509E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB748);
  _Unwind_Resume(a1);
}

void sub_2236509F8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB758))
  {
    sub_223650AB4();
    if (byte_255794007 < 0)
    {
      sub_223197FA4(&xmmword_255793FC0, (void *)xmmword_255793FF0, *((unint64_t *)&xmmword_255793FF0 + 1));
    }
    else
    {
      xmmword_255793FC0 = xmmword_255793FF0;
      unk_255793FD0 = unk_255794000;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793FC0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB758);
  }
}

void sub_223650A9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB758);
  _Unwind_Resume(a1);
}

void sub_223650AB4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB760);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB760))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::LocalizeRestoredKeyframesRequest &)]", qword_255793FD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255793FD8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB760);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB768);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB768))
    {
      sub_224573040((uint64_t)qword_255793FD8, (uint64_t)&xmmword_255793FF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255793FF0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB768);
    }
  }
}

void sub_223650B8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB768);
  _Unwind_Resume(a1);
}

void sub_223650BA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB760);
  _Unwind_Resume(a1);
}

void sub_223650BBC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB770);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB770))
  {
    sub_223650C78();
    if (byte_25579404F < 0)
    {
      sub_223197FA4(&xmmword_255794008, (void *)xmmword_255794038, *((unint64_t *)&xmmword_255794038 + 1));
    }
    else
    {
      xmmword_255794008 = xmmword_255794038;
      unk_255794018 = unk_255794048;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794008, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB770);
  }
}

void sub_223650C60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB770);
  _Unwind_Resume(a1);
}

void sub_223650C78()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB778);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB778))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::KeyframeSaveSnapshotRequest &)]", qword_255794020);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794020, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB778);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB780);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB780))
    {
      sub_224573040((uint64_t)qword_255794020, (uint64_t)&xmmword_255794038);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794038, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB780);
    }
  }
}

void sub_223650D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB780);
  _Unwind_Resume(a1);
}

void sub_223650D68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB778);
  _Unwind_Resume(a1);
}

void sub_223650D80()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB788);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB788))
  {
    sub_223650EDC();
    v1 = byte_25579407F;
    if (byte_25579407F >= 0)
      v2 = byte_25579407F;
    else
      v2 = qword_255794070;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255794050 + 1) = v2 + 1;
      unk_255794060 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255794050 = v4;
    }
    else
    {
      v4 = &xmmword_255794050;
      unk_255794060 = 0;
      xmmword_255794050 = 0uLL;
      byte_255794067 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794050, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB788);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255794068;
    else
      v7 = (uint64_t *)qword_255794068;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_223650EC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB788);
  _Unwind_Resume(a1);
}

void sub_223650EDC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB790);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB790))
  {
    sub_223651054();
    v1 = byte_255794097;
    if (byte_255794097 >= 0)
      v2 = byte_255794097;
    else
      v2 = *((_QWORD *)&xmmword_255794080 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255794070 = v2 + 6;
      unk_255794078 = v6 | 0x8000000000000000;
      qword_255794068 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255794070 = 0;
      unk_255794078 = 0;
      qword_255794068 = 0x2074736E6F63;
      byte_25579407F = v2 + 6;
      v4 = (char *)&qword_255794068 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794068, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB790);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255794080;
    else
      v8 = (__int128 *)xmmword_255794080;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_22365103C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB790);
  _Unwind_Resume(a1);
}

void sub_223651054()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB798))
  {
    sub_223651110();
    if (byte_2557940AF < 0)
    {
      sub_223197FA4(&xmmword_255794080, (void *)qword_255794098, unk_2557940A0);
    }
    else
    {
      xmmword_255794080 = *(_OWORD *)&qword_255794098;
      unk_255794090 = unk_2557940A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794080, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB798);
  }
}

void sub_2236510F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB798);
  _Unwind_Resume(a1);
}

void sub_223651110()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB7A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7A0))
  {
    sub_2236513C0(__p);
    sub_2236511E8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794098, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7A0);
  }
}

void sub_2236511A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB7A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB7A0);
  _Unwind_Resume(a1);
}

void sub_2236511E8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB7A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7A8))
  {
    sub_22365159C();
    if (byte_2557940DF < 0)
    {
      sub_223197FA4(&xmmword_2557940B0, (void *)qword_2557940C8, unk_2557940D0);
    }
    else
    {
      xmmword_2557940B0 = *(_OWORD *)&qword_2557940C8;
      unk_2557940C0 = unk_2557940D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557940B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7A8);
  }
  if (byte_2557940C7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557940B0, *((unint64_t *)&xmmword_2557940B0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557940B0;
    v11 = unk_2557940C0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255794098, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223651378(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7A8);
  _Unwind_Resume(a1);
}

void sub_223651394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2236513C0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB7D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7D0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_future<BOOL>>]", qword_255794128);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794128, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB7D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7D8))
  {
    v5 = sub_2231A38CC(qword_255794128, "<", 0);
    sub_2231A37C8(qword_255794128, 0, v5, qword_255794140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794140, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB7E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7E0))
  {
    sub_224573040((uint64_t)qword_255794140, (uint64_t)&xmmword_255794158);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794158, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7E0);
  }
  if (byte_25579416F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794158, *((unint64_t *)&xmmword_255794158 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794158;
    __dst[2] = unk_255794168;
  }
}

void sub_223651554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7E0);
  _Unwind_Resume(a1);
}

void sub_22365156C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7D8);
  _Unwind_Resume(a1);
}

void sub_223651584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7D0);
  _Unwind_Resume(a1);
}

void sub_22365159C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB7B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7B0))
  {
    sub_22365167C(__p);
    sub_22363E464((char *)__p, (std::string *)&qword_2557940C8);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557940C8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7B0);
  }
}

void sub_22365163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB7B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB7B0);
  _Unwind_Resume(a1);
}

void sub_22365167C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB7B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7B8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_future<BOOL>]", qword_2557940E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557940E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB7C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7C0))
  {
    v5 = sub_2231A38CC(qword_2557940E0, "<", 0);
    sub_2231A37C8(qword_2557940E0, 0, v5, qword_2557940F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557940F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB7C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7C8))
  {
    sub_224573040((uint64_t)qword_2557940F8, (uint64_t)&xmmword_255794110);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794110, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7C8);
  }
  if (byte_255794127 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794110, *((unint64_t *)&xmmword_255794110 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794110;
    __dst[2] = unk_255794120;
  }
}

void sub_223651810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7C8);
  _Unwind_Resume(a1);
}

void sub_223651828(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7C0);
  _Unwind_Resume(a1);
}

void sub_223651840(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7B8);
  _Unwind_Resume(a1);
}

void sub_223651858()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB7E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7E8))
  {
    sub_223651914();
    if (byte_2557941B7 < 0)
    {
      sub_223197FA4(&xmmword_255794170, (void *)xmmword_2557941A0, *((unint64_t *)&xmmword_2557941A0 + 1));
    }
    else
    {
      xmmword_255794170 = xmmword_2557941A0;
      unk_255794180 = unk_2557941B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794170, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7E8);
  }
}

void sub_2236518FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7E8);
  _Unwind_Resume(a1);
}

void sub_223651914()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB7F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB7F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_future<BOOL> (const cv3d::recon::sng::KeyframeSaveSnapshotToRequest &)]", qword_255794188);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794188, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB7F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB7F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB7F8))
    {
      sub_224573040((uint64_t)qword_255794188, (uint64_t)&xmmword_2557941A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557941A0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB7F8);
    }
  }
}

void sub_2236519EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7F8);
  _Unwind_Resume(a1);
}

void sub_223651A04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB7F0);
  _Unwind_Resume(a1);
}

void sub_223651A1C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB800);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB800))
  {
    sub_223651AD8();
    if (byte_2557941FF < 0)
    {
      sub_223197FA4(&xmmword_2557941B8, (void *)xmmword_2557941E8, *((unint64_t *)&xmmword_2557941E8 + 1));
    }
    else
    {
      xmmword_2557941B8 = xmmword_2557941E8;
      unk_2557941C8 = unk_2557941F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557941B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB800);
  }
}

void sub_223651AC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB800);
  _Unwind_Resume(a1);
}

void sub_223651AD8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB808);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB808))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::SaveKeyframesRequest &)]", qword_2557941D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557941D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB808);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB810);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB810))
    {
      sub_224573040((uint64_t)qword_2557941D0, (uint64_t)&xmmword_2557941E8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557941E8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB810);
    }
  }
}

void sub_223651BB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB810);
  _Unwind_Resume(a1);
}

void sub_223651BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB808);
  _Unwind_Resume(a1);
}

void sub_223651BE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB818);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB818))
  {
    sub_223651C9C();
    if (byte_255794247 < 0)
    {
      sub_223197FA4(&xmmword_255794200, (void *)xmmword_255794230, *((unint64_t *)&xmmword_255794230 + 1));
    }
    else
    {
      xmmword_255794200 = xmmword_255794230;
      unk_255794210 = unk_255794240;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794200, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB818);
  }
}

void sub_223651C84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB818);
  _Unwind_Resume(a1);
}

void sub_223651C9C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB820);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB820))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::SaveRoomBoundariesRequest &)]", qword_255794218);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794218, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB820);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB828);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB828))
    {
      sub_224573040((uint64_t)qword_255794218, (uint64_t)&xmmword_255794230);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794230, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB828);
    }
  }
}

void sub_223651D74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB828);
  _Unwind_Resume(a1);
}

void sub_223651D8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB820);
  _Unwind_Resume(a1);
}

void sub_223651DA4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB830);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB830))
  {
    sub_223651F00();
    v1 = byte_255794277;
    if (byte_255794277 >= 0)
      v2 = byte_255794277;
    else
      v2 = qword_255794268;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255794248 + 1) = v2 + 1;
      unk_255794258 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255794248 = v4;
    }
    else
    {
      v4 = &xmmword_255794248;
      unk_255794258 = 0;
      xmmword_255794248 = 0uLL;
      byte_25579425F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794248, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB830);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255794260;
    else
      v7 = (uint64_t *)qword_255794260;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_223651EE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB830);
  _Unwind_Resume(a1);
}

void sub_223651F00()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB838);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB838))
  {
    sub_223652078();
    v1 = byte_25579428F;
    if (byte_25579428F >= 0)
      v2 = byte_25579428F;
    else
      v2 = *((_QWORD *)&xmmword_255794278 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255794268 = v2 + 6;
      unk_255794270 = v6 | 0x8000000000000000;
      qword_255794260 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255794268 = 0;
      unk_255794270 = 0;
      qword_255794260 = 0x2074736E6F63;
      byte_255794277 = v2 + 6;
      v4 = (char *)&qword_255794260 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794260, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB838);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255794278;
    else
      v8 = (__int128 *)xmmword_255794278;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223652060(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB838);
  _Unwind_Resume(a1);
}

void sub_223652078()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB840);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB840))
  {
    sub_223652134();
    if (byte_2557942A7 < 0)
    {
      sub_223197FA4(&xmmword_255794278, (void *)qword_255794290, unk_255794298);
    }
    else
    {
      xmmword_255794278 = *(_OWORD *)&qword_255794290;
      unk_255794288 = unk_2557942A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794278, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB840);
  }
}

void sub_22365211C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB840);
  _Unwind_Resume(a1);
}

void sub_223652134()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB848);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB848))
  {
    sub_2236523F8(__p);
    sub_22365220C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794290, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB848);
  }
}

void sub_2236521CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB848);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB848);
  _Unwind_Resume(a1);
}

void sub_22365220C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB850);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB850))
  {
    sub_223174DE4(v10, "std::vector");
    sub_2236525D4((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557942A8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB850);
  }
  if (byte_2557942BF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557942A8, *((unint64_t *)&xmmword_2557942A8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557942A8;
    v13 = unk_2557942B8;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255794290, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_223652388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB850);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB850);
  _Unwind_Resume(a1);
}

void sub_2236523CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_22319BB48((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2236523F8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CB870);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB870))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::vector<cv3d::recon::frame::KeyframeData>>]", qword_255794308);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794308, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB870);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CB878);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB878))
  {
    v5 = sub_2231A38CC(qword_255794308, "<", 0);
    sub_2231A37C8(qword_255794308, 0, v5, qword_255794320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794320, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB878);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CB880);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB880))
  {
    sub_224573040((uint64_t)qword_255794320, (uint64_t)&xmmword_255794338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794338, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB880);
  }
  if (byte_25579434F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794338, *((unint64_t *)&xmmword_255794338 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794338;
    __dst[2] = unk_255794348;
  }
}

void sub_22365258C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB880);
  _Unwind_Resume(a1);
}

void sub_2236525A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB878);
  _Unwind_Resume(a1);
}

void sub_2236525BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB870);
  _Unwind_Resume(a1);
}

void sub_2236525D4(char *a1)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *__p;
  void **v8;
  void *__dst[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_223652710();
  if (byte_2557942D7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557942C0, *((unint64_t *)&xmmword_2557942C0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557942C0;
    v10 = unk_2557942D0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&xmmword_2557942A8, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v8;
    v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v8 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_2236526E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223652710()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB858))
  {
    sub_2236527CC();
    if (byte_255794307 < 0)
    {
      sub_223197FA4(&xmmword_2557942C0, (void *)xmmword_2557942F0, *((unint64_t *)&xmmword_2557942F0 + 1));
    }
    else
    {
      xmmword_2557942C0 = xmmword_2557942F0;
      unk_2557942D0 = unk_255794300;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557942C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB858);
  }
}

void sub_2236527B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB858);
  _Unwind_Resume(a1);
}

void sub_2236527CC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB860);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB860))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::frame::KeyframeData]", qword_2557942D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557942D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB860);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB868);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB868))
    {
      sub_224573040((uint64_t)qword_2557942D8, (uint64_t)&xmmword_2557942F0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557942F0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB868);
    }
  }
}

void sub_2236528A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB868);
  _Unwind_Resume(a1);
}

void sub_2236528BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB860);
  _Unwind_Resume(a1);
}

void sub_2236528D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB888);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB888))
  {
    sub_223652990();
    if (byte_255794397 < 0)
    {
      sub_223197FA4(&xmmword_255794350, (void *)xmmword_255794380, *((unint64_t *)&xmmword_255794380 + 1));
    }
    else
    {
      xmmword_255794350 = xmmword_255794380;
      unk_255794360 = unk_255794390;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794350, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB888);
  }
}

void sub_223652978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB888);
  _Unwind_Resume(a1);
}

void sub_223652990()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB890);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB890))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::recon::frame::KeyframeData> (const std::optional<unsigned int> &)]", qword_255794368);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794368, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB890);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB898);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB898))
    {
      sub_224573040((uint64_t)qword_255794368, (uint64_t)&xmmword_255794380);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794380, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB898);
    }
  }
}

void sub_223652A68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB898);
  _Unwind_Resume(a1);
}

void sub_223652A80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB890);
  _Unwind_Resume(a1);
}

void sub_223652A98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8A0))
  {
    sub_223652B54();
    if (byte_2557943DF < 0)
    {
      sub_223197FA4(&xmmword_255794398, (void *)xmmword_2557943C8, *((unint64_t *)&xmmword_2557943C8 + 1));
    }
    else
    {
      xmmword_255794398 = xmmword_2557943C8;
      unk_2557943A8 = unk_2557943D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794398, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8A0);
  }
}

void sub_223652B3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8A0);
  _Unwind_Resume(a1);
}

void sub_223652B54()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::recon::frame::KeyframeData> (const cva::SE3GroupStorage<float, cva::Matrix<float, 4, 4>> &)]", qword_2557943B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557943B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB8B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB8B0))
    {
      sub_224573040((uint64_t)qword_2557943B0, (uint64_t)&xmmword_2557943C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557943C8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB8B0);
    }
  }
}

void sub_223652C2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8B0);
  _Unwind_Resume(a1);
}

void sub_223652C44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8A8);
  _Unwind_Resume(a1);
}

void sub_223652C5C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8B8))
  {
    sub_223652D18();
    if (byte_255794427 < 0)
    {
      sub_223197FA4(&xmmword_2557943E0, (void *)xmmword_255794410, *((unint64_t *)&xmmword_255794410 + 1));
    }
    else
    {
      xmmword_2557943E0 = xmmword_255794410;
      unk_2557943F0 = unk_255794420;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557943E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8B8);
  }
}

void sub_223652D00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8B8);
  _Unwind_Resume(a1);
}

void sub_223652D18()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8C0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::recon::frame::KeyframeData> (const cv3d::recon::sng::FlushPendingUpdatedKeyframesRequest &)]", qword_2557943F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557943F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB8C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB8C8))
    {
      sub_224573040((uint64_t)qword_2557943F8, (uint64_t)&xmmword_255794410);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794410, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB8C8);
    }
  }
}

void sub_223652DF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8C8);
  _Unwind_Resume(a1);
}

void sub_223652E08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8C0);
  _Unwind_Resume(a1);
}

void sub_223652E20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8D0))
  {
    sub_223652EDC();
    if (byte_25579446F < 0)
    {
      sub_223197FA4(&xmmword_255794428, (void *)xmmword_255794458, *((unint64_t *)&xmmword_255794458 + 1));
    }
    else
    {
      xmmword_255794428 = xmmword_255794458;
      unk_255794438 = unk_255794468;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794428, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8D0);
  }
}

void sub_223652EC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8D0);
  _Unwind_Resume(a1);
}

void sub_223652EDC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8D8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::recon::frame::KeyframeData> (const cv3d::recon::sng::FlushPendingUpdatedKeyframesGrefRequest &)]", qword_255794440);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794440, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB8E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB8E0))
    {
      sub_224573040((uint64_t)qword_255794440, (uint64_t)&xmmword_255794458);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794458, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB8E0);
    }
  }
}

void sub_223652FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8E0);
  _Unwind_Resume(a1);
}

void sub_223652FCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8D8);
  _Unwind_Resume(a1);
}

void sub_223652FE4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8E8))
  {
    sub_2236530A0();
    if (byte_2557944B7 < 0)
    {
      sub_223197FA4(&xmmword_255794470, (void *)xmmword_2557944A0, *((unint64_t *)&xmmword_2557944A0 + 1));
    }
    else
    {
      xmmword_255794470 = xmmword_2557944A0;
      unk_255794480 = unk_2557944B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794470, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8E8);
  }
}

void sub_223653088(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8E8);
  _Unwind_Resume(a1);
}

void sub_2236530A0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB8F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB8F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::recon::frame::KeyframeData> (const cv3d::recon::sng::GetKeyframesOverlappingFrustumRequest &)]", qword_255794488);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794488, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB8F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB8F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB8F8))
    {
      sub_224573040((uint64_t)qword_255794488, (uint64_t)&xmmword_2557944A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557944A0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB8F8);
    }
  }
}

void sub_223653178(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8F8);
  _Unwind_Resume(a1);
}

void sub_223653190(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB8F0);
  _Unwind_Resume(a1);
}

void sub_2236531A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB900);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB900))
  {
    sub_223653264();
    if (byte_2557944FF < 0)
    {
      sub_223197FA4(&xmmword_2557944B8, (void *)xmmword_2557944E8, *((unint64_t *)&xmmword_2557944E8 + 1));
    }
    else
    {
      xmmword_2557944B8 = xmmword_2557944E8;
      unk_2557944C8 = unk_2557944F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557944B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB900);
  }
}

void sub_22365324C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB900);
  _Unwind_Resume(a1);
}

void sub_223653264()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB908);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB908))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::esn::random::UUID> (const cv3d::recon::sng::GetKeyframeUUIDsListForSphereRequest &)]", qword_2557944D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557944D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB908);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB910);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB910))
    {
      sub_224573040((uint64_t)qword_2557944D0, (uint64_t)&xmmword_2557944E8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557944E8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB910);
    }
  }
}

void sub_22365333C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB910);
  _Unwind_Resume(a1);
}

void sub_223653354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB908);
  _Unwind_Resume(a1);
}

void sub_22365336C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB918);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB918))
  {
    sub_223653428();
    if (byte_255794547 < 0)
    {
      sub_223197FA4(&xmmword_255794500, (void *)xmmword_255794530, *((unint64_t *)&xmmword_255794530 + 1));
    }
    else
    {
      xmmword_255794500 = xmmword_255794530;
      unk_255794510 = unk_255794540;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794500, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB918);
  }
}

void sub_223653410(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB918);
  _Unwind_Resume(a1);
}

void sub_223653428()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB920);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB920))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::esn::random::UUID> (const std::chrono::duration<long long, std::ratio<1, 1000000000>> &)]", qword_255794518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794518, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB920);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB928);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB928))
    {
      sub_224573040((uint64_t)qword_255794518, (uint64_t)&xmmword_255794530);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794530, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB928);
    }
  }
}

void sub_223653500(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB928);
  _Unwind_Resume(a1);
}

void sub_223653518(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB920);
  _Unwind_Resume(a1);
}

void sub_223653530()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9A8))
  {
    sub_2236535EC();
    if (byte_2557946F7 < 0)
    {
      sub_223197FA4(&xmmword_2557946B0, (void *)xmmword_2557946E0, *((unint64_t *)&xmmword_2557946E0 + 1));
    }
    else
    {
      xmmword_2557946B0 = xmmword_2557946E0;
      unk_2557946C0 = unk_2557946F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557946B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9A8);
  }
}

void sub_2236535D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9A8);
  _Unwind_Resume(a1);
}

void sub_2236535EC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9B0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<cv3d::recon::frame::KeyframeData, cv3d::kit::cf::ErrorRef> (const cv3d::esn::random::UUID &)]", qword_2557946C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557946C8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9B0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB9B8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB9B8))
    {
      sub_224573040((uint64_t)qword_2557946C8, (uint64_t)&xmmword_2557946E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557946E0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB9B8);
    }
  }
}

void sub_2236536C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9B8);
  _Unwind_Resume(a1);
}

void sub_2236536DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9B0);
  _Unwind_Resume(a1);
}

void sub_2236536F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9C0))
  {
    sub_2236537B0();
    if (byte_25579473F < 0)
    {
      sub_223197FA4(&xmmword_2557946F8, (void *)xmmword_255794728, *((unint64_t *)&xmmword_255794728 + 1));
    }
    else
    {
      xmmword_2557946F8 = xmmword_255794728;
      unk_255794708 = unk_255794738;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557946F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9C0);
  }
}

void sub_223653798(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9C0);
  _Unwind_Resume(a1);
}

void sub_2236537B0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9C8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (cv3d::recon::sng::InvalidateKeyframesColorRequest)]", qword_255794710);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794710, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9C8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CB9D0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CB9D0))
    {
      sub_224573040((uint64_t)qword_255794710, (uint64_t)&xmmword_255794728);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794728, &dword_22314D000);
      __cxa_guard_release(&qword_2540CB9D0);
    }
  }
}

void sub_223653888(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9D0);
  _Unwind_Resume(a1);
}

void sub_2236538A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9C8);
  _Unwind_Resume(a1);
}

void sub_2236538B8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9D8))
  {
    sub_223653A14();
    v1 = byte_25579476F;
    if (byte_25579476F >= 0)
      v2 = byte_25579476F;
    else
      v2 = qword_255794760;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_255794740 + 1) = v2 + 1;
      unk_255794750 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_255794740 = v4;
    }
    else
    {
      v4 = &xmmword_255794740;
      unk_255794750 = 0;
      xmmword_255794740 = 0uLL;
      byte_255794757 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794740, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB9D8);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_255794758;
    else
      v7 = (uint64_t *)qword_255794758;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_2236539FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9D8);
  _Unwind_Resume(a1);
}

void sub_223653A14()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9E0))
  {
    sub_223653B8C();
    v1 = byte_255794787;
    if (byte_255794787 >= 0)
      v2 = byte_255794787;
    else
      v2 = *((_QWORD *)&xmmword_255794770 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255794760 = v2 + 6;
      unk_255794768 = v6 | 0x8000000000000000;
      qword_255794758 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255794760 = 0;
      unk_255794768 = 0;
      qword_255794758 = 0x2074736E6F63;
      byte_25579476F = v2 + 6;
      v4 = (char *)&qword_255794758 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794758, &dword_22314D000);
        __cxa_guard_release(&qword_2540CB9E0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255794770;
    else
      v8 = (__int128 *)xmmword_255794770;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223653B74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9E0);
  _Unwind_Resume(a1);
}

void sub_223653B8C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9E8))
  {
    sub_223653C48();
    if (byte_25579479F < 0)
    {
      sub_223197FA4(&xmmword_255794770, (void *)qword_255794788, unk_255794790);
    }
    else
    {
      xmmword_255794770 = *(_OWORD *)&qword_255794788;
      unk_255794780 = unk_255794798;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794770, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9E8);
  }
}

void sub_223653C30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9E8);
  _Unwind_Resume(a1);
}

void sub_223653C48()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CB9F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9F0))
  {
    sub_223653EF8(__p);
    sub_223653D20((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794788, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9F0);
  }
}

void sub_223653CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CB9F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CB9F0);
  _Unwind_Resume(a1);
}

void sub_223653D20(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CB9F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CB9F8))
  {
    sub_2236540D4();
    if (byte_2557947CF < 0)
    {
      sub_223197FA4(&xmmword_2557947A0, (void *)qword_2557947B8, unk_2557947C0);
    }
    else
    {
      xmmword_2557947A0 = *(_OWORD *)&qword_2557947B8;
      unk_2557947B0 = unk_2557947C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557947A0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CB9F8);
  }
  if (byte_2557947B7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557947A0, *((unint64_t *)&xmmword_2557947A0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557947A0;
    v11 = unk_2557947B0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255794788, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223653EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CB9F8);
  _Unwind_Resume(a1);
}

void sub_223653ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223653EF8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBA48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA48))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::experimental::expected<std::shared_ptr<const cv3d::recon::kfplanes::PlaneDetectionResult>, cv3d::esn::Error>>]", qword_255794890);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794890, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA48);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CBA50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA50))
  {
    v5 = sub_2231A38CC(qword_255794890, "<", 0);
    sub_2231A37C8(qword_255794890, 0, v5, qword_2557948A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557948A8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CBA58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA58))
  {
    sub_224573040((uint64_t)qword_2557948A8, (uint64_t)&xmmword_2557948C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557948C0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA58);
  }
  if (byte_2557948D7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557948C0, *((unint64_t *)&xmmword_2557948C0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557948C0;
    __dst[2] = unk_2557948D0;
  }
}

void sub_22365408C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA58);
  _Unwind_Resume(a1);
}

void sub_2236540A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA50);
  _Unwind_Resume(a1);
}

void sub_2236540BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA48);
  _Unwind_Resume(a1);
}

void sub_2236540D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA00))
  {
    sub_22365441C(__p);
    sub_2236541AC((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2557947B8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA00);
  }
}

void sub_22365416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBA00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBA00);
  _Unwind_Resume(a1);
}

void sub_2236541AC(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CBA08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA08))
  {
    sub_223174DE4(v10, "std::shared_ptr");
    sub_2236545F8((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557947D0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA08);
  }
  if (byte_2557947E7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557947D0, *((unint64_t *)&xmmword_2557947D0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557947D0;
    v13 = unk_2557947E0;
  }
  sub_22364FF60();
  if (byte_255793D97 < 0)
  {
    sub_223197FA4(&v14, (void *)xmmword_255793D80, *((unint64_t *)&xmmword_255793D80 + 1));
  }
  else
  {
    v14 = xmmword_255793D80;
    v15 = unk_255793D90;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2557947B8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v14);
  if (SHIBYTE(v13) < 0)
    goto LABEL_20;
}

void sub_223654394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBA08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBA08);
  _Unwind_Resume(a1);
}

void sub_2236543D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_22319BB48((void **)&a9);
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22365441C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBA30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA30))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<const cv3d::recon::kfplanes::PlaneDetectionResult>, cv3d::esn::Error>]", qword_255794848);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794848, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CBA38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA38))
  {
    v5 = sub_2231A38CC(qword_255794848, "<", 0);
    sub_2231A37C8(qword_255794848, 0, v5, qword_255794860);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794860, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CBA40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA40))
  {
    sub_224573040((uint64_t)qword_255794860, (uint64_t)&xmmword_255794878);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794878, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA40);
  }
  if (byte_25579488F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794878, *((unint64_t *)&xmmword_255794878 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794878;
    __dst[2] = unk_255794888;
  }
}

void sub_2236545B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA40);
  _Unwind_Resume(a1);
}

void sub_2236545C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA38);
  _Unwind_Resume(a1);
}

void sub_2236545E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA30);
  _Unwind_Resume(a1);
}

void sub_2236545F8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  void *__p;
  void **v17;
  void *__dst[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CBA10);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CBA10))
    goto LABEL_2;
  sub_223654890();
  v8 = byte_255794817;
  if (byte_255794817 >= 0)
    v9 = byte_255794817;
  else
    v9 = *((_QWORD *)&xmmword_255794800 + 1);
  v10 = v9 + 6;
  if (v9 + 6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_2557947E8 + 1) = v9 + 6;
    unk_2557947F8 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_2557947E8 = v14;
    *(_DWORD *)v14 = 1936617315;
    *((_WORD *)v14 + 2) = 8308;
    v11 = v14 + 6;
    goto LABEL_27;
  }
  unk_2557947F8 = 0;
  xmmword_2557947E8 = 0x2074736E6F63uLL;
  byte_2557947FF = v9 + 6;
  v11 = (char *)&xmmword_2557947E8 + 6;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v15 = &xmmword_255794800;
    else
      v15 = (__int128 *)xmmword_255794800;
    memmove(v11, v15, v9);
  }
  v11[v9] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557947E8, &dword_22314D000);
  __cxa_guard_release(&qword_2540CBA10);
LABEL_2:
  if (byte_2557947FF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2557947E8, *((unint64_t *)&xmmword_2557947E8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2557947E8;
    v19 = unk_2557947F8;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&xmmword_2557947D0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v17;
    v7 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v17 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_223654848(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA10);
  _Unwind_Resume(a1);
}

void sub_223654864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223654890()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA18))
  {
    sub_22365494C();
    if (byte_255794847 < 0)
    {
      sub_223197FA4(&xmmword_255794800, (void *)xmmword_255794830, *((unint64_t *)&xmmword_255794830 + 1));
    }
    else
    {
      xmmword_255794800 = xmmword_255794830;
      unk_255794810 = unk_255794840;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794800, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA18);
  }
}

void sub_223654934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA18);
  _Unwind_Resume(a1);
}

void sub_22365494C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA20))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::kfplanes::PlaneDetectionResult]", qword_255794818);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794818, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA20);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBA28);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBA28))
    {
      sub_224573040((uint64_t)qword_255794818, (uint64_t)&xmmword_255794830);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794830, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBA28);
    }
  }
}

void sub_223654A24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA28);
  _Unwind_Resume(a1);
}

void sub_223654A3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA20);
  _Unwind_Resume(a1);
}

void sub_223654A54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA60))
  {
    sub_223654B10();
    if (byte_25579491F < 0)
    {
      sub_223197FA4(&xmmword_2557948D8, (void *)xmmword_255794908, *((unint64_t *)&xmmword_255794908 + 1));
    }
    else
    {
      xmmword_2557948D8 = xmmword_255794908;
      unk_2557948E8 = unk_255794918;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557948D8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA60);
  }
}

void sub_223654AF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA60);
  _Unwind_Resume(a1);
}

void sub_223654B10()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA68))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<const cv3d::recon::kfplanes::PlaneDetectionResult>, cv3d::esn::Error> (const std::experimental::expected<std::shared_ptr<cv3d::recon::kf::KeyframeEngineResult>, cv3d::esn::Error> &)]", qword_2557948F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557948F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA68);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBA70);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBA70))
    {
      sub_224573040((uint64_t)qword_2557948F0, (uint64_t)&xmmword_255794908);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794908, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBA70);
    }
  }
}

void sub_223654BE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA70);
  _Unwind_Resume(a1);
}

void sub_223654C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA68);
  _Unwind_Resume(a1);
}

void sub_223654C18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA78))
  {
    sub_223654CD4();
    if (byte_255794967 < 0)
    {
      sub_223197FA4(&xmmword_255794920, (void *)xmmword_255794950, *((unint64_t *)&xmmword_255794950 + 1));
    }
    else
    {
      xmmword_255794920 = xmmword_255794950;
      unk_255794930 = unk_255794960;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794920, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA78);
  }
}

void sub_223654CBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA78);
  _Unwind_Resume(a1);
}

void sub_223654CD4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA80))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::experimental::expected<std::shared_ptr<const cv3d::recon::kfplanes::PlaneDetectionResult>, cv3d::esn::Error> (const std::experimental::expected<std::shared_ptr<cv3d::recon::sng::KeyframeEngineResultSync>, cv3d::esn::Error> &)]", qword_255794938);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794938, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA80);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBA88);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBA88))
    {
      sub_224573040((uint64_t)qword_255794938, (uint64_t)&xmmword_255794950);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794950, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBA88);
    }
  }
}

void sub_223654DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA88);
  _Unwind_Resume(a1);
}

void sub_223654DC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA80);
  _Unwind_Resume(a1);
}

void sub_223654DDC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA90))
  {
    sub_223654E98();
    if (byte_2557949AF < 0)
    {
      sub_223197FA4(&xmmword_255794968, (void *)xmmword_255794998, *((unint64_t *)&xmmword_255794998 + 1));
    }
    else
    {
      xmmword_255794968 = xmmword_255794998;
      unk_255794978 = unk_2557949A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794968, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA90);
  }
}

void sub_223654E80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA90);
  _Unwind_Resume(a1);
}

void sub_223654E98()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBA98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBA98))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::recon::sng::KeyframePlaneSaveSnapshotRequest &)]", qword_255794980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794980, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBA98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBAA0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBAA0))
    {
      sub_224573040((uint64_t)qword_255794980, (uint64_t)&xmmword_255794998);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794998, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBAA0);
    }
  }
}

void sub_223654F70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAA0);
  _Unwind_Resume(a1);
}

void sub_223654F88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBA98);
  _Unwind_Resume(a1);
}

void sub_223654FA0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAA8))
  {
    sub_22365505C();
    if (byte_2557949F7 < 0)
    {
      sub_223197FA4(&xmmword_2557949B0, (void *)xmmword_2557949E0, *((unint64_t *)&xmmword_2557949E0 + 1));
    }
    else
    {
      xmmword_2557949B0 = xmmword_2557949E0;
      unk_2557949C0 = unk_2557949F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557949B0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAA8);
  }
}

void sub_223655044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAA8);
  _Unwind_Resume(a1);
}

void sub_22365505C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAB0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_future<BOOL> (const cv3d::recon::sng::KeyframePlaneSaveSnapshotToRequest &)]", qword_2557949C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557949C8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAB0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBAB8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBAB8))
    {
      sub_224573040((uint64_t)qword_2557949C8, (uint64_t)&xmmword_2557949E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557949E0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBAB8);
    }
  }
}

void sub_223655134(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAB8);
  _Unwind_Resume(a1);
}

void sub_22365514C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAB0);
  _Unwind_Resume(a1);
}

void sub_223655164()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAC0))
  {
    sub_223655220();
    if (byte_255794A3F < 0)
    {
      sub_223197FA4(&xmmword_2557949F8, (void *)xmmword_255794A28, *((unint64_t *)&xmmword_255794A28 + 1));
    }
    else
    {
      xmmword_2557949F8 = xmmword_255794A28;
      unk_255794A08 = unk_255794A38;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557949F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAC0);
  }
}

void sub_223655208(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAC0);
  _Unwind_Resume(a1);
}

void sub_223655220()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAC8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::KeyframePlaneResetRequest &)]", qword_255794A10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794A10, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAC8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBAD0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBAD0))
    {
      sub_224573040((uint64_t)qword_255794A10, (uint64_t)&xmmword_255794A28);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794A28, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBAD0);
    }
  }
}

void sub_2236552F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAD0);
  _Unwind_Resume(a1);
}

void sub_223655310(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAC8);
  _Unwind_Resume(a1);
}

void sub_223655328()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAE0))
  {
    sub_2236554A0();
    v1 = byte_255794A87;
    if (byte_255794A87 >= 0)
      v2 = byte_255794A87;
    else
      v2 = *((_QWORD *)&xmmword_255794A70 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_255794A60 = v2 + 6;
      unk_255794A68 = v6 | 0x8000000000000000;
      qword_255794A58 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_255794A60 = 0;
      unk_255794A68 = 0;
      qword_255794A58 = 0x2074736E6F63;
      byte_255794A6F = v2 + 6;
      v4 = (char *)&qword_255794A58 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794A58, &dword_22314D000);
        __cxa_guard_release(&qword_2540CBAE0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_255794A70;
    else
      v8 = (__int128 *)xmmword_255794A70;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_223655488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAE0);
  _Unwind_Resume(a1);
}

void sub_2236554A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAE8))
  {
    sub_22365555C();
    if (byte_255794A9F < 0)
    {
      sub_223197FA4(&xmmword_255794A70, (void *)qword_255794A88, unk_255794A90);
    }
    else
    {
      xmmword_255794A70 = *(_OWORD *)&qword_255794A88;
      unk_255794A80 = unk_255794A98;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794A70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAE8);
  }
}

void sub_223655544(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAE8);
  _Unwind_Resume(a1);
}

void sub_22365555C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBAF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAF0))
  {
    sub_22365580C(__p);
    sub_223655634((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_255794A88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAF0);
  }
}

void sub_2236555F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBAF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBAF0);
  _Unwind_Resume(a1);
}

void sub_223655634(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CBAF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBAF8))
  {
    sub_2236559E8();
    if (byte_255794AE7 < 0)
    {
      sub_223197FA4(&xmmword_255794AA0, (void *)xmmword_255794AD0, *((unint64_t *)&xmmword_255794AD0 + 1));
    }
    else
    {
      xmmword_255794AA0 = xmmword_255794AD0;
      unk_255794AB0 = unk_255794AE0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794AA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBAF8);
  }
  if (byte_255794AB7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794AA0, *((unint64_t *)&xmmword_255794AA0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794AA0;
    v11 = unk_255794AB0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_255794A88, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_2236557C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBAF8);
  _Unwind_Resume(a1);
}

void sub_2236557E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22365580C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBB10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB10))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::recon::sng::SessionPostprocessingResult>]", qword_255794AE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794AE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB10);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CBB18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB18))
  {
    v5 = sub_2231A38CC(qword_255794AE8, "<", 0);
    sub_2231A37C8(qword_255794AE8, 0, v5, qword_255794B00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794B00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CBB20);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB20))
  {
    sub_224573040((uint64_t)qword_255794B00, (uint64_t)&xmmword_255794B18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794B18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB20);
  }
  if (byte_255794B2F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_255794B18, *((unint64_t *)&xmmword_255794B18 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_255794B18;
    __dst[2] = unk_255794B28;
  }
}

void sub_2236559A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB20);
  _Unwind_Resume(a1);
}

void sub_2236559B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB18);
  _Unwind_Resume(a1);
}

void sub_2236559D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB10);
  _Unwind_Resume(a1);
}

void sub_2236559E8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBB00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB00))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::SessionPostprocessingResult]", qword_255794AB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794AB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBB08);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBB08))
    {
      sub_224573040((uint64_t)qword_255794AB8, (uint64_t)&xmmword_255794AD0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794AD0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBB08);
    }
  }
}

void sub_223655AC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB08);
  _Unwind_Resume(a1);
}

void sub_223655AD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB00);
  _Unwind_Resume(a1);
}

void sub_223655AF0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBB28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB28))
  {
    sub_223655BAC();
    if (byte_255794B77 < 0)
    {
      sub_223197FA4(&xmmword_255794B30, (void *)xmmword_255794B60, *((unint64_t *)&xmmword_255794B60 + 1));
    }
    else
    {
      xmmword_255794B30 = xmmword_255794B60;
      unk_255794B40 = unk_255794B70;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794B30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB28);
  }
}

void sub_223655B94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB28);
  _Unwind_Resume(a1);
}

void sub_223655BAC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBB30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB30))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::sng::SessionPostprocessingResult (const cv3d::recon::sng::ProcessFrameBundleResult &)]", qword_255794B48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794B48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBB38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBB38))
    {
      sub_224573040((uint64_t)qword_255794B48, (uint64_t)&xmmword_255794B60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794B60, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBB38);
    }
  }
}

void sub_223655C84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB38);
  _Unwind_Resume(a1);
}

void sub_223655C9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB30);
  _Unwind_Resume(a1);
}

void sub_223655CB4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBB40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB40))
  {
    sub_223655D70();
    if (byte_255794BBF < 0)
    {
      sub_223197FA4(&xmmword_255794B78, (void *)xmmword_255794BA8, *((unint64_t *)&xmmword_255794BA8 + 1));
    }
    else
    {
      xmmword_255794B78 = xmmword_255794BA8;
      unk_255794B88 = unk_255794BB8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794B78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB40);
  }
}

void sub_223655D58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB40);
  _Unwind_Resume(a1);
}

void sub_223655D70()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CBB48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBB48))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::recon::sng::FailureSnapshotDoneRequest &)]", qword_255794B90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255794B90, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBB48);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CBB50);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CBB50))
    {
      sub_224573040((uint64_t)qword_255794B90, (uint64_t)&xmmword_255794BA8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255794BA8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBB50);
    }
  }
}

void sub_223655E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB50);
  _Unwind_Resume(a1);
}

void sub_223655E60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CBB48);
  _Unwind_Resume(a1);
}

uint64_t sub_223655E78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::promise<void> *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::runtime_error v15;
  std::__assoc_sub_state *state;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::promise<void> v19;

  v5 = std::promise<void>::promise(&v19);
  std::promise<void>::get_future(v5);
  v17 = 0;
  v18 = 0;
  v6 = (std::__shared_weak_count *)a2[1];
  if (!v6 || (v7 = std::__shared_weak_count::lock(v6), (v18 = v7) == 0) || (v8 = v7, v9 = *a2, (v17 = v9) == 0))
  {
    std::runtime_error::runtime_error(&v15, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v15.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v14 = std::runtime_error::runtime_error(exception, &v15);
    v14->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v14, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  state = v19.__state_;
  v19.__state_ = 0;
  (*(void (**)(uint64_t, uint64_t, std::__assoc_sub_state **))(*(_QWORD *)v9 + 56))(v9, a3, &state);
  MEMORY[0x227684B68](&state);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return MEMORY[0x227684B68](&v19);
}

uint64_t sub_223656028(_QWORD **a1)
{
  (*(void (**)(_QWORD *))(*a1[9] + 64))(a1[9]);
  (*(void (**)(_QWORD *))(*a1[30] + 64))(a1[30]);
  (*(void (**)(_QWORD *))(*a1[51] + 64))(a1[51]);
  (*(void (**)(_QWORD *))(*a1[72] + 64))(a1[72]);
  (*(void (**)(_QWORD *))(*a1[93] + 64))(a1[93]);
  (*(void (**)(_QWORD *))(*a1[114] + 64))(a1[114]);
  (*(void (**)(_QWORD *))(*a1[135] + 64))(a1[135]);
  (*(void (**)(_QWORD *))(*a1[156] + 64))(a1[156]);
  (*(void (**)(_QWORD *))(*a1[177] + 64))(a1[177]);
  (*(void (**)(_QWORD *))(*a1[198] + 64))(a1[198]);
  (*(void (**)(_QWORD *))(*a1[219] + 64))(a1[219]);
  (*(void (**)(_QWORD *))(*a1[240] + 64))(a1[240]);
  (*(void (**)(_QWORD *))(*a1[261] + 64))(a1[261]);
  (*(void (**)(_QWORD *))(*a1[282] + 64))(a1[282]);
  (*(void (**)(_QWORD *))(*a1[303] + 64))(a1[303]);
  (*(void (**)(_QWORD *))(*a1[324] + 64))(a1[324]);
  (*(void (**)(_QWORD *))(*a1[345] + 64))(a1[345]);
  (*(void (**)(_QWORD *))(*a1[366] + 64))(a1[366]);
  (*(void (**)(_QWORD *))(*a1[387] + 64))(a1[387]);
  return (*(uint64_t (**)(_QWORD *))(*a1[408] + 64))(a1[408]);
}

uint64_t sub_223656180(uint64_t result)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;

  if (result)
  {
    v1 = result;
    sub_223227930((uint64_t *)&v27);
    if (*(_QWORD *)(v1 + 40))
    {
      v7 = *(std::__shared_weak_count **)(v1 + 48);
      *(_QWORD *)(v1 + 40) = 0;
      *(_QWORD *)(v1 + 48) = 0;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    if (*(_QWORD *)(v1 + 16))
    {
      v10 = *(std::__shared_weak_count **)(v1 + 24);
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)(v1 + 24) = 0;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    sub_22322797C(&v27, v2, v3, v4, v5, v6);
    std::mutex::~mutex((std::mutex *)(v1 + 1304));
    v13 = *(_QWORD *)(v1 + 1288);
    *(_QWORD *)(v1 + 1288) = 0;
    if (v13)
      (*(void (**)(void))(v1 + 1296))();
    sub_223223FC0(v1 + 80);
    v14 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(std::__shared_weak_count **)(v1 + 48);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *(std::__shared_weak_count **)(v1 + 24);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(std::__shared_weak_count **)(v1 + 8);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223656398@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  __n128 v64;
  unint64_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  int64_t v93;
  unint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  void *v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  void *v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  __n128 *v159;
  __n128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __n128 *v164;
  __n128 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  __n128 v175;
  int v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t *v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __n128 v191;
  __int128 v192;
  uint64_t i;
  char **v194;
  void *v195[6];
  _OWORD v196[2];
  __int128 v197;
  __int128 v198;
  _BYTE v199[128];
  __int16 v200;
  char v201;
  _BYTE v202[36];
  int v203;
  __int128 v204;
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;
  char v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[32];
  int v214;
  __int128 v215;
  _BYTE v216[32];
  uint64_t v217;
  void *v218[3];
  void *v219;
  _BYTE v220[72];
  _BYTE v221[24];
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  char v225;
  __int16 v226;
  char v227;
  char v228;
  char v229;
  __n128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  int v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t (**v243)();
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t (**v246)();
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t (**v249)();
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t v252;
  unsigned __int8 v253;
  __int128 v254;
  __int128 v255;
  char v256;
  char v257;
  char v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __n128 v263;
  void *v264;
  uint64_t v265;

  v2 = result;
  v3 = a2;
  v265 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 440) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 472) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_BYTE *)(a2 + 496) = 0;
  *(_BYTE *)(a2 + 500) = 0;
  v183 = result;
  if (*(_BYTE *)(result + 744))
  {
    LOBYTE(v204) = 0;
    v206[0] = 0;
    v206[8] = 0;
    v208 = 0;
    LOBYTE(v209) = 0;
    v213[0] = 0;
    v213[8] = 0;
    LOBYTE(v218[0]) = 0;
    LOBYTE(v218[1]) = 0;
    v221[16] = 0;
    LOBYTE(v222) = 0;
    BYTE8(v223) = 0;
    memset(v202, 0, 34);
    sub_224001F2C((uint64_t *)(result + 16), (char **)v195);
    v4 = *(_QWORD *)&v202[8];
    if (*(_QWORD *)&v202[8])
    {
      v5 = *(_QWORD *)&v202[16];
      v6 = *(void **)&v202[8];
      if (*(_QWORD *)&v202[16] != *(_QWORD *)&v202[8])
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 96);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 120;
        }
        while (v5 != v4);
        v6 = *(void **)&v202[8];
      }
      *(_QWORD *)&v202[16] = v4;
      operator delete(v6);
    }
    *(_OWORD *)&v202[8] = *(_OWORD *)v195;
    *(void **)&v202[24] = v195[2];
    v10 = v183;
    if (*(_BYTE *)(v183 + 224))
    {
      sub_224001F2C((uint64_t *)(v183 + 120), (char **)v195);
      v11 = 1;
      LOBYTE(v195[3]) = 1;
      if (v206[0])
      {
        v12 = v204;
        if ((_QWORD)v204)
        {
          v13 = *((_QWORD *)&v204 + 1);
          v14 = (void *)v204;
          if (*((_QWORD *)&v204 + 1) != (_QWORD)v204)
          {
            do
            {
              v15 = *(std::__shared_weak_count **)(v13 - 96);
              if (v15)
              {
                v16 = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v13 -= 120;
            }
            while (v13 != v12);
            v14 = (void *)v204;
          }
          *((_QWORD *)&v204 + 1) = v12;
          operator delete(v14);
          v11 = (char)v195[3];
        }
        v10 = v183;
        v204 = *(_OWORD *)v195;
        *(void **)&v205 = v195[2];
        BYTE8(v205) = v11;
        if (*(_BYTE *)(v183 + 344))
        {
LABEL_43:
          sub_224001F2C((uint64_t *)(v10 + 240), (char **)v195);
          v24 = 1;
          LOBYTE(v195[3]) = 1;
          if (v208)
          {
            v25 = *(_QWORD *)&v206[8];
            if (*(_QWORD *)&v206[8])
            {
              v26 = *(_QWORD *)&v206[16];
              v27 = *(void **)&v206[8];
              if (*(_QWORD *)&v206[16] != *(_QWORD *)&v206[8])
              {
                do
                {
                  v28 = *(std::__shared_weak_count **)(v26 - 96);
                  if (v28)
                  {
                    v29 = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(v29);
                    while (__stlxr(v30 - 1, v29));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  v26 -= 120;
                }
                while (v26 != v25);
                v27 = *(void **)&v206[8];
              }
              *(_QWORD *)&v206[16] = v25;
              operator delete(v27);
              v24 = (char)v195[3];
            }
            v10 = v183;
            *(_OWORD *)&v206[8] = *(_OWORD *)v195;
            *(void **)&v206[24] = v195[2];
            LOBYTE(v207) = v24;
            if (!*(_BYTE *)(v183 + 504))
            {
LABEL_58:
              v31 = v10;
              if (*(_BYTE *)(v10 + 624))
                goto LABEL_59;
              goto LABEL_90;
            }
          }
          else
          {
            *(_OWORD *)&v206[8] = *(_OWORD *)v195;
            *(void **)&v206[24] = v195[2];
            LOBYTE(v207) = 1;
            v208 = 1;
            if (!*(_BYTE *)(v10 + 504))
              goto LABEL_58;
          }
LABEL_27:
          sub_2240023D4((uint64_t *)(v10 + 352), (char **)v195);
          if (LOBYTE(v218[0]))
          {
            if (*(_QWORD *)&v213[8])
            {
              *(_QWORD *)&v213[16] = *(_QWORD *)&v213[8];
              operator delete(*(void **)&v213[8]);
            }
            *(_OWORD *)&v213[8] = *(_OWORD *)v195;
            *(void **)&v213[24] = v195[2];
            memset(v195, 0, 24);
            v214 = (int)v195[3];
            v18 = v215;
            if ((_QWORD)v215)
            {
              v19 = *((_QWORD *)&v215 + 1);
              v20 = (void *)v215;
              if (*((_QWORD *)&v215 + 1) != (_QWORD)v215)
              {
                do
                {
                  v21 = *(std::__shared_weak_count **)(v19 - 96);
                  if (v21)
                  {
                    v22 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v23 = __ldaxr(v22);
                    while (__stlxr(v23 - 1, v22));
                    if (!v23)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                  }
                  v19 -= 120;
                }
                while (v19 != v18);
                v20 = (void *)v215;
              }
              *((_QWORD *)&v215 + 1) = v18;
              operator delete(v20);
            }
            v215 = *(_OWORD *)&v195[4];
            *(_QWORD *)v216 = *(_QWORD *)&v196[0];
            v195[5] = 0;
            *(_QWORD *)&v196[0] = 0;
            v195[4] = 0;
            if (*(_QWORD *)&v216[8])
            {
              *(_QWORD *)&v216[16] = *(_QWORD *)&v216[8];
              operator delete(*(void **)&v216[8]);
              v33 = (char *)v195[4];
            }
            else
            {
              v33 = 0;
            }
            *(_OWORD *)&v216[8] = *(_OWORD *)((char *)v196 + 8);
            v34 = *((_QWORD *)&v196[1] + 1);
            memset((char *)v196 + 8, 0, 24);
            *(_QWORD *)&v216[24] = v34;
            v217 = v197;
            if (v33)
            {
              v35 = (char *)v195[5];
              v36 = v33;
              if (v195[5] != v33)
              {
                do
                {
                  v37 = (std::__shared_weak_count *)*((_QWORD *)v35 - 12);
                  if (v37)
                  {
                    v38 = (unint64_t *)&v37->__shared_owners_;
                    do
                      v39 = __ldaxr(v38);
                    while (__stlxr(v39 - 1, v38));
                    if (!v39)
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                  }
                  v35 -= 120;
                }
                while (v35 != v33);
                v36 = (char *)v195[4];
              }
              v195[5] = v33;
              operator delete(v36);
            }
          }
          else
          {
            *(void **)&v213[24] = v195[2];
            v214 = (int)v195[3];
            *(_QWORD *)v216 = *(_QWORD *)&v196[0];
            *(_QWORD *)&v216[24] = *((_QWORD *)&v196[1] + 1);
            *(_OWORD *)&v213[8] = *(_OWORD *)v195;
            memset(v195, 0, 24);
            v215 = *(_OWORD *)&v195[4];
            v195[4] = 0;
            v195[5] = 0;
            *(_OWORD *)&v216[8] = *(_OWORD *)((char *)v196 + 8);
            memset(v196, 0, sizeof(v196));
            v217 = v197;
            LOBYTE(v218[0]) = 1;
          }
          if (v195[0])
          {
            v195[1] = v195[0];
            operator delete(v195[0]);
          }
          v31 = v183;
          if (*(_BYTE *)(v183 + 624))
          {
LABEL_59:
            sub_224006A38(v31 + 512, (uint64_t)v195);
            if (v221[16])
            {
              if (v218[1])
              {
                v218[2] = v218[1];
                operator delete(v218[1]);
              }
              *(_OWORD *)&v218[1] = *(_OWORD *)v195;
              v219 = v195[2];
              memset(v195, 0, 24);
              v32 = *(void **)v220;
              if (*(_QWORD *)v220)
              {
                *(_QWORD *)&v220[8] = *(_QWORD *)v220;
                operator delete(*(void **)v220);
                v32 = v195[0];
              }
              *(_OWORD *)v220 = *(_OWORD *)&v195[3];
              *(void **)&v220[16] = v195[5];
              memset(&v195[3], 0, 24);
              *(_OWORD *)&v220[24] = v196[0];
              *(_OWORD *)&v220[40] = v196[1];
              *(_OWORD *)&v220[56] = v197;
              *(_OWORD *)v221 = v198;
              if (v32)
              {
                v195[1] = v32;
                operator delete(v32);
              }
              if (!*(_BYTE *)(v183 + 736))
              {
LABEL_67:
                v3 = a2;
                if (*(_BYTE *)(a2 + 440))
                {
LABEL_68:
                  sub_2236232BC(v3, (uint64_t)v202);
LABEL_107:
                  result = sub_2232954B0((uint64_t)v202);
                  v2 = v183;
                  goto LABEL_108;
                }
LABEL_106:
                sub_22329ACE4(v3, (uint64_t)v202);
                *(_BYTE *)(v3 + 440) = 1;
                goto LABEL_107;
              }
            }
            else
            {
              *(_OWORD *)&v218[1] = *(_OWORD *)v195;
              memset(v195, 0, sizeof(v195));
              *(_OWORD *)v220 = *(_OWORD *)&v195[3];
              v219 = v195[2];
              *(void **)&v220[16] = v195[5];
              *(_OWORD *)&v220[56] = v197;
              *(_OWORD *)v221 = v198;
              *(_OWORD *)&v220[24] = v196[0];
              *(_OWORD *)&v220[40] = v196[1];
              v221[16] = 1;
              if (!*(_BYTE *)(v183 + 736))
                goto LABEL_67;
            }
LABEL_91:
            sub_224001F2C((uint64_t *)(v183 + 640), (char **)v195);
            if (BYTE8(v223))
            {
              v40 = v222;
              if ((_QWORD)v222)
              {
                v41 = *((_QWORD *)&v222 + 1);
                v42 = (void *)v222;
                if (*((_QWORD *)&v222 + 1) != (_QWORD)v222)
                {
                  do
                  {
                    v43 = *(std::__shared_weak_count **)(v41 - 96);
                    if (v43)
                    {
                      v44 = (unint64_t *)&v43->__shared_owners_;
                      do
                        v45 = __ldaxr(v44);
                      while (__stlxr(v45 - 1, v44));
                      if (!v45)
                      {
                        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                        std::__shared_weak_count::__release_weak(v43);
                      }
                    }
                    v41 -= 120;
                  }
                  while (v41 != v40);
                  v42 = (void *)v222;
                }
                *((_QWORD *)&v222 + 1) = v40;
                operator delete(v42);
              }
              v222 = *(_OWORD *)v195;
              *(void **)&v223 = v195[2];
              v3 = a2;
              if (*(_BYTE *)(a2 + 440))
                goto LABEL_68;
            }
            else
            {
              v222 = *(_OWORD *)v195;
              *(void **)&v223 = v195[2];
              BYTE8(v223) = 1;
              v3 = a2;
              if (*(_BYTE *)(a2 + 440))
                goto LABEL_68;
            }
            goto LABEL_106;
          }
LABEL_90:
          if (!*(_BYTE *)(v31 + 736))
            goto LABEL_67;
          goto LABEL_91;
        }
LABEL_26:
        if (!*(_BYTE *)(v10 + 504))
          goto LABEL_58;
        goto LABEL_27;
      }
      v204 = *(_OWORD *)v195;
      *(void **)&v205 = v195[2];
      BYTE8(v205) = 1;
      v206[0] = 1;
    }
    if (*(_BYTE *)(v183 + 344))
      goto LABEL_43;
    goto LABEL_26;
  }
LABEL_108:
  if (!*(_BYTE *)(v2 + 816))
    goto LABEL_213;
  *(_QWORD *)v202 = 0;
  v202[8] = 0;
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v253 = 0;
  v257 = 0;
  v258 = 0;
  v259 = 0;
  v260 = 0;
  v262 = 0;
  v261 = 0;
  v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  v238 = 0u;
  v239 = 0;
  v241 = 0u;
  v242 = 0u;
  v240 = 0u;
  LOBYTE(v243) = 0;
  v254 = 0u;
  v255 = 0u;
  v256 = 0;
  v46 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v2 + 760) - *(_QWORD *)(v2 + 752)) >> 6);
  v264 = 0;
  v263 = 0uLL;
  sub_2236581AC((uint64_t)&v263, v46);
  v47 = *(_QWORD *)(v2 + 752);
  v48 = *(_QWORD *)(v2 + 760);
  if (v47 == v48)
  {
    v64 = v263;
    v65 = (unint64_t)v264;
    goto LABEL_129;
  }
  do
  {
    sub_223C9D0C0(v47, (uint64_t)v195);
    v58 = v263.n128_u64[1];
    if (v263.n128_u64[1] < (unint64_t)v264)
    {
      *(_OWORD *)v263.n128_u64[1] = *(_OWORD *)v195;
      *(_OWORD *)(v58 + 16) = *(_OWORD *)&v195[2];
      *(_OWORD *)&v195[2] = 0uLL;
      v49 = v197;
      v51 = *(_OWORD *)&v195[4];
      v50 = v196[0];
      *(_OWORD *)(v58 + 64) = v196[1];
      *(_OWORD *)(v58 + 80) = v49;
      *(_OWORD *)(v58 + 32) = v51;
      *(_OWORD *)(v58 + 48) = v50;
      *(_OWORD *)(v58 + 96) = v198;
      v53 = *(_OWORD *)&v199[32];
      v52 = *(_OWORD *)&v199[48];
      v54 = *(_OWORD *)&v199[16];
      *(_OWORD *)(v58 + 112) = *(_OWORD *)v199;
      *(_OWORD *)(v58 + 128) = v54;
      *(_OWORD *)(v58 + 144) = v53;
      *(_OWORD *)(v58 + 160) = v52;
      v56 = *(_OWORD *)&v199[96];
      v55 = *(_OWORD *)&v199[112];
      v57 = *(_OWORD *)&v199[80];
      *(_OWORD *)(v58 + 176) = *(_OWORD *)&v199[64];
      *(_OWORD *)(v58 + 192) = v57;
      *(_OWORD *)(v58 + 208) = v56;
      *(_OWORD *)(v58 + 224) = v55;
      *(_WORD *)(v58 + 240) = v200;
      v263.n128_u64[1] = v58 + 248;
    }
    else
    {
      v59 = sub_22356F1F8((void **)&v263, (uint64_t)v195);
      v60 = (std::__shared_weak_count *)v195[3];
      v263.n128_u64[1] = (unint64_t)v59;
      if (v195[3])
      {
        v61 = (unint64_t *)((char *)v195[3] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
    v47 += 1472;
  }
  while (v47 != v48);
  v63 = (char *)v230.n128_u64[0];
  v64 = v263;
  v65 = (unint64_t)v264;
  if (!v230.n128_u64[0])
  {
LABEL_129:
    v230 = v64;
    *(_QWORD *)&v231 = v65;
    v70 = v183;
    v71 = *(unsigned __int8 *)(v183 + 777);
    if (!*(_BYTE *)(v183 + 777))
      goto LABEL_150;
LABEL_130:
    v65 = ((unint64_t)*(unsigned __int8 *)(v70 + 776) << 40) | 0x200000000000000;
    v72 = v253;
    if (v253 != 1)
      goto LABEL_151;
LABEL_131:
    if (v72)
    {
      v73 = v245;
      v245 = 0;
      v244 = 0;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v248;
      v248 = 0;
      v247 = 0;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = v251;
      v251 = 0;
      v250 = 0;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v252 = v65;
    }
    goto LABEL_169;
  }
  v66 = (char *)v230.n128_u64[1];
  v191 = v263;
  if (v230.n128_u64[1] != v230.n128_u64[0])
  {
    do
    {
      v67 = (std::__shared_weak_count *)*((_QWORD *)v66 - 28);
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v67->__on_zero_shared)(v67, v64);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v66 -= 248;
    }
    while (v66 != v63);
    v63 = (char *)v230.n128_u64[0];
  }
  operator delete(v63);
  v230 = v191;
  *(_QWORD *)&v231 = v65;
  v70 = v183;
  v71 = *(unsigned __int8 *)(v183 + 777);
  if (*(_BYTE *)(v183 + 777))
    goto LABEL_130;
LABEL_150:
  v72 = v253;
  if (v253 == v71)
    goto LABEL_131;
LABEL_151:
  if (v72)
  {
    v249 = &off_24EC715B8;
    v82 = v251;
    if (v251)
    {
      v83 = (unint64_t *)&v251->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v246 = &off_24EC715B8;
    v85 = v248;
    if (v248)
    {
      v86 = (unint64_t *)&v248->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v243 = &off_24EC715B8;
    v88 = v245;
    if (v245)
    {
      v89 = (unint64_t *)&v245->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v253 = 0;
  }
  else
  {
    v243 = &off_24EC715B8;
    v245 = 0;
    v244 = 0;
    v246 = &off_24EC715B8;
    v248 = 0;
    v247 = 0;
    v249 = &off_24EC715B8;
    v251 = 0;
    v250 = 0;
    v252 = v65;
    v253 = 1;
  }
LABEL_169:
  v91 = *(uint64_t **)(v183 + 784);
  v92 = *(uint64_t **)(v183 + 792);
  memset(v195, 0, 24);
  v93 = (char *)v92 - (char *)v91;
  if (v92 != v91)
  {
    v94 = 0xCCCCCCCCCCCCCCCDLL * (v93 >> 5);
    if (v94 > 0x199999999999999)
      sub_22352449C();
    v95 = operator new(v93);
    v195[0] = v95;
    v195[1] = v95;
    v195[2] = &v95[20 * v94];
    v182 = v92;
    while (1)
    {
      v105 = *v91;
      v104 = v91[1];
      v106 = *((unsigned __int8 *)v91 + 152);
      if (*((_BYTE *)v91 + 152))
      {
        v94 = v91[2];
        v103 = *(_OWORD *)(v91 + 17);
        v102 = *(_OWORD *)(v91 + 15);
        v101 = *(_OWORD *)(v91 + 13);
        v100 = *(_OWORD *)(v91 + 11);
        v99 = *(_OWORD *)(v91 + 9);
        v98 = *(_OWORD *)(v91 + 7);
        v97 = *(_OWORD *)(v91 + 5);
        v96 = *(_OWORD *)(v91 + 3);
        v107 = v195[2];
        if (v95 < v195[2])
        {
          *v95 = v105;
          v95[1] = v104;
          v95[2] = v94;
          *(_OWORD *)(v95 + 3) = v96;
          *(_OWORD *)(v95 + 5) = v97;
          *(_OWORD *)(v95 + 7) = v98;
          *(_OWORD *)(v95 + 9) = v99;
          *(_OWORD *)(v95 + 11) = v100;
          *(_OWORD *)(v95 + 13) = v101;
          *(_OWORD *)(v95 + 15) = v102;
          *(_OWORD *)(v95 + 17) = v103;
          *((_BYTE *)v95 + 152) = 1;
          v95 += 20;
          v195[1] = v95;
          v91 += 20;
          if (v91 == v92)
            goto LABEL_201;
        }
        else
        {
LABEL_179:
          v108 = v195[0];
          v109 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v95 - (char *)v195[0]) >> 5);
          v110 = v109 + 1;
          if (v109 + 1 > 0x199999999999999)
            sub_22352449C();
          v111 = 0xCCCCCCCCCCCCCCCDLL * ((int64_t)((uint64_t)v107 - (unint64_t)v195[0]) >> 5);
          if (2 * v111 > v110)
            v110 = 2 * v111;
          if (v111 >= 0xCCCCCCCCCCCCCCLL)
            v112 = 0x199999999999999;
          else
            v112 = v110;
          v190 = v97;
          v192 = v96;
          v188 = v99;
          v189 = v98;
          v186 = v101;
          v187 = v100;
          v184 = v103;
          v185 = v102;
          if (v112)
          {
            if (v112 > 0x199999999999999)
              sub_223174E94();
            v113 = (char *)operator new(160 * v112);
            v97 = v190;
            v96 = v192;
            v99 = v188;
            v98 = v189;
            v101 = v186;
            v100 = v187;
            v103 = v184;
            v102 = v185;
          }
          else
          {
            v113 = 0;
          }
          v114 = &v113[160 * v109];
          *(_QWORD *)v114 = v105;
          *((_QWORD *)v114 + 1) = v104;
          v114[16] = 0;
          v114[152] = 0;
          if (v106)
          {
            *((_QWORD *)v114 + 2) = v94;
            v115 = &v113[160 * v109];
            *(_OWORD *)(v115 + 72) = v99;
            *(_OWORD *)(v115 + 56) = v98;
            *(_OWORD *)(v115 + 40) = v97;
            *(_OWORD *)(v115 + 24) = v96;
            *(_OWORD *)(v115 + 88) = v100;
            *(_OWORD *)(v115 + 104) = v101;
            *(_OWORD *)(v115 + 120) = v102;
            *(_OWORD *)(v115 + 136) = v103;
            v114[152] = 1;
          }
          v116 = v114 + 160;
          if (v95 == v108)
          {
            v195[0] = &v113[160 * v109];
            v195[1] = v114 + 160;
            v195[2] = &v113[160 * v112];
          }
          else
          {
            v117 = 0;
            do
            {
              v118 = &v114[v117 * 8];
              v119 = &v95[v117];
              *((_OWORD *)v118 - 10) = *(_OWORD *)&v95[v117 - 20];
              *(v118 - 144) = 0;
              *(v118 - 8) = 0;
              if (LOBYTE(v95[v117 - 1]))
              {
                *((_QWORD *)v118 - 18) = *(v119 - 18);
                v120 = *(_OWORD *)(v119 - 17);
                v121 = *(_OWORD *)(v119 - 15);
                v122 = *(_OWORD *)(v119 - 13);
                *(_OWORD *)(v118 - 88) = *(_OWORD *)(v119 - 11);
                *(_OWORD *)(v118 - 104) = v122;
                *(_OWORD *)(v118 - 120) = v121;
                *(_OWORD *)(v118 - 136) = v120;
                v123 = *(_OWORD *)(v119 - 9);
                v124 = *(_OWORD *)(v119 - 7);
                v125 = *(_OWORD *)(v119 - 5);
                *(_OWORD *)(v118 - 24) = *(_OWORD *)(v119 - 3);
                *(_OWORD *)(v118 - 40) = v125;
                *(_OWORD *)(v118 - 56) = v124;
                *(_OWORD *)(v118 - 72) = v123;
                *(v118 - 8) = 1;
              }
              v117 -= 20;
            }
            while (&v95[v117] != v108);
            v95 = v195[0];
            v195[0] = &v114[v117 * 8];
            v195[1] = v114 + 160;
            v195[2] = &v113[160 * v112];
            if (!v95)
              goto LABEL_200;
          }
          operator delete(v95);
          v103 = v184;
          v102 = v185;
          v101 = v186;
          v100 = v187;
          v99 = v188;
          v98 = v189;
          v97 = v190;
          v96 = v192;
LABEL_200:
          v95 = v116;
          v92 = v182;
          v195[1] = v116;
          v91 += 20;
          if (v91 == v182)
          {
LABEL_201:
            v126 = v195[0];
            v127 = v195[2];
            v128 = (void *)v254;
            if ((_QWORD)v254)
              goto LABEL_202;
            goto LABEL_203;
          }
        }
      }
      else
      {
        v94 &= 0xFFFFFFFFFFFFFF00;
        v107 = v195[2];
        if (v95 >= v195[2])
          goto LABEL_179;
        *v95 = v105;
        v95[1] = v104;
        *((_BYTE *)v95 + 16) = 0;
        *((_BYTE *)v95 + 152) = 0;
        v95 += 20;
        v195[1] = v95;
        v91 += 20;
        if (v91 == v92)
          goto LABEL_201;
      }
    }
  }
  v127 = 0;
  v95 = 0;
  v126 = 0;
  v128 = (void *)v254;
  if ((_QWORD)v254)
LABEL_202:
    operator delete(v128);
LABEL_203:
  *(_QWORD *)&v254 = v126;
  *((_QWORD *)&v254 + 1) = v95;
  *(_QWORD *)&v255 = v127;
  *((_QWORD *)&v255 + 1) = *(_QWORD *)(v183 + 808);
  v129 = operator new(0xA08uLL);
  v129[1] = 0;
  v129[2] = 0;
  *v129 = &off_24EC44BC0;
  v130 = sub_2235146D4((uint64_t)(v129 + 3), (uint64_t)v202);
  v3 = a2;
  v131 = *(unsigned __int8 *)(a2 + 464);
  *(_QWORD *)(a2 + 448) = v130;
  if (v131)
  {
    v132 = *(std::__shared_weak_count **)(a2 + 456);
    *(_QWORD *)(a2 + 456) = v129;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 456) = v129;
    *(_BYTE *)(a2 + 464) = 1;
  }
  result = sub_2235141E0((uint64_t)v202);
  v2 = v183;
LABEL_213:
  if (!*(_BYTE *)(v2 + 896))
    goto LABEL_278;
  v197 = 0u;
  v198 = 0u;
  memset(v196, 0, sizeof(v196));
  memset(v195, 0, sizeof(v195));
  *(_DWORD *)v199 = 1065353216;
  v201 = 0;
  memset(&v199[8], 0, 105);
  v135 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(v2 + 832) - *(_QWORD *)(v2 + 824)) >> 3);
  v264 = 0;
  v263 = 0uLL;
  sub_22365835C((char **)&v263, v135);
  v136 = v2;
  v137 = *(_QWORD *)(v2 + 824);
  for (i = *(_QWORD *)(v2 + 832); v137 != i; v137 += 472)
  {
    sub_223ED4594(v137, (uint64_t)v202);
    v138 = v263.n128_u64[1];
    if (v263.n128_u64[1] >= (unint64_t)v264)
    {
      v151 = sub_22365849C(&v263, (uint64_t)v202);
    }
    else
    {
      *(_OWORD *)v263.n128_u64[1] = *(_OWORD *)v202;
      v139 = *(_QWORD *)&v202[16];
      *(_DWORD *)(v138 + 24) = *(_DWORD *)&v202[24];
      *(_QWORD *)(v138 + 16) = v139;
      v140 = *(_QWORD *)&v202[28];
      *(_DWORD *)(v138 + 36) = v203;
      *(_QWORD *)(v138 + 28) = v140;
      v141 = v204;
      v142 = v205;
      v143 = *(_OWORD *)v206;
      *(_OWORD *)(v138 + 88) = *(_OWORD *)&v206[16];
      *(_OWORD *)(v138 + 72) = v143;
      *(_OWORD *)(v138 + 56) = v142;
      *(_OWORD *)(v138 + 40) = v141;
      *(_QWORD *)(v138 + 104) = v207;
      *(_BYTE *)(v138 + 112) = 0;
      *(_BYTE *)(v138 + 216) = 0;
      if ((_BYTE)v214)
      {
        *(_BYTE *)(v138 + 112) = v208;
        v144 = v209;
        *(_OWORD *)(v138 + 136) = v210;
        *(_OWORD *)(v138 + 120) = v144;
        v145 = v211;
        v146 = v212;
        v147 = *(_OWORD *)v213;
        *(_OWORD *)(v138 + 200) = *(_OWORD *)&v213[16];
        *(_OWORD *)(v138 + 184) = v147;
        *(_OWORD *)(v138 + 168) = v146;
        *(_OWORD *)(v138 + 152) = v145;
        *(_BYTE *)(v138 + 216) = 1;
      }
      v148 = v215;
      v149 = *(_OWORD *)v216;
      v150 = *(_OWORD *)&v216[16];
      *(_QWORD *)(v138 + 272) = v217;
      *(_OWORD *)(v138 + 240) = v149;
      *(_OWORD *)(v138 + 256) = v150;
      *(_OWORD *)(v138 + 224) = v148;
      *(_QWORD *)(v138 + 288) = 0;
      *(_QWORD *)(v138 + 296) = 0;
      *(_QWORD *)(v138 + 280) = 0;
      *(_OWORD *)(v138 + 280) = *(_OWORD *)v218;
      *(void **)(v138 + 296) = v218[2];
      memset(v218, 0, sizeof(v218));
      *(_BYTE *)(v138 + 304) = 0;
      *(_BYTE *)(v138 + 320) = 0;
      if (v220[8])
      {
        *(_QWORD *)(v138 + 304) = v219;
        *(_QWORD *)(v138 + 312) = *(_QWORD *)v220;
        *(_BYTE *)(v138 + 320) = 1;
      }
      *(_BYTE *)(v138 + 324) = 0;
      *(_BYTE *)(v138 + 356) = 0;
      if (v220[44])
      {
        *(_OWORD *)(v138 + 324) = *(_OWORD *)&v220[12];
        *(_QWORD *)(v138 + 340) = *(_QWORD *)&v220[28];
        *(_QWORD *)(v138 + 348) = *(_QWORD *)&v220[36];
        *(_BYTE *)(v138 + 356) = 1;
      }
      *(_BYTE *)(v138 + 360) = 0;
      *(_BYTE *)(v138 + 384) = 0;
      if (v221[0])
      {
        *(_QWORD *)(v138 + 360) = 0;
        *(_QWORD *)(v138 + 368) = 0;
        *(_QWORD *)(v138 + 376) = 0;
        *(_OWORD *)(v138 + 360) = *(_OWORD *)&v220[48];
        *(_QWORD *)(v138 + 376) = *(_QWORD *)&v220[64];
        memset(&v220[48], 0, 24);
        *(_BYTE *)(v138 + 384) = 1;
      }
      *(_BYTE *)(v138 + 392) = 0;
      *(_BYTE *)(v138 + 416) = 0;
      if (BYTE8(v222))
      {
        *(_QWORD *)(v138 + 392) = 0;
        *(_QWORD *)(v138 + 400) = 0;
        *(_QWORD *)(v138 + 408) = 0;
        *(_OWORD *)(v138 + 392) = *(_OWORD *)&v221[8];
        *(_QWORD *)(v138 + 408) = v222;
        *(_QWORD *)&v221[8] = 0;
        *(_QWORD *)&v221[16] = 0;
        *(_QWORD *)&v222 = 0;
        *(_BYTE *)(v138 + 416) = 1;
      }
      *(_BYTE *)(v138 + 424) = 0;
      *(_BYTE *)(v138 + 448) = 0;
      if (v225)
      {
        *(_QWORD *)(v138 + 424) = 0;
        *(_QWORD *)(v138 + 432) = 0;
        *(_QWORD *)(v138 + 440) = 0;
        *(_OWORD *)(v138 + 424) = v223;
        *(_QWORD *)(v138 + 440) = v224;
        v223 = 0uLL;
        v224 = 0;
        *(_BYTE *)(v138 + 448) = 1;
      }
      *(_WORD *)(v138 + 456) = v226;
      v151 = v138 + 464;
    }
    v263.n128_u64[1] = v151;
    if (v225)
    {
      v152 = v223;
      if ((_QWORD)v223)
      {
        v153 = *((_QWORD *)&v223 + 1);
        v154 = (void *)v223;
        if (*((_QWORD *)&v223 + 1) != (_QWORD)v223)
        {
          v155 = *((_QWORD *)&v223 + 1);
          do
          {
            v157 = *(void **)(v155 - 24);
            v155 -= 24;
            v156 = v157;
            if (v157)
            {
              *(_QWORD *)(v153 - 16) = v156;
              operator delete(v156);
            }
            v153 = v155;
          }
          while (v155 != v152);
          v154 = (void *)v223;
          v136 = v183;
        }
        *((_QWORD *)&v223 + 1) = v152;
        operator delete(v154);
      }
    }
    if (BYTE8(v222) && *(_QWORD *)&v221[8])
    {
      *(_QWORD *)&v221[16] = *(_QWORD *)&v221[8];
      operator delete(*(void **)&v221[8]);
    }
    if (v221[0] && *(_QWORD *)&v220[48])
    {
      *(_QWORD *)&v220[56] = *(_QWORD *)&v220[48];
      operator delete(*(void **)&v220[48]);
    }
    if (v218[0])
    {
      v218[1] = v218[0];
      operator delete(v218[0]);
    }
  }
  v158 = v136;
  v159 = *(__n128 **)(v136 + 848);
  v160 = *(__n128 **)(v158 + 856);
  *(__n128 *)&v195[1] = v263;
  v195[3] = v264;
  memset(v202, 0, 24);
  v161 = (char *)v160 - (char *)v159;
  if (v160 == v159)
  {
    v163 = 0;
    v162 = 0uLL;
  }
  else
  {
    if (v161 < 0)
      sub_22316E078();
    *(_QWORD *)v202 = operator new((char *)v160 - (char *)v159);
    *(_QWORD *)&v202[8] = *(_QWORD *)v202;
    *(_QWORD *)&v202[16] = *(_QWORD *)v202 + 16 * (v161 >> 4);
    v194 = (char **)v202;
    do
    {
      v263 = *v159;
      sub_2232E9564(&v194, &v263);
      ++v159;
    }
    while (v159 != v160);
    v162 = *(_OWORD *)v202;
    v163 = *(_QWORD *)&v202[16];
  }
  v164 = *(__n128 **)(v183 + 872);
  v165 = *(__n128 **)(v183 + 880);
  *(_OWORD *)&v195[4] = v162;
  *(_QWORD *)&v196[0] = v163;
  memset(v202, 0, 24);
  v166 = (char *)v165 - (char *)v164;
  if (v165 != v164)
  {
    if (v166 < 0)
      sub_22316E078();
    *(_QWORD *)v202 = operator new((char *)v165 - (char *)v164);
    *(_QWORD *)&v202[8] = *(_QWORD *)v202;
    *(_QWORD *)&v202[16] = *(_QWORD *)v202 + 16 * (v166 >> 4);
    v194 = (char **)v202;
    do
    {
      v263 = *v164;
      sub_2232E9564(&v194, &v263);
      ++v164;
    }
    while (v164 != v165);
    *(_OWORD *)((char *)v196 + 8) = *(_OWORD *)v202;
    *((_QWORD *)&v196[1] + 1) = *(_QWORD *)&v202[16];
    v3 = a2;
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_270;
    goto LABEL_262;
  }
  memset((char *)v196 + 8, 0, 24);
  v3 = a2;
  if (*(_BYTE *)(a2 + 464))
  {
LABEL_262:
    v168 = *(_QWORD *)(v3 + 448);
    v167 = *(_QWORD *)(v3 + 456);
    if (v167)
    {
      v169 = (unint64_t *)(v167 + 8);
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
    }
    v171 = *(std::__shared_weak_count **)&v199[16];
    *(_QWORD *)&v199[8] = v168;
    *(_QWORD *)&v199[16] = v167;
    if (v171)
    {
      v172 = (unint64_t *)&v171->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
  }
LABEL_270:
  v174 = operator new(0x190uLL);
  v174[1] = 0;
  v174[2] = 0;
  *v174 = &off_24EC418B8;
  v175 = sub_22327F72C((uint64_t)(v174 + 3), (uint64_t)v195);
  v176 = *(unsigned __int8 *)(v3 + 488);
  *(_QWORD *)(v3 + 472) = v177;
  if (v176)
  {
    v178 = *(std::__shared_weak_count **)(v3 + 480);
    *(_QWORD *)(v3 + 480) = v174;
    if (v178)
    {
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v178->__on_zero_shared)(v178, v175);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
  }
  else
  {
    *(_QWORD *)(v3 + 480) = v174;
    *(_BYTE *)(v3 + 488) = 1;
  }
  result = sub_22327F500((uint64_t)v195);
  v2 = v183;
LABEL_278:
  *(_DWORD *)(v3 + 496) = *(_DWORD *)(v2 + 904);
  *(_BYTE *)(v3 + 500) = *(_BYTE *)(v2 + 908);
  return result;
}

void sub_2236578D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2232954B0((uint64_t)&STACK[0x230]);
  sub_223606534(a10);
  _Unwind_Resume(a1);
}

void sub_223657968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v32;

  v32 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v32;
    operator delete(v32);
    sub_22327F500((uint64_t)&a31);
    sub_223606534(a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223657AD4);
}

BOOL sub_223657B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;
  _QWORD v9[14];
  _DWORD *v10;
  uint64_t v11;
  _QWORD v12[14];
  _DWORD *v13;
  uint64_t *v14;
  char v15;

  v12[0] = a1;
  v12[1] = a1 + 32;
  v12[2] = a1 + 40;
  v12[3] = a1 + 72;
  v12[4] = a1 + 80;
  v12[5] = a1 + 112;
  v12[6] = a1 + 120;
  v12[7] = a1 + 152;
  v12[8] = a1 + 160;
  v12[9] = a1 + 192;
  v12[10] = a1 + 224;
  v12[11] = a1 + 256;
  v12[12] = a1 + 288;
  v12[13] = a1 + 320;
  v13 = (_DWORD *)(a1 + 348);
  v14 = (uint64_t *)(a1 + 352);
  v9[0] = a2;
  v9[1] = a2 + 32;
  v9[2] = a2 + 40;
  v9[3] = a2 + 72;
  v9[4] = a2 + 80;
  v9[5] = a2 + 112;
  v9[6] = a2 + 120;
  v9[7] = a2 + 152;
  v9[8] = a2 + 160;
  v9[9] = a2 + 192;
  v9[10] = a2 + 224;
  v9[11] = a2 + 256;
  v9[12] = a2 + 288;
  v9[13] = a2 + 320;
  v10 = (_DWORD *)(a2 + 348);
  v11 = a2 + 352;
  if (!sub_223657C84((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9))
    return 0;
  if (*v13 != *v10)
    return 0;
  v3 = *v14;
  v2 = v14[1];
  v4 = *(float **)v11;
  if (v2 - *v14 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

BOOL sub_223657C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL8 result;
  _BOOL4 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;

  if (!sub_223657E3C((uint64_t)&v26, a2, a3))
    return 0;
  v6 = **(float ***)(a2 + 88);
  v5 = *(float **)(*(_QWORD *)(a2 + 88) + 8);
  v7 = **(_QWORD **)(a3 + 88);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    v8 = (float *)(v7 + 4);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v6 == v9;
      if (*v6 == v9)
        v10 = v6[1] == *v8;
      if (!v10)
        return 0;
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v5);
  }
  v12 = **(_QWORD **)(a2 + 96);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8);
  v13 = **(_QWORD **)(a3 + 96);
  if (v11 - v12 != *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8) - v13)
    return 0;
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 == *(_QWORD *)v13 && *(_DWORD *)(v12 + 8) == (unint64_t)*(unsigned int *)(v13 + 8))
    {
      v12 += 12;
      v13 += 12;
      if (v12 == v11)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a3 + 104);
  if (*(_BYTE *)(v15 + 24))
    v17 = *(_BYTE *)(v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (*(_BYTE *)(v15 + 24) != 0) == (*(_BYTE *)(v16 + 24) != 0);
  v19 = *(float *)v15 == *(float *)v16;
  if (*(float *)v15 == *(float *)v16)
  {
    v20 = *(float *)(v15 + 4);
    v21 = *(float *)(v16 + 4);
    v19 = v20 == v21;
    if (v20 == v21)
      v19 = *(float *)(v15 + 8) == *(float *)(v16 + 8);
  }
  if (!v19)
    return 0;
  v22 = *(float *)(v15 + 12);
  v23 = *(float *)(v16 + 12);
  result = v22 == v23;
  if (v22 == v23)
  {
    v24 = *(float *)(v15 + 16);
    v25 = *(float *)(v16 + 16);
    result = v24 == v25;
    if (v24 == v25)
      return *(float *)(v15 + 20) == *(float *)(v16 + 20);
  }
  return result;
}

BOOL sub_223657E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  char v17;

  if (!sub_223657F2C((uint64_t)&v17, a2, a3))
    return 0;
  v6 = **(_QWORD **)(a2 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8);
  v7 = **(_QWORD **)(a3 + 72);
  if (v5 - v6 != *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 == *(_QWORD *)v7 && *(_DWORD *)(v6 + 8) == (unint64_t)*(unsigned int *)(v7 + 8))
    {
      v6 += 12;
      v7 += 12;
      if (v6 == v5)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v10 = **(char ***)(a2 + 80);
  v9 = *(char **)(*(_QWORD *)(a2 + 80) + 8);
  v11 = **(uint64_t ***)(a3 + 80);
  if (v9 - v10 != *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) - (_QWORD)v11)
    return 0;
  if (v10 == v9)
    return 1;
  do
  {
    v13 = *(_QWORD *)v10;
    v10 += 8;
    v12 = v13;
    v14 = *v11++;
    result = v12 == v14;
  }
  while (v12 == v14 && v10 != v9);
  return result;
}

BOOL sub_223657F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v12;

  if (sub_223657FF8((uint64_t)&v12, a2, (uint64_t **)a3)
    && **(_DWORD **)(a2 + 40) == **(_DWORD **)(a3 + 40)
    && (v5 = *(_QWORD *)(a2 + 48),
        v6 = *(_QWORD *)(a3 + 48),
        v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5,
        v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 56) == **(_DWORD **)(a3 + 56)
    && (v8 = *(_QWORD *)(a2 + 64),
        v9 = *(_QWORD *)(a3 + 64),
        v10 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 == *(_QWORD *)(v9 + 8) - *(_QWORD *)v9))
  {
    return memcmp(*(const void **)v8, *(const void **)v9, v10) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_223657FF8(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  _BOOL8 result;
  BOOL v23;
  float v24;
  float v25;
  float v26;

  v4 = **(float ***)a2;
  v3 = *(float **)(*(_QWORD *)a2 + 8);
  v5 = **a3;
  if ((char *)v3 - (char *)v4 != (*a3)[1] - v5)
    return 0;
  if (v4 != v3)
  {
    v6 = (float *)(v5 + 4);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v4 == v7;
      if (*v4 == v7)
      {
        v9 = v4[1];
        v8 = v9 == *v6;
        if (v9 == *v6)
          v8 = v4[2] == v6[1];
      }
      if (!v8)
        return 0;
      v4 += 3;
      v6 += 3;
    }
    while (v4 != v3);
  }
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1])
    return 0;
  v11 = **(float ***)(a2 + 16);
  v10 = *(float **)(*(_QWORD *)(a2 + 16) + 8);
  v12 = *a3[2];
  if ((char *)v10 - (char *)v11 != a3[2][1] - v12)
    return 0;
  if (v11 != v10)
  {
    v13 = (float *)(v12 + 4);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v11 == v14;
      if (*v11 == v14)
      {
        v16 = v11[1];
        v15 = v16 == *v13;
        if (v16 == *v13)
          v15 = v11[2] == v13[1];
      }
      if (!v15)
        return 0;
      v11 += 3;
      v13 += 3;
    }
    while (v11 != v10);
  }
  if (**(_DWORD **)(a2 + 24) != *(_DWORD *)a3[3])
    return 0;
  v18 = **(_QWORD **)(a2 + 32);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v19 = *a3[4];
  if (v17 - v18 != a3[4][1] - v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 12;
  v21 = (float *)(v19 + 4);
  do
  {
    v24 = *(float *)(v20 - 12);
    v25 = *(v21 - 1);
    result = v24 == v25;
    if (v24 == v25)
    {
      v26 = *(float *)(v20 - 8);
      result = v26 == *v21;
      if (v26 == *v21)
        result = *(float *)(v20 - 4) == v21[1];
    }
    v23 = !result || v20 == v17;
    v20 += 12;
    v21 += 3;
  }
  while (!v23);
  return result;
}

void sub_2236581AC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v2 = *(char **)a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x108421084210843)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 248 * a2;
    v6 = (char *)operator new(248 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v4[v9];
        v11 = &v8[v9];
        *(_OWORD *)(v11 - 248) = *(_OWORD *)&v4[v9 - 248];
        *(_OWORD *)(v11 - 232) = *(_OWORD *)&v4[v9 - 232];
        *((_QWORD *)v10 - 29) = 0;
        *((_QWORD *)v10 - 28) = 0;
        v12 = *(_OWORD *)&v4[v9 - 216];
        v13 = *(_OWORD *)&v4[v9 - 200];
        v14 = *(_OWORD *)&v4[v9 - 184];
        *(_OWORD *)(v11 - 168) = *(_OWORD *)&v4[v9 - 168];
        *(_OWORD *)(v11 - 184) = v14;
        *(_OWORD *)(v11 - 200) = v13;
        *(_OWORD *)(v11 - 216) = v12;
        *(_OWORD *)(v11 - 152) = *(_OWORD *)&v4[v9 - 152];
        v15 = *(_OWORD *)&v4[v9 - 136];
        v16 = *(_OWORD *)&v4[v9 - 120];
        v17 = *(_OWORD *)&v4[v9 - 104];
        *(_OWORD *)(v11 - 88) = *(_OWORD *)&v4[v9 - 88];
        *(_OWORD *)(v11 - 104) = v17;
        *(_OWORD *)(v11 - 120) = v16;
        *(_OWORD *)(v11 - 136) = v15;
        v18 = *(_OWORD *)&v4[v9 - 72];
        v19 = *(_OWORD *)&v4[v9 - 56];
        v20 = *(_OWORD *)&v4[v9 - 40];
        *(_OWORD *)(v11 - 24) = *(_OWORD *)&v4[v9 - 24];
        *(_OWORD *)(v11 - 40) = v20;
        *(_OWORD *)(v11 - 56) = v19;
        *(_OWORD *)(v11 - 72) = v18;
        *((_WORD *)v11 - 4) = *(_WORD *)&v4[v9 - 8];
        v9 -= 248;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v21 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v21 != v2)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 28);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v21 -= 248;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_22365835C(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;

  v2 = *a1;
  if (0x34F72C234F72C235 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x8D3DCB08D3DCB1)
      sub_22324A284();
    v4 = a1[1];
    v5 = 464 * a2;
    v6 = (char *)operator new(464 * a2);
    v7 = 0;
    v8 = &v6[v4 - v2];
    *(_QWORD *)&v12 = v8;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 464;
      sub_223249DC0((uint64_t)&v8[v7], (uint64_t)&v4[v7]);
    }
    v9 = &v8[v7];
    v10 = *a1;
    v11 = (uint64_t)a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v12;
    while ((char *)v11 != v10)
    {
      v11 -= 464;
      sub_22324A5A0(v11);
    }
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_22365849C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = 0x34F72C234F72C235 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x8D3DCB08D3DCB0)
    sub_22324A284();
  if (0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x469EE58469EE58)
    v6 = 0x8D3DCB08D3DCB0;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x8D3DCB08D3DCB0)
      sub_223174E94();
    v7 = (char *)operator new(464 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (uint64_t)&v7[464 * v3];
  *((_QWORD *)&v16 + 1) = &v7[464 * v6];
  sub_223658658(v15, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_223249DC0(v8 + v15, v8 + i))
    v8 -= 464;
  v11 = v15 + v8;
  v12 = (void *)*a1;
  v13 = a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = v15 + 464;
  *(_OWORD *)(a1 + 1) = v16;
  while ((void *)v13 != v12)
  {
    v13 -= 464;
    sub_22324A5A0(v13);
  }
  if (v12)
    operator delete(v12);
  return v15 + 464;
}

void sub_223658614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22324A924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223658658(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)result = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(result + 28) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(result + 72) = v6;
  *(_OWORD *)(result + 56) = v5;
  *(_OWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(result + 112) = *(_BYTE *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 120) = v7;
    v8 = *(_OWORD *)(a2 + 152);
    v9 = *(_OWORD *)(a2 + 168);
    v10 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(result + 184) = v10;
    *(_OWORD *)(result + 168) = v9;
    *(_OWORD *)(result + 152) = v8;
    *(_BYTE *)(result + 216) = 1;
  }
  v11 = *(_OWORD *)(a2 + 224);
  v12 = *(_OWORD *)(a2 + 256);
  v13 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(result + 256) = v12;
  *(_OWORD *)(result + 224) = v11;
  *(_QWORD *)(result + 272) = v13;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  v14 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v14;
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_BYTE *)(result + 304) = 0;
  *(_BYTE *)(result + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(result + 320) = 1;
  }
  *(_BYTE *)(result + 324) = 0;
  *(_BYTE *)(result + 356) = 0;
  if (*(_BYTE *)(a2 + 356))
  {
    *(_QWORD *)(result + 324) = *(_QWORD *)(a2 + 324);
    *(_QWORD *)(result + 332) = *(_QWORD *)(a2 + 332);
    *(_QWORD *)(result + 340) = *(_QWORD *)(a2 + 340);
    *(_QWORD *)(result + 348) = *(_QWORD *)(a2 + 348);
    *(_BYTE *)(result + 356) = 1;
  }
  *(_BYTE *)(result + 360) = 0;
  *(_BYTE *)(result + 384) = 0;
  if (*(_BYTE *)(a2 + 384))
  {
    *(_QWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 376) = 0;
    v15 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(result + 368) = v15;
    *(_QWORD *)(result + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
    *(_BYTE *)(result + 384) = 1;
  }
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_QWORD *)(result + 392) = 0;
    *(_QWORD *)(result + 400) = 0;
    *(_QWORD *)(result + 408) = 0;
    v16 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(result + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(result + 400) = v16;
    *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 408) = 0;
    *(_BYTE *)(result + 416) = 1;
  }
  *(_BYTE *)(result + 424) = 0;
  *(_BYTE *)(result + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 432) = 0;
    *(_QWORD *)(result + 440) = 0;
    v17 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(result + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(result + 432) = v17;
    *(_QWORD *)(result + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_BYTE *)(result + 448) = 1;
  }
  *(_WORD *)(result + 456) = *(_WORD *)(a2 + 456);
  return result;
}

void sub_223658854(const void *a1, std::string::size_type a2, xpc_object_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *p_dst;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::string::size_type size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  size_t v33;
  __int128 *v34;
  unint64_t v35;
  unint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  std::string::size_type v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  void *v106;
  void **v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  std::mutex *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  std::string::size_type v117;
  std::string *v118;
  std::string::size_type v119;
  std::string::size_type v120;
  int v121;
  __n128 *v124;
  std::string *v125;
  size_t v126;
  uint64_t v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void **v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  std::mutex *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  std::string::size_type v141;
  std::string *v142;
  std::string::size_type v143;
  std::string::size_type v144;
  int v145;
  __n128 *v148;
  std::string *v149;
  size_t v150;
  __int128 *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void **v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  std::mutex *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  std::string::size_type v165;
  std::string *v166;
  std::string::size_type v167;
  std::string::size_type v168;
  int v169;
  __n128 *v172;
  std::string *v173;
  size_t v174;
  uint64_t v175;
  __int128 *v176;
  uint64_t v177;
  void *v178;
  void **v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  std::mutex *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  std::string::size_type v188;
  std::string *v189;
  std::string::size_type v190;
  std::string::size_type v191;
  int v192;
  __n128 *v195;
  std::string *v196;
  size_t v197;
  __int128 *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v215[2];
  __int128 v216;
  int v217;
  std::string v218;
  __int128 v219;
  std::string __dst;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  std::string v229;
  std::__shared_weak_count *v230;
  __int128 v231;
  __int128 v232;
  std::__shared_weak_count *v233;
  std::string __p;
  _QWORD *v235;
  std::__shared_weak_count *v236;
  __int128 v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  __int128 v240;
  int64_t v241;
  __int128 *v242;
  __int128 v243;
  __int128 v244;
  _QWORD v245[4];

  v245[2] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      v7 = v5;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v7[2];
    }
    v8 = *(_QWORD *)(v6 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      *(_QWORD *)&v243 = "cv3d.recon.";
      *((_QWORD *)&v243 + 1) = 11;
      *(_QWORD *)&v244 = "Stats.CoreAnalytics";
      *((_QWORD *)&v244 + 1) = 19;
      sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &__p);
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v14 = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v14)
          return;
      }
      else if (!v13)
      {
        return;
      }
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_123;
      v15 = sub_2241471F8();
      v16 = v15[2];
      if (!v16)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v16 = v15[2];
      }
      v17 = *(_QWORD *)(v16 + 64);
      v18 = (std::mutex *)(v17 + 32);
      std::mutex::lock((std::mutex *)(v17 + 32));
      v20 = *(_QWORD *)(v17 + 96);
      v19 = *(_QWORD *)(v17 + 104);
      std::mutex::unlock(v18);
      if (v20 == v19)
        goto LABEL_123;
      *(_QWORD *)&v243 = "cv3d.recon.";
      *((_QWORD *)&v243 + 1) = 11;
      *(_QWORD *)&v244 = "Stats.CoreAnalytics";
      *((_QWORD *)&v244 + 1) = 19;
      sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &v218);
      sub_2241471F8();
      v21 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        goto LABEL_121;
      *(_OWORD *)v215 = 0u;
      v216 = 0u;
      v217 = 728325616;
      kdebug_trace();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        goto LABEL_120;
      if (a2 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (a2 >= 0x17)
      {
        v23 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a2 | 7) != 0x17)
          v23 = a2 | 7;
        v24 = v23 + 1;
        p_dst = (std::string *)operator new(v23 + 1);
        __dst.__r_.__value_.__l.__size_ = a2;
        __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a2;
        p_dst = &__dst;
        if (!a2)
          goto LABEL_26;
      }
      memmove(p_dst, a1, a2);
LABEL_26:
      p_dst->__r_.__value_.__s.__data_[a2] = 0;
      *(_QWORD *)&v219 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v219 + 1) = 2;
      v25 = sub_2241471F8();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        goto LABEL_118;
      sub_22452C3CC(&v221);
      sub_224564B94((uint64_t)&__p, a3);
      v209 = v25;
      v210 = v21;
      sub_224564AC4(a3, (uint64_t)&v231);
      v26 = *MEMORY[0x24BEDB7F0];
      v212 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v213 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v211 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        if (!__p.__r_.__value_.__r.__words[0] || (_QWORD)v231 == 0)
        {
          if ((__p.__r_.__value_.__r.__words[0] != 0) != ((_QWORD)v231 == 0))
            goto LABEL_80;
          size = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ == *((_QWORD *)&v231 + 1))
          {
LABEL_80:
            v47 = v233;
            if (v233)
            {
              p_shared_owners = (unint64_t *)&v233->__shared_owners_;
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = v236;
            if (v236)
            {
              v51 = (unint64_t *)&v236->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            __p = __dst;
            memset(&__dst, 0, sizeof(__dst));
            LOBYTE(v235) = 1;
            sub_2231AD9F0((uint64_t)&v221, (__int128 *)&__p, &v219, &v222);
            if ((_BYTE)v235 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v53 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
            if (*((_QWORD *)&v221 + 1))
            {
              v54 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v56 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 56))(v210);
            v57 = *v56;
            v58 = (std::__shared_weak_count *)v56[1];
            if (v58)
            {
              v59 = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            v62 = v223;
            v61 = v224;
            *(_QWORD *)&v231 = &off_24EC6A3B8;
            *((_QWORD *)&v231 + 1) = v223;
            *(_QWORD *)&v232 = v224;
            v223 = 0;
            v224 = 0;
            *(_QWORD *)&v243 = v57;
            *((_QWORD *)&v243 + 1) = v58;
            if (v58)
            {
              v63 = (unint64_t *)&v58->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            *(_QWORD *)&v244 = &off_24EC6A3B8;
            *((_QWORD *)&v244 + 1) = v62;
            v245[0] = v61;
            if (v61)
            {
              v65 = (unint64_t *)(v61 + 8);
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v209 + 16))(v209, &v243);
            sub_2241231D8((uint64_t)&v244);
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
            if (*((_QWORD *)&v243 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            sub_2241231D8((uint64_t)&v231);
            if (v58)
            {
              v70 = (unint64_t *)&v58->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            sub_2241231D8((uint64_t)&v222);
LABEL_118:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_120:
            kdebug_trace();
LABEL_121:
            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v218.__r_.__value_.__l.__data_);
LABEL_123:
            sub_224564B94((uint64_t)&__p, a3);
            sub_224564B94((uint64_t)&v243, a3);
            v231 = v243;
            v72 = v244;
            v232 = v244;
            v233 = (std::__shared_weak_count *)v245[0];
            if (v245[0])
            {
              v73 = (unint64_t *)(v245[0] + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
              v75 = (std::__shared_weak_count *)v245[0];
              *((_QWORD *)&v231 + 1) += v72;
              if (v245[0])
              {
                v76 = (unint64_t *)(v245[0] + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
            }
            else
            {
              *((_QWORD *)&v231 + 1) += v244;
            }
            v78 = MEMORY[0x24BDACFA8];
            v79 = MEMORY[0x24BDACFA0];
            v80 = MEMORY[0x24BDACF78];
            v81 = MEMORY[0x24BDACF80];
            while (2)
            {
              if (__p.__r_.__value_.__r.__words[0])
                v82 = (_QWORD)v231 == 0;
              else
                v82 = 1;
              if (v82)
              {
                if ((__p.__r_.__value_.__r.__words[0] != 0) != ((_QWORD)v231 == 0))
                  goto LABEL_455;
                v83 = __p.__r_.__value_.__l.__size_;
              }
              else
              {
                v83 = __p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_ == *((_QWORD *)&v231 + 1))
                {
LABEL_455:
                  v203 = v233;
                  if (v233)
                  {
                    v204 = (unint64_t *)&v233->__shared_owners_;
                    do
                      v205 = __ldaxr(v204);
                    while (__stlxr(v205 - 1, v204));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                    }
                  }
                  v206 = v236;
                  if (v236)
                  {
                    v207 = (unint64_t *)&v236->__shared_owners_;
                    do
                      v208 = __ldaxr(v207);
                    while (__stlxr(v208 - 1, v207));
                    if (!v208)
                    {
                      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                      std::__shared_weak_count::__release_weak(v206);
                    }
                  }
                  return;
                }
              }
              v84 = 16 * v83;
              v85 = *(_OWORD *)(*v235 + v84);
              v86 = v235[3] + v84;
              v237 = v85;
              v87 = *(std::__shared_weak_count_vtbl **)v86;
              *(_QWORD *)&v243 = *(_QWORD *)v86;
              v88 = *(_QWORD *)(v86 + 8);
              *((_QWORD *)&v243 + 1) = v88;
              if (v88)
              {
                v89 = (unint64_t *)(v88 + 8);
                do
                  v90 = __ldxr(v89);
                while (__stxr(v90 + 1, v89));
              }
              if (v87)
                xpc_retain(v87);
              v91 = (std::__shared_weak_count *)operator new();
              v92 = v91;
              v91->__shared_owners_ = 0;
              v93 = (unint64_t *)&v91->__shared_owners_;
              v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
              v91->__shared_weak_owners_ = 0;
              v91[1].__vftable = v87;
              v238 = v87;
              v239 = v91;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
              do
                v95 = __ldaxr(v93);
              while (__stlxr(v95 - 1, v93));
              if (v95)
              {
                v96 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
                if (!*((_QWORD *)&v243 + 1))
                  goto LABEL_158;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v92);
                v96 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
                if (!*((_QWORD *)&v243 + 1))
                  goto LABEL_158;
              }
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
LABEL_158:
              v99 = MEMORY[0x2276858AC](v238);
              if (v99 != v78
                || v79 == v78
                || v99 == MEMORY[0x24BDACF98]
                || v99 == MEMORY[0x24BDACF90]
                || v99 == MEMORY[0x24BDACF88]
                || v99 == v80
                || v99 == v81)
              {
                v130 = MEMORY[0x2276858AC](v238);
                if (v130 == MEMORY[0x24BDACFF8]
                  && MEMORY[0x24BDACFF0] != MEMORY[0x24BDACFF8]
                  && v130 != MEMORY[0x24BDACFE8]
                  && v130 != MEMORY[0x24BDACFE0]
                  && v130 != MEMORY[0x24BDACFD0]
                  && v130 != MEMORY[0x24BDACFC0]
                  && v130 != MEMORY[0x24BDACFB0]
                  && v130 != v78
                  && v130 != v79
                  && v130 != MEMORY[0x24BDACF98]
                  && v130 != MEMORY[0x24BDACF90]
                  && v130 != MEMORY[0x24BDACF88]
                  && v130 != v80
                  && v130 != v81)
                {
                  *(_QWORD *)&v243 = "Stats.CoreAnalytics.";
                  *((_QWORD *)&v243 + 1) = 20;
                  *(_QWORD *)&v244 = a1;
                  *((_QWORD *)&v244 + 1) = a2;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, (std::string *)v215);
                  *(_QWORD *)&v243 = "cv3d.recon.";
                  *((_QWORD *)&v243 + 1) = 11;
                  v131 = (void *)BYTE7(v216);
                  v132 = v215;
                  if (SBYTE7(v216) < 0)
                  {
                    v132 = (void **)v215[0];
                    v131 = v215[1];
                  }
                  *(_QWORD *)&v244 = v132;
                  *((_QWORD *)&v244 + 1) = v131;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &v229);
                  if (SBYTE7(v216) < 0)
                    operator delete(v215[0]);
                  sub_224569D7C();
                  sub_224569A80();
                  if (os_variant_has_internal_diagnostics())
                  {
                    v133 = sub_2241471F8();
                    v134 = v133[2];
                    if (!v134)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v134 = v133[2];
                    }
                    v135 = *(_QWORD *)(v134 + 64);
                    v136 = (std::mutex *)(v135 + 32);
                    std::mutex::lock((std::mutex *)(v135 + 32));
                    v138 = *(_QWORD *)(v135 + 96);
                    v137 = *(_QWORD *)(v135 + 104);
                    std::mutex::unlock(v136);
                    if (v138 != v137)
                    {
                      sub_2241471F8();
                      v139 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
                      {
                        v243 = 0u;
                        v244 = 0u;
                        LODWORD(v245[0]) = 728325608;
                        kdebug_trace();
                        v225[0] = (void *)sub_224565390((xpc_object_t *)&v238);
                        DWORD2(v216) = 0;
                        sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                        if (DWORD2(v216) == -1)
                          sub_22316DD70();
                        v227[0] = &v222;
                        ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                        if (DWORD2(v216) != -1)
                          ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
                        {
                          *(_OWORD *)v215 = v240;
                          *(_QWORD *)&v216 = v241;
                          v240 = 0uLL;
                          v241 = 0;
                          v227[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                          v227[1] = (void *)2;
                          v140 = sub_2241471F8();
                          sub_22366376C((uint64_t)v140, v139, (uint64_t *)v225, (uint64_t)v215, (__int128 *)v227);
                          if (SBYTE7(v216) < 0)
                            operator delete(v215[0]);
                        }
                        if (SHIBYTE(v241) < 0)
                          operator delete((void *)v240);
                        kdebug_trace();
                      }
                    }
                  }
                  v243 = 0u;
                  v244 = 0u;
                  LODWORD(v245[0]) = 728325624;
                  kdebug_trace();
                  v141 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v141 = v229.__r_.__value_.__l.__size_;
                  if (v141 >= 0x11)
                  {
                    v142 = &v229;
                    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v142 = (std::string *)v229.__r_.__value_.__r.__words[0];
                    v143 = v142->__r_.__value_.__r.__words[0];
                    v144 = v142->__r_.__value_.__l.__size_;
                    v145 = v142->__r_.__value_.__s.__data_[16];
                    if (v143 == 0x6365722E64337663 && v144 == 0x73746174532E6E6FLL && v145 == 46)
                    {
                      v148 = sub_223187510();
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v149 = &v229;
                      else
                        v149 = (std::string *)v229.__r_.__value_.__r.__words[0];
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v150 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                      else
                        v150 = v229.__r_.__value_.__l.__size_;
                      v225[0] = (void *)sub_224565390((xpc_object_t *)&v238);
                      DWORD2(v216) = 0;
                      sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                      if (DWORD2(v216) == -1)
                        sub_22316DD70();
                      v227[0] = &v222;
                      ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                      if (DWORD2(v216) != -1)
                        ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                      if (v241 >= 0)
                        v151 = &v240;
                      else
                        v151 = (__int128 *)v240;
                      if (v241 >= 0)
                        v152 = HIBYTE(v241);
                      else
                        v152 = *((_QWORD *)&v240 + 1);
                      sub_22365B208(v148, v149, v150, (uint64_t *)v225, (uint64_t)v151, v152);
                      if (SHIBYTE(v241) < 0)
                        operator delete((void *)v240);
                    }
                  }
                  goto LABEL_445;
                }
                v153 = MEMORY[0x2276858AC](v238);
                if (v153 == MEMORY[0x24BDACFD0]
                  && MEMORY[0x24BDACFC0] != MEMORY[0x24BDACFD0]
                  && v153 != MEMORY[0x24BDACFB0]
                  && v153 != v78
                  && v153 != v79
                  && v153 != MEMORY[0x24BDACF98]
                  && v153 != MEMORY[0x24BDACF90]
                  && v153 != MEMORY[0x24BDACF88]
                  && v153 != v80
                  && v153 != v81)
                {
                  *(_QWORD *)&v243 = "Stats.CoreAnalytics.";
                  *((_QWORD *)&v243 + 1) = 20;
                  *(_QWORD *)&v244 = a1;
                  *((_QWORD *)&v244 + 1) = a2;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, (std::string *)v215);
                  *(_QWORD *)&v243 = "cv3d.recon.";
                  *((_QWORD *)&v243 + 1) = 11;
                  v154 = (void *)BYTE7(v216);
                  v155 = v215;
                  if (SBYTE7(v216) < 0)
                  {
                    v155 = (void **)v215[0];
                    v154 = v215[1];
                  }
                  *(_QWORD *)&v244 = v155;
                  *((_QWORD *)&v244 + 1) = v154;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &v229);
                  if (SBYTE7(v216) < 0)
                    operator delete(v215[0]);
                  sub_224569D7C();
                  sub_224569A80();
                  if (os_variant_has_internal_diagnostics())
                  {
                    v156 = sub_2241471F8();
                    v157 = v156[2];
                    if (!v157)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v157 = v156[2];
                    }
                    v158 = *(_QWORD *)(v157 + 64);
                    v159 = (std::mutex *)(v158 + 32);
                    std::mutex::lock((std::mutex *)(v158 + 32));
                    v161 = *(_QWORD *)(v158 + 96);
                    v160 = *(_QWORD *)(v158 + 104);
                    std::mutex::unlock(v159);
                    if (v161 != v160)
                    {
                      sub_2241471F8();
                      v162 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
                      {
                        v243 = 0u;
                        v244 = 0u;
                        LODWORD(v245[0]) = 728325608;
                        kdebug_trace();
                        v163 = MEMORY[0x2276858AC](v238);
                        if ((v163 != MEMORY[0x24BDACFD0]
                           || MEMORY[0x24BDACFC0] == MEMORY[0x24BDACFD0]
                           || v163 == MEMORY[0x24BDACFB0]
                           || v163 == v78
                           || v163 == v79
                           || v163 == MEMORY[0x24BDACF98]
                           || v163 == MEMORY[0x24BDACF90]
                           || v163 == MEMORY[0x24BDACF88]
                           || v163 == v80
                           || v163 == v81)
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 140, (uint64_t)"IsOfType(Type::Int64)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                        {
                          abort();
                        }
                        v225[0] = (void *)xpc_int64_get_value(v238);
                        DWORD2(v216) = 0;
                        sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                        if (DWORD2(v216) == -1)
                          sub_22316DD70();
                        v227[0] = &v222;
                        ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                        if (DWORD2(v216) != -1)
                          ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
                        {
                          *(_OWORD *)v215 = v240;
                          *(_QWORD *)&v216 = v241;
                          v240 = 0uLL;
                          v241 = 0;
                          v227[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                          v227[1] = (void *)2;
                          v164 = sub_2241471F8();
                          sub_223663A88((uint64_t)v164, v162, (uint64_t *)v225, (uint64_t)v215, (__int128 *)v227);
                          if (SBYTE7(v216) < 0)
                            operator delete(v215[0]);
                        }
                        if (SHIBYTE(v241) < 0)
                          operator delete((void *)v240);
                        kdebug_trace();
                      }
                    }
                  }
                  v243 = 0u;
                  v244 = 0u;
                  LODWORD(v245[0]) = 728325624;
                  kdebug_trace();
                  v165 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v165 = v229.__r_.__value_.__l.__size_;
                  if (v165 >= 0x11)
                  {
                    v166 = &v229;
                    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v166 = (std::string *)v229.__r_.__value_.__r.__words[0];
                    v167 = v166->__r_.__value_.__r.__words[0];
                    v168 = v166->__r_.__value_.__l.__size_;
                    v169 = v166->__r_.__value_.__s.__data_[16];
                    if (v167 == 0x6365722E64337663 && v168 == 0x73746174532E6E6FLL && v169 == 46)
                    {
                      v172 = sub_223187510();
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v173 = &v229;
                      else
                        v173 = (std::string *)v229.__r_.__value_.__r.__words[0];
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v174 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                      else
                        v174 = v229.__r_.__value_.__l.__size_;
                      v175 = MEMORY[0x2276858AC](v238);
                      if ((v175 != MEMORY[0x24BDACFD0]
                         || MEMORY[0x24BDACFC0] == MEMORY[0x24BDACFD0]
                         || v175 == MEMORY[0x24BDACFB0]
                         || v175 == v78
                         || v175 == v79
                         || v175 == MEMORY[0x24BDACF98]
                         || v175 == MEMORY[0x24BDACF90]
                         || v175 == MEMORY[0x24BDACF88]
                         || v175 == v80
                         || v175 == v81)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 140, (uint64_t)"IsOfType(Type::Int64)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v225[0] = (void *)xpc_int64_get_value(v238);
                      DWORD2(v216) = 0;
                      sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                      if (DWORD2(v216) == -1)
                        sub_22316DD70();
                      v227[0] = &v222;
                      ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                      if (DWORD2(v216) != -1)
                        ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                      if (v241 >= 0)
                        v176 = &v240;
                      else
                        v176 = (__int128 *)v240;
                      if (v241 >= 0)
                        v177 = HIBYTE(v241);
                      else
                        v177 = *((_QWORD *)&v240 + 1);
                      sub_22365B39C(v172, v173, v174, (uint64_t *)v225, (uint64_t)v176, v177);
                      if (SHIBYTE(v241) < 0)
                        operator delete((void *)v240);
                    }
                  }
                  goto LABEL_445;
                }
                if (MEMORY[0x2276858AC](v238) == v81 && v80 != v81)
                {
                  *(_QWORD *)&v243 = "Stats.CoreAnalytics.";
                  *((_QWORD *)&v243 + 1) = 20;
                  *(_QWORD *)&v244 = a1;
                  *((_QWORD *)&v244 + 1) = a2;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, (std::string *)v215);
                  *(_QWORD *)&v243 = "cv3d.recon.";
                  *((_QWORD *)&v243 + 1) = 11;
                  v178 = (void *)BYTE7(v216);
                  v179 = v215;
                  if (SBYTE7(v216) < 0)
                  {
                    v179 = (void **)v215[0];
                    v178 = v215[1];
                  }
                  *(_QWORD *)&v244 = v179;
                  *((_QWORD *)&v244 + 1) = v178;
                  sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &v229);
                  if (SBYTE7(v216) < 0)
                    operator delete(v215[0]);
                  sub_224569D7C();
                  sub_224569A80();
                  if (os_variant_has_internal_diagnostics())
                  {
                    v180 = sub_2241471F8();
                    v181 = v180[2];
                    if (!v181)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v181 = v180[2];
                    }
                    v182 = *(_QWORD *)(v181 + 64);
                    v183 = (std::mutex *)(v182 + 32);
                    std::mutex::lock((std::mutex *)(v182 + 32));
                    v185 = *(_QWORD *)(v182 + 96);
                    v184 = *(_QWORD *)(v182 + 104);
                    std::mutex::unlock(v183);
                    if (v185 != v184)
                    {
                      sub_2241471F8();
                      v186 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
                      {
                        v243 = 0u;
                        v244 = 0u;
                        LODWORD(v245[0]) = 728325608;
                        kdebug_trace();
                        if ((MEMORY[0x2276858AC](v238) != v81 || v80 == v81)
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 125, (uint64_t)"IsOfType(Type::Bool)", 20, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                        {
                          abort();
                        }
                        LOBYTE(v222) = xpc_BOOL_get_value(v238);
                        DWORD2(v216) = 0;
                        sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                        if (DWORD2(v216) == -1)
                          sub_22316DD70();
                        v227[0] = v225;
                        ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                        if (DWORD2(v216) != -1)
                          ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
                        {
                          *(_OWORD *)v215 = v240;
                          *(_QWORD *)&v216 = v241;
                          v240 = 0uLL;
                          v241 = 0;
                          v227[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                          v227[1] = (void *)2;
                          v187 = sub_2241471F8();
                          sub_223534FA4((uint64_t)v187, v186, (char *)&v222, (uint64_t)v215, (__int128 *)v227);
                          if (SBYTE7(v216) < 0)
                            operator delete(v215[0]);
                        }
                        if (SHIBYTE(v241) < 0)
                          operator delete((void *)v240);
                        kdebug_trace();
                      }
                    }
                  }
                  v243 = 0u;
                  v244 = 0u;
                  LODWORD(v245[0]) = 728325624;
                  kdebug_trace();
                  v188 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v188 = v229.__r_.__value_.__l.__size_;
                  if (v188 >= 0x11)
                  {
                    v189 = &v229;
                    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v189 = (std::string *)v229.__r_.__value_.__r.__words[0];
                    v190 = v189->__r_.__value_.__r.__words[0];
                    v191 = v189->__r_.__value_.__l.__size_;
                    v192 = v189->__r_.__value_.__s.__data_[16];
                    if (v190 == 0x6365722E64337663 && v191 == 0x73746174532E6E6FLL && v192 == 46)
                    {
                      v195 = sub_223187510();
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v196 = &v229;
                      else
                        v196 = (std::string *)v229.__r_.__value_.__r.__words[0];
                      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v197 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                      else
                        v197 = v229.__r_.__value_.__l.__size_;
                      if ((MEMORY[0x2276858AC](v238) != v81 || v80 == v81)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 125, (uint64_t)"IsOfType(Type::Bool)", 20, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      LOBYTE(v222) = xpc_BOOL_get_value(v238);
                      DWORD2(v216) = 0;
                      sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                      if (DWORD2(v216) == -1)
                        sub_22316DD70();
                      v227[0] = v225;
                      ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                      if (DWORD2(v216) != -1)
                        ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                      if (v241 >= 0)
                        v198 = &v240;
                      else
                        v198 = (__int128 *)v240;
                      if (v241 >= 0)
                        v199 = HIBYTE(v241);
                      else
                        v199 = *((_QWORD *)&v240 + 1);
                      sub_223189538((uint64_t *)v195, v196, v197, (char *)&v222, (uint64_t)v198, v199);
                      if (SHIBYTE(v241) < 0)
                        operator delete((void *)v240);
                    }
                  }
                  goto LABEL_445;
                }
LABEL_446:
                v200 = v239;
                if (v239)
                {
LABEL_449:
                  v201 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v202 = __ldaxr(v201);
                  while (__stlxr(v202 - 1, v201));
                  if (!v202)
                  {
                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                    std::__shared_weak_count::__release_weak(v200);
                  }
                }
              }
              else
              {
                *(_QWORD *)&v243 = "Stats.CoreAnalytics.";
                *((_QWORD *)&v243 + 1) = 20;
                *(_QWORD *)&v244 = a1;
                *((_QWORD *)&v244 + 1) = a2;
                sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, (std::string *)v215);
                *(_QWORD *)&v243 = "cv3d.recon.";
                *((_QWORD *)&v243 + 1) = 11;
                v106 = (void *)BYTE7(v216);
                v107 = v215;
                if (SBYTE7(v216) < 0)
                {
                  v107 = (void **)v215[0];
                  v106 = v215[1];
                }
                *(_QWORD *)&v244 = v107;
                *((_QWORD *)&v244 + 1) = v106;
                sub_2231A9820((uint64_t)&v243, (uint64_t)v245, 0, 0, &v229);
                if (SBYTE7(v216) < 0)
                  operator delete(v215[0]);
                sub_224569D7C();
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v108 = sub_2241471F8();
                  v109 = v108[2];
                  if (!v109)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v109 = v108[2];
                  }
                  v110 = *(_QWORD *)(v109 + 64);
                  v111 = (std::mutex *)(v110 + 32);
                  std::mutex::lock((std::mutex *)(v110 + 32));
                  v113 = *(_QWORD *)(v110 + 96);
                  v112 = *(_QWORD *)(v110 + 104);
                  std::mutex::unlock(v111);
                  if (v113 != v112)
                  {
                    sub_2241471F8();
                    v114 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114))
                    {
                      v243 = 0u;
                      v244 = 0u;
                      LODWORD(v245[0]) = 728325608;
                      kdebug_trace();
                      v115 = MEMORY[0x2276858AC](v238);
                      if ((v115 != v78
                         || v79 == v78
                         || v115 == MEMORY[0x24BDACF98]
                         || v115 == MEMORY[0x24BDACF90]
                         || v115 == MEMORY[0x24BDACF88]
                         || v115 == v80
                         || v115 == v81)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v225[0] = COERCE_VOID_(xpc_double_get_value(v238));
                      DWORD2(v216) = 0;
                      sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                      if (DWORD2(v216) == -1)
                        sub_22316DD70();
                      v227[0] = &v222;
                      ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                      if (DWORD2(v216) != -1)
                        ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114))
                        goto LABEL_200;
                      *(_OWORD *)v215 = v240;
                      *(_QWORD *)&v216 = v241;
                      v240 = 0uLL;
                      v241 = 0;
                      v227[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                      v227[1] = (void *)2;
                      v116 = sub_2241471F8();
                      sub_2231AA49C((uint64_t)v116, v114, (double *)v225, (uint64_t)v215, (__int128 *)v227);
                      if (SBYTE7(v216) < 0)
                      {
                        operator delete(v215[0]);
                        if (SHIBYTE(v241) < 0)
LABEL_201:
                          operator delete((void *)v240);
                      }
                      else
                      {
LABEL_200:
                        if (SHIBYTE(v241) < 0)
                          goto LABEL_201;
                      }
                      kdebug_trace();
                    }
                  }
                }
                v243 = 0u;
                v244 = 0u;
                LODWORD(v245[0]) = 728325624;
                kdebug_trace();
                v117 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v117 = v229.__r_.__value_.__l.__size_;
                if (v117 >= 0x11)
                {
                  v118 = &v229;
                  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v118 = (std::string *)v229.__r_.__value_.__r.__words[0];
                  v119 = v118->__r_.__value_.__r.__words[0];
                  v120 = v118->__r_.__value_.__l.__size_;
                  v121 = v118->__r_.__value_.__s.__data_[16];
                  if (v119 == 0x6365722E64337663 && v120 == 0x73746174532E6E6FLL && v121 == 46)
                  {
                    v124 = sub_223187510();
                    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v125 = &v229;
                    else
                      v125 = (std::string *)v229.__r_.__value_.__r.__words[0];
                    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v126 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
                    else
                      v126 = v229.__r_.__value_.__l.__size_;
                    v127 = MEMORY[0x2276858AC](v238);
                    if ((v127 != v78
                       || v79 == v78
                       || v127 == MEMORY[0x24BDACF98]
                       || v127 == MEMORY[0x24BDACF90]
                       || v127 == MEMORY[0x24BDACF88]
                       || v127 == v80
                       || v127 == v81)
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v225[0] = COERCE_VOID_(xpc_double_get_value(v238));
                    DWORD2(v216) = 0;
                    sub_223663638((uint64_t)v227, (uint64_t)v215, (uint64_t)&v237);
                    if (DWORD2(v216) == -1)
                      sub_22316DD70();
                    v227[0] = &v222;
                    ((void (*)(__int128 *__return_ptr, void **, void **))off_24EC55E08[DWORD2(v216)])(&v240, v227, v215);
                    if (DWORD2(v216) != -1)
                      ((void (*)(void **, void **))off_24EC55DC0[DWORD2(v216)])(v227, v215);
                    if (v241 >= 0)
                      v128 = &v240;
                    else
                      v128 = (__int128 *)v240;
                    if (v241 >= 0)
                      v129 = HIBYTE(v241);
                    else
                      v129 = *((_QWORD *)&v240 + 1);
                    sub_2231AA374((uint64_t *)v124, v125, v126, (uint64_t *)v225, (uint64_t)v128, v129);
                    if (SHIBYTE(v241) < 0)
                      operator delete((void *)v240);
                  }
                }
LABEL_445:
                kdebug_trace();
                if ((SHIBYTE(v229.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_446;
                operator delete(v229.__r_.__value_.__l.__data_);
                v200 = v239;
                if (v239)
                  goto LABEL_449;
              }
              ++__p.__r_.__value_.__l.__size_;
              continue;
            }
          }
        }
        v29 = 16 * size;
        v30 = v235[3] + v29;
        *(_OWORD *)&v229.__r_.__value_.__l.__data_ = *(_OWORD *)(*v235 + v29);
        sub_224564D6C(&v229.__r_.__value_.__r.__words[2], v30);
        DWORD2(v244) = 0;
        sub_223663638((uint64_t)&v237, (uint64_t)&v243, (uint64_t)&v229);
        if (DWORD2(v244) == -1)
          sub_22316DD70();
        *(_QWORD *)&v237 = v225;
        ((void (*)(void **__return_ptr, __int128 *, __int128 *))off_24EC55E08[DWORD2(v244)])(v227, &v237, &v243);
        if (DWORD2(v244) != -1)
          ((void (*)(__int128 *, __int128 *))off_24EC55DC0[DWORD2(v244)])(&v237, &v243);
        LODWORD(v239) = 0;
        v31 = operator new();
        *(_QWORD *)(v31 + 272) = 0;
        *(_OWORD *)(v31 + 240) = 0u;
        *(_OWORD *)(v31 + 256) = 0u;
        *(_OWORD *)(v31 + 208) = 0u;
        *(_OWORD *)(v31 + 224) = 0u;
        *(_OWORD *)(v31 + 176) = 0u;
        *(_OWORD *)(v31 + 192) = 0u;
        *(_OWORD *)(v31 + 144) = 0u;
        *(_OWORD *)(v31 + 160) = 0u;
        *(_OWORD *)(v31 + 112) = 0u;
        *(_OWORD *)(v31 + 128) = 0u;
        *(_OWORD *)(v31 + 80) = 0u;
        *(_OWORD *)(v31 + 96) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_OWORD *)(v31 + 64) = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)v31 = 0u;
        sub_223195210(v31);
        *(_QWORD *)&v243 = v31;
        sub_2245655F8((_QWORD *)(v31 + 16), &v229.__r_.__value_.__r.__words[2]);
        v32 = *(_DWORD *)(v31 + 120);
        if ((v32 & 0x10) != 0)
        {
          v35 = *(_QWORD *)(v31 + 112);
          v36 = *(_QWORD *)(v31 + 72);
          if (v35 < v36)
          {
            *(_QWORD *)(v31 + 112) = v36;
            v35 = v36;
          }
          v37 = *(const void **)(v31 + 64);
          v33 = v35 - (_QWORD)v37;
          if (v35 - (unint64_t)v37 > 0x7FFFFFFFFFFFFFF7)
LABEL_478:
            sub_22316DBC0();
        }
        else
        {
          if ((v32 & 8) == 0)
          {
            v33 = 0;
            HIBYTE(v241) = 0;
            v34 = &v240;
            goto LABEL_55;
          }
          v37 = *(const void **)(v31 + 40);
          v33 = *(_QWORD *)(v31 + 56) - (_QWORD)v37;
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_478;
        }
        if (v33 >= 0x17)
          break;
        HIBYTE(v241) = v33;
        v34 = &v240;
        if (v33)
          goto LABEL_54;
LABEL_55:
        *((_BYTE *)v34 + v33) = 0;
        v40 = v243;
        if ((_QWORD)v243)
        {
          *(_QWORD *)v243 = v26;
          *(_QWORD *)(v40 + *(_QWORD *)(v26 - 24)) = v213;
          *(_QWORD *)(v40 + 24) = v211;
          *(_QWORD *)(v40 + 16) = v212;
          if (*(char *)(v40 + 111) < 0)
            operator delete(*(void **)(v40 + 88));
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x227684BE0](v40 + 128);
          MEMORY[0x227684CE8](v40, 0x10B2C40EED050F3);
        }
        *(_QWORD *)&v243 = &v237;
        *((_QWORD *)&v243 + 1) = &v240;
        *(_QWORD *)&v244 = &v237;
        *((_QWORD *)&v244 + 1) = &v240;
        v245[0] = &v240;
        if ((_DWORD)v239 == -1)
          sub_22316DD70();
        v242 = &v243;
        ((void (*)(__int128 **, __int128 *))off_24EC55DF0[v239])(&v242, &v237);
        if (SHIBYTE(v241) < 0)
          operator delete((void *)v240);
        if ((_DWORD)v239 == -1)
          sub_22316DD70();
        *(_QWORD *)&v243 = &v240;
        ((void (*)(void **__return_ptr, __int128 *, __int128 *))off_24EC55E08[v239])(v225, &v243, &v237);
        if ((_DWORD)v239 != -1)
          ((void (*)(__int128 *, __int128 *))off_24EC55DC0[v239])(&v243, &v237);
        sub_224527BAC((uint64_t)v227, (CFStringRef *)&v243);
        sub_2236634D4((uint64_t)&v221, (const void *)v243, (uint64_t)v225);
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
        if (*((_QWORD *)&v243 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (v226 < 0)
        {
          operator delete(v225[0]);
          if ((v228 & 0x80000000) == 0)
          {
LABEL_72:
            v44 = v230;
            if (!v230)
              goto LABEL_28;
            goto LABEL_76;
          }
        }
        else if ((v228 & 0x80000000) == 0)
        {
          goto LABEL_72;
        }
        operator delete(v227[0]);
        v44 = v230;
        if (!v230)
          goto LABEL_28;
LABEL_76:
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
LABEL_28:
        ++__p.__r_.__value_.__l.__size_;
      }
      v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v38 = v33 | 7;
      v39 = v38 + 1;
      v34 = (__int128 *)operator new(v38 + 1);
      *((_QWORD *)&v240 + 1) = v33;
      v241 = v39 | 0x8000000000000000;
      *(_QWORD *)&v240 = v34;
LABEL_54:
      memmove(v34, v37, v33);
      goto LABEL_55;
    }
  }
}

void sub_22365AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;

  sub_2241231D8(v50);
  v53 = *(std::__shared_weak_count **)(v51 - 136);
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_2241231D8((uint64_t)&a49);
  if (v49)
  {
    v56 = (unint64_t *)&v49->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2241231D8((uint64_t)&a36);
  if (a33 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a15);
  if (a25 < 0)
  {
    operator delete(a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22365B1B8);
}

void sub_22365B09C()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x22365B10CLL);
}

void sub_22365B0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22319B964((uint64_t)va);
  JUMPOUT(0x22365B10CLL);
}

void sub_22365B0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22365B1B8);
}

void sub_22365B108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  sub_2231874DC(v52 - 144);
  if (a44 < 0)
    operator delete(__p);
  sub_223198118(v52 - 224);
  sub_22365B530((uint64_t)&a46);
  sub_22365B530((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_22365B144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x22365B1E4);
  JUMPOUT(0x22365B1E8);
}

void sub_22365B15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_223167354(v49 - 144);
  sub_22365B530((uint64_t)&a43);
  sub_22365B530((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_22365B164(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      xpc_release(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x22365B1B8);
}

void sub_22365B188()
{
  __cxa_end_catch();
  JUMPOUT(0x22365B190);
}

void sub_22365B1B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_22365B1CC()
{
  JUMPOUT(0x22365B1E8);
}

void sub_22365B208(_QWORD *a1, void *a2, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  __int128 v11;
  std::string *p_p;
  size_t v13;
  uint64_t v14;
  std::mutex *v15;
  std::string __p;
  _QWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v9 = *a1;
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = ".";
    v17[3] = 1;
    v17[4] = a5;
    v17[5] = a6;
    sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &__p);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::mutex::lock((std::mutex *)(v9 + 152));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v11;
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = *((_QWORD *)&v11 + 1);
    sub_223FD47E8(v9 + 32, p_p, v13, a4);
    std::mutex::unlock((std::mutex *)(v9 + 152));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *a1;
    v15 = (std::mutex *)(*a1 + 152);
    std::mutex::lock(v15);
    sub_223FD47E8(v14 + 32, a2, a3, a4);
    std::mutex::unlock(v15);
  }
}

void sub_22365B350(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22365B364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22365B39C(_QWORD *a1, void *a2, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  __int128 v11;
  std::string *p_p;
  size_t v13;
  uint64_t v14;
  std::mutex *v15;
  std::string __p;
  _QWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v9 = *a1;
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = ".";
    v17[3] = 1;
    v17[4] = a5;
    v17[5] = a6;
    sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &__p);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::mutex::lock((std::mutex *)(v9 + 152));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v11;
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = *((_QWORD *)&v11 + 1);
    sub_223FD4908(v9 + 56, p_p, v13, a4);
    std::mutex::unlock((std::mutex *)(v9 + 152));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *a1;
    v15 = (std::mutex *)(*a1 + 152);
    std::mutex::lock(v15);
    sub_223FD4908(v14 + 56, a2, a3, a4);
    std::mutex::unlock(v15);
  }
}

void sub_22365B4E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22365B4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22365B530(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_22365B598(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void *v7;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void **)*a1;
      if (!*a1)
        return a1;
LABEL_6:
      v6 = (void **)a1[1];
      v7 = v5;
      if (v6 == v5)
      {
LABEL_15:
        a1[1] = v5;
        operator delete(v7);
        return a1;
      }
      while (1)
      {
        if (*((char *)v6 - 1) < 0)
        {
          operator delete(*(v6 - 3));
          if (*((char *)v6 - 33) < 0)
LABEL_13:
            operator delete(*(v6 - 7));
        }
        else if (*((char *)v6 - 33) < 0)
        {
          goto LABEL_13;
        }
        v6 -= 7;
        if (v6 == v5)
        {
          v7 = *a1;
          goto LABEL_15;
        }
      }
    }
  }
  v5 = (void **)*a1;
  if (*a1)
    goto LABEL_6;
  return a1;
}

uint64_t sub_22365B668()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  std::string *v10;
  uint64_t i;
  void **v12;
  _OWORD *v13;
  size_t v14;
  char *v15;
  char *v16;
  void **v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  void **v22;
  _QWORD *v23;
  std::string *data;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _OWORD __dst[156];
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string __token[104];
  uint64_t v46;

  v0 = MEMORY[0x24BDAC7A8]();
  v39 = v1;
  v3 = v2;
  v5 = v4;
  v6 = v0;
  v46 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(v0 + 8) = 0u;
  v7 = (void **)(v0 + 8);
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  v8 = (void **)(v0 + 64);
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  v9 = (void **)(v0 + 120);
  *(_OWORD *)(v0 + 168) = 0u;
  v10 = (std::string *)(v0 + 168);
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_QWORD *)v0 = &off_24EC55B50;
  *(_QWORD *)(v0 + 56) = &unk_24EC55B88;
  *(_QWORD *)(v0 + 112) = &unk_24EC55BB0;
  v41 = v0 + 216;
  sub_223223C50(v0 + 216);
  *(_OWORD *)(v6 + 1416) = 0u;
  *(_QWORD *)(v6 + 1432) = sub_223662B14;
  *((_BYTE *)&__token[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__token, "/dev/urandom");
  v40 = (uint64_t *)(v6 + 1416);
  std::random_device::random_device((std::random_device *)(v6 + 1440), __token);
  v38 = v3;
  if (SHIBYTE(__token[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token[0].__r_.__value_.__l.__data_);
  for (i = 0; i != 2496; i += 4)
    *(_DWORD *)((char *)&__token[0].__r_.__value_.__l.__data_ + i) = MEMORY[0x2276846DC](v6 + 1440);
  memcpy(__dst, __token, sizeof(__dst));
  sub_2232D6424(__dst, v6 + 1448);
  *((_BYTE *)&__token[0].__r_.__value_.__s + 23) = 19;
  strcpy((char *)__token, "Shared session node");
  *(_QWORD *)&__dst[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)__dst + 8) = xmmword_2245C7A60;
  strcpy(*(char **)&__dst[0], "Handles session wide pre and post-processing task.");
  if (v10 != __token)
  {
    if (*(char *)(v6 + 191) < 0)
      sub_22319C4B8((void **)&v10->__r_.__value_.__l.__data_, __token, 0x13uLL);
    else
      *v10 = __token[0];
  }
  v12 = (void **)(v6 + 192);
  if ((_OWORD *)(v6 + 192) != __dst)
  {
    if (*(char *)(v6 + 215) < 0)
    {
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v13 = __dst;
      else
        v13 = *(_OWORD **)&__dst[0];
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v14 = BYTE7(__dst[1]);
      else
        v14 = *((_QWORD *)&__dst[0] + 1);
      sub_22319C4B8(v12, v13, v14);
    }
    else if ((BYTE7(__dst[1]) & 0x80) != 0)
    {
      sub_22319C3F4(v12, *(void **)&__dst[0], *((size_t *)&__dst[0] + 1));
    }
    else
    {
      *(_OWORD *)v12 = __dst[0];
      *(_QWORD *)(v6 + 208) = *(_QWORD *)&__dst[1];
    }
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    operator delete(*(void **)&__dst[0]);
    if ((SHIBYTE(__token[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((SHIBYTE(__token[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__token[0].__r_.__value_.__l.__data_);
LABEL_23:
  v15 = (char *)operator new(0x20uLL);
  strcpy(v15, "Postprocess FrameBundleResult");
  v16 = (char *)operator new(0x28uLL);
  strcpy(v16, "Post-processes FrameBundleResult.");
  sub_223197FA4(__token, v15, 0x1DuLL);
  if (*(char *)(v6 + 31) < 0)
    operator delete(*v7);
  *(std::string *)v7 = __token[0];
  sub_223197FA4(__token, v16, 0x21uLL);
  v17 = (void **)(v6 + 32);
  if (*(char *)(v6 + 55) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)&__token[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 48) = *((_QWORD *)&__token[0].__r_.__value_.__l + 2);
  operator delete(v16);
  operator delete(v15);
  v18 = (char *)operator new(0x20uLL);
  strcpy(v18, "FilesystemAccess granted");
  v19 = (char *)operator new(0x30uLL);
  strcpy(v19, "File system access granted event handler.");
  sub_223197FA4(__token, v18, 0x18uLL);
  if (*(char *)(v6 + 87) < 0)
    operator delete(*v8);
  *(std::string *)v8 = __token[0];
  sub_223197FA4(__token, v19, 0x29uLL);
  v20 = (void **)(v6 + 88);
  if (*(char *)(v6 + 111) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&__token[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 104) = *((_QWORD *)&__token[0].__r_.__value_.__l + 2);
  operator delete(v19);
  operator delete(v18);
  v21 = (char *)operator new(0x28uLL);
  strcpy(v21, "Failure snapshot done event handler.");
  if (*(char *)(v6 + 143) < 0)
    operator delete(*v9);
  strcpy((char *)(v6 + 120), "FailureSnapshot done");
  *(_BYTE *)(v6 + 143) = 20;
  sub_223197FA4(__token, v21, 0x24uLL);
  v22 = (void **)(v6 + 144);
  if (*(char *)(v6 + 167) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)&__token[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 160) = *((_QWORD *)&__token[0].__r_.__value_.__l + 2);
  operator delete(v21);
  sub_2235FBEE8(v41, v5);
  v23 = (_QWORD *)operator new();
  __token[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC55E30;
  __token[0].__r_.__value_.__l.__size_ = (std::string::size_type)sub_22365BF8C;
  __token[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__token;
  sub_223FDBA28(v23, (uint64_t)__token);
  data = (std::string *)__token[1].__r_.__value_.__l.__data_;
  if ((std::string *)__token[1].__r_.__value_.__l.__data_ == __token)
  {
    v25 = 4;
    data = __token;
  }
  else
  {
    if (!__token[1].__r_.__value_.__r.__words[0])
      goto LABEL_42;
    v25 = 5;
  }
  (*(void (**)(std::string *))(data->__r_.__value_.__r.__words[0] + 8 * v25))(data);
LABEL_42:
  v26 = *(_QWORD *)(v6 + 1424);
  *(_QWORD *)(v6 + 1424) = v23;
  if (v26)
    (*(void (**)(uint64_t))(v6 + 1432))(v26);
  *(_QWORD *)(v6 + 1432) = sub_223662B14;
  v27 = *v39;
  if (*v39)
  {
    *v39 = 0;
    v28 = *v40;
    *v40 = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  else
  {
    if (*(_BYTE *)(v6 + 297) && (sub_224569D7C(), sub_224569A80(), os_variant_has_internal_diagnostics()))
    {
      __token[0].__r_.__value_.__s.__data_[0] = 0;
      __token[1].__r_.__value_.__s.__data_[0] = 0;
      if (*(_BYTE *)(v5 + 72))
      {
        if (*(char *)(v5 + 71) < 0)
          sub_223197FA4(__token, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
        else
          __token[0] = *(std::string *)(v5 + 48);
        __token[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    else
    {
      __token[0].__r_.__value_.__s.__data_[0] = 0;
      __token[1].__r_.__value_.__s.__data_[0] = 0;
    }
    v29 = operator new();
    v30 = (std::__shared_weak_count *)operator new(0x20uLL);
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55D68;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC65060;
    *(_QWORD *)&__dst[0] = v30 + 1;
    *((_QWORD *)&__dst[0] + 1) = v30;
    v44 = 0;
    v43 = 0;
    sub_223FDC478(v29, __token, v38, __dst);
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    v33 = v44;
    if (v44)
    {
      v34 = (unint64_t *)&v44->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *v40;
    *v40 = v29;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (__token[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__token[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__token[0].__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)*v40 + 16))(*v40);
  return v6;
}

void sub_22365BDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v12;
  std::random_device *v13;
  uint64_t v15;
  uint64_t v16;

  if (LOBYTE(STACK[0xA08]) && SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  sub_2245658A0(v12 + 3952);
  std::random_device::~random_device(v13);
  v15 = *(_QWORD *)(v12 + 1424);
  *(_QWORD *)(v12 + 1424) = 0;
  if (v15)
    (*(void (**)(void))(v12 + 1432))();
  v16 = *a11;
  *a11 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_223223FC0(a12);
  sub_22365BFA4(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_22365BF8C()
{
  return analytics_send_event();
}

uint64_t sub_22365BFA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC55CA0;
  *(_QWORD *)(a1 + 56) = &unk_24EC55CC8;
  *(_QWORD *)(a1 + 112) = &unk_24EC55CF0;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24EC55D40;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24EC55D40;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24EC41890;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24EC41890;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24EC55D18;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24EC55D18;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22365C0F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1416) + 16))(*(_QWORD *)(a1 + 1416));
}

uint64_t sub_22365C100(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1360) + 16))(*(_QWORD *)(a1 + 1360));
}

void sub_22365C110(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count_vtbl *empty;
  const char *v7;
  std::__shared_weak_count_vtbl *v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 v24;
  int v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type size;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  int v46;
  __n128 *v49;
  std::string *v50;
  size_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *__p[2];
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  int v62;
  std::string v63;
  xpc_object_t xdict;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  mach_timebase_info info;
  mach_timebase_info v69;
  std::__shared_weak_count *v70;
  _QWORD v71[2];
  _BYTE value[39];
  __int16 v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 1416);
  LOBYTE(__p[0]) = 0;
  v59 = 0;
  if (a2[24])
  {
    if (a2[23] < 0)
    {
      sub_223197FA4(__p, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v58 = *((_QWORD *)a2 + 2);
    }
    v59 = 1;
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, __p);
  if (v59 && SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  if (a2[24])
  {
    v5 = *(_QWORD *)(a1 + 1424);
    empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
    v7 = a2;
    if (a2[23] < 0 && (v7 = *(const char **)a2) == 0)
      v8 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    else
      v8 = (std::__shared_weak_count_vtbl *)xpc_string_create(v7);
    sub_22340E890((std::__shared_weak_count_vtbl **)value, v8, 0);
    v9 = xdict;
    if (!xdict)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = xdict;
    }
    xpc_dictionary_set_value(v9, "uuid", *(xpc_object_t *)value);
    v10 = *(std::__shared_weak_count **)&value[8];
    if (*(_QWORD *)&value[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_QWORD *)value = "cv3d.recon.";
    *(_QWORD *)&value[8] = 11;
    *(_QWORD *)&value[16] = "Stats.CoreAnalytics";
    *(_QWORD *)&value[24] = 19;
    sub_2231A9820((uint64_t)value, (uint64_t)&value[32], 0, 0, &v63);
    sub_224569D7C();
    sub_224569A80();
    if (!os_variant_has_internal_diagnostics())
      goto LABEL_62;
    v13 = sub_2241471F8();
    v14 = v13[2];
    if (!v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = v13[2];
    }
    v15 = *(_QWORD *)(v14 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 == v17)
      goto LABEL_62;
    sub_2241471F8();
    v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
      goto LABEL_62;
    v60 = 0u;
    v61 = 0u;
    v62 = 728325608;
    kdebug_trace();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19)
      || (v20 = *(double *)&qword_255788F20,
          v21 = sub_2241471F8(),
          !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19)))
    {
LABEL_61:
      kdebug_trace();
LABEL_62:
      memset(value, 0, 32);
      *(_DWORD *)&value[32] = 728325624;
      kdebug_trace();
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v63.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v43 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)v63.__r_.__value_.__r.__words[0];
        v44 = v43->__r_.__value_.__r.__words[0];
        v45 = v43->__r_.__value_.__l.__size_;
        v46 = v43->__r_.__value_.__s.__data_[16];
        if (v44 == 0x6365722E64337663 && v45 == 0x73746174532E6E6FLL && v46 == 46)
        {
          v49 = sub_223187510();
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v63;
          else
            v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          else
            v51 = v63.__r_.__value_.__l.__size_;
          sub_223662C00(v49, v50, v51, (void **)a2, (uint64_t)"Snapshots", 9);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      *(_QWORD *)value = operator new(0x28uLL);
      *(_OWORD *)&value[8] = xmmword_2245C4640;
      strcpy(*(char **)value, "com.apple.Recon3D.recon.snapshots_v1");
      sub_223FDBB3C(v5, (uint64_t)value, (uint64_t)&xdict);
      if ((value[23] & 0x80000000) != 0)
        operator delete(*(void **)value);
      v52 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      return;
    }
    v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
    v23 = mach_continuous_time();
    v24 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v55) = info.numer;
      LODWORD(v56) = info.denom;
      *(double *)&qword_255795558 = (double)v55 / (double)v56;
      __cxa_guard_release(&qword_255795560);
    }
    *(_QWORD *)value = llround(*(double *)&qword_255795558 * (double)v23);
    *(_QWORD *)&value[8] = 2;
    strcpy(&value[16], "Snapshots");
    *(_QWORD *)&value[26] = v71[0];
    *(_QWORD *)&value[31] = *(_QWORD *)((char *)v71 + 5);
    v73 = 265;
    v70 = 0;
    v71[0] = 0;
    *(_QWORD *)((char *)v71 + 5) = 0;
    v74 = 0;
    v75 = 0;
    v76 = (uint64_t)(v20 * 1000000000.0);
    v77 = 2;
    v78 = 1;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v25 = a2[23];
    if (v25 >= 0)
      v26 = a2;
    else
      v26 = *(char **)a2;
    if (v25 >= 0)
      v27 = a2[23];
    else
      v27 = *((_QWORD *)a2 + 1);
    info = 0;
    v69 = 0;
    if (!v27)
    {
LABEL_49:
      sub_22450ED50(&v67, 5, (uint64_t)&info);
      if (info)
      {
        v69 = info;
        operator delete(*(void **)&info);
      }
      v66 = v67;
      sub_223305AC8((uint64_t *)&v66, (uint64_t)value, &info);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      sub_2231AD66C((uint64_t)value);
      sub_2231AA5A4((uint64_t)v21, v22, (uint64_t)&info);
      v39 = v70;
      if (v70)
      {
        v40 = (unint64_t *)&v70->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      goto LABEL_61;
    }
    if ((v27 & 0x8000000000000000) != 0)
      sub_223662A04();
    v28 = (char *)operator new(v27);
    info = (mach_timebase_info)v28;
    v70 = (std::__shared_weak_count *)&v28[v27];
    if (v27 < 0x20)
    {
      v29 = v26;
    }
    else
    {
      v29 = v26;
      if ((unint64_t)(v28 - v26) >= 0x20)
      {
        v29 = &v26[v27 & 0xFFFFFFFFFFFFFFE0];
        v30 = &v28[v27 & 0xFFFFFFFFFFFFFFE0];
        v31 = v28 + 16;
        v32 = (__int128 *)(v26 + 16);
        v33 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        v28 += v27 & 0xFFFFFFFFFFFFFFE0;
        if (v27 == (v27 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_48;
      }
    }
    v30 = v28;
    do
    {
      v35 = *v29++;
      *v30++ = v35;
    }
    while (v29 != &v26[v27]);
LABEL_48:
    v69 = (mach_timebase_info)v30;
    goto LABEL_49;
  }
}

void sub_22365C884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_guard_abort(&qword_255795560);
  sub_2231874DC((uint64_t)&a17);
  if (a29 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_22365CA10(uint64_t a1, char *a2)
{
  sub_22365C110(a1 - 112, a2);
}

void sub_22365CA18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  int v27;
  __n128 *v30;
  std::string *v31;
  size_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  const char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned __int8 v61;
  const char *v62;
  size_t v63;
  _BYTE *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  _QWORD *v117;
  _QWORD *j;
  _QWORD *v119;
  _QWORD *k;
  _QWORD *v121;
  _QWORD *m;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  const char *v131;
  size_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  const char *v135;
  size_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  size_t v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  std::string::size_type v156;
  int v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  unint64_t v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  _BYTE *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  __int128 v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t n;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  _QWORD *v214;
  uint64_t v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  void **v226;
  void **v227;
  void *v228;
  void **v229;
  void **v230;
  void *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  int v238;
  int v239;
  __int128 v241;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v244;
  const char *v245;
  int v246;
  const char *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  __int128 v252;
  void *v253[2];
  void *v254[4];
  unint64_t v255;
  char v256;
  std::string v257;
  int **v258;
  _QWORD v259[3];
  _QWORD *v260;
  _BYTE v261[24];
  _BYTE *v262;
  _BYTE v263[40];
  void **v264;
  size_t v265;
  unint64_t v266;
  char v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 297) && (sub_224569D7C(), sub_224569A80(), os_variant_has_internal_diagnostics()))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1416) + 24))(*(_QWORD *)(a1 + 1416));
    v7 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v7 & 1) != 0)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    v8 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v8 & 1) != 0)
      goto LABEL_6;
  }
  if (__cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
LABEL_6:
  std::mutex::lock(&stru_255789280);
  memset(v254, 0, sizeof(v254));
  *(_OWORD *)v253 = 0u;
  v9 = qword_2557892C0;
  v10 = qword_2557892C8;
  v255 = 0xAAAAAAAAAAAAAAABLL * ((qword_2557892C8 - qword_2557892C0) >> 3);
  if (v6)
  {
    memset(v263, 0, 24);
    sub_223662D94(v263, qword_2557892C0, qword_2557892C8, 0xAAAAAAAAAAAAAAABLL * ((qword_2557892C8 - qword_2557892C0) >> 3));
    *(_OWORD *)v253 = *(_OWORD *)v263;
    v254[0] = *(void **)&v263[16];
    memset(v263, 0, 24);
    sub_223662D94(v263, qword_2557892D8, qword_2557892E0, 0xAAAAAAAAAAAAAAABLL * ((qword_2557892E0 - qword_2557892D8) >> 3));
    v9 = qword_2557892C0;
    v10 = qword_2557892C8;
    *(_OWORD *)&v254[1] = *(_OWORD *)v263;
    v254[3] = *(void **)&v263[16];
  }
  while (v10 != v9)
  {
    if (*(char *)(v10 - 1) < 0)
      operator delete(*(void **)(v10 - 24));
    v10 -= 24;
  }
  qword_2557892C8 = v9;
  v11 = qword_2557892D8;
  for (i = qword_2557892E0; i != v11; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  qword_2557892E0 = v11;
  std::mutex::unlock(&stru_255789280);
  v14 = v255;
  v239 = v6;
  if (!v255)
    goto LABEL_173;
  *(_QWORD *)v263 = "cv3d.recon.";
  *(_QWORD *)&v263[8] = 11;
  *(_QWORD *)&v263[16] = "Stats.Errors";
  *(_QWORD *)&v263[24] = 12;
  sub_2231A9820((uint64_t)v263, (uint64_t)&v263[32], 0, 0, &v257);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v15 = sub_2241471F8();
    v16 = v15[2];
    if (!v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v15[2];
    }
    v17 = *(_QWORD *)(v16 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      sub_2241471F8();
      v21 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
      {
        memset(v263, 0, 32);
        *(_DWORD *)&v263[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          HIBYTE(rep) = 5;
          strcpy((char *)__p, "count");
          v250[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v250[1] = (void *)2;
          v22 = sub_2241471F8();
          sub_223663E94((uint64_t)v22, v21, (uint64_t *)&v255, (uint64_t)__p, (__int128 *)v250);
          if (SHIBYTE(rep) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v263, 0, 32);
  *(_DWORD *)&v263[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v257.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v24 = &v257;
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v257.__r_.__value_.__r.__words[0];
    v25 = v24->__r_.__value_.__r.__words[0];
    v26 = v24->__r_.__value_.__l.__size_;
    v27 = v24->__r_.__value_.__s.__data_[16];
    if (v25 == 0x6365722E64337663 && v26 == 0x73746174532E6E6FLL && v27 == 46)
    {
      v30 = sub_223187510();
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v257;
      else
        v31 = (std::string *)v257.__r_.__value_.__r.__words[0];
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
      else
        v32 = v257.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v30, v31, v32, (uint64_t *)&v255, (uint64_t)"count", 5);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  memset(v263, 0, 32);
  *(_DWORD *)&v263[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v33 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v233) = HIDWORD(__p[0]);
    LODWORD(v232) = __p[0];
    *(double *)&qword_255795558 = (double)v232 / (double)v233;
    __cxa_guard_release(&qword_255795560);
  }
  v34 = v255;
  v35 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D130);
  qword_25578D170 += v34;
  std::mutex::unlock(&stru_25578D130);
  kdebug_trace();
  if (!v6)
    goto LABEL_173;
  v36 = a1 + 1448;
  v257.__r_.__value_.__r.__words[0] = a1 + 1448;
  v37 = (_QWORD *)operator new();
  *v37 = &off_24EC55EE0;
  v37[1] = 0;
  v37[2] = 0;
  v37[3] = a1 + 1448;
  v257.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
  v257.__r_.__value_.__r.__words[2] = 0x300000000;
  v38 = *(_QWORD *)(a1 + 3944);
  v39 = (v38 + 1) % 0x270uLL;
  v40 = 4 * v38;
  v41 = *(_DWORD *)(v36 + 4 * ((v38 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v36 + 4 * v39) & 0x7FFFFFFE | *(_DWORD *)(v36 + 4 * v38) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v36 + 4 * v39) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v36 + v40) = v41;
  *(_QWORD *)(a1 + 3944) = v39;
  if (v14 <= 1
    && (((v41 ^ (v41 >> 11)) ^ ((((v41 ^ (v41 >> 11)) << 15) & 0x40000 ^ ((v41 ^ (v41 >> 11)) << 7) ^ v41 ^ (v41 >> 11)) >> 18)) & 3) != 0)
  {
    sub_22365F2A4(&v258);
    if (*v258[7] > 3)
      goto LABEL_169;
    v42 = *((unsigned __int8 *)v258 + 72);
    v43 = sub_22322F254((uint64_t)v258, "OSLogSurrogateAppender", 1, 0);
    v44 = v43;
    if (!v42 && !v43)
      goto LABEL_169;
    __p[0] = &v258;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v244 = 3;
    v245 = "unknown file";
    v246 = 272;
    v248 = 0;
    v249 = 0;
    v247 = "unknown function";
    v45 = *(_QWORD *)__p[0];
    v235 = *(_QWORD *)__p[0];
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v47 = *(const char **)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
    }
    else
    {
      v46 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v47 = (const char *)(*(_QWORD *)__p[0] + 16);
    }
    v234 = *(_QWORD *)__p[0] + 16;
    v237 = a3;
    v61 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v263);
      sub_223199C58("com.apple.cv3d", (unint64_t)v263, &xmmword_255788F40);
      if (v263[24] && (v263[23] & 0x80000000) != 0)
        operator delete(*(void **)v263);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v62 = (const char *)&xmmword_255788F40;
    else
      v62 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v63 = byte_255788F57;
    else
      v63 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v263 = os_log_create(v62, v47);
    v64 = &v263[8];
    if (v63 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v63 >= 0x17)
    {
      v65 = v47;
      v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17)
        v66 = v63 | 7;
      v67 = v66 + 1;
      v64 = operator new(v66 + 1);
      *(_QWORD *)&v263[16] = v63;
      *(_QWORD *)&v263[24] = v67 | 0x8000000000000000;
      *(_QWORD *)&v263[8] = v64;
      v47 = v65;
    }
    else
    {
      v263[31] = v63;
      if (!v63)
      {
LABEL_103:
        v64[v63] = 0;
        v263[32] = 1;
        v68 = (void **)&v264;
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a3 = v237;
        if (v46 >= 0x17)
        {
          v69 = v47;
          v70 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v70 = v46 | 7;
          v71 = v70 + 1;
          v68 = (void **)operator new(v70 + 1);
          v265 = v46;
          v266 = v71 | 0x8000000000000000;
          v264 = v68;
          v47 = v69;
        }
        else
        {
          HIBYTE(v266) = v46;
          if (!v46)
          {
LABEL_111:
            *((_BYTE *)v68 + v46) = 0;
            v267 = 1;
            v72 = *(NSObject **)v263;
            if (SHIBYTE(v266) < 0)
              operator delete(v264);
            if (v263[32] && (v263[31] & 0x80000000) != 0)
              operator delete(*(void **)&v263[8]);
            if (*(_QWORD *)v263)
              os_release(*(void **)v263);
            if (v44 && *(_QWORD *)(v44 + 24))
            {
              v73 = _os_log_pack_size();
              v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
              v75 = (std::__shared_weak_count *)operator new();
              v76 = v75;
              v75->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v75->__shared_owners_;
              v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v75->__shared_weak_owners_ = 0;
              v75[1].__vftable = v74;
              *(_QWORD *)v263 = v74;
              *(_QWORD *)&v263[8] = v74;
              *(_QWORD *)&v263[16] = v75;
              do
                v78 = __ldxr(p_shared_owners);
              while (__stxr(v78 + 1, p_shared_owners));
              *(_QWORD *)&v263[24] = 0;
              *(_QWORD *)&v263[32] = 0;
              v264 = 0;
              do
                v79 = __ldaxr(p_shared_owners);
              while (__stlxr(v79 - 1, p_shared_owners));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v76);
              }
              v80 = *(_QWORD *)v263;
              *(_WORD *)_os_log_pack_fill() = 0;
              v81 = (char *)operator new();
              v82 = *(unsigned __int8 *)(v235 + 39);
              v83 = v234;
              if ((v82 & 0x80u) != 0)
              {
                v83 = *(_QWORD *)(v235 + 16);
                v82 = *(_QWORD *)(v235 + 24);
              }
              *(_QWORD *)v81 = v80;
              *(_OWORD *)(v81 + 8) = *(_OWORD *)&v263[8];
              *(_QWORD *)&v263[8] = 0;
              *(_QWORD *)&v263[16] = 0;
              *(_OWORD *)(v81 + 24) = *(_OWORD *)&v263[24];
              *(_QWORD *)&v263[24] = 0;
              *(_QWORD *)&v263[32] = 0;
              *((_QWORD *)v81 + 5) = v83;
              *((_QWORD *)v81 + 6) = v82;
              v81[56] = 1;
              *(_QWORD *)&v252 = 0;
              v250[0] = v81;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), v250);
              v84 = v250[0];
              v250[0] = 0;
              if (v84)
              {
                v85 = (std::__shared_weak_count *)*((_QWORD *)v84 + 4);
                if (v85)
                {
                  v86 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                v88 = (std::__shared_weak_count *)*((_QWORD *)v84 + 2);
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
                v91 = v252;
                *(_QWORD *)&v252 = 0;
                if (v91)
                {
                  v92 = *(std::__shared_weak_count **)(v91 + 32);
                  if (v92)
                  {
                    v93 = (unint64_t *)&v92->__shared_owners_;
                    do
                      v94 = __ldaxr(v93);
                    while (__stlxr(v94 - 1, v93));
                    if (!v94)
                    {
                      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                      std::__shared_weak_count::__release_weak(v92);
                    }
                  }
                  v95 = *(std::__shared_weak_count **)(v91 + 16);
                  if (v95)
                  {
                    v96 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  MEMORY[0x227684CE8](v91, 0x10F0C40B62ED6C6);
                }
              }
              v98 = *(std::__shared_weak_count **)&v263[32];
              if (*(_QWORD *)&v263[32])
              {
                v99 = (unint64_t *)(*(_QWORD *)&v263[32] + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = *(std::__shared_weak_count **)&v263[16];
              if (*(_QWORD *)&v263[16])
              {
                v102 = (unint64_t *)(*(_QWORD *)&v263[16] + 8);
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
            }
            else
            {
              os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
              *(_WORD *)v263 = 0;
              v104 = (void *)_os_log_send_and_compose_impl();
              if (v104)
                free(v104);
            }
            if (v42)
            {
              sub_22322C138((uint64_t)__p, "FailureSnapshot: Errors detected, but not collected as failure");
              sub_223182C08((uint64_t)__p);
            }
            sub_223182C08((uint64_t)__p);
            v58 = v249;
            if (!v249)
              goto LABEL_169;
            v105 = (unint64_t *)&v249->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (v106)
              goto LABEL_169;
LABEL_86:
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
            goto LABEL_169;
          }
        }
        memmove(v68, v47, v46);
        goto LABEL_111;
      }
    }
    memmove(v64, v62, v63);
    goto LABEL_103;
  }
  *(_QWORD *)&v263[8] = 0;
  *(_QWORD *)&v263[16] = 0;
  *(_QWORD *)v263 = &v263[8];
  sub_2245312C0(v263, __p);
  v252 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)v263, *(char **)&v263[8]);
  HIBYTE(rep) = 5;
  strcpy((char *)__p, "error");
  *(_DWORD *)&v263[24] = 0;
  sub_22366424C((uint64_t)&v258, (uint64_t)v263, (const char **)v253);
  if (*(_DWORD *)&v263[24] == -1)
    sub_22316DD70();
  v258 = (int **)&v256;
  ((void (*)(void **__return_ptr, int ***, _BYTE *))off_24EC55E08[*(unsigned int *)&v263[24]])(v250, &v258, v263);
  if (*(_DWORD *)&v263[24] != -1)
    ((void (*)(int ***, _BYTE *))off_24EC55DC0[*(unsigned int *)&v263[24]])(&v258, v263);
  sub_224527E14((uint64_t)__p, (CFStringRef *)v263);
  sub_2232EED78((uint64_t)&v252, *(const void **)v263, (uint64_t)v250);
  v48 = *(std::__shared_weak_count **)&v263[8];
  if (*(_QWORD *)&v263[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&v263[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if ((v251 & 0x80000000) == 0)
  {
    if ((SHIBYTE(rep) & 0x80000000) == 0)
      goto LABEL_70;
LABEL_73:
    operator delete(__p[0]);
    v52 = atomic_load((unsigned __int8 *)&qword_25578E150);
    if ((v52 & 1) != 0)
      goto LABEL_74;
    goto LABEL_401;
  }
  operator delete(v250[0]);
  if (SHIBYTE(rep) < 0)
    goto LABEL_73;
LABEL_70:
  v51 = atomic_load((unsigned __int8 *)&qword_25578E150);
  if ((v51 & 1) != 0)
    goto LABEL_74;
LABEL_401:
  if (__cxa_guard_acquire(&qword_25578E150))
  {
    sub_223662EC4((uint64_t)&stru_25578E0D0);
    __cxa_atexit((void (*)(void *))sub_223663030, &stru_25578E0D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E150);
  }
LABEL_74:
  v53 = v254[1];
  if (*((char *)v254[1] + 23) < 0)
  {
    v53 = *(void **)v254[1];
    v54 = (void *)*((_QWORD *)v254[1] + 1);
  }
  else
  {
    v54 = (void *)*((unsigned __int8 *)v254[1] + 23);
  }
  __p[0] = v53;
  __p[1] = v54;
  sub_2232EEEDC(v250, (uint64_t)&v252);
  sub_22365EEEC((uint64_t)&stru_25578E0D0, 0, (uint64_t)__p, v250, (uint64_t)v263);
  v55 = (std::__shared_weak_count *)v250[1];
  if (v250[1])
  {
    v56 = (unint64_t *)((char *)v250[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  if (*((_QWORD *)&v252 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
      goto LABEL_86;
  }
LABEL_169:
  v107 = (std::__shared_weak_count *)v257.__r_.__value_.__l.__size_;
  if (v257.__r_.__value_.__l.__size_)
  {
    v108 = (unint64_t *)(v257.__r_.__value_.__l.__size_ + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
      if (!*(_BYTE *)(a2 + 464))
        goto LABEL_201;
      goto LABEL_174;
    }
  }
LABEL_173:
  if (!*(_BYTE *)(a2 + 464))
  {
LABEL_201:
    sub_22365F2A4(&v252);
    v113 = a1;
    if (**(int **)(v252 + 56) > 3)
      goto LABEL_289;
    v127 = *(unsigned __int8 *)(v252 + 72);
    v128 = sub_22322F254(v252, "OSLogSurrogateAppender", 1, 0);
    v129 = v128;
    if (!v127 && !v128)
      goto LABEL_289;
    v238 = v127;
    __p[0] = &v252;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v244 = 3;
    v245 = "unknown file";
    v246 = 287;
    v248 = 0;
    v249 = 0;
    v247 = "unknown function";
    v130 = *(_QWORD *)__p[0];
    v131 = (const char *)(*(_QWORD *)__p[0] + 16);
    v236 = v131;
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v131 = *(const char **)(v130 + 16);
      v132 = *(_QWORD *)(v130 + 24);
      v134 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v134 & 1) != 0)
        goto LABEL_208;
    }
    else
    {
      v132 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v133 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v133 & 1) != 0)
        goto LABEL_208;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v263);
      sub_223199C58("com.apple.cv3d", (unint64_t)v263, &xmmword_255788F40);
      if (v263[24] && (v263[23] & 0x80000000) != 0)
        operator delete(*(void **)v263);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v113 = a1;
    }
LABEL_208:
    if (byte_255788F57 >= 0)
      v135 = (const char *)&xmmword_255788F40;
    else
      v135 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v136 = byte_255788F57;
    else
      v136 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v263 = os_log_create(v135, v131);
    v137 = &v263[8];
    if (v136 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v136 >= 0x17)
    {
      v138 = a3;
      v139 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v136 | 7) != 0x17)
        v139 = v136 | 7;
      v140 = v139 + 1;
      v137 = operator new(v139 + 1);
      *(_QWORD *)&v263[16] = v136;
      *(_QWORD *)&v263[24] = v140 | 0x8000000000000000;
      *(_QWORD *)&v263[8] = v137;
      a3 = v138;
      v113 = a1;
    }
    else
    {
      v263[31] = v136;
      if (!v136)
      {
LABEL_222:
        v137[v136] = 0;
        v263[32] = 1;
        v141 = (void **)&v264;
        if (v132 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v132 >= 0x17)
        {
          v142 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v132 | 7) != 0x17)
            v142 = v132 | 7;
          v143 = v142 + 1;
          v141 = (void **)operator new(v142 + 1);
          v265 = v132;
          v266 = v143 | 0x8000000000000000;
          v264 = v141;
        }
        else
        {
          HIBYTE(v266) = v132;
          if (!v132)
            goto LABEL_230;
        }
        memmove(v141, v131, v132);
LABEL_230:
        *((_BYTE *)v141 + v132) = 0;
        v267 = 1;
        v144 = *(NSObject **)v263;
        if (SHIBYTE(v266) < 0)
          operator delete(v264);
        if (v263[32] && (v263[31] & 0x80000000) != 0)
          operator delete(*(void **)&v263[8]);
        if (*(_QWORD *)v263)
          os_release(*(void **)v263);
        if (v129 && *(_QWORD *)(v129 + 24))
        {
          v145 = _os_log_pack_size();
          v146 = (std::__shared_weak_count_vtbl *)operator new(v145, (std::align_val_t)8uLL);
          v147 = (std::__shared_weak_count *)operator new();
          v148 = v147;
          v147->__shared_owners_ = 0;
          v149 = (unint64_t *)&v147->__shared_owners_;
          v147->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v147->__shared_weak_owners_ = 0;
          v147[1].__vftable = v146;
          *(_QWORD *)v263 = v146;
          *(_QWORD *)&v263[8] = v146;
          *(_QWORD *)&v263[16] = v147;
          do
            v150 = __ldxr(v149);
          while (__stxr(v150 + 1, v149));
          *(_QWORD *)&v263[24] = 0;
          *(_QWORD *)&v263[32] = 0;
          v264 = 0;
          do
            v151 = __ldaxr(v149);
          while (__stlxr(v151 - 1, v149));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v148);
          }
          v152 = *(_QWORD *)v263;
          *(_WORD *)_os_log_pack_fill() = 0;
          v153 = operator new();
          v154 = *(unsigned __int8 *)(v130 + 39);
          v155 = v236;
          if ((v154 & 0x80u) != 0)
          {
            v155 = *(const char **)(v130 + 16);
            v154 = *(_QWORD *)(v130 + 24);
          }
          *(_QWORD *)v153 = v152;
          *(_OWORD *)(v153 + 8) = *(_OWORD *)&v263[8];
          *(_QWORD *)&v263[8] = 0;
          *(_QWORD *)&v263[16] = 0;
          *(_OWORD *)(v153 + 24) = *(_OWORD *)&v263[24];
          *(_QWORD *)&v263[24] = 0;
          *(_QWORD *)&v263[32] = 0;
          *(_QWORD *)(v153 + 40) = v155;
          *(_QWORD *)(v153 + 48) = v154;
          *(_BYTE *)(v153 + 56) = 1;
          v250[0] = 0;
          v257.__r_.__value_.__r.__words[0] = v153;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v129 + 24) + 40))(*(_QWORD *)(v129 + 24), &v257);
          v156 = v257.__r_.__value_.__r.__words[0];
          v257.__r_.__value_.__r.__words[0] = 0;
          v157 = v238;
          if (v156)
          {
            v158 = *(std::__shared_weak_count **)(v156 + 32);
            if (v158)
            {
              v159 = (unint64_t *)&v158->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            v161 = *(std::__shared_weak_count **)(v156 + 16);
            if (v161)
            {
              v162 = (unint64_t *)&v161->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            MEMORY[0x227684CE8](v156, 0x10F0C40B62ED6C6);
            v164 = v250[0];
            v250[0] = 0;
            if (v164)
            {
              v165 = (std::__shared_weak_count *)*((_QWORD *)v164 + 4);
              if (v165)
              {
                v166 = (unint64_t *)&v165->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              v168 = (std::__shared_weak_count *)*((_QWORD *)v164 + 2);
              if (v168)
              {
                v169 = (unint64_t *)&v168->__shared_owners_;
                do
                  v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                }
              }
              MEMORY[0x227684CE8](v164, 0x10F0C40B62ED6C6);
            }
          }
          v171 = *(std::__shared_weak_count **)&v263[32];
          if (*(_QWORD *)&v263[32])
          {
            v172 = (unint64_t *)(*(_QWORD *)&v263[32] + 8);
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v174 = *(std::__shared_weak_count **)&v263[16];
          if (*(_QWORD *)&v263[16])
          {
            v175 = (unint64_t *)(*(_QWORD *)&v263[16] + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
        }
        else
        {
          os_log_type_enabled(v144, OS_LOG_TYPE_INFO);
          *(_WORD *)v263 = 0;
          v177 = (void *)_os_log_send_and_compose_impl();
          v157 = v238;
          if (v177)
            free(v177);
        }
        if (v157)
        {
          sub_22322C138((uint64_t)__p, "No timestamp as no KF result; skipping CA");
          sub_223182C08((uint64_t)__p);
        }
        sub_223182C08((uint64_t)__p);
        v178 = v249;
        if (v249)
        {
          v179 = (unint64_t *)&v249->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        goto LABEL_289;
      }
    }
    memmove(v137, v135, v136);
    goto LABEL_222;
  }
LABEL_174:
  v110 = *(uint64_t **)(a2 + 448);
  if (!v110)
    goto LABEL_201;
  v111 = *v110;
  *(_QWORD *)v263 = &off_24EC55F48;
  *(_QWORD *)&v263[8] = sub_22365F398;
  *(_QWORD *)&v263[24] = v263;
  v112 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  v113 = a1;
  v114 = *(_QWORD *)(a1 + 1424);
  v115 = *(_QWORD *)&v263[24];
  if (*(_QWORD *)&v263[24])
  {
    if (*(_BYTE **)&v263[24] == v263)
    {
      v262 = v261;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v263 + 24))(v263, v261);
      goto LABEL_181;
    }
    v115 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)&v263[24] + 16))(*(_QWORD *)&v263[24], v13);
  }
  v262 = (_BYTE *)v115;
LABEL_181:
  v116 = atomic_load((unsigned __int8 *)&qword_2540CBF68);
  if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBF68))
  {
    qword_2540CBF60 = v111;
    __cxa_guard_release(&qword_2540CBF68);
  }
  if (v111 - qword_2540CBF60 >= 30000000000)
  {
    qword_2540CBF60 = v111;
    if (!v262)
      sub_223198474();
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)v262 + 48))(v262, &qword_25578BBC8, v114);
    v117 = (_QWORD *)qword_25578BBD0;
    for (j = (_QWORD *)unk_25578BBD8; v117 != j; ++v117)
      (*(void (**)(_QWORD))(*(_QWORD *)*v117 + 24))(*v117);
    v119 = (_QWORD *)qword_25578BBE8;
    for (k = *(_QWORD **)algn_25578BBF0; v119 != k; ++v119)
      (*(void (**)(_QWORD))(*(_QWORD *)*v119 + 24))(*v119);
    v121 = (_QWORD *)qword_25578BC00;
    for (m = (_QWORD *)unk_25578BC08; v121 != m; ++v121)
      (*(void (**)(_QWORD))(*(_QWORD *)*v121 + 24))(*v121);
  }
  v123 = v262;
  if (v262 == v261)
  {
    v124 = 4;
    v123 = v261;
    goto LABEL_194;
  }
  if (v262)
  {
    v124 = 5;
LABEL_194:
    (*(void (**)(_QWORD *, uint64_t))(*v123 + 8 * v124))(v123, v13);
  }
  v125 = *(_QWORD **)&v263[24];
  if (*(_BYTE **)&v263[24] == v263)
  {
    v126 = 4;
    v125 = v263;
    goto LABEL_199;
  }
  if (*(_QWORD *)&v263[24])
  {
    v126 = 5;
LABEL_199:
    (*(void (**)(_QWORD *, uint64_t))(*v125 + 8 * v126))(v125, v13);
  }
LABEL_289:
  *(_QWORD *)&v263[8] = 0;
  *(_QWORD *)&v263[16] = 0;
  *(_QWORD *)v263 = &v263[8];
  sub_224530418(v263, __p);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)v263, *(char **)&v263[8]);
  v181 = atomic_load((unsigned __int8 *)&qword_25578E150);
  if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_25578E150))
  {
    sub_223662EC4((uint64_t)&stru_25578E0D0);
    __cxa_atexit((void (*)(void *))sub_223663030, &stru_25578E0D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578E150);
    v113 = a1;
  }
  v182 = *(_QWORD *)(v113 + 1424);
  v259[0] = &off_24EC55FF8;
  v259[1] = sub_22365F8A0;
  v260 = v259;
  std::mutex::lock(&stru_25578E0D0);
  memset(v263, 0, 24);
  __p[1] = 0;
  rep = 0;
  __p[0] = &__p[1];
  sub_224530418(__p, &v257);
  *(_OWORD *)&v263[24] = *(_OWORD *)&v257.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)__p, (char *)__p[1]);
  memset(&v257, 0, sizeof(v257));
  v183 = qword_25578E128;
  v184 = qword_25578E130;
  v185 = qword_25578E130 - qword_25578E128;
  if (qword_25578E130 != qword_25578E128)
  {
    v186 = 0x6DB6DB6DB6DB6DB7 * (v185 >> 3);
    if (v186 >= 0x492492492492493)
      sub_223662A04();
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v185);
    v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
    v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 56 * v186;
    v250[0] = v257.__r_.__value_.__l.__data_;
    v258 = (int **)v257.__r_.__value_.__r.__words[0];
    __p[0] = &v257.__r_.__value_.__r.__words[2];
    __p[1] = &v258;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v250;
    LOBYTE(v244) = 0;
    v187 = (char *)v257.__r_.__value_.__r.__words[0];
    do
    {
      if (*(char *)(v183 + 23) < 0)
      {
        sub_223197FA4(v187, *(void **)v183, *(_QWORD *)(v183 + 8));
      }
      else
      {
        v189 = *(_OWORD *)v183;
        *((_QWORD *)v187 + 2) = *(_QWORD *)(v183 + 16);
        *(_OWORD *)v187 = v189;
      }
      *((_QWORD *)v187 + 3) = *(_QWORD *)(v183 + 24);
      v190 = v187 + 32;
      if (*(char *)(v183 + 55) < 0)
      {
        sub_223197FA4(v190, *(void **)(v183 + 32), *(_QWORD *)(v183 + 40));
      }
      else
      {
        v188 = *(_OWORD *)(v183 + 32);
        *((_QWORD *)v187 + 6) = *(_QWORD *)(v183 + 48);
        *(_OWORD *)v190 = v188;
      }
      v183 += 56;
      v187 = (char *)v250[0] + 56;
      v250[0] = (char *)v250[0] + 56;
    }
    while (v183 != v184);
    *(_QWORD *)v263 = v257.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v263[8] = v187;
    *(_QWORD *)&v263[16] = *((_QWORD *)&v257.__r_.__value_.__l + 2);
    if (!v239)
      goto LABEL_318;
    goto LABEL_303;
  }
  memset(v263, 0, 24);
  if (v239)
  {
LABEL_303:
    v257.__r_.__value_.__s.__data_[0] = 0;
    v257.__r_.__value_.__s.__data_[8] = 0;
    sub_22452C0AC((uint64_t)&unk_25578E140, (uint64_t)&v257, (CFMutableDictionaryRef *)__p);
    sub_2232EEEDC(v250, (uint64_t)__p);
    v191 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v192 = (unint64_t *)((char *)__p[1] + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    v194 = *(_OWORD *)v250;
    v250[0] = 0;
    v250[1] = 0;
    v195 = *(std::__shared_weak_count **)&v263[32];
    *(_OWORD *)&v263[24] = v194;
    if (v195)
    {
      v196 = (unint64_t *)&v195->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    v198 = (std::__shared_weak_count *)v250[1];
    if (v250[1])
    {
      v199 = (unint64_t *)((char *)v250[1] + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
  }
LABEL_318:
  v201 = qword_25578E128;
  for (n = qword_25578E130; n != v201; n -= 56)
  {
    if (*(char *)(n - 1) < 0)
    {
      operator delete(*(void **)(n - 24));
      if ((*(char *)(n - 33) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(n - 33) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(n - 56));
  }
  qword_25578E130 = v201;
  __p[1] = 0;
  rep = 0;
  __p[0] = &__p[1];
  sub_2245312C0(__p, &v257);
  v241 = *(_OWORD *)&v257.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)__p, (char *)__p[1]);
  v203 = (std::__shared_weak_count *)off_25578E148;
  unk_25578E140 = v241;
  if (!v203)
    goto LABEL_329;
  v204 = (unint64_t *)&v203->__shared_owners_;
  do
    v205 = __ldaxr(v204);
  while (__stlxr(v205 - 1, v204));
  if (!v205)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
    std::mutex::unlock(&stru_25578E0D0);
    v206 = v260;
    if (v260)
      goto LABEL_330;
  }
  else
  {
LABEL_329:
    std::mutex::unlock(&stru_25578E0D0);
    v206 = v260;
    if (v260)
    {
LABEL_330:
      if (*(_QWORD *)v263 != *(_QWORD *)&v263[8])
        (*(void (**)(_QWORD *, _BYTE *, uint64_t))(*v206 + 48))(v206, v263, v182);
    }
  }
  sub_22319ED0C(&v252, (uint64_t)&v263[24]);
  v208 = *(std::__shared_weak_count **)&v263[32];
  if (*(_QWORD *)&v263[32])
  {
    v209 = (unint64_t *)(*(_QWORD *)&v263[32] + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = *(_QWORD *)v263;
  if (*(_QWORD *)v263)
  {
    v212 = *(_QWORD *)&v263[8];
    v213 = *(void **)v263;
    if (*(_QWORD *)&v263[8] == *(_QWORD *)v263)
    {
LABEL_346:
      *(_QWORD *)&v263[8] = v211;
      operator delete(v213);
      goto LABEL_347;
    }
    while (1)
    {
      if (*(char *)(v212 - 1) < 0)
      {
        operator delete(*(void **)(v212 - 24));
        if ((*(char *)(v212 - 33) & 0x80000000) == 0)
          goto LABEL_341;
      }
      else if ((*(char *)(v212 - 33) & 0x80000000) == 0)
      {
LABEL_341:
        v212 -= 56;
        if (v212 == v211)
          goto LABEL_345;
        continue;
      }
      operator delete(*(void **)(v212 - 56));
      v212 -= 56;
      if (v212 == v211)
      {
LABEL_345:
        v213 = *(void **)v263;
        goto LABEL_346;
      }
    }
  }
LABEL_347:
  v214 = v260;
  if (v260 == v259)
  {
    v215 = 4;
    v214 = v259;
LABEL_351:
    (*(void (**)(_QWORD *, uint64_t))(*v214 + 8 * v215))(v214, v207);
  }
  else if (v260)
  {
    v215 = 5;
    goto LABEL_351;
  }
  sub_2231DD328(v263, (uint64_t)&v252);
  v216 = *(_OWORD *)v263;
  *(_OWORD *)v263 = 0uLL;
  v217 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v216;
  if (v217)
  {
    v218 = (unint64_t *)&v217->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = *(std::__shared_weak_count **)&v263[8];
  if (*(_QWORD *)&v263[8])
  {
    v221 = (unint64_t *)(*(_QWORD *)&v263[8] + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  if (*((_QWORD *)&v252 + 1))
  {
    v224 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = (void **)v254[1];
  if (v254[1])
  {
    v227 = (void **)v254[2];
    v228 = v254[1];
    if (v254[2] != v254[1])
    {
      do
      {
        if (*((char *)v227 - 1) < 0)
          operator delete(*(v227 - 3));
        v227 -= 3;
      }
      while (v227 != v226);
      v228 = v254[1];
    }
    v254[2] = v226;
    operator delete(v228);
  }
  v229 = (void **)v253[0];
  if (v253[0])
  {
    v230 = (void **)v253[1];
    v231 = v253[0];
    if (v253[1] != v253[0])
    {
      do
      {
        if (*((char *)v230 - 1) < 0)
          operator delete(*(v230 - 3));
        v230 -= 3;
      }
      while (v230 != v229);
      v231 = v253[0];
    }
    v253[1] = v229;
    operator delete(v231);
  }
}

void sub_22365E974(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 152) && *(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&__p);
  sub_223167354((uint64_t)&a47);
  sub_223660900(&a39);
  JUMPOUT(0x22365EEE4);
}

void sub_22365EC60(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x22365EEE4);
}

void sub_22365EC78()
{
  __cxa_end_catch();
  JUMPOUT(0x22365EEDCLL);
}

void sub_22365EC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  sub_223167354((uint64_t)&a17);
  sub_22365B598((void **)(v34 - 176));
  std::mutex::unlock(&stru_25578E0D0);
  v35 = *(_QWORD **)(v34 - 216);
  if (v35 == (_QWORD *)(v34 - 240))
  {
    v36 = 4;
    v35 = (_QWORD *)(v34 - 240);
  }
  else
  {
    if (!v35)
    {
LABEL_6:
      sub_223167354(v33);
      sub_223660900(&a33);
      JUMPOUT(0x22365EEE4);
    }
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
  goto LABEL_6;
}

void sub_22365EC9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_22365B598(v0 - 176);
  std::mutex::unlock(&stru_25578E0D0);
  v1 = *(_QWORD **)(v0 - 216);
  if (v1 == (_QWORD *)(v0 - 240))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 240);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  JUMPOUT(0x22365EED4);
}

void sub_22365ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_223660900(&a33);
  std::mutex::unlock(&stru_255789280);
  _Unwind_Resume(a1);
}

void sub_22365ECCC()
{
  JUMPOUT(0x22365EEDCLL);
}

void sub_22365ECD8()
{
  JUMPOUT(0x22365ECE0);
}

void sub_22365ECF4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22365ED04()
{
  JUMPOUT(0x22365EEDCLL);
}

void sub_22365ED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33)
{
  uint64_t v33;

  sub_223167354((uint64_t)&a31);
  sub_223167354(v33);
  sub_223660900(&a33);
  JUMPOUT(0x22365EEE4);
}

void sub_22365ED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char *a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  sub_22323DF84((uint64_t)&a17, a18);
  sub_22365B598((void **)(v18 - 176));
  std::mutex::unlock(&stru_25578E0D0);
  v19 = *(_QWORD **)(v18 - 216);
  if (v19 == (_QWORD *)(v18 - 240))
  {
    v20 = 4;
    v19 = (_QWORD *)(v18 - 240);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  JUMPOUT(0x22365EED4);
}

void sub_22365ED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char *a18)
{
  sub_22323DF84((uint64_t)&a17, a18);
  JUMPOUT(0x22365EE98);
}

void sub_22365ED44()
{
  JUMPOUT(0x22365EEA4);
}

void sub_22365ED4C()
{
  uint64_t v0;

  sub_22323DF84(v0 - 176, *(char **)(v0 - 168));
  JUMPOUT(0x22365EEDCLL);
}

void sub_22365ED60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **__p,void **a42)
{
  uint64_t v42;
  void **v43;
  void **v44;
  _QWORD *v45;
  uint64_t v46;

  if (!__p)
  {
LABEL_11:
    sub_22365B598((void **)(v42 - 176));
    std::mutex::unlock(&stru_25578E0D0);
    v45 = *(_QWORD **)(v42 - 216);
    if (v45 == (_QWORD *)(v42 - 240))
    {
      v46 = 4;
      v45 = (_QWORD *)(v42 - 240);
    }
    else
    {
      if (!v45)
        goto LABEL_16;
      v46 = 5;
    }
    (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_16:
    JUMPOUT(0x22365EED4);
  }
  v43 = a42;
  v44 = __p;
  if (a42 == __p)
  {
LABEL_10:
    operator delete(v44);
    goto LABEL_11;
  }
  while (1)
  {
    if (*((char *)v43 - 1) < 0)
    {
      operator delete(*(v43 - 3));
      if ((*((char *)v43 - 33) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_8:
      operator delete(*(v43 - 7));
      v43 -= 7;
      if (v43 == __p)
      {
LABEL_9:
        v44 = __p;
        goto LABEL_10;
      }
    }
    else
    {
      if (*((char *)v43 - 33) < 0)
        goto LABEL_8;
LABEL_5:
      v43 -= 7;
      if (v43 == __p)
        goto LABEL_9;
    }
  }
}

void sub_22365ED68()
{
  uint64_t v0;

  sub_22365B598((void **)(v0 - 176));
  JUMPOUT(0x22365EEA4);
}

void sub_22365ED98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 - 184);
  if (v1 == (_QWORD *)(v0 - 208))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 208);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  v3 = *(_QWORD **)(v0 - 152);
  if (v3 == (_QWORD *)(v0 - 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(v0 - 176);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  JUMPOUT(0x22365EEDCLL);
}

void sub_22365EE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223662A18((uint64_t)va);
  JUMPOUT(0x22365EE28);
}

void sub_22365EEEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD *v10;
  __int128 v11;
  size_t v12;
  const void *v13;
  __int128 *p_p;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  __int128 v25;
  void *key;
  std::__shared_weak_count *v27;
  void *__dst[2];
  __int128 v29;
  __int128 __p;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::mutex::lock((std::mutex *)a1);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3)) <= 9)
  {
    v24 = *(void **)(a1 + 64);
    sub_2232D69F0((unsigned int *)__dst, (uint64_t *)&v24);
    *(_QWORD *)&v32 = (LODWORD(__dst[0]) | ((unint64_t)BYTE4(__dst[0]) << 32) | ((unint64_t)BYTE5(__dst[0]) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(__dst[0]) << 56) | ((unint64_t)(HIWORD(HIDWORD(__dst[0])) & 0xF | 0x40u) << 48);
    *((_QWORD *)&v32 + 1) = ((unint64_t)BYTE4(__dst[1]) << 32) | ((unint64_t)BYTE5(__dst[1]) << 40) | (uint64_t)__dst[1] & 0xFFFFFF00 | ((unint64_t)HIDWORD(__dst[1]) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(__dst[1]) << 48) | (uint64_t)__dst[1] & 0x3F | 0x80;
    sub_2245664AC((unsigned __int8 *)&v32, __dst);
    v10 = operator new(0x28uLL);
    v24 = v10;
    v25 = xmmword_2245C4640;
    v11 = v29;
    *v10 = *(_OWORD *)__dst;
    v10[1] = v11;
    *((_DWORD *)v10 + 8) = __p;
    *((_BYTE *)v10 + 36) = 0;
    sub_223197FA4(__dst, v10, 0x24uLL);
    *((_QWORD *)&v29 + 1) = a2;
    v12 = *(_QWORD *)(a3 + 8);
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v13 = *(const void **)a3;
    if (v12 >= 0x17)
    {
      v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v19 = v12 | 7;
      v20 = v19 + 1;
      p_p = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&__p + 1) = v12;
      v31 = v20 | 0x8000000000000000;
      *(_QWORD *)&__p = p_p;
    }
    else
    {
      HIBYTE(v31) = v12;
      p_p = &__p;
      if (!v12)
      {
        LOBYTE(__p) = 0;
        v15 = *(_QWORD *)(a1 + 96);
        if (v15 < *(_QWORD *)(a1 + 104))
        {
LABEL_6:
          v16 = *(_OWORD *)__dst;
          *(_QWORD *)(v15 + 16) = v29;
          *(_OWORD *)v15 = v16;
          __dst[1] = 0;
          *(_QWORD *)&v29 = 0;
          __dst[0] = 0;
          *(_QWORD *)(v15 + 24) = *((_QWORD *)&v29 + 1);
          v17 = __p;
          *(_QWORD *)(v15 + 48) = v31;
          *(_OWORD *)(v15 + 32) = v17;
          v31 = 0;
          __p = 0uLL;
          v18 = (char *)(v15 + 56);
LABEL_13:
          *(_QWORD *)(a1 + 96) = v18;
          sub_224527E14((uint64_t)&v24, (CFStringRef *)&key);
          sub_22366331C(a1 + 112, key, a4);
          v21 = v27;
          if (!v27)
            goto LABEL_17;
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
            *(_OWORD *)a5 = v32;
            *(_BYTE *)(a5 + 16) = 1;
            if ((SHIBYTE(v31) & 0x80000000) == 0)
            {
LABEL_18:
              if ((SBYTE7(v29) & 0x80000000) == 0)
                goto LABEL_19;
              goto LABEL_23;
            }
          }
          else
          {
LABEL_17:
            *(_OWORD *)a5 = v32;
            *(_BYTE *)(a5 + 16) = 1;
            if ((SHIBYTE(v31) & 0x80000000) == 0)
              goto LABEL_18;
          }
          operator delete((void *)__p);
          if ((SBYTE7(v29) & 0x80000000) == 0)
          {
LABEL_19:
            if ((SHIBYTE(v25) & 0x80000000) == 0)
              goto LABEL_20;
LABEL_24:
            operator delete(v24);
            goto LABEL_20;
          }
LABEL_23:
          operator delete(__dst[0]);
          if ((SHIBYTE(v25) & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_24;
        }
LABEL_12:
        v18 = sub_223663150((void **)(a1 + 88), (uint64_t)__dst);
        goto LABEL_13;
      }
    }
    memmove(p_p, v13, v12);
    *((_BYTE *)p_p + v12) = 0;
    v15 = *(_QWORD *)(a1 + 96);
    if (v15 < *(_QWORD *)(a1 + 104))
      goto LABEL_6;
    goto LABEL_12;
  }
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 16) = 0;
LABEL_20:
  std::mutex::unlock((std::mutex *)a1);
}

void sub_22365F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::mutex *v23;

  sub_223167354((uint64_t)&a16);
  sub_223662A94((uint64_t)&a18);
  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void sub_22365F2A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBF78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBF78))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBF70);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBF78);
  }
  *a1 = qword_2540CBF70;
}

void sub_22365F340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBF78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBF78);
  _Unwind_Resume(a1);
}

void sub_22365F398(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  xpc_object_t xdict;
  std::__shared_weak_count *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  _BYTE __p[24];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;

  v3 = a1 + 8;
  sub_223FDB1F0(a1 + 8, 0, &v43);
  sub_223658854("Stats_30sec", 0xBuLL, (xpc_object_t *)&v43);
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8E00;
  strcpy(*(char **)__p, "com.apple.Recon3D.recon.stats_v1.30sec");
  sub_223FDBB3C(a2, (uint64_t)__p, (uint64_t)&v43);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_223FDB1F0(v3, 1u, &v41);
  sub_223FDB1F0(v3, 2u, (std::__shared_weak_count_vtbl **)&xdict);
  sub_224564B94((uint64_t)&v35, (xpc_object_t *)&v41);
  sub_224564B94((uint64_t)__p, (xpc_object_t *)&v41);
  v32 = *(_OWORD *)__p;
  v4 = *(_QWORD *)&__p[16];
  v34 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v47;
    v33 = *((_QWORD *)&v32 + 1) + v4;
    if (v47)
    {
      v8 = (unint64_t *)&v47->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v33 = *(_QWORD *)&__p[8] + *(_QWORD *)&__p[16];
  }
  while (!v35 || (_QWORD)v32 == 0)
  {
    if ((v35 != 0) != ((_QWORD)v32 == 0))
      goto LABEL_30;
    v11 = v36;
LABEL_22:
    v12 = 16 * v11;
    v13 = v37[3] + v12;
    *(_OWORD *)__p = *(_OWORD *)(*v37 + v12);
    sub_224564D6C(&__p[16], v13);
    v14 = xdict;
    if (!xdict)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = xdict;
    }
    xpc_dictionary_set_value(v14, *(const char **)__p, *(xpc_object_t *)&__p[16]);
    v15 = v46;
    if (v46)
    {
      v16 = (unint64_t *)&v46->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    ++v36;
  }
  v11 = v36;
  if (v36 != v33)
    goto LABEL_22;
LABEL_30:
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v20 = v38;
  if (v38)
  {
    v21 = (unint64_t *)&v38->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_223658854("Measurements_30sec", 0x12uLL, &xdict);
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C44E0;
  strcpy(*(char **)__p, "com.apple.Recon3D.recon.measurements_v1.30sec");
  sub_223FDBB3C(a2, (uint64_t)__p, (uint64_t)&xdict);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v23 = v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_22365F7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a19);
  sub_223167354((uint64_t)&a21);
  sub_223167354((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_22365F8A0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFStringRef v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const void *v42;
  CFMutableDictionaryRef v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *empty;
  const char *v98;
  std::__shared_weak_count_vtbl *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  const char *v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  xpc_object_t v120[2];
  __int128 v121;
  int v122;
  std::string v123;
  __int128 v124;
  void *value[2];
  std::__shared_weak_count *v126;
  _BYTE __p[23];
  __int16 v128;
  CFMutableDictionaryRef theDict[2];
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  CFStringRef v139;
  std::__shared_weak_count *v140;
  _QWORD v141[2];
  _BYTE v142[24];
  uint64_t v143;
  _QWORD v144[4];

  v144[1] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_152;
  v3 = sub_2241471F8();
  v4 = v3[2];
  if (!v4)
  {
    v5 = v3;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = v5[2];
  }
  v6 = *(_QWORD *)(v4 + 64);
  v7 = (std::mutex *)(v6 + 32);
  std::mutex::lock((std::mutex *)(v6 + 32));
  v9 = *(_QWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 104);
  std::mutex::unlock(v7);
  if (v9 == v8)
    goto LABEL_152;
  *(_QWORD *)v142 = "cv3d.recon.";
  *(_QWORD *)&v142[8] = 11;
  *(_QWORD *)&v142[16] = "Stats.CoreAnalytics";
  v143 = 19;
  sub_2231A9820((uint64_t)v142, (uint64_t)v144, 0, 0, &v123);
  sub_2241471F8();
  v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
  {
    *(_OWORD *)v120 = 0u;
    v121 = 0u;
    v122 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      *(_QWORD *)&v124 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v124 + 1) = 2;
      v11 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        v118 = v11;
        *(_QWORD *)&v142[8] = 0;
        *(_QWORD *)&v142[16] = 0;
        *(_QWORD *)v142 = &v142[8];
        sub_2245314F4(v142, __p);
        *(_OWORD *)theDict = *(_OWORD *)__p;
        sub_22323DF84((uint64_t)v142, *(char **)&v142[8]);
        v12 = *a1;
        if (*a1 != a1[1])
        {
          v13 = a1[1];
          v14 = 0;
          while (1)
          {
            v135 = v14;
            v136 = v12;
            sub_223425184(&v135);
            v15 = v136;
            *(_QWORD *)&v142[8] = 0;
            *(_QWORD *)&v142[16] = 0;
            *(_QWORD *)v142 = &v142[8];
            sub_2245314F4(v142, value);
            v138 = *(_OWORD *)value;
            sub_22323DF84((uint64_t)v142, *(char **)&v142[8]);
            v142[23] = 4;
            strcpy(v142, "uuid");
            sub_224527BAC((uint64_t)v142, (CFStringRef *)value);
            sub_2236634D4((uint64_t)&v138, value[0], v15);
            v16 = (std::__shared_weak_count *)value[1];
            if (value[1])
            {
              v17 = (unint64_t *)((char *)value[1] + 8);
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
                break;
            }
            if ((v142[23] & 0x80000000) != 0)
              goto LABEL_18;
LABEL_19:
            v142[23] = 12;
            strcpy(v142, "failure_type");
            v137 = *(_QWORD *)(v15 + 24);
            sub_224527BAC((uint64_t)v142, &v139);
            v20 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
            v19 = v139;
            v21 = v138;
            if (!*((_QWORD *)&v138 + 1))
              goto LABEL_24;
            v22 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
            do
              v24 = __ldaxr(v22);
            while (__stlxr(v24 - 1, v22));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              if (!v21)
                goto LABEL_42;
            }
            else
            {
LABEL_24:
              if (!v21)
                goto LABEL_42;
            }
            sub_224527264(&v137, (CFNumberRef *)value);
            v25 = value[0];
            v26 = (std::__shared_weak_count *)value[1];
            if (value[1])
            {
              v27 = (unint64_t *)((char *)value[1] + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
              do
                v29 = __ldaxr(v27);
              while (__stlxr(v29 - 1, v27));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
                if (!v25)
                  goto LABEL_32;
LABEL_31:
                CFDictionarySetValue((CFMutableDictionaryRef)v138, v19, value[0]);
                goto LABEL_32;
              }
            }
            if (v25)
              goto LABEL_31;
LABEL_32:
            v30 = (std::__shared_weak_count *)value[1];
            if (value[1])
            {
              v31 = (unint64_t *)((char *)value[1] + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
LABEL_42:
            v33 = v140;
            if (v140)
            {
              p_shared_owners = (unint64_t *)&v140->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
                if ((v142[23] & 0x80000000) == 0)
                  goto LABEL_48;
LABEL_47:
                operator delete(*(void **)v142);
                goto LABEL_48;
              }
            }
            if ((v142[23] & 0x80000000) != 0)
              goto LABEL_47;
LABEL_48:
            v142[23] = 21;
            strcpy(v142, "failure_user_category");
            sub_224527BAC((uint64_t)v142, (CFStringRef *)value);
            sub_2236634D4((uint64_t)&v138, value[0], v15 + 32);
            v36 = (std::__shared_weak_count *)value[1];
            if (value[1])
            {
              v37 = (unint64_t *)((char *)value[1] + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
                if ((v142[23] & 0x80000000) == 0)
                  goto LABEL_54;
LABEL_53:
                operator delete(*(void **)v142);
                goto LABEL_54;
              }
            }
            if ((v142[23] & 0x80000000) != 0)
              goto LABEL_53;
LABEL_54:
            sub_2231AEC20(&v133, (uint64_t)&v138);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
            if (*((_QWORD *)&v138 + 1))
            {
              v40 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            sub_224527BAC((uint64_t)__p, (CFStringRef *)value);
            v42 = value[0];
            v43 = theDict[0];
            v44 = (std::__shared_weak_count *)theDict[1];
            if (!theDict[1])
              goto LABEL_64;
            v45 = (unint64_t *)((char *)theDict[1] + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
              if (v43)
              {
LABEL_65:
                v48 = v133;
                v49 = v134;
                if (v134)
                {
                  v50 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                  *(_QWORD *)v142 = v48;
                  *(_QWORD *)&v142[8] = v49;
                  do
                    v52 = __ldxr(v50);
                  while (__stxr(v52 + 1, v50));
                  do
                    v53 = __ldaxr(v50);
                  while (__stlxr(v53 - 1, v50));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                  v54 = *(_OWORD *)v142;
                  if (!*(_QWORD *)&v142[8])
                    goto LABEL_78;
                  v55 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
                  do
                    v56 = __ldxr(v55);
                  while (__stxr(v56 + 1, v55));
                  do
                    v57 = __ldaxr(v55);
                  while (__stlxr(v57 - 1, v55));
                  if (!v57)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
                    if ((_QWORD)v54)
                      goto LABEL_91;
                  }
                  else
                  {
LABEL_78:
                    if (!(_QWORD)v54)
                      goto LABEL_92;
LABEL_91:
                    CFDictionarySetValue(theDict[0], v42, *(const void **)v142);
                  }
LABEL_92:
                  v58 = *(std::__shared_weak_count **)&v142[8];
                  if (*(_QWORD *)&v142[8])
                  {
                    v59 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 - 1, v59));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  goto LABEL_97;
                }
                *(_OWORD *)v142 = v133;
                if (!v133)
                  goto LABEL_92;
                goto LABEL_91;
              }
            }
            else
            {
LABEL_64:
              if (v43)
                goto LABEL_65;
            }
LABEL_97:
            v61 = (std::__shared_weak_count *)value[1];
            if (value[1])
            {
              v62 = (unint64_t *)((char *)value[1] + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v64 = v134;
            if (v134)
            {
              v65 = (unint64_t *)&v134->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            if ((char)v128 < 0)
            {
              operator delete(*(void **)__p);
              v12 += 56;
              ++v14;
              if (v12 == v13)
                goto LABEL_108;
            }
            else
            {
              v12 += 56;
              ++v14;
              if (v12 == v13)
                goto LABEL_108;
            }
          }
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if ((v142[23] & 0x80000000) == 0)
            goto LABEL_19;
LABEL_18:
          operator delete(*(void **)v142);
          goto LABEL_19;
        }
LABEL_108:
        strcpy(__p, "Failures");
        *(_QWORD *)&__p[9] = v141[0];
        *(_QWORD *)&__p[15] = *(_QWORD *)((char *)v141 + 6);
        v128 = 264;
        v141[0] = 0;
        *(_QWORD *)((char *)v141 + 6) = 0;
        sub_2231AD9F0((uint64_t)theDict, (__int128 *)__p, &v124, &v130);
        if (HIBYTE(v128) && (char)v128 < 0)
          operator delete(*(void **)__p);
        v67 = (std::__shared_weak_count *)theDict[1];
        if (theDict[1])
        {
          v68 = (unint64_t *)((char *)theDict[1] + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v70 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
        v71 = *v70;
        v72 = (std::__shared_weak_count *)v70[1];
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v76 = (uint64_t)v131;
        v75 = v132;
        value[0] = &off_24EC6A3B8;
        value[1] = v131;
        v126 = v132;
        v131 = 0;
        v132 = 0;
        *(_QWORD *)v142 = v71;
        *(_QWORD *)&v142[8] = v72;
        if (v72)
        {
          v77 = (unint64_t *)&v72->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        *(_QWORD *)&v142[16] = &off_24EC6A3B8;
        v143 = v76;
        v144[0] = v75;
        if (v75)
        {
          v79 = (unint64_t *)&v75->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        (*(void (**)(uint64_t *, _BYTE *))(*v118 + 16))(v118, v142);
        v81 = (std::__shared_weak_count *)v144[0];
        if (v144[0])
        {
          v82 = (unint64_t *)(v144[0] + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v84 = *(std::__shared_weak_count **)&v142[8];
        if (*(_QWORD *)&v142[8])
        {
          v85 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = v126;
        if (v126)
        {
          v88 = (unint64_t *)&v126->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (v72)
        {
          v90 = (unint64_t *)&v72->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v92 = v132;
        if (v132)
        {
          v93 = (unint64_t *)&v132->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v123.__r_.__value_.__l.__data_);
    v96 = *a1;
    v95 = a1[1];
    if (*a1 != v95)
      goto LABEL_156;
  }
  else
  {
LABEL_152:
    v96 = *a1;
    v95 = a1[1];
    if (*a1 != v95)
    {
      while (1)
      {
LABEL_156:
        *(_QWORD *)v142 = operator new(0x28uLL);
        *(_OWORD *)&v142[8] = xmmword_2245C65C0;
        strcpy(*(char **)v142, "com.apple.Recon3D.recon.failures_v1");
        empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
        sub_224564184((std::__shared_weak_count_vtbl **)__p, empty, 0);
        v98 = (const char *)v96;
        if (*(char *)(v96 + 23) < 0 && (v98 = *(const char **)v96) == 0)
          v99 = (std::__shared_weak_count_vtbl *)xpc_null_create();
        else
          v99 = (std::__shared_weak_count_vtbl *)xpc_string_create(v98);
        sub_22340E890((std::__shared_weak_count_vtbl **)v120, v99, 0);
        v100 = *(void **)__p;
        if (!*(_QWORD *)__p)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v100 = *(void **)__p;
        }
        xpc_dictionary_set_value(v100, "uuid", v120[0]);
        v101 = (std::__shared_weak_count *)v120[1];
        if (v120[1])
        {
          v102 = (unint64_t *)((char *)v120[1] + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v104 = (std::__shared_weak_count_vtbl *)xpc_int64_create(*(_QWORD *)(v96 + 24));
        sub_22340E890((std::__shared_weak_count_vtbl **)v120, v104, 0);
        v105 = *(void **)__p;
        if (!*(_QWORD *)__p)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v105 = *(void **)__p;
        }
        xpc_dictionary_set_value(v105, "failure_type", v120[0]);
        v106 = (std::__shared_weak_count *)v120[1];
        if (!v120[1])
          goto LABEL_174;
        v107 = (unint64_t *)((char *)v120[1] + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
          v109 = (const char *)(v96 + 32);
          if ((*(char *)(v96 + 55) & 0x80000000) == 0)
          {
LABEL_180:
            v110 = (std::__shared_weak_count_vtbl *)xpc_string_create(v109);
            goto LABEL_181;
          }
        }
        else
        {
LABEL_174:
          v109 = (const char *)(v96 + 32);
          if ((*(char *)(v96 + 55) & 0x80000000) == 0)
            goto LABEL_180;
        }
        v109 = *(const char **)v109;
        if (v109)
          goto LABEL_180;
        v110 = (std::__shared_weak_count_vtbl *)xpc_null_create();
LABEL_181:
        sub_22340E890((std::__shared_weak_count_vtbl **)v120, v110, 0);
        v111 = *(void **)__p;
        if (!*(_QWORD *)__p)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v111 = *(void **)__p;
        }
        xpc_dictionary_set_value(v111, "failure_user_category", v120[0]);
        v112 = (std::__shared_weak_count *)v120[1];
        if (v120[1])
        {
          v113 = (unint64_t *)((char *)v120[1] + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        sub_223FDBB3C(a2, (uint64_t)v142, (uint64_t)__p);
        v115 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v116 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        if ((v142[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v142);
          v96 += 56;
          if (v96 == v95)
            return;
        }
        else
        {
          v96 += 56;
          if (v96 == v95)
            return;
        }
      }
    }
  }
}

void sub_2236605F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;

  sub_2241231D8(v44);
  v47 = *(std::__shared_weak_count **)(v45 - 136);
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_2241231D8((uint64_t)&a26);
  if (v43)
  {
    v50 = (unint64_t *)&v43->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_2241231D8((uint64_t)&a39);
  sub_2231874DC((uint64_t)&a13);
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void **sub_223660900(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;

  v2 = (void **)a1[3];
  if (v2)
  {
    v3 = (void **)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v5 = (void **)*a1;
  if (*a1)
  {
    v6 = (void **)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_2236609B8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_223660AC8((uint64_t)a1, (uint64_t)&v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = &off_24EC55BD8;
  return a1;
}

void sub_223660AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223660AC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  void *v48;
  void *v49;
  char *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  char v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  void *__p[3];
  uint64_t v169;
  __int128 v170;
  void *v171;
  __int128 v172;
  __int128 v173;
  uint64_t (**v174)();
  __int128 v175;
  uint64_t v176;
  uint64_t (**v177)();
  __int128 v178;
  uint64_t (**v179)();
  __int128 v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  void *v184[3];
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void *v196;
  std::__shared_weak_count *v197;
  uint64_t (**v198)();
  __int128 v199;
  void *v200;
  __int128 v201;
  void *v202;
  __int128 v203;
  __int128 v204;
  uint64_t (**v205)();
  __int128 v206;
  uint64_t v207;
  uint64_t (**v208)();
  __int128 v209;
  uint64_t (**v210)();
  __int128 v211;
  void *v212[2];
  void *v213;
  void *v214[4];
  void *__src[2];
  void *v216;
  _OWORD __dst[2];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[5];

  v224[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24EC560A8;
  v6 = *a3;
  if (*(char *)(*a3 + 191) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), *(void **)(v6 + 168), *(_QWORD *)(v6 + 176));
    v8 = a1 + 32;
    v9 = *a3;
    v165 = a1;
    if ((*(char *)(*a3 + 215) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 168);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 + 184);
    *(_OWORD *)(a1 + 8) = v7;
    v8 = a1 + 32;
    v9 = *a3;
    v165 = a1;
    if ((*(char *)(*a3 + 215) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *(_OWORD *)(v9 + 192);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 208);
      *(_OWORD *)v8 = v10;
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v8, *(void **)(v9 + 192), *(_QWORD *)(v9 + 200));
LABEL_6:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *(void **)(a1 + 56);
  v11 = *(unint64_t **)(a1 + 64);
  *(_QWORD *)&v166 = v12;
  *((_QWORD *)&v166 + 1) = v11;
  if (v11)
  {
    v13 = v11 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v196 = v12;
    v197 = (std::__shared_weak_count *)v11;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = *a3;
    v17 = (std::__shared_weak_count *)a3[1];
    v194 = *a3;
    v195 = v17;
    if (!v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v196 = *(void **)(a1 + 56);
  v197 = 0;
  v16 = *a3;
  v17 = (std::__shared_weak_count *)a3[1];
  v194 = *a3;
  v195 = v17;
  if (v17)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
LABEL_16:
  if (*(char *)(v16 + 31) < 0)
  {
    sub_223197FA4(__dst, *(void **)(v16 + 8), *(_QWORD *)(v16 + 16));
  }
  else
  {
    v20 = *(_OWORD *)(v16 + 8);
    *(_QWORD *)&__dst[1] = *(_QWORD *)(v16 + 24);
    __dst[0] = v20;
  }
  if (*(char *)(v16 + 55) < 0)
  {
    sub_223197FA4(__src, *(void **)(v16 + 32), *(_QWORD *)(v16 + 40));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v16 + 32);
    v216 = *(void **)(v16 + 48);
  }
  *(_QWORD *)&v219 = v12;
  *((_QWORD *)&v219 + 1) = v11;
  v196 = 0;
  v197 = 0;
  *(_QWORD *)&v218 = v16;
  *((_QWORD *)&v218 + 1) = v17;
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    sub_223197FA4(v184, *(void **)&__dst[0], *((unint64_t *)&__dst[0] + 1));
  }
  else
  {
    *(_OWORD *)v184 = __dst[0];
    v184[2] = *(void **)&__dst[1];
  }
  if (SHIBYTE(v216) < 0)
  {
    sub_223197FA4(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = v216;
  }
  *(_QWORD *)((char *)v224 + 7) = *(_QWORD *)((char *)__dst + 15);
  v23 = __dst[0];
  HIBYTE(v224[0]) = HIBYTE(__dst[0]);
  v24 = BYTE7(__dst[1]);
  memset(__dst, 0, 24);
  *(_QWORD *)&v220 = *((_QWORD *)&v23 + 1);
  *(_QWORD *)((char *)&v220 + 7) = *(_QWORD *)((char *)v224 + 7);
  *(_QWORD *)((char *)v224 + 7) = 0;
  v224[0] = 0;
  v212[0] = v12;
  v212[1] = v11;
  if (v11)
  {
    v25 = v11 + 1;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (char *)operator new();
  *(_QWORD *)&v221 = v220;
  *(_QWORD *)((char *)&v221 + 7) = *(_QWORD *)((char *)&v220 + 7);
  *(_QWORD *)&v220 = 0;
  *(_QWORD *)((char *)&v220 + 7) = 0;
  v28 = *(_OWORD *)v212;
  v212[0] = 0;
  v212[1] = 0;
  v27[8] = 1;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 5) = 0;
  *(_QWORD *)v27 = &off_24EC56208;
  *((_QWORD *)v27 + 2) = &unk_24EC56280;
  *((_QWORD *)v27 + 3) = &unk_24EC562C0;
  v29 = v221;
  *(_QWORD *)(v27 + 63) = *(_QWORD *)((char *)&v221 + 7);
  *((_QWORD *)v27 + 6) = v23;
  *((_QWORD *)v27 + 7) = v29;
  v27[71] = v24;
  *(_QWORD *)&v221 = 0;
  *(_QWORD *)((char *)&v221 + 7) = 0;
  *(_OWORD *)(v27 + 72) = v28;
  v214[1] = 0;
  v214[0] = 0;
  v30 = (_QWORD *)operator new();
  *v30 = &off_24EC563B8;
  v30[1] = v16;
  v30[2] = v17;
  v218 = 0uLL;
  *((_QWORD *)v27 + 18) = 0;
  *((_QWORD *)v27 + 11) = v30;
  *((_QWORD *)v27 + 12) = v27 + 96;
  *((_QWORD *)v27 + 13) = v27 + 96;
  *((_QWORD *)v27 + 14) = 0;
  *((_QWORD *)v27 + 15) = v27 + 120;
  *((_QWORD *)v27 + 16) = v27 + 120;
  *((_QWORD *)v27 + 17) = 0;
  if (!*((_QWORD *)v27 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v31 = (std::__shared_weak_count *)operator new();
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC568A8;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
  v33 = (std::__shared_weak_count *)*((_QWORD *)v27 + 5);
  if (v33)
  {
    if (v33->__shared_owners_ != -1)
      goto LABEL_49;
    do
      v34 = __ldxr(v32);
    while (__stxr(v34 + 1, v32));
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
    *((_QWORD *)v27 + 4) = v27;
    *((_QWORD *)v27 + 5) = v31;
    std::__shared_weak_count::__release_weak(v33);
  }
  else
  {
    do
      v37 = __ldxr(v32);
    while (__stxr(v37 + 1, v32));
    v38 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    *((_QWORD *)v27 + 4) = v27;
    *((_QWORD *)v27 + 5) = v31;
  }
  do
    v40 = __ldaxr(v32);
  while (__stlxr(v40 - 1, v32));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_49:
  v41 = (std::__shared_weak_count *)v214[1];
  if (v214[1])
  {
    v42 = (unint64_t *)((char *)v214[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v214[0] = v27;
  v214[1] = v31;
  v44 = (std::__shared_weak_count *)v212[1];
  if (v212[1])
  {
    v45 = (unint64_t *)((char *)v212[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v219;
  v219 = 0uLL;
  v199 = *(_OWORD *)v184;
  v198 = &off_24EC560C8;
  v200 = v184[2];
  memset(v184, 0, sizeof(v184));
  v201 = *(_OWORD *)__p;
  v48 = __p[2];
  memset(__p, 0, sizeof(__p));
  v203 = v47;
  v212[1] = 0;
  v212[0] = 0;
  v49 = v214[0];
  v50 = (char *)v214[1];
  v202 = v48;
  v204 = *(_OWORD *)v214;
  v214[0] = 0;
  v214[1] = 0;
  if (*((_QWORD *)&v204 + 1))
  {
    v51 = (unint64_t *)(v50 + 16);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v205 = &off_24EC560F8;
  v53 = (_QWORD *)operator new();
  *v53 = &off_24EC568F8;
  v53[1] = v49;
  v53[2] = v50;
  *(_QWORD *)&v206 = v53;
  v55 = *((_QWORD *)&v204 + 1);
  v54 = v204;
  if (!*((_QWORD *)&v204 + 1))
  {
    *((_QWORD *)&v206 + 1) = v204;
    v207 = 0;
    if ((_QWORD)v204)
      v59 = v204 + 16;
    else
      v59 = 0;
    goto LABEL_79;
  }
  v56 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 16);
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
  v58 = *((_QWORD *)&v204 + 1);
  *((_QWORD *)&v206 + 1) = v54;
  v207 = v55;
  if ((_QWORD)v204)
    v59 = v204 + 16;
  else
    v59 = 0;
  if (!*((_QWORD *)&v204 + 1))
  {
    v54 = v204;
LABEL_79:
    v62 = 0;
    v208 = &off_24EC56130;
    v209 = v59;
    goto LABEL_80;
  }
  v60 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 16);
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v62 = *((_QWORD *)&v204 + 1);
  v54 = v204;
  v208 = &off_24EC56130;
  *(_QWORD *)&v209 = v59;
  *((_QWORD *)&v209 + 1) = v58;
  if (*((_QWORD *)&v204 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 16);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
LABEL_80:
  if (v54)
    v65 = v54 + 24;
  else
    v65 = 0;
  v210 = &off_24EC2E850;
  *(_QWORD *)&v211 = v65;
  *((_QWORD *)&v211 + 1) = v62;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v184[2]) & 0x80000000) == 0)
      goto LABEL_85;
LABEL_88:
    operator delete(v184[0]);
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    if (!*((_QWORD *)&v218 + 1))
      goto LABEL_93;
    goto LABEL_89;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v184[2]) < 0)
    goto LABEL_88;
LABEL_85:
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (!*((_QWORD *)&v218 + 1))
    goto LABEL_93;
LABEL_89:
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_93:
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (!*((_QWORD *)&v219 + 1))
    goto LABEL_97;
  v70 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if ((SHIBYTE(v216) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        goto LABEL_99;
LABEL_103:
      operator delete(*(void **)&__dst[0]);
      if (v194)
        goto LABEL_105;
      goto LABEL_104;
    }
  }
  else
  {
LABEL_97:
    if ((SHIBYTE(v216) & 0x80000000) == 0)
      goto LABEL_98;
  }
  operator delete(__src[0]);
  if (SBYTE7(__dst[1]) < 0)
    goto LABEL_103;
LABEL_99:
  if (v194)
    goto LABEL_105;
LABEL_104:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_105:
  *(_QWORD *)&v183 = v12;
  *((_QWORD *)&v183 + 1) = v11;
  if (v11)
  {
    v72 = v11 + 1;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v75 = *a3 + 56;
  else
    v75 = 0;
  v181 = v75;
  v182 = v74;
  if (v74)
  {
    v76 = (unint64_t *)&v74->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  sub_223491334((uint64_t)v184, &v183, &v181);
  if (v11)
  {
    v78 = v11 + 1;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v81 = *a3;
  v80 = a3[1];
  if (*a3)
    v82 = *a3 + 112;
  else
    v82 = 0;
  v167 = (std::__shared_weak_count *)a3[1];
  if (v80)
  {
    v83 = (unint64_t *)(v80 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  if (*(char *)(v82 + 31) < 0)
  {
    sub_223197FA4(v214, *(void **)(v82 + 8), *(_QWORD *)(v82 + 16));
  }
  else
  {
    v85 = *(_OWORD *)(v82 + 8);
    v214[2] = *(void **)(v82 + 24);
    *(_OWORD *)v214 = v85;
  }
  if (*(char *)(v81 + 167) < 0)
  {
    sub_223197FA4(v212, *(void **)(v81 + 144), *(_QWORD *)(v81 + 152));
  }
  else
  {
    *(_OWORD *)v212 = *(_OWORD *)(v81 + 144);
    v213 = *(void **)(v81 + 160);
  }
  v221 = v166;
  *(_QWORD *)&v220 = v82;
  *((_QWORD *)&v220 + 1) = v80;
  if (v80)
  {
    v86 = (unint64_t *)(v80 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  if (SHIBYTE(v214[2]) < 0)
  {
    sub_223197FA4(__dst, v214[0], (unint64_t)v214[1]);
  }
  else
  {
    __dst[0] = *(_OWORD *)v214;
    *(void **)&__dst[1] = v214[2];
  }
  if (SHIBYTE(v213) < 0)
  {
    sub_223197FA4(__src, v212[0], (unint64_t)v212[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v212;
    v216 = v213;
  }
  *(void **)((char *)v222 + 7) = *(void **)((char *)&v214[1] + 7);
  v88 = v214[0];
  v89 = v214[1];
  HIBYTE(v222[0]) = HIBYTE(v214[1]);
  v90 = HIBYTE(v214[2]);
  memset(v214, 0, 24);
  v223[0] = v89;
  *(_QWORD *)((char *)v223 + 7) = *(_QWORD *)((char *)v222 + 7);
  *(_QWORD *)((char *)v222 + 7) = 0;
  v222[0] = 0;
  v218 = v166;
  if (*((_QWORD *)&v166 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v93 = operator new();
  v224[0] = v223[0];
  *(_QWORD *)((char *)v224 + 7) = *(_QWORD *)((char *)v223 + 7);
  v223[0] = 0;
  *(_QWORD *)((char *)v223 + 7) = 0;
  v94 = v218;
  v218 = 0uLL;
  *(_BYTE *)(v93 + 8) = 1;
  *(_QWORD *)(v93 + 32) = 0;
  *(_QWORD *)(v93 + 40) = 0;
  *(_QWORD *)v93 = &off_24EC56970;
  *(_QWORD *)(v93 + 16) = &unk_24EC569E8;
  *(_QWORD *)(v93 + 24) = &unk_24EC56A28;
  v95 = v224[0];
  *(_QWORD *)(v93 + 63) = *(_QWORD *)((char *)v224 + 7);
  *(_QWORD *)(v93 + 48) = v88;
  *(_QWORD *)(v93 + 56) = v95;
  *(_BYTE *)(v93 + 71) = v90;
  v224[0] = 0;
  *(_QWORD *)((char *)v224 + 7) = 0;
  *(_OWORD *)(v93 + 72) = v94;
  v219 = 0uLL;
  v96 = (_QWORD *)operator new();
  *v96 = &off_24EC56B10;
  v96[1] = v82;
  v96[2] = v80;
  v220 = 0uLL;
  *(_QWORD *)(v93 + 144) = 0;
  *(_QWORD *)(v93 + 88) = v96;
  *(_QWORD *)(v93 + 96) = v93 + 96;
  *(_QWORD *)(v93 + 104) = v93 + 96;
  *(_QWORD *)(v93 + 112) = 0;
  *(_QWORD *)(v93 + 120) = v93 + 120;
  *(_QWORD *)(v93 + 128) = v93 + 120;
  *(_QWORD *)(v93 + 136) = 0;
  if (!*(_QWORD *)(v93 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v97 = (std::__shared_weak_count *)operator new();
  v97->__shared_owners_ = 0;
  v98 = (unint64_t *)&v97->__shared_owners_;
  v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56FB0;
  v97->__shared_weak_owners_ = 0;
  v97[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  v99 = *(std::__shared_weak_count **)(v93 + 40);
  if (v99)
  {
    if (v99->__shared_owners_ != -1)
      goto LABEL_156;
    do
      v100 = __ldxr(v98);
    while (__stxr(v100 + 1, v98));
    v101 = (unint64_t *)&v97->__shared_weak_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    *(_QWORD *)(v93 + 32) = v93;
    *(_QWORD *)(v93 + 40) = v97;
    std::__shared_weak_count::__release_weak(v99);
  }
  else
  {
    do
      v103 = __ldxr(v98);
    while (__stxr(v103 + 1, v98));
    v104 = (unint64_t *)&v97->__shared_weak_owners_;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
    *(_QWORD *)(v93 + 32) = v93;
    *(_QWORD *)(v93 + 40) = v97;
  }
  do
    v106 = __ldaxr(v98);
  while (__stlxr(v106 - 1, v98));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
  }
LABEL_156:
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  *(_QWORD *)&v219 = v93;
  *((_QWORD *)&v219 + 1) = v97;
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v221;
  v221 = 0uLL;
  __p[0] = &off_24EC561A0;
  *(_OWORD *)&__p[1] = __dst[0];
  v169 = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  v170 = *(_OWORD *)__src;
  v171 = v216;
  v216 = 0;
  __src[0] = 0;
  __src[1] = 0;
  v172 = v113;
  v218 = 0uLL;
  v114 = v219;
  v173 = v219;
  v219 = 0uLL;
  if (*((_QWORD *)&v173 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 16);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v174 = &off_24EC561D0;
  v117 = operator new();
  *(_QWORD *)v117 = &off_24EC57000;
  *(_OWORD *)(v117 + 8) = v114;
  *(_QWORD *)&v175 = v117;
  v119 = *((_QWORD *)&v173 + 1);
  v118 = v173;
  if (!*((_QWORD *)&v173 + 1))
  {
    *((_QWORD *)&v175 + 1) = v173;
    v176 = 0;
    if ((_QWORD)v173)
      v123 = v173 + 16;
    else
      v123 = 0;
    goto LABEL_186;
  }
  v120 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 16);
  do
    v121 = __ldxr(v120);
  while (__stxr(v121 + 1, v120));
  v122 = *((_QWORD *)&v173 + 1);
  *((_QWORD *)&v175 + 1) = v118;
  v176 = v119;
  if ((_QWORD)v173)
    v123 = v173 + 16;
  else
    v123 = 0;
  if (!*((_QWORD *)&v173 + 1))
  {
    v118 = v173;
LABEL_186:
    v126 = 0;
    v177 = &off_24EC2E888;
    v178 = v123;
    goto LABEL_187;
  }
  v124 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 16);
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  v126 = *((_QWORD *)&v173 + 1);
  v118 = v173;
  v177 = &off_24EC2E888;
  *(_QWORD *)&v178 = v123;
  *((_QWORD *)&v178 + 1) = v122;
  if (*((_QWORD *)&v173 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 16);
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
LABEL_187:
  if (v118)
    v129 = v118 + 24;
  else
    v129 = 0;
  v179 = &off_24EC2E850;
  *(_QWORD *)&v180 = v129;
  *((_QWORD *)&v180 + 1) = v126;
  if ((SHIBYTE(v216) & 0x80000000) == 0)
  {
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_192;
LABEL_195:
    operator delete(*(void **)&__dst[0]);
    v130 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    if (!*((_QWORD *)&v220 + 1))
      goto LABEL_200;
    goto LABEL_196;
  }
  operator delete(__src[0]);
  if (SBYTE7(__dst[1]) < 0)
    goto LABEL_195;
LABEL_192:
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (!*((_QWORD *)&v220 + 1))
    goto LABEL_200;
LABEL_196:
  v131 = (unint64_t *)&v130->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
LABEL_200:
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (!*((_QWORD *)&v221 + 1))
    goto LABEL_204;
  v134 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
    if ((SHIBYTE(v213) & 0x80000000) == 0)
    {
LABEL_205:
      if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
        goto LABEL_206;
      goto LABEL_210;
    }
  }
  else
  {
LABEL_204:
    if ((SHIBYTE(v213) & 0x80000000) == 0)
      goto LABEL_205;
  }
  operator delete(v212[0]);
  if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
  {
LABEL_206:
    if (v82)
      goto LABEL_212;
    goto LABEL_211;
  }
LABEL_210:
  operator delete(v214[0]);
  if (v82)
    goto LABEL_212;
LABEL_211:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_212:
  v136 = operator new();
  *(_QWORD *)v136 = &off_24EC560C8;
  *(_OWORD *)(v136 + 8) = v199;
  *(_QWORD *)(v136 + 24) = v200;
  v199 = 0uLL;
  v200 = 0;
  *(_OWORD *)(v136 + 32) = v201;
  *(_QWORD *)(v136 + 48) = v202;
  v201 = 0uLL;
  v202 = 0;
  *(_OWORD *)(v136 + 56) = v203;
  v203 = 0uLL;
  *(_OWORD *)(v136 + 72) = v204;
  v204 = 0uLL;
  *(_QWORD *)(v136 + 88) = &off_24EC560F8;
  *(_OWORD *)(v136 + 96) = v206;
  v137 = v207;
  *((_QWORD *)&v206 + 1) = 0;
  v207 = 0;
  *(_QWORD *)(v136 + 112) = v137;
  *(_QWORD *)(v136 + 120) = &off_24EC56130;
  *(_OWORD *)(v136 + 128) = v209;
  *(_QWORD *)&v206 = 0;
  v209 = 0uLL;
  *(_QWORD *)(v136 + 144) = &off_24EC2E850;
  *(_OWORD *)(v136 + 152) = v211;
  v211 = 0uLL;
  *(_QWORD *)(v136 + 168) = &off_24EC37D10;
  v138 = *(_OWORD *)&v184[1];
  *(_QWORD *)(v136 + 192) = v185;
  *(_OWORD *)(v136 + 176) = v138;
  v184[1] = 0;
  v184[2] = 0;
  v139 = v186;
  *(_QWORD *)(v136 + 216) = v187;
  *(_OWORD *)(v136 + 200) = v139;
  v185 = 0;
  v186 = 0uLL;
  v187 = 0;
  v140 = v188;
  v188 = 0uLL;
  v141 = v189;
  *(_OWORD *)(v136 + 224) = v140;
  *(_OWORD *)(v136 + 240) = v141;
  v189 = 0uLL;
  *(_QWORD *)(v136 + 256) = &off_24EC37D40;
  v142 = v190;
  v190 = 0uLL;
  *(_OWORD *)(v136 + 264) = v142;
  *(_QWORD *)(v136 + 280) = v191;
  *(_QWORD *)(v136 + 288) = &off_24EC2E888;
  *(_OWORD *)(v136 + 296) = v192;
  v191 = 0;
  v192 = 0uLL;
  *(_QWORD *)(v136 + 312) = &off_24EC2E850;
  *(_OWORD *)(v136 + 320) = v193;
  v193 = 0uLL;
  *(_QWORD *)(v136 + 336) = &off_24EC561A0;
  v143 = *(_OWORD *)&__p[1];
  *(_QWORD *)(v136 + 360) = v169;
  *(_OWORD *)(v136 + 344) = v143;
  __p[1] = 0;
  __p[2] = 0;
  v169 = 0;
  v144 = v170;
  *(_QWORD *)(v136 + 384) = v171;
  *(_OWORD *)(v136 + 368) = v144;
  v170 = 0uLL;
  v171 = 0;
  v145 = v172;
  v172 = 0uLL;
  v146 = v173;
  *(_OWORD *)(v136 + 392) = v145;
  *(_OWORD *)(v136 + 408) = v146;
  v173 = 0uLL;
  *(_QWORD *)(v136 + 424) = &off_24EC561D0;
  *(_OWORD *)(v136 + 432) = v175;
  v147 = v176;
  *((_QWORD *)&v175 + 1) = 0;
  v176 = 0;
  *(_QWORD *)(v136 + 448) = v147;
  *(_QWORD *)(v136 + 456) = &off_24EC2E888;
  *(_OWORD *)(v136 + 464) = v178;
  v178 = 0uLL;
  *(_QWORD *)&v175 = 0;
  *(_QWORD *)(v136 + 480) = &off_24EC2E850;
  *(_OWORD *)(v136 + 488) = v180;
  v180 = 0uLL;
  *(_QWORD *)(v165 + 72) = v136;
  sub_22366DF1C((uint64_t)__p);
  if (v167)
  {
    v148 = (unint64_t *)&v167->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  sub_2234EF0F8((uint64_t)v184);
  v150 = v182;
  if (v182)
  {
    v151 = (unint64_t *)&v182->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  sub_22366E100((uint64_t)&v198);
  v156 = v195;
  if (v195)
  {
    v157 = (unint64_t *)&v195->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v197;
  if (v197)
  {
    v160 = (unint64_t *)&v197->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (*((_QWORD *)&v166 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v166 + 1) + 16))(*((_QWORD *)&v166 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v166 + 1));
    }
  }
  return v165;
}

void sub_223661D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a70;
  char a72;
  uint64_t v72;

  if (*(char *)(v72 - 233) < 0)
  {
    operator delete(*(void **)(v72 - 256));
    sub_223167354(v72 - 192);
    sub_223167354(v72 - 176);
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&a17);
        sub_223167354((uint64_t)&a19);
        sub_2234EF0F8((uint64_t)&a47);
        sub_223167354((uint64_t)&a43);
        sub_223167354((uint64_t)&a45);
        sub_22366E100((uint64_t)&a72);
        sub_223167354((uint64_t)&a68);
        sub_223167354((uint64_t)&a70);
        sub_223167354((uint64_t)&a15);
        sub_223167354(a12);
        if (*(char *)(a14 + 55) < 0)
        {
          operator delete(*a10);
          if ((*(char *)(a14 + 31) & 0x80000000) == 0)
LABEL_11:
            _Unwind_Resume(a1);
        }
        else if ((*(char *)(a14 + 31) & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
        operator delete(*a11);
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C0]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v72 - 192);
    sub_223167354(v72 - 176);
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2A0]);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223662188()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x2A0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x2236620A0);
}

uint64_t sub_2236621A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC560A8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_22366DF1C(v2 + 336);
    sub_2234EF0F8(v2 + 168);
    v3 = sub_22366E100(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_22366DF1C(v7 + 336);
    sub_2234EF0F8(v7 + 168);
    v8 = sub_22366E100(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223662308(uint64_t a1)
{
  sub_2236621A4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22366232C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13[2];

  sub_224502FB8(a2, "SharedSessionNode ", 1, &v12);
  v5 = (_QWORD *)operator new();
  v6 = v12;
  v13[0] = (uint64_t)v12;
  if (v12)
  {
    v7 = (std::__shared_weak_count *)operator new();
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E800;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v7 = 0;
  }
  v13[1] = (uint64_t)v7;
  v12 = 0;
  sub_2236609B8(v5, v13, a1);
  *a3 = v5;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = v12;
    if (v12)
    {
LABEL_9:
      v11 = *v10;
      *v10 = 0;
      if (v11)
        sub_22450297C((uint64_t)v10, v11);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_8:
    v10 = v12;
    if (v12)
      goto LABEL_9;
  }
}

void sub_223662480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B3C404AE8992ELL);
  sub_22331A3CC((uint64_t ***)va);
  _Unwind_Resume(a1);
}

void sub_2236624BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22331A3CC((uint64_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2236624D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24EC55B50;
  *(_QWORD *)(a1 + 56) = &unk_24EC55B88;
  *(_QWORD *)(a1 + 112) = &unk_24EC55BB0;
  v2 = *(std::__shared_weak_count **)(a1 + 3968);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1440));
    v5 = *(_QWORD *)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = 0;
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  std::random_device::~random_device((std::random_device *)(a1 + 1440));
  v8 = *(_QWORD *)(a1 + 1424);
  *(_QWORD *)(a1 + 1424) = 0;
  if (v8)
LABEL_6:
    (*(void (**)(void))(a1 + 1432))();
LABEL_7:
  v6 = *(_QWORD *)(a1 + 1416);
  *(_QWORD *)(a1 + 1416) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_223223FC0(a1 + 216);
  return sub_22365BFA4(a1);
}

void sub_22366259C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24EC55B50;
  *(_QWORD *)(a1 + 56) = &unk_24EC55B88;
  *(_QWORD *)(a1 + 112) = &unk_24EC55BB0;
  v2 = *(std::__shared_weak_count **)(a1 + 3968);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::random_device::~random_device((std::random_device *)(a1 + 1440));
    v7 = *(_QWORD *)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = 0;
    if (!v7)
    {
LABEL_7:
      v6 = *(_QWORD *)(a1 + 1416);
      *(_QWORD *)(a1 + 1416) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      sub_223223FC0(a1 + 216);
      sub_22365BFA4(a1);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1440));
    v5 = *(_QWORD *)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = 0;
    if (!v5)
      goto LABEL_7;
  }
  (*(void (**)(void))(a1 + 1432))();
  goto LABEL_7;
}

uint64_t sub_22366267C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(a1 - 56) = &off_24EC55B50;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24EC55B88;
  *(_QWORD *)(a1 + 56) = &unk_24EC55BB0;
  v3 = *(std::__shared_weak_count **)(a1 + 3912);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1384));
    v6 = *(_QWORD *)(a1 + 1368);
    *(_QWORD *)(a1 + 1368) = 0;
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  std::random_device::~random_device((std::random_device *)(a1 + 1384));
  v9 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = 0;
  if (v9)
LABEL_6:
    (*(void (**)(void))(a1 + 1376))();
LABEL_7:
  v7 = *(_QWORD *)(a1 + 1360);
  *(_QWORD *)(a1 + 1360) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_223223FC0(a1 + 160);
  return sub_22365BFA4(v2);
}

void sub_223662754(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 56) = &off_24EC55B50;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24EC55B88;
  *(_QWORD *)(a1 + 56) = &unk_24EC55BB0;
  v3 = *(std::__shared_weak_count **)(a1 + 3912);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    std::random_device::~random_device((std::random_device *)(a1 + 1384));
    v8 = *(_QWORD *)(a1 + 1368);
    *(_QWORD *)(a1 + 1368) = 0;
    if (!v8)
    {
LABEL_7:
      v7 = *(_QWORD *)(a1 + 1360);
      *(_QWORD *)(a1 + 1360) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      sub_223223FC0(a1 + 160);
      sub_22365BFA4(v2);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1384));
    v6 = *(_QWORD *)(a1 + 1368);
    *(_QWORD *)(a1 + 1368) = 0;
    if (!v6)
      goto LABEL_7;
  }
  (*(void (**)(void))(a1 + 1376))();
  goto LABEL_7;
}

uint64_t sub_223662840(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(a1 - 112) = &off_24EC55B50;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24EC55B88;
  *(_QWORD *)a1 = &unk_24EC55BB0;
  v3 = *(std::__shared_weak_count **)(a1 + 3856);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1328));
    v6 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)(a1 + 1312) = 0;
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  std::random_device::~random_device((std::random_device *)(a1 + 1328));
  v9 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = 0;
  if (v9)
LABEL_6:
    (*(void (**)(void))(a1 + 1320))();
LABEL_7:
  v7 = *(_QWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1304) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_223223FC0(a1 + 104);
  return sub_22365BFA4(v2);
}

void sub_223662918(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 112) = &off_24EC55B50;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24EC55B88;
  *(_QWORD *)a1 = &unk_24EC55BB0;
  v3 = *(std::__shared_weak_count **)(a1 + 3856);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    std::random_device::~random_device((std::random_device *)(a1 + 1328));
    v8 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)(a1 + 1312) = 0;
    if (!v8)
    {
LABEL_7:
      v7 = *(_QWORD *)(a1 + 1304);
      *(_QWORD *)(a1 + 1304) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      sub_223223FC0(a1 + 104);
      sub_22365BFA4(v2);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    std::random_device::~random_device((std::random_device *)(a1 + 1328));
    v6 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)(a1 + 1312) = 0;
    if (!v6)
      goto LABEL_7;
  }
  (*(void (**)(void))(a1 + 1320))();
  goto LABEL_7;
}

void sub_223662A04()
{
  sub_22316DBD4("vector");
}

uint64_t sub_223662A18(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      if (v3 == v4)
        return a1;
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 33) & 0x80000000) == 0)
          goto LABEL_4;
      }
      else if ((*(char *)(v3 - 33) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 56));
LABEL_4:
      v3 -= 56;
    }
  }
  return a1;
}

uint64_t sub_223662A94(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_223662B14(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = result[5];
    v1[4] = &off_24EC7A528;
    v1[5] = 0;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v3 = v1[5];
      v1[5] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    v4 = (_QWORD *)v1[3];
    if (v4 == v1)
    {
      v5 = 4;
      v4 = v1;
    }
    else
    {
      if (!v4)
        goto LABEL_11;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223662BB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223662BC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223662BF0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_223662C00(_QWORD *a1, void *a2, size_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  __int128 v11;
  std::string *p_p;
  size_t v13;
  uint64_t v14;
  std::mutex *v15;
  std::string __p;
  _QWORD v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v9 = *a1;
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = ".";
    v17[3] = 1;
    v17[4] = a5;
    v17[5] = a6;
    sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &__p);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::mutex::lock((std::mutex *)(v9 + 152));
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v11;
    if ((v10 & 0x80u) == 0)
      v13 = v10;
    else
      v13 = *((_QWORD *)&v11 + 1);
    sub_223FD4EDC((uint64_t **)(v9 + 128), p_p, v13, a4);
    std::mutex::unlock((std::mutex *)(v9 + 152));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *a1;
    v15 = (std::mutex *)(*a1 + 152);
    std::mutex::lock(v15);
    sub_223FD4EDC((uint64_t **)(v14 + 128), a2, a3, a4);
    std::mutex::unlock(v15);
  }
}

void sub_223662D48(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223662D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *sub_223662D94(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_223197FA4(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_223662E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

void sub_223662E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223662EC4(uint64_t a1)
{
  char **v3;
  char *v4[2];
  __int128 v5;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  sub_2232D3688();
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  sub_2245312C0(&v3, &v5);
  *(_OWORD *)(a1 + 112) = v5;
  sub_22323DF84((uint64_t)&v3, v4[0]);
  return a1;
}

void sub_223662F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  void **v12;
  void **v14;
  void **v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  sub_22323DF84((uint64_t)&a10, a11);
  v14 = (void **)*v12;
  if (!*v12)
  {
LABEL_12:
    v17 = *(std::__shared_weak_count **)(v11 + 72);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        std::mutex::~mutex((std::mutex *)v11);
        _Unwind_Resume(a1);
      }
    }
    std::mutex::~mutex((std::mutex *)v11);
    _Unwind_Resume(a1);
  }
  v15 = *(void ***)(v11 + 96);
  v16 = *v12;
  if (v15 == v14)
  {
LABEL_11:
    *(_QWORD *)(v11 + 96) = v14;
    operator delete(v16);
    goto LABEL_12;
  }
  while (1)
  {
    if (*((char *)v15 - 1) < 0)
    {
      operator delete(*(v15 - 3));
      if (*((char *)v15 - 33) < 0)
LABEL_9:
        operator delete(*(v15 - 7));
    }
    else if (*((char *)v15 - 33) < 0)
    {
      goto LABEL_9;
    }
    v15 -= 7;
    if (v15 == v14)
    {
      v16 = *v12;
      goto LABEL_11;
    }
  }
}

void sub_223663034(std::mutex *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[48];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(void ***)&this[1].__m_.__opaque[16];
      if (!v5)
        goto LABEL_16;
LABEL_6:
      v6 = *(void ***)&this[1].__m_.__opaque[24];
      v7 = v5;
      if (v6 == v5)
      {
LABEL_15:
        *(_QWORD *)&this[1].__m_.__opaque[24] = v5;
        operator delete(v7);
        goto LABEL_16;
      }
      while (1)
      {
        if (*((char *)v6 - 1) < 0)
        {
          operator delete(*(v6 - 3));
          if (*((char *)v6 - 33) < 0)
LABEL_13:
            operator delete(*(v6 - 7));
        }
        else if (*((char *)v6 - 33) < 0)
        {
          goto LABEL_13;
        }
        v6 -= 7;
        if (v6 == v5)
        {
          v7 = *(void ***)&this[1].__m_.__opaque[16];
          goto LABEL_15;
        }
      }
    }
  }
  v5 = *(void ***)&this[1].__m_.__opaque[16];
  if (v5)
    goto LABEL_6;
LABEL_16:
  v8 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (!v8)
    goto LABEL_20;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    std::mutex::~mutex(this);
  }
  else
  {
LABEL_20:
    std::mutex::~mutex(this);
  }
}

char *sub_223663150(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  void **v20;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_223662A04();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      sub_223174E94();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[56 * v3];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[56 * v6];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v8 + 2) = v10;
  *((_QWORD *)v8 + 3) = v11;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = v8 + 56;
  v13 = (char *)*a1;
  v14 = (void **)a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15 * 8];
      v17 = (char *)&v14[v15];
      v18 = *(_OWORD *)&v14[v15 - 7];
      *((_QWORD *)v16 - 5) = v14[v15 - 5];
      *(_OWORD *)(v16 - 56) = v18;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v16 - 4) = v14[v15 - 4];
      v19 = *(_OWORD *)&v14[v15 - 3];
      *((_QWORD *)v16 - 1) = v14[v15 - 1];
      *(_OWORD *)(v16 - 24) = v19;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 1) = 0;
      *((_QWORD *)v17 - 3) = 0;
      v15 -= 7;
    }
    while (&v14[v15] != (void **)v13);
    v14 = (void **)*a1;
    v20 = (void **)a1[1];
    *a1 = &v8[v15 * 8];
    a1[1] = v12;
    a1[2] = v9;
    while (1)
    {
      if (v20 == v14)
        goto LABEL_23;
      if (*((char *)v20 - 1) < 0)
      {
        operator delete(*(v20 - 3));
        if ((*((char *)v20 - 33) & 0x80000000) == 0)
          goto LABEL_15;
      }
      else if ((*((char *)v20 - 33) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(v20 - 7));
LABEL_15:
      v20 -= 7;
    }
  }
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
LABEL_23:
  if (v14)
    operator delete(v14);
  return v12;
}

BOOL sub_22366331C(uint64_t a1, void *key, void **a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  unint64_t *v21;
  unint64_t v22;
  void *value;
  std::__shared_weak_count *v25;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    return 0;
LABEL_7:
  v12 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    value = v12;
    v25 = v11;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v20 = v12 != 0;
    if (!v12)
      goto LABEL_26;
    goto LABEL_25;
  }
  value = v12;
  v25 = 0;
  v20 = v12 != 0;
  if (v12)
LABEL_25:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_26:
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v20;
}

void sub_2236634C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2236634D4(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527BAC(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_223663624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223663638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  const void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;
  _QWORD v12[5];
  _QWORD *v13;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = *(const void **)a3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)v3;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v11) = *(_QWORD *)(a3 + 8);
  v6 = __dst;
  if (v3)
LABEL_8:
    memmove(v6, v5, v3);
  *((_BYTE *)v6 + v3) = 0;
  v12[0] = a2;
  v12[1] = __dst;
  v12[2] = a2;
  v12[3] = __dst;
  v12[4] = __dst;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v13 = v12;
  ((void (*)(_QWORD **, uint64_t))off_24EC55DF0[v9])(&v13, a2);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223663750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366376C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2236638A4(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223663870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2236638A4@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 3;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223663A38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223663A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223663A88(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_223663BC0(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223663B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223663BC0@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 8;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223663D54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223663D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223663DA8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223663DBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC55E30;
  result[1] = v3;
  return result;
}

uint64_t sub_223663DF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC55E30;
  a2[1] = v2;
  return result;
}

uint64_t sub_223663E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_223663E1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4cv3d3kit3xpc13DictionaryRefEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4cv3d3kit3xpc13DictionaryRefEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4cv3d3kit3xpc13DictionaryRefEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4cv3d3kit3xpc13DictionaryRefEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223663E88()
{
  return &unk_24EC55EB0;
}

uint64_t sub_223663E94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_223663FCC(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223663F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223663FCC@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  void *__p;
  void *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v19[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a3;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  LOBYTE(info.numer) = 3;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_2231AA8F0((char *)&info, (uint64_t)v19, a4);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v19);
}

void sub_223664160(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223664178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2236641B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236641DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm39"
                     "7ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_"
                     "24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32"
                                "ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18"
                                "ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIjEEEC1IJjjEEERS7_DpT_EUlOT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22366424C(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v4;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t *v21;

  if (a3[1] - *a3 <= 23)
  {
    v16 = a2;
    v17 = "{}";
    v18 = a2;
    v19 = "{}";
    v20 = "{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v21 = &v16;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC55F20[v4])(&v21, a2);
    }
LABEL_14:
    sub_22316DD70();
  }
  v16 = a2;
  v17 = "{";
  v18 = a2;
  v19 = "{";
  v20 = "{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24EC55DD8[v6])(&v21, a2);
  v8 = *a3;
  v16 = a2;
  v17 = v8;
  v18 = a2;
  v19 = v8;
  v20 = v8;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_14;
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24EC55DA8[v9])(&v21, a2);
  v10 = a3[1];
  v11 = v8 + 24;
  if (v11 != v10)
  {
    v12 = v11;
    do
    {
      v16 = a2;
      v17 = ",";
      v18 = a2;
      v19 = ",";
      v20 = ",";
      v13 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v13 == -1)
        goto LABEL_14;
      v21 = &v16;
      ((void (*)(uint64_t **, uint64_t))off_24EC55DD8[v13])(&v21, a2);
      v16 = a2;
      v17 = v12;
      v18 = a2;
      v19 = v12;
      v20 = v11;
      v14 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v14 == -1)
        goto LABEL_14;
      v21 = &v16;
      ((void (*)(uint64_t **, uint64_t))off_24EC55DA8[v14])(&v21, a2);
      v12 += 24;
      v11 += 24;
    }
    while (v12 != v10);
  }
  v16 = a2;
  v17 = "}";
  v18 = a2;
  v19 = "}";
  v20 = "}";
  v15 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_14;
  v21 = &v16;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC55DD8[v15])(&v21, a2);
}

void sub_223664414()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223664428(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC55F48;
  result[1] = v3;
  return result;
}

uint64_t sub_22366445C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC55F48;
  a2[1] = v2;
  return result;
}

uint64_t sub_223664478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_223664488(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKN4cv3d5recon14core_analytics19TelemetryAggregatorILNS1_18TelemetryEventTypeE0EEERNS1_23CoreAna"
                     "lyticsDispatcherEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKN4cv3d5recon14core_analytics19TelemetryAggregatorILNS1_18TelemetryEventTypeE0EEERNS"
                                "1_23CoreAnalyticsDispatcherEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKN4cv3d5recon14core_analytics19TelemetryAggregatorILNS1_18TelemetryEventTypeE0EEERNS1_23CoreAnalyticsDispatcherEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKN4cv3d5recon14core_analytics19TelemetryAggregatorILNS1_18TelemetryEventTypeE0EEERNS1_23CoreAnalyticsDispatcherEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236644F4()
{
  return &unk_24EC55FC8;
}

void sub_223664504()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223664518(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC55FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_22366454C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC55FF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_223664568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_223664578(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvRKNSt3__16vectorIN4cv3d5recon14core_analytics12FailureStore14FailureSummaryENS_9allocatorIS5_EEE"
                     "ERNS3_23CoreAnalyticsDispatcherEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFvRKNSt3__16vectorIN4cv3d5recon14core_analytics12FailureStore14FailureSummaryENS_9alloc"
                                "atorIS5_EEEERNS3_23CoreAnalyticsDispatcherEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvRKNSt3__16vectorIN4cv3d5recon14core_analytics12FailureStore14FailureSummaryENS_9allocatorIS5_EEEERNS3_23CoreAnalyticsDispatcherEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvRKNSt3__16vectorIN4cv3d5recon14core_analytics12FailureStore14FailureSummaryENS_9allocatorIS5_EEEERNS3_23CoreAnalyticsDispatcherEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236645E4()
{
  return &unk_24EC56078;
}

void sub_2236645F4(uint64_t a1)
{
  sub_2236621A4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223664620(uint64_t a1)
{
  sub_22366E100(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223664644(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC560F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223664684(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC560F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236646D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_2236646E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56130;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366471C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56130;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223664764(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC56168;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC56168;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223664838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223664864(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC56168;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2236648A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC56168;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236648F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223664904(uint64_t a1)
{
  sub_22366DF1C(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223664928(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC561D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223664968(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC561D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236649B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2236649CC(uint64_t a1)
{
  sub_223666574(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2236649F0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  __int128 *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63[2];
  _BYTE v64[440];
  char v65;
  __int128 v66;
  char v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  uint64_t v74;
  __int128 *v75;
  _BYTE v76[24];
  _BYTE *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x210uLL);
    sub_223666830((uint64_t)v4, a2);
    v5 = v4 + 1;
    v71 = v4 + 1;
    v72 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (uint64_t *)a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 7;
    std::mutex::lock((std::mutex *)(v8 + 7));
    *(_QWORD *)&v73 = v9;
    *((_QWORD *)&v73 + 1) = v8;
    if (!*((_BYTE *)v8 + 48))
      sub_22324A974();
    v10 = v8[4];
    v11 = *v8;
    v12 = (std::__shared_weak_count **)(*v8 + 16 * v10);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v12 = v5;
    v15 = v11 + 16 * v10;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v8[1] - *v8) >> 4;
    v20 = v8[5];
    v21 = v8[4] + 1;
    if (v21 >= v19)
      v22 = (v8[1] - *v8) >> 4;
    else
      v22 = 0;
    v8[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v8[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v8[3] = v23 - v19;
      v24 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v73 = v38;
            *((_QWORD *)&v73 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC56458;
        *(_OWORD *)(v43 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v43 + 3) = v5;
        *((_QWORD *)v43 + 4) = v4;
        v74 = 0;
        v75 = 0;
        v77 = v43;
        sub_2245022E4(*v34, (uint64_t)v76);
        v44 = v77;
        if (v77 == v76)
        {
          v45 = 4;
          v44 = v76;
        }
        else
        {
          if (!v77)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v72)
        {
          v46 = &v72->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        return;
      }
    }
    else
    {
      v8[5] = v20 + 1;
      v24 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v63 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v63[0] = v29;
      v63[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v63 = 0uLL;
    }
  }
  v64[0] = 0;
  v65 = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    sub_223299E34((uint64_t)v64, a2);
    v65 = 1;
  }
  LOBYTE(v66) = 0;
  v67 = 0;
  if (*(_BYTE *)(a2 + 464))
  {
    v48 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)&v66 = *(_QWORD *)(a2 + 448);
    *((_QWORD *)&v66 + 1) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v67 = 1;
  }
  LOBYTE(v68) = 0;
  v69 = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    v51 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)&v68 = *(_QWORD *)(a2 + 472);
    *((_QWORD *)&v68 + 1) = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v69 = 1;
  }
  v70 = *(_QWORD *)(a2 + 496);
  v75 = 0;
  v54 = (char *)operator new(0x210uLL);
  *(_QWORD *)v54 = &off_24EC564D8;
  *(_OWORD *)(v54 + 8) = *(_OWORD *)v63;
  v54[24] = 0;
  v54[464] = 0;
  if (v65)
  {
    sub_22329ACE4((uint64_t)(v54 + 24), (uint64_t)v64);
    v54[464] = 1;
  }
  v54[472] = 0;
  v54[488] = 0;
  if (v67)
  {
    *(_OWORD *)(v54 + 472) = v66;
    v66 = 0uLL;
    v54[488] = 1;
  }
  v54[496] = 0;
  v54[512] = 0;
  if (v69)
  {
    *((_OWORD *)v54 + 31) = v68;
    v68 = 0uLL;
    v54[512] = 1;
  }
  *((_QWORD *)v54 + 65) = v70;
  v75 = (__int128 *)v54;
  sub_2245022E4(*v25, (uint64_t)&v73);
  v55 = v75;
  if (v75 == &v73)
  {
    v56 = 4;
    v55 = &v73;
  }
  else
  {
    if (!v75)
      goto LABEL_76;
    v56 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v55 + 8 * v56))(v55);
LABEL_76:
  if (v69)
  {
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  if (v67)
  {
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  if (v65)
    sub_2232954B0((uint64_t)v64);
}

void sub_223664FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (a66)
    sub_2232954B0(v66);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22366510C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22366511C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223665128(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223665138(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t **v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  char *v62;
  std::string *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  __int128 *v74;
  std::string *v75;
  std::runtime_error *exception;
  std::runtime_error *v77;
  __int128 v78;
  _BYTE v79[440];
  char v80;
  __int128 v81;
  char v82;
  __int128 v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::runtime_error v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  _QWORD *v95;
  __int128 *v96;
  _QWORD v97[3];
  std::string v98;
  std::string *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v94 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v94 + 1) = 45;
    v73 = (_QWORD *)a1[6];
    v72 = a1 + 6;
    v71 = v73;
    v74 = (__int128 *)*((unsigned __int8 *)v72 + 23);
    if ((char)v74 < 0)
      v74 = (__int128 *)v72[1];
    else
      v71 = v72;
    v95 = v71;
    v96 = v74;
    sub_2231A9820((uint64_t)&v94, (uint64_t)v97, 0, 0, &v98);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = &v98;
    else
      v75 = (std::string *)v98.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v91, (const char *)v75);
    v91.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v77 = std::runtime_error::runtime_error(exception, &v91);
    v77->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v77, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v30 = (uint64_t **)a1[9];
    v78 = 0uLL;
    v31 = (std::__shared_weak_count *)a1[5];
    if (v31)
    {
      v32 = std::__shared_weak_count::lock(v31);
      if (!v32)
      {
        v78 = 0uLL;
        v79[0] = 0;
        v80 = 0;
        if (!*(_BYTE *)(a2 + 440))
        {
LABEL_37:
          LOBYTE(v81) = 0;
          v82 = 0;
          if (*(_BYTE *)(a2 + 464))
          {
            v39 = *(_QWORD *)(a2 + 456);
            *(_QWORD *)&v81 = *(_QWORD *)(a2 + 448);
            *((_QWORD *)&v81 + 1) = v39;
            if (v39)
            {
              v40 = (unint64_t *)(v39 + 8);
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v82 = 1;
          }
          LOBYTE(v83) = 0;
          v84 = 0;
          if (*(_BYTE *)(a2 + 488))
          {
            v42 = *(_QWORD *)(a2 + 480);
            *(_QWORD *)&v83 = *(_QWORD *)(a2 + 472);
            *((_QWORD *)&v83 + 1) = v42;
            if (v42)
            {
              v43 = (unint64_t *)(v42 + 8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            v84 = 1;
          }
          v85 = *(_QWORD *)(a2 + 496);
          v45 = operator new(0x20uLL);
          v45[1] = 0;
          v45[2] = 0;
          *v45 = &off_24EC56558;
          v45[3] = *a3;
          *a3 = 0;
          *(_QWORD *)&v86 = v45 + 3;
          *((_QWORD *)&v86 + 1) = v45;
          v96 = 0;
          v46 = (char *)operator new(0x220uLL);
          *(_QWORD *)v46 = &off_24EC56628;
          *(_OWORD *)(v46 + 8) = v78;
          v78 = 0uLL;
          v46[24] = 0;
          v46[464] = 0;
          if (v80)
          {
            sub_22329ACE4((uint64_t)(v46 + 24), (uint64_t)v79);
            v46[464] = 1;
          }
          v46[472] = 0;
          v46[488] = 0;
          if (v82)
          {
            *(_OWORD *)(v46 + 472) = v81;
            v81 = 0uLL;
            v46[488] = 1;
          }
          v46[496] = 0;
          v46[512] = 0;
          if (v84)
          {
            *((_OWORD *)v46 + 31) = v83;
            v83 = 0uLL;
            v46[512] = 1;
          }
          *((_QWORD *)v46 + 65) = v85;
          *((_OWORD *)v46 + 33) = v86;
          v86 = 0uLL;
          v96 = (__int128 *)v46;
          sub_2245022E4(*v30, (uint64_t)&v94);
          v49 = v96;
          if (v96 == &v94)
          {
            v50 = 4;
            v49 = &v94;
          }
          else
          {
            if (!v96)
            {
LABEL_89:
              sub_223668690((uint64_t)&v78);
              return;
            }
            v50 = 5;
          }
          (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v49 + 8 * v50))(v49, v47, v48);
          goto LABEL_89;
        }
LABEL_36:
        sub_223299E34((uint64_t)v79, a2);
        v80 = 1;
        goto LABEL_37;
      }
      v33 = v32;
      v34 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
      *(_QWORD *)&v78 = v34;
      *((_QWORD *)&v78 + 1) = v32;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v79[0] = 0;
    v80 = 0;
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_37;
    goto LABEL_36;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56558;
  v6[1].__vftable = *a3;
  v89 = v6 + 1;
  v90 = v6;
  v87 = v6 + 1;
  v88 = v6;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v9 = (std::__shared_weak_count *)operator new(0x210uLL);
  sub_223666830((uint64_t)v9, a2);
  v10 = v9 + 1;
  v92 = v9 + 1;
  v93 = v9;
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v13 = (uint64_t *)a1[18];
  v14 = (_QWORD *)operator new();
  *v14 = v13 + 7;
  std::mutex::lock((std::mutex *)(v13 + 7));
  *(_QWORD *)&v94 = v14;
  *((_QWORD *)&v94 + 1) = v13;
  if (!*((_BYTE *)v13 + 48))
    sub_22324A974();
  v15 = v13[4];
  v16 = *v13;
  v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  *v17 = v10;
  v20 = v16 + 16 * v15;
  v21 = *(std::__shared_weak_count **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v9;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (v13[1] - *v13) >> 4;
  v25 = v13[5];
  v26 = v13[4] + 1;
  if (v26 >= v24)
    v27 = (v13[1] - *v13) >> 4;
  else
    v27 = 0;
  v13[4] = v26 - v27;
  if (v25 != v24)
  {
    v13[5] = v25 + 1;
    v29 = (std::mutex **)v94;
    if (!(_QWORD)v94)
      goto LABEL_58;
    goto LABEL_57;
  }
  v28 = v13[3] + 1;
  if (v28 < v24)
    v24 = 0;
  v13[3] = v28 - v24;
  v29 = (std::mutex **)v94;
  if ((_QWORD)v94)
  {
LABEL_57:
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
  }
LABEL_58:
  v51 = (uint64_t **)a1[9];
  v94 = 0uLL;
  v52 = (std::__shared_weak_count *)a1[5];
  if (v52)
  {
    v53 = std::__shared_weak_count::lock(v52);
    if (v53)
    {
      v54 = v53;
      v55 = a1[4];
      v56 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      *(_QWORD *)&v94 = v55;
      *((_QWORD *)&v94 + 1) = v53;
      v58 = (unint64_t *)&v53->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    else
    {
      v94 = 0uLL;
    }
  }
  v60 = v87;
  v61 = v88;
  v87 = 0;
  v88 = 0;
  v62 = (char *)operator new(0x38uLL);
  *(_QWORD *)v62 = &off_24EC565A8;
  *(_OWORD *)(v62 + 8) = v94;
  v94 = 0uLL;
  *((_QWORD *)v62 + 3) = v10;
  *((_QWORD *)v62 + 4) = v9;
  v95 = 0;
  v96 = 0;
  *((_QWORD *)v62 + 5) = v60;
  *((_QWORD *)v62 + 6) = v61;
  v97[0] = 0;
  v97[1] = 0;
  v99 = (std::string *)v62;
  sub_2245022E4(*v51, (uint64_t)&v98);
  v63 = v99;
  if (v99 == &v98)
  {
    v64 = 4;
    v63 = &v98;
  }
  else
  {
    if (!v99)
      goto LABEL_72;
    v64 = 5;
  }
  (*(void (**)(void))(v63->__r_.__value_.__r.__words[0] + 8 * v64))();
LABEL_72:
  if (v93)
  {
    v65 = &v93->__shared_owners_;
    do
      v66 = __ldaxr((unint64_t *)v65);
    while (__stlxr(v66 - 1, (unint64_t *)v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v88)
  {
    v67 = &v88->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v90)
  {
    v69 = &v90->__shared_owners_;
    do
      v70 = __ldaxr((unint64_t *)v69);
    while (__stlxr(v70 - 1, (unint64_t *)v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_223665878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  if (a66)
    sub_2232954B0(v66);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223665890(_Unwind_Exception *a1, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (v4)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 144), (const std::exception_ptr *)(v3 - 168));
      v5.__ptr_ = (void *)(v3 - 144);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 144));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 168));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 184));
      if (*(char *)(v3 - 65) < 0)
        operator delete(*(void **)(v3 - 88));
      JUMPOUT(0x223665770);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(a1);
}

void sub_223665904(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 168));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 184));
  if (*(char *)(v1 - 65) < 0)
  {
    operator delete(*(void **)(v1 - 88));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223665958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_223668690((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223668690((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236659AC()
{
  uint64_t v0;

  sub_223606534(v0);
  JUMPOUT(0x2236659B8);
}

void sub_2236659D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 144));
  sub_223167354(v2 - 160);
  sub_223167354(v2 - 216);
  sub_223167354(v2 - 200);
  _Unwind_Resume(a1);
}

void sub_223665A78(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  sub_223167354(v2 - 216);
  sub_223167354(v2 - 200);
  _Unwind_Resume(a1);
}

void sub_223665A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 216);
  sub_223167354(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_223665AB8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223665B2C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC566A8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC56168;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223665C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223665CD0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC56728;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223665DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223665E44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC567A8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22366605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223666124@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC56828;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22366633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223666404(uint64_t a1)
{
  return sub_223666574(a1 - 16);
}

void sub_22366640C(uint64_t a1)
{
  sub_223666574(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223666434(uint64_t a1, uint64_t a2)
{
  return sub_223665B2C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22366643C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223665E44((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223666444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223666124((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22366644C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223666454(uint64_t a1)
{
  return sub_223666574(a1 - 24);
}

void sub_22366645C(uint64_t a1)
{
  sub_223666574(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223666484(uint64_t a1)
{
  return sub_223665CD0((_QWORD *)(a1 - 24));
}

uint64_t sub_22366648C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_223666494(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2236664FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223666564(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_223666574(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC56208;
  *(_QWORD *)(a1 + 16) = &unk_24EC56280;
  *(_QWORD *)(a1 + 24) = &unk_24EC562C0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_223666774(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  if (*(_BYTE *)(a1 + 504))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 496);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 472);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 456))
    sub_2232954B0(a1 + 16);
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_223666830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24EC56408;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    sub_223299E34(a1 + 24, a2);
    *(_BYTE *)(a1 + 464) = 1;
  }
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (*(_BYTE *)(a2 + 464))
  {
    v4 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 480) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)(a1 + 488) = 1;
  }
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    v7 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 504) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a1 + 512) = 1;
  }
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 496);
  return a1;
}

void sub_22366690C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 464))
    sub_2232954B0(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

void sub_223666930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223666940(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223666970(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 512))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 504);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_12;
  v5 = *(std::__shared_weak_count **)(a1 + 480);
  if (!v5)
    goto LABEL_12;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_12:
    if (!*(_BYTE *)(a1 + 464))
      return;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (*(_BYTE *)(a1 + 464))
LABEL_13:
    sub_2232954B0(a1 + 24);
}

_QWORD *sub_223666A30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC56458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223666A74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC56458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223666AC8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56458;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223666B38(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56458;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223666B88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223666BC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223666BFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223666F20((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223623B70(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223666DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223623B70(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223666EA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_"
                                "T0_E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223666F14()
{
  return &unk_24EC564B8;
}

void sub_223666F20(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::exception_ptr v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v32, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::__shared_weak_count_vtbl **))(j[2] + 16))(j + 2, &v32);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v30.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v30), v15))
    {
      sub_2233236D4(2u);
    }
    v16 = v32;
    v30.__ptr_ = v32;
    v31 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v16)
      CFRetain(v16);
    v19 = (std::__shared_weak_count *)operator new();
    v20 = v19;
    v19->__shared_owners_ = 0;
    v21 = (unint64_t *)&v19->__shared_owners_;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1FC58;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = v16;
    *(_QWORD *)(v14 + 144) = v16;
    *(_QWORD *)(v14 + 152) = v19;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    v24 = v31;
    if (v31)
    {
      v25 = (unint64_t *)&v31->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_223667294(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t *v6;
  uint64_t v7;
  va_list v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;
  va_list v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, va_list);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_223167354((uint64_t)va2);
  std::mutex::unlock(v3);
  sub_223167354((uint64_t)va3);
  if (a2 == 1)
  {
    v6 = (uint64_t *)__cxa_begin_catch(a1);
    v7 = *v6;
    v12 = *(_QWORD *)(*(_QWORD *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v10 = (*(uint64_t (**)(void))(v7 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v17 >= 0)
      va_copy(v8, va2);
    else
      v8 = v14;
    if (v17 >= 0)
      v9 = HIBYTE(v17);
    else
      v9 = v16;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v8, v9, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2236673B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2236673D0);
}

uint64_t sub_2236673DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_24EC564D8;
  if (*(_BYTE *)(a1 + 512))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 504);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 480);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 464))
    sub_2232954B0(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2236674A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_24EC564D8;
  if (*(_BYTE *)(a1 + 512))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 504);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 480);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 464))
    sub_2232954B0(a1 + 24);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366757C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x210uLL);
  *v2 = &off_24EC564D8;
  sub_223667788((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2236675BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236675D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC564D8;
  return sub_223667788((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2236675EC(uint64_t a1)
{
  sub_2236678AC(a1 + 8);
}

void sub_2236675F4(void *a1)
{
  sub_2236678AC((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_22366761C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223666F20((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223623B70(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2236676C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223623B70(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223667710(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366777C()
{
  return &unk_24EC56538;
}

uint64_t sub_223667788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  if (*(_BYTE *)(a2 + 456))
  {
    sub_223299E34(a1 + 16, a2 + 16);
    *(_BYTE *)(a1 + 456) = 1;
  }
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a2 + 480))
  {
    v7 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a1 + 480) = 1;
  }
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    v10 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)(a1 + 504) = 1;
  }
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  return a1;
}

void sub_223667874(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 456))
  {
    sub_2232954B0(v2);
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v4)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void sub_2236678AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  if (*(_BYTE *)(a1 + 504))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 496);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 472);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 456))
    sub_2232954B0(a1 + 16);
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_22366796C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22366797C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2236679AC(uint64_t a1)
{
  return sub_223623B70((uint64_t *)(a1 + 24));
}

_QWORD *sub_2236679B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC565A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223667A40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC565A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223667AD8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC565A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223667B68(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC565A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223667BD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223667C58(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223667CD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223666F20(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223623B70((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223667FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223667FDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223667DE8);
    JUMPOUT(0x223667DB8);
  }
  sub_2233236D4(3u);
}

void sub_223668038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223668064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223623B70(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223668150(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUl"
                     "T_T0_E_EEvSB_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NS"
                                "t3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236681BC()
{
  return &unk_24EC56608;
}

_QWORD *sub_2236681C8(_QWORD *a1)
{
  *a1 = &off_24EC56628;
  sub_223668690((uint64_t)(a1 + 1));
  return a1;
}

void sub_2236681F8(_QWORD *a1)
{
  *a1 = &off_24EC56628;
  sub_223668690((uint64_t)(a1 + 1));
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223668238(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x220uLL);
  *v2 = &off_24EC56628;
  sub_223668544((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223668278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22366828C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC56628;
  return sub_223668544((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_2236682A8(uint64_t a1)
{
  return sub_223668690(a1 + 8);
}

void sub_2236682B0(void *a1)
{
  sub_223668690((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_2236682D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[66];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223666F20((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223623B70((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2236683E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223668460(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223668494);
  JUMPOUT(0x2236684C4);
}

uint64_t sub_2236684CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223668538()
{
  return &unk_24EC56688;
}

uint64_t sub_223668544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  if (*(_BYTE *)(a2 + 456))
  {
    sub_223299E34(a1 + 16, a2 + 16);
    *(_BYTE *)(a1 + 456) = 1;
  }
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a2 + 480))
  {
    v7 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a1 + 480) = 1;
  }
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    v10 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)(a1 + 504) = 1;
  }
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v13 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 528) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return a1;
}

void sub_223668658(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 456))
  {
    sub_2232954B0(v2);
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v4)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223668690(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 528);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 504))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 504))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 496);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 480))
  {
    v8 = *(std::__shared_weak_count **)(a1 + 472);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (*(_BYTE *)(a1 + 456))
    sub_2232954B0(a1 + 16);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_223668790(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC566A8;
  v2 = a1[4];
  a1[3] = &off_24EC56168;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2236687E8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC566A8;
  v2 = a1[4];
  a1[3] = &off_24EC56168;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223668850(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC566A8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC56168;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2236688C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236688E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC566A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC56168;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223668950(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223668968(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC56168;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2236689B8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC56168;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223668A04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC56168;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223668AB8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223668AF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPost"
                     "processingResultEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27"
                                "SessionPostprocessingResultEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223668B60()
{
  return &unk_24EC56708;
}

_QWORD *sub_223668B6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56728;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223668BA4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56728;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223668BEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC56728;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223668C3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC56728;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223668C6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223668C7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223668CA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223668D3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223668D78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPost"
                     "processingResultEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27"
                                "SessionPostprocessingResultEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223668DE4()
{
  return &unk_24EC56788;
}

_QWORD *sub_223668DF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC567A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223668E28(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC567A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223668E70(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC567A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223668EC8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC567A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223668F00(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223668F10(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223668F3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2236690B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223669128(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223669194()
{
  return &unk_24EC56808;
}

_QWORD *sub_2236691A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56828;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2236691D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56828;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223669220(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56828;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223669278(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56828;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2236692B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2236692C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2236692EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2236693A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236693F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPos"
                     "tprocessingResultEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_2"
                                "7SessionPostprocessingResultEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24ProcessFrameBundleResultENS5_27SessionPostprocessingResultEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366945C()
{
  return &unk_24EC56888;
}

void sub_22366946C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223669490(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2236694A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24ProcessFrameBundleResu"
                     "ltENS7_27SessionPostprocessingResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24ProcessFram"
                                "eBundleResultENS7_27SessionPostprocessingResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24ProcessFrameBundleResultENS7_27SessionPostprocessingResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24ProcessFrameBundleResultENS7_27SessionPostprocessingResultEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223669518(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223669544(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223669580@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC568F8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2236695E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223669678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22366968C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223669730(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2236697F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223669808(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2236698CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236698E0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223669984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22366999C(uint64_t a1)
{
  sub_22366B324(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2236699C0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::mutex **v21;
  uint64_t **v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  std::__shared_weak_count *v50[2];
  __int128 __p;
  uint64_t v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    sub_22366B560(&v54, a2);
    v5 = v54;
    v4 = v55;
    if (v55)
    {
      p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 56;
    std::mutex::lock((std::mutex *)(v8 + 56));
    *(_QWORD *)&v56 = v9;
    *((_QWORD *)&v56 + 1) = v8;
    if (!*(_BYTE *)(v8 + 48))
      sub_22324A974();
    v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * *(_QWORD *)(v8 + 32));
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v5;
    v10[1] = v4;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    v17 = *(_QWORD *)(v8 + 40);
    v18 = *(_QWORD *)(v8 + 32) + 1;
    if (v18 >= v16)
      v19 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    else
      v19 = 0;
    *(_QWORD *)(v8 + 32) = v18 - v19;
    if (v17 == v16)
    {
      v20 = *(_QWORD *)(v8 + 24) + 1;
      if (v20 < v16)
        v16 = 0;
      *(_QWORD *)(v8 + 24) = v20 - v16;
      v21 = (std::mutex **)v56;
      if (!(_QWORD)v56)
      {
LABEL_35:
        v31 = (uint64_t **)a1[9];
        v56 = 0uLL;
        v32 = (std::__shared_weak_count *)a1[5];
        if (v32)
        {
          v33 = std::__shared_weak_count::lock(v32);
          if (v33)
          {
            v34 = v33;
            v35 = a1[4];
            v36 = (unint64_t *)&v33->__shared_weak_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
            *(_QWORD *)&v56 = v35;
            *((_QWORD *)&v56 + 1) = v33;
            v38 = (unint64_t *)&v33->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          else
          {
            v56 = 0uLL;
          }
        }
        v57 = v5;
        v58 = v4;
        v60 = 0;
        v40 = (char *)operator new(0x30uLL);
        *(_QWORD *)v40 = &off_24EC56BB0;
        *(_OWORD *)(v40 + 8) = v56;
        v56 = 0uLL;
        *((_QWORD *)v40 + 3) = v5;
        *((_QWORD *)v40 + 4) = v4;
        v57 = 0;
        v58 = 0;
        v60 = v40;
        sub_2245022E4(*v31, (uint64_t)v59);
        v41 = v60;
        if (v60 == v59)
        {
          v42 = 4;
          v41 = v59;
        }
        else
        {
          if (!v60)
            goto LABEL_49;
          v42 = 5;
        }
        (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_49:
        v43 = v55;
        if (v55)
        {
          v44 = (unint64_t *)&v55->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v8 + 40) = v17 + 1;
      v21 = (std::mutex **)v56;
      if (!(_QWORD)v56)
        goto LABEL_35;
    }
    std::mutex::unlock(*v21);
    MEMORY[0x227684CE8](v21, 0x20C4093837F09);
    goto LABEL_35;
  }
  v22 = (uint64_t **)a1[9];
  *(_OWORD *)v50 = 0uLL;
  v23 = (std::__shared_weak_count *)a1[5];
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      v26 = (std::__shared_weak_count *)a1[4];
      v27 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v50[0] = v26;
      v50[1] = v24;
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      *(_OWORD *)v50 = 0uLL;
    }
  }
  LOBYTE(__p) = 0;
  v53 = 0;
  v46 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      __p = *(_OWORD *)a2;
      v52 = *(_QWORD *)(a2 + 16);
    }
    v53 = 1;
  }
  v58 = 0;
  v47 = (char *)operator new(0x38uLL);
  *(_QWORD *)v47 = off_24EC56C30;
  *(_OWORD *)(v47 + 8) = *(_OWORD *)v50;
  v47[24] = 0;
  v47[48] = 0;
  if (v46)
  {
    *(_OWORD *)(v47 + 24) = __p;
    *((_QWORD *)v47 + 5) = v52;
    v52 = 0;
    __p = 0uLL;
    v47[48] = 1;
  }
  v58 = (std::__shared_weak_count *)v47;
  sub_2245022E4(*v22, (uint64_t)&v56);
  v48 = (__int128 *)v58;
  if (v58 == (std::__shared_weak_count *)&v56)
  {
    v49 = 4;
    v48 = &v56;
    goto LABEL_66;
  }
  if (v58)
  {
    v49 = 5;
LABEL_66:
    (*(void (**)(__int128 *))(*(_QWORD *)v48 + 8 * v49))(v48);
  }
  if (v53 && SHIBYTE(v52) < 0)
    operator delete((void *)__p);
}

void sub_223669E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a17 && a16 < 0)
    operator delete(__p);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223669F84(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223669F94(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223669FA0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223669FB0(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::mutex **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t **v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::string *v69;
  std::runtime_error *exception;
  std::runtime_error *v71;
  std::__shared_weak_count *v72[2];
  __int128 __p;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::runtime_error v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v85 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v85 + 1) = 45;
    v67 = (_QWORD *)a1[6];
    v66 = a1 + 6;
    v65 = v67;
    v68 = (std::__shared_weak_count *)*((unsigned __int8 *)v66 + 23);
    if ((char)v68 < 0)
      v68 = (std::__shared_weak_count *)v66[1];
    else
      v65 = v66;
    v86 = v65;
    v87 = v68;
    sub_2231A9820((uint64_t)&v85, (uint64_t)&v88, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &v90;
    else
      v69 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v82, (const char *)v69);
    v82.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v71 = std::runtime_error::runtime_error(exception, &v82);
    v71->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v71, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v80 = v6 + 1;
    v81 = v6;
    v78 = v6 + 1;
    v79 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22366B560(&v83, a2);
    v10 = v83;
    v9 = v84;
    if (v84)
    {
      p_shared_weak_owners = (unint64_t *)&v84->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 56;
    std::mutex::lock((std::mutex *)(v13 + 56));
    *(_QWORD *)&v85 = v14;
    *((_QWORD *)&v85 + 1) = v13;
    if (!*(_BYTE *)(v13 + 48))
      sub_22324A974();
    v15 = (_QWORD *)(*(_QWORD *)v13 + 16 * *(_QWORD *)(v13 + 32));
    if (v9)
    {
      v16 = (unint64_t *)&v9->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)v15[1];
    *v15 = v10;
    v15[1] = v9;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    v22 = *(_QWORD *)(v13 + 40);
    v23 = *(_QWORD *)(v13 + 32) + 1;
    if (v23 >= v21)
      v24 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    else
      v24 = 0;
    *(_QWORD *)(v13 + 32) = v23 - v24;
    if (v22 == v21)
    {
      v25 = *(_QWORD *)(v13 + 24) + 1;
      if (v25 < v21)
        v21 = 0;
      *(_QWORD *)(v13 + 24) = v25 - v21;
      v26 = (std::mutex **)v85;
      if (!(_QWORD)v85)
      {
LABEL_41:
        v37 = (uint64_t **)a1[9];
        v85 = 0uLL;
        v38 = (std::__shared_weak_count *)a1[5];
        if (v38)
        {
          v39 = std::__shared_weak_count::lock(v38);
          if (v39)
          {
            v40 = v39;
            v41 = a1[4];
            v42 = (unint64_t *)&v39->__shared_weak_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
            *(_QWORD *)&v85 = v41;
            *((_QWORD *)&v85 + 1) = v39;
            v44 = (unint64_t *)&v39->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          else
          {
            v85 = 0uLL;
          }
        }
        v86 = v10;
        v87 = v9;
        v46 = v78;
        v47 = v79;
        v88 = v78;
        v89 = v79;
        v78 = 0;
        v79 = 0;
        v91 = 0;
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC56CB0;
        *(_OWORD *)(v48 + 8) = v85;
        v85 = 0uLL;
        *((_QWORD *)v48 + 3) = v10;
        *((_QWORD *)v48 + 4) = v9;
        v86 = 0;
        v87 = 0;
        *((_QWORD *)v48 + 5) = v46;
        *((_QWORD *)v48 + 6) = v47;
        v88 = 0;
        v89 = 0;
        v91 = (std::string *)v48;
        sub_2245022E4(*v37, (uint64_t)&v90);
        v49 = v91;
        if (v91 == &v90)
        {
          v50 = 4;
          v49 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_55;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_55:
        v51 = v84;
        if (v84)
        {
          v52 = (unint64_t *)&v84->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (v79)
        {
          v54 = &v79->__shared_owners_;
          do
            v55 = __ldaxr((unint64_t *)v54);
          while (__stlxr(v55 - 1, (unint64_t *)v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (v81)
        {
          v56 = &v81->__shared_owners_;
          do
            v57 = __ldaxr((unint64_t *)v56);
          while (__stlxr(v57 - 1, (unint64_t *)v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v13 + 40) = v22 + 1;
      v26 = (std::mutex **)v85;
      if (!(_QWORD)v85)
        goto LABEL_41;
    }
    std::mutex::unlock(*v26);
    MEMORY[0x227684CE8](v26, 0x20C4093837F09);
    goto LABEL_41;
  }
  v27 = (uint64_t **)a1[9];
  *(_OWORD *)v72 = 0uLL;
  v28 = (std::__shared_weak_count *)a1[5];
  if (v28)
  {
    v29 = std::__shared_weak_count::lock(v28);
    if (!v29)
    {
      *(_OWORD *)v72 = 0uLL;
      LOBYTE(__p) = 0;
      v75 = 0;
      v36 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
        goto LABEL_74;
      goto LABEL_37;
    }
    v30 = v29;
    v31 = (std::__shared_weak_count *)a1[4];
    v32 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v72[0] = v31;
    v72[1] = v29;
    v34 = (unint64_t *)&v29->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
      LOBYTE(__p) = 0;
      v75 = 0;
      v36 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
        goto LABEL_74;
      goto LABEL_37;
    }
  }
  LOBYTE(__p) = 0;
  v75 = 0;
  v36 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 24))
    goto LABEL_74;
LABEL_37:
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __p = *(_OWORD *)a2;
    v74 = *(_QWORD *)(a2 + 16);
  }
  v75 = 1;
LABEL_74:
  v58 = (std::__shared_weak_count *)operator new(0x20uLL);
  v58->__shared_owners_ = 0;
  v58->__shared_weak_owners_ = 0;
  v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
  v58[1].__vftable = *a3;
  *a3 = 0;
  v76 = &v58[1].__vftable;
  v77 = v58;
  v87 = 0;
  v59 = (char *)operator new(0x48uLL);
  *(_QWORD *)v59 = off_24EC56D30;
  *(_OWORD *)(v59 + 8) = *(_OWORD *)v72;
  v59[24] = 0;
  v59[48] = 0;
  if (v36)
  {
    *(_OWORD *)(v59 + 24) = __p;
    *((_QWORD *)v59 + 5) = v74;
    v74 = 0;
    __p = 0uLL;
    v59[48] = 1;
  }
  *((_QWORD *)v59 + 7) = v58 + 1;
  *((_QWORD *)v59 + 8) = v58;
  v76 = 0;
  v77 = 0;
  v87 = (std::__shared_weak_count *)v59;
  sub_2245022E4(*v27, (uint64_t)&v85);
  v60 = (__int128 *)v87;
  if (v87 == (std::__shared_weak_count *)&v85)
  {
    v61 = 4;
    v60 = &v85;
  }
  else
  {
    if (!v87)
      goto LABEL_81;
    v61 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v60 + 8 * v61))(v60);
LABEL_81:
  v62 = v77;
  if (v77)
  {
    v63 = (unint64_t *)&v77->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v75 && SHIBYTE(v74) < 0)
    operator delete((void *)__p);
}

void sub_22366A6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::runtime_error a25,std::exception_ptr a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a17 && a16 < 0)
    operator delete(__p);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22366A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_22332429C(&a27);
  sub_223167354((uint64_t)&a25);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_22366A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22366A898(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22366A90C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC56DB0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22366AA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22366AA80(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC56E30;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22366AB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22366ABF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC56EB0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22366AE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22366AED4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC56F30;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22366B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22366B1B4(uint64_t a1)
{
  return sub_22366B324(a1 - 16);
}

void sub_22366B1BC(uint64_t a1)
{
  sub_22366B324(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366B1E4(uint64_t a1)
{
  return sub_22366A90C((_QWORD *)(a1 - 16));
}

uint64_t *sub_22366B1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22366ABF4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22366B1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22366AED4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22366B1FC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22366B204(uint64_t a1)
{
  return sub_22366B324(a1 - 24);
}

void sub_22366B20C(uint64_t a1)
{
  sub_22366B324(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366B234(uint64_t a1)
{
  return sub_22366AA80((_QWORD *)(a1 - 24));
}

uint64_t sub_22366B23C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22366B244(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22366B2AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22366B314(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22366B324(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC56970;
  *(_QWORD *)(a1 + 16) = &unk_24EC569E8;
  *(_QWORD *)(a1 + 24) = &unk_24EC56A28;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_22366B510(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_4;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

char *sub_22366B560(_QWORD *a1, uint64_t a2)
{
  char *result;
  char *v5;
  _OWORD *v6;

  result = (char *)operator new(0x38uLL);
  v5 = result;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &off_24EC56B60;
  result[24] = 0;
  v6 = result + 24;
  result[48] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      result = (char *)sub_223197FA4(result + 24, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *v6 = *(_OWORD *)a2;
      *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 16);
    }
    v5[48] = 1;
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

void sub_22366B5EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_22366B61C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22366B62C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC56B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22366B65C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

_QWORD *sub_22366B67C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC56BB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22366B6C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC56BB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366B714(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56BB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22366B784(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56BB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22366B7D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22366B810(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22366B848(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_22366BB6C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22366BA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366BAF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25Enqu"
                     "eueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366BB60()
{
  return &unk_24EC56C10;
}

void sub_22366BB6C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_22366BC04()
{
  __break(1u);
}

void sub_22366BCB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22366BCD0);
}

uint64_t sub_22366BCDC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_24EC56C30;
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_4;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366BD38(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_24EC56C30;
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_7;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v2);
LABEL_7:
  JUMPOUT(0x227684CE8);
}

char *sub_22366BDA4(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_24EC56C30;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[24] = 0;
  v2[48] = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_223197FA4(v2 + 24, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
      *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
    }
    v3[48] = 1;
  }
  return v3;
}

void sub_22366BE4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

char *sub_22366BE84(char *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v4 = *((_QWORD *)result + 1);
  v3 = *((_QWORD *)result + 2);
  *(_QWORD *)a2 = off_24EC56C30;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (result[48])
  {
    if (result[47] < 0)
    {
      result = (char *)sub_223197FA4((_BYTE *)(a2 + 24), *((void **)result + 3), *((_QWORD *)result + 4));
    }
    else
    {
      v7 = *(_OWORD *)(result + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
      *(_OWORD *)(a2 + 24) = v7;
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void sub_22366BF1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void sub_22366BF4C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
}

void sub_22366BF9C(void **__p)
{
  std::__shared_weak_count *v2;

  if (*((_BYTE *)__p + 48) && *((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  operator delete(__p);
}

void sub_22366BFEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_22366BB6C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366C094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366C0E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366C14C()
{
  return &unk_24EC56C90;
}

uint64_t sub_22366C158(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_9;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_22366C1E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC56CB0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22366C268(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC56CB0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22366C300(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56CB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22366C390(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56CB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22366C400(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22366C480(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22366C4FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22366BB6C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22366C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22366C908(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25Enqu"
                     "eueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366C974()
{
  return &unk_24EC56D10;
}

uint64_t sub_22366C980(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24EC56D30;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22366CA14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24EC56D30;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366CAB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = off_24EC56D30;
  sub_22366CE70((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22366CAF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22366CB0C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24EC56D30;
  return sub_22366CE70((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22366CB28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_9;
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22366CBB4(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!__p[48])
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!__p[48])
      goto LABEL_9;
  }
  if (__p[47] < 0)
    operator delete(*((void **)__p + 3));
LABEL_9:
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_22366CC3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[7];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22366BB6C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22366CD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366CDF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE7Proce"
                     "ssERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366CE64()
{
  return &unk_24EC56D90;
}

uint64_t sub_22366CE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v7;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

void sub_22366CF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 40) && *(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22366CF54(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56DB0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366CF8C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56DB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366CFD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC56DB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22366D024(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC56DB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22366D054(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22366D064(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22366D090(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366D124(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366D160(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE9Subscr"
                     "ibeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvL"
                                "b0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366D1CC()
{
  return &unk_24EC56E10;
}

_QWORD *sub_22366D1D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56E30;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366D210(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56E30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366D258(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC56E30;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22366D2A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC56E30;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22366D2D8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22366D2E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22366D314(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366D3A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366D3E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15AddEr"
                     "rorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvL"
                                "b0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366D450()
{
  return &unk_24EC56E90;
}

_QWORD *sub_22366D45C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56EB0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366D494(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56EB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366D4DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56EB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22366D534(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56EB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22366D56C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22366D57C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22366D5A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366D660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366D6AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE16Outp"
                     "utHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366D718()
{
  return &unk_24EC56F10;
}

_QWORD *sub_22366D724(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC56F30;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366D75C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC56F30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366D7A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC56F30;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22366D7FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC56F30;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22366D834(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22366D844(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22366D870(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22366D974(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15Erro"
                     "rHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvv"
                                "Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22366D9E0()
{
  return &unk_24EC56F90;
}

void sub_22366D9F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22366DA14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22366DA2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng26FailureSnapshotDoneReq"
                     "uestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng26FailureSnap"
                                "shotDoneRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng26FailureSnapshotDoneRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22366DA9C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22366DAC8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22366DB04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC57000;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22366DB6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366DBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22366DC10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22366DCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22366DCB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22366DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22366DD8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22366DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22366DE64(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22366DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22366DF1C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC561A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC561D0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22366E100(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC560C8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC56130;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC560F8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22366E2E4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *p_size;
  unint64_t v20;
  _QWORD *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  const __CFString *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::string v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  std::string v63;
  void *v64[4];
  void *__p;
  std::string::size_type v66;
  unsigned __int8 v67;
  char v68;
  __int128 v69;
  char v70;
  int v71;
  std::string v72;
  CFStringRef *v73;
  __int128 v74;
  int v75;
  std::string *v76;
  std::string *v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v57 = operator new(0x20uLL);
  v58 = xmmword_2245B8E30;
  strcpy((char *)v57, "Stats.KFCluster.IntegratorMap");
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_126;
  v2 = sub_2241471F8();
  v3 = v2[2];
  if (!v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = v2[2];
  }
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  std::mutex::unlock(v5);
  if (v7 == v6)
    goto LABEL_126;
  v76 = (std::string *)"cv3d.recon.";
  v77 = (std::string *)11;
  v8 = HIBYTE(v58);
  v9 = (__int128 *)&v57;
  if (v58 < 0)
  {
    v9 = (__int128 *)v57;
    v8 = v58;
  }
  v78 = v9;
  *(_QWORD *)&v79 = v8;
  sub_2231A9820((uint64_t)&v76, (uint64_t)&v79 + 8, 0, 0, &v56);
  sub_2241471F8();
  v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
  {
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      *(_QWORD *)&v59 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v59 + 1) = 2;
      v11 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        v77 = 0;
        v78 = 0;
        v76 = (std::string *)&v77;
        sub_2245314F4(&v76, &v69);
        v60 = v69;
        sub_22323DF84((uint64_t)&v76, (char *)v77);
        HIBYTE(v64[2]) = 21;
        strcpy((char *)v64, "map_bundle_to_cluster");
        v12 = (_QWORD *)*a1;
        *((_BYTE *)&v63.__r_.__value_.__s + 23) = 0;
        v63.__r_.__value_.__s.__data_[0] = 0;
        if (v12 != a1 + 1)
        {
          do
          {
            v74 = *(_OWORD *)((char *)v12 + 28);
            v75 = *((_DWORD *)v12 + 11);
            v71 = 0;
            sub_2231ABA1C(&v69, "<");
            std::to_string(&v72, v74);
            v76 = (std::string *)&v69;
            v77 = &v72;
            v78 = &v69;
            *(_QWORD *)&v79 = &v72;
            *((_QWORD *)&v79 + 1) = &v72;
            if (v71 == -1)
              sub_22316DD70();
            v73 = (CFStringRef *)&v76;
            ((void (*)(CFStringRef **, __int128 *))off_24EC57088[v71])(&v73, &v69);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72.__r_.__value_.__l.__data_);
            v76 = (std::string *)&v69;
            v77 = (std::string *)"> ";
            v78 = &v69;
            *(_QWORD *)&v79 = "> ";
            *((_QWORD *)&v79 + 1) = "> ";
            if (v71 == -1)
              sub_22316DD70();
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
            ((void (*)(std::string *, __int128 *))off_24EC57100[v71])(&v72, &v69);
            sub_22319B83C((uint64_t)&v73, (uint64_t)&v69, (unsigned __int8 *)&v74 + 4);
            v76 = (std::string *)&v69;
            v77 = (std::string *)"\n";
            v78 = &v69;
            *(_QWORD *)&v79 = "\n";
            *((_QWORD *)&v79 + 1) = "\n";
            if (v71 == -1)
              sub_22316DD70();
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
            ((void (*)(std::string *, __int128 *))off_24EC570E8[v71])(&v72, &v69);
            if (v71 == -1)
              sub_22316DD70();
            v76 = &v72;
            ((void (*)(void **__return_ptr, std::string **, __int128 *))off_24EC570B8[v71])(&__p, &v76, &v69);
            if (v71 != -1)
              ((void (*)(std::string **, __int128 *))off_24EC570A0[v71])(&v76, &v69);
            if ((v67 & 0x80u) == 0)
              p_p = (const std::string::value_type *)&__p;
            else
              p_p = (const std::string::value_type *)__p;
            if ((v67 & 0x80u) == 0)
              v14 = v67;
            else
              v14 = v66;
            std::string::append(&v63, p_p, v14);
            if ((char)v67 < 0)
            {
              operator delete(__p);
              v15 = (_QWORD *)v12[1];
              if (v15)
              {
                do
                {
LABEL_32:
                  v16 = v15;
                  v15 = (_QWORD *)*v15;
                }
                while (v15);
                goto LABEL_13;
              }
            }
            else
            {
              v15 = (_QWORD *)v12[1];
              if (v15)
                goto LABEL_32;
            }
            do
            {
              v16 = (_QWORD *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
LABEL_13:
            v12 = v16;
          }
          while (v16 != a1 + 1);
        }
        sub_224527BAC((uint64_t)v64, (CFStringRef *)&v76);
        sub_2231AEDB8((uint64_t)&v60, v76, (uint64_t)&v63);
        v18 = (std::__shared_weak_count *)v77;
        if (v77)
        {
          p_size = &v77->__r_.__value_.__l.__size_;
          do
            v20 = __ldaxr(p_size);
          while (__stlxr(v20 - 1, p_size));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64[2]) < 0)
          operator delete(v64[0]);
        HIBYTE(v64[2]) = 21;
        strcpy((char *)v64, "map_cluster_to_bundle");
        *((_BYTE *)&v63.__r_.__value_.__s + 23) = 0;
        v63.__r_.__value_.__s.__data_[0] = 0;
        v21 = (_QWORD *)a1[3];
        if (v21 != a1 + 4)
        {
          do
          {
            v74 = *(_OWORD *)((char *)v21 + 28);
            v75 = *((_DWORD *)v21 + 11);
            v71 = 0;
            sub_2231ABA1C(&v69, "<");
            sub_22319B83C((uint64_t)&v68, (uint64_t)&v69, (unsigned __int8 *)&v74);
            v76 = (std::string *)&v69;
            v77 = (std::string *)"> ";
            v78 = &v69;
            *(_QWORD *)&v79 = "> ";
            *((_QWORD *)&v79 + 1) = "> ";
            if (v71 == -1)
              sub_22316DD70();
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
            ((void (*)(std::string *, __int128 *))off_24EC57100[v71])(&v72, &v69);
            std::to_string(&v72, v75);
            v76 = (std::string *)&v69;
            v77 = &v72;
            v78 = &v69;
            *(_QWORD *)&v79 = &v72;
            *((_QWORD *)&v79 + 1) = &v72;
            if (v71 == -1)
              sub_22316DD70();
            v73 = (CFStringRef *)&v76;
            ((void (*)(CFStringRef **, __int128 *))off_24EC57088[v71])(&v73, &v69);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72.__r_.__value_.__l.__data_);
            v76 = (std::string *)&v69;
            v77 = (std::string *)"\n";
            v78 = &v69;
            *(_QWORD *)&v79 = "\n";
            *((_QWORD *)&v79 + 1) = "\n";
            if (v71 == -1)
              sub_22316DD70();
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
            ((void (*)(std::string *, __int128 *))off_24EC570E8[v71])(&v72, &v69);
            if (v71 == -1)
              sub_22316DD70();
            v76 = &v72;
            ((void (*)(void **__return_ptr, std::string **, __int128 *))off_24EC570B8[v71])(&__p, &v76, &v69);
            if (v71 != -1)
              ((void (*)(std::string **, __int128 *))off_24EC570A0[v71])(&v76, &v69);
            if ((v67 & 0x80u) == 0)
              v22 = (const std::string::value_type *)&__p;
            else
              v22 = (const std::string::value_type *)__p;
            if ((v67 & 0x80u) == 0)
              v23 = v67;
            else
              v23 = v66;
            std::string::append(&v63, v22, v23);
            if ((char)v67 < 0)
            {
              operator delete(__p);
              v24 = (_QWORD *)v21[1];
              if (v24)
              {
                do
                {
LABEL_68:
                  v25 = v24;
                  v24 = (_QWORD *)*v24;
                }
                while (v24);
                goto LABEL_49;
              }
            }
            else
            {
              v24 = (_QWORD *)v21[1];
              if (v24)
                goto LABEL_68;
            }
            do
            {
              v25 = (_QWORD *)v21[2];
              v17 = *v25 == (_QWORD)v21;
              v21 = v25;
            }
            while (!v17);
LABEL_49:
            v21 = v25;
          }
          while (v25 != a1 + 4);
        }
        sub_224527BAC((uint64_t)v64, (CFStringRef *)&v76);
        sub_2231AEDB8((uint64_t)&v60, v76, (uint64_t)&v63);
        v26 = (std::__shared_weak_count *)v77;
        if (v77)
        {
          v27 = &v77->__r_.__value_.__l.__size_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64[2]) < 0)
          operator delete(v64[0]);
        LOBYTE(v69) = 0;
        LOBYTE(v71) = 0;
        sub_2231AD9F0((uint64_t)&v60, &v69, &v59, &v61);
        if ((_BYTE)v71 && v70 < 0)
          operator delete((void *)v69);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
        v33 = *(const __CFString **)v32;
        v34 = *(char **)(v32 + 8);
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = v62;
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v72.__r_.__value_.__r.__words[1] = v62;
        v62 = 0uLL;
        v76 = (std::string *)v33;
        v77 = (std::string *)v34;
        if (v34)
        {
          v38 = (unint64_t *)(v34 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v78 = (__int128 *)&off_24EC6A3B8;
        v79 = v37;
        if (*((_QWORD *)&v37 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        (*(void (**)(uint64_t *, std::string **))(*v11 + 16))(v11, &v76);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = (std::__shared_weak_count *)v77;
        if (v77)
        {
          v46 = &v77->__r_.__value_.__l.__size_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)v72.__r_.__value_.__r.__words[2];
        if (v72.__r_.__value_.__r.__words[2])
        {
          v49 = (unint64_t *)(v72.__r_.__value_.__r.__words[2] + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v34)
        {
          v51 = (unint64_t *)(v34 + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
          }
        }
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
    }
    kdebug_trace();
  }
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_126:
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      return;
    goto LABEL_127;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
LABEL_127:
    operator delete(v57);
}

void sub_22366ED34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;

  sub_2241231D8(v55);
  v58 = *(std::__shared_weak_count **)(v56 - 136);
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_2241231D8(v56 - 208);
  if (v54)
  {
    v61 = (unint64_t *)&v54->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_2241231D8((uint64_t)&a33);
  sub_2231874DC((uint64_t)&a11);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

unint64_t sub_22366F024(uint64_t *a1)
{
  unsigned __int8 v2;
  unint64_t result;
  int v4;
  unint64_t v5;
  BOOL v6;
  void **v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _OWORD *v21;
  void **v22;
  void **v23;
  unint64_t v24;
  char v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  __int128 *v29;
  __int128 *v30;
  std::string *v31;
  std::string::size_type size;
  char v33;
  size_t v34;
  void **p_dst;
  unint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  const char *v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  std::string::size_type *p_size;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  _QWORD *v59;
  size_t v60;
  size_t v61;
  __int128 *v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::string::size_type v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  std::string::size_type v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  __int128 v119;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v121;
  const char *v122;
  int v123;
  const char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::string v127;
  void *v128[2];
  _QWORD v129[3];
  const void *v130;
  uint64_t v131;
  const void *v132;
  unint64_t v133;
  void *v134;
  char v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  std::string v140;
  char *v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v144;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v146;
  void **__dst;
  _QWORD *v148;
  int64_t v149;
  __int128 *v150;
  __int128 v151;
  std::string *v152;
  std::string v153;
  __int128 v154;
  void *v155[2];
  unint64_t v156;
  char v157;
  __int128 v158;
  unsigned __int8 v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CBF88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBF88))
  {
    sub_22455F53C(&v153);
    sub_223174DE4(v128, "cv3dapi.recon3d");
    sub_2232300E0((uint64_t **)&v153, (uint64_t)v128, &qword_2540CBF80);
    if (SHIBYTE(v129[0]) < 0)
      operator delete(v128[0]);
    __cxa_guard_release(&qword_2540CBF88);
  }
  result = qword_2540CBF80;
  v139 = qword_2540CBF80;
  if (**(int **)(qword_2540CBF80 + 56) <= 3)
  {
    v4 = *(unsigned __int8 *)(qword_2540CBF80 + 72);
    result = sub_22322F254(qword_2540CBF80, "OSLogSurrogateAppender", 1, 0);
    v5 = result;
    v6 = !v4 && result == 0;
    if (!v6)
    {
      sub_223195210((uint64_t)v128);
      v151 = 0uLL;
      v150 = &v151;
      sub_22347F028(a1, (uint64_t)&__dst);
      v7 = __dst;
      if (__dst == (void **)&v148)
      {
LABEL_8:
        v117 = v4;
        *((_BYTE *)&v127.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&v127, "VLM:GRS:C ");
        if (v149)
        {
          v8 = v150;
          if (v150 != &v151)
          {
            do
            {
              LODWORD(v154) = 0;
              sub_22319B83C((uint64_t)&v119, (uint64_t)&v153, (unsigned __int8 *)v8 + 32);
              if ((_DWORD)v154 == -1)
                sub_22316DD70();
              *(_QWORD *)&v119 = &v140;
              ((void (*)(__int128 *__return_ptr, __int128 *, std::string *))off_24EC570B8[v154])(&v143, &v119, &v153);
              if ((_DWORD)v154 != -1)
                ((void (*)(__int128 *, std::string *))off_24EC570A0[v154])(&v119, &v153);
              v24 = HIBYTE(v144);
              v25 = HIBYTE(v144);
              if (v144 < 0)
                v24 = *((_QWORD *)&v143 + 1);
              if (v24 >= 4)
                v24 = 4;
              v146 = v144;
              *(_OWORD *)__p = v143;
              v143 = 0uLL;
              v144 = 0;
              if (v25 < 0)
              {
                __p[1] = (void *)v24;
                *((_BYTE *)__p[0] + v24) = 0;
                v121 = -1;
                v26 = SHIBYTE(v146);
                if ((SHIBYTE(v146) & 0x80000000) == 0)
                {
LABEL_68:
                  v119 = *(_OWORD *)__p;
                  rep = v146;
                  goto LABEL_71;
                }
              }
              else
              {
                HIBYTE(v146) = v24;
                *((_BYTE *)__p + v24) = 0;
                v121 = -1;
                v26 = SHIBYTE(v146);
                if ((SHIBYTE(v146) & 0x80000000) == 0)
                  goto LABEL_68;
              }
              sub_223197FA4(&v119, __p[0], (unint64_t)__p[1]);
LABEL_71:
              v121 = 1;
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)" T:";
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = " T:";
              *((_QWORD *)&v154 + 1) = " T:";
              sub_223674360((uint64_t *)&v153.__r_.__value_.__r.__words[2], (uint64_t)&v119);
              std::to_string(&v140, *((_QWORD *)v8 + 6));
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)&v140;
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = &v140;
              *((_QWORD *)&v154 + 1) = &v140;
              if (v121 == -1)
                sub_22316DD70();
              v152 = &v153;
              ((void (*)(std::string **, __int128 *))off_24EC57088[v121])(&v152, &v119);
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__r_.__value_.__l.__data_);
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)" O:";
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = " O:";
              *((_QWORD *)&v154 + 1) = " O:";
              if (v121 == -1)
                sub_22316DD70();
              v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
              ((void (*)(std::string *, __int128 *))off_24EC570D0[v121])(&v140, &v119);
              std::to_string(&v140, *((_QWORD *)v8 + 7));
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)&v140;
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = &v140;
              *((_QWORD *)&v154 + 1) = &v140;
              if (v121 == -1)
                sub_22316DD70();
              v152 = &v153;
              ((void (*)(std::string **, __int128 *))off_24EC57088[v121])(&v152, &v119);
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__r_.__value_.__l.__data_);
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)" K:";
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = " K:";
              *((_QWORD *)&v154 + 1) = " K:";
              if (v121 == -1)
                sub_22316DD70();
              v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
              ((void (*)(std::string *, __int128 *))off_24EC570D0[v121])(&v140, &v119);
              std::to_string(&v140, *((_QWORD *)v8 + 8));
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)&v140;
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = &v140;
              *((_QWORD *)&v154 + 1) = &v140;
              if (v121 == -1)
                sub_22316DD70();
              v152 = &v153;
              ((void (*)(std::string **, __int128 *))off_24EC57088[v121])(&v152, &v119);
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__r_.__value_.__l.__data_);
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              v153.__r_.__value_.__l.__size_ = (std::string::size_type)" ";
              v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119;
              *(_QWORD *)&v154 = " ";
              *((_QWORD *)&v154 + 1) = " ";
              if (v121 == -1)
                sub_22316DD70();
              v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
              ((void (*)(std::string *, __int128 *))off_24EC570E8[v121])(&v140, &v119);
              if (v121 == -1)
                sub_22316DD70();
              v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
              ((void (*)(__int128 *__return_ptr, std::string *, __int128 *))off_24EC570B8[v121])(&v158, &v153, &v119);
              if (v121 != -1)
                ((void (*)(std::string *, __int128 *))off_24EC570A0[v121])(&v153, &v119);
              if ((v159 & 0x80u) == 0)
                v27 = (const std::string::value_type *)&v158;
              else
                v27 = (const std::string::value_type *)v158;
              if ((v159 & 0x80u) == 0)
                v28 = v159;
              else
                v28 = *((_QWORD *)&v158 + 1);
              std::string::append(&v127, v27, v28);
              if ((char)v159 < 0)
              {
                operator delete((void *)v158);
                if ((v26 & 0x80000000) == 0)
                {
LABEL_94:
                  if ((SHIBYTE(v144) & 0x80000000) == 0)
                    goto LABEL_95;
                  goto LABEL_99;
                }
              }
              else if ((v26 & 0x80000000) == 0)
              {
                goto LABEL_94;
              }
              operator delete(__p[0]);
              if ((SHIBYTE(v144) & 0x80000000) == 0)
              {
LABEL_95:
                v29 = (__int128 *)*((_QWORD *)v8 + 1);
                if (v29)
                  goto LABEL_100;
                goto LABEL_102;
              }
LABEL_99:
              operator delete((void *)v143);
              v29 = (__int128 *)*((_QWORD *)v8 + 1);
              if (v29)
              {
                do
                {
LABEL_100:
                  v30 = v29;
                  v29 = *(__int128 **)v29;
                }
                while (v29);
                goto LABEL_58;
              }
              do
              {
LABEL_102:
                v30 = (__int128 *)*((_QWORD *)v8 + 2);
                v6 = *(_QWORD *)v30 == (_QWORD)v8;
                v8 = v30;
              }
              while (!v6);
LABEL_58:
              v8 = v30;
            }
            while (v30 != &v151);
          }
        }
        else
        {
          std::string::append(&v127, "no active cluster to process", 0x1CuLL);
        }
        sub_223198030((uint64_t)&__dst, v148);
        sub_2233FADDC((_QWORD *)v151);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v127;
        else
          v31 = (std::string *)v127.__r_.__value_.__r.__words[0];
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
        else
          size = v127.__r_.__value_.__l.__size_;
        sub_2231813E8(v129, (uint64_t)v31, size);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v127.__r_.__value_.__l.__data_);
          v33 = v137;
          if ((v137 & 0x10) == 0)
          {
LABEL_114:
            if ((v33 & 8) == 0)
            {
              v34 = 0;
              HIBYTE(v149) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_127;
            }
            v37 = v130;
            v34 = v131 - (_QWORD)v130;
            if ((unint64_t)(v131 - (_QWORD)v130) > 0x7FFFFFFFFFFFFFF7)
LABEL_172:
              sub_22316DBC0();
LABEL_120:
            if (v34 >= 0x17)
            {
              v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v38 = v34 | 7;
              v39 = v38 + 1;
              p_dst = (void **)operator new(v38 + 1);
              v149 = v39 | 0x8000000000000000;
              __dst = p_dst;
              v148 = (_QWORD *)v34;
            }
            else
            {
              HIBYTE(v149) = v34;
              p_dst = (void **)&__dst;
              if (!v34)
              {
LABEL_127:
                *((_BYTE *)p_dst + v34) = 0;
                *(_QWORD *)&v119 = &v139;
                *((std::chrono::steady_clock::time_point *)&v119 + 1) = std::chrono::steady_clock::now();
                rep = std::chrono::system_clock::now().__d_.__rep_;
                v121 = 3;
                v122 = "unknown file";
                v123 = 104;
                v125 = 0;
                v126 = 0;
                v124 = "unknown function";
                if (v149 >= 0)
                  v40 = (const char *)&__dst;
                else
                  v40 = (const char *)__dst;
                v41 = *(_QWORD *)v119;
                v42 = *(_QWORD *)v119 + 16;
                if (*(char *)(*(_QWORD *)v119 + 39) < 0)
                {
                  v44 = *(const char **)(v41 + 16);
                  v43 = *(_QWORD *)(v41 + 24);
                  v46 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v46 & 1) != 0)
                    goto LABEL_134;
                }
                else
                {
                  v43 = *(unsigned __int8 *)(*(_QWORD *)v119 + 39);
                  v44 = (const char *)(*(_QWORD *)v119 + 16);
                  v45 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v45 & 1) != 0)
                    goto LABEL_134;
                }
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&v153);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&v153, &xmmword_255788F40);
                  if ((_BYTE)v154 && SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v153.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
LABEL_134:
                if (byte_255788F57 >= 0)
                  v47 = (const char *)&xmmword_255788F40;
                else
                  v47 = (const char *)xmmword_255788F40;
                if (byte_255788F57 >= 0)
                  v48 = byte_255788F57;
                else
                  v48 = *((_QWORD *)&xmmword_255788F40 + 1);
                v153.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v47, v44);
                p_size = &v153.__r_.__value_.__l.__size_;
                if (v48 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v48 >= 0x17)
                {
                  v50 = v42;
                  v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v48 | 7) != 0x17)
                    v51 = v48 | 7;
                  v52 = v51 + 1;
                  p_size = (std::string::size_type *)operator new(v51 + 1);
                  v153.__r_.__value_.__r.__words[2] = v48;
                  *(_QWORD *)&v154 = v52 | 0x8000000000000000;
                  v153.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                  v42 = v50;
                }
                else
                {
                  BYTE7(v154) = v48;
                  if (!v48)
                  {
LABEL_148:
                    *((_BYTE *)p_size + v48) = 0;
                    BYTE8(v154) = 1;
                    v53 = v155;
                    if (v43 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    if (v43 >= 0x17)
                    {
                      v55 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v43 | 7) != 0x17)
                        v55 = v43 | 7;
                      v56 = v55 + 1;
                      v53 = (void **)operator new(v55 + 1);
                      v155[1] = (void *)v43;
                      v156 = v56 | 0x8000000000000000;
                      v155[0] = v53;
                    }
                    else
                    {
                      HIBYTE(v156) = v43;
                      if (!v43)
                      {
                        LOBYTE(v155[0]) = 0;
                        v157 = 1;
                        v54 = v153.__r_.__value_.__r.__words[0];
                        if ((SHIBYTE(v156) & 0x80000000) == 0)
                          goto LABEL_152;
                        goto LABEL_158;
                      }
                    }
                    memmove(v53, v44, v43);
                    *((_BYTE *)v53 + v43) = 0;
                    v157 = 1;
                    v54 = v153.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v156) & 0x80000000) == 0)
                    {
LABEL_152:
                      if (!BYTE8(v154))
                        goto LABEL_161;
                      goto LABEL_159;
                    }
LABEL_158:
                    operator delete(v155[0]);
                    if (!BYTE8(v154))
                      goto LABEL_161;
LABEL_159:
                    if (SBYTE7(v154) < 0)
                      operator delete((void *)v153.__r_.__value_.__l.__size_);
LABEL_161:
                    if (v153.__r_.__value_.__r.__words[0])
                      os_release(v153.__r_.__value_.__l.__data_);
                    if (!v5 || !*(_QWORD *)(v5 + 24))
                    {
                      os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
                      LODWORD(v153.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
                      v63 = (void *)_os_log_send_and_compose_impl();
                      v64 = v117;
                      if (v63)
                        free(v63);
                      goto LABEL_237;
                    }
                    v57 = _os_log_pack_size();
                    v58 = operator new(v57, (std::align_val_t)8uLL);
                    v59 = (_QWORD *)operator new();
                    *v59 = &off_24EC1F7F0;
                    v59[1] = 0;
                    v59[2] = 0;
                    v59[3] = v58;
                    v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
                    v140.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
                    v141 = 0;
                    v142 = 0;
                    v140.__r_.__value_.__r.__words[2] = (std::string::size_type)v59;
                    v60 = strlen(v40);
                    if (v60 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v61 = v60;
                    if (v60 >= 0x17)
                    {
                      v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v60 | 7) != 0x17)
                        v65 = v60 | 7;
                      v66 = v65 + 1;
                      v62 = (__int128 *)operator new(v65 + 1);
                      *(_QWORD *)&v151 = v61;
                      *((_QWORD *)&v151 + 1) = v66 | 0x8000000000000000;
                      v150 = v62;
                    }
                    else
                    {
                      HIBYTE(v151) = v60;
                      v62 = (__int128 *)&v150;
                      if (!v60)
                      {
LABEL_177:
                        *((_BYTE *)v62 + v61) = 0;
                        v67 = v150;
                        *(_QWORD *)&v158 = v151;
                        *(_QWORD *)((char *)&v158 + 7) = *(_QWORD *)((char *)&v151 + 7);
                        v68 = HIBYTE(v151);
                        v69 = operator new(0x38uLL);
                        v69[1] = 0;
                        v69[2] = 0;
                        v69[3] = off_24EC1FA48;
                        *v69 = &off_24EC1F9F8;
                        v70 = v158;
                        v69[4] = v67;
                        v69[5] = v70;
                        *(_QWORD *)((char *)v69 + 47) = *(_QWORD *)((char *)&v158 + 7);
                        *((_BYTE *)v69 + 55) = v68;
                        *(_QWORD *)&v158 = 0;
                        *(_QWORD *)((char *)&v158 + 7) = 0;
                        v71 = v142;
                        v141 = (char *)(v69 + 3);
                        v142 = (std::__shared_weak_count *)v69;
                        if (v71)
                        {
                          p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                          do
                            v73 = __ldaxr(p_shared_owners);
                          while (__stlxr(v73 - 1, p_shared_owners));
                          if (!v73)
                          {
                            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                            std::__shared_weak_count::__release_weak(v71);
                          }
                        }
                        v153 = v140;
                        v74 = v141;
                        if (v140.__r_.__value_.__r.__words[2])
                        {
                          v75 = (unint64_t *)(v140.__r_.__value_.__r.__words[2] + 8);
                          do
                            v76 = __ldxr(v75);
                          while (__stxr(v76 + 1, v75));
                        }
                        v77 = v142;
                        *(_QWORD *)&v154 = v74;
                        *((_QWORD *)&v154 + 1) = v142;
                        if (v142)
                        {
                          v78 = (unint64_t *)&v142->__shared_owners_;
                          do
                            v79 = __ldxr(v78);
                          while (__stxr(v79 + 1, v78));
                          v155[0] = v74;
                          do
                            v80 = __ldaxr(v78);
                          while (__stlxr(v80 - 1, v78));
                          if (!v80)
                          {
                            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                            std::__shared_weak_count::__release_weak(v77);
                          }
                        }
                        else
                        {
                          v155[0] = v74;
                        }
                        v81 = (std::__shared_weak_count *)v140.__r_.__value_.__r.__words[2];
                        if (v140.__r_.__value_.__r.__words[2])
                        {
                          v82 = (unint64_t *)(v140.__r_.__value_.__r.__words[2] + 8);
                          do
                            v83 = __ldaxr(v82);
                          while (__stlxr(v83 - 1, v82));
                          if (!v83)
                          {
                            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                            std::__shared_weak_count::__release_weak(v81);
                          }
                        }
                        v84 = v153.__r_.__value_.__r.__words[0];
                        if (*((char *)v155[0] + 31) >= 0)
                          v85 = (char *)v155[0] + 8;
                        else
                          v85 = (char *)*((_QWORD *)v155[0] + 1);
                        v86 = _os_log_pack_fill();
                        *(_DWORD *)v86 = 136315138;
                        *(_QWORD *)(v86 + 4) = v85;
                        v87 = operator new();
                        v88 = *(unsigned __int8 *)(v41 + 39);
                        v89 = *(_QWORD *)(v41 + 16);
                        v90 = *(_QWORD *)(v41 + 24);
                        v91 = v154;
                        *(_OWORD *)(v87 + 8) = *(_OWORD *)&v153.__r_.__value_.__r.__words[1];
                        if ((v88 & 0x80u) != 0)
                          v88 = v90;
                        else
                          v89 = v42;
                        *(_QWORD *)v87 = v84;
                        *(_OWORD *)&v153.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v87 + 24) = v91;
                        v154 = 0uLL;
                        *(_QWORD *)(v87 + 40) = v89;
                        *(_QWORD *)(v87 + 48) = v88;
                        *(_BYTE *)(v87 + 56) = 1;
                        v150 = 0;
                        v140.__r_.__value_.__r.__words[0] = v87;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v140);
                        v92 = v140.__r_.__value_.__r.__words[0];
                        v140.__r_.__value_.__r.__words[0] = 0;
                        v64 = v117;
                        if (v92)
                        {
                          v93 = *(std::__shared_weak_count **)(v92 + 32);
                          if (v93)
                          {
                            v94 = (unint64_t *)&v93->__shared_owners_;
                            do
                              v95 = __ldaxr(v94);
                            while (__stlxr(v95 - 1, v94));
                            if (!v95)
                            {
                              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                              std::__shared_weak_count::__release_weak(v93);
                            }
                          }
                          v96 = *(std::__shared_weak_count **)(v92 + 16);
                          if (v96)
                          {
                            v97 = (unint64_t *)&v96->__shared_owners_;
                            do
                              v98 = __ldaxr(v97);
                            while (__stlxr(v98 - 1, v97));
                            if (!v98)
                            {
                              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                              std::__shared_weak_count::__release_weak(v96);
                            }
                          }
                          MEMORY[0x227684CE8](v92, 0x10F0C40B62ED6C6);
                          v99 = v150;
                          v150 = 0;
                          if (v99)
                          {
                            v100 = (std::__shared_weak_count *)*((_QWORD *)v99 + 4);
                            if (v100)
                            {
                              v101 = (unint64_t *)&v100->__shared_owners_;
                              do
                                v102 = __ldaxr(v101);
                              while (__stlxr(v102 - 1, v101));
                              if (!v102)
                              {
                                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                                std::__shared_weak_count::__release_weak(v100);
                              }
                            }
                            v103 = (std::__shared_weak_count *)*((_QWORD *)v99 + 2);
                            if (v103)
                            {
                              v104 = (unint64_t *)&v103->__shared_owners_;
                              do
                                v105 = __ldaxr(v104);
                              while (__stlxr(v105 - 1, v104));
                              if (!v105)
                              {
                                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                                std::__shared_weak_count::__release_weak(v103);
                              }
                            }
                            MEMORY[0x227684CE8](v99, 0x10F0C40B62ED6C6);
                          }
                        }
                        v106 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
                        if (*((_QWORD *)&v154 + 1))
                        {
                          v107 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
                          do
                            v108 = __ldaxr(v107);
                          while (__stlxr(v108 - 1, v107));
                          if (!v108)
                          {
                            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                            std::__shared_weak_count::__release_weak(v106);
                          }
                        }
                        v109 = (std::__shared_weak_count *)v153.__r_.__value_.__r.__words[2];
                        if (v153.__r_.__value_.__r.__words[2])
                        {
                          v110 = (unint64_t *)(v153.__r_.__value_.__r.__words[2] + 8);
                          do
                            v111 = __ldaxr(v110);
                          while (__stlxr(v111 - 1, v110));
                          if (!v111)
                          {
                            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                            std::__shared_weak_count::__release_weak(v109);
                          }
                        }
LABEL_237:
                        if (v64)
                        {
                          v112 = (const char *)&__dst;
                          if (v149 < 0)
                            v112 = (const char *)__dst;
                          sub_22322C138((uint64_t)&v119, "%s", v112);
                          sub_223182C08((uint64_t)&v119);
                        }
                        sub_223182C08((uint64_t)&v119);
                        v113 = v126;
                        if (v126)
                        {
                          v114 = (unint64_t *)&v126->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        if (SHIBYTE(v149) < 0)
                          operator delete(__dst);
                        v128[0] = *(void **)MEMORY[0x24BEDB7F0];
                        v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(void **)((char *)v128 + *((_QWORD *)v128[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                        v129[0] = v116;
                        v129[1] = MEMORY[0x24BEDB848] + 16;
                        if (v135 < 0)
                          operator delete(v134);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        return MEMORY[0x227684BE0](&v138);
                      }
                    }
                    memcpy(v62, v40, v61);
                    goto LABEL_177;
                  }
                }
                memmove(p_size, v47, v48);
                goto LABEL_148;
              }
            }
            memmove(p_dst, v37, v34);
            goto LABEL_127;
          }
        }
        else
        {
          v33 = v137;
          if ((v137 & 0x10) == 0)
            goto LABEL_114;
        }
        v36 = v136;
        if (v136 < v133)
        {
          v136 = v133;
          v36 = v133;
        }
        v37 = v132;
        v34 = v36 - (_QWORD)v132;
        if (v36 - (unint64_t)v132 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_172;
        goto LABEL_120;
      }
      while (1)
      {
        v9 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 32))(a1, (char *)v7 + 25);
        v10 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 24))(a1, (char *)v7 + 25);
        v11 = *(_QWORD *)(v9 + 136);
        v118 = *(_OWORD *)(v10 + 16);
        v12 = &v151;
        v13 = &v151;
        v14 = v151;
        if ((_QWORD)v151)
          break;
LABEL_49:
        v21 = operator new(0x48uLL);
        v21[2] = *(_OWORD *)((char *)v7 + 25);
        *((_QWORD *)v21 + 6) = v11;
        *(_OWORD *)((char *)v21 + 56) = v118;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = v13;
        *(_QWORD *)v12 = v21;
        if (*(_QWORD *)v150)
        {
          v150 = *(__int128 **)v150;
          v21 = *(_OWORD **)v12;
        }
        sub_2231A9A8C((uint64_t *)v151, (uint64_t *)v21);
        ++*((_QWORD *)&v151 + 1);
LABEL_52:
        v22 = (void **)v7[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (void **)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (void **)v7[2];
            v6 = *v23 == v7;
            v7 = v23;
          }
          while (!v6);
        }
        v7 = v23;
        if (v23 == (void **)&v148)
          goto LABEL_8;
      }
      v15 = *((unsigned __int8 *)v7 + 25);
      while (1)
      {
        v13 = (__int128 *)v14;
        v16 = *(unsigned __int8 *)(v14 + 32);
        v17 = v15 >= v16;
        if (v15 != v16)
          break;
        v18 = *((unsigned __int8 *)v7 + 26);
        v16 = *((unsigned __int8 *)v13 + 33);
        v17 = v18 >= v16;
        if (v18 != v16)
          goto LABEL_44;
        v18 = *((unsigned __int8 *)v7 + 27);
        v16 = *((unsigned __int8 *)v13 + 34);
        v17 = v18 >= v16;
        if (v18 != v16)
          goto LABEL_44;
        v18 = *((unsigned __int8 *)v7 + 28);
        v16 = *((unsigned __int8 *)v13 + 35);
        v17 = v18 >= v16;
        if (v18 != v16)
          goto LABEL_44;
        v18 = *((unsigned __int8 *)v7 + 29);
        v16 = *((unsigned __int8 *)v13 + 36);
        v17 = v18 >= v16;
        if (v18 == v16
          && (v18 = *((unsigned __int8 *)v7 + 30), v16 = *((unsigned __int8 *)v13 + 37), v17 = v18 >= v16, v18 == v16))
        {
          v19 = *((unsigned __int8 *)v7 + 31);
          v20 = *((unsigned __int8 *)v13 + 38);
          if (v19 == v20)
          {
            v19 = *((unsigned __int8 *)v7 + 32);
            v20 = *((unsigned __int8 *)v13 + 39);
            if (v19 == v20)
            {
              v19 = *((unsigned __int8 *)v7 + 33);
              v20 = *((unsigned __int8 *)v13 + 40);
              if (v19 == v20)
              {
                v19 = *((unsigned __int8 *)v7 + 34);
                v20 = *((unsigned __int8 *)v13 + 41);
                if (v19 == v20)
                {
                  v19 = *((unsigned __int8 *)v7 + 35);
                  v20 = *((unsigned __int8 *)v13 + 42);
                  if (v19 == v20)
                  {
                    v19 = *((unsigned __int8 *)v7 + 36);
                    v20 = *((unsigned __int8 *)v13 + 43);
                    if (v19 == v20)
                    {
                      v19 = *((unsigned __int8 *)v7 + 37);
                      v20 = *((unsigned __int8 *)v13 + 44);
                      if (v19 == v20)
                      {
                        v19 = *((unsigned __int8 *)v7 + 38);
                        v20 = *((unsigned __int8 *)v13 + 45);
                        if (v19 == v20)
                        {
                          v19 = *((unsigned __int8 *)v7 + 39);
                          v20 = *((unsigned __int8 *)v13 + 46);
                          if (v19 == v20)
                          {
                            v19 = *((unsigned __int8 *)v7 + 40);
                            v20 = *((unsigned __int8 *)v13 + 47);
                            if (v19 == v20)
                              goto LABEL_32;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v19 >= v20)
          {
LABEL_32:
            v16 = *((unsigned __int8 *)v13 + 38);
            v18 = *((unsigned __int8 *)v7 + 31);
            if (v16 == v18)
            {
              v16 = *((unsigned __int8 *)v13 + 39);
              v18 = *((unsigned __int8 *)v7 + 32);
              if (v16 == v18)
              {
                v16 = *((unsigned __int8 *)v13 + 40);
                v18 = *((unsigned __int8 *)v7 + 33);
                if (v16 == v18)
                {
                  v16 = *((unsigned __int8 *)v13 + 41);
                  v18 = *((unsigned __int8 *)v7 + 34);
                  if (v16 == v18)
                  {
                    v16 = *((unsigned __int8 *)v13 + 42);
                    v18 = *((unsigned __int8 *)v7 + 35);
                    if (v16 == v18)
                    {
                      v16 = *((unsigned __int8 *)v13 + 43);
                      v18 = *((unsigned __int8 *)v7 + 36);
                      if (v16 == v18)
                      {
                        v16 = *((unsigned __int8 *)v13 + 44);
                        v18 = *((unsigned __int8 *)v7 + 37);
                        if (v16 == v18)
                        {
                          v16 = *((unsigned __int8 *)v13 + 45);
                          v18 = *((unsigned __int8 *)v7 + 38);
                          if (v16 == v18)
                          {
                            v16 = *((unsigned __int8 *)v13 + 46);
                            v18 = *((unsigned __int8 *)v7 + 39);
                            if (v16 == v18)
                            {
                              v16 = *((unsigned __int8 *)v13 + 47);
                              v18 = *((unsigned __int8 *)v7 + 40);
                              if (v16 == v18)
                                goto LABEL_52;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_46;
          }
LABEL_14:
          v14 = *(_QWORD *)v13;
          v12 = v13;
          if (!*(_QWORD *)v13)
            goto LABEL_49;
        }
        else
        {
LABEL_44:
          if (!v17)
            goto LABEL_14;
LABEL_46:
          if (v16 >= v18)
            goto LABEL_52;
          v14 = *((_QWORD *)v13 + 1);
          if (!v14)
          {
            v12 = (__int128 *)((char *)v13 + 8);
            goto LABEL_49;
          }
        }
      }
      v18 = *((unsigned __int8 *)v7 + 25);
      goto LABEL_44;
    }
  }
  return result;
}

void sub_223670250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 184) && *(char *)(v27 - 185) < 0)
    operator delete(*(void **)(v27 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_223195348((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223670520()
{
  JUMPOUT(0x2236704FCLL);
}

void sub_223670528()
{
  JUMPOUT(0x2236704FCLL);
}

void sub_223670530()
{
  JUMPOUT(0x2236704FCLL);
}

void sub_223670538(uint64_t *a1, uint64_t a2, char a3, int a4)
{
  double v5;
  const char *v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  std::string::size_type size;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::mutex *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  int v57;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  std::mutex *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  __int128 v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string v112;
  std::string v113;
  char v114;
  std::string __dst;
  char v116;
  __int128 v117;
  __int128 v118;
  int v119;
  std::string __p[3];
  std::string v121;
  std::string v122;
  std::string v123;
  void *v124;
  size_t v125;
  uint64_t v126;
  __int128 v127;
  std::string v128;
  _QWORD v129[2];
  std::__shared_weak_count *v130;
  std::string v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  uint64_t v137[4];
  std::__shared_weak_count *v138;
  void *v139;
  _BYTE v140[16];
  int v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v5 = (double)a2 / 1000000000.0;
  else
    v5 = NAN;
  if (a4)
    v6 = "MeshingEngine.GlobalMesh";
  else
    v6 = "MeshingEngine.KFCluster.ClusterMesh";
  if (a4)
    v7 = 24;
  else
    v7 = 35;
  v125 = v7;
  v126 = (v7 | 7) - 0x7FFFFFFFFFFFFFFFLL;
  v124 = operator new((v7 | 7) + 1);
  memcpy(v124, v6, v7);
  *((_BYTE *)v124 + v7) = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v8[2];
    }
    v10 = *(_QWORD *)(v9 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      v14 = "cv3d.recon.";
      v137[0] = (uint64_t)"cv3d.recon.";
      v137[1] = 11;
      v15 = HIBYTE(v126);
      v16 = &v124;
      if (v126 < 0)
      {
        v16 = v124;
        v15 = v125;
      }
      v137[2] = (uint64_t)v16;
      v137[3] = v15;
      sub_2231A9820((uint64_t)v137, (uint64_t)&v138, 0, 0, __p);
      v17 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      v18 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v17 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (std::string *)v18;
      if ((v17 & 0x80u) == 0)
        v20 = v17;
      else
        v20 = *((_QWORD *)&v18 + 1);
      v21 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v19, v20);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = v22;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((v23 & 1) == 0)
          goto LABEL_202;
      }
      else if ((v22 & 1) == 0)
      {
        goto LABEL_202;
      }
      v24 = *a1;
      v110 = a1[1];
      if (*a1 == v110)
        goto LABEL_202;
      while (1)
      {
        if (*(_BYTE *)(v24 + 116))
          v25 = *(_OWORD *)(v24 + 100);
        else
          v25 = xmmword_2245F6D10;
        v136 = v25;
        LODWORD(v137[3]) = 0;
        sub_22319B83C((uint64_t)&v117, (uint64_t)v137, (unsigned __int8 *)&v136);
        if (LODWORD(v137[3]) == -1)
          sub_22316DD70();
        *(_QWORD *)&v117 = &v131;
        ((void (*)(std::string *__return_ptr, __int128 *, uint64_t *))off_24EC570B8[LODWORD(v137[3])])(__p, &v117, v137);
        if (LODWORD(v137[3]) != -1)
          ((void (*)(__int128 *, uint64_t *))off_24EC570A0[LODWORD(v137[3])])(&v117, v137);
        size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p[0].__r_.__value_.__l.__size_;
        if (size >= 4)
          size = 4;
        v123 = __p[0];
        memset(__p, 0, 24);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          v123.__r_.__value_.__l.__size_ = size;
          *(_BYTE *)(v123.__r_.__value_.__r.__words[0] + size) = 0;
          if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_43:
            if (!a4)
              goto LABEL_47;
            goto LABEL_44;
          }
        }
        else
        {
          *((_BYTE *)&v123.__r_.__value_.__s + 23) = size;
          v123.__r_.__value_.__s.__data_[size] = 0;
          if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_43;
        }
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!a4)
        {
LABEL_47:
          LODWORD(v137[3]) = 0;
          sub_22319B83C((uint64_t)&v117, (uint64_t)v137, (unsigned __int8 *)v24);
          if (LODWORD(v137[3]) == -1)
            sub_22316DD70();
          *(_QWORD *)&v117 = &v131;
          ((void (*)(std::string *__return_ptr, __int128 *, uint64_t *))off_24EC570B8[LODWORD(v137[3])])(__p, &v117, v137);
          if (LODWORD(v137[3]) != -1)
            ((void (*)(__int128 *, uint64_t *))off_24EC570A0[LODWORD(v137[3])])(&v117, v137);
          v28 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = __p[0].__r_.__value_.__l.__size_;
          if (v28 >= 8)
            v28 = 8;
          v122 = __p[0];
          memset(__p, 0, 24);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
          {
            v122.__r_.__value_.__l.__size_ = v28;
            *(_BYTE *)(v122.__r_.__value_.__r.__words[0] + v28) = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
LABEL_56:
              operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          else
          {
            *((_BYTE *)&v122.__r_.__value_.__s + 23) = v28;
            v122.__r_.__value_.__s.__data_[v28] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_56;
          }
          v27 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          goto LABEL_58;
        }
LABEL_44:
        *((_BYTE *)&v122.__r_.__value_.__s + 23) = 6;
        strcpy((char *)&v122, "global");
        v27 = 6;
LABEL_58:
        v29 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        v30 = &v123;
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v29 = v123.__r_.__value_.__l.__size_;
          v30 = (std::string *)v123.__r_.__value_.__r.__words[0];
        }
        v137[0] = (uint64_t)v30;
        v137[1] = v29;
        v137[2] = (uint64_t)":";
        v137[3] = 1;
        v31 = &v122;
        if ((v27 & 0x80u) != 0)
        {
          v27 = v122.__r_.__value_.__l.__size_;
          v31 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        v138 = (std::__shared_weak_count *)v31;
        v139 = (void *)v27;
        sub_2231A9820((uint64_t)v137, (uint64_t)v140, 0, 0, &v121);
        if (*(_BYTE *)(v24 + 96))
        {
          v32 = *(_OWORD *)(v24 + 48);
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(v24 + 32);
          *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v32;
          v33 = *(_OWORD *)(v24 + 80);
          *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v24 + 64);
          *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v33;
        }
        else
        {
          *(std::string::size_type *)((char *)__p[2].__r_.__value_.__r.__words + 4) = 0;
          *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = 0u;
          *(_OWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + 4) = 0u;
          *(_OWORD *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0u;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 1065353216;
          HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = 1065353216;
          LODWORD(__p[1].__r_.__value_.__r.__words[2]) = 1065353216;
          HIDWORD(__p[2].__r_.__value_.__r.__words[1]) = 1065353216;
        }
        v137[0] = (uint64_t)v14;
        v137[1] = 11;
        v34 = HIBYTE(v126);
        v35 = &v124;
        if (v126 < 0)
        {
          v35 = v124;
          v34 = v125;
        }
        v137[2] = (uint64_t)v35;
        v137[3] = v34;
        sub_2231A9820((uint64_t)v137, (uint64_t)&v138, 0, 0, &v131);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v36 = sub_2241471F8();
          v37 = v36[2];
          if (!v37)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v37 = v36[2];
          }
          v38 = *(_QWORD *)(v37 + 64);
          v39 = (std::mutex *)(v38 + 32);
          std::mutex::lock((std::mutex *)(v38 + 32));
          v41 = *(_QWORD *)(v38 + 96);
          v40 = *(_QWORD *)(v38 + 104);
          std::mutex::unlock(v39);
          if (v41 != v40)
          {
            v42 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
            v43 = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
            sub_2241471F8();
            v44 = (v42 & 0x80u) == 0 ? &v131 : (std::string *)v43;
            v45 = (v42 & 0x80u) == 0 ? v42 : *((_QWORD *)&v43 + 1);
            v46 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v44, v45);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
            {
              v117 = 0u;
              v118 = 0u;
              v119 = 728325608;
              kdebug_trace();
              sub_224141CD8(&v133, __p, flt_22469B46C);
              if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
                sub_223197FA4(&__dst, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
              else
                __dst = v121;
              v47 = v14;
              v116 = 1;
              v48 = v133;
              v49 = operator new();
              *(_BYTE *)v49 = 0;
              *(_DWORD *)(v49 + 128) = -1;
              v50 = *(unsigned int *)(v48 + 128);
              if ((_DWORD)v50 != -1)
              {
                ((void (*)(_QWORD *, uint64_t, uint64_t))off_24EC6BD10[v50])(v129, v49, v48);
                *(_DWORD *)(v49 + 128) = v50;
              }
              *(_BYTE *)(v49 + 136) = *(_BYTE *)(v48 + 136);
              v137[0] = v49;
              LOBYTE(v137[1]) = 0;
              LOBYTE(v138) = 0;
              if (v116)
              {
                *(std::string *)&v137[1] = __dst;
                memset(&__dst, 0, sizeof(__dst));
                LOBYTE(v138) = 1;
              }
              LOBYTE(v139) = 0;
              LOBYTE(v141) = 0;
              sub_22352DE04((double *)&qword_255788F20, v46, (uint64_t)v137, (uint64_t)&v121);
              v14 = v47;
              if ((_BYTE)v141 && (v140[15] & 0x80000000) != 0)
                operator delete(v139);
              if ((_BYTE)v138 && SHIBYTE(v137[3]) < 0)
                operator delete((void *)v137[1]);
              v51 = v137[0];
              v137[0] = 0;
              if (v51)
                MEMORY[0x227684CE8](v51, 0x1000C4072FAA15ELL);
              if (v116 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v52 = v133;
              v133 = 0;
              if (v52)
                MEMORY[0x227684CE8](v52, 0x1000C4072FAA15ELL);
              kdebug_trace();
            }
          }
        }
        memset(v137, 0, sizeof(v137));
        LODWORD(v138) = 728325624;
        kdebug_trace();
        v53 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v53 = v131.__r_.__value_.__l.__size_;
        if (v53 >= 0x11)
        {
          v54 = &v131;
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v54 = (std::string *)v131.__r_.__value_.__r.__words[0];
          v55 = v54->__r_.__value_.__r.__words[0];
          v56 = v54->__r_.__value_.__l.__size_;
          v57 = v54->__r_.__value_.__s.__data_[16];
          if (v55 == 0x6365722E64337663 && v56 == 0x73746174532E6E6FLL && v57 == 46)
          {
            sub_223187510();
            sub_224141CD8((uint64_t *)&v117, __p, flt_22469B46C);
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&v113, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
            else
              v113 = v121;
            v114 = 1;
            v60 = v117;
            v61 = operator new();
            *(_BYTE *)v61 = 0;
            *(_DWORD *)(v61 + 128) = -1;
            v62 = *(unsigned int *)(v60 + 128);
            if ((_DWORD)v62 != -1)
            {
              ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC6BD10[v62])(&v133, v61, v60);
              *(_DWORD *)(v61 + 128) = v62;
            }
            *(_BYTE *)(v61 + 136) = *(_BYTE *)(v60 + 136);
            if (v114)
            {
              v63 = (void *)v113.__r_.__value_.__r.__words[0];
              v64 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
              memset(&v113, 0, sizeof(v113));
              if (v64 < 0)
                operator delete(v63);
            }
            MEMORY[0x227684CE8](v61, 0x1000C4072FAA15ELL);
            if (v114 && SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v113.__r_.__value_.__l.__data_);
            v65 = v117;
            *(_QWORD *)&v117 = 0;
            if (v65)
              MEMORY[0x227684CE8](v65, 0x1000C4072FAA15ELL);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        sub_224569D7C();
        sub_224569A80();
        if (!os_variant_has_internal_diagnostics())
          goto LABEL_195;
        v66 = sub_2241471F8();
        v67 = v66[2];
        if (!v67)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v67 = v66[2];
        }
        v68 = *(_QWORD *)(v67 + 64);
        v69 = (std::mutex *)(v68 + 32);
        std::mutex::lock((std::mutex *)(v68 + 32));
        v71 = *(_QWORD *)(v68 + 96);
        v70 = *(_QWORD *)(v68 + 104);
        std::mutex::unlock(v69);
        if (v71 == v70)
          goto LABEL_195;
        v137[0] = (uint64_t)v14;
        v137[1] = 11;
        v72 = HIBYTE(v126);
        v73 = &v124;
        if (v126 < 0)
        {
          v73 = v124;
          v72 = v125;
        }
        v137[2] = (uint64_t)v73;
        v137[3] = v72;
        sub_2231A9820((uint64_t)v137, (uint64_t)&v138, 0, 0, &v112);
        v74 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
        v75 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
        sub_2241471F8();
        if ((v74 & 0x80u) == 0)
          v76 = &v112;
        else
          v76 = (std::string *)v75;
        if ((v74 & 0x80u) == 0)
          v77 = v74;
        else
          v77 = *((_QWORD *)&v75 + 1);
        v78 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v76, v77);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
        {
          v117 = 0u;
          v118 = 0u;
          v119 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
          {
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(&v128, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
            else
              v128 = v121;
            *(_QWORD *)&v127 = (uint64_t)(v5 * 1000000000.0);
            *((_QWORD *)&v127 + 1) = v109 & 0xFFFFFFFFFFFFFF00 | 2;
            v109 = *((_QWORD *)&v127 + 1);
            v79 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
            {
              v80 = *(_QWORD *)(v24 + 16);
              v81 = sub_22456636C((unsigned __int8 *)&v136);
              *(float *)&v131.__r_.__value_.__l.__data_ = (float)(53 * v81 % 0xFFuLL) / 255.0;
              *((float *)v131.__r_.__value_.__r.__words + 1) = (float)(211 * v81 % 0xFFuLL) / 255.0;
              *(float *)&v131.__r_.__value_.__r.__words[1] = (float)(103 * v81 % 0xFFuLL) / 255.0;
              sub_223180698((uint64_t)v137, v80);
              v82 = 0xAAAAAAAAAAAAAAABLL * ((v137[1] - v137[0]) >> 2);
              v83 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v139 - (_BYTE *)v138) >> 2);
              if (v82 <= v83)
              {
                if (v82 < v83)
                  v139 = (char *)v138 + 4 * ((v137[1] - v137[0]) >> 2);
              }
              else
              {
                sub_2235341F4((uint64_t)&v138, v82 - v83, (uint64_t *)&v131);
              }
              v141 = 1;
              v131 = v128;
              memset(&v128, 0, sizeof(v128));
              v132 = 1;
              sub_22329F414((uint64_t)v137, (__int128 *)&v131, &v127, &v133);
              if (v132 && SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v131.__r_.__value_.__l.__data_);
              sub_22316F8F4(v137);
              v84 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 56))(v78);
              v85 = *v84;
              v86 = (std::__shared_weak_count *)v84[1];
              if (v86)
              {
                p_shared_owners = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldxr(p_shared_owners);
                while (__stxr(v88 + 1, p_shared_owners));
              }
              v89 = v134;
              v90 = v135;
              v129[0] = &off_24EC6A3B8;
              v129[1] = v134;
              v130 = v135;
              v134 = 0;
              v135 = 0;
              v137[0] = v85;
              v137[1] = (uint64_t)v86;
              if (v86)
              {
                v91 = (unint64_t *)&v86->__shared_owners_;
                do
                  v92 = __ldxr(v91);
                while (__stxr(v92 + 1, v91));
              }
              v137[2] = (uint64_t)&off_24EC6A3B8;
              v137[3] = v89;
              v138 = v90;
              if (v90)
              {
                v93 = (unint64_t *)&v90->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              (*(void (**)(uint64_t *, uint64_t *))(*v79 + 16))(v79, v137);
              v95 = v138;
              if (v138)
              {
                v96 = (unint64_t *)&v138->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v98 = (std::__shared_weak_count *)v137[1];
              if (v137[1])
              {
                v99 = (unint64_t *)(v137[1] + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = v130;
              if (v130)
              {
                v102 = (unint64_t *)&v130->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              if (v86)
              {
                v104 = (unint64_t *)&v86->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              v106 = v135;
              if (v135)
              {
                v107 = (unint64_t *)&v135->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
            }
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v112.__r_.__value_.__l.__data_);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_199;
LABEL_196:
          if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_200;
LABEL_29:
          operator delete(v122.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_201;
LABEL_30:
          v24 += 120;
          if (v24 == v110)
            break;
        }
        else
        {
LABEL_195:
          if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_196;
LABEL_199:
          operator delete(v121.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_29;
LABEL_200:
          if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_30;
LABEL_201:
          operator delete(v123.__r_.__value_.__l.__data_);
          v24 += 120;
          if (v24 == v110)
            break;
        }
      }
    }
  }
LABEL_202:
  if (SHIBYTE(v126) < 0)
    operator delete(v124);
}

void sub_223671534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *__p;
  char a74;

  sub_22316F8F4((uint64_t *)&STACK[0x220]);
  if (a74 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a34);
  if (a25 < 0)
    operator delete(a20);
  if (a54 < 0)
  {
    operator delete(a49);
    if ((a60 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((a60 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a67 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_11:
    operator delete(a62);
LABEL_12:
    if (a72 < 0)
      operator delete(a68);
    _Unwind_Resume(a1);
  }
  operator delete(a55);
  if ((a67 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_223671858(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::mutex *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  std::mutex *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int32x2_t v59;
  int32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  uint64_t v88;
  uint64_t v89;
  std::string::size_type size;
  std::string *v91;
  uint64_t v92;
  __int128 v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  __float2 v113;
  float v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  float v142;
  uint64_t *v143;
  int8x16_t v144;
  std::string v145;
  std::string v146;
  __int128 v147;
  char v148;
  char v149;
  __int128 v150;
  __int16 v151;
  void *__p[2];
  __int128 v153;
  int v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[25];
  __int128 v159;
  uint64_t (**v160)();
  void *v161;
  uint64_t v162;
  _BYTE v163[24];
  char v164;
  float *v165[2];
  void *v166[4];
  _QWORD v167[3];
  char v168;
  int v169;
  __int128 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v155 = operator new(0x28uLL);
  v156 = xmmword_2245B8E00;
  strcpy((char *)v155, "MeshingEngine.KFCluster.RoomBoundaries");
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      v166[0] = "cv3d.recon.";
      v166[1] = (void *)11;
      v8 = (void *)HIBYTE(v156);
      v9 = &v155;
      if (v156 < 0)
      {
        v9 = v155;
        v8 = (void *)v156;
      }
      v166[2] = v9;
      v166[3] = v8;
      sub_2231A9820((uint64_t)v166, (uint64_t)v167, 0, 0, (std::string *)__p);
      v10 = (void *)BYTE7(v153);
      v11 = (void **)__p[0];
      v12 = __p[1];
      sub_2241471F8();
      if ((char)v10 >= 0)
        v13 = __p;
      else
        v13 = v11;
      if ((char)v10 >= 0)
        v14 = v10;
      else
        v14 = v12;
      v15 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v13, v14);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v17 = v16;
      if (SBYTE7(v153) < 0)
      {
        operator delete(__p[0]);
        if ((v17 & 1) == 0)
          goto LABEL_219;
      }
      else if ((v16 & 1) == 0)
      {
        goto LABEL_219;
      }
      v166[0] = "cv3d.recon.";
      v166[1] = (void *)11;
      v18 = (void *)HIBYTE(v156);
      v19 = &v155;
      if (v156 < 0)
      {
        v19 = v155;
        v18 = (void *)v156;
      }
      v166[2] = v19;
      v166[3] = v18;
      sub_2231A9820((uint64_t)v166, (uint64_t)v167, 0, 0, (std::string *)v158);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v20 = sub_2241471F8();
        v21 = v20[2];
        if (!v21)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v21 = v20[2];
        }
        v22 = *(_QWORD *)(v21 + 64);
        v23 = (std::mutex *)(v22 + 32);
        std::mutex::lock((std::mutex *)(v22 + 32));
        v25 = *(_QWORD *)(v22 + 96);
        v24 = *(_QWORD *)(v22 + 104);
        std::mutex::unlock(v23);
        if (v25 != v24)
        {
          v26 = v158[23];
          v27 = *(_BYTE **)v158;
          v28 = *(_QWORD *)&v158[8];
          sub_2241471F8();
          v29 = (v26 & 0x80u) == 0 ? v158 : v27;
          v30 = (v26 & 0x80u) == 0 ? v26 : v28;
          v31 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v29, v30);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
          {
            *(_OWORD *)__p = 0u;
            v153 = 0u;
            v154 = 728325608;
            kdebug_trace();
            sub_224141CD8((uint64_t *)v163, (_QWORD *)(a1 + 48), flt_22469B46C);
            v151 = 264;
            strcpy((char *)&v150, "boundary");
            LOBYTE(v147) = 0;
            v149 = 0;
            sub_22414372C((uint64_t)v166, (uint64_t *)v163, &v150, &v147);
            sub_22367303C(v31, (uint64_t)v166);
            if ((_BYTE)v169 && v168 < 0)
              operator delete((void *)v167[1]);
            if (LOBYTE(v167[0]) && SHIBYTE(v166[3]) < 0)
              operator delete(v166[1]);
            v32 = v166[0];
            v166[0] = 0;
            if (v32)
              MEMORY[0x227684CE8](v32, 0x1000C4072FAA15ELL);
            if (v149 && v148 < 0)
              operator delete((void *)v147);
            if (HIBYTE(v151) && (char)v151 < 0)
              operator delete((void *)v150);
            v33 = *(_QWORD *)v163;
            *(_QWORD *)v163 = 0;
            if (v33)
              MEMORY[0x227684CE8](v33, 0x1000C4072FAA15ELL);
            kdebug_trace();
          }
        }
      }
      memset(v166, 0, sizeof(v166));
      LODWORD(v167[0]) = 728325624;
      kdebug_trace();
      v34 = v158[23];
      if (v158[23] < 0)
        v34 = *(_QWORD *)&v158[8];
      if (v34 >= 0x11)
      {
        v35 = v158;
        if (v158[23] < 0)
          v35 = *(_BYTE **)v158;
        v36 = *(_QWORD *)v35;
        v37 = *((_QWORD *)v35 + 1);
        v38 = v35[16];
        if (v36 == 0x6365722E64337663 && v37 == 0x73746174532E6E6FLL && v38 == 46)
        {
          sub_223187510();
          sub_224141CD8((uint64_t *)__p, (_QWORD *)(a1 + 48), flt_22469B46C);
          v41 = __p[0];
          v42 = operator new();
          *(_BYTE *)v42 = 0;
          *(_DWORD *)(v42 + 128) = -1;
          v43 = *((unsigned int *)v41 + 32);
          if ((_DWORD)v43 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24EC6BD10[v43])(v163, v42, v41);
            *(_DWORD *)(v42 + 128) = v43;
          }
          *(_BYTE *)(v42 + 136) = v41[136];
          MEMORY[0x227684CE8](v42, 0x1000C4072FAA15ELL);
          v44 = __p[0];
          __p[0] = 0;
          if (v44)
            MEMORY[0x227684CE8](v44, 0x1000C4072FAA15ELL);
        }
      }
      kdebug_trace();
      if ((v158[23] & 0x80000000) != 0)
        operator delete(*(void **)v158);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v45 = sub_2241471F8();
        v46 = v45[2];
        if (!v46)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v46 = v45[2];
        }
        v47 = *(_QWORD *)(v46 + 64);
        v48 = (std::mutex *)(v47 + 32);
        std::mutex::lock((std::mutex *)(v47 + 32));
        v50 = *(_QWORD *)(v47 + 96);
        v49 = *(_QWORD *)(v47 + 104);
        std::mutex::unlock(v48);
        if (v50 != v49)
        {
          v166[0] = "cv3d.recon.";
          v166[1] = (void *)11;
          v51 = (void *)HIBYTE(v156);
          v52 = &v155;
          if (v156 < 0)
          {
            v52 = v155;
            v51 = (void *)v156;
          }
          v166[2] = v52;
          v166[3] = v51;
          sub_2231A9820((uint64_t)v166, (uint64_t)v167, 0, 0, &v146);
          v53 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v54 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
          sub_2241471F8();
          if ((v53 & 0x80u) == 0)
            v55 = &v146;
          else
            v55 = (std::string *)v54;
          if ((v53 & 0x80u) == 0)
            v56 = v53;
          else
            v56 = *((_QWORD *)&v54 + 1);
          v57 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v55, v56);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
          {
            *(_OWORD *)__p = 0u;
            v153 = 0u;
            v154 = 728325616;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
            {
              v145.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v145.__r_.__value_.__l.__size_ = 2;
              v58 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
              {
                v143 = v58;
                sub_2241498F4((uint64_t)v166, 0);
                memset(v158, 0, 24);
                v160 = (uint64_t (**)())v158;
                v62 = *(_QWORD *)a1;
                v61 = *(_QWORD *)(a1 + 8);
                if (*(_QWORD *)a1 != v61)
                {
                  do
                  {
                    sub_223674860((uint64_t **)&v160, v62, 0, v59, v60);
                    v62 += 360;
                  }
                  while (v62 != v61);
                }
                v64 = *(_QWORD *)(a1 + 24);
                for (i = *(_QWORD *)(a1 + 32); v64 != i; v64 += 360)
                  sub_223674860((uint64_t **)&v160, v64, 1, v59, v60);
                sub_223674A94(v166, (uint64_t *)v158);
                v169 = 1;
                v65 = *(uint64_t **)v158;
                if (*(_QWORD *)v158)
                {
                  v66 = *(uint64_t **)&v158[8];
                  v67 = *(void **)v158;
                  if (*(_QWORD *)&v158[8] != *(_QWORD *)v158)
                  {
                    do
                      v66 = sub_22316F8F4(v66 - 48);
                    while (v66 != v65);
                    v67 = *(void **)v158;
                  }
                  *(_QWORD *)&v158[8] = v65;
                  operator delete(v67);
                }
                strcpy(v158, "boundary");
                *(_QWORD *)&v158[9] = v170;
                *(_QWORD *)&v158[15] = *(_QWORD *)((char *)&v170 + 6);
                *(_WORD *)&v158[23] = 264;
                *(_QWORD *)&v170 = 0;
                *(_QWORD *)((char *)&v170 + 6) = 0;
                sub_22329F414((uint64_t)v166, (__int128 *)v158, (__int128 *)&v145, v163);
                if (v158[24] && (v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                sub_22316F8F4((uint64_t *)v166);
                v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
                v69 = *(void **)v68;
                v70 = *(std::__shared_weak_count **)(v68 + 8);
                if (v70)
                {
                  p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldxr(p_shared_owners);
                  while (__stxr(v72 + 1, p_shared_owners));
                }
                v74 = *(void **)&v163[8];
                v73 = *(_QWORD *)&v163[16];
                v160 = &off_24EC6A3B8;
                v161 = *(void **)&v163[8];
                v162 = *(_QWORD *)&v163[16];
                *(_QWORD *)&v163[8] = 0;
                *(_QWORD *)&v163[16] = 0;
                v166[0] = v69;
                v166[1] = v70;
                if (v70)
                {
                  v75 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                }
                v166[2] = &off_24EC6A3B8;
                v166[3] = v74;
                v167[0] = v73;
                if (v73)
                {
                  v77 = (unint64_t *)(v73 + 8);
                  do
                    v78 = __ldxr(v77);
                  while (__stxr(v78 + 1, v77));
                }
                (*(void (**)(uint64_t *, void **))(*v143 + 16))(v143, v166);
                sub_2241231D8((uint64_t)&v166[2]);
                v79 = (std::__shared_weak_count *)v166[1];
                if (v166[1])
                {
                  v80 = (unint64_t *)((char *)v166[1] + 8);
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                sub_2241231D8((uint64_t)&v160);
                if (v70)
                {
                  v82 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                sub_2241231D8((uint64_t)v163);
              }
            }
            kdebug_trace();
          }
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
        }
      }
      v146.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v146.__r_.__value_.__r.__words[1] = xmmword_2245C6420;
      strcpy(v146.__r_.__value_.__l.__data_, "Stats.KFCluster.RoomBoundaries");
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v84 = sub_2241471F8();
        v85 = v84[2];
        if (!v85)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v85 = v84[2];
        }
        v86 = *(_QWORD *)(v85 + 64);
        v87 = (std::mutex *)(v86 + 32);
        std::mutex::lock((std::mutex *)(v86 + 32));
        v89 = *(_QWORD *)(v86 + 96);
        v88 = *(_QWORD *)(v86 + 104);
        std::mutex::unlock(v87);
        if (v89 != v88)
        {
          v166[0] = "cv3d.recon.";
          v166[1] = (void *)11;
          size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v91 = &v146;
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            size = v146.__r_.__value_.__l.__size_;
            v91 = (std::string *)v146.__r_.__value_.__r.__words[0];
          }
          v166[2] = v91;
          v166[3] = (void *)size;
          sub_2231A9820((uint64_t)v166, (uint64_t)v167, 0, 0, &v145);
          v92 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          v93 = *(_OWORD *)&v145.__r_.__value_.__l.__data_;
          sub_2241471F8();
          if ((v92 & 0x80u) == 0)
            v94 = &v145;
          else
            v94 = (std::string *)v93;
          if ((v92 & 0x80u) == 0)
            v95 = v92;
          else
            v95 = *((_QWORD *)&v93 + 1);
          v96 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v94, v95);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96))
          {
            *(_OWORD *)__p = 0u;
            v153 = 0u;
            v154 = 728325616;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96))
            {
              *(_QWORD *)&v157 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *((_QWORD *)&v157 + 1) = 2;
              v97 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96))
              {
                sub_22452C3CC(&v159);
                HIBYTE(v166[2]) = 15;
                strcpy((char *)v166, "room_boundaries");
                sub_223674FA0((std::string *)v158, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
                sub_224527BAC((uint64_t)v166, (CFStringRef *)v163);
                sub_2231AEDB8((uint64_t)&v159, *(const void **)v163, (uint64_t)v158);
                v98 = *(std::__shared_weak_count **)&v163[8];
                if (*(_QWORD *)&v163[8])
                {
                  v99 = (unint64_t *)(*(_QWORD *)&v163[8] + 8);
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                if ((v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                if (SHIBYTE(v166[2]) < 0)
                  operator delete(v166[0]);
                v166[0] = operator new(0x30uLL);
                *(_OWORD *)&v166[1] = xmmword_2245C7A50;
                strcpy((char *)v166[0], "room_boundaries_not_containing_keyframes");
                sub_223674FA0((std::string *)v158, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
                sub_224527BAC((uint64_t)v166, (CFStringRef *)v163);
                sub_2231AEDB8((uint64_t)&v159, *(const void **)v163, (uint64_t)v158);
                v101 = *(std::__shared_weak_count **)&v163[8];
                if (*(_QWORD *)&v163[8])
                {
                  v102 = (unint64_t *)(*(_QWORD *)&v163[8] + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                }
                if ((v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                if (SHIBYTE(v166[2]) < 0)
                  operator delete(v166[0]);
                v158[23] = 12;
                strcpy(v158, "current_room");
                LODWORD(v166[3]) = 0;
                if (*(_BYTE *)(a1 + 128))
                  sub_22319B83C((uint64_t)&v170, (uint64_t)v166, (unsigned __int8 *)(a1 + 112));
                else
                  sub_2231A0D14(v166, "nullopt");
                if (LODWORD(v166[3]) == -1)
                  sub_22316DD70();
                *(_QWORD *)&v170 = &v164;
                ((void (*)(_BYTE *__return_ptr, __int128 *, void **))off_24EC570B8[LODWORD(v166[3])])(v163, &v170, v166);
                if (LODWORD(v166[3]) != -1)
                  ((void (*)(__int128 *, void **))off_24EC570A0[LODWORD(v166[3])])(&v170, v166);
                sub_224527BAC((uint64_t)v158, (CFStringRef *)v166);
                sub_2231AEDB8((uint64_t)&v159, v166[0], (uint64_t)v163);
                v104 = (std::__shared_weak_count *)v166[1];
                if (v166[1])
                {
                  v105 = (unint64_t *)((char *)v166[1] + 8);
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
                if ((v163[23] & 0x80000000) != 0)
                  operator delete(*(void **)v163);
                if ((v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                HIBYTE(v166[2]) = 16;
                strcpy((char *)v166, "boundary_to_user");
                memset(v163, 0, sizeof(v163));
                v170 = (unint64_t)(a1 + 48);
                v165[0] = (float *)v163;
                v165[1] = 0;
                sub_2236763FC((float32x2_t **)&v170, v165);
                v107 = *(int8x16_t *)v163;
                v108 = vextq_s8(v107, v107, 8uLL);
                v109 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v163, 1), *(float32x2_t *)v163, 1), *(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8).f32[0];
                if (v109 >= 0.0061)
                {
                  v112 = sqrtf(v109);
                  v142 = v109;
                  v144 = *(int8x16_t *)v163;
                  v113 = __sincosf_stret(v112);
                  v109 = v142;
                  v107 = v144;
                  v111 = v113.__sinval / v112;
                  v110 = (float)(1.0 / v142) * (float)(1.0 - v113.__cosval);
                  *(float *)v108.i32 = (float)(1.0 / v142) * (float)(1.0 - (float)(v113.__sinval / v112));
                }
                else
                {
                  v110 = 0.5 - (float)(v109 * (float)((float)(v109 / -720.0) + 0.041667));
                  *(float *)v108.i32 = 0.16667 - (float)(v109 * (float)((float)(v109 / -5040.0) + 0.0083333));
                  v111 = 1.0 - (float)(v109 * *(float *)v108.i32);
                }
                if (v109 >= 0.00000149)
                {
                  if (v109 <= 9.0)
                    v114 = (float)((float)(v110 * 0.5) - *(float *)v108.i32) / v111;
                  else
                    v114 = (float)(v110 + (float)(v111 * -0.5)) / (float)(v109 * v110);
                }
                else
                {
                  v114 = (float)(v109 * 0.000033069) + (float)((float)(v109 * 0.0013889) + 0.083333);
                }
                v108.i64[0] = *(_QWORD *)(a1 + 96);
                v108.i32[2] = *(_DWORD *)(a1 + 104);
                v115 = (float32x4_t)vextq_s8(vextq_s8(v107, v107, 0xCuLL), v107, 8uLL);
                v116 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL);
                v117 = (int8x16_t)vsubq_f32(vmulq_f32(v115, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL)), vmulq_f32(v116, (float32x4_t)vextq_s8(vextq_s8(v108, v108, 0xCuLL), v108, 8uLL)));
                v118.i64[0] = 0xBF000000BF000000;
                v118.i64[1] = 0xBF000000BF000000;
                v119 = vaddq_f32(vaddq_f32((float32x4_t)v108, vmulq_f32((float32x4_t)v117, v118)), vmulq_n_f32(vsubq_f32(vmulq_f32(v115, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), v117, 0xCuLL)), vmulq_f32(v116, (float32x4_t)vextq_s8(vextq_s8(v117, v117, 0xCuLL), v117, 8uLL))), v114));
                *(_DWORD *)&v163[20] = v119.i32[2];
                *(_QWORD *)&v163[12] = v119.i64[0];
                sub_22367629C(*(__n128 *)v163, *(float *)&v163[4], *(float *)&v163[8], v119.f32[0], *(double *)&v163[16], v119.f32[2]);
                sub_224527BAC((uint64_t)v166, (CFStringRef *)&v170);
                sub_2231AEDB8((uint64_t)&v159, (const void *)v170, (uint64_t)v158);
                v120 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
                if (*((_QWORD *)&v170 + 1))
                {
                  v121 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
                  do
                    v122 = __ldaxr(v121);
                  while (__stlxr(v122 - 1, v121));
                  if (!v122)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                if ((v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                if (SHIBYTE(v166[2]) < 0)
                  operator delete(v166[0]);
                v158[0] = 0;
                v158[24] = 0;
                sub_2231AD9F0((uint64_t)&v159, (__int128 *)v158, &v157, &v160);
                if (v158[24] && (v158[23] & 0x80000000) != 0)
                  operator delete(*(void **)v158);
                v123 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
                if (*((_QWORD *)&v159 + 1))
                {
                  v124 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 56))(v96);
                v127 = *(void **)v126;
                v128 = *(std::__shared_weak_count **)(v126 + 8);
                if (v128)
                {
                  v129 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v130 = __ldxr(v129);
                  while (__stxr(v130 + 1, v129));
                }
                v132 = v161;
                v131 = v162;
                *(_QWORD *)v163 = &off_24EC6A3B8;
                *(_QWORD *)&v163[8] = v161;
                *(_QWORD *)&v163[16] = v162;
                v161 = 0;
                v162 = 0;
                v166[0] = v127;
                v166[1] = v128;
                if (v128)
                {
                  v133 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v134 = __ldxr(v133);
                  while (__stxr(v134 + 1, v133));
                }
                v166[2] = &off_24EC6A3B8;
                v166[3] = v132;
                v167[0] = v131;
                if (v131)
                {
                  v135 = (unint64_t *)(v131 + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                (*(void (**)(uint64_t *, void **))(*v97 + 16))(v97, v166);
                sub_2241231D8((uint64_t)&v166[2]);
                v137 = (std::__shared_weak_count *)v166[1];
                if (v166[1])
                {
                  v138 = (unint64_t *)((char *)v166[1] + 8);
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                sub_2241231D8((uint64_t)v163);
                if (v128)
                {
                  v140 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                sub_2241231D8((uint64_t)&v160);
              }
            }
            kdebug_trace();
          }
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
    }
  }
LABEL_219:
  if (SHIBYTE(v156) < 0)
    operator delete(v155);
}

void sub_223672B14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_22367303C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 8;
    strcpy((char *)__p, "boundary");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2232A6F44((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_2236730F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22367310C(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _BYTE *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  void *v105[2];
  __int128 v106;
  int v107;
  std::string v108;
  void *v109[2];
  uint64_t v110;
  char v111;
  void *__dst[2];
  uint64_t v113;
  char v114;
  _BYTE v115[24];
  void *v116;
  __int128 v117;
  __int128 v118;
  void *v119;
  _BYTE v120[17];
  __int128 v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  _QWORD v127[2];
  void *v128[2];
  __int128 v129;
  std::__shared_weak_count *v130;
  __int128 __p;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x28uLL);
  v116 = v2;
  v117 = xmmword_2245B8E00;
  strcpy((char *)v2, "MeshingEngine.KFCluster.visibility_map");
  v115[23] = 20;
  strcpy(v115, "user_to_bounding_box");
  v128[0] = "cv3d.recon.";
  v128[1] = (void *)11;
  *(_QWORD *)&v129 = v2;
  *((_QWORD *)&v129 + 1) = 38;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v130, 0, 0, (std::string *)v105);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v3 = sub_2241471F8();
    v4 = v3[2];
    if (!v4)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v3[2];
    }
    v5 = *(_QWORD *)(v4 + 64);
    v6 = (std::mutex *)(v5 + 32);
    std::mutex::lock((std::mutex *)(v5 + 32));
    v8 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(v5 + 104);
    std::mutex::unlock(v6);
    if (v8 != v7)
    {
      sub_2241471F8();
      v9 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
      {
        v121 = 0u;
        v122 = 0u;
        v123 = 728325608;
        kdebug_trace();
        v10 = operator new();
        v11 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)v10 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v10 + 16) = v11;
        v12 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v10 + 48) = v12;
        *(_DWORD *)(v10 + 128) = 0;
        *(_BYTE *)(v10 + 136) = 4;
        if ((v115[23] & 0x80000000) != 0)
        {
          sub_223197FA4(__dst, *(void **)v115, *(unint64_t *)&v115[8]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v115;
          v113 = *(_QWORD *)&v115[16];
        }
        v114 = 1;
        v13 = (_DWORD *)operator new();
        *(_BYTE *)v13 = 0;
        v13[32] = -1;
        v14 = *(unsigned int *)(v10 + 128);
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(void **, _DWORD *, uint64_t))off_24EC6BD10[v14])(&v119, v13, v10);
          v13[32] = v14;
        }
        *((_BYTE *)v13 + 136) = *(_BYTE *)(v10 + 136);
        v128[0] = v13;
        LOBYTE(v128[1]) = 0;
        LOBYTE(v130) = 0;
        LOBYTE(__p) = 0;
        LOBYTE(v133) = 0;
        if (v114)
        {
          __p = *(_OWORD *)__dst;
          v132 = v113;
          __dst[1] = 0;
          v113 = 0;
          __dst[0] = 0;
          LOBYTE(v133) = 1;
        }
        sub_223674168((double *)&qword_255788F20, v9, (uint64_t)v128, (uint64_t)v115);
        if ((_BYTE)v133 && SHIBYTE(v132) < 0)
          operator delete((void *)__p);
        if ((_BYTE)v130 && SHIBYTE(v129) < 0)
          operator delete(v128[1]);
        v15 = v128[0];
        v128[0] = 0;
        if (v15)
          MEMORY[0x227684CE8](v15, 0x1000C4072FAA15ELL);
        if (v114 && SHIBYTE(v113) < 0)
          operator delete(__dst[0]);
        MEMORY[0x227684CE8](v10, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v128 = 0u;
  v129 = 0u;
  LODWORD(v130) = 728325624;
  kdebug_trace();
  v16 = BYTE7(v106);
  if (SBYTE7(v106) < 0)
    v16 = (unint64_t)v105[1];
  if (v16 >= 0x11)
  {
    v17 = v105;
    if (SBYTE7(v106) < 0)
      v17 = (void **)v105[0];
    v18 = *v17;
    v19 = v17[1];
    v20 = *((unsigned __int8 *)v17 + 16);
    if (v18 == (void *)0x6365722E64337663 && v19 == (void *)0x73746174532E6E6FLL && v20 == 46)
    {
      sub_223187510();
      v23 = operator new();
      v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)v23 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v23 + 16) = v24;
      v25 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(v23 + 48) = v25;
      *(_DWORD *)(v23 + 128) = 0;
      *(_BYTE *)(v23 + 136) = 4;
      if ((v115[23] & 0x80000000) != 0)
      {
        sub_223197FA4(v109, *(void **)v115, *(unint64_t *)&v115[8]);
      }
      else
      {
        *(_OWORD *)v109 = *(_OWORD *)v115;
        v110 = *(_QWORD *)&v115[16];
      }
      v111 = 1;
      v26 = operator new();
      *(_BYTE *)v26 = 0;
      *(_DWORD *)(v26 + 128) = -1;
      v27 = *(unsigned int *)(v23 + 128);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(__int128 *, uint64_t, uint64_t))off_24EC6BD10[v27])(&v121, v26, v23);
        *(_DWORD *)(v26 + 128) = v27;
      }
      *(_BYTE *)(v26 + 136) = *(_BYTE *)(v23 + 136);
      if (v111)
      {
        v28 = v109[0];
        v29 = SHIBYTE(v110);
        v109[1] = 0;
        v110 = 0;
        v109[0] = 0;
        if (v29 < 0)
          operator delete(v28);
      }
      MEMORY[0x227684CE8](v26, 0x1000C4072FAA15ELL);
      if (v111 && SHIBYTE(v110) < 0)
        operator delete(v109[0]);
      MEMORY[0x227684CE8](v23, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SBYTE7(v106) < 0)
    operator delete(v105[0]);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_148;
  v30 = sub_2241471F8();
  v31 = v30[2];
  if (!v31)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v31 = v30[2];
  }
  v32 = *(_QWORD *)(v31 + 64);
  v33 = (std::mutex *)(v32 + 32);
  std::mutex::lock((std::mutex *)(v32 + 32));
  v35 = *(_QWORD *)(v32 + 96);
  v34 = *(_QWORD *)(v32 + 104);
  std::mutex::unlock(v33);
  if (v35 == v34)
    goto LABEL_148;
  v128[0] = "cv3d.recon.";
  v128[1] = (void *)11;
  v36 = HIBYTE(v117);
  v37 = &v116;
  if (v117 < 0)
  {
    v37 = v116;
    v36 = v117;
  }
  *(_QWORD *)&v129 = v37;
  *((_QWORD *)&v129 + 1) = v36;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v130, 0, 0, &v108);
  sub_2241471F8();
  v38 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
  {
    *(_OWORD *)v105 = 0u;
    v106 = 0u;
    v107 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
    {
      *(_QWORD *)&v118 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v118 + 1) = 2;
      v39 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
      {
        v102 = v39;
        v40 = *(_QWORD *)(a1 + 24);
        v41 = *(_QWORD *)(a1 + 32);
        v119 = 0;
        *(_QWORD *)v120 = 0;
        *(_QWORD *)&v120[8] = 0;
        if (v40 != v41)
        {
          v42.i32[3] = 0;
          do
          {
            v42.i64[0] = *(_QWORD *)v40;
            v42.i32[2] = *(_DWORD *)(v40 + 8);
            v104 = v42;
            v42.i64[0] = *(_QWORD *)(v40 + 12);
            v42.i32[2] = *(_DWORD *)(v40 + 20);
            v103 = v42;
            sub_22414CE34(0, (uint64_t)v128);
            v44 = (float *)v128[0];
            v45 = (float *)v128[1];
            if (v128[0] == v128[1])
            {
              v54 = v128[0];
            }
            else
            {
              v46.i64[0] = 0x3F0000003F000000;
              v46.i64[1] = 0x3F0000003F000000;
              v47 = vmulq_f32(vsubq_f32(v103, v104), v46);
              v48.i64[0] = 0;
              v48.i64[1] = v47.u32[2];
              v49.i32[0] = 0;
              v49.i64[1] = 0;
              v49.i32[1] = v47.i32[1];
              v50 = (float32x4_t)v47.u32[0];
              v51 = vmulq_f32(vaddq_f32(v104, v103), v46);
              v51.i32[3] = 1.0;
              do
              {
                v52 = vaddq_f32(v51, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v50, *v44), v49, v44[1]), v48, v44[2]));
                v53 = vdivq_f32(v52, (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3));
                v44[2] = v53.f32[2];
                *(_QWORD *)v44 = v53.i64[0];
                v44 += 3;
              }
              while (v44 != v45);
              v54 = v128[1];
              v44 = (float *)v128[0];
            }
            v55 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (_BYTE *)v44) >> 2);
            v56 = __p;
            v57 = (char *)v130;
            v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p - (_QWORD)v130) >> 2);
            if (v55 <= v58)
            {
              if (v55 < v58)
              {
                v56 = (uint64_t)v130 + 12 * v55;
                *(_QWORD *)&__p = v56;
              }
            }
            else
            {
              sub_22317EF30((uint64_t)&v130, v55 - v58);
              v57 = (char *)v130;
              v56 = __p;
            }
            v59 = v56 - (_QWORD)v57;
            if ((uint64_t)v59 >= 1)
            {
              v60 = v59 / 0xC;
              v61 = v59 / 0xC - (v59 > 0xB) + 1;
              if (v61 < 8)
              {
                v62 = v57;
LABEL_82:
                v64 = v60 + 1;
                do
                {
                  *(_QWORD *)v62 = 0x3F80000000000000;
                  *((_DWORD *)v62 + 2) = 0;
                  --v64;
                  v62 += 12;
                }
                while (v64 > 1);
                goto LABEL_84;
              }
              v60 -= v61 & 0xFFFFFFFFFFFFFFF8;
              v62 = &v57[12 * (v61 & 0xFFFFFFFFFFFFFFF8)];
              v63 = v61 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(_OWORD *)v57 = xmmword_2245F4CF0;
                *((_OWORD *)v57 + 1) = xmmword_224649660;
                *((_OWORD *)v57 + 4) = xmmword_224649660;
                *((_OWORD *)v57 + 5) = xmmword_2245C76E0;
                *((_OWORD *)v57 + 2) = xmmword_2245C76E0;
                *((_OWORD *)v57 + 3) = xmmword_2245F4CF0;
                v57 += 96;
                v63 -= 8;
              }
              while (v63);
              if (v61 != (v61 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_82;
            }
LABEL_84:
            v133 = 1;
            if (*(_QWORD *)v120 < *(_QWORD *)&v120[8])
            {
              v43 = sub_22317FD80(*(uint64_t *)v120, (uint64_t)v128) + 384;
            }
            else
            {
              v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v120 - (_QWORD)v119) >> 7);
              v66 = v65 + 1;
              if (v65 + 1 > 0xAAAAAAAAAAAAAALL)
                sub_22316E078();
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v120[8] - (_QWORD)v119) >> 7) > v66)
                v66 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v120[8] - (_QWORD)v119) >> 7);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v120[8] - (_QWORD)v119) >> 7) >= 0x55555555555555)
                v67 = 0xAAAAAAAAAAAAAALL;
              else
                v67 = v66;
              if (v67)
              {
                if (v67 > 0xAAAAAAAAAAAAAALL)
                  sub_223174E94();
                v68 = (char *)operator new(384 * v67);
              }
              else
              {
                v68 = 0;
              }
              v69 = &v68[384 * v67];
              v70 = (char *)sub_22317FD80((uint64_t)&v68[384 * v65], (uint64_t)v128);
              v43 = (uint64_t)(v70 + 384);
              v72 = (uint64_t *)v119;
              v71 = *(uint64_t **)v120;
              if (*(void **)v120 != v119)
              {
                do
                {
                  v71 -= 48;
                  v70 = (char *)sub_22317FD80((uint64_t)(v70 - 384), (uint64_t)v71);
                }
                while (v71 != v72);
                v71 = (uint64_t *)v119;
                v73 = *(uint64_t **)v120;
                v119 = v70;
                *(_QWORD *)v120 = v43;
                *(_QWORD *)&v120[8] = v69;
                while (v73 != v71)
                {
                  v73 -= 48;
                  sub_22316F8F4(v73);
                }
                if (!v71)
                  goto LABEL_66;
LABEL_102:
                operator delete(v71);
                goto LABEL_66;
              }
              v119 = v70;
              *(_QWORD *)v120 = v70 + 384;
              *(_QWORD *)&v120[8] = v69;
              if (v71)
                goto LABEL_102;
            }
LABEL_66:
            *(_QWORD *)v120 = v43;
            sub_22316F8F4((uint64_t *)v128);
            v40 += 40;
          }
          while (v40 != v41);
        }
        sub_2241498F4((uint64_t)&v121, 0);
        sub_223674A94(&v121, (uint64_t *)&v119);
        v74 = (uint64_t *)v119;
        if (v119)
        {
          v75 = *(uint64_t **)v120;
          v76 = v119;
          if (*(void **)v120 != v119)
          {
            do
              v75 = sub_22316F8F4(v75 - 48);
            while (v75 != v74);
            v76 = v119;
          }
          *(_QWORD *)v120 = v74;
          operator delete(v76);
        }
        v119 = (void *)0x7365786F62;
        *(_QWORD *)v120 = v127[0];
        *(_QWORD *)&v120[7] = *(_QWORD *)((char *)v127 + 7);
        *(_WORD *)&v120[15] = 261;
        v127[0] = 0;
        *(_QWORD *)((char *)v127 + 7) = 0;
        sub_22329F414((uint64_t)&v121, (__int128 *)&v119, &v118, &v124);
        if (v120[16] && (v120[15] & 0x80000000) != 0)
          operator delete(v119);
        sub_22316F8F4((uint64_t *)&v121);
        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
        v78 = *(void **)v77;
        v79 = *(std::__shared_weak_count **)(v77 + 8);
        if (v79)
        {
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldxr(p_shared_owners);
          while (__stxr(v81 + 1, p_shared_owners));
        }
        v82 = v125;
        v83 = v126;
        *(_QWORD *)&v121 = &off_24EC6A3B8;
        *((_QWORD *)&v121 + 1) = v125;
        *(_QWORD *)&v122 = v126;
        v126 = 0;
        v125 = 0;
        v128[0] = v78;
        v128[1] = v79;
        if (v79)
        {
          v84 = (unint64_t *)&v79->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        *(_QWORD *)&v129 = &off_24EC6A3B8;
        *((_QWORD *)&v129 + 1) = v82;
        v130 = v83;
        if (v83)
        {
          v86 = (unint64_t *)&v83->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        (*(void (**)(uint64_t *, void **))(*v102 + 16))(v102, v128);
        v88 = v130;
        if (v130)
        {
          v89 = (unint64_t *)&v130->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = (std::__shared_weak_count *)v128[1];
        if (v128[1])
        {
          v92 = (unint64_t *)((char *)v128[1] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = (std::__shared_weak_count *)v122;
        if ((_QWORD)v122)
        {
          v95 = (unint64_t *)(v122 + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v79)
        {
          v97 = (unint64_t *)&v79->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v99 = v126;
        if (v126)
        {
          v100 = (unint64_t *)&v126->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((v115[23] & 0x80000000) == 0)
    {
LABEL_149:
      if ((SHIBYTE(v117) & 0x80000000) == 0)
        return;
LABEL_153:
      operator delete(v116);
      return;
    }
  }
  else
  {
LABEL_148:
    if ((v115[23] & 0x80000000) == 0)
      goto LABEL_149;
  }
  operator delete(*(void **)v115);
  if (SHIBYTE(v117) < 0)
    goto LABEL_153;
}

void sub_223673EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60)
{
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;

  sub_2241231D8(v61);
  v63 = (std::__shared_weak_count *)STACK[0x308];
  if (STACK[0x308])
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2241231D8((uint64_t)&a60);
  if (v60)
  {
    v66 = (unint64_t *)&v60->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x2D8]);
  sub_2231874DC((uint64_t)&a23);
  if (a33 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

void sub_223674168(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v11 = *(_QWORD *)(a4 + 16);
    }
    *(_QWORD *)&v9 = (uint64_t)(*a1 * 1000000000.0);
    *((_QWORD *)&v9 + 1) = 2;
    v8 = sub_2241471F8();
    sub_2232A6F44((uint64_t)v8, a2, a3, (uint64_t)__p, &v9);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
}

void sub_223674238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_223674254(_DWORD ***a1)
{
  return sub_223674270(**a1, (char *)(*a1)[1]);
}

void sub_223674260(uint64_t a1, uint64_t a2)
{
  sub_223674360((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223674270(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC570A0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223674360(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC570A0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223674514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223674558(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223674650((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223674648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223674650(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22367484C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223674860(uint64_t **a1, uint64_t a2, char a3, int32x2_t a4, int32x2_t a5)
{
  uint64_t *result;
  uint64_t v8;
  int32x2_t v9;
  unint64_t v10;
  float *v11;
  float *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v24;
  float *v25;
  float *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float *v37;

  result = *(uint64_t **)(a2 + 72);
  if (!result)
    return result;
  if ((a3 & 1) != 0)
  {
    a5.i32[0] = 1125515264;
    a4.i32[0] = 1125515264;
    v32 = a4;
    v33 = a4;
    v31 = a5;
  }
  else
  {
    v8 = sub_22456636C((unsigned __int8 *)a2);
    *(float *)v9.i32 = (float)(53 * v8 % 0xFFuLL) / 255.0;
    v32 = v9;
    *(float *)v9.i32 = (float)(211 * v8 % 0xFFuLL) / 255.0;
    v33 = v9;
    *(float *)v9.i32 = (float)(103 * v8 % 0xFFuLL) / 255.0;
    v31 = v9;
    result = *(uint64_t **)(a2 + 72);
  }
  sub_223EB2980((uint64_t)result, (unint64_t *)&v34);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v34) >> 2);
  v11 = v36;
  v12 = v37;
  v13 = 0xAAAAAAAAAAAAAAABLL * (v37 - v36);
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      v12 = &v36[(v35 - v34) >> 2];
      v37 = v12;
    }
  }
  else
  {
    sub_22317EF30((uint64_t)&v36, v10 - v13);
    v11 = v36;
    v12 = v37;
  }
  v14 = (char *)v12 - (char *)v11;
  if ((char *)v12 - (char *)v11 >= 1)
  {
    v15 = v14 / 0xC;
    v16 = v14 / 0xC - (v14 > 0xB) + 1;
    if (v16 < 8)
    {
      v17 = v11;
      v19 = v32.i32[0];
      v18 = v33.i32[0];
      v20 = v31.i32[0];
LABEL_15:
      v27 = v15 + 1;
      do
      {
        *(_DWORD *)v17 = v19;
        *((_DWORD *)v17 + 1) = v18;
        *((_DWORD *)v17 + 2) = v20;
        --v27;
        v17 += 3;
      }
      while (v27 > 1);
      goto LABEL_17;
    }
    v15 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v21 = vdupq_lane_s32(v32, 0);
    v17 = &v11[3 * (v16 & 0xFFFFFFFFFFFFFFF8)];
    v22 = vdupq_lane_s32(v33, 0);
    v23 = vdupq_lane_s32(v31, 0);
    v24 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v25 = v11 + 24;
      vst3q_f32(v11, *(float32x4x3_t *)v21.i8);
      v26 = v11 + 12;
      vst3q_f32(v26, *(float32x4x3_t *)v21.i8);
      v11 = v25;
      v24 -= 8;
    }
    while (v24);
    v19 = v32.i32[0];
    v18 = v33.i32[0];
    v20 = v31.i32[0];
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_15;
  }
LABEL_17:
  v28 = *a1;
  v29 = v28[1];
  if (v29 >= v28[2])
    v30 = sub_2235343FC(v28, (uint64_t)&v34);
  else
    v30 = sub_22317FD80(v29, (uint64_t)&v34) + 384;
  v28[1] = v30;
  return sub_22316F8F4(&v34);
}

void sub_223674A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_223674A94(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v20 = (uint64_t)(a1 + 40);
  v4 = (uint64_t)(a1[41] - a1[40]) >> 2;
  v19 = (uint64_t)(a1 + 4);
  v5 = (uint64_t)(a1 + 9);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 2);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[10] - a1[9]) >> 2);
  v8 = (uint64_t)(a1 + 30);
  v9 = (uint64_t)(a1 + 14);
  v10 = a1[31] - a1[30];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[15] - a1[14]) >> 2);
  v18 = (uint64_t)(a1 + 35);
  v12 = a1[36] - a1[35];
  v13 = (_QWORD *)*a2;
  v14 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v14)
  {
    do
    {
      v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[1] - *v13) >> 2) + v3;
      v4 = ((uint64_t)(v13[41] - v13[40]) >> 2) + v4;
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[5] - v13[4]) >> 2) + v6;
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[10] - v13[9]) >> 2) + v7;
      v10 = v13[31] + v10 - v13[30];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[15] - v13[14]) >> 2) + v11;
      v12 = v13[36] + v12 - v13[35];
      v13 += 48;
    }
    while (v13 != v14);
  }
  sub_22339E3C8((uint64_t)a1, v3);
  sub_223674C80(v20, v4);
  sub_22339E3C8(v19, v6);
  sub_22339E3C8(v5, v7);
  sub_223674E10(v8, v10);
  sub_22339E528(v9, v11);
  result = sub_223674E10(v18, v12);
  v17 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      result = sub_22414E9E0((uint64_t)a1, v17);
      v17 += 384;
    }
    while (v17 != v16);
  }
  return result;
}

uint64_t sub_223674C80(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v2 = *(_QWORD *)result;
  if (a2 <= (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2)
    return result;
  v3 = result;
  if (a2 >> 62)
    sub_22316E078();
  v4 = *(_QWORD *)(result + 8);
  LODWORD(v25) = a2;
  v5 = *(unsigned int *)(result + 28);
  if ((_DWORD)v5 == -1)
    sub_22316DD70();
  v6 = v4 - v2;
  v23 = &v25;
  result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC57128[v5])(&v23, result + 24);
  v8 = result + (v6 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = *(_QWORD ***)v3;
  v10 = *(_QWORD ***)(v3 + 8);
  v11 = v8;
  if (v10 != *(_QWORD ***)v3)
  {
    v12 = (unint64_t)v10 - *(_QWORD *)v3 - 4;
    if (v12 < 0x2C)
    {
      v11 = result + (v6 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
LABEL_11:
        v20 = *((_DWORD *)v10 - 1);
        v10 = (_QWORD **)((char *)v10 - 4);
        *(_DWORD *)(v11 - 4) = v20;
        v11 -= 4;
      }
      while (v10 != v9);
      goto LABEL_12;
    }
    v11 = result + (v6 & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v10 - (v6 & 0xFFFFFFFFFFFFFFFCLL) - result < 0x20)
      goto LABEL_11;
    v13 = (v12 >> 2) + 1;
    v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
    v15 = (_QWORD **)((char *)v10 - v14);
    v11 = v8 - v14;
    v16 = (_OWORD *)(result + 4 * (v6 >> 2) - 16);
    v17 = (__int128 *)(v10 - 2);
    v18 = v13 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19 = *v17;
      *(v16 - 1) = *(v17 - 1);
      *v16 = v19;
      v16 -= 2;
      v17 -= 2;
      v18 -= 8;
    }
    while (v18);
    v10 = v15;
    if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_11;
  }
LABEL_12:
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v8;
  v21 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 4 * v7;
  if (v9)
  {
    v23 = v9;
    v24 = (unint64_t)(v21 - (_QWORD)v9) >> 2;
    v22 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v22 == -1)
      sub_22316DD70();
    v25 = &v23;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC57068[v22])(&v25, v3 + 24);
  }
  return result;
}

uint64_t sub_223674E10(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _OWORD *v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _QWORD **v22;
  int v23;
  _QWORD *v24;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)(result + 16) - *(_QWORD *)result >= a2)
    return result;
  v3 = result;
  if ((a2 & 0x8000000000000000) != 0)
    sub_22316E078();
  v4 = *(_QWORD *)(result + 8);
  LODWORD(v24) = a2;
  v5 = *(unsigned int *)(result + 28);
  if ((_DWORD)v5 == -1)
    sub_22316DD70();
  v6 = v4 - v2;
  v22 = &v24;
  result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC57118[v5])(&v22, result + 24);
  v7 = result + v4 - v2;
  v9 = result + v8;
  v10 = *(_QWORD ***)v3;
  v11 = *(_QWORD ***)(v3 + 8);
  v12 = (unint64_t)v11 - *(_QWORD *)v3;
  if (v11 != *(_QWORD ***)v3)
  {
    if (v12 >= 0x20)
    {
      v13 = result + v6;
      if ((unint64_t)v11 + v2 - v4 - result >= 0x20)
      {
        v15 = (_QWORD **)((char *)v11 - (v12 & 0xFFFFFFFFFFFFFFE0));
        v13 = v7 - (v12 & 0xFFFFFFFFFFFFFFE0);
        v16 = (_OWORD *)(v6 + result - 16);
        v17 = (__int128 *)(v11 - 2);
        v18 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 -= 2;
          v17 -= 2;
          v18 -= 32;
        }
        while (v18);
        v11 = v15;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_14:
          v11 = *(_QWORD ***)v3;
          *(_QWORD *)v3 = v13;
          *(_QWORD *)(v3 + 8) = v7;
          v14 = *(_QWORD *)(v3 + 16);
          *(_QWORD *)(v3 + 16) = v9;
          if (!v11)
            return result;
          goto LABEL_15;
        }
      }
    }
    else
    {
      v13 = result + v6;
    }
    do
    {
      v20 = *((_BYTE *)v11 - 1);
      v11 = (_QWORD **)((char *)v11 - 1);
      *(_BYTE *)--v13 = v20;
    }
    while (v11 != v10);
    goto LABEL_14;
  }
  *(_QWORD *)v3 = v7;
  *(_QWORD *)(v3 + 8) = v7;
  v14 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v9;
  if (!v11)
    return result;
LABEL_15:
  v22 = v11;
  v23 = v14 - (_DWORD)v11;
  v21 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v21 == -1)
    sub_22316DD70();
  v24 = &v22;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC57078[v21])(&v24, v3 + 24);
}

std::string *sub_223674FA0(std::string *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::string::size_type size;
  char v5;
  std::string *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  uint64_t *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  uint64_t v26;
  unint64_t v27;
  char **v28;
  const char *v29;
  uint64_t v30;
  int v31;
  std::string::size_type v32;
  void *p_dst;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  std::string::size_type v64;
  _BYTE *v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  std::string::size_type v72;
  char v73;
  std::string *p_p;
  std::string *v75;
  char v76;
  std::string *v77;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  size_t v81;
  unint64_t v82;
  std::string *v83;
  size_t v84;
  std::string *v85;
  std::string::size_type v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unsigned __int8 *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  std::string *v103;
  std::string v104;
  std::string __p;
  std::string v106;
  std::string v107;
  int v108;
  std::string __dst;
  __int128 *v110;
  __int128 v111;
  std::string *v112;
  std::string *v113;
  std::string *v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  result->__r_.__value_.__r.__words[0] = 0;
  result->__r_.__value_.__l.__size_ = 0;
  v103 = result;
  result->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v3 = a2;
    v99 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v100 = *MEMORY[0x24BEDB7F0];
    v98 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v97 = MEMORY[0x24BEDB848] + 16;
    do
    {
      LODWORD(v113) = 0;
      sub_22319B83C((uint64_t)&v104, (uint64_t)&v111, (unsigned __int8 *)v3);
      if ((_DWORD)v113 == -1)
        sub_22316DD70();
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
      ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC570B8[v113])(&__p, &v104, &v111);
      if ((_DWORD)v113 != -1)
        ((void (*)(std::string *, __int128 *))off_24EC570A0[v113])(&v104, &v111);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 4)
        size = 4;
      v106 = __p;
      memset(&__p, 0, sizeof(__p));
      if (v5 < 0)
      {
        v106.__r_.__value_.__l.__size_ = size;
        v6 = (std::string *)v106.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v106.__r_.__value_.__s + 23) = size;
        v6 = &v106;
      }
      v6->__r_.__value_.__s.__data_[size] = 0;
      v7 = std::string::insert(&v106, 0, "id: ", 4uLL);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&__dst, "\n", 1uLL);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v107;
      else
        v11 = (std::string *)v107.__r_.__value_.__r.__words[0];
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      else
        v12 = v107.__r_.__value_.__l.__size_;
      std::string::append(v103, (const std::string::value_type *)v11, v12);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v107.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_36;
          goto LABEL_22;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_36:
        operator delete(v106.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_37;
      }
LABEL_22:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
LABEL_37:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
      v106.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 4;
      sub_223425184((unint64_t *)&v106);
      v13 = std::string::insert(&__dst, 0, "kfs: ", 5uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v107, "\n", 1uLL);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v112 = (std::string *)v15->__r_.__value_.__r.__words[2];
      v111 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v112) >= 0)
        v17 = (const std::string::value_type *)&v111;
      else
        v17 = (const std::string::value_type *)v111;
      if (SHIBYTE(v112) >= 0)
        v18 = HIBYTE(v112);
      else
        v18 = *((_QWORD *)&v111 + 1);
      std::string::append(v103, v17, v18);
      if (SHIBYTE(v112) < 0)
      {
        operator delete((void *)v111);
        if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_40;
          goto LABEL_32;
        }
      }
      else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(v107.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_40:
        operator delete(__dst.__r_.__value_.__l.__data_);
        v19 = *(uint64_t **)(v3 + 72);
        if (!v19)
          goto LABEL_53;
LABEL_41:
        v104.__r_.__value_.__r.__words[0] = sub_223B7EE5C(v19);
        LODWORD(v113) = 0;
        sub_2233B45E8((uint64_t)&__p, (uint64_t)&v111, (double *)&v104);
        if ((_DWORD)v113 == -1)
          sub_22316DD70();
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC570B8[v113])(&v106, &__p, &v111);
        if ((_DWORD)v113 != -1)
          ((void (*)(std::string *, __int128 *))off_24EC570A0[v113])(&__p, &v111);
        v20 = std::string::insert(&v106, 0, "area: ", 6uLL);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        v22 = std::string::append(&__dst, "\n", 1uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v107;
        else
          v24 = (std::string *)v107.__r_.__value_.__r.__words[0];
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
        else
          v25 = v107.__r_.__value_.__l.__size_;
        std::string::append(v103, (const std::string::value_type *)v24, v25);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v107.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_53;
LABEL_208:
          operator delete(v106.__r_.__value_.__l.__data_);
          goto LABEL_53;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_53;
        goto LABEL_208;
      }
LABEL_32:
      v19 = *(uint64_t **)(v3 + 72);
      if (v19)
        goto LABEL_41;
LABEL_53:
      v108 = 0;
      v26 = operator new();
      *(_QWORD *)(v26 + 272) = 0;
      *(_OWORD *)(v26 + 240) = 0u;
      *(_OWORD *)(v26 + 256) = 0u;
      *(_OWORD *)(v26 + 208) = 0u;
      *(_OWORD *)(v26 + 224) = 0u;
      *(_OWORD *)(v26 + 176) = 0u;
      *(_OWORD *)(v26 + 192) = 0u;
      *(_OWORD *)(v26 + 144) = 0u;
      *(_OWORD *)(v26 + 160) = 0u;
      *(_OWORD *)(v26 + 112) = 0u;
      *(_OWORD *)(v26 + 128) = 0u;
      *(_OWORD *)(v26 + 80) = 0u;
      *(_OWORD *)(v26 + 96) = 0u;
      *(_OWORD *)(v26 + 48) = 0u;
      *(_OWORD *)(v26 + 64) = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_OWORD *)(v26 + 32) = 0u;
      *(_OWORD *)v26 = 0u;
      sub_223195210(v26);
      *(_QWORD *)&v111 = v26;
      v27 = *(unsigned __int8 *)(v3 + 16);
      if (v27 > 2)
      {
        v30 = 7;
        v29 = "invalid";
      }
      else
      {
        v28 = &(&off_24EC57138)[2 * v27];
        v29 = *v28;
        v30 = (uint64_t)v28[1];
      }
      sub_2231813E8((_QWORD *)(v26 + 16), (uint64_t)v29, v30);
      v31 = *(_DWORD *)(v26 + 120);
      if ((v31 & 0x10) != 0)
      {
        v34 = *(_QWORD *)(v26 + 112);
        v35 = *(_QWORD *)(v26 + 72);
        if (v34 < v35)
        {
          *(_QWORD *)(v26 + 112) = v35;
          v34 = v35;
        }
        v36 = *(const void **)(v26 + 64);
        v32 = v34 - (_QWORD)v36;
        if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
LABEL_219:
          sub_22316DBC0();
      }
      else
      {
        if ((v31 & 8) == 0)
        {
          v32 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_71;
        }
        v36 = *(const void **)(v26 + 40);
        v32 = *(_QWORD *)(v26 + 56) - (_QWORD)v36;
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_219;
      }
      if (v32 >= 0x17)
      {
        v37 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v37 = v32 | 7;
        v38 = v37 + 1;
        p_dst = operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v32;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_70:
        memmove(p_dst, v36, v32);
        goto LABEL_71;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
      p_dst = &__dst;
      if (v32)
        goto LABEL_70;
LABEL_71:
      *((_BYTE *)p_dst + v32) = 0;
      v39 = v111;
      if ((_QWORD)v111)
      {
        *(_QWORD *)v111 = v100;
        *(_QWORD *)(v39 + *(_QWORD *)(v100 - 24)) = v99;
        *(_QWORD *)(v39 + 24) = MEMORY[0x24BEDB848] + 16;
        *(_QWORD *)(v39 + 16) = v98;
        if (*(char *)(v39 + 111) < 0)
          operator delete(*(void **)(v39 + 88));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x227684BE0](v39 + 128);
        MEMORY[0x227684CE8](v39, 0x10B2C40EED050F3);
      }
      *(_QWORD *)&v111 = &v107;
      *((_QWORD *)&v111 + 1) = &__dst;
      v112 = &v107;
      v113 = &__dst;
      v114 = &__dst;
      if (v108 == -1)
        sub_22316DD70();
      v110 = &v111;
      ((void (*)(__int128 **, std::string *))off_24EC57088[v108])(&v110, &v107);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v108 == -1)
        sub_22316DD70();
      *(_QWORD *)&v111 = &__dst;
      ((void (*)(std::string *__return_ptr, __int128 *, std::string *))off_24EC570B8[v108])(&v104, &v111, &v107);
      if (v108 != -1)
        ((void (*)(__int128 *, std::string *))off_24EC570A0[v108])(&v111, &v107);
      v40 = std::string::insert(&v104, 0, "io_type: ", 9uLL);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v42 = std::string::append(&__p, "\n", 1uLL);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v106;
      else
        v44 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v45 = v106.__r_.__value_.__l.__size_;
      std::string::append(v103, (const std::string::value_type *)v44, v45);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_198:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_90;
          goto LABEL_199;
        }
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_198;
      }
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_199:
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_90:
      LODWORD(v113) = 0;
      sub_223208764((uint64_t)&__p, (uint64_t)&v111, (float *)(v3 + 344));
      if ((_DWORD)v113 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC570B8[v113])(&v106, &__p, &v111);
      if ((_DWORD)v113 != -1)
        ((void (*)(std::string *, __int128 *))off_24EC570A0[v113])(&__p, &v111);
      v46 = std::string::insert(&v106, 0, "completeness: ", 0xEuLL);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&__dst, "\n", 1uLL);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v107;
      else
        v50 = (std::string *)v107.__r_.__value_.__r.__words[0];
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      else
        v51 = v107.__r_.__value_.__l.__size_;
      std::string::append(v103, (const std::string::value_type *)v50, v51);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_201:
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_102;
          goto LABEL_202;
        }
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_201;
      }
      if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_102;
LABEL_202:
      operator delete(v106.__r_.__value_.__l.__data_);
LABEL_102:
      LODWORD(v113) = 0;
      sub_223208764((uint64_t)&__p, (uint64_t)&v111, (float *)(v3 + 352));
      if ((_DWORD)v113 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC570B8[v113])(&v106, &__p, &v111);
      if ((_DWORD)v113 != -1)
        ((void (*)(std::string *, __int128 *))off_24EC570A0[v113])(&__p, &v111);
      v52 = std::string::insert(&v106, 0, "volume_change: ", 0xFuLL);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&__dst, "\n", 1uLL);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v107;
      else
        v56 = (std::string *)v107.__r_.__value_.__r.__words[0];
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      else
        v57 = v107.__r_.__value_.__l.__size_;
      std::string::append(v103, (const std::string::value_type *)v56, v57);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v107.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_205;
          goto LABEL_114;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_113;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
LABEL_205:
        operator delete(v106.__r_.__value_.__l.__data_);
LABEL_114:
      std::string::append(v103, "kfs contribution: ", 0x12uLL);
      v58 = *(unsigned __int8 **)(v3 + 24);
      v59 = *(_QWORD *)(v3 + 48);
      v95 = v3;
      v96 = *(_QWORD *)(v3 + 56);
      v101 = *(unsigned __int8 **)(v3 + 32);
      if (v58 != v101 || v59 != v96)
      {
        v60 = v59 + 4;
        while (1)
        {
          v61 = v60;
          v108 = 0;
          v62 = operator new();
          *(_QWORD *)(v62 + 272) = 0;
          *(_OWORD *)(v62 + 240) = 0u;
          *(_OWORD *)(v62 + 256) = 0u;
          *(_OWORD *)(v62 + 208) = 0u;
          *(_OWORD *)(v62 + 224) = 0u;
          *(_OWORD *)(v62 + 176) = 0u;
          *(_OWORD *)(v62 + 192) = 0u;
          *(_OWORD *)(v62 + 144) = 0u;
          *(_OWORD *)(v62 + 160) = 0u;
          *(_OWORD *)(v62 + 112) = 0u;
          *(_OWORD *)(v62 + 128) = 0u;
          *(_OWORD *)(v62 + 80) = 0u;
          *(_OWORD *)(v62 + 96) = 0u;
          *(_OWORD *)(v62 + 48) = 0u;
          *(_OWORD *)(v62 + 64) = 0u;
          *(_OWORD *)(v62 + 16) = 0u;
          *(_OWORD *)(v62 + 32) = 0u;
          *(_OWORD *)v62 = 0u;
          sub_223195210(v62);
          v110 = (__int128 *)v62;
          sub_2245664AC(v58, &v111);
          sub_2231813E8((_QWORD *)(v62 + 16), (uint64_t)&v111, 36);
          v63 = *(_DWORD *)(v62 + 120);
          if ((v63 & 0x10) != 0)
          {
            v66 = *(_QWORD *)(v62 + 112);
            v67 = *(_QWORD *)(v62 + 72);
            if (v66 < v67)
            {
              *(_QWORD *)(v62 + 112) = v67;
              v66 = v67;
            }
            v68 = *(const void **)(v62 + 64);
            v64 = v66 - (_QWORD)v68;
            if (v66 - (unint64_t)v68 > 0x7FFFFFFFFFFFFFF7)
LABEL_212:
              sub_22316DBC0();
          }
          else
          {
            if ((v63 & 8) == 0)
            {
              v64 = 0;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
              v65 = &__dst;
              goto LABEL_136;
            }
            v68 = *(const void **)(v62 + 40);
            v64 = *(_QWORD *)(v62 + 56) - (_QWORD)v68;
            if (v64 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_212;
          }
          if (v64 >= 0x17)
            break;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v64;
          v65 = &__dst;
          if (v64)
            goto LABEL_135;
LABEL_136:
          v65[v64] = 0;
          v71 = v110;
          if (v110)
          {
            *(_QWORD *)v110 = v100;
            *(_QWORD *)((char *)v71 + *(_QWORD *)(v100 - 24)) = v99;
            *((_QWORD *)v71 + 3) = v97;
            *((_QWORD *)v71 + 2) = v98;
            if (*((char *)v71 + 111) < 0)
              operator delete(*((void **)v71 + 11));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x227684BE0](v71 + 8);
            MEMORY[0x227684CE8](v71, 0x10B2C40EED050F3);
          }
          *(_QWORD *)&v111 = &v107;
          *((_QWORD *)&v111 + 1) = &__dst;
          v112 = &v107;
          v113 = &__dst;
          v114 = &__dst;
          if (v108 == -1)
            sub_22316DD70();
          v110 = &v111;
          ((void (*)(__int128 **, std::string *))off_24EC57088[v108])(&v110, &v107);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (v108 == -1)
            sub_22316DD70();
          *(_QWORD *)&v111 = &__dst;
          ((void (*)(std::string *__return_ptr, __int128 *, std::string *))off_24EC570B8[v108])(&v104, &v111, &v107);
          if (v108 != -1)
            ((void (*)(__int128 *, std::string *))off_24EC570A0[v108])(&v111, &v107);
          v72 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          v73 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v72 = v104.__r_.__value_.__l.__size_;
          if (v72 >= 4)
            v72 = 4;
          __p = v104;
          memset(&v104, 0, sizeof(v104));
          if (v73 < 0)
          {
            __p.__r_.__value_.__l.__size_ = v72;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v72;
            p_p = &__p;
          }
          p_p->__r_.__value_.__s.__data_[v72] = 0;
          v75 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_22456D250("%s-%3.2f, ", &v106, v75, *(float *)(v61 - 4));
          v102 = v58;
          v76 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v106;
          else
            v77 = (std::string *)v106.__r_.__value_.__r.__words[0];
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
          else
            v78 = v106.__r_.__value_.__l.__size_;
          v79 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
          {
            v81 = v103->__r_.__value_.__l.__size_;
            v80 = (v103->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v80 - v81 < v78)
            {
LABEL_163:
              v82 = v81 + v78;
              if (0x7FFFFFFFFFFFFFF6 - v80 < v81 + v78 - v80)
                sub_22316DBC0();
              v83 = v103;
              if ((v79 & 0x80) != 0)
              {
                v83 = (std::string *)v103->__r_.__value_.__r.__words[0];
                v84 = 0x7FFFFFFFFFFFFFF7;
                if (v80 > 0x3FFFFFFFFFFFFFF2)
                {
LABEL_182:
                  v91 = (char *)operator new(v84);
                  v92 = v91;
                  if (v81)
                    memmove(v91, v83, v81);
                  memcpy(&v92[v81], v77, v78);
                  if (v80 != 22)
                    operator delete(v83);
                  v103->__r_.__value_.__l.__size_ = v82;
                  v103->__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
                  v103->__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
                  v87 = &v92[v82];
LABEL_187:
                  *v87 = 0;
                  v76 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
                  goto LABEL_188;
                }
              }
              else
              {
                v84 = 0x7FFFFFFFFFFFFFF7;
                if (v80 > 0x3FFFFFFFFFFFFFF2)
                  goto LABEL_182;
              }
              v88 = 2 * v80;
              if (v82 > 2 * v80)
                v88 = v81 + v78;
              if (v88 >= 0x17)
              {
                v89 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
                v90 = v88 | 7;
                if (v90 == 23)
                  v90 = v89;
                v84 = v90 + 1;
              }
              else
              {
                v84 = 23;
              }
              goto LABEL_182;
            }
          }
          else
          {
            v80 = 22;
            v81 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
            if (22 - v79 < v78)
              goto LABEL_163;
          }
          if (v78)
          {
            v85 = v103;
            if ((v79 & 0x80) != 0)
              v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
            memmove((char *)v85 + v81, v77, v78);
            v86 = v81 + v78;
            if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
              v103->__r_.__value_.__l.__size_ = v86;
            else
              *((_BYTE *)&v103->__r_.__value_.__s + 23) = v86 & 0x7F;
            v87 = (char *)v85 + v86;
            goto LABEL_187;
          }
LABEL_188:
          if (v76 < 0)
          {
            operator delete(v106.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_193;
LABEL_190:
            v93 = v102;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_119;
LABEL_194:
            v58 = v93 + 16;
            v60 = v61 + 4;
            if (v58 == v101)
              goto LABEL_120;
          }
          else
          {
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_190;
LABEL_193:
            operator delete(__p.__r_.__value_.__l.__data_);
            v93 = v102;
            if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_194;
LABEL_119:
            operator delete(v104.__r_.__value_.__l.__data_);
            v58 = v93 + 16;
            v60 = v61 + 4;
            if (v58 == v101)
            {
LABEL_120:
              if (v61 == v96)
                goto LABEL_116;
            }
          }
        }
        v69 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v64 | 7) != 0x17)
          v69 = v64 | 7;
        v70 = v69 + 1;
        v65 = operator new(v69 + 1);
        __dst.__r_.__value_.__l.__size_ = v64;
        __dst.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
LABEL_135:
        memmove(v65, v68, v64);
        goto LABEL_136;
      }
LABEL_116:
      result = std::string::append(v103, "\n\n", 2uLL);
      v3 = v95 + 360;
    }
    while (v95 + 360 != a3);
  }
  return result;
}

void sub_223675F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22367629C(__n128 a1, float a2, float a3, float a4, double a5, float a6)
{
  uint64_t result;
  _BYTE v7[24];
  int v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  int v12;
  __n128 *v13;
  int v14;
  __n128 v15;
  double v16;
  _QWORD v17[5];
  _QWORD *v18;

  v8 = 0;
  a1.n128_f32[1] = a2;
  a1.n128_u64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v15 = a1;
  *((float *)&a5 + 1) = a6;
  v16 = a5;
  v11 = 0x600000001;
  v12 = 1;
  v13 = &v15;
  v14 = 0;
  sub_224505D70((unsigned int *)&v11, __p);
  v17[0] = v7;
  v17[1] = __p;
  v17[2] = v7;
  v17[3] = __p;
  v17[4] = __p;
  v18 = v17;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v18, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 == -1)
    sub_22316DD70();
  v17[0] = &v11;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC570B8[v8])(v17, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC570A0[v8])(v17, v7);
  return result;
}

void sub_2236763C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236763D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236763FC(float32x2_t **a1, float **a2)
{
  float32x2_t *v2;
  float v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v2 = *a1;
  v3 = (float)((*a1)[3].f32[0] - (*a1)[4].f32[1]) * 0.5;
  v4 = *a2;
  *v4 = v3;
  v5 = (float)(v2[4].f32[0] - v2[1].f32[0]) * 0.5;
  v4[1] = v5;
  v6 = (float)(v2->f32[1] - v2[2].f32[0]) * 0.5;
  v4[2] = v6;
  v7 = v2->f32[0];
  v8 = v2[2].f32[1];
  v9 = v2[5].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(v2->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v3 * v3) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(v2->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *v4 = v3 * v16;
    v4[1] = v5 * v16;
    v4[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      v4[2] = v33;
      v34.i32[0] = v2[1].i32[0];
      v34.i32[1] = v2[3].i32[0];
      *(float32x2_t *)v4 = vmul_n_f32(vmul_n_f32(vadd_f32(v2[4], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      v4[1] = v27;
      v28 = 1.0 / v27;
      v29 = v2[4].f32[1] + v2[3].f32[0];
      *v4 = v28 * (float)(v26 * (float)(v2[2].f32[0] + v2->f32[1]));
      v4[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(v2[4].f32[0] + v2[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      v4[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(v2[4].f32[1] + v2[3].f32[0]));
      *v4 = v31 * v23;
      v4[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v3 < 0.0)
        v24 = -v24;
      *v4 = v24;
      v25 = 1.0 / v24;
      v4[1] = v25 * (float)(v22 * (float)(v2[2].f32[0] + v2->f32[1]));
      v4[2] = v25 * v23;
    }
  }
}

double sub_22367670C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double result;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  result = a4 - *(double *)(a1 + 16);
  if (result > *(float *)a1)
  {
    *(double *)(a1 + 16) = a4;
    v8 = *(_QWORD *)(a1 + 120);
    if (!v8)
    {
      if (*(_BYTE *)(a3 + 64))
      {
        v13 = *(float *)(a3 + 56);
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (double)v14;
        v16 = *(double *)(a1 + 72) * (double)v14;
        *(double *)(a1 + 72) = v16;
        v17 = *(_QWORD *)(a1 + 24);
        v18 = (*(_QWORD *)(a1 + 32) - v17) >> 3;
        if (v14 >= v18)
        {
          v19 = *(_QWORD *)(a1 + 56);
          if (!v19)
            v19 = (*(_QWORD *)(a1 + 32) - v17) >> 3;
          *(double *)(a1 + 72) = v16 - *(double *)(v17 + 8 * v19 - 8);
        }
        v20 = *(_QWORD *)(a1 + 48);
        if (!v20)
          v20 = v18;
        v21 = v20 - 1;
        *(_QWORD *)(a1 + 48) = v21;
        *(double *)(v17 + 8 * v21) = v13;
        if (v14 == v18)
        {
          if (*(_QWORD *)(a1 + 56))
            v14 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v14 - 1;
        }
        else
        {
          v32 = v14 + 1;
          *(_QWORD *)(a1 + 64) = v32;
          v15 = (double)v32;
        }
        *(double *)(a1 + 72) = (*(double *)(a1 + 72) + v13) / v15;
      }
      v24 = *(float *)(a2 + 56);
      v22 = (double *)(a1 + 128);
      v25 = 0.0;
      v33 = *(double *)(a1 + 128) * 0.0;
      *(double *)(a1 + 128) = v33;
      v34 = *(_QWORD *)(a1 + 80);
      v35 = (*(_QWORD *)(a1 + 88) - v34) >> 3;
      if (*(_QWORD *)(a1 + 88) == v34)
      {
        v37 = *(_QWORD *)(a1 + 112);
        if (v37)
          v38 = *(_QWORD *)(a1 + 112);
        else
          v38 = (*(_QWORD *)(a1 + 88) - v34) >> 3;
        if (*(_QWORD *)(a1 + 104))
          v35 = *(_QWORD *)(a1 + 104);
        *(double *)(a1 + 128) = v33 - *(double *)(v34 + 8 * v38 - 8);
        v39 = v35 - 1;
        *(double *)(v34 + 8 * v39) = v24;
        *(_QWORD *)(a1 + 104) = v39;
        *(_QWORD *)(a1 + 112) = v37 - 1;
      }
      else
      {
        if (*(_QWORD *)(a1 + 104))
          v35 = *(_QWORD *)(a1 + 104);
        v36 = v35 - 1;
        *(_QWORD *)(a1 + 104) = v36;
        *(double *)(v34 + 8 * v36) = v24;
        *(_QWORD *)(a1 + 120) = 1;
        v25 = 1.0;
      }
      goto LABEL_68;
    }
    if (*(_BYTE *)(a3 + 64))
    {
      v9 = *(float *)(a3 + 56);
      if (a4 - *(double *)(a1 + 8) > 10.0 && *(_QWORD *)(a1 + 64))
      {
        v10 = v9 - *(double *)(a1 + 72);
        v11 = *(float *)(a2 + 56) - *(double *)(a1 + 128);
        if (v10 < 0.0)
        {
          v10 = -v10;
          v11 = -v11;
        }
        v12 = v10 - v11;
        if (v12 >= v10)
          v12 = v10;
        if (v12 <= 2.0)
        {
          if (v12 > 0.15)
          {
            sub_223676B24(a4);
            *(double *)(a1 + 8) = a4;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 120) = 0u;
          *(_OWORD *)(a1 + 104) = 0u;
        }
      }
      v40 = v9;
      v41 = *(_QWORD *)(a1 + 64);
      v42 = (double)v41;
      v43 = *(double *)(a1 + 72) * (double)v41;
      *(double *)(a1 + 72) = v43;
      v44 = *(_QWORD *)(a1 + 24);
      v45 = (*(_QWORD *)(a1 + 32) - v44) >> 3;
      if (v41 >= v45)
      {
        v46 = *(_QWORD *)(a1 + 56);
        if (!v46)
          v46 = (*(_QWORD *)(a1 + 32) - v44) >> 3;
        *(double *)(a1 + 72) = v43 - *(double *)(v44 + 8 * v46 - 8);
      }
      v47 = *(_QWORD *)(a1 + 48);
      if (!v47)
        v47 = v45;
      v48 = v47 - 1;
      *(_QWORD *)(a1 + 48) = v48;
      *(double *)(v44 + 8 * v48) = v40;
      if (v41 == v45)
      {
        if (*(_QWORD *)(a1 + 56))
          v41 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v41 - 1;
      }
      else
      {
        v49 = v41 + 1;
        *(_QWORD *)(a1 + 64) = v49;
        v42 = (double)v49;
      }
      v22 = (double *)(a1 + 128);
      v50 = *(double *)(a1 + 128);
      *(double *)(a1 + 72) = (*(double *)(a1 + 72) + v40) / v42;
      v24 = *(float *)(a2 + 56);
      v8 = *(_QWORD *)(a1 + 120);
      v25 = (double)v8;
      v51 = v50 * (double)v8;
      *(double *)(a1 + 128) = v51;
      v52 = *(_QWORD *)(a1 + 80);
      v53 = (*(_QWORD *)(a1 + 88) - v52) >> 3;
      if (v8 >= v53)
      {
        v54 = *(_QWORD *)(a1 + 112);
        if (!v54)
          v54 = (*(_QWORD *)(a1 + 88) - v52) >> 3;
        *(double *)(a1 + 128) = v51 - *(double *)(v52 + 8 * v54 - 8);
      }
      v55 = *(_QWORD *)(a1 + 104);
      if (!v55)
        v55 = v53;
      v56 = v55 - 1;
      *(_QWORD *)(a1 + 104) = v56;
      *(double *)(v52 + 8 * v56) = v24;
      if (v8 == v53)
      {
LABEL_64:
        if (*(_QWORD *)(a1 + 112))
          v8 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v8 - 1;
        goto LABEL_68;
      }
    }
    else
    {
      v22 = (double *)(a1 + 128);
      v23 = *(double *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      v24 = *(float *)(a2 + 56);
      v25 = (double)v8;
      v26 = v23 * (double)v8;
      *(double *)(a1 + 128) = v26;
      v27 = *(_QWORD *)(a1 + 80);
      v28 = (*(_QWORD *)(a1 + 88) - v27) >> 3;
      if (v8 >= v28)
      {
        v29 = *(_QWORD *)(a1 + 112);
        if (!v29)
          v29 = (*(_QWORD *)(a1 + 88) - v27) >> 3;
        *(double *)(a1 + 128) = v26 - *(double *)(v27 + 8 * v29 - 8);
      }
      v30 = *(_QWORD *)(a1 + 104);
      if (!v30)
        v30 = v28;
      v31 = v30 - 1;
      *(_QWORD *)(a1 + 104) = v31;
      *(double *)(v27 + 8 * v31) = v24;
      if (v8 == v28)
        goto LABEL_64;
    }
    v57 = v8 + 1;
    *(_QWORD *)(a1 + 120) = v57;
    v25 = (double)v57;
LABEL_68:
    result = (*v22 + v24) / v25;
    *v22 = result;
  }
  return result;
}

void sub_223676B24(double a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  std::string *v4;
  __int128 v5;
  void *v6;
  void **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::string::size_type size;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  int v20;
  unsigned __int8 v23;
  unsigned __int8 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string v36;
  void *v37[2];
  int64_t v38;
  __int128 v39;
  double valuePtr;
  __int128 v41;
  void *__p[2];
  char v43;
  _BYTE v44[32];
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  valuePtr = a1;
  *(_OWORD *)&v44[8] = 0uLL;
  *(_QWORD *)v44 = &v44[8];
  sub_2245314F4(v44, __p);
  v39 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)v44, *(char **)&v44[8]);
  v44[23] = 20;
  strcpy(v44, "floor_jump_timestamp");
  sub_224527BAC((uint64_t)v44, (CFStringRef *)__p);
  sub_2236772E4((uint64_t)&v39, __p[0], &valuePtr);
  v1 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_5;
  v2 = (unint64_t *)((char *)__p[1] + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (v3)
  {
LABEL_5:
    if ((v44[23] & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  if ((v44[23] & 0x80000000) != 0)
LABEL_6:
    operator delete(*(void **)v44);
LABEL_7:
  v44[23] = 20;
  strcpy(v44, "Stats.KeyframePlanes");
  v4 = std::string::append((std::string *)v44, ".FloorInfo", 0xAuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)v37 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if ((v44[23] & 0x80000000) != 0)
    operator delete(*(void **)v44);
  *(_QWORD *)v44 = "cv3d.recon.";
  *(_QWORD *)&v44[8] = 11;
  v6 = (void *)HIBYTE(v38);
  v7 = v37;
  if (v38 < 0)
  {
    v7 = (void **)v37[0];
    v6 = v37[1];
  }
  *(_QWORD *)&v44[16] = v7;
  *(_QWORD *)&v44[24] = v6;
  sub_2231A9820((uint64_t)v44, (uint64_t)&v45, 0, 0, &v36);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v8[2];
    }
    v10 = *(_QWORD *)(v9 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      sub_2241471F8();
      v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
        memset(v44, 0, sizeof(v44));
        v45 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v43 = 9;
          *(_QWORD *)&v41 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v41 + 1) = 2;
          strcpy((char *)__p, "FloorJump");
          v15 = sub_2241471F8();
          sub_22356F5A4((uint64_t)v15, v14, (uint64_t)&v39, (uint64_t)__p, &v41);
          if (v43 < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v44, 0, sizeof(v44));
  v45 = 728325624;
  kdebug_trace();
  size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v36.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v17 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
    v18 = v17->__r_.__value_.__r.__words[0];
    v19 = v17->__r_.__value_.__l.__size_;
    v20 = v17->__r_.__value_.__s.__data_[16];
    if (v18 == 0x6365722E64337663 && v19 == 0x73746174532E6E6FLL && v20 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  memset(v44, 0, sizeof(v44));
  v45 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v23 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v35) = HIDWORD(__p[0]);
    LODWORD(v34) = __p[0];
    *(double *)&qword_255795558 = (double)v34 / (double)v35;
    __cxa_guard_release(&qword_255795560);
  }
  sub_223677448(&v36, (uint64_t)&v39);
  v24 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_2231AEC20(__p, (uint64_t)&v36);
  std::mutex::lock(&stru_25578C6B0);
  ++qword_25578C6F0;
  std::mutex::unlock(&stru_25578C6B0);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_223677158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_25578DF68);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  sub_2231874DC(v34 - 96);
  if (a21 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a23);
  _Unwind_Resume(a1);
}

BOOL sub_2236772E4(uint64_t a1, const void *a2, void *valuePtr)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527870(valuePtr, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_223677434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223677448(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2232AD680(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_223677544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223677558(char **a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v2 = (uint64_t *)((char *)a2 + 12);
  if (*(float *)a2 < *((float *)a2 + 3)
    && *((float *)a2 + 1) < *((float *)a2 + 4)
    && *((float *)a2 + 2) < *((float *)a2 + 5))
  {
    v6 = a1[1];
    v5 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v5)
    {
      v10 = *a1;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22367C394();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[24 * v11];
      *(_QWORD *)v16 = *a2;
      *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
      *(_QWORD *)(v16 + 12) = *v2;
      *((_DWORD *)v16 + 5) = *((_DWORD *)v2 + 2);
      v9 = v16 + 24;
      if (v6 != v10)
      {
        do
        {
          v17 = *((_QWORD *)v6 - 3);
          v6 -= 24;
          v18 = *((_DWORD *)v6 + 2);
          *((_QWORD *)v16 - 3) = v17;
          v16 -= 24;
          *((_DWORD *)v16 + 2) = v18;
          v19 = *(_QWORD *)(v6 + 12);
          *((_DWORD *)v16 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v16 + 12) = v19;
        }
        while (v6 != v10);
        v6 = *a1;
      }
      *a1 = v16;
      a1[1] = v9;
      a1[2] = &v15[24 * v14];
      if (v6)
        operator delete(v6);
    }
    else
    {
      v7 = *a2;
      *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v6 = v7;
      v8 = *v2;
      *((_DWORD *)v6 + 5) = *((_DWORD *)a2 + 5);
      *(_QWORD *)(v6 + 12) = v8;
      v9 = v6 + 24;
    }
    a1[1] = v9;
  }
}

uint64_t sub_2236776F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  os_log_t v41;
  unsigned int v42;
  Class v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  unint64_t v52;
  uint64_t *v53;
  __int128 *v54;
  int v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t **v58;
  uint64_t **v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t *v62;
  BOOL v63;
  uint64_t *v64;
  unsigned int v65;
  uint64_t **v66;
  uint64_t **v67;
  unsigned int v68;
  _DWORD *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  unsigned int v74;
  _DWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  unint64_t v82;
  uint64_t *v83;
  __int128 *v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t **v87;
  uint64_t **v88;
  uint64_t *v89;
  unsigned int v90;
  _DWORD *v91;
  uint64_t *v92;
  unsigned int v93;
  uint64_t **v94;
  uint64_t **v95;
  unsigned int v96;
  uint64_t *v97;
  int v98;
  int v99;
  BOOL v100;
  _BOOL4 v101;
  __int128 *v102;
  unint64_t v103;
  __int128 *v104;
  __int128 *v105;
  __int128 *v106;
  unint64_t v107;
  __int128 *v108;
  __int128 *v109;
  __int128 *v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t **v113;
  uint64_t **v114;
  uint64_t *v115;
  unsigned int v116;
  _DWORD *v117;
  uint64_t *v118;
  unsigned int v119;
  uint64_t **v120;
  uint64_t **v121;
  unsigned int v122;
  _DWORD *v123;
  uint64_t *v124;
  int v125;
  int v126;
  BOOL v127;
  _BOOL4 v128;
  NSObject *v129;
  NSObject *v130;
  uint64_t v131;
  float32x4_t v132;
  unsigned __int8 v133;
  char *isa;
  size_t isa_high;
  uint64_t **v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t *v139;
  uint64_t **v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  const char *v145;
  size_t v146;
  unsigned __int8 v147;
  const char *v148;
  size_t v149;
  __int128 *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  size_t v158;
  NSObject *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  unint64_t *p_shared_owners;
  unint64_t v163;
  unint64_t v164;
  os_log_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v187;
  uint64_t v188;
  __int128 *v189;
  __int128 *v190;
  int v191;
  int v192;
  float32x4_t v193;
  unint64_t v194;
  unint64_t v195;
  float32x4_t v196;
  const char *v197;
  uint64_t v198;
  __int32 v199;
  uint64_t v200;
  __int32 v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204[2];
  uint64_t **p_rep;
  uint64_t *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v207;
  int v208;
  const char *v209;
  int v210;
  const char *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  os_log_t v219;
  __int128 v220;
  __int128 v221;
  void *v222[2];
  unint64_t v223;
  char v224;

  v214 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 728309932;
  kdebug_trace();
  v8 = *a1;
  v7 = a1[1];
  v9 = v7 - *a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v10 <= 1)
  {
    if (v7 == v8)
    {
      v17 = 0;
      v18 = 0;
      v11 = 0;
    }
    else
    {
      v11 = (char *)operator new(v9);
      v12 = 0;
      do
      {
        v13 = v8 + v12;
        v14 = &v11[v12];
        v15 = *(_QWORD *)(v8 + v12);
        *((_DWORD *)v14 + 2) = *(_DWORD *)(v8 + v12 + 8);
        *(_QWORD *)v14 = v15;
        v16 = *(_QWORD *)(v8 + v12 + 12);
        *((_DWORD *)v14 + 5) = *(_DWORD *)(v8 + v12 + 20);
        *(_QWORD *)(v14 + 12) = v16;
        v12 += 24;
      }
      while (v13 + 24 != v7);
      v17 = &v11[24 * v10];
      v18 = &v11[v12];
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v17;
    *(_BYTE *)(a2 + 24) = 1;
    return kdebug_trace();
  }
  v4.i64[0] = *(_QWORD *)(v8 + 12);
  v4.i32[2] = *(_DWORD *)(v8 + 20);
  v5.i64[0] = *(_QWORD *)v8;
  v5.i32[2] = *(_DWORD *)(v8 + 8);
  v196 = vsubq_f32(v4, v5);
  if (v8 == v7)
  {
    v220 = 0uLL;
    v219 = (os_log_t)&v220;
    goto LABEL_21;
  }
  v19 = v8;
  do
  {
    v5.i64[0] = *(_QWORD *)v19;
    v5.i32[2] = *(_DWORD *)(v19 + 8);
    v6.i64[0] = *(_QWORD *)(v19 + 12);
    v6.i32[2] = *(_DWORD *)(v19 + 20);
    v20 = vsubq_f32(v6, v5);
    v6.i32[3] = v196.i32[3];
    v5 = vabsq_f32(vdivq_f32(vsubq_f32(v20, v196), v196));
    v5.i32[3] = -4194304;
    if (vmaxnmvq_f32(v5) >= 0.001)
    {
      v133 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v133 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release((__guard *)&qword_2557892F0);
      }
      sub_223678D14(&v219);
      if (SHIBYTE(v219[4].isa) < 0)
      {
        isa = (char *)v219[2].isa;
        isa_high = (size_t)v219[3].isa;
      }
      else
      {
        isa = (char *)&v219[2];
        isa_high = HIBYTE(v219[4].isa);
      }
      sub_223195728((uint64_t)&unk_255789280, isa, isa_high, "Clipping volume boxes have different sizes.", 0x2BuLL);
      sub_223678E08(v204);
      if (**(int **)(v204[0] + 56) > 5)
        goto LABEL_296;
      v141 = *(unsigned __int8 *)(v204[0] + 72);
      v142 = sub_22322F254(v204[0], "OSLogSurrogateAppender", 1, 0);
      v143 = v142;
      if (!v141 && !v142)
        goto LABEL_296;
      v188 = a2;
      p_rep = (uint64_t **)v204;
      rep = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v207 = std::chrono::system_clock::now().__d_.__rep_;
      v208 = 5;
      v209 = "unknown file";
      v210 = 212;
      v212 = 0;
      v213 = 0;
      v211 = "unknown function";
      v144 = *p_rep;
      v145 = (const char *)(*p_rep + 2);
      v197 = v145;
      if (*((char *)*p_rep + 39) < 0)
      {
        v145 = (const char *)v144[2];
        v146 = v144[3];
      }
      else
      {
        v146 = *((unsigned __int8 *)*p_rep + 39);
      }
      v147 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v147 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v219);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v219, &xmmword_255788F40);
        if ((_BYTE)v221 && SHIBYTE(v220) < 0)
          operator delete(v219);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v148 = (const char *)&xmmword_255788F40;
      else
        v148 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v149 = byte_255788F57;
      else
        v149 = *((_QWORD *)&xmmword_255788F40 + 1);
      v219 = os_log_create(v148, v145);
      v150 = &v220;
      if (v149 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v149 >= 0x17)
      {
        v151 = v141;
        v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v149 | 7) != 0x17)
          v152 = v149 | 7;
        v153 = v152 + 1;
        v150 = (__int128 *)operator new(v152 + 1);
        *((_QWORD *)&v220 + 1) = v149;
        *(_QWORD *)&v221 = v153 | 0x8000000000000000;
        *(_QWORD *)&v220 = v150;
        v141 = v151;
      }
      else
      {
        BYTE7(v221) = v149;
        if (!v149)
        {
LABEL_240:
          *((_BYTE *)v150 + v149) = 0;
          BYTE8(v221) = 1;
          v154 = v222;
          if (v146 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v146 >= 0x17)
          {
            v155 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v146 | 7) != 0x17)
              v155 = v146 | 7;
            v156 = v155 + 1;
            v154 = (void **)operator new(v155 + 1);
            v222[1] = (void *)v146;
            v223 = v156 | 0x8000000000000000;
            v222[0] = v154;
          }
          else
          {
            HIBYTE(v223) = v146;
            if (!v146)
              goto LABEL_248;
          }
          memmove(v154, v145, v146);
LABEL_248:
          *((_BYTE *)v154 + v146) = 0;
          v224 = 1;
          v157 = v219;
          if (SHIBYTE(v223) < 0)
            operator delete(v222[0]);
          if (BYTE8(v221) && SBYTE7(v221) < 0)
            operator delete((void *)v220);
          if (v219)
            os_release(v219);
          if (v143 && *(_QWORD *)(v143 + 24))
          {
            v158 = _os_log_pack_size();
            v159 = operator new(v158, (std::align_val_t)8uLL);
            v160 = (std::__shared_weak_count *)operator new();
            v161 = v160;
            v160->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v160->__shared_owners_;
            v160->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v160->__shared_weak_owners_ = 0;
            v160[1].__vftable = (std::__shared_weak_count_vtbl *)v159;
            v219 = v159;
            *(_QWORD *)&v220 = v159;
            *((_QWORD *)&v220 + 1) = v160;
            do
              v163 = __ldxr(p_shared_owners);
            while (__stxr(v163 + 1, p_shared_owners));
            v221 = 0uLL;
            v222[0] = 0;
            do
              v164 = __ldaxr(p_shared_owners);
            while (__stlxr(v164 - 1, p_shared_owners));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v161);
            }
            v165 = v219;
            *(_WORD *)_os_log_pack_fill() = 0;
            v166 = operator new();
            v167 = *((unsigned __int8 *)v144 + 39);
            v168 = v197;
            if ((v167 & 0x80u) != 0)
            {
              v168 = (const char *)v144[2];
              v167 = v144[3];
            }
            *(_QWORD *)v166 = v165;
            *(_OWORD *)(v166 + 8) = v220;
            v220 = 0uLL;
            *(_OWORD *)(v166 + 24) = v221;
            v221 = 0uLL;
            *(_QWORD *)(v166 + 40) = v168;
            *(_QWORD *)(v166 + 48) = v167;
            *(_BYTE *)(v166 + 56) = 16;
            v198 = 0;
            v202.i64[0] = v166;
            (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v143 + 24) + 40))(*(_QWORD *)(v143 + 24), &v202);
            v169 = v202.i64[0];
            v202.i64[0] = 0;
            a2 = v188;
            if (v169)
            {
              v170 = *(std::__shared_weak_count **)(v169 + 32);
              if (v170)
              {
                v171 = (unint64_t *)&v170->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              v173 = *(std::__shared_weak_count **)(v169 + 16);
              if (v173)
              {
                v174 = (unint64_t *)&v173->__shared_owners_;
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
              MEMORY[0x227684CE8](v169, 0x10F0C40B62ED6C6);
              v198 = 0;
            }
            v176 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
            if (*((_QWORD *)&v221 + 1))
            {
              v177 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
            if (*((_QWORD *)&v220 + 1))
            {
              v180 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
          }
          else
          {
            os_log_type_enabled(v157, OS_LOG_TYPE_ERROR);
            LOWORD(v219) = 0;
            v182 = (void *)_os_log_send_and_compose_impl();
            a2 = v188;
            if (v182)
              free(v182);
          }
          if (v141)
          {
            sub_22322C138((uint64_t)&p_rep, "Clipping volume boxes have different sizes.");
            sub_223182C08((uint64_t)&p_rep);
          }
          sub_223182C08((uint64_t)&p_rep);
          v183 = v213;
          if (v213)
          {
            v184 = (unint64_t *)&v213->__shared_owners_;
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
LABEL_296:
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          return kdebug_trace();
        }
      }
      memmove(v150, v148, v149);
      goto LABEL_240;
    }
    v19 += 24;
  }
  while (v19 != v7);
  v21 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v22.i64[0] = 0x80000000800000;
  v22.i64[1] = 0x80000000800000;
  v23 = v8;
  v24 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  do
  {
    v25 = *(float *)(v23 + 8);
    v26 = v21.f32[2];
    if (v25 < v21.f32[2])
      v26 = *(float *)(v23 + 8);
    if (v22.f32[2] >= v25)
      v25 = v22.f32[2];
    v27 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v23, *(float32x2_t *)v22.f32), *(int8x8_t *)v23, *(int8x8_t *)v22.f32);
    v28 = *(float32x2_t *)(v23 + 12);
    *(int8x8_t *)v22.f32 = vbsl_s8((int8x8_t)vcgt_f32(v28, v27), (int8x8_t)v28, (int8x8_t)v27);
    v29 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v23), *(int8x8_t *)v23, *(int8x8_t *)v21.f32);
    *(int8x8_t *)v21.f32 = vbsl_s8((int8x8_t)vcgt_f32(v29, v28), (int8x8_t)v28, (int8x8_t)v29);
    v30 = *(float *)(v23 + 20);
    if (v30 < v26)
      v26 = *(float *)(v23 + 20);
    v21.f32[2] = v26;
    if (v25 < v30)
      v25 = *(float *)(v23 + 20);
    v22.f32[2] = v25;
    v23 += 24;
  }
  while (v23 != v7);
  v193 = v21;
  v220 = 0uLL;
  v219 = (os_log_t)&v220;
  if (v8 == v7)
  {
LABEL_21:
    rep = 0;
    v207 = 0;
    p_rep = &rep;
    goto LABEL_202;
  }
  v31.i64[0] = 0x3F0000003F000000;
  v31.i64[1] = 0x3F0000003F000000;
  v32 = vaddq_f32(vdivq_f32(vsubq_f32(v22, v21), v196), v31);
  v195 = v32.f32[0];
  v194 = v32.f32[1];
  do
  {
    while (1)
    {
      v32.i64[0] = *(_QWORD *)v8;
      v32.i32[2] = *(_DWORD *)(v8 + 8);
      v33.i64[0] = 0x3F0000003F000000;
      v33.i64[1] = 0x3F0000003F000000;
      v32 = vaddq_f32(vdivq_f32(vsubq_f32(v32, v193), v196), v33);
      v34 = v32.f32[0]
          + (v32.f32[1] + v32.f32[2] * (_DWORD)v194) * (_DWORD)v195;
      v35 = (uint64_t **)&v220;
      v36 = (uint64_t **)&v220;
      if ((_QWORD)v220)
        break;
LABEL_34:
      v39 = operator new(0x30uLL);
      v39[4] = v34;
      *((_DWORD *)v39 + 10) = 0;
      *v39 = 0;
      v39[1] = 0;
      v39[2] = v36;
      *v35 = v39;
      v40 = v39;
      if (v219->isa)
      {
        v219 = (os_log_t)v219->isa;
        v40 = *v35;
      }
      sub_2231A9A8C((uint64_t *)v220, v40);
      ++*((_QWORD *)&v220 + 1);
      *((_DWORD *)v39 + 10) = v24;
      v8 += 24;
      if (v8 == v7)
        goto LABEL_37;
    }
    v37 = (uint64_t *)v220;
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v37;
        v38 = v37[4];
        if (v38 <= v34)
          break;
        v37 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_34;
      }
      if (v38 >= v34)
        break;
      v37 = v36[1];
      if (!v37)
      {
        v35 = v36 + 1;
        goto LABEL_34;
      }
    }
    *((_DWORD *)v36 + 10) = v24;
    v8 += 24;
  }
  while (v8 != v7);
LABEL_37:
  v192 = v24;
  v41 = v219;
  rep = 0;
  v207 = 0;
  v204[1] = (uint64_t)&p_rep;
  p_rep = &rep;
  v204[0] = (uint64_t)&v219;
  if (v219 == (os_log_t)&v220)
  {
LABEL_202:
    v131 = 0;
    v132 = 0uLL;
    goto LABEL_223;
  }
  v187 = a2;
  v42 = 0;
  while (2)
  {
    v43 = v41[4].isa;
    v44 = (unint64_t)v43 % v195;
    v45 = (unint64_t)v43 / v195 % v194;
    v46 = (unint64_t)v43 / (v194 * v195);
    if (v44)
    {
      v47 = v220;
      if ((_QWORD)v220)
      {
        v48 = (unint64_t)v43 - 1;
        v49 = &v220;
        do
        {
          v50 = (__int128 *)v47;
          v51 = v49;
          v52 = *(_QWORD *)(v47 + 32);
          v53 = (uint64_t *)(v47 + 8);
          if (v52 >= v48)
          {
            v53 = (uint64_t *)v50;
            v49 = v50;
          }
          v47 = *v53;
        }
        while (v47);
        if (v49 != &v220)
        {
          v54 = v52 >= v48 ? v50 : v51;
          if (v48 >= *((_QWORD *)v54 + 4))
          {
            v55 = v46;
            if (v52 < v48)
              v50 = v51;
            v56 = rep;
            v190 = v50;
            v57 = *((_DWORD *)v50 + 10);
            v58 = &rep;
LABEL_55:
            v59 = v58;
            if (v56)
            {
              while (1)
              {
                v58 = (uint64_t **)v56;
                v60 = *((_DWORD *)v56 + 7);
                if (v57 < v60)
                {
                  v56 = *v58;
                  goto LABEL_55;
                }
                if (v60 >= v57)
                  break;
                v56 = v58[1];
                if (!v56)
                {
                  v59 = v58 + 1;
                  goto LABEL_60;
                }
              }
              v61 = v58;
              LODWORD(v46) = v55;
              if (*((_DWORD *)v58 + 11) + 1 == v44)
              {
LABEL_65:
                v63 = v61[9] == v45 && v61[12] == v45;
                if (v63 && v61[10] == (_DWORD)v46 && v61[13] == (_DWORD)v46)
                {
                  LODWORD(v41[5].isa) = *((_DWORD *)v190 + 10);
                  v64 = rep;
                  v65 = *((_DWORD *)v190 + 10);
                  v66 = &rep;
LABEL_74:
                  v67 = v66;
                  if (v64)
                  {
                    while (1)
                    {
                      v66 = (uint64_t **)v64;
                      v68 = *((_DWORD *)v64 + 7);
                      if (v65 < v68)
                      {
                        v64 = *v66;
                        goto LABEL_74;
                      }
                      if (v68 >= v65)
                        break;
                      v64 = v66[1];
                      if (!v64)
                      {
                        v67 = v66 + 1;
                        goto LABEL_79;
                      }
                    }
                    v69 = v66;
                  }
                  else
                  {
LABEL_79:
                    v69 = operator new(0x38uLL);
                    v69[7] = v65;
                    *(_QWORD *)v69 = 0;
                    *((_QWORD *)v69 + 1) = 0;
                    *((_QWORD *)v69 + 2) = v66;
                    *v67 = (uint64_t *)v69;
                    v70 = (uint64_t *)v69;
                    if (*p_rep)
                    {
                      p_rep = (uint64_t **)*p_rep;
                      v70 = *v67;
                    }
                    sub_2231A9A8C(rep, v70);
                    ++v207;
                  }
                  v69[11] = v44;
                  v69[12] = v45;
                  LODWORD(v46) = v55;
                  v69[13] = v55;
                }
              }
            }
            else
            {
LABEL_60:
              v61 = operator new(0x38uLL);
              v61[7] = v57;
              *(_QWORD *)v61 = 0;
              *((_QWORD *)v61 + 1) = 0;
              *((_QWORD *)v61 + 2) = v58;
              *v59 = (uint64_t *)v61;
              v62 = (uint64_t *)v61;
              if (*p_rep)
              {
                p_rep = (uint64_t **)*p_rep;
                v62 = *v59;
              }
              sub_2231A9A8C(rep, v62);
              ++v207;
              LODWORD(v46) = v55;
              if (v61[11] + 1 == v44)
                goto LABEL_65;
            }
          }
        }
      }
    }
    if (LODWORD(v41[5].isa) == v192)
    {
      LODWORD(v41[5].isa) = v42;
      v71 = rep;
      v72 = &rep;
LABEL_87:
      v73 = v72;
      if (v71)
      {
        while (1)
        {
          v72 = (uint64_t **)v71;
          v74 = *((_DWORD *)v71 + 7);
          if (v42 < v74)
          {
            v71 = *v72;
            goto LABEL_87;
          }
          if (v74 >= v42)
            break;
          v71 = v72[1];
          if (!v71)
          {
            v73 = v72 + 1;
            goto LABEL_92;
          }
        }
        v75 = v72;
      }
      else
      {
LABEL_92:
        v75 = operator new(0x38uLL);
        v75[7] = v42;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v75 + 1) = 0;
        *((_QWORD *)v75 + 2) = v72;
        *v73 = (uint64_t *)v75;
        v76 = (uint64_t *)v75;
        if (*p_rep)
        {
          p_rep = (uint64_t **)*p_rep;
          v76 = *v73;
        }
        sub_2231A9A8C(rep, v76);
        ++v207;
      }
      ++v42;
      v75[8] = v44;
      v75[9] = v45;
      v75[10] = v46;
      v75[11] = v44;
      v75[12] = v45;
      v75[13] = v46;
    }
    if (!v45)
      goto LABEL_142;
    v77 = v220;
    if (!(_QWORD)v220)
      goto LABEL_142;
    v78 = (v44 + (v45 + v46 * v194 - 1) * v195);
    v79 = &v220;
    do
    {
      v80 = (__int128 *)v77;
      v81 = v79;
      v82 = *(_QWORD *)(v77 + 32);
      v83 = (uint64_t *)(v77 + 8);
      if (v82 >= v78)
      {
        v83 = (uint64_t *)v80;
        v79 = v80;
      }
      v77 = *v83;
    }
    while (v77);
    if (v79 == &v220)
      goto LABEL_142;
    v84 = v82 >= v78 ? v80 : v81;
    if (*((_QWORD *)v84 + 4) > v78)
      goto LABEL_142;
    if (v82 < v78)
      v80 = v81;
    v85 = rep;
    v189 = v80;
    v191 = v46;
    v86 = *((_DWORD *)v80 + 10);
    v87 = &rep;
    v88 = &rep;
    if (rep)
    {
      v89 = rep;
      while (1)
      {
        while (1)
        {
          v87 = (uint64_t **)v89;
          v90 = *((_DWORD *)v89 + 7);
          if (v86 >= v90)
            break;
          v89 = *v87;
          v88 = v87;
          if (!*v87)
            goto LABEL_117;
        }
        if (v90 >= v86)
          break;
        v89 = v87[1];
        if (!v89)
        {
          v88 = v87 + 1;
          goto LABEL_117;
        }
      }
      v91 = v87;
    }
    else
    {
LABEL_117:
      v91 = operator new(0x38uLL);
      v91[7] = v86;
      *(_QWORD *)v91 = 0;
      *((_QWORD *)v91 + 1) = 0;
      *((_QWORD *)v91 + 2) = v87;
      *v88 = (uint64_t *)v91;
      v92 = (uint64_t *)v91;
      if (*p_rep)
      {
        p_rep = (uint64_t **)*p_rep;
        v92 = *v88;
      }
      sub_2231A9A8C(rep, v92);
      v85 = rep;
      ++v207;
    }
    v93 = v41[5].isa;
    v94 = &rep;
LABEL_123:
    v95 = v94;
    if (!v85)
    {
LABEL_128:
      v46 = (unint64_t)operator new(0x38uLL);
      *(_DWORD *)(v46 + 28) = v93;
      *(_QWORD *)v46 = 0;
      *(_QWORD *)(v46 + 8) = 0;
      *(_QWORD *)(v46 + 16) = v94;
      *v95 = (uint64_t *)v46;
      v97 = (uint64_t *)v46;
      if (*p_rep)
      {
        p_rep = (uint64_t **)*p_rep;
        v97 = *v95;
      }
      sub_2231A9A8C(rep, v97);
      ++v207;
      if (v91[8] == *(_DWORD *)(v46 + 32))
        goto LABEL_133;
      goto LABEL_138;
    }
    while (1)
    {
      v94 = (uint64_t **)v85;
      v96 = *((_DWORD *)v85 + 7);
      if (v93 < v96)
      {
        v85 = *v94;
        goto LABEL_123;
      }
      if (v96 >= v93)
        break;
      v85 = v94[1];
      if (!v85)
      {
        v95 = v94 + 1;
        goto LABEL_128;
      }
    }
    v46 = (unint64_t)v94;
    if (v91[8] != *((_DWORD *)v94 + 8))
    {
LABEL_138:
      v100 = 0;
      goto LABEL_139;
    }
LABEL_133:
    if (v91[11] != *(_DWORD *)(v46 + 44))
      goto LABEL_138;
    v98 = v91[12];
    v99 = *(_DWORD *)(v46 + 36);
    if (v98 + 1 != v99 || v91[10] != *(_DWORD *)(v46 + 40))
    {
      v100 = 0;
      if (v91[9] == v99)
        goto LABEL_195;
      goto LABEL_139;
    }
    v100 = v91[13] == *(_DWORD *)(v46 + 52);
    if (v91[9] != v99)
      goto LABEL_139;
LABEL_195:
    if (v98 != *(_DWORD *)(v46 + 48))
    {
LABEL_139:
      v101 = 0;
      LODWORD(v46) = v191;
      if (v100)
        goto LABEL_141;
      goto LABEL_140;
    }
    v101 = v91[13] + 1 == *(_DWORD *)(v46 + 40);
    LODWORD(v46) = v191;
    if (v100)
    {
LABEL_141:
      sub_223678EFC((uint64_t)v204, *((_DWORD *)v189 + 10), v41[5].isa);
      goto LABEL_142;
    }
LABEL_140:
    if (v101)
      goto LABEL_141;
LABEL_142:
    if (!(_DWORD)v46)
      goto LABEL_188;
    v102 = (__int128 *)v220;
    if (!(_QWORD)v220)
      goto LABEL_188;
    v103 = (v44 + (v45 + (v46 - 1) * v194) * v195);
    v104 = &v220;
    do
    {
      v105 = v102;
      v106 = v104;
      v107 = *((_QWORD *)v102 + 4);
      v108 = (__int128 *)((char *)v102 + 8);
      if (v107 >= v103)
      {
        v108 = v105;
        v104 = v105;
      }
      v102 = *(__int128 **)v108;
    }
    while (v102);
    if (v104 == &v220)
      goto LABEL_188;
    v109 = v107 >= v103 ? v105 : v106;
    if (*((_QWORD *)v109 + 4) > v103)
      goto LABEL_188;
    if (v107 >= v103)
      v110 = v105;
    else
      v110 = v106;
    v111 = rep;
    v112 = *((_DWORD *)v110 + 10);
    v113 = &rep;
    v114 = &rep;
    if (rep)
    {
      v115 = rep;
      while (1)
      {
        while (1)
        {
          v113 = (uint64_t **)v115;
          v116 = *((_DWORD *)v115 + 7);
          if (v112 >= v116)
            break;
          v115 = *v113;
          v114 = v113;
          if (!*v113)
            goto LABEL_163;
        }
        if (v116 >= v112)
          break;
        v115 = v113[1];
        if (!v115)
        {
          v114 = v113 + 1;
          goto LABEL_163;
        }
      }
      v117 = v113;
    }
    else
    {
LABEL_163:
      v117 = operator new(0x38uLL);
      v117[7] = v112;
      *(_QWORD *)v117 = 0;
      *((_QWORD *)v117 + 1) = 0;
      *((_QWORD *)v117 + 2) = v113;
      *v114 = (uint64_t *)v117;
      v118 = (uint64_t *)v117;
      if (*p_rep)
      {
        p_rep = (uint64_t **)*p_rep;
        v118 = *v114;
      }
      sub_2231A9A8C(rep, v118);
      v111 = rep;
      ++v207;
    }
    v119 = v41[5].isa;
    v120 = &rep;
LABEL_169:
    v121 = v120;
    if (!v111)
    {
LABEL_174:
      v123 = operator new(0x38uLL);
      v123[7] = v119;
      *(_QWORD *)v123 = 0;
      *((_QWORD *)v123 + 1) = 0;
      *((_QWORD *)v123 + 2) = v120;
      *v121 = (uint64_t *)v123;
      v124 = (uint64_t *)v123;
      if (*p_rep)
      {
        p_rep = (uint64_t **)*p_rep;
        v124 = *v121;
      }
      sub_2231A9A8C(rep, v124);
      ++v207;
      if (v117[8] == v123[8])
        goto LABEL_179;
      goto LABEL_184;
    }
    while (1)
    {
      v120 = (uint64_t **)v111;
      v122 = *((_DWORD *)v111 + 7);
      if (v119 < v122)
      {
        v111 = *v120;
        goto LABEL_169;
      }
      if (v122 >= v119)
        break;
      v111 = v120[1];
      if (!v111)
      {
        v121 = v120 + 1;
        goto LABEL_174;
      }
    }
    v123 = v120;
    if (v117[8] != *((_DWORD *)v120 + 8))
    {
LABEL_184:
      v127 = 0;
      goto LABEL_185;
    }
LABEL_179:
    if (v117[11] != v123[11])
      goto LABEL_184;
    v125 = v117[12];
    v126 = v123[9];
    if (v125 + 1 != v126 || v117[10] != v123[10])
    {
      v127 = 0;
      if (v117[9] == v126)
        goto LABEL_199;
      goto LABEL_185;
    }
    v127 = v117[13] == v123[13];
    if (v117[9] != v126)
      goto LABEL_185;
LABEL_199:
    if (v125 != v123[12])
    {
LABEL_185:
      v128 = 0;
      if (v127)
        goto LABEL_187;
      goto LABEL_186;
    }
    v128 = v117[13] + 1 == v123[10];
    if (v127)
    {
LABEL_187:
      sub_223678EFC((uint64_t)v204, *((_DWORD *)v110 + 10), v41[5].isa);
      goto LABEL_188;
    }
LABEL_186:
    if (v128)
      goto LABEL_187;
LABEL_188:
    v129 = v41[1].isa;
    if (v129)
    {
      do
      {
        v130 = v129;
        v129 = v129->isa;
      }
      while (v129);
    }
    else
    {
      do
      {
        v130 = v41[2].isa;
        v63 = v130->isa == (Class)v41;
        v41 = v130;
      }
      while (!v63);
    }
    v41 = v130;
    if (v130 != &v220)
      continue;
    break;
  }
  v136 = p_rep;
  v203 = 0;
  v132 = 0uLL;
  v202 = 0u;
  if (p_rep == &rep)
  {
    v131 = 0;
    a2 = v187;
  }
  else
  {
    a2 = v187;
    do
    {
      *(float32x2_t *)v132.f32 = vcvt_f32_u32((uint32x2_t)v136[4]);
      v132.f32[2] = (float)*((unsigned int *)v136 + 10);
      *(float32x2_t *)v33.f32 = vcvt_f32_u32(*(uint32x2_t *)((char *)v136 + 44));
      v33.f32[2] = (float)*((unsigned int *)v136 + 13);
      v137 = vaddq_f32(v193, vmulq_f32(v196, v132));
      v199 = v137.i32[2];
      v138 = vaddq_f32(v196, vaddq_f32(v193, vmulq_f32(v196, v33)));
      v198 = v137.i64[0];
      v201 = v138.i32[2];
      v200 = v138.i64[0];
      sub_223677558((char **)&v202, &v198);
      v139 = v136[1];
      if (v139)
      {
        do
        {
          v140 = (uint64_t **)v139;
          v139 = (uint64_t *)*v139;
        }
        while (v139);
      }
      else
      {
        do
        {
          v140 = (uint64_t **)v136[2];
          v63 = *v140 == (uint64_t *)v136;
          v136 = v140;
        }
        while (!v63);
      }
      v136 = v140;
    }
    while (v140 != &rep);
    v132 = v202;
    v131 = v203;
  }
LABEL_223:
  *(float32x4_t *)a2 = v132;
  *(_QWORD *)(a2 + 16) = v131;
  *(_BYTE *)(a2 + 24) = 1;
  sub_2233FADDC(rep);
  sub_2233FADDC((_QWORD *)v220);
  return kdebug_trace();
}

void sub_223678AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 152))
  {
    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a33);
  sub_2231874DC(v33 - 216);
  _Unwind_Resume(a1);
}

void sub_223678B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_22319A054(&a27);
  sub_22319A054(&a23);
  sub_223199DE8(v33 - 176);
  sub_223182DAC((uint64_t)&a33);
  sub_2231874DC(v33 - 216);
  _Unwind_Resume(a1);
}

void sub_223678B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  MEMORY[0x227684CE8](v33, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a33);
  sub_2231874DC(v34 - 216);
  _Unwind_Resume(a1);
}

void sub_223678B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_223182DAC((uint64_t)&a33);
  sub_2231874DC(v33 - 216);
  _Unwind_Resume(a1);
}

void sub_223678BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;

  sub_2233FADDC(a34);
  sub_2233FADDC(*(_QWORD **)(v34 - 168));
  sub_2231874DC(v34 - 216);
  _Unwind_Resume(a1);
}

void sub_223678CF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_2233FADDC(v1);
  sub_2231874DC(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_223678D14(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBF98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBF98))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBF90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBF98);
  }
  *a1 = qword_2540CBF90;
}

void sub_223678DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBF98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBF98);
  _Unwind_Resume(a1);
}

void sub_223678E08(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBFA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFA8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBFA0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBFA8);
  }
  *a1 = qword_2540CBFA0;
}

void sub_223678EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBFA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBFA8);
  _Unwind_Resume(a1);
}

void sub_223678EFC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v6 = *(_QWORD *)a1 + 8;
  v7 = **(_QWORD ***)a1;
  if (v7 != (_QWORD *)v6)
  {
    do
    {
      if (*((_DWORD *)v7 + 10) == a3)
        *((_DWORD *)v7 + 10) = a2;
      v12 = (_QWORD *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v7[2];
          v14 = *v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != (_QWORD *)v6);
  }
  v8 = *(uint64_t ***)(a1 + 8);
  v10 = v8 + 1;
  v9 = v8[1];
  if (v9)
  {
    v11 = v8[1];
    while (1)
    {
      while (1)
      {
        v15 = v11;
        v16 = *((_DWORD *)v11 + 7);
        if (v16 <= a3)
          break;
        v11 = (uint64_t *)*v15;
        v10 = (uint64_t **)v15;
        if (!*v15)
          goto LABEL_19;
      }
      if (v16 >= a3)
        break;
      v11 = (uint64_t *)v15[1];
      if (!v11)
      {
        v10 = (uint64_t **)(v15 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
    v15 = v8 + 1;
LABEL_19:
    v17 = v15;
    v15 = operator new(0x38uLL);
    *((_DWORD *)v15 + 7) = a3;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = v17;
    *v10 = v15;
    v18 = (uint64_t *)**v8;
    v19 = v15;
    if (v18)
    {
      *v8 = v18;
      v19 = *v10;
    }
    sub_2231A9A8C(v8[1], v19);
    v8[2] = (uint64_t *)((char *)v8[2] + 1);
    v8 = *(uint64_t ***)(a1 + 8);
    v9 = v8[1];
  }
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v21 = v9;
        v22 = *((_DWORD *)v9 + 7);
        if (v22 <= a2)
          break;
        v9 = (uint64_t *)*v21;
        v20 = (uint64_t **)v21;
        if (!*v21)
          goto LABEL_29;
      }
      if (v22 >= a2)
        break;
      v9 = (uint64_t *)v21[1];
      if (!v9)
      {
        v20 = (uint64_t **)(v21 + 1);
        goto LABEL_29;
      }
    }
  }
  else
  {
    v20 = v8 + 1;
    v21 = v8 + 1;
LABEL_29:
    v23 = v21;
    v21 = operator new(0x38uLL);
    *((_DWORD *)v21 + 7) = a2;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v23;
    *v20 = v21;
    v24 = (uint64_t *)**v8;
    v25 = v21;
    if (v24)
    {
      *v8 = v24;
      v25 = *v20;
    }
    sub_2231A9A8C(v8[1], v25);
    v8[2] = (uint64_t *)((char *)v8[2] + 1);
  }
  if (v21 != v15)
  {
    v26 = *(_QWORD *)((char *)v15 + 44);
    *((_DWORD *)v21 + 13) = *((_DWORD *)v15 + 13);
    *(_QWORD *)((char *)v21 + 44) = v26;
  }
  v27 = *(_QWORD **)(a1 + 8);
  v28 = (uint64_t *)v27[1];
  if (v28)
  {
    v29 = v27 + 1;
    v30 = v27[1];
    do
    {
      v31 = *(_DWORD *)(v30 + 28);
      v32 = v31 >= a3;
      if (v31 >= a3)
        v33 = (uint64_t *)v30;
      else
        v33 = (uint64_t *)(v30 + 8);
      if (v32)
        v29 = (_QWORD *)v30;
      v30 = *v33;
    }
    while (*v33);
    if (v29 != v27 + 1 && *((_DWORD *)v29 + 7) <= a3)
    {
      v34 = (_QWORD *)v29[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        v36 = v29;
        do
        {
          v35 = (_QWORD *)v36[2];
          v14 = *v35 == (_QWORD)v36;
          v36 = v35;
        }
        while (!v14);
      }
      if ((_QWORD *)*v27 == v29)
        *v27 = v35;
      --v27[2];
      sub_2231AFE60(v28, v29);
      operator delete(v29);
    }
  }
}

void sub_223679190(uint64_t *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 v10;
  char *v11;
  size_t v12;
  unsigned __int8 v13;
  char *v14;
  size_t v15;
  uint64_t v17;
  float32x2_t v18;
  __n128 v19;
  float32x2_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float v57;
  float v58;
  int32x2_t v59;
  int16x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  BOOL v71;
  BOOL v72;
  int32x2_t v73;
  float32x2_t v74;
  int8x16_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  int8x16_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  int32x4_t v117;
  int32x4_t v118;
  float32x2_t *v119;
  std::string::size_type v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  unsigned __int32 v139;
  int8x16_t v140;
  float32x2_t v141;
  unsigned __int32 v142;
  float32x4_t v143;
  std::string::size_type v144;
  _BOOL4 v145;
  float v146;
  float v147;
  unsigned __int32 v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  BOOL v155;
  unsigned int v156;
  int8x16_t v157;
  int8x16_t v158;
  float v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x2_t v162;
  void **v163;
  float32x2_t *v164;
  int8x16_t v165;
  float v166;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  float32x2_t *i;
  float32x2_t v173;
  __int32 v174;
  float32x2_t *v175;
  void *v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  size_t v182;
  const char *v183;
  unsigned __int8 v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  const char *v188;
  const char *v189;
  uint64_t v190;
  const char *v191;
  size_t v192;
  uint64_t v193;
  float32x2_t *v194;
  _BYTE *v195;
  _BYTE *v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  void *v200;
  std::string::size_type v201;
  size_t v202;
  std::string::size_type v203;
  unsigned __int8 v204;
  const char *v205;
  size_t v206;
  void **v207;
  unint64_t v208;
  const char *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  NSObject *v218;
  size_t v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  unint64_t *p_shared_owners;
  unint64_t v224;
  unint64_t v225;
  void *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::string::size_type v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  unsigned __int8 v254;
  const char *v255;
  size_t v256;
  void **v257;
  const char *v258;
  unint64_t v259;
  uint64_t v260;
  const char *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  void **v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  NSObject *v269;
  size_t v270;
  void *v271;
  _QWORD *v272;
  unint64_t *v273;
  void *v274;
  void *v275;
  char *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  void *v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  const char *v290;
  void *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  const char *v303;
  const char *v304;
  unint64_t *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  size_t v309;
  char *v310;
  char **v311;
  char **v312;
  char **v313;
  void *v314;
  char **v315;
  char *v316;
  char *v317;
  int32x4_t v318;
  int8x16_t v319;
  float32x4_t v320;
  int32x4_t v321;
  float32x2_t *v322;
  float *v323;
  float *v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  char *v331;
  char *v332;
  void *v333;
  char *v334;
  void *v335;
  void *v336;
  float32x2_t v337;
  float v338;
  float v339;
  float v340;
  float v341;
  BOOL v342;
  float v343;
  float v344;
  float v345;
  BOOL v346;
  float v347;
  float v348;
  char v349;
  float32x2_t v350;
  float32x2_t v351;
  float32x2_t v352;
  float32x2_t v353;
  float32x4_t v354;
  int16x4_t v355;
  int32x4_t v356;
  int8x16_t v357;
  float32x4_t v358;
  int8x16_t v359;
  float32x4_t v360;
  unint64_t v361;
  float32x4_t v362;
  int v363;
  int v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  void *v368;
  int v369;
  int v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  std::mutex *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  __int32 v389;
  unsigned int v390;
  int32x4_t v391;
  uint64_t v392;
  unint64_t v393;
  int32x4_t v394;
  float32x4_t v395;
  int8x16_t v396;
  int32x4_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  std::string::size_type v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  void *v405;
  std::string::size_type v406;
  std::string::size_type v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  __int128 v413;
  int v414;
  int v415;
  float32x2_t *v416;
  uint64_t v419;
  float32x2_t v420;
  float32x2_t v421;
  float32x4_t v422;
  float32x2_t v423;
  float32x4_t v424;
  int8x16_t v425;
  float32x4_t v426;
  float32x2_t v427;
  uint64_t v428;
  float32x4_t v430;
  float32x4_t v431;
  int32x4_t v432;
  float32x2_t v433;
  int32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  int32x4_t v437;
  float32x4_t v438;
  uint64_t v439;
  float32x4_t v440;
  float32x2_t v441;
  __n128 v442;
  float32x2_t v443;
  const char *v444;
  int32x4_t v445;
  float32x2_t v446;
  unsigned __int8 *v447;
  uint64_t v448;
  float32x2_t v449;
  float32x2_t v450;
  uint64_t v451;
  int8x8_t v452;
  float32x4_t v453;
  uint64_t v454;
  void *v455;
  __int128 v456;
  __int128 v457;
  char *v458;
  std::string v459;
  char *v460;
  char *v461;
  void *v462;
  __int128 v463;
  float32x2_t *v464;
  float32x2_t *v465;
  uint64_t v466;
  void *v467;
  char **v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  uint64_t v474;
  char *v475;
  void *v476;
  __int128 v477;
  char v478;
  char v479;
  void *object[9];
  float32x4_t v481;
  _BYTE v482[24];
  _BYTE v483[24];
  __int128 v484;
  __int128 v485;
  _BYTE v486[32];
  __int128 v487;
  _BYTE v488[24];
  __int128 v489;
  __int128 v490;
  unint64_t v491;
  __int128 v492;
  uint64_t v493;
  float32x4_t v494;
  char v495;
  _OWORD v496[2];
  char v497;
  void *v498[3];
  unsigned __int8 v499;
  void *v500;
  __int128 v501;
  unsigned __int8 v502;
  void *v503;
  __int128 v504;
  char v505;
  __int16 v506;
  float32x4_t v507[4];
  unint64_t v508;
  int8x16_t v509;
  __int32 v510;
  unsigned int v511;
  int8x16_t v512;
  int32x4_t v513;
  unsigned int v514;
  __int32 v515;
  __int32 v516;
  unsigned int v517;
  __int32 v518;
  __int32 v519;
  unsigned int v520;
  __int32 v521;
  __int32 v522;
  unsigned int v523;
  __int32 v524;
  int32x4_t v525;
  __int32 v526;
  __int32 v527;
  unint64_t v528;
  __int32 v529;
  __int32 v530;
  unsigned int v531;
  int8x16_t v532;
  __int32 v533;
  unsigned int v534;
  uint64_t v535;
  unsigned int v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int v540;
  __int32 v541;
  __int32 v542;
  unsigned int v543;
  uint64_t v544;

  v6 = a5;
  v544 = *MEMORY[0x24BDAC8D0];
  v7 = a1[1];
  if (*a1 == v7)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223678D14(object);
    if (*((char *)object[0] + 39) < 0)
    {
      v14 = (char *)*((_QWORD *)object[0] + 2);
      v15 = *((_QWORD *)object[0] + 3);
    }
    else
    {
      v14 = (char *)object[0] + 16;
      v15 = *((unsigned __int8 *)object[0] + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v14, v15, "Clipping volume is empty.", 0x19uLL);
    sub_223678E08(&v476);
    if (**((int **)v476 + 7) > 5)
      goto LABEL_379;
    v177 = *((unsigned __int8 *)v476 + 72);
    v178 = sub_22322F254((uint64_t)v476, "OSLogSurrogateAppender", 1, 0);
    v179 = v178;
    if (!v177 && !v178)
      goto LABEL_379;
    v507[0].i64[0] = (uint64_t)&v476;
    *(std::chrono::steady_clock::time_point *)&v507[0].u32[2] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)v507[1].f32 = std::chrono::system_clock::now();
    v507[1].i32[2] = 5;
    v507[2].i64[0] = (uint64_t)"unknown file";
    v507[2].i32[2] = 321;
    v508 = 0;
    v507[3].i64[0] = (uint64_t)"unknown function";
    v507[3].i64[1] = 0;
    v180 = *(_QWORD *)v507[0].i64[0];
    v181 = *(_QWORD *)v507[0].i64[0] + 16;
    if (*(char *)(*(_QWORD *)v507[0].i64[0] + 39) < 0)
    {
      v183 = *(const char **)(v180 + 16);
      v182 = *(_QWORD *)(v180 + 24);
      v204 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v204 & 1) != 0)
        goto LABEL_156;
    }
    else
    {
      v182 = *(unsigned __int8 *)(*(_QWORD *)v507[0].i64[0] + 39);
      v183 = (const char *)(*(_QWORD *)v507[0].i64[0] + 16);
      v184 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v184 & 1) != 0)
        goto LABEL_156;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_156:
    if (byte_255788F57 >= 0)
      v205 = (const char *)&xmmword_255788F40;
    else
      v205 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v206 = byte_255788F57;
    else
      v206 = *((_QWORD *)&xmmword_255788F40 + 1);
    object[0] = os_log_create(v205, v183);
    v207 = &object[1];
    if (v206 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v206 >= 0x17)
    {
      v208 = v179;
      v209 = v183;
      v210 = v180;
      v211 = v177;
      v212 = v181;
      v213 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v206 | 7) != 0x17)
        v213 = v206 | 7;
      v214 = v213 + 1;
      v207 = (void **)operator new(v213 + 1);
      object[3] = (void *)(v214 | 0x8000000000000000);
      object[1] = v207;
      object[2] = (void *)v206;
      v181 = v212;
      v177 = v211;
      v180 = v210;
      v183 = v209;
      v179 = v208;
    }
    else
    {
      HIBYTE(object[3]) = v206;
      if (!v206)
      {
LABEL_170:
        *((_BYTE *)v207 + v206) = 0;
        LOBYTE(object[4]) = 1;
        v215 = &object[5];
        if (v182 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v6 = a5;
        if (v182 >= 0x17)
        {
          v216 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v182 | 7) != 0x17)
            v216 = v182 | 7;
          v217 = v216 + 1;
          v215 = (void **)operator new(v216 + 1);
          object[7] = (void *)(v217 | 0x8000000000000000);
          object[5] = v215;
          object[6] = (void *)v182;
        }
        else
        {
          HIBYTE(object[7]) = v182;
          if (!v182)
            goto LABEL_178;
        }
        memmove(v215, v183, v182);
LABEL_178:
        *((_BYTE *)v215 + v182) = 0;
        LOBYTE(object[8]) = 1;
        v218 = object[0];
        if (SHIBYTE(object[7]) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v179 && *(_QWORD *)(v179 + 24))
        {
          v219 = _os_log_pack_size();
          v220 = (std::__shared_weak_count_vtbl *)operator new(v219, (std::align_val_t)8uLL);
          v221 = (std::__shared_weak_count *)operator new();
          v222 = v221;
          v221->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v221->__shared_owners_;
          v221->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v221->__shared_weak_owners_ = 0;
          v221[1].__vftable = v220;
          object[0] = v220;
          object[1] = v220;
          object[2] = v221;
          do
            v224 = __ldxr(p_shared_owners);
          while (__stxr(v224 + 1, p_shared_owners));
          memset(&object[3], 0, 24);
          do
            v225 = __ldaxr(p_shared_owners);
          while (__stlxr(v225 - 1, p_shared_owners));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v222);
          }
          v226 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v227 = (char *)operator new();
          v228 = *(unsigned __int8 *)(v180 + 39);
          if ((v228 & 0x80u) == 0)
            v229 = v181;
          else
            v229 = *(_QWORD *)(v180 + 16);
          if ((v228 & 0x80u) != 0)
            v228 = *(_QWORD *)(v180 + 24);
          *(_QWORD *)v227 = v226;
          *(_OWORD *)(v227 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v227 + 24) = *(_OWORD *)&object[3];
          object[3] = 0;
          object[4] = 0;
          *((_QWORD *)v227 + 5) = v229;
          *((_QWORD *)v227 + 6) = v228;
          v227[56] = 16;
          v459.__r_.__value_.__r.__words[0] = 0;
          v455 = v227;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v179 + 24) + 40))(*(_QWORD *)(v179 + 24), &v455);
          v230 = v455;
          v455 = 0;
          if (v230)
          {
            v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
            if (v231)
            {
              v232 = (unint64_t *)&v231->__shared_owners_;
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
            if (v234)
            {
              v235 = (unint64_t *)&v234->__shared_owners_;
              do
                v236 = __ldaxr(v235);
              while (__stlxr(v236 - 1, v235));
              if (!v236)
              {
                ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                std::__shared_weak_count::__release_weak(v234);
              }
            }
            MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
            v237 = v459.__r_.__value_.__r.__words[0];
            v459.__r_.__value_.__r.__words[0] = 0;
            if (v237)
            {
              v238 = *(std::__shared_weak_count **)(v237 + 32);
              if (v238)
              {
                v239 = (unint64_t *)&v238->__shared_owners_;
                do
                  v240 = __ldaxr(v239);
                while (__stlxr(v240 - 1, v239));
                if (!v240)
                {
                  ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                  std::__shared_weak_count::__release_weak(v238);
                }
              }
              v241 = *(std::__shared_weak_count **)(v237 + 16);
              if (v241)
              {
                v242 = (unint64_t *)&v241->__shared_owners_;
                do
                  v243 = __ldaxr(v242);
                while (__stlxr(v243 - 1, v242));
                if (!v243)
                {
                  ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                  std::__shared_weak_count::__release_weak(v241);
                }
              }
              MEMORY[0x227684CE8](v237, 0x10F0C40B62ED6C6);
            }
          }
          v244 = (std::__shared_weak_count *)object[4];
          if (object[4])
          {
            v245 = (unint64_t *)((char *)object[4] + 8);
            do
              v246 = __ldaxr(v245);
            while (__stlxr(v246 - 1, v245));
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          v247 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v248 = (unint64_t *)((char *)object[2] + 8);
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 - 1, v248));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
        }
        else
        {
          os_log_type_enabled(v218, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v250 = (void *)_os_log_send_and_compose_impl();
          if (v250)
            free(v250);
        }
        if (v177)
        {
          sub_22322C138((uint64_t)v507, "Clipping volume is empty.");
          sub_223182C08((uint64_t)v507);
        }
        sub_223182C08((uint64_t)v507);
        v251 = (std::__shared_weak_count *)v508;
        if (!v508)
          goto LABEL_379;
        v252 = (unint64_t *)(v508 + 8);
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
LABEL_328:
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
        goto LABEL_379;
      }
    }
    memmove(v207, v205, v206);
    goto LABEL_170;
  }
  v8 = a2;
  if (*(_BYTE *)(a2 + 356))
    v9 = *(_BYTE *)(a2 + 384) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223678D14(object);
    if (*((char *)object[0] + 39) < 0)
    {
      v11 = (char *)*((_QWORD *)object[0] + 2);
      v12 = *((_QWORD *)object[0] + 3);
    }
    else
    {
      v11 = (char *)object[0] + 16;
      v12 = *((unsigned __int8 *)object[0] + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v11, v12, "To be clipped plane has no extents: obb-%s, convexhull-%s", 0x39uLL);
    sub_223678E08(&v476);
    if (**((int **)v476 + 7) > 5)
      goto LABEL_379;
    v185 = *((unsigned __int8 *)v476 + 72);
    v186 = sub_22322F254((uint64_t)v476, "OSLogSurrogateAppender", 1, 0);
    v187 = v186;
    if (!v185 && !v186)
      goto LABEL_379;
    v507[0].i64[0] = (uint64_t)&v476;
    *(std::chrono::steady_clock::time_point *)&v507[0].u32[2] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)v507[1].f32 = std::chrono::system_clock::now();
    v507[1].i32[2] = 5;
    v507[2].i64[0] = (uint64_t)"unknown file";
    v507[2].i32[2] = 328;
    v508 = 0;
    v507[3].i64[0] = (uint64_t)"unknown function";
    v507[3].i64[1] = 0;
    if (*(_BYTE *)(v8 + 356))
      v188 = "exist";
    else
      v188 = "empty";
    v447 = (unsigned __int8 *)v188;
    if (*(_BYTE *)(v8 + 384))
      v189 = "exist";
    else
      v189 = "empty";
    v190 = *(_QWORD *)v507[0].i64[0];
    v191 = (const char *)(*(_QWORD *)v507[0].i64[0] + 16);
    v444 = v191;
    if (*(char *)(*(_QWORD *)v507[0].i64[0] + 39) < 0)
    {
      v191 = *(const char **)(v190 + 16);
      v192 = *(_QWORD *)(v190 + 24);
    }
    else
    {
      v192 = *(unsigned __int8 *)(*(_QWORD *)v507[0].i64[0] + 39);
    }
    v451 = v8;
    v254 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v254 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v255 = (const char *)&xmmword_255788F40;
    else
      v255 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v256 = byte_255788F57;
    else
      v256 = *((_QWORD *)&xmmword_255788F40 + 1);
    object[0] = os_log_create(v255, v191);
    v257 = &object[1];
    if (v256 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v256 >= 0x17)
    {
      v258 = v191;
      v259 = v187;
      v260 = v190;
      v261 = v189;
      v262 = v185;
      v263 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v256 | 7) != 0x17)
        v263 = v256 | 7;
      v264 = v263 + 1;
      v257 = (void **)operator new(v263 + 1);
      object[3] = (void *)(v264 | 0x8000000000000000);
      object[1] = v257;
      object[2] = (void *)v256;
      v185 = v262;
      v189 = v261;
      v190 = v260;
      v187 = v259;
      v191 = v258;
    }
    else
    {
      HIBYTE(object[3]) = v256;
      if (!v256)
      {
LABEL_255:
        *((_BYTE *)v257 + v256) = 0;
        LOBYTE(object[4]) = 1;
        v265 = &object[5];
        if (v192 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v266 = v451;
        if (v192 >= 0x17)
        {
          v267 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v192 | 7) != 0x17)
            v267 = v192 | 7;
          v268 = v267 + 1;
          v265 = (void **)operator new(v267 + 1);
          object[7] = (void *)(v268 | 0x8000000000000000);
          object[5] = v265;
          object[6] = (void *)v192;
          v6 = a5;
        }
        else
        {
          HIBYTE(object[7]) = v192;
          v6 = a5;
          if (!v192)
            goto LABEL_263;
        }
        memmove(v265, v191, v192);
LABEL_263:
        *((_BYTE *)v265 + v192) = 0;
        LOBYTE(object[8]) = 1;
        v269 = object[0];
        if (SHIBYTE(object[7]) < 0)
          operator delete(object[5]);
        if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v187 && *(_QWORD *)(v187 + 24))
        {
          v270 = _os_log_pack_size();
          v271 = operator new(v270, (std::align_val_t)8uLL);
          v272 = (_QWORD *)operator new();
          v272[1] = 0;
          v273 = v272 + 1;
          *v272 = &off_24EC1F7F0;
          v272[2] = 0;
          v272[3] = v271;
          v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v271;
          v459.__r_.__value_.__l.__size_ = (std::string::size_type)v271;
          v460 = 0;
          v461 = 0;
          v459.__r_.__value_.__r.__words[2] = (std::string::size_type)v272;
          v274 = (void *)(*(unsigned int *)v447 | ((unint64_t)v447[4] << 32));
          v275 = (void *)(*(unsigned int *)v189 | ((unint64_t)*((unsigned __int8 *)v189 + 4) << 32));
          object[0] = off_24EC20780;
          object[1] = v274;
          HIBYTE(object[3]) = 5;
          object[4] = v275;
          HIBYTE(object[6]) = 5;
          v276 = (char *)operator new(0x50uLL);
          v277 = (std::__shared_weak_count *)v276;
          *((_QWORD *)v276 + 1) = 0;
          v278 = (unint64_t *)(v276 + 8);
          *((_QWORD *)v276 + 2) = 0;
          *((_QWORD *)v276 + 3) = off_24EC20780;
          *(_QWORD *)v276 = &off_24EC20730;
          *((_OWORD *)v276 + 2) = *(_OWORD *)&object[1];
          *((void **)v276 + 6) = object[3];
          *(_OWORD *)(v276 + 56) = *(_OWORD *)&object[4];
          *((void **)v276 + 9) = object[6];
          v460 = v276 + 24;
          v461 = v276;
          v455 = v271;
          *(_QWORD *)&v456 = v271;
          *((_QWORD *)&v456 + 1) = v272;
          do
            v279 = __ldxr(v273);
          while (__stxr(v279 + 1, v273));
          *(_QWORD *)&v457 = v276 + 24;
          *((_QWORD *)&v457 + 1) = v276;
          do
            v280 = __ldxr(v278);
          while (__stxr(v280 + 1, v278));
          v458 = v276 + 24;
          do
            v281 = __ldaxr(v278);
          while (__stlxr(v281 - 1, v278));
          if (!v281)
          {
            (*(void (**)(char *))(*(_QWORD *)v276 + 16))(v276);
            std::__shared_weak_count::__release_weak(v277);
          }
          if (v459.__r_.__value_.__r.__words[2])
          {
            v282 = (unint64_t *)(v459.__r_.__value_.__r.__words[2] + 8);
            do
              v283 = __ldaxr(v282);
            while (__stlxr(v283 - 1, v282));
            if (!v283)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)v459.__r_.__value_.__r.__words[2] + 16))(v459.__r_.__value_.__r.__words[2]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v459.__r_.__value_.__r.__words[2]);
            }
          }
          v284 = v455;
          if (v458[31] >= 0)
            v285 = v458 + 8;
          else
            v285 = (char *)*((_QWORD *)v458 + 1);
          if (v458[55] >= 0)
            v286 = v458 + 32;
          else
            v286 = (char *)*((_QWORD *)v458 + 4);
          v287 = _os_log_pack_fill();
          *(_DWORD *)v287 = 136315394;
          *(_QWORD *)(v287 + 4) = v285;
          *(_WORD *)(v287 + 12) = 2080;
          *(_QWORD *)(v287 + 14) = v286;
          v288 = (char *)operator new();
          v289 = *(unsigned __int8 *)(v190 + 39);
          v290 = v444;
          if ((v289 & 0x80u) != 0)
          {
            v290 = *(const char **)(v190 + 16);
            v289 = *(_QWORD *)(v190 + 24);
          }
          *(_QWORD *)v288 = v284;
          *(_OWORD *)(v288 + 8) = v456;
          v456 = 0uLL;
          *(_OWORD *)(v288 + 24) = v457;
          v457 = 0uLL;
          *((_QWORD *)v288 + 5) = v290;
          *((_QWORD *)v288 + 6) = v289;
          v288[56] = 16;
          v459.__r_.__value_.__r.__words[0] = 0;
          object[0] = v288;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v187 + 24) + 40))(*(_QWORD *)(v187 + 24), object);
          v6 = a5;
          v291 = object[0];
          object[0] = 0;
          v266 = v451;
          if (v291)
          {
            v292 = (std::__shared_weak_count *)*((_QWORD *)v291 + 4);
            if (v292)
            {
              v293 = (unint64_t *)&v292->__shared_owners_;
              do
                v294 = __ldaxr(v293);
              while (__stlxr(v294 - 1, v293));
              if (!v294)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
            v295 = (std::__shared_weak_count *)*((_QWORD *)v291 + 2);
            if (v295)
            {
              v296 = (unint64_t *)&v295->__shared_owners_;
              do
                v297 = __ldaxr(v296);
              while (__stlxr(v297 - 1, v296));
              if (!v297)
              {
                ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                std::__shared_weak_count::__release_weak(v295);
              }
            }
            MEMORY[0x227684CE8](v291, 0x10F0C40B62ED6C6);
            v459.__r_.__value_.__r.__words[0] = 0;
          }
          if (*((_QWORD *)&v457 + 1))
          {
            v298 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v457 + 1) + 16))(*((_QWORD *)&v457 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v457 + 1));
            }
          }
          if (*((_QWORD *)&v456 + 1))
          {
            v300 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v456 + 1) + 16))(*((_QWORD *)&v456 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v456 + 1));
            }
          }
        }
        else
        {
          os_log_type_enabled(v269, OS_LOG_TYPE_ERROR);
          LODWORD(object[0]) = 136315394;
          *(void **)((char *)object + 4) = v447;
          WORD2(object[1]) = 2080;
          *(void **)((char *)&object[1] + 6) = (void *)v189;
          v302 = (void *)_os_log_send_and_compose_impl();
          if (v302)
            free(v302);
        }
        if (v185)
        {
          if (*(_BYTE *)(v266 + 356))
            v303 = "exist";
          else
            v303 = "empty";
          if (*(_BYTE *)(v266 + 384))
            v304 = "exist";
          else
            v304 = "empty";
          sub_22322C138((uint64_t)v507, "To be clipped plane has no extents: obb-%s, convexhull-%s", v303, v304);
          sub_223182C08((uint64_t)v507);
        }
        sub_223182C08((uint64_t)v507);
        v251 = (std::__shared_weak_count *)v508;
        if (!v508)
          goto LABEL_379;
        v305 = (unint64_t *)(v508 + 8);
        do
          v253 = __ldaxr(v305);
        while (__stlxr(v253 - 1, v305));
        goto LABEL_328;
      }
    }
    memmove(v257, v255, v256);
    goto LABEL_255;
  }
  a6.n128_u64[0] = (unint64_t)*a3;
  v434 = (int32x4_t)a6;
  a6.n128_u32[2] = a3[1].u32[0];
  v445 = (int32x4_t)a6;
  a6.n128_u64[0] = (unint64_t)a3[2];
  v432 = (int32x4_t)a6;
  a6.n128_u32[2] = a3[3].u32[0];
  v437 = (int32x4_t)a6;
  a6.n128_u32[0] = a3[5].u32[0];
  v449 = (float32x2_t)a6.n128_u64[0];
  a6.n128_u64[0] = (unint64_t)a3[4];
  v442 = a6;
  a6.n128_u64[0] = (unint64_t)a3[6];
  a6.n128_u32[2] = a3[7].u32[0];
  v440 = (float32x4_t)a6;
  v17 = (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3;
  v507[0].i64[0] = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
  v507[0].i64[1] = v17;
  v507[1] = 0uLL;
  v507[2].i32[0] = 728309924;
  kdebug_trace();
  v19 = v442;
  v19.n128_u32[2] = v449.i32[0];
  v20 = (float32x2_t)vzip1q_s32(v445, v437).u64[0];
  v21 = (int8x16_t)vnegq_f32(v440);
  v22 = vmul_n_f32(v20, *(float *)v21.i32);
  *(float32x2_t *)v23.f32 = v20;
  v23.i64[1] = v442.n128_u32[0];
  v24 = (int8x16_t)vtrn2q_s32(v445, v437);
  v24.i32[2] = v442.n128_i32[1];
  v25 = vzip2q_s32(v445, v437);
  v27 = (float32x4_t)v25;
  v27.i32[2] = v449.i32[0];
  *(float32x2_t *)v28.f32 = vmls_laneq_f32(vmls_lane_f32(v22, *(float32x2_t *)v24.i8, *(float32x2_t *)v440.f32, 1), *(float32x2_t *)v25.i8, v440, 2);
  v425 = (int8x16_t)v19;
  v26.i32[3] = 0;
  v26.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v24, 0).i32[3];
  *(uint64_t *)((char *)v26.i64 + 4) = vextq_s8(v24, v24, 4uLL).u64[0];
  v27.i64[1] = vdupq_laneq_s32((int32x4_t)v27, 2).u32[0];
  v28.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32((float32x2_t)v442.n128_u64[0], *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v442.n128_u64[0], 1), *(float32x2_t *)v440.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v449).u32[0]);
  v29 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)(v8 + 40))), v26, *(float32x2_t *)(v8 + 40), 1), v27, *(float32x4_t *)(v8 + 40), 2), v28, *(float32x4_t *)(v8 + 40), 3);
  v30 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)(v8 + 56))), v26, *(float32x2_t *)(v8 + 56), 1), v27, *(float32x4_t *)(v8 + 56), 2), v28, *(float32x4_t *)(v8 + 56), 3);
  v31 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)(v8 + 72))), v26, *(float32x2_t *)(v8 + 72), 1), v27, *(float32x4_t *)(v8 + 72), 2), v28, *(float32x4_t *)(v8 + 72), 3);
  v422 = v26;
  v423 = *(float32x2_t *)v25.i8;
  v424 = v28;
  v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)(v8 + 88))), v26, *(float32x2_t *)(v8 + 88), 1), v27, *(float32x4_t *)(v8 + 88), 2), v28, *(float32x4_t *)(v8 + 88), 3);
  v34 = *a1;
  v33 = a1[1];
  v35 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v36 = (float32x2_t)0x80000000800000;
  v37 = 3.4028e38;
  v38 = -3.4028e38;
  if (*a1 != v33)
  {
    v39 = *a1;
    do
    {
      if (*(float *)v39 < v37)
        v37 = *(float *)v39;
      if (v38 < *(float *)v39)
        v38 = *(float *)v39;
      v40 = *(float *)(v39 + 12);
      if (v40 < v37)
        v37 = *(float *)(v39 + 12);
      if (v38 < v40)
        v38 = *(float *)(v39 + 12);
      v41 = *(float32x2_t *)(v39 + 4);
      v42 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v35, v41), (int8x8_t)v41, (int8x8_t)v35);
      v43 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v41, v36), (int8x8_t)v41, (int8x8_t)v36);
      v28.i64[0] = *(_QWORD *)(v39 + 16);
      *(int32x2_t *)v27.f32 = vcgt_f32(v42, *(float32x2_t *)v28.f32);
      v35 = (float32x2_t)vbsl_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v28.f32, (int8x8_t)v42);
      v36 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v28.f32, v43), *(int8x8_t *)v28.f32, (int8x8_t)v43);
      v39 += 24;
    }
    while (v39 != v33);
  }
  v28.i32[0] = *(_DWORD *)(v8 + 324);
  v27.i32[0] = *(_DWORD *)(v8 + 328);
  *(float32x2_t *)v49.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v29.i8, v28.f32[0]), *(float32x2_t *)v30.i8, v27.f32[0]), 0, *(float32x2_t *)v31.i8);
  v44 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v45 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v46 = (float32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
  *(float32x2_t *)&v49.u32[2] = vmla_f32(vmla_f32(vmul_f32(v44, *(float32x2_t *)v28.f32), *(float32x2_t *)v27.f32, v45), 0, v46);
  v47 = vaddq_f32(v49, v32);
  v48 = fminf(v47.f32[1], 3.4028e38);
  v49.f32[0] = fminf(v47.f32[2], 3.4028e38);
  v27.i32[0] = *(_DWORD *)(v8 + 332);
  v18.i32[0] = *(_DWORD *)(v8 + 336);
  *(float32x2_t *)v50.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v29.i8, v27.f32[0]), *(float32x2_t *)v30.i8, v18.f32[0]), 0, *(float32x2_t *)v31.i8);
  *(float32x2_t *)&v50.u32[2] = vmla_f32(vmla_f32(vmul_f32(v44, *(float32x2_t *)v27.f32), v18, v45), 0, v46);
  v51 = (int8x16_t)vaddq_f32(v50, v32);
  if (*(float *)&v51.i32[1] < v48)
    v48 = *(float *)&v51.i32[1];
  v52 = *(float *)&v51.i32[2];
  if (*(float *)&v51.i32[2] >= v49.f32[0])
    v52 = v49.f32[0];
  v49.i32[0] = *(_DWORD *)(v8 + 340);
  v50.i32[0] = *(_DWORD *)(v8 + 344);
  *(float32x2_t *)v53.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v29.i8, v49.f32[0]), *(float32x2_t *)v30.i8, v50.f32[0]), 0, *(float32x2_t *)v31.i8);
  *(float32x2_t *)&v53.u32[2] = vmla_f32(vmla_f32(vmul_f32(v44, *(float32x2_t *)v49.f32), *(float32x2_t *)v50.f32, v45), 0, v46);
  v54 = (int8x16_t)vaddq_f32(v53, v32);
  if (*(float *)&v54.i32[1] < v48)
    v48 = *(float *)&v54.i32[1];
  if (*(float *)&v54.i32[2] < v52)
    v52 = *(float *)&v54.i32[2];
  v50.i32[0] = *(_DWORD *)(v8 + 348);
  v53.i32[0] = *(_DWORD *)(v8 + 352);
  *(float32x2_t *)v55.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v29.i8, v50.f32[0]), *(float32x2_t *)v30.i8, v53.f32[0]), 0, *(float32x2_t *)v31.i8);
  *(float32x2_t *)&v55.u32[2] = vmla_f32(vmla_f32(vmul_f32(v44, *(float32x2_t *)v50.f32), *(float32x2_t *)v53.f32, v45), 0, v46);
  v56 = (int8x16_t)vaddq_f32(v55, v32);
  if (*(float *)&v56.i32[1] >= v48)
    v57 = v48;
  else
    v57 = *(float *)&v56.i32[1];
  if (*(float *)&v56.i32[2] >= v52)
    v58 = v52;
  else
    v58 = *(float *)&v56.i32[2];
  if (v37 >= v38)
    goto LABEL_125;
  v59 = vcge_f32(v35, v36);
  if ((v59.i8[0] & 1) != 0 || (v59.i8[4] & 1) != 0)
    goto LABEL_125;
  v47.i32[3] = v47.i32[0];
  v60 = vmovn_s32(vcgtq_f32(v47, (float32x4_t)xmmword_2245F53C0));
  v60.i16[3] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_2245F53C0, v47)).i16[3];
  v61 = vbslq_s8((int8x16_t)vmovl_s16(v60), (int8x16_t)v47, (int8x16_t)xmmword_2245F53C0);
  v62 = (float32x4_t)v61;
  v62.i32[3] = v51.i32[0];
  v51.i32[3] = v51.i32[0];
  v63 = (float32x4_t)v51;
  v63.i32[3] = v61.i32[3];
  v64 = vbslq_s8((int8x16_t)vcgtq_f32(v63, v62), v51, v61);
  v65 = (float32x4_t)v64;
  v65.i32[3] = v54.i32[0];
  v54.i32[3] = v54.i32[0];
  v66 = (float32x4_t)v54;
  v66.i32[3] = v64.i32[3];
  v67 = vbslq_s8((int8x16_t)vcgtq_f32(v66, v65), v54, v64);
  v68 = (float32x4_t)v67;
  v68.i32[3] = v56.i32[0];
  v56.i32[3] = v56.i32[0];
  v69 = (float32x4_t)v56;
  v69.i32[3] = v67.i32[3];
  v70 = vbslq_s8((int8x16_t)vcgtq_f32(v69, v68), v56, v67);
  v430 = (float32x4_t)v70;
  v71 = v38 >= *(float *)&v70.i32[3] && v37 <= *(float *)v70.i32;
  v72 = !v71 || v36.f32[0] < v57;
  if (v72
    || (v73 = vcgt_f32(v35, (float32x2_t)vext_s8(*(int8x8_t *)v70.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), 4uLL)), (v73.i8[0] & 1) != 0)|| v36.f32[1] < v58|| (v73.i8[4] & 1) != 0)
  {
LABEL_125:
    LOBYTE(v455) = 0;
    LOBYTE(v457) = 0;
    goto LABEL_358;
  }
  v464 = 0;
  v465 = 0;
  v466 = 0;
  if (v34 == v33)
  {
    LOBYTE(v455) = 0;
    LOBYTE(v457) = 0;
    goto LABEL_358;
  }
  v74 = (float32x2_t)vtrn2q_s32(v29, v30).u64[0];
  v75 = (int8x16_t)vnegq_f32(v32);
  v76 = (float32x2_t)vzip2q_s32(v29, v30).u64[0];
  v446 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v30.i8), *(float *)v75.i32), v74, *(float32x2_t *)v32.f32, 1), v76, v32, 2);
  v450 = v76;
  v421 = (float32x2_t)vzip1q_s32(v434, v432).u64[0];
  v441 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v74, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v74, 1), 0xCuLL).u64[0];
  v443 = (float32x2_t)vzip1q_s32(v29, v30).u64[0];
  *(float32x2_t *)v79.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v30.i8), *(float *)v75.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v30.i8), *(float32x2_t *)v32.f32, 1), v76, v32, 2);
  v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1);
  v78 = (float32x4_t)vextq_s8(v75, v75, 8uLL);
  *(float32x2_t *)&v79.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v75.i8), v77, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v78.f32, v46);
  v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v425.i8, 1);
  v420 = (float32x2_t)vextq_s8(v425, v425, 8uLL).u64[0];
  v427 = v46;
  v428 = v31.i64[0];
  v419 = v33;
  v426 = v79;
  do
  {
    v78.i32[0] = *(_DWORD *)v34;
    v81 = *(float *)(v34 + 20);
    v82 = *(float32x4_t *)(v34 + 4);
    v83.i64[0] = vdupq_laneq_s32((int32x4_t)v82, 3).u64[0];
    v84 = v78;
    v84.i32[1] = v82.i32[0];
    v85 = (int8x16_t)v84;
    *(float *)&v85.i32[2] = v81;
    v86 = v78;
    v86.i32[1] = v82.i32[3];
    v87 = (int8x16_t)v86;
    *(float *)&v87.i32[2] = v81;
    v88 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL);
    v89 = v82;
    v89.i32[0] = v82.i32[3];
    v90 = v89;
    v90.i32[3] = v82.i32[0];
    *(int8x16_t *)object = v88;
    *(float32x4_t *)&object[2] = v90;
    *(float *)&object[4] = v81;
    v92 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v82, 2);
    v92.i32[1] = v82.i32[3];
    v91 = (float32x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
    *(float *)&v92.i32[2] = v81;
    v93 = vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v78.f32);
    *(float32x2_t *)v94.f32 = vmla_lane_f32(vmla_f32(v93, *(float32x2_t *)v82.f32, v77), v46, *(float32x2_t *)v82.f32, 1);
    v94.i64[1] = v94.i64[0];
    *(float32x2_t *)&v83.u32[2] = vmla_lane_f32(vmla_f32(v93, *(float32x2_t *)v83.f32, v77), v46, *(float32x2_t *)v82.f32, 1);
    v95 = vaddq_f32(v79, v83);
    if (COERCE_FLOAT(vaddq_f32(v94, v79).i32[2]) >= 0.0)
    {
      if (v95.f32[2] >= 0.0)
      {
        v105 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v78.f32), v77, *(float32x2_t *)v84.f32, 1);
        v106.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
        *(float32x2_t *)&v106.u32[2] = vmla_f32(v105, *(float32x2_t *)v106.f32, v46);
        if (COERCE_FLOAT(vaddq_f32(v79, v106).i32[2]) >= 0.0)
        {
          v107 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v78.f32), v77, *(float32x2_t *)v86.f32, 1);
          v108.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
          *(float32x2_t *)&v108.u32[2] = vmla_f32(v107, *(float32x2_t *)v108.f32, v46);
          if (COERCE_FLOAT(vaddq_f32(v79, v108).i32[2]) >= 0.0)
          {
            v109.i64[0] = vextq_s8(*(int8x16_t *)object, *(int8x16_t *)object, 8uLL).u64[0];
            v110 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)object[0]), v77, (float32x2_t)object[0], 1), *(float32x2_t *)v109.f32, v46);
            *(float32x2_t *)&v109.u32[2] = v110;
            if (COERCE_FLOAT(vaddq_f32(v79, v109).i32[2]) >= 0.0)
            {
              v111.i64[0] = *(uint64_t *)((char *)&object[1] + 4);
              v110.i32[0] = HIDWORD(object[2]);
              *(float32x2_t *)&v111.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)((char *)&object[1] + 4)), v77, *(float32x2_t *)((char *)&object[1] + 4), 1), v110, v46);
              if (COERCE_FLOAT(vaddq_f32(v79, v111).i32[2]) >= 0.0)
              {
                v112.i64[0] = (uint64_t)object[3];
                v110.i32[0] = (__int32)object[4];
                *(float32x2_t *)&v112.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)object[3]), v77, (float32x2_t)object[3], 1), v110, v46);
                if (COERCE_FLOAT(vaddq_f32(v79, v112).i32[2]) >= 0.0)
                {
                  v113.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
                  *(float32x2_t *)&v113.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(*(float32x2_t *)v31.i8, v91), v77, v82, 3), *(float32x2_t *)v113.f32, v46);
                  if (COERCE_FLOAT(vaddq_f32(v79, v113).i32[2]) >= 0.0)
                    goto LABEL_54;
                }
              }
            }
          }
        }
      }
    }
    else if (v95.f32[2] < 0.0)
    {
      v96 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v78.f32), v77, *(float32x2_t *)v84.f32, 1);
      v97.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
      *(float32x2_t *)&v97.u32[2] = vmla_f32(v96, *(float32x2_t *)v97.f32, v46);
      if (COERCE_FLOAT(vaddq_f32(v79, v97).i32[2]) < 0.0)
      {
        v98 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v78.f32), v77, *(float32x2_t *)v86.f32, 1);
        v99.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
        *(float32x2_t *)&v99.u32[2] = vmla_f32(v98, *(float32x2_t *)v99.f32, v46);
        if (COERCE_FLOAT(vaddq_f32(v79, v99).i32[2]) < 0.0)
        {
          v100.i64[0] = vextq_s8(*(int8x16_t *)object, *(int8x16_t *)object, 8uLL).u64[0];
          v101 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)object[0]), v77, (float32x2_t)object[0], 1), *(float32x2_t *)v100.f32, v46);
          *(float32x2_t *)&v100.u32[2] = v101;
          if (COERCE_FLOAT(vaddq_f32(v79, v100).i32[2]) < 0.0)
          {
            v102.i64[0] = *(uint64_t *)((char *)&object[1] + 4);
            v101.i32[0] = HIDWORD(object[2]);
            *(float32x2_t *)&v102.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)((char *)&object[1] + 4)), v77, *(float32x2_t *)((char *)&object[1] + 4), 1), v101, v46);
            if (COERCE_FLOAT(vaddq_f32(v79, v102).i32[2]) < 0.0)
            {
              v103.i64[0] = (uint64_t)object[3];
              v101.i32[0] = (__int32)object[4];
              *(float32x2_t *)&v103.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)object[3]), v77, (float32x2_t)object[3], 1), v101, v46);
              if (COERCE_FLOAT(vaddq_f32(v79, v103).i32[2]) < 0.0)
              {
                v104.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
                *(float32x2_t *)&v104.u32[2] = vmla_f32(vmla_laneq_f32(vmul_f32(*(float32x2_t *)v31.i8, v91), v77, v82, 3), *(float32x2_t *)v104.f32, v46);
                if (COERCE_FLOAT(vaddq_f32(v79, v104).i32[2]) < 0.0)
                  goto LABEL_54;
              }
            }
          }
        }
      }
    }
    v114 = (float32x4_t)v88;
    v114.i32[0] = v78.i32[0];
    v115 = vcgtq_f32(v114, v430);
    *(int16x4_t *)v115.i8 = vmovn_s32(v115);
    v115.i16[3] = vmovn_s32(vcgtq_f32(v430, v114)).i16[3];
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v115.i8, 0xFuLL))) & 1) == 0
      && v82.f32[3] >= v57
      && v81 >= v58)
    {
      v115.i64[0] = *(_QWORD *)(v8 + 16);
      v115.i32[2] = *(_DWORD *)(v8 + 24);
      v438 = (float32x4_t)v115;
      v115.i64[0] = *(_QWORD *)(v8 + 28);
      v116 = v8;
      v115.i32[2] = *(_DWORD *)(v8 + 36);
      v435 = (float32x4_t)v115;
      *(uint64_t *)((char *)object + 4) = v82.i64[0];
      HIDWORD(object[1]) = v82.i32[2];
      v117 = vuzp2q_s32((int32x4_t)v82, vzip1q_s32((int32x4_t)v82, (int32x4_t)v82));
      v118 = v117;
      v118.i32[1] = v78.i32[0];
      LODWORD(object[0]) = v78.i32[0];
      LODWORD(object[2]) = v82.i32[0];
      v118.i32[3] = v117.i32[0];
      *(int32x4_t *)((char *)&object[2] + 4) = v118;
      HIDWORD(object[4]) = v78.i32[0];
      LODWORD(object[5]) = v82.i32[3];
      *(int32x4_t *)((char *)&object[5] + 4) = v118;
      HIDWORD(object[7]) = v78.i32[0];
      object[8] = (void *)__PAIR64__(LODWORD(v81), v82.u32[0]);
      v481 = (float32x4_t)v88;
      *(_DWORD *)v482 = v82.i32[0];
      *(int8x16_t *)&v482[8] = v88;
      *(float32x4_t *)v483 = v90;
      *(float *)&v482[4] = v81;
      *(float *)&v483[16] = v81;
      *(_DWORD *)&v483[20] = v78.i32[0];
      *(_QWORD *)&v484 = __PAIR64__(LODWORD(v81), v82.u32[0]);
      *((_QWORD *)&v484 + 1) = __PAIR64__(v82.u32[0], v78.u32[0]);
      *(_QWORD *)&v485 = __PAIR64__(v78.u32[0], LODWORD(v81));
      *((_QWORD *)&v485 + 1) = __PAIR64__(LODWORD(v81), v82.u32[3]);
      *(_DWORD *)v486 = v78.i32[0];
      *(float32x4_t *)&v486[4] = v89;
      *(_DWORD *)&v486[20] = v82.i32[1];
      *(_DWORD *)&v486[24] = v78.i32[0];
      *(_DWORD *)&v486[28] = v82.i32[3];
      *(_QWORD *)&v487 = __PAIR64__(v78.u32[0], v82.u32[1]);
      *((_QWORD *)&v487 + 1) = __PAIR64__(LODWORD(v81), v82.u32[3]);
      *(int8x16_t *)v488 = vextq_s8((int8x16_t)v82, vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL), 8uLL);
      *(_DWORD *)&v488[16] = v82.i32[3];
      *(float *)&v488[20] = v81;
      *(float32x2_t *)&v489 = v91;
      *((_QWORD *)&v489 + 1) = __PAIR64__(v82.u32[2], LODWORD(v81));
      *(_QWORD *)&v490 = __PAIR64__(LODWORD(v81), v82.u32[0]);
      *((float32x2_t *)&v490 + 1) = v91;
      v491 = __PAIR64__(v78.u32[0], LODWORD(v81));
      *(_QWORD *)&v492 = __PAIR64__(LODWORD(v81), v82.u32[3]);
      memset(&v459, 0, sizeof(v459));
      v119 = (float32x2_t *)operator new(0x48uLL);
      v120 = (std::string::size_type)v119;
      v121 = 0;
      v134 = v422;
      *(float32x2_t *)v131.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v421, v435.f32[0]), *(float32x2_t *)v422.f32, *(float32x2_t *)v435.f32, 1), v423, v435, 2);
      v122 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v425.i8, *(float32x2_t *)v435.f32), v80, *(float32x2_t *)v435.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v435, (int8x16_t)v435, 8uLL), v420);
      v123 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 1);
      LODWORD(v124) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), v123, *(float32x2_t *)v131.f32, 1), v122, v122).u32[0];
      *(float32x2_t *)v125.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v421, v438.f32[0]), *(float32x2_t *)v422.f32, *(float32x2_t *)v438.f32, 1), v423, v438, 2);
      *(float32x2_t *)&v125.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v425.i8, *(float32x2_t *)v438.f32), v80, *(float32x2_t *)v438.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v438, (int8x16_t)v438, 8uLL), v420);
      v126 = (int8x16_t)vaddq_f32(v125, v424);
      v127.i32[0] = 1.0;
      v134.f32[0] = 1.0 / sqrtf(v124);
      v128 = vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v134.f32);
      v129 = vmul_lane_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v131.f32, 1);
      v130 = vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v131.f32);
      *(float32x2_t *)&v131.u32[2] = v122;
      v132 = (float32x2_t)vextq_s8(v126, v126, 8uLL).u64[0];
      v133 = vmulq_n_f32(v131, v134.f32[0]);
      *(float32x2_t *)v134.f32 = vmul_f32(v122, *(float32x2_t *)v134.f32);
      v135 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 1);
      v136 = (float32x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
      *(float32x2_t *)v137.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v128, *(float32x2_t *)v133.f32), v129, *(float32x2_t *)v133.f32, 1), v136, *(float32x2_t *)v134.f32);
      v138.f32[0] = v137.f32[0] + -1.0;
      if (v137.f32[0] < 1.0)
        v138.f32[0] = 1.0 - v137.f32[0];
      v139 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v133.f32), v135, *(float32x2_t *)v126.i8, 1), v136, v132).u32[0];
      v135.f32[0] = sqrtf(v137.f32[0]);
      v140 = (int8x16_t)vmulq_n_f32(v133, 1.0 / v135.f32[0]);
      v141 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v140.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v140.i8, 1), *(float32x2_t *)v126.i8, 1);
      v143 = (float32x4_t)vextq_s8(v140, v140, 8uLL);
      v142 = vmla_f32(v141, *(float32x2_t *)v143.f32, v132).u32[0];
      v143.i32[0] = 897988541;
      if (v138.f32[0] <= 0.000001)
        v142 = v139;
      v144 = (std::string::size_type)&v119[9];
      if (v137.f32[0] != 1.0)
        v139 = v142;
      v72 = v124 < 1.0;
      v145 = v124 == 1.0;
      v146 = v124 + -1.0;
      v147 = 1.0 - v124;
      if (!v72)
        v147 = v146;
      v71 = v147 > 0.000001;
      v148 = vmla_f32(vmla_lane_f32(v130, v123, *(float32x2_t *)v126.i8, 1), v122, v132).u32[0];
      *(int32x2_t *)v149.i8 = vzip1_s32((int32x2_t)v128, (int32x2_t)v129);
      v149.i64[1] = v134.i64[0];
      v150 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_f32(v137, v127), 0);
      v151 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v143, v138)), 0);
      v152 = (int8x16_t)vdivq_f32(v133, (float32x4_t)vdupq_lane_s32((int32x2_t)v135, 0));
      v153 = vbslq_s8(v150, (int8x16_t)v133, vbslq_s8(v151, v152, (int8x16_t)v133));
      v154 = (float32x4_t)vbslq_s8(v150, v149, vbslq_s8(v151, v152, v149));
      if (!v71)
        v145 = 1;
      v155 = !v145;
      if (v145)
        v156 = -1;
      else
        v156 = 0;
      v157 = (int8x16_t)vdupq_n_s32(v156);
      v158 = vbslq_s8(v157, (int8x16_t)v131, (int8x16_t)v154);
      if (v155)
        v159 = *(float *)&v139;
      else
        v159 = *(float *)&v148;
      v78 = (float32x4_t)vbslq_s8(v157, (int8x16_t)v131, v153);
      v160 = vmulq_n_f32(v78, v159);
      v161 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v158.i8, 1);
      v162 = (float32x2_t)vextq_s8(v158, v158, 8uLL).u64[0];
      v163 = object;
      v164 = v119;
      v436 = v160;
      v439 = v158.i64[0];
      v433 = v162;
      do
      {
        v154.i64[0] = *(uint64_t *)((char *)v163 + 12);
        v154.i32[2] = *((_DWORD *)v163 + 5);
        v134.i64[0] = (uint64_t)*v163;
        v134.i32[2] = *((_DWORD *)v163 + 2);
        v154 = vsubq_f32(v154, v134);
        *(float32x2_t *)v78.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v154.f32), v161, *(float32x2_t *)v154.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL), v162);
        if (fabsf(v78.f32[0]) >= 0.00000011921)
        {
          v165 = (int8x16_t)vsubq_f32(v134, v160);
          v166 = (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v165.i8), v161, *(float32x2_t *)v165.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL), v162).f32[0]/ v78.f32[0];
          if (v166 >= 0.0 && v166 <= v127.f32[0])
          {
            v134 = vmlaq_n_f32(v134, v154, v166);
            if (v120 < v144)
            {
              *(_DWORD *)(v120 + 8) = v134.i32[2];
              *(_QWORD *)v120 = v134.i64[0];
              v120 += 12;
            }
            else
            {
              v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - (_QWORD)v164) >> 2) + 1;
              if (v168 > 0x1555555555555555)
              {
                v459.__r_.__value_.__l.__size_ = v120;
                v459.__r_.__value_.__r.__words[2] = v144;
                v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
                sub_22316E078();
              }
              if (0x5555555555555556 * ((uint64_t)(v144 - (_QWORD)v164) >> 2) > v168)
                v168 = 0x5555555555555556 * ((uint64_t)(v144 - (_QWORD)v164) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - (_QWORD)v164) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v169 = 0x1555555555555555;
              else
                v169 = v168;
              if (v169)
              {
                v431 = v134;
                if (v169 > 0x1555555555555555)
                {
                  v459.__r_.__value_.__r.__words[2] = v144;
                  v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
                  sub_223174E94();
                }
                v170 = (char *)operator new(12 * v169);
                v127.i32[0] = 1.0;
                v160 = v436;
                v158.i64[0] = v439;
                v134 = v431;
                v162 = v433;
              }
              else
              {
                v170 = 0;
              }
              v171 = &v170[4 * ((uint64_t)(v120 - (_QWORD)v164) >> 2)];
              *(_QWORD *)v171 = v134.i64[0];
              *((_DWORD *)v171 + 2) = v134.i32[2];
              for (i = (float32x2_t *)v171; (float32x2_t *)v120 != v164; i[1].i32[0] = v174)
              {
                v173 = *(float32x2_t *)(v120 - 12);
                v120 -= 12;
                v174 = *(_DWORD *)(v120 + 8);
                *(float32x2_t *)((char *)i - 12) = v173;
                i = (float32x2_t *)((char *)i - 12);
              }
              v144 = (std::string::size_type)&v170[12 * v169];
              v120 = (std::string::size_type)(v171 + 12);
              if (v164)
              {
                operator delete(v164);
                v162 = v433;
                v160 = v436;
                v158.i64[0] = v439;
                v127.i32[0] = 1.0;
              }
              v164 = i;
            }
          }
        }
        ++v121;
        v163 = &object[3 * v121];
      }
      while (v121 != 12);
      v459.__r_.__value_.__l.__size_ = v120;
      v459.__r_.__value_.__r.__words[2] = v144;
      v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
      if (v164 == (float32x2_t *)v120)
      {
        v164 = (float32x2_t *)v120;
        v8 = v116;
        v46 = v427;
        v31.i64[0] = v428;
        v79 = v426;
        if (v120)
          goto LABEL_124;
      }
      else
      {
        memset(object, 0, 24);
        if ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - (_QWORD)v164) >> 2)) >> 61)
          sub_22316E078();
        v8 = v116;
        object[0] = operator new(0x5555555555555558 * ((uint64_t)(v120 - (_QWORD)v164) >> 2));
        object[1] = object[0];
        object[2] = (char *)object[0] + 0x5555555555555558 * ((uint64_t)(v120 - (_QWORD)v164) >> 2);
        v476 = object;
        v175 = v164;
        do
        {
          v473 = (void *)vadd_f32(v446, vmla_n_f32(vmla_lane_f32(vmul_n_f32(v443, COERCE_FLOAT(*v175)), v441, *v175, 1), v450, v175[1].f32[0]));
          sub_2232EA538((void ***)&v476, &v473);
          v175 = (float32x2_t *)((char *)v175 + 12);
        }
        while (v175 != (float32x2_t *)v120);
        v176 = object[0];
        sub_22367C3A8((unint64_t *)&v464, (uint64_t)v465, (char *)object[0], (char *)object[1], ((char *)object[1] - (char *)object[0]) >> 3);
        if (v176)
          operator delete(v176);
        v46 = v427;
        v31.i64[0] = v428;
        v79 = v426;
        if (!v164)
          goto LABEL_53;
LABEL_124:
        v459.__r_.__value_.__l.__size_ = (std::string::size_type)v164;
        operator delete(v164);
        v79 = v426;
        v46 = v427;
        v31.i64[0] = v428;
      }
LABEL_53:
      v6 = a5;
      v33 = v419;
    }
LABEL_54:
    v34 += 24;
  }
  while (v34 != v33);
  v194 = v464;
  v193 = (uint64_t)v465;
  if (v464 == v465)
  {
    LOBYTE(v455) = 0;
    LOBYTE(v457) = 0;
    if (v464)
      goto LABEL_357;
  }
  else
  {
    if (!v464
      && v465
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223FBEADC((v193 - (uint64_t)v194) >> 3, v194, (uint64_t)object);
    v195 = object[0];
    v196 = object[1];
    v198 = *(_BYTE **)(v8 + 360);
    v197 = *(_BYTE **)(v8 + 368);
    v476 = 0;
    v477 = 0uLL;
    v199 = v197 - v198;
    if (v197 == v198)
    {
      v201 = 0;
      v203 = 0;
      v200 = 0;
    }
    else
    {
      if (v199 < 0)
        sub_22316E078();
      v200 = operator new(v197 - v198);
      v201 = (std::string::size_type)v200 + 8 * (v199 >> 3);
      v202 = v199 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v200, v198, v202);
      v203 = (std::string::size_type)v200 + v202;
    }
    v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
    v459.__r_.__value_.__l.__size_ = v203;
    v459.__r_.__value_.__r.__words[2] = v201;
    v476 = 0;
    v477 = 0uLL;
    v472 = 0;
    v470 = 0;
    v471 = 0;
    v306 = v196 - v195;
    if (v196 == v195)
    {
      v308 = 0;
      v310 = 0;
      v307 = 0;
    }
    else
    {
      if (v306 < 0)
        sub_22316E078();
      v307 = (char *)operator new(v196 - v195);
      v308 = &v307[8 * (v306 >> 3)];
      v309 = v306 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v307, v195, v309);
      v310 = &v307[v309];
    }
    v473 = v307;
    v474 = (uint64_t)v310;
    v475 = v308;
    v472 = 0;
    v470 = 0;
    v471 = 0;
    v467 = 0;
    v468 = 0;
    v469 = 0;
    sub_2233EB9D0((float32x2_t **)&v459, (float32x2_t **)&v473, (uint64_t)object);
    sub_22367C92C((float **)&v459, (float **)&v473, object, (uint64_t)&v467, &v478, &v479);
    v463 = 0uLL;
    v462 = 0;
    v312 = (char **)v467;
    v311 = v468;
    if (v467 != v468)
    {
      do
      {
        sub_22369E588((unint64_t *)&v462, v312);
        v312 += 3;
      }
      while (v312 != v311);
      v312 = (char **)v467;
    }
    if (v312)
    {
      v313 = v468;
      v314 = v312;
      if (v468 != v312)
      {
        v315 = v468;
        do
        {
          v317 = *(v315 - 3);
          v315 -= 3;
          v316 = v317;
          if (v317)
          {
            *(v313 - 2) = v316;
            operator delete(v316);
          }
          v313 = v315;
        }
        while (v315 != v312);
        v314 = v467;
      }
      v468 = v312;
      operator delete(v314);
    }
    if (v473)
    {
      v474 = (uint64_t)v473;
      operator delete(v473);
    }
    v6 = a5;
    if (v459.__r_.__value_.__r.__words[0])
    {
      v459.__r_.__value_.__l.__size_ = v459.__r_.__value_.__r.__words[0];
      operator delete(v459.__r_.__value_.__l.__data_);
    }
    if (v462 == (void *)v463)
    {
      LOBYTE(v455) = 0;
      LOBYTE(v457) = 0;
      if (v462)
      {
        *(_QWORD *)&v463 = v462;
        operator delete(v462);
      }
    }
    else
    {
      v455 = v462;
      v456 = v463;
      LOBYTE(v457) = 1;
    }
    if (v195)
      operator delete(v195);
    v194 = v464;
    if (v464)
    {
LABEL_357:
      v465 = v194;
      operator delete(v194);
    }
  }
LABEL_358:
  kdebug_trace();
  if (!(_BYTE)v457)
  {
LABEL_379:
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 464) = 0;
    return;
  }
  sub_223249DC0((uint64_t)object, v8);
  sub_223331FC0((uint64_t)v498, (uint64_t)&v455);
  sub_22369E650(v456, (float32x2_t *)v455, 0, 0, v507);
  *(_QWORD *)&v496[0] = v507[0].i64[0];
  v321.i32[3] = v507[1].i32[1];
  v322 = a4;
  if (!v497)
  {
    v497 = 1;
    *(float32x4_t *)((char *)v496 + 8) = *(float32x4_t *)((char *)v507 + 8);
    *((_QWORD *)&v496[1] + 1) = v507[1].i64[1];
    v323 = (float *)v455;
    v324 = (float *)v456;
    if (v455 != (void *)v456)
      goto LABEL_361;
LABEL_382:
    v326 = 0.0;
    v325 = 0.0;
    v494.i64[0] = 0;
    if (v495)
      goto LABEL_372;
    goto LABEL_383;
  }
  *(float32x4_t *)((char *)v496 + 8) = *(float32x4_t *)((char *)v507 + 8);
  *((_QWORD *)&v496[1] + 1) = v507[1].i64[1];
  v323 = (float *)v455;
  v324 = (float *)v456;
  if (v455 == (void *)v456)
    goto LABEL_382;
LABEL_361:
  v326 = *v323;
  v325 = v323[1];
  v327 = v325;
  v328 = *v323;
  do
  {
    v329 = *v323;
    v330 = v323[1];
    v323 += 2;
    if (v329 < v328)
      v328 = v329;
    if (v330 < v327)
      v327 = v330;
    if (v326 < v329)
      v326 = v329;
    if (v325 < v330)
      v325 = v330;
  }
  while (v323 != v324);
  v494.i64[0] = __PAIR64__(LODWORD(v327), LODWORD(v328));
  if (v495)
  {
LABEL_372:
    v494.i64[1] = __PAIR64__(LODWORD(v325), LODWORD(v326));
    if (v505)
      goto LABEL_373;
LABEL_384:
    if (v502)
      goto LABEL_385;
LABEL_392:
    v337 = 0;
    if (v322[1].i8[4])
      goto LABEL_393;
LABEL_406:
    v349 = 1;
    goto LABEL_407;
  }
LABEL_383:
  v495 = 1;
  v494.i64[1] = __PAIR64__(LODWORD(v325), LODWORD(v326));
  if (!v505)
    goto LABEL_384;
LABEL_373:
  v331 = (char *)v503;
  if (v503)
  {
    v332 = (char *)v504;
    v333 = v503;
    if ((void *)v504 != v503)
    {
      v334 = (char *)v504;
      do
      {
        v336 = (void *)*((_QWORD *)v334 - 3);
        v334 -= 24;
        v335 = v336;
        if (v336)
        {
          *((_QWORD *)v332 - 2) = v335;
          operator delete(v335);
        }
        v332 = v334;
      }
      while (v334 != v331);
      v333 = v503;
    }
    *(_QWORD *)&v504 = v331;
    operator delete(v333);
    v322 = a4;
  }
  v505 = 0;
  if (!v502)
    goto LABEL_392;
LABEL_385:
  if (v500)
  {
    *(_QWORD *)&v501 = v500;
    operator delete(v500);
    v322 = a4;
  }
  v502 = 0;
  v337 = 0;
  if (!v322[1].i8[4])
    goto LABEL_406;
LABEL_393:
  v338 = v322->f32[0];
  if (v322->f32[0] == *(float *)&object[2])
    goto LABEL_404;
  v339 = v338 - *(float *)&object[2];
  v340 = *(float *)&object[2] - v338;
  if (v322->f32[0] >= *(float *)&object[2])
    v340 = v339;
  if (v340 <= 0.000001)
  {
LABEL_404:
    v341 = v322->f32[1];
    v342 = v341 < *((float *)&object[2] + 1);
    if (v341 == *((float *)&object[2] + 1))
      goto LABEL_524;
    v343 = v341 - *((float *)&object[2] + 1);
    v344 = *((float *)&object[2] + 1) - v341;
    if (!v342)
      v344 = v343;
    if (v344 <= 0.000001)
    {
LABEL_524:
      v345 = v322[1].f32[0];
      v346 = v345 < *(float *)&object[3];
      if (v345 == *(float *)&object[3])
        goto LABEL_406;
      v347 = v345 - *(float *)&object[3];
      v348 = *(float *)&object[3] - v345;
      if (!v346)
        v348 = v347;
      if (v348 <= 0.000001)
        goto LABEL_406;
    }
  }
  v349 = 0;
  v321.i64[0] = (uint64_t)object[5];
  v318.i64[0] = (uint64_t)object[7];
  v350 = (float32x2_t)vzip1_s32((int32x2_t)object[5], (int32x2_t)object[7]);
  v321.i32[2] = (__int32)object[6];
  v318.i32[2] = (__int32)object[8];
  v351 = (float32x2_t)vtrn2q_s32(v321, v318).u64[0];
  v320.i64[0] = *(_QWORD *)v482;
  v320.i32[2] = *(_DWORD *)&v482[8];
  v352 = (float32x2_t)vzip2q_s32(v321, v318).u64[0];
  v353 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v350, vnegq_f32(v320).f32[0]), v351, *(float32x2_t *)v482, 1), v352, v320, 2);
  v319 = vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v351, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v351, 1), 0xCuLL);
  v337 = vadd_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(v350, COERCE_FLOAT(*v322)), *(float32x2_t *)v319.i8, *v322, 1), v352, v322[1].f32[0]), v353);
LABEL_407:
  *(float32x2_t *)v354.f32 = v337;
  *(float32x2_t *)&v354.u32[2] = v337;
  v355 = vmovn_s32(vcgeq_f32(v494, v354));
  v360 = (float32x4_t)vcgeq_f32(v354, v494);
  v360.i32[0] = vmovn_s32((int32x4_t)v360).u32[0];
  v360.i32[1] = v355.i32[1];
  v356 = (int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v360.f32), 0x1FuLL)), (int8x16_t)xmmword_2246496A0);
  v356.i32[0] = vaddvq_s32(v356);
  v357.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v357.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v319.i32[0] = 15;
  v358 = (float32x4_t)vceqq_s8(vandq_s8((int8x16_t)v356, v357), vandq_s8(v319, v357));
  v359 = vdupq_lane_s8(*(int8x8_t *)v358.f32, 0);
  *(int16x4_t *)v360.f32 = vcltz_s16(vshl_n_s16(*(int16x4_t *)v360.f32, 0xFuLL));
  v361 = v358.i8[0] & 0xF | (unint64_t)(16 * (v359.i8[1] & 0xF)) | ((v359.i8[2] & 0xF) << 8) & 0xFFF | ((v359.i8[3] & 0xFu) << 12) | ((unint64_t)(v359.i8[4] & 0xF) << 16) & 0xFFFFFFFFFF0FFFFFLL | ((unint64_t)(v359.i8[5] & 0xF) << 20) | ((unint64_t)(v359.i8[6] & 0xF) << 24) | ((unint64_t)(v359.i8[7] & 0xF) << 28) | ((unint64_t)(v359.i8[8] & 0xF) << 32) | ((unint64_t)(v359.i8[9] & 0xF) << 36) | ((unint64_t)(v359.i8[10] & 0xF) << 40) | ((unint64_t)(v359.i8[11] & 0xF) << 44) | ((unint64_t)(v359.i8[12] & 0xF) << 48) | ((unint64_t)(v359.i8[13] & 0xF) << 52) | ((unint64_t)(v359.i8[14] & 0xF) << 56) | ((unint64_t)v359.u8[15] << 60);
  v362 = v494;
  if ((vminv_u16(*(uint16x4_t *)v360.f32) & 1) == 0 || (v349 & 1) == 0)
  {
    v452 = (int8x8_t)v337;
    v360.f32[0] = fabsf(*((float *)&object[4] + 1));
    if (v360.f32[0] <= 0.052336)
      v363 = 2;
    else
      v363 = 4;
    v358.i32[0] = 1065330231;
    if (v360.f32[0] >= 0.99863)
      v364 = 1;
    else
      v364 = v363;
    v365 = sub_223F2B7AC((uint64_t)&object[2], v364, v507, v360, v358);
    *(int8x8_t *)v365.f32 = vbsl_s8((int8x8_t)v361, v452, (int8x8_t)vmul_f32(vadd_f32(*(float32x2_t *)v362.f32, *(float32x2_t *)&v362.u32[2]), (float32x2_t)0x3F0000003F000000));
    *(float32x2_t *)v366.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v507[0].f32, v365.f32[0]), *(float32x2_t *)v507[1].f32, *(float32x2_t *)v365.f32, 1), 0, *(float32x2_t *)v507[2].f32);
    *(float32x2_t *)&v366.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v507[0], (int8x16_t)v507[0], 8uLL), *(float32x2_t *)v365.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v507[1], (int8x16_t)v507[1], 8uLL), *(float32x2_t *)v365.f32, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v507[2], (int8x16_t)v507[2], 8uLL));
    v367 = vaddq_f32(v366, v507[3]);
    LODWORD(object[3]) = v367.i32[2];
    object[2] = (void *)v367.i64[0];
    *(float32x2_t *)v494.f32 = vsub_f32(*(float32x2_t *)v494.f32, *(float32x2_t *)v365.f32);
    *(float32x2_t *)&v494.u32[2] = vsub_f32(*(float32x2_t *)&v494.u32[2], *(float32x2_t *)v365.f32);
    *(float32x2_t *)&v496[0] = vsub_f32(*(float32x2_t *)&v496[0], *(float32x2_t *)v365.f32);
    *((float32x2_t *)&v496[0] + 1) = vsub_f32(*(float32x2_t *)((char *)v496 + 8), *(float32x2_t *)v365.f32);
    *(float32x2_t *)&v496[1] = vsub_f32(*(float32x2_t *)&v496[1], *(float32x2_t *)v365.f32);
    *(float32x2_t *)v367.f32 = vsub_f32(*(float32x2_t *)((char *)&v496[1] + 8), *(float32x2_t *)v365.f32);
    *((_QWORD *)&v496[1] + 1) = v367.i64[0];
    if (v499)
    {
      *(float32x4_t *)((char *)&v507[1] + 4) = 0u;
      v507[2] = 0u;
      *(float32x4_t *)((char *)v507 + 4) = 0u;
      v507[0].i32[0] = 1065353216;
      v507[1].i32[1] = 1065353216;
      v507[2].i32[2] = 1065353216;
      *(float32x2_t *)v507[3].f32 = vneg_f32(*(float32x2_t *)v365.f32);
      v507[3].i64[1] = 0x3F80000000000000;
      sub_223FBB8C4((void ***)v498, (float32x2_t *)v507, (uint64_t)&v459);
      v365 = *(float32x4_t *)&v459.__r_.__value_.__l.__data_;
      v368 = (void *)v459.__r_.__value_.__r.__words[2];
      if (v498[0])
      {
        v498[1] = v498[0];
        v453 = *(float32x4_t *)&v459.__r_.__value_.__l.__data_;
        operator delete(v498[0]);
        v365 = v453;
      }
      *(float32x4_t *)v498 = v365;
      v498[2] = v368;
    }
    v365.f32[0] = fabsf(*((float *)&object[4] + 1));
    if (v365.f32[0] <= 0.052336)
      v369 = 2;
    else
      v369 = 4;
    v367.i32[0] = 1065330231;
    if (v365.f32[0] >= 0.99863)
      v370 = 1;
    else
      v370 = v369;
    sub_223F2B7AC((uint64_t)&object[2], v370, v507, v365, v367);
    *(float32x4_t *)&object[5] = v507[0];
    *(float32x4_t *)&object[7] = v507[1];
    v481 = v507[2];
    *(float32x4_t *)v482 = v507[3];
  }
  v476 = operator new(0x28uLL);
  v477 = xmmword_2245B8D20;
  strcpy((char *)v476, "KeyframePlanes.Privacy.ClippingVolume");
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_467;
  v371 = sub_2241471F8();
  v372 = v371[2];
  if (!v372)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v372 = v371[2];
  }
  v373 = *(_QWORD *)(v372 + 64);
  v374 = (std::mutex *)(v373 + 32);
  std::mutex::lock((std::mutex *)(v373 + 32));
  v376 = *(_QWORD *)(v373 + 96);
  v375 = *(_QWORD *)(v373 + 104);
  std::mutex::unlock(v374);
  if (v376 == v375)
    goto LABEL_467;
  v507[0].i64[0] = (uint64_t)"cv3d.recon.";
  v507[0].i64[1] = 11;
  v377 = HIBYTE(v477);
  v378 = &v476;
  if (v477 < 0)
  {
    v378 = v476;
    v377 = v477;
  }
  v507[1].i64[0] = (uint64_t)v378;
  v507[1].i64[1] = v377;
  sub_2231A9820((uint64_t)v507, (uint64_t)&v507[2], 0, 0, &v459);
  sub_2241471F8();
  v379 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v380 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v379 + 24))(v379);
  if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v459.__r_.__value_.__l.__data_);
  if ((v380 & 1) == 0)
    goto LABEL_467;
  v381 = *a1;
  v382 = a1[1];
  memset(&v459, 0, sizeof(v459));
  v448 = v382;
  v383 = v381;
  v384 = v382 - v381;
  v416 = a3;
  if (!v384)
  {
    v386 = 0;
    goto LABEL_463;
  }
  v385 = v384 >> 1;
  if ((unint64_t)(v384 >> 1) > 0xAAAAAAAAAAAAAAALL)
    sub_223323BA8();
  v386 = (char *)operator new(96 * (v384 >> 3));
  v387 = v383;
  v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v386;
  v459.__r_.__value_.__l.__size_ = (std::string::size_type)v386;
  v459.__r_.__value_.__r.__words[2] = (std::string::size_type)&v386[24 * v385];
  while (2)
  {
    v388 = 0;
    v389 = *(_DWORD *)v387;
    v390 = *(_DWORD *)(v387 + 20);
    v454 = v387;
    v391 = *(int32x4_t *)(v387 + 4);
    v522 = v391.i32[3];
    v526 = v391.i32[1];
    v530 = v391.i32[3];
    v533 = v391.i32[3];
    v542 = v391.i32[3];
    *(uint64_t *)((char *)v507[0].i64 + 4) = v391.i64[0];
    v392 = vextq_s8((int8x16_t)v391, (int8x16_t)v391, 8uLL).u64[0];
    v393 = __PAIR64__(v391.u32[1], HIDWORD(v392));
    v535 = v392;
    v539 = v392;
    HIDWORD(v392) = v391.i32[0];
    v394 = vuzp2q_s32(v391, vzip1q_s32(v391, v391));
    v395 = (float32x4_t)v394;
    v395.i32[1] = v389;
    v395.i32[3] = v394.i32[0];
    *(uint64_t *)((char *)&v507[0].i64[1] + 4) = v392;
    *(float32x4_t *)((char *)&v507[1] + 4) = v395;
    v507[0].i32[0] = v389;
    *(uint64_t *)((char *)v507[2].i64 + 4) = __PAIR64__(v391.u32[3], v389);
    *(float32x4_t *)((char *)&v507[2] + 12) = v395;
    v507[3].i32[3] = v389;
    v508 = __PAIR64__(v390, v391.u32[0]);
    v396 = vextq_s8((int8x16_t)vuzp1q_s32(v391, v391), (int8x16_t)v391, 0xCuLL);
    v396.i32[3] = v396.i32[0];
    v509 = v396;
    v510 = v391.i32[0];
    v397 = v391;
    v397.i32[0] = v391.i32[3];
    v525 = v397;
    v397.i32[3] = v391.i32[0];
    v512 = v396;
    v513 = v397;
    v511 = v390;
    v514 = v390;
    v515 = v389;
    v516 = v391.i32[0];
    v517 = v390;
    v518 = v389;
    v519 = v391.i32[0];
    v520 = v390;
    v521 = v389;
    v523 = v390;
    v524 = v389;
    v527 = v389;
    v528 = v393;
    v529 = v389;
    v531 = v390;
    v532 = vextq_s8((int8x16_t)v391, vextq_s8((int8x16_t)v391, (int8x16_t)v391, 4uLL), 8uLL);
    v534 = v390;
    v537 = v392;
    v536 = v390;
    v538 = v390;
    v540 = v390;
    v541 = v389;
    v543 = v390;
    while (1)
    {
LABEL_442:
      while (1)
      {
        v400 = (char *)v507 + 24 * v388;
        if ((unint64_t)v386 >= v459.__r_.__value_.__r.__words[2])
          break;
        v398 = *(_QWORD *)v400;
        *((_DWORD *)v386 + 2) = *((_DWORD *)v400 + 2);
        *(_QWORD *)v386 = v398;
        v399 = *(_QWORD *)(v400 + 12);
        *((_DWORD *)v386 + 5) = *((_DWORD *)v400 + 5);
        *(_QWORD *)(v386 + 12) = v399;
        v386 += 24;
        v459.__r_.__value_.__l.__size_ = (std::string::size_type)v386;
        if (++v388 == 12)
          goto LABEL_439;
      }
      v401 = v459.__r_.__value_.__r.__words[0];
      v402 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v386[-v459.__r_.__value_.__r.__words[0]] >> 3);
      v403 = v402 + 1;
      if (v402 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_223323BA8();
      if (0x5555555555555556
         * ((uint64_t)(v459.__r_.__value_.__r.__words[2] - v459.__r_.__value_.__r.__words[0]) >> 3) > v403)
        v403 = 0x5555555555555556
             * ((uint64_t)(v459.__r_.__value_.__r.__words[2] - v459.__r_.__value_.__r.__words[0]) >> 3);
      v404 = 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v459.__r_.__value_.__r.__words[2] - v459.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555
           ? 0xAAAAAAAAAAAAAAALL
           : v403;
      if (v404)
      {
        if (v404 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v405 = operator new(24 * v404);
      }
      else
      {
        v405 = 0;
      }
      v406 = (std::string::size_type)v405 + 24 * v402;
      *(_QWORD *)v406 = *(_QWORD *)v400;
      *(_DWORD *)(v406 + 8) = *((_DWORD *)v400 + 2);
      *(_QWORD *)(v406 + 12) = *(_QWORD *)(v400 + 12);
      *(_DWORD *)(v406 + 20) = *((_DWORD *)v400 + 5);
      v407 = v406 + 24;
      if (v386 == (char *)v401)
        break;
      do
      {
        v408 = *((_QWORD *)v386 - 3);
        v386 -= 24;
        v409 = *((_DWORD *)v386 + 2);
        *(_QWORD *)(v406 - 24) = v408;
        v406 -= 24;
        *(_DWORD *)(v406 + 8) = v409;
        v410 = *(_QWORD *)(v386 + 12);
        *(_DWORD *)(v406 + 20) = *((_DWORD *)v386 + 5);
        *(_QWORD *)(v406 + 12) = v410;
      }
      while (v386 != (char *)v401);
      v386 = (char *)v459.__r_.__value_.__r.__words[0];
      v459.__r_.__value_.__r.__words[0] = v406;
      v459.__r_.__value_.__l.__size_ = v407;
      v459.__r_.__value_.__r.__words[2] = (std::string::size_type)v405 + 24 * v404;
      if (v386)
        goto LABEL_459;
      v386 = (char *)v407;
      v459.__r_.__value_.__l.__size_ = v407;
      if (++v388 == 12)
        goto LABEL_439;
    }
    v459.__r_.__value_.__r.__words[0] = (std::string::size_type)v405 + 24 * v402;
    v459.__r_.__value_.__l.__size_ = v406 + 24;
    v459.__r_.__value_.__r.__words[2] = (std::string::size_type)v405 + 24 * v404;
LABEL_459:
    operator delete(v386);
    v386 = (char *)v407;
    v459.__r_.__value_.__l.__size_ = v407;
    if (++v388 != 12)
      goto LABEL_442;
LABEL_439:
    v387 = v454 + 24;
    if (v454 + 24 != v448)
      continue;
    break;
  }
  v384 = v459.__r_.__value_.__r.__words[0];
  v6 = a5;
LABEL_463:
  v473 = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v386[-v384] >> 3));
  v474 = v384;
  v507[1].i8[7] = 4;
  strcpy((char *)v507, "mesh");
  sub_22373A83C(&v473, v416, (uint64_t)v507, (uint64_t)&v476);
  if (v507[1].i8[7] < 0)
    operator delete((void *)v507[0].i64[0]);
  if (v459.__r_.__value_.__r.__words[0])
  {
    v459.__r_.__value_.__l.__size_ = v459.__r_.__value_.__r.__words[0];
    operator delete(v459.__r_.__value_.__l.__data_);
  }
LABEL_467:
  if (SHIBYTE(v477) < 0)
    operator delete(v476);
  v507[0].i64[0] = (uint64_t)operator new(0x20uLL);
  *(float32x4_t *)((char *)v507 + 8) = (float32x4_t)xmmword_2245C6420;
  strcpy((char *)v507[0].i64[0], "KeyframePlanes.Privacy.Clipped");
  sub_22373C358((float32x2_t *)object, (const void **)v507);
  if (v507[1].i8[7] < 0)
    operator delete((void *)v507[0].i64[0]);
  *(void **)(v6 + 16) = object[2];
  v411 = HIDWORD(object[4]);
  *(_DWORD *)(v6 + 24) = object[3];
  *(void **)(v6 + 28) = *(void **)((char *)&object[3] + 4);
  *(_OWORD *)v6 = *(_OWORD *)object;
  *(_DWORD *)(v6 + 36) = v411;
  *(_OWORD *)(v6 + 88) = *(_OWORD *)v482;
  *(float32x4_t *)(v6 + 72) = v481;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&object[7];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&object[5];
  *(_QWORD *)(v6 + 104) = *(_QWORD *)&v482[16];
  *(_BYTE *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 216) = 0;
  if (v488[0])
  {
    *(_BYTE *)(v6 + 112) = v483[0];
    *(_OWORD *)(v6 + 152) = v485;
    *(_OWORD *)(v6 + 168) = *(_OWORD *)v486;
    *(_OWORD *)(v6 + 184) = *(_OWORD *)&v486[16];
    *(_OWORD *)(v6 + 200) = v487;
    *(_OWORD *)(v6 + 120) = *(_OWORD *)&v483[8];
    *(_OWORD *)(v6 + 136) = v484;
    *(_BYTE *)(v6 + 216) = 1;
  }
  v412 = v493;
  *(_QWORD *)(v6 + 272) = v491;
  v413 = v489;
  *(_OWORD *)(v6 + 224) = *(_OWORD *)&v488[8];
  *(_OWORD *)(v6 + 240) = v413;
  *(_OWORD *)(v6 + 256) = v490;
  *(_OWORD *)(v6 + 280) = v492;
  *(_QWORD *)(v6 + 296) = v412;
  v493 = 0;
  v492 = 0uLL;
  *(_BYTE *)(v6 + 304) = 0;
  *(_BYTE *)(v6 + 320) = 0;
  if (v495)
  {
    *(float32x4_t *)(v6 + 304) = v494;
    *(_BYTE *)(v6 + 320) = 1;
  }
  *(_BYTE *)(v6 + 324) = 0;
  *(_BYTE *)(v6 + 356) = 0;
  if (v497)
  {
    *(_OWORD *)(v6 + 324) = v496[0];
    *(_OWORD *)(v6 + 340) = v496[1];
    *(_BYTE *)(v6 + 356) = 1;
  }
  *(_BYTE *)(v6 + 360) = 0;
  *(_BYTE *)(v6 + 384) = 0;
  v414 = v499;
  if (v499)
  {
    *(void **)(v6 + 360) = v498[0];
    *(_OWORD *)(v6 + 368) = *(_OWORD *)&v498[1];
    memset(v498, 0, sizeof(v498));
    *(_BYTE *)(v6 + 384) = 1;
  }
  *(_BYTE *)(v6 + 392) = 0;
  *(_BYTE *)(v6 + 416) = 0;
  v415 = v502;
  if (v502)
  {
    *(_QWORD *)(v6 + 392) = v500;
    *(_OWORD *)(v6 + 400) = v501;
    v501 = 0uLL;
    v500 = 0;
    *(_BYTE *)(v6 + 416) = 1;
  }
  *(_BYTE *)(v6 + 424) = 0;
  *(_BYTE *)(v6 + 448) = 0;
  if (v505)
  {
    *(_QWORD *)(v6 + 424) = v503;
    *(_OWORD *)(v6 + 432) = v504;
    v504 = 0uLL;
    v503 = 0;
    *(_BYTE *)(v6 + 448) = 1;
  }
  *(_WORD *)(v6 + 456) = v506;
  *(_BYTE *)(v6 + 464) = 1;
  if (v415 && v500)
  {
    *(_QWORD *)&v501 = v500;
    operator delete(v500);
    v414 = v499;
  }
  if (v414 && v498[0])
  {
    v498[1] = v498[0];
    operator delete(v498[0]);
  }
  if ((_QWORD)v492)
  {
    *((_QWORD *)&v492 + 1) = v492;
    operator delete((void *)v492);
  }
  if ((_BYTE)v457)
  {
    if (v455)
    {
      *(_QWORD *)&v456 = v455;
      operator delete(v455);
    }
  }
}

void sub_22367BF80(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x278]))
  {
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_22367BFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,_Unwind_Exception *exception_object)
{
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  if (exception_object)
    operator delete(exception_object);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  sub_223248D8C((uint64_t)&STACK[0x260]);
  if (a58)
  {
    if (a55)
    {
      operator delete(a55);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22367C394()
{
  sub_22316DBD4("vector");
}

uint64_t *sub_22367C3A8(unint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __int128 *v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  __int128 *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (uint64_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v10 = a3;
  v12 = v6 >> 3;
  v14 = a1[1];
  v13 = a1[2];
  if (a5 <= (uint64_t)(v13 - v14) >> 3)
  {
    v19 = v14 - (_QWORD)v7;
    v20 = (uint64_t)(v14 - (_QWORD)v7) >> 3;
    if (v20 >= a5)
    {
      v21 = &a3[8 * a5];
      v24 = (char *)a1[1];
      goto LABEL_48;
    }
    v21 = &a3[8 * v20];
    if (v21 == a4)
    {
      v24 = (char *)a1[1];
      goto LABEL_47;
    }
    v22 = a4 - a3 - v19 - 8;
    if (v22 >= 0x38)
    {
      v23 = &a3[8 * v20];
      v24 = (char *)a1[1];
      if ((unint64_t)((char *)v7 - a3) >= 0x20)
      {
        v60 = (v22 >> 3) + 1;
        v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v21[v61];
        v24 = (char *)(v14 + v61);
        v62 = (_OWORD *)(v14 + 16);
        v63 = (__int128 *)&a3[8 * v20 + 16];
        v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *v63;
          *(v62 - 1) = *(v63 - 1);
          *v62 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 4;
        }
        while (v64);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_47:
          a1[1] = (unint64_t)v24;
          if (v19 < 1)
            return v7;
LABEL_48:
          v67 = (char *)&v7[a5];
          v68 = (char *)(v24 - v67);
          v69 = (v24 - v67) >> 3;
          v70 = &v24[-8 * a5];
          v71 = v24;
          if ((unint64_t)v70 < v14)
          {
            v72 = &v68[v6 & 0xFFFFFFFFFFFFFFF8];
            v73 = (unint64_t)&v72[v5 + 8];
            if (v14 > v73)
              v73 = v14;
            v74 = v73 + ~v5 - (_QWORD)v72;
            v75 = (uint64_t *)&v24[-8 * a5];
            v71 = v24;
            if (v74 < 0x58)
              goto LABEL_82;
            v75 = (uint64_t *)&v24[-8 * a5];
            v71 = v24;
            if ((unint64_t)&v67[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] < 0x20)
              goto LABEL_82;
            v76 = (v74 >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v75 = (uint64_t *)&v70[v77];
            v71 = &v24[v77];
            v78 = v24 + 16;
            v79 = (__int128 *)(8 * v69 + 8 * v12 + v5 + 16);
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *v79;
              *(v78 - 1) = *(v79 - 1);
              *v78 = v81;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_82:
              do
              {
                v82 = *v75++;
                *(_QWORD *)v71 = v82;
                v71 += 8;
              }
              while ((unint64_t)v75 < v14);
            }
          }
          a1[1] = (unint64_t)v71;
          if (v24 != v67)
          {
            if ((unint64_t)(v68 - 8) < 0x78 || (v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)v67 < 0x20)
            {
              v83 = v24;
LABEL_61:
              v84 = v83 - 8;
              do
              {
                v85 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *(_QWORD *)v84 = v85;
                v84 -= 8;
              }
              while (v70 != (char *)v7);
              goto LABEL_63;
            }
            v96 = ((unint64_t)(v68 - 8) >> 3) + 1;
            v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            v83 = &v24[-v97];
            v70 -= v97;
            v98 = (__int128 *)(8 * v69 + 8 * v12 + v5 - 16);
            v99 = v24 - 16;
            v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *v98;
              *((_OWORD *)v99 - 1) = *(v98 - 1);
              *(_OWORD *)v99 = v101;
              v98 -= 2;
              v99 -= 32;
              v100 -= 4;
            }
            while (v100);
            if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_61;
          }
LABEL_63:
          v86 = v21 - v10;
          if (v21 != v10)
          {
            v87 = v86 - 8;
            if ((unint64_t)(v86 - 8) < 0x18)
            {
              v88 = v7;
            }
            else
            {
              v88 = v7;
              if ((unint64_t)((char *)v7 - v10) >= 0x20)
              {
                v89 = (v87 >> 3) + 1;
                v90 = v89 & 0x3FFFFFFFFFFFFFFCLL;
                v88 = &v7[v90];
                v91 = &v10[v90 * 8];
                v92 = (__int128 *)(v10 + 16);
                v93 = (_OWORD *)(v5 + 8 * v12 + 16);
                v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v95 = *v92;
                  *(v93 - 1) = *(v92 - 1);
                  *v93 = v95;
                  v92 += 2;
                  v93 += 2;
                  v94 -= 4;
                }
                while (v94);
                v10 = v91;
                if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
                  return v7;
              }
            }
            do
            {
              v102 = *(_QWORD *)v10;
              v10 += 8;
              *v88++ = v102;
            }
            while (v10 != v21);
          }
          return v7;
        }
      }
    }
    else
    {
      v23 = &a3[8 * v20];
      v24 = (char *)a1[1];
    }
    do
    {
      v66 = *(_QWORD *)v23;
      v23 += 8;
      *(_QWORD *)v24 = v66;
      v24 += 8;
    }
    while (v23 != a4);
    goto LABEL_47;
  }
  v15 = a5 + ((uint64_t)(v14 - v5) >> 3);
  if (v15 >> 61)
    sub_22316E078();
  v16 = v13 - v5;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_223174E94();
    v18 = operator new(8 * v17);
    v12 = v6 >> 3;
  }
  else
  {
    v18 = 0;
  }
  v25 = &v18[8 * v12];
  v26 = &v25[a5];
  v27 = v25;
  v28 = v10;
  if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
    goto LABEL_83;
  v27 = &v18[8 * v12];
  v28 = v10;
  if ((unint64_t)(&v18[v6 & 0xFFFFFFFFFFFFFFF8] - v10) < 0x20)
    goto LABEL_83;
  v29 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v30 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  v27 = &v25[v30];
  v28 = &v10[v30 * 8];
  v31 = (__int128 *)(v10 + 16);
  v32 = &v18[8 * v12 + 16];
  v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v34 = *v31;
    *(v32 - 1) = *(v31 - 1);
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_83:
    do
    {
      v35 = *(_QWORD *)v28;
      v28 += 8;
      *v27++ = v35;
    }
    while (v27 != v26);
  }
  v36 = (char *)*a1;
  v37 = &v18[8 * v12];
  if ((uint64_t *)*a1 != v7)
  {
    v38 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v39 = v38 - v36 - 8;
    v40 = (char *)v7;
    v37 = &v18[8 * v12];
    if (v39 < 0x68)
      goto LABEL_84;
    v40 = (char *)v7;
    v37 = &v18[8 * v12];
    if ((unint64_t)(v38 - &v18[v6 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_84;
    v41 = (v39 >> 3) + 1;
    v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = (char *)&v7[v42 / 0xFFFFFFFFFFFFFFF8];
    v37 = (char *)&v25[v42 / 0xFFFFFFFFFFFFFFF8];
    v43 = 8 * v12 - 16;
    v44 = &v18[v43];
    v45 = (__int128 *)(v5 + v43);
    v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = *v45;
      *(v44 - 1) = *(v45 - 1);
      *v44 = v47;
      v44 -= 2;
      v45 -= 2;
      v46 -= 4;
    }
    while (v46);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_84:
      do
      {
        v48 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v37 - 1) = v48;
        v37 -= 8;
      }
      while (v40 != v36);
    }
    v14 = a1[1];
  }
  v49 = &v18[8 * v17];
  if ((uint64_t *)v14 != v7)
  {
    v50 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v51 = v14 - (_QWORD)v50 - 8;
    if (v51 < 0x68)
      goto LABEL_85;
    if ((unint64_t)(&v18[8 * a5 + (v6 & 0xFFFFFFFFFFFFFFF8)] - v50) < 0x20)
      goto LABEL_85;
    v52 = (v51 >> 3) + 1;
    v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (uint64_t *)((char *)v7 + v53);
    v26 = (_QWORD *)((char *)v26 + v53);
    v54 = &v18[8 * v12 + 16 + 8 * a5];
    v55 = (__int128 *)(8 * v12 + v5 + 16);
    v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v57 = *v55;
      *(v54 - 1) = *(v55 - 1);
      *v54 = v57;
      v54 += 2;
      v55 += 2;
      v56 -= 4;
    }
    while (v56);
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        v58 = *v7++;
        *v26++ = v58;
      }
      while (v7 != (uint64_t *)v14);
    }
  }
  v59 = (_QWORD *)*a1;
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)v26;
  a1[2] = (unint64_t)v49;
  if (v59)
    operator delete(v59);
  return v25;
}

uint64_t sub_22367C92C(float **a1, float **a2, _QWORD *a3, uint64_t a4, _OWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double v27;
  uint64_t *v28;
  float *v29;
  uint64_t v30;
  float *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  void *v41;
  _QWORD *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t **v51;
  void **v52;
  void **v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  float **v59;
  float **v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD **v67;
  _QWORD *v68[2];
  _QWORD **v69;
  _QWORD *v70[2];
  char v71;
  __int128 __p;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*a1 == a1[1] || *a2 == a2[1])
    return a4;
  v73 = 0u;
  v74 = 0u;
  __p = 0u;
  sub_22367F310(0, a1, 1, a2, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v71);
  v70[0] = 0;
  v70[1] = 0;
  v68[1] = 0;
  v69 = v70;
  v67 = v68;
  v68[0] = 0;
  sub_22367D0E0(&__p, &v69, a1, a2, (uint64_t)a3);
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  sub_22367D6C0((uint64_t)a1, (uint64_t)a2, (uint64_t)a5, a3, &__p, &v64, (uint64_t)&v67, (uint64_t)&v69, a6);
  sub_22367D85C((char *)&v67, &__p, (uint64_t)&v69);
  v62 = 0;
  v63 = 0;
  v61 = &v62;
  *((_QWORD *)&v77[0] + 1) = 0;
  *(_QWORD *)&v77[1] = 0;
  *(_QWORD *)&v75 = 0;
  *((_QWORD *)&v75 + 1) = -1;
  v76 = -1;
  *(_QWORD *)&v77[0] = (char *)v77 + 8;
  sub_223699E9C(a1, (uint64_t)a2, &v75, (uint64_t **)v77);
  *(_QWORD *)&v75 = 1;
  *((_QWORD *)&v75 + 1) = -1;
  v76 = -1;
  sub_223699E9C(a2, (uint64_t)a1, &v75, (uint64_t **)v77);
  sub_22369A0F4(a1, (uint64_t *)a2, (uint64_t)&v67, v77, (uint64_t)&v61);
  v59 = a1;
  v60 = a2;
  sub_22369A6FC((uint64_t)v77, *((_QWORD **)&v77[0] + 1));
  v14 = *((_QWORD *)&v64 + 1);
  v15 = v65;
  v16 = (_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * ((unint64_t)v66 / 0xAA));
  if ((_QWORD)v65 == *((_QWORD *)&v64 + 1))
    v17 = 0;
  else
    v17 = (uint64_t **)(*v16 + 24 * ((unint64_t)v66 % 0xAA));
  v18 = 0;
  while (v15 != v14)
  {
    if (v17 == (uint64_t **)(*(_QWORD *)(v14 + 8 * ((*((_QWORD *)&v66 + 1) + (_QWORD)v66) / 0xAAuLL))
                           + 24 * ((*((_QWORD *)&v66 + 1) + (_QWORD)v66) % 0xAAuLL)))
      goto LABEL_82;
LABEL_14:
    memset((char *)v77 + 6, 255, 24);
    v20 = *v17;
    v19 = v17[1];
    v21 = (char *)v19 - (char *)*v17;
    v22 = 0.0;
    if ((unint64_t)v21 >= 0x18)
    {
      v23 = v21 >> 3;
      if (v19 == v20)
        v24 = 0;
      else
        v24 = v23 + 1;
      v25 = v24 - 1;
      if (v24 >= v23)
      {
        v26 = v17[1];
        if (v25 <= v23)
          v26 = &v20[v25 % v23];
      }
      else
      {
        v26 = v19 - 1;
      }
      if (v25)
      {
        v27 = 0.0;
        v28 = v17[1];
        do
        {
          if (v25 + 1 >= v23)
          {
            v29 = (float *)v17[1];
            if (v25 <= v23)
              v29 = (float *)&v20[v25 % v23];
          }
          else
          {
            v29 = (float *)(v28 - 1);
          }
          v30 = v25 - 1;
          if (v25 >= v23)
          {
            v31 = (float *)v17[1];
            if (v30 <= v23)
              v31 = (float *)&v20[v30 % v23];
          }
          else
          {
            v31 = (float *)(v26 - 1);
          }
          if (v25 + 1 >= v23)
          {
            v28 = v17[1];
            if (v25 <= v23)
              v28 = &v20[v25 % v23];
          }
          else
          {
            --v28;
          }
          if (v25 >= v23)
          {
            v26 = &v20[v30 % v23];
            if (v30 > v23)
              v26 = v17[1];
          }
          else
          {
            --v26;
          }
          v27 = v27 + (*v29 + *v31) * (v29[1] - v31[1]);
          --v25;
        }
        while (v30);
        v22 = v27 * 0.5;
      }
    }
    if (v20 != v19)
      v6 = *v20;
    v32 = v20 != v19;
    v33 = v62;
    v34 = &v62;
    v35 = &v62;
    if (v62)
    {
      while (1)
      {
        v35 = (uint64_t **)v33;
        v37 = v33[4];
        if (v37 != 2)
          break;
        v38 = v35[5];
        if (v18 == v38)
        {
          v36 = v35[6];
          if (((unint64_t)v36 & 0x8000000000000000) == 0)
            goto LABEL_47;
          if (v36 == (uint64_t *)-1)
          {
            v39 = (char *)v35;
            goto LABEL_60;
          }
LABEL_55:
          v33 = v35[1];
          if (!v33)
          {
            v34 = v35 + 1;
            goto LABEL_57;
          }
        }
        else
        {
          if ((uint64_t)v18 >= (uint64_t)v38)
            goto LABEL_55;
LABEL_47:
          v33 = *v35;
          v34 = v35;
          if (!*v35)
            goto LABEL_57;
        }
      }
      if (v37 <= 2)
        goto LABEL_55;
      goto LABEL_47;
    }
LABEL_57:
    v39 = (char *)operator new(0x90uLL);
    *((_QWORD *)v39 + 4) = 2;
    *((_QWORD *)v39 + 5) = v18;
    *((_QWORD *)v39 + 6) = -1;
    v39[56] = 0;
    *((_QWORD *)v39 + 9) = 0;
    *((_WORD *)v39 + 40) = 0;
    *((_QWORD *)v39 + 11) = -1;
    *((_QWORD *)v39 + 12) = -1;
    *((_QWORD *)v39 + 13) = -1;
    *((_QWORD *)v39 + 14) = 0xBFF0000000000000;
    *((_QWORD *)v39 + 16) = 0;
    *((_QWORD *)v39 + 17) = 0;
    *((_QWORD *)v39 + 15) = 0;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v35;
    *v34 = (uint64_t *)v39;
    v40 = (uint64_t *)v39;
    if (*v61)
    {
      v61 = (uint64_t **)*v61;
      v40 = *v34;
    }
    sub_2231A9A8C(v62, v40);
    ++v63;
LABEL_60:
    v42 = v39 + 120;
    v41 = (void *)*((_QWORD *)v39 + 15);
    v39[56] = v32;
    *(_QWORD *)(v39 + 60) = v6;
    *((double *)v39 + 9) = v22;
    *((_WORD *)v39 + 40) = 0;
    *(_OWORD *)(v39 + 82) = v77[0];
    *((_OWORD *)v39 + 6) = *(_OWORD *)((char *)v77 + 14);
    *((_QWORD *)v39 + 14) = 0xBFF0000000000000;
    if (v41)
    {
      *((_QWORD *)v39 + 16) = v41;
      operator delete(v41);
      *v42 = 0;
      *((_QWORD *)v39 + 16) = 0;
      *((_QWORD *)v39 + 17) = 0;
    }
    *v42 = 0;
    *((_QWORD *)v39 + 16) = 0;
    *((_QWORD *)v39 + 17) = 0;
    v43 = &v62;
    v44 = &v62;
    v45 = v62;
    if (v62)
    {
      while (1)
      {
        v44 = (uint64_t **)v45;
        v47 = v45[4];
        if (v47 != 2)
          break;
        v48 = v44[5];
        if (v18 == v48)
        {
          v46 = v44[6];
          if (((unint64_t)v46 & 0x8000000000000000) == 0)
            goto LABEL_65;
          if (v46 == (uint64_t *)-1)
          {
            v49 = v44;
            goto LABEL_78;
          }
LABEL_73:
          v45 = v44[1];
          if (!v45)
          {
            v43 = v44 + 1;
            goto LABEL_75;
          }
        }
        else
        {
          if ((uint64_t)v18 >= (uint64_t)v48)
            goto LABEL_73;
LABEL_65:
          v45 = *v44;
          v43 = v44;
          if (!*v44)
            goto LABEL_75;
        }
      }
      if (v47 <= 2)
        goto LABEL_73;
      goto LABEL_65;
    }
LABEL_75:
    v49 = operator new(0x90uLL);
    v49[4] = 2;
    v49[5] = v18;
    v49[6] = -1;
    *((_BYTE *)v49 + 56) = 0;
    v49[9] = 0;
    *((_WORD *)v49 + 40) = 0;
    v49[11] = -1;
    v49[12] = -1;
    v49[13] = -1;
    v49[14] = 0xBFF0000000000000;
    v49[16] = 0;
    v49[17] = 0;
    v49[15] = 0;
    *v49 = 0;
    v49[1] = 0;
    v49[2] = v44;
    *v43 = v49;
    v50 = v49;
    if (*v61)
    {
      v61 = (uint64_t **)*v61;
      v50 = *v43;
    }
    sub_2231A9A8C(v62, v50);
    ++v63;
LABEL_78:
    *((_BYTE *)v49 + 80) = 1;
    v17 += 3;
    if ((uint64_t **)((char *)v17 - *v16) == (uint64_t **)4080)
    {
      v51 = (uint64_t **)v16[1];
      ++v16;
      v17 = v51;
    }
    v18 = (uint64_t *)((char *)v18 + 1);
    v14 = *((_QWORD *)&v64 + 1);
    v15 = v65;
  }
  if (v17)
    goto LABEL_14;
LABEL_82:
  sub_22367E708(v59, v60, (uint64_t *)&v64, (uint64_t)&v61, a5);
  a4 = sub_22367EFF0(&v61, (char **)v59, (char **)v60, &v64, a4, (uint64_t)a5, 0);
  sub_22369A6FC((uint64_t)&v61, v62);
  sub_22369E2EC((uint64_t)&v64);
  sub_223198030((uint64_t)&v67, v68[0]);
  sub_22369E478((uint64_t)&v69, v70[0]);
  v52 = (void **)*((_QWORD *)&__p + 1);
  v53 = (void **)v73;
  *((_QWORD *)&v74 + 1) = 0;
  v54 = v73 - *((_QWORD *)&__p + 1);
  if ((_QWORD)v73 - *((_QWORD *)&__p + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v52);
      v53 = (void **)v73;
      v52 = (void **)(*((_QWORD *)&__p + 1) + 8);
      *((_QWORD *)&__p + 1) = v52;
      v54 = v73 - (_QWORD)v52;
    }
    while ((_QWORD)v73 - (_QWORD)v52 > 0x10uLL);
  }
  v55 = v54 >> 3;
  if (v55 == 1)
  {
    v56 = 8;
LABEL_88:
    *(_QWORD *)&v74 = v56;
  }
  else if (v55 == 2)
  {
    v56 = 16;
    goto LABEL_88;
  }
  if (v52 != v53)
  {
    do
    {
      v57 = *v52++;
      operator delete(v57);
    }
    while (v52 != v53);
    if ((_QWORD)v73 != *((_QWORD *)&__p + 1))
      *(_QWORD *)&v73 = v73 + ((*((_QWORD *)&__p + 1) - v73 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)__p)
    operator delete((void *)__p);
  return a4;
}

void sub_22367D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_22369A6FC(v31 - 168, *(_QWORD **)(v31 - 160));
  sub_22369A6FC((uint64_t)&a14, a15);
  sub_22369E2EC((uint64_t)&a17);
  sub_223198030((uint64_t)&a24, a25);
  sub_22369E478((uint64_t)&a27, a28);
  sub_22369E4C4((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_22367D0E0(_QWORD *a1, _QWORD *a2, float **a3, float **a4, uint64_t a5)
{
  __n128 v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  float *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t *v57;
  _QWORD *v58[2];
  _QWORD v59[5];

  sub_223684704(a1, a3, a4);
  v11 = sub_223684F4C(a1, (uint64_t)a2, a5, v10);
  v12 = a1[4];
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * (v12 >> 4));
  v55 = v11;
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 368 * (a1[4] & 0xFLL);
  v17 = 0;
LABEL_5:
  v18 = v16 - 5888;
  while (v14 != v13)
  {
    if (v16 == *(_QWORD *)(v13 + (((a1[5] + v12) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v12) & 0xF))
      goto LABEL_32;
LABEL_12:
    v19 = *(_DWORD *)(v16 + 32);
    if (v19 == 3)
    {
      if (*(_DWORD *)(v16 + 200) == 3)
        goto LABEL_6;
    }
    else if (v19 == 1)
    {
      if (*(_DWORD *)(v16 + 200) == 1)
        goto LABEL_6;
    }
    else if (!v19 && !*(_DWORD *)(v16 + 200))
    {
LABEL_6:
      *(_BYTE *)(v16 + 24) = 1;
      *(_QWORD *)(v16 + 16) = -1;
      goto LABEL_7;
    }
    if (*(_QWORD *)(v16 + 40) == *(_QWORD *)(v16 + 208) && *(uint64_t *)(v16 + 16) <= 0)
    {
      if (v19 != 2 || *(_DWORD *)(v16 + 200) != 2)
        goto LABEL_6;
      v20 = *(_BYTE *)(v16 + 24);
      if (!v20)
        goto LABEL_30;
    }
    else if (!*(_BYTE *)(v16 + 24))
    {
      v20 = v19 == 4 && *(_DWORD *)(v16 + 200) == 4;
LABEL_30:
      v17 |= v20;
    }
LABEL_7:
    v18 += 368;
    v16 += 368;
    if (*v15 == v18)
    {
      v21 = v15[1];
      ++v15;
      v16 = v21;
      goto LABEL_5;
    }
  }
  if (v16)
    goto LABEL_12;
LABEL_32:
  sub_223689B60((_BOOL8)a1, a2, a3, a4);
  v22 = a1[1];
  v23 = a1[2];
  v24 = (_QWORD *)(v22 + 8 * (a1[4] >> 4));
  if (v23 == v22)
    v25 = 0;
  else
    v25 = *v24 + 368 * (a1[4] & 0xFLL);
  while (v23 != v22)
  {
    v26 = a1[5] + a1[4];
    if (v25 == *(_QWORD *)(v22 + ((v26 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v26 & 0xF))
      goto LABEL_46;
LABEL_40:
    if (!*(_BYTE *)(v25 + 24) && *(_QWORD *)(v25 + 40) == *(_QWORD *)(v25 + 208) && !sub_223689D70(v25, a3, a4))
    {
      *(_BYTE *)(v25 + 136) = 0;
      *(_BYTE *)(v25 + 304) = 0;
    }
    v25 += 368;
    if (v25 - *v24 == 5888)
    {
      v27 = v24[1];
      ++v24;
      v25 = v27;
    }
    v22 = a1[1];
    v23 = a1[2];
  }
  if (v25)
    goto LABEL_40;
LABEL_46:
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  sub_223685214(a1, &v57);
  v28 = v57;
  if (v57 != (uint64_t *)v58)
  {
    do
    {
      v29 = v28[7];
      v30 = (__int128 *)v28[8];
      v31 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v30 - v29) >> 3));
      v59[0] = a1;
      v59[1] = a3;
      v59[2] = a4;
      v59[3] = a5;
      v59[4] = &v56;
      if (v30 == (__int128 *)v29)
        v32 = 0;
      else
        v32 = v31;
      sub_22368A020(v29, v30, (uint64_t)v59, v32, 1);
      v33 = (uint64_t *)v28[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (uint64_t *)v28[2];
          v35 = *v34 == (_QWORD)v28;
          v28 = v34;
        }
        while (!v35);
      }
      v28 = v34;
    }
    while (v34 != (uint64_t *)v58);
  }
  if (v55)
  {
    sub_223685734(a2, (uint64_t)a1, 2, a3, a4);
    sub_223685C64((uint64_t)a1, (uint64_t)a2);
  }
  v36 = v57;
  if (v57 != (uint64_t *)v58)
  {
    do
    {
      sub_223685EC4(v36 + 7, (uint64_t)a1, 1);
      v42 = (uint64_t *)v36[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (uint64_t *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (uint64_t *)v36[2];
          v35 = *v43 == (_QWORD)v36;
          v36 = v43;
        }
        while (!v35);
      }
      v36 = v43;
    }
    while (v43 != (uint64_t *)v58);
  }
  if ((v17 & 1) != 0)
  {
    v37 = a1[4];
    v38 = a1[1];
    v39 = a1[2];
    v40 = (_QWORD *)(v38 + 8 * (v37 >> 4));
    if (v39 == v38)
      v41 = 0;
    else
      v41 = *v40 + 368 * (a1[4] & 0xFLL);
    v44 = a1[5] + v37;
    v45 = v44 >> 4;
    v46 = v44 & 0xF;
    while (2)
    {
      v47 = v41 - 5888;
LABEL_75:
      if (v39 == v38)
      {
        if (!v41)
          break;
      }
      else if (v41 == *(_QWORD *)(v38 + 8 * v45) + 368 * v46)
      {
        break;
      }
      if (*(float *)(v41 + 104) == 0.0 && *(float *)(v41 + 272) == 0.0)
      {
        v48 = *(_QWORD *)(v41 + 128);
        if (v48 == -1)
        {
          v48 = *(_QWORD *)(v41 + 120);
          v49 = *(_QWORD *)(v41 + 296);
          if (v49 == -1)
            goto LABEL_86;
LABEL_83:
          if ((v48 & 0x8000000000000000) == 0)
          {
LABEL_87:
            if ((v49 & 0x8000000000000000) == 0 && v48 != v49)
            {
              v50 = (float *)(*(_QWORD *)(v38 + (((v48 + v37) >> 1) & 0x7FFFFFFFFFFFFFF8))
                            + 368 * (((_DWORD)v48 + (_DWORD)v37) & 0xF));
              v51 = *(float *)v41;
              v52 = *(float *)(v41 + 4);
              *(float *)(v41 + 104) = (float)((float)(*(float *)v41 - *v50) * (float)(*(float *)v41 - *v50))
                                    + (float)((float)(v52 - v50[1]) * (float)(v52 - v50[1]));
              v53 = (float *)(*(_QWORD *)(v38 + (((v49 + v37) >> 1) & 0x7FFFFFFFFFFFFFF8))
                            + 368 * (((_DWORD)v49 + (_DWORD)v37) & 0xF));
              *(float *)(v41 + 272) = (float)((float)(v51 - *v53) * (float)(v51 - *v53))
                                    + (float)((float)(v52 - v53[1]) * (float)(v52 - v53[1]));
            }
          }
        }
        else
        {
          v49 = *(_QWORD *)(v41 + 296);
          if (v49 != -1)
            goto LABEL_83;
LABEL_86:
          v49 = *(_QWORD *)(v41 + 288);
          if ((v48 & 0x8000000000000000) == 0)
            goto LABEL_87;
        }
      }
      v41 += 368;
      v47 += 368;
      if (*v40 == v47)
      {
        v54 = v40[1];
        ++v40;
        v41 = v54;
        continue;
      }
      goto LABEL_75;
    }
  }
  sub_22368F064((uint64_t)&v57, v58[0]);
}

void sub_22367D648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_22368F064((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_22367D660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_22368F064((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_22367D678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_22368F064((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_22367D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_22368F064((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_22367D6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_22368F064((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_22367D6C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  _QWORD v26[15];
  uint64_t v27[4];
  _QWORD **v28;
  _QWORD *v29[2];
  _QWORD **v30;
  _QWORD *v31[5];

  v27[0] = a1;
  v27[1] = a2;
  v27[2] = (uint64_t)a5;
  v27[3] = a8;
  v28 = v29;
  v29[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = 0;
  v30 = v31;
  v31[2] = a4;
  v31[3] = a9;
  sub_22368F0B4(v27);
  v17 = a5[1];
  if (a5[2] != v17)
  {
    v18 = a5[4];
    v19 = (uint64_t *)(v17 + 8 * (v18 >> 4));
    v20 = *v19;
    v21 = *v19 + 368 * (v18 & 0xF);
    v22 = *(_QWORD *)(v17 + (((a5[5] + v18) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*((_DWORD *)a5 + 10) + (_DWORD)v18) & 0xF);
    while (v21 != v22)
    {
      *(_DWORD *)(v21 + 192) = 0;
      *(_WORD *)(v21 + 196) = 0;
      *(_DWORD *)(v21 + 360) = 0;
      *(_WORD *)(v21 + 364) = 0;
      v21 += 368;
      if (v21 - v20 == 5888)
      {
        v23 = v19[1];
        ++v19;
        v20 = v23;
        v21 = v23;
      }
    }
  }
  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a5;
  v26[3] = a8;
  v26[4] = a4;
  v26[6] = a9;
  v26[7] = a1;
  v26[8] = a2;
  v26[9] = a5;
  v26[10] = a7;
  v26[11] = a8;
  v26[12] = a3;
  v26[13] = a4;
  v26[14] = a9;
  v25 = a6[5];
  v24 = 257;
  sub_22368F728((uint64_t)v26, a6, &v25, &v24);
  sub_223690B5C((uint64_t)&v30, v31[0]);
  sub_223690B10((uint64_t)&v28, v29[0]);
}

void sub_22367D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_22368F840((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_22367D848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_22368F840((uint64_t)&a26);
  _Unwind_Resume(a1);
}

char *sub_22367D85C(char *result, _QWORD *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char **v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char **v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char **v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  BOOL v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  _BYTE *v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v124;
  _DWORD *v125;
  uint64_t v126;

  v3 = result;
  v4 = a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(v4 + 8 * (a2[4] >> 4));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = *v6 + 368 * (a2[4] & 0xFLL);
  v8 = (char **)(result + 8);
  v124 = (_QWORD *)(a3 + 8);
  while (v5 != v4)
  {
    v9 = a2[5] + a2[4];
    if (v7 == *(_QWORD *)(v4 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v9 & 0xF))
      return result;
LABEL_10:
    v122 = v6;
    v10 = *(_QWORD *)(v7 + 40) != *(_QWORD *)(v7 + 208) || *(_BYTE *)(v7 + 24) == 0;
    if (v10)
    {
      v11 = v7 + 32;
      v126 = 0;
      v125 = (_DWORD *)(v7 + 32);
      do
      {
        v13 = *(_QWORD *)(v11 + 8);
        v12 = *(_QWORD **)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 24);
        if (*(_QWORD *)(v7 + 40) == *(_QWORD *)(v7 + 208) || *(_QWORD *)(v11 + 120) > 2uLL)
        {
          if (*v125 != 3 && *(_DWORD *)(v7 + 200) != 3)
            goto LABEL_94;
          v32 = *v8;
          v33 = (char **)(v3 + 8);
          result = v3 + 8;
          if (!*v8)
            goto LABEL_68;
          while (1)
          {
            result = v32;
            v34 = *((_QWORD *)v32 + 4);
            if (v13 == v34)
            {
              v35 = (_QWORD *)*((_QWORD *)result + 5);
              if (v12 == v35)
              {
                v36 = *((_QWORD *)result + 6);
                if (v14 < v36)
                  goto LABEL_55;
                if (v36 >= v14)
                  goto LABEL_93;
              }
              else
              {
                if ((uint64_t)v12 < (uint64_t)v35)
                {
LABEL_55:
                  v32 = *(char **)result;
                  v33 = (char **)result;
                  if (!*(_QWORD *)result)
                    goto LABEL_68;
                  continue;
                }
                if ((uint64_t)v35 >= (uint64_t)v12)
                  goto LABEL_93;
              }
            }
            else
            {
              if (v13 < v34)
                goto LABEL_55;
              if (v34 >= v13)
                goto LABEL_93;
            }
            v32 = (char *)*((_QWORD *)result + 1);
            if (!v32)
            {
              v33 = (char **)(result + 8);
LABEL_68:
              v37 = result;
              result = (char *)operator new(0x40uLL);
              *((_QWORD *)result + 4) = v13;
              *((_QWORD *)result + 5) = v12;
              *((_QWORD *)result + 6) = v14;
              *((_WORD *)result + 28) = 0;
              result[58] = 0;
              *(_QWORD *)result = 0;
              *((_QWORD *)result + 1) = 0;
              *((_QWORD *)result + 2) = v37;
              *v33 = result;
              v38 = **(_QWORD ***)v3;
              v39 = result;
              if (v38)
              {
                *(_QWORD *)v3 = v38;
                v39 = *v33;
              }
              v40 = *v8;
              v10 = v39 == *v8;
              v39[24] = v10;
              if (v10)
                goto LABEL_92;
              while (1)
              {
                v41 = *((_QWORD *)v39 + 2);
                if (*(_BYTE *)(v41 + 24))
                  goto LABEL_92;
                v42 = *(char **)(v41 + 16);
                v43 = *(_QWORD *)v42;
                if (*(_QWORD *)v42 == v41)
                {
                  v46 = *((_QWORD *)v42 + 1);
                  if (!v46 || (v47 = *(unsigned __int8 *)(v46 + 24), v44 = (_BYTE *)(v46 + 24), v47))
                  {
                    if (*(char **)v41 == v39)
                    {
                      *(_BYTE *)(v41 + 24) = 1;
                      v42[24] = 0;
                      v50 = *(_QWORD *)(v41 + 8);
                      *(_QWORD *)v42 = v50;
                      if (v50)
                        goto LABEL_85;
                    }
                    else
                    {
                      v48 = *(uint64_t **)(v41 + 8);
                      v49 = *v48;
                      *(_QWORD *)(v41 + 8) = *v48;
                      if (v49)
                      {
                        *(_QWORD *)(v49 + 16) = v41;
                        v42 = *(char **)(v41 + 16);
                      }
                      v48[2] = (uint64_t)v42;
                      *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v48;
                      *v48 = v41;
                      *(_QWORD *)(v41 + 16) = v48;
                      v42 = (char *)v48[2];
                      v41 = *(_QWORD *)v42;
                      *((_BYTE *)v48 + 24) = 1;
                      v42[24] = 0;
                      v50 = *(_QWORD *)(v41 + 8);
                      *(_QWORD *)v42 = v50;
                      if (v50)
LABEL_85:
                        *(_QWORD *)(v50 + 16) = v42;
                    }
                    *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
                    *(_QWORD *)(*((_QWORD *)v42 + 2) + 8 * (**((_QWORD **)v42 + 2) != (_QWORD)v42)) = v41;
                    *(_QWORD *)(v41 + 8) = v42;
LABEL_91:
                    *((_QWORD *)v42 + 2) = v41;
LABEL_92:
                    ++*((_QWORD *)v3 + 2);
LABEL_93:
                    result[57] = 1;
LABEL_94:
                    v52 = *v8;
                    v53 = (char **)(v3 + 8);
                    v54 = v3 + 8;
                    if (!*v8)
                      goto LABEL_109;
                    v55 = *v8;
                    while (1)
                    {
                      v54 = v55;
                      v56 = *((_QWORD *)v55 + 4);
                      if (v13 == v56)
                      {
                        v57 = (_QWORD *)*((_QWORD *)v54 + 5);
                        if (v12 == v57)
                        {
                          v58 = (_QWORD *)*((_QWORD *)v54 + 6);
                          if (v14 < (uint64_t)v58)
                            goto LABEL_96;
                          if ((uint64_t)v58 >= v14)
                            goto LABEL_128;
                        }
                        else
                        {
                          if ((uint64_t)v12 < (uint64_t)v57)
                          {
LABEL_96:
                            v55 = *(char **)v54;
                            v53 = (char **)v54;
                            if (!*(_QWORD *)v54)
                              goto LABEL_109;
                            continue;
                          }
                          if ((uint64_t)v57 >= (uint64_t)v12)
                          {
LABEL_128:
                            if (v54[56])
                              goto LABEL_17;
                            v71 = (char **)(v3 + 8);
                            v72 = v3 + 8;
                            if (!v52)
                              goto LABEL_151;
                            while (1)
                            {
LABEL_139:
                              v72 = v52;
                              v74 = *((_QWORD *)v52 + 4);
                              if (v13 == v74)
                              {
                                v75 = (_QWORD *)*((_QWORD *)v72 + 5);
                                if (v12 == v75)
                                {
                                  v76 = (_QWORD *)*((_QWORD *)v72 + 6);
                                  if (v14 < (uint64_t)v76)
                                    goto LABEL_138;
                                  if ((uint64_t)v76 >= v14)
                                    goto LABEL_170;
                                }
                                else
                                {
                                  if ((uint64_t)v12 < (uint64_t)v75)
                                  {
LABEL_138:
                                    v52 = *(char **)v72;
                                    v71 = (char **)v72;
                                    if (!*(_QWORD *)v72)
                                      goto LABEL_151;
                                    continue;
                                  }
                                  if ((uint64_t)v75 >= (uint64_t)v12)
                                  {
LABEL_170:
                                    if (v72[57])
                                      goto LABEL_17;
                                    if ((v126 & 1) != 0)
                                      goto LABEL_179;
                                    goto LABEL_182;
                                  }
                                }
                              }
                              else
                              {
                                if (v13 < v74)
                                  goto LABEL_138;
                                if (v74 >= v13)
                                  goto LABEL_170;
                              }
                              v52 = (char *)*((_QWORD *)v72 + 1);
                              if (!v52)
                              {
                                v71 = (char **)(v72 + 8);
                                goto LABEL_151;
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v13 < v56)
                          goto LABEL_96;
                        if (v56 >= v13)
                          goto LABEL_128;
                      }
                      v55 = (char *)*((_QWORD *)v54 + 1);
                      if (!v55)
                      {
                        v53 = (char **)(v54 + 8);
LABEL_109:
                        result = (char *)operator new(0x40uLL);
                        *((_QWORD *)result + 4) = v13;
                        *((_QWORD *)result + 5) = v12;
                        *((_QWORD *)result + 6) = v14;
                        *((_WORD *)result + 28) = 0;
                        result[58] = 0;
                        *(_QWORD *)result = 0;
                        *((_QWORD *)result + 1) = 0;
                        *((_QWORD *)result + 2) = v54;
                        *v53 = result;
                        v59 = **(_QWORD ***)v3;
                        if (v59)
                        {
                          *(_QWORD *)v3 = v59;
                          result = *v53;
                        }
                        v60 = *v8;
                        v10 = result == *v8;
                        result[24] = v10;
                        if (v10)
                          goto LABEL_136;
                        while (1)
                        {
                          v61 = *((_QWORD *)result + 2);
                          if (*(_BYTE *)(v61 + 24))
                            goto LABEL_136;
                          v62 = *(char **)(v61 + 16);
                          v63 = *(_QWORD *)v62;
                          if (*(_QWORD *)v62 == v61)
                          {
                            v66 = *((_QWORD *)v62 + 1);
                            if (!v66 || (v67 = *(unsigned __int8 *)(v66 + 24), v64 = (_BYTE *)(v66 + 24), v67))
                            {
                              if (*(char **)v61 == result)
                              {
                                *(_BYTE *)(v61 + 24) = 1;
                                v62[24] = 0;
                                v70 = *(_QWORD *)(v61 + 8);
                                *(_QWORD *)v62 = v70;
                                if (v70)
                                  goto LABEL_126;
                              }
                              else
                              {
                                v68 = *(uint64_t **)(v61 + 8);
                                v69 = *v68;
                                *(_QWORD *)(v61 + 8) = *v68;
                                if (v69)
                                {
                                  *(_QWORD *)(v69 + 16) = v61;
                                  v62 = *(char **)(v61 + 16);
                                }
                                v68[2] = (uint64_t)v62;
                                *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v68;
                                *v68 = v61;
                                *(_QWORD *)(v61 + 16) = v68;
                                v62 = (char *)v68[2];
                                v61 = *(_QWORD *)v62;
                                *((_BYTE *)v68 + 24) = 1;
                                v62[24] = 0;
                                v70 = *(_QWORD *)(v61 + 8);
                                *(_QWORD *)v62 = v70;
                                if (v70)
LABEL_126:
                                  *(_QWORD *)(v70 + 16) = v62;
                              }
                              *(_QWORD *)(v61 + 16) = *((_QWORD *)v62 + 2);
                              *(_QWORD *)(*((_QWORD *)v62 + 2) + 8 * (**((_QWORD **)v62 + 2) != (_QWORD)v62)) = v61;
                              *(_QWORD *)(v61 + 8) = v62;
LABEL_135:
                              *((_QWORD *)v62 + 2) = v61;
LABEL_136:
                              v52 = (char *)*((_QWORD *)v3 + 1);
                              ++*((_QWORD *)v3 + 2);
                              v71 = (char **)(v3 + 8);
                              v72 = v3 + 8;
                              if (v52)
                                goto LABEL_139;
LABEL_151:
                              result = (char *)operator new(0x40uLL);
                              *((_QWORD *)result + 4) = v13;
                              *((_QWORD *)result + 5) = v12;
                              *((_QWORD *)result + 6) = v14;
                              *((_WORD *)result + 28) = 0;
                              result[58] = 0;
                              *(_QWORD *)result = 0;
                              *((_QWORD *)result + 1) = 0;
                              *((_QWORD *)result + 2) = v72;
                              *v71 = result;
                              v77 = **(_QWORD ***)v3;
                              if (v77)
                              {
                                *(_QWORD *)v3 = v77;
                                result = *v71;
                              }
                              v78 = *v8;
                              v10 = result == *v8;
                              result[24] = v10;
                              if (v10)
                                goto LABEL_178;
                              while (1)
                              {
                                v79 = *((_QWORD *)result + 2);
                                if (*(_BYTE *)(v79 + 24))
                                  goto LABEL_178;
                                v80 = *(char **)(v79 + 16);
                                v81 = *(_QWORD *)v80;
                                if (*(_QWORD *)v80 == v79)
                                {
                                  v84 = *((_QWORD *)v80 + 1);
                                  if (!v84 || (v85 = *(unsigned __int8 *)(v84 + 24), v82 = (_BYTE *)(v84 + 24), v85))
                                  {
                                    if (*(char **)v79 == result)
                                    {
                                      *(_BYTE *)(v79 + 24) = 1;
                                      v80[24] = 0;
                                      v88 = *(_QWORD *)(v79 + 8);
                                      *(_QWORD *)v80 = v88;
                                      if (v88)
                                        goto LABEL_168;
                                    }
                                    else
                                    {
                                      v86 = *(uint64_t **)(v79 + 8);
                                      v87 = *v86;
                                      *(_QWORD *)(v79 + 8) = *v86;
                                      if (v87)
                                      {
                                        *(_QWORD *)(v87 + 16) = v79;
                                        v80 = *(char **)(v79 + 16);
                                      }
                                      v86[2] = (uint64_t)v80;
                                      *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v86;
                                      *v86 = v79;
                                      *(_QWORD *)(v79 + 16) = v86;
                                      v80 = (char *)v86[2];
                                      v79 = *(_QWORD *)v80;
                                      *((_BYTE *)v86 + 24) = 1;
                                      v80[24] = 0;
                                      v88 = *(_QWORD *)(v79 + 8);
                                      *(_QWORD *)v80 = v88;
                                      if (v88)
LABEL_168:
                                        *(_QWORD *)(v88 + 16) = v80;
                                    }
                                    *(_QWORD *)(v79 + 16) = *((_QWORD *)v80 + 2);
                                    *(_QWORD *)(*((_QWORD *)v80 + 2) + 8 * (**((_QWORD **)v80 + 2) != (_QWORD)v80)) = v79;
                                    *(_QWORD *)(v79 + 8) = v80;
LABEL_177:
                                    *((_QWORD *)v80 + 2) = v79;
LABEL_178:
                                    ++*((_QWORD *)v3 + 2);
                                    if ((v126 & 1) != 0)
                                    {
LABEL_179:
                                      LOBYTE(v126) = 1;
                                      if (HIDWORD(v126))
                                      {
LABEL_180:
                                        HIDWORD(v126) = 1;
                                        v90 = *v8;
                                        v91 = (char **)(v3 + 8);
                                        result = v3 + 8;
                                        if (*v8)
                                          goto LABEL_230;
                                        goto LABEL_242;
                                      }
LABEL_211:
                                      if (*(_DWORD *)v11 != 1 || *(_BYTE *)(v7 + 25) != 0)
                                        goto LABEL_16;
                                      goto LABEL_216;
                                    }
LABEL_182:
                                    v92 = *(_QWORD *)(v7 + 16);
                                    if (v92 < 1)
                                    {
                                      LOBYTE(v126) = 0;
                                      if (HIDWORD(v126))
                                        goto LABEL_180;
                                      goto LABEL_211;
                                    }
                                    v93 = v124;
                                    v94 = (_QWORD *)*v124;
                                    if (*v124)
                                    {
                                      do
                                      {
                                        v95 = v94[4];
                                        v96 = v95 < v92;
                                        if (v95 >= v92)
                                          v97 = v94;
                                        else
                                          v97 = v94 + 1;
                                        if (!v96)
                                          v93 = v94;
                                        v94 = (_QWORD *)*v97;
                                      }
                                      while (*v97);
                                      if (v93 != v124 && v93[4] <= v92)
                                      {
                                        v98 = (_QWORD *)v93[5];
                                        if (v98 != v93 + 6)
                                        {
                                          HIDWORD(v126) = 0;
                                          do
                                          {
                                            v99 = *(_QWORD *)(a2[1] + (((v98[4] + a2[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                                + 368 * ((*((_DWORD *)v98 + 8) + a2[4]) & 0xF);
                                            if (*(_DWORD *)(v99 + 32) == 3 || *(_DWORD *)(v99 + 200) == 3)
                                              HIDWORD(v126) = 1;
                                            v100 = (_QWORD *)v98[1];
                                            if (v100)
                                            {
                                              do
                                              {
                                                v101 = v100;
                                                v100 = (_QWORD *)*v100;
                                              }
                                              while (v100);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v101 = (_QWORD *)v98[2];
                                                v10 = *v101 == (_QWORD)v98;
                                                v98 = v101;
                                              }
                                              while (!v10);
                                            }
                                            v98 = v101;
                                          }
                                          while (v101 != v93 + 6);
                                          goto LABEL_179;
                                        }
                                      }
                                    }
                                    LOBYTE(v126) = 1;
                                    if (*(_DWORD *)v11 != 1 || *(_BYTE *)(v7 + 25) != 0)
                                    {
LABEL_16:
                                      HIDWORD(v126) = 0;
                                      goto LABEL_17;
                                    }
LABEL_216:
                                    if (*v125 == 1)
                                    {
                                      if (*(_DWORD *)(v7 + 200) == 1)
                                      {
                                        HIDWORD(v126) = 0;
                                        if (*(_QWORD *)(v7 + 40) == *(_QWORD *)(v7 + 208))
                                          goto LABEL_17;
                                        v90 = *v8;
                                        v91 = (char **)(v3 + 8);
                                        result = v3 + 8;
                                        if (!*v8)
                                          goto LABEL_242;
                                        while (1)
                                        {
LABEL_230:
                                          result = v90;
                                          v105 = *((_QWORD *)v90 + 4);
                                          if (v13 == v105)
                                          {
                                            v106 = (_QWORD *)*((_QWORD *)result + 5);
                                            if (v12 == v106)
                                            {
                                              v107 = *((_QWORD *)result + 6);
                                              if (v14 < v107)
                                                goto LABEL_229;
                                              if (v107 >= v14)
                                                goto LABEL_267;
                                            }
                                            else
                                            {
                                              if ((uint64_t)v12 < (uint64_t)v106)
                                              {
LABEL_229:
                                                v90 = *(char **)result;
                                                v91 = (char **)result;
                                                if (!*(_QWORD *)result)
                                                  goto LABEL_242;
                                                continue;
                                              }
                                              if ((uint64_t)v106 >= (uint64_t)v12)
                                                goto LABEL_267;
                                            }
                                          }
                                          else
                                          {
                                            if (v13 < v105)
                                              goto LABEL_229;
                                            if (v105 >= v13)
                                              goto LABEL_267;
                                          }
                                          v90 = (char *)*((_QWORD *)result + 1);
                                          if (!v90)
                                          {
                                            v91 = (char **)(result + 8);
                                            goto LABEL_242;
                                          }
                                        }
                                      }
                                      HIDWORD(v126) = 0;
                                      v90 = *v8;
                                      v91 = (char **)(v3 + 8);
                                      result = v3 + 8;
                                      if (*v8)
                                        goto LABEL_230;
                                    }
                                    else
                                    {
                                      HIDWORD(v126) = 0;
                                      v90 = *v8;
                                      v91 = (char **)(v3 + 8);
                                      result = v3 + 8;
                                      if (*v8)
                                        goto LABEL_230;
                                    }
LABEL_242:
                                    v108 = result;
                                    result = (char *)operator new(0x40uLL);
                                    *((_QWORD *)result + 4) = v13;
                                    *((_QWORD *)result + 5) = v12;
                                    *((_QWORD *)result + 6) = v14;
                                    *((_WORD *)result + 28) = 0;
                                    result[58] = 0;
                                    *(_QWORD *)result = 0;
                                    *((_QWORD *)result + 1) = 0;
                                    *((_QWORD *)result + 2) = v108;
                                    *v91 = result;
                                    v109 = **(_QWORD ***)v3;
                                    v22 = result;
                                    if (v109)
                                    {
                                      *(_QWORD *)v3 = v109;
                                      v22 = *v91;
                                    }
                                    v110 = *v8;
                                    v10 = v22 == *v8;
                                    v22[24] = v10;
                                    if (v10)
                                      goto LABEL_266;
                                    while (1)
                                    {
                                      v24 = *((_QWORD *)v22 + 2);
                                      if (*(_BYTE *)(v24 + 24))
                                        goto LABEL_266;
                                      v25 = *(char **)(v24 + 16);
                                      v111 = *(_QWORD *)v25;
                                      if (*(_QWORD *)v25 == v24)
                                      {
                                        v114 = *((_QWORD *)v25 + 1);
                                        if (!v114
                                          || (v115 = *(unsigned __int8 *)(v114 + 24), v112 = (_BYTE *)(v114 + 24), v115))
                                        {
                                          if (*(char **)v24 == v22)
                                          {
LABEL_49:
                                            *(_BYTE *)(v24 + 24) = 1;
                                            v25[24] = 0;
                                            v31 = *(_QWORD *)(v24 + 8);
                                            *(_QWORD *)v25 = v31;
                                            if (v31)
                                              goto LABEL_259;
                                          }
                                          else
                                          {
LABEL_256:
                                            v116 = *(uint64_t **)(v24 + 8);
                                            v117 = *v116;
                                            *(_QWORD *)(v24 + 8) = *v116;
                                            if (v117)
                                            {
                                              *(_QWORD *)(v117 + 16) = v24;
                                              v25 = *(char **)(v24 + 16);
                                            }
                                            v116[2] = (uint64_t)v25;
                                            *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v116;
                                            *v116 = v24;
                                            *(_QWORD *)(v24 + 16) = v116;
                                            v25 = (char *)v116[2];
                                            v24 = *(_QWORD *)v25;
                                            *((_BYTE *)v116 + 24) = 1;
                                            v25[24] = 0;
                                            v31 = *(_QWORD *)(v24 + 8);
                                            *(_QWORD *)v25 = v31;
                                            if (v31)
LABEL_259:
                                              *(_QWORD *)(v31 + 16) = v25;
                                          }
                                          *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
                                          *(_QWORD *)(*((_QWORD *)v25 + 2)
                                                    + 8 * (**((_QWORD **)v25 + 2) != (_QWORD)v25)) = v24;
                                          *(_QWORD *)(v24 + 8) = v25;
LABEL_265:
                                          *((_QWORD *)v25 + 2) = v24;
                                          goto LABEL_266;
                                        }
                                      }
                                      else if (!v111
                                             || (v113 = *(unsigned __int8 *)(v111 + 24),
                                                 v112 = (_BYTE *)(v111 + 24),
                                                 v113))
                                      {
                                        if (*(char **)v24 == v22)
                                        {
LABEL_269:
                                          v119 = *((_QWORD *)v22 + 1);
                                          *(_QWORD *)v24 = v119;
                                          if (v119)
                                          {
                                            *(_QWORD *)(v119 + 16) = v24;
                                            v25 = *(char **)(v24 + 16);
                                          }
                                          *((_QWORD *)v22 + 2) = v25;
                                          *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v22;
                                          *((_QWORD *)v22 + 1) = v24;
                                          *(_QWORD *)(v24 + 16) = v22;
                                          v25 = (char *)*((_QWORD *)v22 + 2);
                                          v22[24] = 1;
                                          v25[24] = 0;
                                          v24 = *((_QWORD *)v25 + 1);
                                          v118 = *(char **)v24;
                                          *((_QWORD *)v25 + 1) = *(_QWORD *)v24;
                                          if (v118)
LABEL_263:
                                            *((_QWORD *)v118 + 2) = v25;
                                        }
                                        else
                                        {
LABEL_262:
                                          *(_BYTE *)(v24 + 24) = 1;
                                          v25[24] = 0;
                                          v24 = *((_QWORD *)v25 + 1);
                                          v118 = *(char **)v24;
                                          *((_QWORD *)v25 + 1) = *(_QWORD *)v24;
                                          if (v118)
                                            goto LABEL_263;
                                        }
                                        *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
                                        *(_QWORD *)(*((_QWORD *)v25 + 2) + 8 * (**((_QWORD **)v25 + 2) != (_QWORD)v25)) = v24;
                                        *(_QWORD *)v24 = v25;
                                        goto LABEL_265;
                                      }
                                      *(_BYTE *)(v24 + 24) = 1;
                                      v22 = v25;
                                      v25[24] = v25 == v110;
                                      *v112 = 1;
                                      if (v25 == v110)
                                        goto LABEL_266;
                                    }
                                  }
                                }
                                else if (!v81 || (v83 = *(unsigned __int8 *)(v81 + 24), v82 = (_BYTE *)(v81 + 24), v83))
                                {
                                  if (*(char **)v79 == result)
                                  {
                                    v120 = *((_QWORD *)result + 1);
                                    *(_QWORD *)v79 = v120;
                                    if (v120)
                                    {
                                      *(_QWORD *)(v120 + 16) = v79;
                                      v80 = *(char **)(v79 + 16);
                                    }
                                    *((_QWORD *)result + 2) = v80;
                                    *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = result;
                                    *((_QWORD *)result + 1) = v79;
                                    *(_QWORD *)(v79 + 16) = result;
                                    v80 = (char *)*((_QWORD *)result + 2);
                                    result[24] = 1;
                                    v80[24] = 0;
                                    v79 = *((_QWORD *)v80 + 1);
                                    v89 = *(char **)v79;
                                    *((_QWORD *)v80 + 1) = *(_QWORD *)v79;
                                    if (v89)
LABEL_175:
                                      *((_QWORD *)v89 + 2) = v80;
                                  }
                                  else
                                  {
                                    result = (char *)*((_QWORD *)result + 2);
                                    *(_BYTE *)(v79 + 24) = 1;
                                    v80[24] = 0;
                                    v79 = *((_QWORD *)v80 + 1);
                                    v89 = *(char **)v79;
                                    *((_QWORD *)v80 + 1) = *(_QWORD *)v79;
                                    if (v89)
                                      goto LABEL_175;
                                  }
                                  *(_QWORD *)(v79 + 16) = *((_QWORD *)v80 + 2);
                                  *(_QWORD *)(*((_QWORD *)v80 + 2) + 8 * (**((_QWORD **)v80 + 2) != (_QWORD)v80)) = v79;
                                  *(_QWORD *)v79 = v80;
                                  goto LABEL_177;
                                }
                                *(_BYTE *)(v79 + 24) = 1;
                                result = v80;
                                v80[24] = v80 == v78;
                                *v82 = 1;
                                if (v80 == v78)
                                  goto LABEL_178;
                              }
                            }
                          }
                          else if (!v63 || (v65 = *(unsigned __int8 *)(v63 + 24), v64 = (_BYTE *)(v63 + 24), v65))
                          {
                            if (*(char **)v61 == result)
                            {
                              v104 = *((_QWORD *)result + 1);
                              *(_QWORD *)v61 = v104;
                              if (v104)
                              {
                                *(_QWORD *)(v104 + 16) = v61;
                                v62 = *(char **)(v61 + 16);
                              }
                              *((_QWORD *)result + 2) = v62;
                              *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = result;
                              *((_QWORD *)result + 1) = v61;
                              *(_QWORD *)(v61 + 16) = result;
                              v62 = (char *)*((_QWORD *)result + 2);
                              result[24] = 1;
                              v62[24] = 0;
                              v61 = *((_QWORD *)v62 + 1);
                              v73 = *(char **)v61;
                              *((_QWORD *)v62 + 1) = *(_QWORD *)v61;
                              if (v73)
LABEL_133:
                                *((_QWORD *)v73 + 2) = v62;
                            }
                            else
                            {
                              result = (char *)*((_QWORD *)result + 2);
                              *(_BYTE *)(v61 + 24) = 1;
                              v62[24] = 0;
                              v61 = *((_QWORD *)v62 + 1);
                              v73 = *(char **)v61;
                              *((_QWORD *)v62 + 1) = *(_QWORD *)v61;
                              if (v73)
                                goto LABEL_133;
                            }
                            *(_QWORD *)(v61 + 16) = *((_QWORD *)v62 + 2);
                            *(_QWORD *)(*((_QWORD *)v62 + 2) + 8 * (**((_QWORD **)v62 + 2) != (_QWORD)v62)) = v61;
                            *(_QWORD *)v61 = v62;
                            goto LABEL_135;
                          }
                          *(_BYTE *)(v61 + 24) = 1;
                          result = v62;
                          v62[24] = v62 == v60;
                          *v64 = 1;
                          if (v62 == v60)
                            goto LABEL_136;
                        }
                      }
                    }
                  }
                }
                else if (!v43 || (v45 = *(unsigned __int8 *)(v43 + 24), v44 = (_BYTE *)(v43 + 24), v45))
                {
                  if (*(char **)v41 == v39)
                  {
                    v121 = *((_QWORD *)v39 + 1);
                    *(_QWORD *)v41 = v121;
                    if (v121)
                    {
                      *(_QWORD *)(v121 + 16) = v41;
                      v42 = *(char **)(v41 + 16);
                    }
                    *((_QWORD *)v39 + 2) = v42;
                    *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v39;
                    *((_QWORD *)v39 + 1) = v41;
                    *(_QWORD *)(v41 + 16) = v39;
                    v42 = (char *)*((_QWORD *)v39 + 2);
                    v39[24] = 1;
                    v42[24] = 0;
                    v41 = *((_QWORD *)v42 + 1);
                    v51 = *(char **)v41;
                    *((_QWORD *)v42 + 1) = *(_QWORD *)v41;
                    if (v51)
LABEL_89:
                      *((_QWORD *)v51 + 2) = v42;
                  }
                  else
                  {
                    *(_BYTE *)(v41 + 24) = 1;
                    v42[24] = 0;
                    v41 = *((_QWORD *)v42 + 1);
                    v51 = *(char **)v41;
                    *((_QWORD *)v42 + 1) = *(_QWORD *)v41;
                    if (v51)
                      goto LABEL_89;
                  }
                  *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
                  *(_QWORD *)(*((_QWORD *)v42 + 2) + 8 * (**((_QWORD **)v42 + 2) != (_QWORD)v42)) = v41;
                  *(_QWORD *)v41 = v42;
                  goto LABEL_91;
                }
                *(_BYTE *)(v41 + 24) = 1;
                v39 = v42;
                v42[24] = v42 == v40;
                *v44 = 1;
                if (v42 == v40)
                  goto LABEL_92;
              }
            }
          }
        }
        v15 = *v8;
        v16 = (char **)(v3 + 8);
        result = v3 + 8;
        if (!*v8)
          goto LABEL_35;
        do
        {
          while (1)
          {
            result = v15;
            v17 = *((_QWORD *)v15 + 4);
            if (v13 != v17)
              break;
            v18 = (_QWORD *)*((_QWORD *)result + 5);
            if (v12 != v18)
            {
              if ((uint64_t)v12 < (uint64_t)v18)
                goto LABEL_22;
              if ((uint64_t)v18 >= (uint64_t)v12)
                goto LABEL_267;
              goto LABEL_33;
            }
            v19 = *((_QWORD *)result + 6);
            if (v14 >= v19)
            {
              if (v19 >= v14)
                goto LABEL_267;
              goto LABEL_33;
            }
LABEL_22:
            v15 = *(char **)result;
            v16 = (char **)result;
            if (!*(_QWORD *)result)
              goto LABEL_35;
          }
          if (v13 < v17)
            goto LABEL_22;
          if (v17 >= v13)
            goto LABEL_267;
LABEL_33:
          v15 = (char *)*((_QWORD *)result + 1);
        }
        while (v15);
        v16 = (char **)(result + 8);
LABEL_35:
        v20 = result;
        result = (char *)operator new(0x40uLL);
        *((_QWORD *)result + 4) = v13;
        *((_QWORD *)result + 5) = v12;
        *((_QWORD *)result + 6) = v14;
        *((_WORD *)result + 28) = 0;
        result[58] = 0;
        *(_QWORD *)result = 0;
        *((_QWORD *)result + 1) = 0;
        *((_QWORD *)result + 2) = v20;
        *v16 = result;
        v21 = **(_QWORD ***)v3;
        v22 = result;
        if (v21)
        {
          *(_QWORD *)v3 = v21;
          v22 = *v16;
        }
        v23 = *v8;
        v10 = v22 == *v8;
        v22[24] = v10;
        if (!v10)
        {
          do
          {
            v24 = *((_QWORD *)v22 + 2);
            if (*(_BYTE *)(v24 + 24))
              break;
            v25 = *(char **)(v24 + 16);
            v26 = *(_QWORD *)v25;
            if (*(_QWORD *)v25 == v24)
            {
              v29 = *((_QWORD *)v25 + 1);
              if (!v29 || (v30 = *(unsigned __int8 *)(v29 + 24), v27 = (_BYTE *)(v29 + 24), v30))
              {
                if (*(char **)v24 != v22)
                  goto LABEL_256;
                goto LABEL_49;
              }
            }
            else if (!v26 || (v28 = *(unsigned __int8 *)(v26 + 24), v27 = (_BYTE *)(v26 + 24), v28))
            {
              if (*(char **)v24 != v22)
                goto LABEL_262;
              goto LABEL_269;
            }
            *(_BYTE *)(v24 + 24) = 1;
            v22 = v25;
            v25[24] = v25 == v23;
            *v27 = 1;
          }
          while (v25 != v23);
        }
LABEL_266:
        ++*((_QWORD *)v3 + 2);
LABEL_267:
        result[57] = 1;
LABEL_17:
        v11 += 168;
      }
      while (v11 != v7 + 368);
    }
    v7 += 368;
    v6 = v122;
    if (v7 - *v122 == 5888)
    {
      v6 = v122 + 1;
      v7 = v122[1];
    }
    v4 = a2[1];
    v5 = a2[2];
  }
  if (v7)
    goto LABEL_10;
  return result;
}

void sub_22367E708(float **a1, float **a2, uint64_t *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t **v6;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v23;
  double v24;
  double v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  float *v36;
  float *v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  char *v44;
  char *v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  uint64_t v50;
  char *v51;
  char *v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  char *v57;
  float32x4_t v58;
  float32x4_t v59;
  __int128 v60;
  uint64_t *v61;
  uint64_t *v62;
  float **v63;
  char *v64;
  char v65;
  char *v66;
  uint64_t *v67;
  char v68;
  __int128 *v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  __int128 v82;
  char *v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88;
  __int128 v89;
  uint64_t **v90;
  char *v91;
  char *v92;
  uint64_t **v93;
  uint64_t v94;
  void **v95;
  __int128 v96;
  uint64_t *v97;
  uint64_t **v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  __int128 v107;
  char *v108;
  uint64_t *v109;
  __int128 v110;
  uint64_t *v111;
  _OWORD *v113;
  __int128 v114;
  uint64_t *v115;
  uint64_t **v116;
  _OWORD *v117;
  char v118;
  void *__p;
  char *v120;
  char *v121;
  char *v122;

  v6 = (uint64_t **)a4;
  v10 = *(_QWORD *)(a4 + 16);
  __p = 0;
  v120 = 0;
  v121 = 0;
  if (v10)
  {
    if (v10 >= 0x492492492492493)
      sub_22367C394();
    v11 = (char *)operator new(56 * v10);
    __p = v11;
    v121 = &v11[56 * v10];
    v12 = v11;
    do
    {
      *(_QWORD *)v12 = -1;
      *((_QWORD *)v12 + 1) = -1;
      *((_QWORD *)v12 + 2) = -1;
      *((_QWORD *)v12 + 3) = 0;
      *((_QWORD *)v12 + 4) = 0;
      v12 += 56;
    }
    while (v12 != &v11[56 * v10]);
    v120 = &v11[56 * v10];
    v13 = (uint64_t *)(v6 + 1);
    v14 = *v6;
    if (*v6 == (uint64_t *)(v6 + 1))
    {
LABEL_130:
      *(_QWORD *)&v114 = a1;
      *((_QWORD *)&v114 + 1) = a2;
      v115 = a3;
      v116 = v6;
      v117 = a5;
      v118 = 0;
      v122 = (char *)a5;
      v113 = a5;
      sub_22369AA20((float **)&__p, (uint64_t)&v114, (uint64_t)&v122, (uint64_t)&v113, 0x10uLL);
      v65 = 0;
      v13 = v14;
      v66 = (char *)__p;
      if (__p)
        goto LABEL_72;
      goto LABEL_73;
    }
  }
  else
  {
    v13 = (uint64_t *)(a4 + 8);
    v14 = *(uint64_t **)a4;
    if (*(_QWORD *)a4 == a4 + 8)
      return;
    v11 = 0;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v23.i64[0] = 0x3400000034000000;
  v23.i64[1] = 0x3400000034000000;
  do
  {
    v24 = *((double *)v14 + 9);
    v25 = -v24;
    if (!*((_BYTE *)v14 + 80))
      v25 = *((double *)v14 + 9);
    v26 = &v11[56 * v17];
    v27 = *((_OWORD *)v14 + 2);
    *((_QWORD *)v26 + 2) = v14[6];
    *(_OWORD *)v26 = v27;
    *((double *)v26 + 3) = v25;
    *((double *)v26 + 4) = fabs(v24);
    v11 = (char *)__p;
    v28 = v14[4];
    if (!v28)
    {
      v44 = (char *)__p + 56 * v17;
      *(_OWORD *)(v44 + 40) = xmmword_2245F53F0;
      v45 = v44 + 40;
      v47 = *a1;
      v46 = a1[1];
      v38 = (float32x4_t)xmmword_2245F53F0;
      if (*a1 == v46)
        goto LABEL_60;
      v38.f32[0] = *v47;
      *(float *)v45 = *v47;
      v39 = v47[1];
      *((float *)v45 + 1) = v39;
      v40 = *v47;
      *((float *)v45 + 2) = *v47;
      v41 = v47[1];
      *((float *)v45 + 3) = v41;
      while (1)
      {
        v47 += 2;
        if (v47 == v46)
        {
LABEL_59:
          v38.f32[1] = v39;
          v38.i64[1] = __PAIR64__(LODWORD(v41), LODWORD(v40));
          goto LABEL_60;
        }
        v48 = *v47;
        if (*v47 < v38.f32[0])
        {
          *(float *)v45 = v48;
          v38.f32[0] = v48;
          if (v48 > v40)
            goto LABEL_40;
LABEL_36:
          v49 = v47[1];
          if (v49 < v39)
            goto LABEL_41;
LABEL_37:
          if (v49 > v41)
          {
LABEL_42:
            *((float *)v45 + 3) = v49;
            v41 = v49;
          }
        }
        else
        {
          if (v48 <= v40)
            goto LABEL_36;
LABEL_40:
          *((float *)v45 + 2) = v48;
          v40 = v48;
          v49 = v47[1];
          if (v49 >= v39)
            goto LABEL_37;
LABEL_41:
          *((float *)v45 + 1) = v49;
          v39 = v49;
          if (v49 > v41)
            goto LABEL_42;
        }
      }
    }
    if (v28 == 1)
    {
      v34 = (char *)__p + 56 * v17;
      *(_OWORD *)(v34 + 40) = xmmword_2245F53F0;
      v35 = v34 + 40;
      v37 = *a2;
      v36 = a2[1];
      v38 = (float32x4_t)xmmword_2245F53F0;
      if (*a2 == v36)
        goto LABEL_60;
      v38.f32[0] = *v37;
      *(float *)v35 = *v37;
      v39 = v37[1];
      *((float *)v35 + 1) = v39;
      v40 = *v37;
      *((float *)v35 + 2) = *v37;
      v41 = v37[1];
      *((float *)v35 + 3) = v41;
      while (1)
      {
        v37 += 2;
        if (v37 == v36)
          goto LABEL_59;
        v42 = *v37;
        if (*v37 < v38.f32[0])
        {
          *(float *)v35 = v42;
          v38.f32[0] = v42;
          if (v42 > v40)
            goto LABEL_28;
LABEL_24:
          v43 = v37[1];
          if (v43 < v39)
            goto LABEL_29;
LABEL_25:
          if (v43 > v41)
          {
LABEL_30:
            *((float *)v35 + 3) = v43;
            v41 = v43;
          }
        }
        else
        {
          if (v42 <= v40)
            goto LABEL_24;
LABEL_28:
          *((float *)v35 + 2) = v42;
          v40 = v42;
          v43 = v37[1];
          if (v43 >= v39)
            goto LABEL_25;
LABEL_29:
          *((float *)v35 + 1) = v43;
          v39 = v43;
          if (v43 > v41)
            goto LABEL_30;
        }
      }
    }
    if (v28 != 2)
    {
      v38 = *(float32x4_t *)((char *)__p + 56 * v17 + 40);
      goto LABEL_60;
    }
    v29 = a3[4];
    v30 = a3[1];
    v31 = (_QWORD *)(v30 + 8 * (v29 / 0xAA));
    if (a3[2] == v30)
    {
      v32 = 0;
      v33 = v14[5];
      if (!v33)
        goto LABEL_47;
    }
    else
    {
      v32 = (float **)(*v31 + 24 * (v29 % 0xAA));
      v33 = v14[5];
      if (!v33)
        goto LABEL_47;
    }
    v50 = v33 - 0x5555555555555555 * (((uint64_t)v32 - *v31) >> 3);
    if (v50 >= 1)
    {
      v32 = (float **)(v31[v50 / 0xAAuLL] + 24 * (v50 % 0xAAuLL));
LABEL_47:
      v51 = (char *)__p + 56 * v17;
      v38 = (float32x4_t)xmmword_2245F53F0;
      *(_OWORD *)(v51 + 40) = xmmword_2245F53F0;
      v52 = v51 + 40;
      v54 = *v32;
      v53 = v32[1];
      if (v54 == v53)
        goto LABEL_60;
LABEL_48:
      v38.f32[0] = *v54;
      *(float *)v52 = *v54;
      v39 = v54[1];
      *((float *)v52 + 1) = v39;
      v40 = *v54;
      *((float *)v52 + 2) = *v54;
      v41 = v54[1];
      *((float *)v52 + 3) = v41;
      while (1)
      {
        v54 += 2;
        if (v54 == v53)
          goto LABEL_59;
        v55 = *v54;
        if (*v54 < v38.f32[0])
        {
          *(float *)v52 = v55;
          v38.f32[0] = v55;
          if (v55 > v40)
            goto LABEL_56;
LABEL_52:
          v56 = v54[1];
          if (v56 < v39)
            goto LABEL_57;
LABEL_53:
          if (v56 > v41)
          {
LABEL_58:
            *((float *)v52 + 3) = v56;
            v41 = v56;
          }
        }
        else
        {
          if (v55 <= v40)
            goto LABEL_52;
LABEL_56:
          *((float *)v52 + 2) = v55;
          v40 = v55;
          v56 = v54[1];
          if (v56 >= v39)
            goto LABEL_53;
LABEL_57:
          *((float *)v52 + 1) = v56;
          v39 = v56;
          if (v56 > v41)
            goto LABEL_58;
        }
      }
    }
    v63 = (float **)(v31[-((169 - v50) / 0xAAuLL)] + 24 * (170 * ((169 - v50) / 0xAAuLL) - (169 - v50)) + 4056);
    v64 = (char *)__p + 56 * v17;
    v38 = (float32x4_t)xmmword_2245F53F0;
    *(_OWORD *)(v64 + 40) = xmmword_2245F53F0;
    v52 = v64 + 40;
    v54 = *v63;
    v53 = v63[1];
    if (v54 != v53)
      goto LABEL_48;
LABEL_60:
    v57 = &v11[56 * v17];
    v58 = vabsq_f32(v38);
    v59 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q1, v58), (int8x16_t)v23, (int8x16_t)vmulq_f32(v58, v23));
    *(_QWORD *)&v60 = vsubq_f32(v38, v59).u64[0];
    *((_QWORD *)&v60 + 1) = vaddq_f32(v38, v59).i64[1];
    *(_OWORD *)(v57 + 40) = v60;
    if (*((double *)v57 + 3) > 0.0)
    {
      v16 = v17;
      ++v15;
    }
    v61 = (uint64_t *)v14[1];
    if (v61)
    {
      do
      {
        v62 = v61;
        v61 = (uint64_t *)*v61;
      }
      while (v61);
    }
    else
    {
      do
      {
        v62 = (uint64_t *)v14[2];
        _ZF = *v62 == (_QWORD)v14;
        v14 = v62;
      }
      while (!_ZF);
    }
    ++v17;
    v14 = v62;
  }
  while (v62 != v13);
  if (v15 == v10)
    goto LABEL_71;
  if (v15 != 1)
  {
    v14 = v13;
    v6 = (uint64_t **)a4;
    goto LABEL_130;
  }
  v88 = &v11[56 * v16];
  v89 = *(_OWORD *)v88;
  v115 = (uint64_t *)*((_QWORD *)v88 + 2);
  v114 = v89;
  v122 = (char *)&v114;
  v90 = sub_22369A8C4((uint64_t **)a4, (uint64_t *)&v114, (uint64_t)&unk_2245BA939, (_OWORD **)&v122);
  v92 = (char *)__p;
  v91 = v120;
  if (__p != v120)
  {
    v93 = v90;
    v94 = 0;
    v95 = (void **)(v90 + 15);
    do
    {
      if (v94 != v16)
      {
        v122 = v92;
        v98 = sub_22369A8C4((uint64_t **)a4, (uint64_t *)v92, (uint64_t)&unk_2245BA939, (_OWORD **)&v122);
        *(_OWORD *)(v98 + 11) = v114;
        v98[13] = v115;
        v100 = v93[16];
        v99 = (unint64_t)v93[17];
        if ((unint64_t)v100 < v99)
        {
          v96 = *(_OWORD *)v92;
          v100[2] = *((_QWORD *)v92 + 2);
          *(_OWORD *)v100 = v96;
          v97 = v100 + 3;
        }
        else
        {
          v101 = (uint64_t *)*v95;
          v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (_BYTE *)*v95) >> 3);
          v103 = v102 + 1;
          if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_22367C394();
          v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - (_QWORD)v101) >> 3);
          if (2 * v104 > v103)
            v103 = 2 * v104;
          if (v104 >= 0x555555555555555)
            v105 = 0xAAAAAAAAAAAAAAALL;
          else
            v105 = v103;
          if (v105)
          {
            if (v105 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v106 = (char *)operator new(24 * v105);
          }
          else
          {
            v106 = 0;
          }
          v107 = *(_OWORD *)v92;
          v108 = &v106[24 * v102];
          *((_QWORD *)v108 + 2) = *((_QWORD *)v92 + 2);
          *(_OWORD *)v108 = v107;
          v109 = (uint64_t *)v108;
          if (v100 != v101)
          {
            do
            {
              v110 = *(_OWORD *)(v100 - 3);
              *(v109 - 1) = *(v100 - 1);
              *(_OWORD *)(v109 - 3) = v110;
              v109 -= 3;
              v100 -= 3;
            }
            while (v100 != v101);
            v100 = (uint64_t *)*v95;
          }
          v111 = (uint64_t *)&v106[24 * v105];
          v97 = (uint64_t *)(v108 + 24);
          v93[15] = v109;
          v93[16] = (uint64_t *)(v108 + 24);
          v93[17] = v111;
          if (v100)
            operator delete(v100);
        }
        v93[16] = v97;
        v91 = v120;
      }
      v92 += 56;
      ++v94;
    }
    while (v92 != v91);
  }
LABEL_71:
  v65 = 1;
  v6 = (uint64_t **)a4;
  v66 = (char *)__p;
  if (__p)
  {
LABEL_72:
    v120 = v66;
    operator delete(v66);
  }
LABEL_73:
  v67 = *v6;
  if (*v6 == v13)
    v68 = 1;
  else
    v68 = v65;
  if ((v68 & 1) == 0)
  {
    do
    {
      if ((v67[11] & 0x8000000000000000) == 0)
      {
        v69 = (__int128 *)(v67 + 4);
        *(_QWORD *)&v114 = v67 + 11;
        v70 = sub_22369A8C4(v6, v67 + 11, (uint64_t)&unk_2245BA939, (_OWORD **)&v114);
        v71 = v70;
        v73 = v70[16];
        v72 = v70[17];
        if (v73 >= v72)
        {
          v76 = v70 + 15;
          v77 = v70[15];
          v78 = 0xAAAAAAAAAAAAAAABLL * (v73 - v77) + 1;
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            sub_22367C394();
          v79 = 0xAAAAAAAAAAAAAAABLL * (v72 - v77);
          if (2 * v79 > v78)
            v78 = 2 * v79;
          if (v79 >= 0x555555555555555)
            v80 = 0xAAAAAAAAAAAAAAALL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v81 = (char *)operator new(24 * v80);
          }
          else
          {
            v81 = 0;
          }
          v82 = *v69;
          v83 = &v81[8 * (v73 - v77)];
          *((_QWORD *)v83 + 2) = v67[6];
          *(_OWORD *)v83 = v82;
          v84 = (uint64_t *)v83;
          if (v73 != v77)
          {
            do
            {
              v85 = *(_OWORD *)(v73 - 3);
              *(v84 - 1) = *(v73 - 1);
              *(_OWORD *)(v84 - 3) = v85;
              v84 -= 3;
              v73 -= 3;
            }
            while (v73 != v77);
            v73 = *v76;
          }
          v75 = (uint64_t *)(v83 + 24);
          v71[15] = v84;
          v71[16] = (uint64_t *)(v83 + 24);
          v71[17] = (uint64_t *)&v81[24 * v80];
          if (v73)
            operator delete(v73);
          v6 = (uint64_t **)a4;
        }
        else
        {
          v74 = *v69;
          v73[2] = v67[6];
          *(_OWORD *)v73 = v74;
          v75 = v73 + 3;
        }
        v71[16] = v75;
      }
      v86 = (uint64_t *)v67[1];
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = (uint64_t *)*v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (uint64_t *)v67[2];
          _ZF = *v87 == (_QWORD)v67;
          v67 = v87;
        }
        while (!_ZF);
      }
      v67 = v87;
    }
    while (v87 != v13);
  }
}

void sub_22367EFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22367EFF0(_QWORD *a1, char **a2, char **a3, _QWORD *a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  char *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  double v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  double v28;
  double v29;
  int8x16_t v31;
  uint64_t v32;
  void (**v33)(std::exception *__hidden);
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v8 = a1 + 1;
  v9 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (!*((_BYTE *)v9 + 81) && v9[11] == -1)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v34 = *((_OWORD *)v9 + 2);
        v35 = v9[6];
        sub_22369DAE4(&v36, a2, a3, a4, (uint64_t *)&v34, *((unsigned __int8 *)v9 + 80), 0);
        v14 = v36;
        if ((unint64_t)(v37 - v36) >= 0x18)
        {
          v15 = (v37 - v36) >> 3;
          if (v37 == v36)
            v16 = 0;
          else
            v16 = v15 + 1;
          v17 = v16 - 1;
          if (v16 >= v15)
          {
            v18 = v37;
            if (v17 <= v15)
              v18 = &v36[8 * (v17 % v15)];
          }
          else
          {
            v18 = v37 - 8;
          }
          if (v17)
          {
            v19 = 0.0;
            v20 = v37;
            do
            {
              if (v17 + 1 >= v15)
              {
                v21 = (float *)v37;
                if (v17 <= v15)
                  v21 = (float *)&v36[8 * (v17 % v15)];
              }
              else
              {
                v21 = (float *)(v20 - 8);
              }
              v22 = v17 - 1;
              if (v17 >= v15)
              {
                v23 = (float *)v37;
                if (v22 <= v15)
                  v23 = (float *)&v36[8 * (v22 % v15)];
              }
              else
              {
                v23 = (float *)(v18 - 8);
              }
              if (v17 + 1 >= v15)
              {
                v20 = v37;
                if (v17 <= v15)
                  v20 = &v36[8 * (v17 % v15)];
              }
              else
              {
                v20 -= 8;
              }
              if (v17 >= v15)
              {
                v18 = &v36[8 * (v22 % v15)];
                if (v22 > v15)
                  v18 = v37;
              }
              else
              {
                v18 -= 8;
              }
              v19 = v19 + (*v21 + *v23) * (v21[1] - v23[1]);
              --v17;
            }
            while (v22);
            v24 = v19 * 0.5;
            if (v24 != 0.0)
            {
              if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_47;
              v28 = fabs(v24);
              v29 = 2.22044605e-16;
              if (v28 >= 1.0)
                v29 = v28 * 2.22044605e-16;
              if (v28 > v29)
              {
LABEL_47:
                if (a7 == 1 || v24 > 0.0)
                {
                  v31.i64[0] = a5;
                  sub_22369DD18((char ***)&v31, (const void **)&v36);
                  v14 = v36;
                }
                else if (a7 == 2)
                {
                  v33 = &off_24EC57368;
                  v31.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicati"
                                        "ons/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPho"
                                        "neOS18.0.Internal.sdk/usr/local/include/boost/geometry/algorithms/detail/overlay/add_rings.hpp";
                  v31.i64[1] = (uint64_t)"OutputIterator boost::geometry::detail::overlay::add_rings(const SelectionMap &,"
                                        " const Geometry1 &, const Geometry2 &, const RingCollection &, OutputIterator, c"
                                        "onst Strategy &, add_rings_error_handling) [GeometryOut = cv3d::recon::geometry:"
                                        ":SimplePolygon<float, 2>, SelectionMap = std::map<boost::geometry::ring_identifi"
                                        "er, boost::geometry::detail::overlay::ring_properties<cva::Matrix<float, 2, 1>, "
                                        "double>>, Geometry1 = cv3d::recon::geometry::SimplePolygon<float, 2>, Geometry2 "
                                        "= cv3d::recon::geometry::SimplePolygon<float, 2>, RingCollection = std::deque<cv"
                                        "3d::recon::geometry::SimplePolygon<float, 2>>, OutputIterator = boost::geometry:"
                                        ":range::back_insert_iterator<std::vector<cv3d::recon::geometry::SimplePolygon<fl"
                                        "oat, 2>>>, Strategy = boost::geometry::strategies::relate::cartesian<>]";
                  v32 = 157;
                  sub_22369DDE8((uint64_t)&v33, &v31);
                }
              }
            }
          }
        }
        if (v14)
        {
          v37 = v14;
          operator delete(v14);
        }
      }
      v25 = (_QWORD *)v9[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v9[2];
          v27 = *v26 == (_QWORD)v9;
          v9 = v26;
        }
        while (!v27);
      }
      v9 = v26;
    }
    while (v26 != v8);
  }
  return a5;
}

void sub_22367F2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22367F310(int a1, _QWORD *a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  __p = 0;
  v33 = 0;
  v34 = 0;
  v16 = (_QWORD *)*a2;
  v17 = a2[1];
  v18 = (v17 - *a2) >> 3;
  if (v17 == *a2)
    v19 = 0;
  else
    v19 = v18 + 1;
  if (v19 >= 2)
  {
    v24 = a2[1];
    v25 = v16;
    v26 = v17;
    v27 = (_QWORD *)v18;
    v28 = v19;
    v40 = (uint64_t)v16;
    v41 = v16;
    v42 = v17;
    v43 = v18;
    v44 = 0;
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = -1;
    v39 = -1;
    sub_2233EBC50(&v35, &v24, (uint64_t)&v40, a6, a5, &v38, 0xAuLL);
  }
  v33 = 0;
  v20 = (_QWORD *)*a4;
  v21 = a4[1];
  v22 = (v21 - *a4) >> 3;
  if (v21 == *a4)
    v23 = 0;
  else
    v23 = v22 + 1;
  if (v23 >= 2)
  {
    v24 = a4[1];
    v25 = v20;
    v26 = v21;
    v27 = (_QWORD *)v22;
    v28 = v23;
    v40 = (uint64_t)v20;
    v41 = v20;
    v42 = v21;
    v43 = v22;
    v44 = 0;
    *(_QWORD *)&v38 = 1;
    *((_QWORD *)&v38 + 1) = -1;
    v39 = -1;
    sub_2233EBC50(&__p, &v24, (uint64_t)&v40, a6, a5, &v38, 0xAuLL);
  }
  LODWORD(v24) = a1;
  v25 = a2;
  LODWORD(v26) = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v31 = a8;
  v40 = a5;
  *(_QWORD *)&v38 = a5;
  sub_22367F4E4(&v35, &__p, (uint64_t)&v24, (uint64_t)&v40, (uint64_t)&v38, (uint64_t)&v40, (uint64_t)&v38, 0x10uLL);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_22367F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v22 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22367F4E4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD v23[2];
  void *__p;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char v30;

  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v11 - *a1) >> 3) <= a8
    || 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 3) <= a8)
  {
    if (v12 != v11)
    {
      v19 = (_QWORD *)a2[1];
      if ((_QWORD *)*a2 != v19)
      {
        do
        {
          v20 = (_QWORD *)*a2;
          if ((_QWORD *)*a2 != v19)
          {
            while (1)
            {
              if (v12[6] >= v20[4] && v12[4] <= v20[6] && v12[7] >= v20[5] && v12[5] <= v20[7])
              {
                if (!sub_22368137C(*(_DWORD *)a3, *(uint64_t **)(a3 + 8), (uint64_t)v12, *(_DWORD *)(a3 + 16), *(uint64_t **)(a3 + 24), (uint64_t)v20, 0, 0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD **)(a3 + 48)))return 0;
                v19 = (_QWORD *)a2[1];
              }
              v20 += 15;
              if (v20 == v19)
              {
                v11 = (_QWORD *)a1[1];
                break;
              }
            }
          }
          v12 += 15;
        }
        while (v12 != v11);
      }
    }
    return 1;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    __p = 0;
    v25 = 0;
    v26 = 0;
    v23[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0x8000000000000000);
    sub_2233DCD4C(a1, (uint64_t *)v23, (char **)&v27);
    sub_2233DCD4C(a2, (uint64_t *)v23, (char **)&__p);
    v18 = sub_22367F724(v23, &v27, &__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v30);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
  }
  return v18;
}

void sub_22367F6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v23 = a21;
    if (!a21)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v23 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22367F724(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  _QWORD *v101;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  _QWORD *v108;
  int64x2_t v111;
  int64x2_t v112;
  void *__p;
  char *v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  __int128 v131[2];
  __int128 v132;
  __int128 v133;

  v17 = *a1;
  v18 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v132 = *(_OWORD *)a1;
  v133 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  *((_QWORD *)&v131[0] + 1) = *((_QWORD *)&v22 + 1);
  v131[1] = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v133 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v131[0] = v133;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  __p = 0;
  v114 = 0;
  v115 = 0;
  sub_2233DD4BC(&v132, v131, a2, &v128, (char **)&v125, (char **)&v122);
  sub_2233DD4BC(&v132, v131, a3, &v119, (char **)&v116, (char **)&__p);
  v27 = (char *)v122;
  v26 = v123;
  if (v122 == v123)
    goto LABEL_129;
  v29 = (char *)__p;
  v28 = v114;
  if (a5 > (v123 - (_BYTE *)v122) >> 3 || a4 > 0x63 || (v114 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v114)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD **)v27;
            v46 = *(_QWORD **)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && v45[4] <= v46[6]
              && v45[7] >= v46[5]
              && v45[5] <= v46[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v45, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v46, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v28 = v114;
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v123;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v112 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v112.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v111.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v112.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v111.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v112.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v111.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v112.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v123);
  while (v29 != v114)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v112.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v111.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v112.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v111.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v112.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v111.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v112.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_223680550((__int128 *)v111.i8, &v122, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_241;
LABEL_66:
  v48 = v120;
  if (a5 > (v120 - (_BYTE *)v119) >> 3)
  {
    v50 = (char *)v122;
    v49 = v123;
    goto LABEL_69;
  }
  v50 = (char *)v122;
  v49 = v123;
  if (a5 > (v117 - (_BYTE *)v116) >> 3 || a4 > 0x63 || (v123 - (_BYTE *)v122) >> 3 < a5)
  {
LABEL_69:
    if (v119 == v120 || v50 == v49)
    {
      if (v50 == v49)
        goto LABEL_129;
    }
    else
    {
      do
      {
        v52 = (char *)v119;
        if (v119 != v48)
        {
          do
          {
            v53 = *(_QWORD **)v50;
            v54 = *(_QWORD **)v52;
            if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32)
              && v53[4] <= v54[6]
              && v53[7] >= v54[5]
              && v53[5] <= v54[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v53, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v54, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v48 = v120;
            }
            v52 += 8;
          }
          while (v52 != v48);
          v49 = v123;
        }
        v50 += 8;
      }
      while (v50 != v49);
      v50 = (char *)v122;
      if (v122 == v49)
        goto LABEL_129;
    }
    v51 = v117;
    if (v116 != v117)
    {
      do
      {
        v56 = (char *)v116;
        if (v116 != v51)
        {
          do
          {
            v57 = *(_QWORD **)v50;
            v58 = *(_QWORD **)v56;
            if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
              && v57[4] <= v58[6]
              && v57[7] >= v58[5]
              && v57[5] <= v58[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v57, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v58, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v51 = v117;
            }
            v56 += 8;
          }
          while (v56 != v51);
          v49 = v123;
        }
        v50 += 8;
      }
      while (v50 != v49);
    }
  }
  else
  {
    v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v112 = vdupq_n_s64(0x8000000000000000);
    if (v122 != v123)
    {
      v60 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = 0x8000000000000000;
      v62 = 0x8000000000000000;
      v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v64 = *(_QWORD **)v50;
        v65 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            v66 = v64[5];
            if (v66 < v60)
              goto LABEL_111;
            goto LABEL_119;
          }
        }
        else
        {
          v111.i64[0] = *(_QWORD *)(*(_QWORD *)v50 + 32);
          v63 = v65;
          if (v65 <= v62)
            goto LABEL_110;
        }
        v112.i64[0] = v65;
        v62 = v65;
        v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v111.i64[1] = v66;
          v60 = v66;
          if (v66 <= v61)
            goto LABEL_112;
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          v67 = v64[6];
          if (v67 < v63)
            goto LABEL_113;
          goto LABEL_121;
        }
LABEL_120:
        v112.i64[1] = v66;
        v61 = v66;
        v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v111.i64[0] = v67;
          v63 = v67;
          if (v67 <= v62)
            goto LABEL_114;
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          v68 = v64[7];
          if (v68 < v60)
            goto LABEL_115;
          goto LABEL_123;
        }
LABEL_122:
        v112.i64[0] = v67;
        v62 = v67;
        v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v111.i64[1] = v68;
          v60 = v68;
          if (v68 > v61)
            goto LABEL_124;
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v112.i64[1] = v68;
          v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v123);
    }
    if (!sub_223680550((__int128 *)v111.i8, &v122, &v119, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_223680550((__int128 *)v111.i8, &v122, &v116, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
  }
LABEL_129:
  v70 = (char *)__p;
  v69 = v114;
  if (__p == v114)
    goto LABEL_197;
  v72 = (char *)v128;
  v71 = v129;
  if (a5 > (v129 - (_BYTE *)v128) >> 3
    || a5 > (v126 - (_BYTE *)v125) >> 3
    || a4 > 0x63
    || (v114 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v128 == v129)
    {
      v83 = (char *)v125;
      v82 = v126;
      if (v125 != v126 && __p != v114)
        goto LABEL_183;
    }
    else
    {
      do
      {
        v85 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            v86 = *(_QWORD **)v72;
            v87 = *(_QWORD **)v85;
            if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v85 + 32)
              && v86[4] <= v87[6]
              && v86[7] >= v87[5]
              && v86[5] <= v87[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v86, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v87, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v69 = v114;
            }
            v85 += 8;
          }
          while (v85 != v69);
          v71 = v129;
        }
        v72 += 8;
      }
      while (v72 != v71);
      v83 = (char *)v125;
      v82 = v126;
      if (v125 != v126 && __p != v69)
      {
        do
        {
LABEL_183:
          v90 = (char *)__p;
          if (__p != v69)
          {
            do
            {
              v91 = *(_QWORD **)v83;
              v92 = *(_QWORD **)v90;
              if (*(_QWORD *)(*(_QWORD *)v83 + 48) >= *(_QWORD *)(*(_QWORD *)v90 + 32)
                && v91[4] <= v92[6]
                && v91[7] >= v92[5]
                && v91[5] <= v92[7])
              {
                if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v91, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v92, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                v69 = v114;
              }
              v90 += 8;
            }
            while (v90 != v69);
            v82 = v126;
          }
          v83 += 8;
        }
        while (v83 != v82);
      }
    }
LABEL_197:
    v95 = (char *)v128;
    v94 = v129;
    if (a5 > (v129 - (_BYTE *)v128) >> 3 || a4 > 0x63 || (v120 - (_BYTE *)v119) >> 3 < a5)
    {
      if (v128 != v129)
      {
        v96 = v120;
        if (v119 != v120)
        {
          do
          {
            v99 = (char *)v119;
            if (v119 != v96)
            {
              do
              {
                v100 = *(_QWORD **)v95;
                v101 = *(_QWORD **)v99;
                if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
                  && v100[4] <= v101[6]
                  && v100[7] >= v101[5]
                  && v100[5] <= v101[7])
                {
                  if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v100, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v101, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                  v96 = v120;
                }
                v99 += 8;
              }
              while (v99 != v96);
              v94 = v129;
            }
            v95 += 8;
          }
          while (v95 != v94);
        }
      }
    }
    else if ((sub_223680550(&v132, &v128, &v119, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
    v98 = (char *)v125;
    v97 = v126;
    if (a5 > (v126 - (_BYTE *)v125) >> 3 || a4 > 0x63 || (v117 - (_BYTE *)v116) >> 3 < a5)
    {
      if (v125 != v126)
      {
        v103 = v117;
        if (v116 != v117)
        {
          do
          {
            v106 = (char *)v116;
            if (v116 != v103)
            {
              do
              {
                v107 = *(_QWORD **)v98;
                v108 = *(_QWORD **)v106;
                if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v106 + 32)
                  && v107[4] <= v108[6]
                  && v107[7] >= v108[5]
                  && v107[5] <= v108[7])
                {
                  if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v107, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v108, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                  v103 = v117;
                }
                v106 += 8;
              }
              while (v106 != v103);
              v97 = v126;
            }
            v98 += 8;
          }
          while (v98 != v97);
        }
      }
    }
    else if ((sub_223680550(v131, &v125, &v116, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
    v104 = 1;
    v105 = (char *)__p;
    if (__p)
      goto LABEL_242;
    goto LABEL_243;
  }
  v73 = 0x7FFFFFFFFFFFFFFFLL;
  v74 = 0x8000000000000000;
  v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v112 = vdupq_n_s64(0x8000000000000000);
  v75 = 0x8000000000000000;
  v76 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v77 = *(_QWORD **)v70;
    v78 = *(_QWORD *)(*(_QWORD *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 <= v75)
      {
LABEL_138:
        v79 = v77[5];
        if (v79 < v73)
          goto LABEL_139;
        goto LABEL_147;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v70 + 32);
      v76 = v78;
      if (v78 <= v75)
        goto LABEL_138;
    }
    v112.i64[0] = v78;
    v75 = v78;
    v79 = v77[5];
    if (v79 < v73)
    {
LABEL_139:
      v111.i64[1] = v79;
      v73 = v79;
      if (v79 <= v74)
        goto LABEL_140;
      goto LABEL_148;
    }
LABEL_147:
    if (v79 <= v74)
    {
LABEL_140:
      v80 = v77[6];
      if (v80 < v76)
        goto LABEL_141;
      goto LABEL_149;
    }
LABEL_148:
    v112.i64[1] = v79;
    v74 = v79;
    v80 = v77[6];
    if (v80 < v76)
    {
LABEL_141:
      v111.i64[0] = v80;
      v76 = v80;
      if (v80 <= v75)
        goto LABEL_142;
      goto LABEL_150;
    }
LABEL_149:
    if (v80 <= v75)
    {
LABEL_142:
      v81 = v77[7];
      if (v81 >= v73)
        goto LABEL_151;
      goto LABEL_143;
    }
LABEL_150:
    v112.i64[0] = v80;
    v75 = v80;
    v81 = v77[7];
    if (v81 >= v73)
    {
LABEL_151:
      if (v81 <= v74)
        goto LABEL_135;
      goto LABEL_152;
    }
LABEL_143:
    v111.i64[1] = v81;
    v73 = v81;
    if (v81 <= v74)
      goto LABEL_135;
LABEL_152:
    v112.i64[1] = v81;
    v74 = v81;
LABEL_135:
    v70 += 8;
  }
  while (v70 != v114);
  if (sub_223680550((__int128 *)v111.i8, &v128, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    && (sub_223680550((__int128 *)v111.i8, &v125, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_197;
  }
LABEL_241:
  v104 = 0;
  v105 = (char *)__p;
  if (__p)
  {
LABEL_242:
    v114 = v105;
    operator delete(v105);
  }
LABEL_243:
  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = (char *)v119;
    operator delete(v119);
  }
  if (v122)
  {
    v123 = (char *)v122;
    operator delete(v122);
  }
  if (v125)
  {
    v126 = (char *)v125;
    operator delete(v125);
  }
  if (v128)
  {
    v129 = (char *)v128;
    operator delete(v128);
  }
  return v104;
}

void sub_22368048C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223680550(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  _QWORD *v101;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  _QWORD *v108;
  int64x2_t v111;
  int64x2_t v112;
  void *__p;
  char *v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  _QWORD v131[2];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v132 = a1[1];
  v133 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v131[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v134 = v18;
  v135 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v131[1] = v135;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  __p = 0;
  v114 = 0;
  v115 = 0;
  sub_2233DD4BC(&v133, v131, a2, &v128, (char **)&v125, (char **)&v122);
  sub_2233DD4BC(&v133, v131, a3, &v119, (char **)&v116, (char **)&__p);
  v27 = (char *)v122;
  v26 = v123;
  if (v122 == v123)
    goto LABEL_129;
  v29 = (char *)__p;
  v28 = v114;
  if (a5 > (v123 - (_BYTE *)v122) >> 3 || a4 > 0x63 || (v114 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v114)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD **)v27;
            v46 = *(_QWORD **)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && v45[4] <= v46[6]
              && v45[7] >= v46[5]
              && v45[5] <= v46[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v45, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v46, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v28 = v114;
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v123;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v112 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v112.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v111.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v112.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v111.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v112.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v111.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v112.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v123);
  while (v29 != v114)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v112.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v111.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v112.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v111.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v112.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v111.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v112.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_22367F724(&v111, &v122, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_241;
LABEL_66:
  v48 = v120;
  if (a5 > (v120 - (_BYTE *)v119) >> 3)
  {
    v50 = (char *)v122;
    v49 = v123;
    goto LABEL_69;
  }
  v50 = (char *)v122;
  v49 = v123;
  if (a5 > (v117 - (_BYTE *)v116) >> 3 || a4 > 0x63 || (v123 - (_BYTE *)v122) >> 3 < a5)
  {
LABEL_69:
    if (v119 == v120 || v50 == v49)
    {
      if (v50 == v49)
        goto LABEL_129;
    }
    else
    {
      do
      {
        v52 = (char *)v119;
        if (v119 != v48)
        {
          do
          {
            v53 = *(_QWORD **)v50;
            v54 = *(_QWORD **)v52;
            if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32)
              && v53[4] <= v54[6]
              && v53[7] >= v54[5]
              && v53[5] <= v54[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v53, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v54, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v48 = v120;
            }
            v52 += 8;
          }
          while (v52 != v48);
          v49 = v123;
        }
        v50 += 8;
      }
      while (v50 != v49);
      v50 = (char *)v122;
      if (v122 == v49)
        goto LABEL_129;
    }
    v51 = v117;
    if (v116 != v117)
    {
      do
      {
        v56 = (char *)v116;
        if (v116 != v51)
        {
          do
          {
            v57 = *(_QWORD **)v50;
            v58 = *(_QWORD **)v56;
            if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
              && v57[4] <= v58[6]
              && v57[7] >= v58[5]
              && v57[5] <= v58[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v57, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v58, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v51 = v117;
            }
            v56 += 8;
          }
          while (v56 != v51);
          v49 = v123;
        }
        v50 += 8;
      }
      while (v50 != v49);
    }
  }
  else
  {
    v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v112 = vdupq_n_s64(0x8000000000000000);
    if (v122 != v123)
    {
      v60 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = 0x8000000000000000;
      v62 = 0x8000000000000000;
      v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v64 = *(_QWORD **)v50;
        v65 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            v66 = v64[5];
            if (v66 < v60)
              goto LABEL_111;
            goto LABEL_119;
          }
        }
        else
        {
          v111.i64[0] = *(_QWORD *)(*(_QWORD *)v50 + 32);
          v63 = v65;
          if (v65 <= v62)
            goto LABEL_110;
        }
        v112.i64[0] = v65;
        v62 = v65;
        v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v111.i64[1] = v66;
          v60 = v66;
          if (v66 <= v61)
            goto LABEL_112;
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          v67 = v64[6];
          if (v67 < v63)
            goto LABEL_113;
          goto LABEL_121;
        }
LABEL_120:
        v112.i64[1] = v66;
        v61 = v66;
        v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v111.i64[0] = v67;
          v63 = v67;
          if (v67 <= v62)
            goto LABEL_114;
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          v68 = v64[7];
          if (v68 < v60)
            goto LABEL_115;
          goto LABEL_123;
        }
LABEL_122:
        v112.i64[0] = v67;
        v62 = v67;
        v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v111.i64[1] = v68;
          v60 = v68;
          if (v68 > v61)
            goto LABEL_124;
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v112.i64[1] = v68;
          v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v123);
    }
    if (!sub_22367F724(&v111, &v122, &v119, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_22367F724(&v111, &v122, &v116, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
  }
LABEL_129:
  v70 = (char *)__p;
  v69 = v114;
  if (__p == v114)
    goto LABEL_197;
  v72 = (char *)v128;
  v71 = v129;
  if (a5 > (v129 - (_BYTE *)v128) >> 3
    || a5 > (v126 - (_BYTE *)v125) >> 3
    || a4 > 0x63
    || (v114 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v128 == v129)
    {
      v83 = (char *)v125;
      v82 = v126;
      if (v125 != v126 && __p != v114)
        goto LABEL_183;
    }
    else
    {
      do
      {
        v85 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            v86 = *(_QWORD **)v72;
            v87 = *(_QWORD **)v85;
            if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v85 + 32)
              && v86[4] <= v87[6]
              && v86[7] >= v87[5]
              && v86[5] <= v87[7])
            {
              if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v86, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v87, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
              v69 = v114;
            }
            v85 += 8;
          }
          while (v85 != v69);
          v71 = v129;
        }
        v72 += 8;
      }
      while (v72 != v71);
      v83 = (char *)v125;
      v82 = v126;
      if (v125 != v126 && __p != v69)
      {
        do
        {
LABEL_183:
          v90 = (char *)__p;
          if (__p != v69)
          {
            do
            {
              v91 = *(_QWORD **)v83;
              v92 = *(_QWORD **)v90;
              if (*(_QWORD *)(*(_QWORD *)v83 + 48) >= *(_QWORD *)(*(_QWORD *)v90 + 32)
                && v91[4] <= v92[6]
                && v91[7] >= v92[5]
                && v91[5] <= v92[7])
              {
                if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v91, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v92, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                v69 = v114;
              }
              v90 += 8;
            }
            while (v90 != v69);
            v82 = v126;
          }
          v83 += 8;
        }
        while (v83 != v82);
      }
    }
LABEL_197:
    v95 = (char *)v128;
    v94 = v129;
    if (a5 > (v129 - (_BYTE *)v128) >> 3 || a4 > 0x63 || (v120 - (_BYTE *)v119) >> 3 < a5)
    {
      if (v128 != v129)
      {
        v96 = v120;
        if (v119 != v120)
        {
          do
          {
            v99 = (char *)v119;
            if (v119 != v96)
            {
              do
              {
                v100 = *(_QWORD **)v95;
                v101 = *(_QWORD **)v99;
                if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
                  && v100[4] <= v101[6]
                  && v100[7] >= v101[5]
                  && v100[5] <= v101[7])
                {
                  if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v100, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v101, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                  v96 = v120;
                }
                v99 += 8;
              }
              while (v99 != v96);
              v94 = v129;
            }
            v95 += 8;
          }
          while (v95 != v94);
        }
      }
    }
    else if ((sub_22367F724(&v133, &v128, &v119, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
    v98 = (char *)v125;
    v97 = v126;
    if (a5 > (v126 - (_BYTE *)v125) >> 3 || a4 > 0x63 || (v117 - (_BYTE *)v116) >> 3 < a5)
    {
      if (v125 != v126)
      {
        v103 = v117;
        if (v116 != v117)
        {
          do
          {
            v106 = (char *)v116;
            if (v116 != v103)
            {
              do
              {
                v107 = *(_QWORD **)v98;
                v108 = *(_QWORD **)v106;
                if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v106 + 32)
                  && v107[4] <= v108[6]
                  && v107[7] >= v108[5]
                  && v107[5] <= v108[7])
                {
                  if (!sub_22368137C(*(_DWORD *)a6, *(uint64_t **)(a6 + 8), (uint64_t)v107, *(_DWORD *)(a6 + 16), *(uint64_t **)(a6 + 24), (uint64_t)v108, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_241;
                  v103 = v117;
                }
                v106 += 8;
              }
              while (v106 != v103);
              v97 = v126;
            }
            v98 += 8;
          }
          while (v98 != v97);
        }
      }
    }
    else if ((sub_22367F724(v131, &v125, &v116, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_241;
    }
    v104 = 1;
    v105 = (char *)__p;
    if (__p)
      goto LABEL_242;
    goto LABEL_243;
  }
  v73 = 0x7FFFFFFFFFFFFFFFLL;
  v74 = 0x8000000000000000;
  v111 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v112 = vdupq_n_s64(0x8000000000000000);
  v75 = 0x8000000000000000;
  v76 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v77 = *(_QWORD **)v70;
    v78 = *(_QWORD *)(*(_QWORD *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 <= v75)
      {
LABEL_138:
        v79 = v77[5];
        if (v79 < v73)
          goto LABEL_139;
        goto LABEL_147;
      }
    }
    else
    {
      v111.i64[0] = *(_QWORD *)(*(_QWORD *)v70 + 32);
      v76 = v78;
      if (v78 <= v75)
        goto LABEL_138;
    }
    v112.i64[0] = v78;
    v75 = v78;
    v79 = v77[5];
    if (v79 < v73)
    {
LABEL_139:
      v111.i64[1] = v79;
      v73 = v79;
      if (v79 <= v74)
        goto LABEL_140;
      goto LABEL_148;
    }
LABEL_147:
    if (v79 <= v74)
    {
LABEL_140:
      v80 = v77[6];
      if (v80 < v76)
        goto LABEL_141;
      goto LABEL_149;
    }
LABEL_148:
    v112.i64[1] = v79;
    v74 = v79;
    v80 = v77[6];
    if (v80 < v76)
    {
LABEL_141:
      v111.i64[0] = v80;
      v76 = v80;
      if (v80 <= v75)
        goto LABEL_142;
      goto LABEL_150;
    }
LABEL_149:
    if (v80 <= v75)
    {
LABEL_142:
      v81 = v77[7];
      if (v81 >= v73)
        goto LABEL_151;
      goto LABEL_143;
    }
LABEL_150:
    v112.i64[0] = v80;
    v75 = v80;
    v81 = v77[7];
    if (v81 >= v73)
    {
LABEL_151:
      if (v81 <= v74)
        goto LABEL_135;
      goto LABEL_152;
    }
LABEL_143:
    v111.i64[1] = v81;
    v73 = v81;
    if (v81 <= v74)
      goto LABEL_135;
LABEL_152:
    v112.i64[1] = v81;
    v74 = v81;
LABEL_135:
    v70 += 8;
  }
  while (v70 != v114);
  if (sub_22367F724(&v111, &v128, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    && (sub_22367F724(&v111, &v125, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_197;
  }
LABEL_241:
  v104 = 0;
  v105 = (char *)__p;
  if (__p)
  {
LABEL_242:
    v114 = v105;
    operator delete(v105);
  }
LABEL_243:
  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = (char *)v119;
    operator delete(v119);
  }
  if (v122)
  {
    v123 = (char *)v122;
    operator delete(v122);
  }
  if (v125)
  {
    v126 = (char *)v125;
    operator delete(v125);
  }
  if (v128)
  {
    v129 = (char *)v128;
    operator delete(v128);
  }
  return v104;
}

void sub_2236812B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22368137C(int a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  float v91;
  int v92;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::bad_cast *exception;
  std::bad_cast *v109;
  std::bad_cast *v110;
  std::bad_cast *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  __int128 *v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  int v161;
  __int16 v162;
  int v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  __int16 v182;
  _QWORD v183[14];
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char v187;
  char v188;
  uint64_t v189;
  __int128 v190;
  int v191;
  _OWORD v192[2];
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD v202[14];
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  char v206;
  char v207;
  uint64_t v208;
  __int128 v209;
  int v210;
  _OWORD v211[2];
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _QWORD v225[5];
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _QWORD v229[5];
  __int128 v230;
  __int128 v231;
  uint64_t v232;

  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(_QWORD *)(a3 + 80) + 1) < *(_QWORD *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(_QWORD *)(a6 + 80) + 1) < *(_QWORD *)(a6 + 88))
  {
    return 1;
  }
  v11 = *a2;
  v12 = a2[1];
  v13 = (v12 - *a2) >> 3;
  if (v12 == *a2)
    v14 = 0;
  else
    v14 = v13 + 1;
  v229[0] = a2[1];
  v229[1] = v11;
  v229[2] = v12;
  v229[3] = v13;
  v120 = v14;
  v121 = v11;
  v229[4] = v14;
  *(_QWORD *)&v230 = v11;
  *((_QWORD *)&v230 + 1) = v11;
  *(_QWORD *)&v231 = v12;
  *((_QWORD *)&v231 + 1) = v13;
  v232 = 0;
  v15 = *a5;
  v16 = a5[1];
  v17 = (v16 - *a5) >> 3;
  if (v16 == *a5)
    v18 = 0;
  else
    v18 = v17 + 1;
  v225[0] = a5[1];
  v225[1] = v15;
  v225[2] = v16;
  v225[3] = v17;
  v136 = v18;
  v137 = v16;
  v225[4] = v18;
  *(_QWORD *)&v226 = v15;
  v138 = v15;
  v139 = v17;
  *((_QWORD *)&v226 + 1) = v15;
  *(_QWORD *)&v227 = v16;
  *((_QWORD *)&v227 + 1) = v17;
  v228 = 0;
  v223 = v230;
  v224 = v231;
  v221 = v226;
  v222 = v227;
  v19 = *(_DWORD *)a3;
  v117 = *(_DWORD *)a6;
  v220 = *(_QWORD *)(a3 + 64);
  v219 = *(_QWORD *)(a3 + 104);
  v218 = 0;
  v217 = 0u;
  v216 = 0u;
  v215 = 0;
  v214 = 0u;
  v213 = 0u;
  v212 = 0;
  memset(v211, 0, sizeof(v211));
  v114 = (uint64_t *)(a6 + 32);
  sub_2233EE968(a3, v229, (uint64_t *)&v216, (uint64_t)&v213, (uint64_t *)v211, &v220, &v219, v19, (uint64_t *)(a6 + 32), a10);
  v20 = v214;
  v21 = v215;
  v22 = v215 - 1;
  if (v215 >= *((uint64_t *)&v214 + 1))
  {
    v23 = v214;
    if (v22 <= *((uint64_t *)&v214 + 1))
      v23 = *((_QWORD *)&v213 + 1) + 8 * (v22 % *((_QWORD *)&v214 + 1));
  }
  else
  {
    v23 = v213 - 8;
  }
  if (v215 == 1)
  {
    v24 = v120 - 1;
    if (v120 >= v13)
    {
      v23 = v12;
      if (v24 <= v13)
        v23 = v121 + 8 * (v24 % v13);
    }
    else
    {
      v23 = v12 - 8;
    }
    if (v120 == v215)
    {
      v24 = v120;
      v23 = v12;
    }
    v25 = v13;
    v26 = v12;
    v122 = v121;
  }
  else
  {
    v24 = v215 - 1;
    v25 = *((_QWORD *)&v214 + 1);
    v26 = v214;
    v122 = *((_QWORD *)&v213 + 1);
  }
  v141 = v213;
  v142 = v214;
  v143 = v215--;
  if (v21 >= *((uint64_t *)&v214 + 1))
  {
    if (v22 <= *((uint64_t *)&v214 + 1))
      v20 = *((_QWORD *)&v213 + 1) + 8 * (v22 % *((_QWORD *)&v214 + 1));
  }
  else
  {
    v20 = v213 - 8;
  }
  *(_QWORD *)&v213 = v20;
  v216 = v141;
  v217 = v142;
  v218 = v143;
  v27 = v24 - 1;
  if (v24 >= v25)
  {
    v127 = v26;
    if (v27 > v25)
    {
      if (v24 == 1)
        goto LABEL_36;
LABEL_32:
      if (v22 == v212)
        return 1;
      goto LABEL_48;
    }
    v28 = v122 + 8 * (v27 % v25);
  }
  else
  {
    v28 = v23 - 8;
  }
  v127 = v28;
  if (v24 != 1)
    goto LABEL_32;
LABEL_36:
  v29 = v120 - 1;
  if (v120 >= v13)
  {
    v30 = v12;
    if (v29 <= v13)
      v30 = v121 + 8 * (v29 % v13);
  }
  else
  {
    v30 = v12 - 8;
  }
  if (v120 == v24)
    v27 = v120;
  else
    v27 = v120 - 1;
  if (v120 == v24)
    v31 = v12;
  else
    v31 = v30;
  v127 = v31;
  v25 = v13;
  v26 = v12;
  v122 = v121;
  if (v22 != v212)
  {
LABEL_48:
    v128 = (uint64_t *)(a3 + 32);
    v116 = -v19;
    v134 = (__int128 *)(a10 + 8);
    v33 = v136 < v139;
    if (v136 >= v139)
      v34 = 0;
    else
      v34 = -1;
    v131 = v136 - 1;
    if (v136 - 1 > v139)
      v33 = 1;
    v130 = v33;
    v35 = v120 < v13;
    if (v120 >= v13)
      v36 = 0;
    else
      v36 = -1;
    v37 = *((_QWORD *)&v217 + 1);
    v38 = v218;
    v115 = v13;
    if (v120 - 1 > v13)
      v35 = 1;
    v113 = v35;
    v129 = v137 + 8 * v34;
    v112 = v12 + 8 * v36;
    v126 = v12;
    do
    {
      v40 = v13;
      if (v38 >= v37)
      {
        v42 = v38 - 1;
        if (v42 <= v37)
          v41 = (float *)(*((_QWORD *)&v216 + 1) + 8 * (v42 % v37));
        else
          v41 = (float *)v217;
      }
      else
      {
        v41 = (float *)(v216 - 8);
      }
      v43 = (float)((float)(v41[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
      if (v43 >= 0.0)
        v44 = 0.5;
      else
        v44 = -0.5;
      sub_2233DC31C(v43 + v44);
      v45 = (float)((float)(*v41 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
      if (v45 >= 0.0)
        v46 = 0.5;
      else
        v46 = -0.5;
      v47 = v45 + v46;
      sub_2233DC31C(v45 + v46);
      v48 = ceilf(v47);
      v49 = floorf(v47);
      if (v47 >= 0.0)
        v48 = v49;
      v50 = (uint64_t)v48;
      if (v116 == 1)
      {
        v51 = a6;
        v52 = v27;
        v53 = v40;
        v54 = v126;
        if (*v114 > v50)
          return 1;
      }
      else
      {
        v51 = a6;
        v52 = v27;
        v53 = v40;
        v54 = v126;
        if (v116 == -1 && *(_QWORD *)(a6 + 48) < v50)
          return 1;
      }
      if (v218 >= *((uint64_t *)&v217 + 1))
      {
        if (v218 - 1 <= *((uint64_t *)&v217 + 1))
        {
          v55 = *((_QWORD *)&v216 + 1) + 8 * ((v218 - 1) % *((_QWORD *)&v217 + 1));
          v56 = *((_QWORD *)&v214 + 1);
          v57 = v215;
          if (v215 < *((uint64_t *)&v214 + 1))
          {
LABEL_92:
            v59 = v213 - 8;
            goto LABEL_94;
          }
        }
        else
        {
          v55 = v217;
          v56 = *((_QWORD *)&v214 + 1);
          v57 = v215;
          if (v215 < *((uint64_t *)&v214 + 1))
            goto LABEL_92;
        }
      }
      else
      {
        v55 = v216 - 8;
        v56 = *((_QWORD *)&v214 + 1);
        v57 = v215;
        if (v215 < *((uint64_t *)&v214 + 1))
          goto LABEL_92;
      }
      v58 = v57 - 1;
      if (v58 <= v56)
        v59 = *((_QWORD *)&v213 + 1) + 8 * (v58 % v56);
      else
        v59 = v214;
LABEL_94:
      v202[0] = a3;
      v202[1] = v220;
      v202[2] = v55;
      v202[3] = v59;
      v202[4] = v127;
      v202[5] = v122;
      v202[6] = v26;
      v202[7] = v25;
      v123 = v52;
      v202[8] = v52;
      v202[9] = v54;
      v202[10] = v121;
      v202[11] = v54;
      v202[12] = v53;
      v202[13] = v120;
      v203 = v223;
      v204 = v224;
      v205 = 0;
      v206 = 1;
      v207 = 0;
      v208 = *(_QWORD *)a10;
      v209 = *v134;
      v210 = *(_DWORD *)(a10 + 24);
      v201 = *(_QWORD *)(v51 + 64);
      v200 = *(_QWORD *)(v51 + 104);
      v199 = 0;
      v198 = 0u;
      v197 = 0u;
      v196 = 0;
      v194 = 0u;
      v195 = 0u;
      v193 = 0;
      memset(v192, 0, sizeof(v192));
      sub_2233EE968(v51, v225, (uint64_t *)&v197, (uint64_t)&v194, (uint64_t *)v192, &v201, &v200, v117, v128, a10);
      v60 = *((_QWORD *)&v195 + 1);
      v61 = v195;
      v62 = v196;
      v63 = v196 - 1;
      v124 = v26;
      v125 = v25;
      if (v196 >= *((uint64_t *)&v195 + 1))
      {
        v64 = v195;
        if (v63 <= *((uint64_t *)&v195 + 1))
          v64 = *((_QWORD *)&v194 + 1) + 8 * (v63 % *((_QWORD *)&v195 + 1));
      }
      else
      {
        v64 = v194 - 8;
      }
      v65 = *((_QWORD *)&v194 + 1);
      v67 = *((_QWORD *)&v195 + 1);
      v66 = v195;
      v68 = v196 - 1;
      v69 = a6;
      v70 = -v117;
      if (v196 == 1)
      {
        v71 = v129;
        if (!v130)
          v71 = v138 + 8 * (v131 % v139);
        v66 = v137;
        if (v136 == v196)
          v64 = v137;
        else
          v64 = v71;
        v68 = v136 - 1;
        if (v136 == v196)
          v68 = v136;
        v65 = v138;
        v67 = v139;
      }
      v141 = v194;
      v142 = v195;
      v143 = v196--;
      if (v62 >= *((uint64_t *)&v195 + 1))
      {
        if (v63 <= *((uint64_t *)&v195 + 1))
          v61 = *((_QWORD *)&v194 + 1) + 8 * (v63 % *((_QWORD *)&v195 + 1));
      }
      else
      {
        v61 = v194 - 8;
      }
      *(_QWORD *)&v194 = v61;
      v197 = v141;
      v198 = v142;
      v199 = v143;
      v72 = v68 - 1;
      if (v68 >= v67)
      {
        v73 = v66;
        if (v72 <= v67)
        {
          v73 = v65 + 8 * (v72 % v67);
          if (v68 == 1)
          {
LABEL_119:
            v74 = v129;
            if (!v130)
              v74 = v138 + 8 * (v131 % v139);
            v66 = v137;
            if (v136 == v68)
              v73 = v137;
            else
              v73 = v74;
            if (v136 == v68)
              v72 = v136;
            else
              v72 = v136 - 1;
            v65 = v138;
            v67 = v139;
            if (v63 == v193)
              goto LABEL_128;
LABEL_130:
            v79 = *((_QWORD *)&v198 + 1);
            v80 = v199;
            while (2)
            {
              v82 = v80 - 1;
              if (v80 >= v79)
              {
                if (v82 <= v79)
                  v83 = (float *)(*((_QWORD *)&v197 + 1) + 8 * (v82 % v79));
                else
                  v83 = (float *)v198;
              }
              else
              {
                v83 = (float *)(v197 - 8);
              }
              v84 = *(float *)(a10 + 24);
              v85 = (float)((float)(v83[1] - *(float *)(a10 + 4)) * v84) + (float)*(uint64_t *)(a10 + 16);
              if (v85 >= 0.0)
                v86 = 0.5;
              else
                v86 = -0.5;
              v87 = v85 + v86;
              v88 = 2 * (v87 >= 9.2234e18);
              if (v87 <= -9.2234e18)
                v88 = 1;
              if (v88 == 2)
                goto LABEL_222;
              if (v88 == 1)
                goto LABEL_223;
              v89 = (float)(v84 * (float)(*v83 - *(float *)a10)) + (float)*(uint64_t *)(a10 + 8);
              if (v89 >= 0.0)
                v90 = 0.5;
              else
                v90 = -0.5;
              v91 = v89 + v90;
              v92 = 2 * (v91 >= 9.2234e18);
              if (v91 <= -9.2234e18)
                v92 = 1;
              if (v92 == 2)
              {
LABEL_222:
                exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                exception->__vftable = 0;
                v109 = sub_2233DC3C4(exception);
                __cxa_throw(v109, (struct type_info *)&unk_24EC363D8, (void (*)(void *))std::exception::~exception);
              }
              if (v92 == 1)
              {
LABEL_223:
                v110 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v110->__vftable = 0;
                v111 = sub_2233DC3A0(v110);
                __cxa_throw(v111, (struct type_info *)&unk_24EC363C0, (void (*)(void *))std::exception::~exception);
              }
              v93 = ceilf(v91);
              v94 = floorf(v91);
              if (v91 >= 0.0)
                v95 = v94;
              else
                v95 = v93;
              v96 = (uint64_t)v95;
              if (v70 == 1)
              {
                if (*v128 > v96)
                  goto LABEL_128;
              }
              else if (v70 == -1 && *(_QWORD *)(a3 + 48) < v96)
              {
                goto LABEL_128;
              }
              if (a1 == a4
                && *(_QWORD *)(a3 + 16) == *(_QWORD *)(v69 + 16)
                && *(_QWORD *)(a3 + 24) == *(_QWORD *)(v69 + 24))
              {
                if (a7)
                {
                  if (v220 >= v201 || (a8 & 1) == 0)
                  {
                    if (v220 < v201)
                      break;
LABEL_177:
                    v199 = v80 - 1;
                    if (v80 < v79)
                    {
LABEL_178:
                      v97 = v197 - 8;
LABEL_193:
                      *(_QWORD *)&v197 = v97;
                      v102 = v196;
                      v60 = *((_QWORD *)&v195 + 1);
                      v63 = --v196;
                      if (v102 >= *((uint64_t *)&v195 + 1))
                      {
                        if (v63 <= *((uint64_t *)&v195 + 1))
                          v61 = *((_QWORD *)&v194 + 1) + 8 * (v63 % *((_QWORD *)&v195 + 1));
                        else
                          v61 = v195;
                      }
                      else
                      {
                        v61 = v194 - 8;
                      }
                      *(_QWORD *)&v194 = v61;
                      ++v201;
                      v81 = v72 - 1;
                      if (v72 >= v67)
                      {
                        v73 = v66;
                        if (v81 <= v67)
                          v73 = v65 + 8 * (v81 % v67);
                      }
                      else
                      {
                        v73 -= 8;
                      }
                      if (v72 == 1)
                      {
                        v103 = v129;
                        if (!v130)
                          v103 = v138 + 8 * (v131 % v139);
                        v81 = v136;
                        v66 = v137;
                        if (v136 == 1)
                          v73 = v137;
                        else
                          v73 = v103;
                        if (v136 != 1)
                          v81 = v136 - 1;
                        v65 = v138;
                        v67 = v139;
                      }
                      ++v200;
                      v80 = v82;
                      v72 = v81;
                      if (v63 == v193)
                        goto LABEL_128;
                      continue;
                    }
LABEL_190:
                    if (v82 <= v79)
                      v97 = *((_QWORD *)&v197 + 1) + 8 * (v82 % v79);
                    else
                      v97 = v198;
                    goto LABEL_193;
                  }
                }
                else if (!a8)
                {
                  break;
                }
                if (v200 == v219 + 1 || !v220 && *(_QWORD *)(a3 + 88) - 2 <= v201)
                  goto LABEL_177;
              }
              break;
            }
            if (v80 >= v79)
            {
              if (v82 <= v79)
              {
                v98 = *((_QWORD *)&v197 + 1) + 8 * (v82 % v79);
                if (v63 < v60)
                  goto LABEL_187;
              }
              else
              {
                v98 = v198;
                if (v63 < v60)
                  goto LABEL_187;
              }
            }
            else
            {
              v98 = v197 - 8;
              if (v63 < v60)
              {
LABEL_187:
                v100 = v61 - 8;
                goto LABEL_189;
              }
            }
            v99 = v63 - 1;
            if (v99 <= v60)
              v100 = *((_QWORD *)&v194 + 1) + 8 * (v99 % v60);
            else
              v100 = v195;
LABEL_189:
            v183[0] = v69;
            v183[1] = v201;
            v183[2] = v98;
            v183[3] = v100;
            v183[4] = v73;
            v183[5] = v65;
            v183[6] = v66;
            v183[7] = v67;
            v183[8] = v72;
            v183[9] = v137;
            v183[10] = v138;
            v183[11] = v137;
            v183[12] = v139;
            v183[13] = v136;
            v184 = v221;
            v185 = v222;
            v186 = 0;
            v187 = 0;
            v188 = 0;
            v189 = *(_QWORD *)a10;
            v190 = *v134;
            v191 = *(_DWORD *)(a10 + 24);
            DWORD2(v141) = 0;
            BYTE12(v141) = 0;
            *(_QWORD *)&v142 = -1;
            WORD4(v142) = 0;
            LODWORD(v143) = 0;
            v148 = 1;
            v149 = 0;
            v150 = 0;
            v151 = -1;
            v152 = -1;
            v153 = -1;
            v154 = 257;
            v155 = 0;
            v156 = 0;
            v157 = -1;
            v158 = -1;
            v159 = -1;
            v160 = 0;
            v161 = 0;
            v162 = 0;
            v163 = 0;
            v168 = 1;
            v169 = 0;
            v170 = 0;
            v172 = -1;
            v173 = -1;
            v171 = -1;
            v174 = 257;
            v175 = 0;
            v176 = 0;
            v177 = -1;
            v178 = -1;
            v179 = -1;
            v180 = 0;
            v181 = 0;
            v182 = 0;
            v144 = a1;
            v145 = *(_OWORD *)(a3 + 16);
            v146 = v220;
            v147 = xmmword_2245F5400;
            v164 = a4;
            v165 = *(_OWORD *)(v69 + 16);
            v166 = v201;
            v167 = xmmword_2245F5400;
            sub_22368227C((uint64_t)v202, (uint64_t)v183, (uint64_t *)&v141, a9, a10, a11);
            v69 = a6;
            v101 = v199;
            v79 = *((_QWORD *)&v198 + 1);
            v82 = v199 - 1;
            v70 = -v117;
            --v199;
            if (v101 < *((uint64_t *)&v198 + 1))
              goto LABEL_178;
            goto LABEL_190;
          }
        }
        else if (v68 == 1)
        {
          goto LABEL_119;
        }
      }
      else
      {
        v73 = v64 - 8;
        if (v68 == 1)
          goto LABEL_119;
      }
      if (v63 != v193)
        goto LABEL_130;
LABEL_128:
      v75 = v218;
      v37 = *((_QWORD *)&v217 + 1);
      v38 = --v218;
      if (v75 >= *((uint64_t *)&v217 + 1))
      {
        v25 = v125;
        v77 = v126;
        v13 = v115;
        v78 = v123;
        v26 = v124;
        if (v38 <= *((uint64_t *)&v217 + 1))
          v76 = *((_QWORD *)&v216 + 1) + 8 * (v38 % *((_QWORD *)&v217 + 1));
        else
          v76 = v217;
      }
      else
      {
        v76 = v216 - 8;
        v25 = v125;
        v77 = v126;
        v13 = v115;
        v78 = v123;
        v26 = v124;
      }
      *(_QWORD *)&v216 = v76;
      v104 = v215;
      v105 = --v215;
      if (v104 >= *((uint64_t *)&v214 + 1))
      {
        if (v105 <= *((uint64_t *)&v214 + 1))
          v106 = *((_QWORD *)&v213 + 1) + 8 * (v105 % *((_QWORD *)&v214 + 1));
        else
          v106 = v214;
      }
      else
      {
        v106 = v213 - 8;
      }
      *(_QWORD *)&v213 = v106;
      ++v220;
      v27 = v78 - 1;
      if (v78 >= v25)
      {
        v127 = v26;
        if (v27 > v25)
        {
          if (v78 == 1)
            goto LABEL_220;
          goto LABEL_65;
        }
        v107 = v122 + 8 * (v27 % v25);
      }
      else
      {
        v107 = v127 - 8;
      }
      v127 = v107;
      if (v78 == 1)
      {
LABEL_220:
        v39 = v112;
        if (!v113)
          v39 = v121 + 8 * ((v120 - 1) % v13);
        if (v120 == v78)
          v27 = v120;
        else
          v27 = v120 - 1;
        if (v120 == v78)
          v39 = v77;
        v127 = v39;
        v25 = v13;
        v26 = v77;
        v122 = v121;
      }
LABEL_65:
      ++v219;
    }
    while (v105 != v212);
  }
  return 1;
}

_QWORD *sub_22368227C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  _BYTE v29[360];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[6];
  char v36;
  _QWORD v37[6];
  char v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _DWORD v47[7];
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  float *v54[2];
  float *v55[2];

  v53 = a6;
  v30[0] = a1;
  v30[1] = a2;
  v11 = sub_2233E29A4((uint64_t)&v31, a1, a2, a5);
  v35[0] = a1;
  v35[1] = a5;
  v35[2] = v11;
  v35[3] = &v32;
  v36 = 0;
  v37[0] = a2;
  v37[1] = a5;
  v37[2] = &v33;
  v37[3] = &v34;
  v38 = 0;
  v39[1] = v35;
  v39[2] = v37;
  v40[1] = v37;
  v40[2] = v35;
  v12 = *(float **)(a1 + 24);
  v13 = *(float **)(a2 + 16);
  v14 = *(float **)(a2 + 24);
  v55[0] = *(float **)(a1 + 16);
  v55[1] = v12;
  v54[0] = v13;
  v54[1] = v14;
  *(_OWORD *)&v29[8] = xmmword_2245F5410;
  *(_QWORD *)&v29[24] = 0;
  *(_QWORD *)&v29[32] = 0;
  *(_QWORD *)&v29[40] = 1;
  *(_QWORD *)&v29[48] = 0;
  *(float *)&v28 = *v12 - *v55[0];
  *(float *)v29 = *v14 - *v13;
  *((float *)&v28 + 1) = v12[1] - v55[0][1];
  *(float *)&v29[4] = v14[1] - v13[1];
  sub_2233E2FB8((uint64_t)&v28, v55, v54, (uint64_t)v35, (uint64_t)v37, (uint64_t)&v41);
  v51 = a4;
  v52 = a5;
  if (LOBYTE(v47[0]) != 100)
  {
    v28 = *a3;
    memcpy(v29, a3 + 1, sizeof(v29));
    switch(LOBYTE(v47[0]))
    {
      case 'c':
        if (!BYTE1(v47[0]))
        {
          if (v49)
          {
            sub_223683750(a1, a2, (uint64_t)&v28, (uint64_t)&v41, (uint64_t)v47, (uint64_t)v39);
          }
          else
          {
            sub_223683F04(a1, a2, (uint64_t)&v28, (uint64_t)&v41, (uint64_t)v47, (uint64_t)v39);
            *(_DWORD *)v29 = 5;
          }
          goto LABEL_20;
        }
        sub_223683A90(a1, a2, (uint64_t)&v28, (uint64_t)&v53, (uint64_t)v30, (uint64_t)v39);
        return v53;
      case 'i':
        v15 = v42;
        *(_QWORD *)&v29[88] = v44;
        *(_OWORD *)&v29[72] = v43;
        *(_QWORD *)&v29[256] = v46;
        *(_OWORD *)&v29[240] = v45;
        v16 = v53;
        v17 = v53[2];
        v18 = v53[1];
        v19 = 2 * (v17 - v18) - 1;
        *(_DWORD *)v29 = 2;
        v28 = v42;
        if (v17 == v18)
          v19 = 0;
        v20 = v48 == 1;
        *(_DWORD *)&v29[168 * (v48 != 1) + 24] = 1;
        *(_DWORD *)&v29[168 * v20 + 24] = 2;
        v21 = v16[5] + v16[4];
        if (v19 == v21)
        {
          sub_223684164((uint64_t)v16);
          v18 = v16[1];
          v21 = v16[5] + v16[4];
          v15 = v28;
        }
        v22 = (_QWORD *)(*(_QWORD *)(v18 + ((v21 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v21 & 0xF));
        goto LABEL_25;
      case 'm':
        if (v50 == 1)
          sub_22368269C(a1, a2, (uint64_t)&v28, (uint64_t)&v41, v47, (uint64_t)v39);
        else
          sub_223682BA8(a2, a1, (uint64_t)&v28, (uint64_t)&v41, v47, (uint64_t)v40);
        goto LABEL_20;
      case 't':
        sub_2236830B4(a1, a2, (uint64_t)&v28, (uint64_t)&v41, v47, (uint64_t)v39);
        goto LABEL_20;
      default:
        if (LOBYTE(v47[0]) != 101 || BYTE1(v47[0]))
          return v53;
        sub_223683F04(a1, a2, (uint64_t)&v28, (uint64_t)&v41, (uint64_t)v47, (uint64_t)v39);
LABEL_20:
        v16 = v53;
        v23 = v53[2];
        v24 = v53[1];
        v25 = 2 * (v23 - v24) - 1;
        if (v23 == v24)
          v25 = 0;
        v26 = v53[5] + v53[4];
        if (v25 == v26)
        {
          sub_223684164((uint64_t)v53);
          v24 = v16[1];
          v26 = v16[5] + v16[4];
        }
        v22 = (_QWORD *)(*(_QWORD *)(v24 + ((v26 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v26 & 0xF));
        v15 = v28;
LABEL_25:
        *v22 = v15;
        memcpy(v22 + 1, v29, 0x168uLL);
        ++v16[5];
        break;
    }
  }
  return v53;
}

void sub_22368269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 248) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 264) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 248) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 264) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 264) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 248) = v11;
  }
LABEL_11:
  v12 = a5[7];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 168 * (v18 != -1)) = 1;
    *(_DWORD *)(v20 + 168 * (v18 == -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233F0E88(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 200) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    *(_DWORD *)(a3 + 32) = 1;
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 200) = v35;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 == 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 168 * v36) = 1;
      *(_DWORD *)(v52 + 168 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233F0E88(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 == 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 200) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 32) = v43;
    *(_DWORD *)(a3 + 200) = 3;
  }
}

void sub_223682BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 248) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 264) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 248) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 264) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 264) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 248) = v11;
  }
LABEL_11:
  v12 = a5[5];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 168 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 168 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233F0E88(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 200) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 32) = v35;
    *(_DWORD *)(a3 + 200) = 1;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 168 * v36) = 1;
      *(_DWORD *)(v52 + 168 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233F0E88(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 != 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 200) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 200) = v43;
    *(_DWORD *)(a3 + 32) = 3;
  }
}

void sub_2236830B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  double v38;
  int v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  double v54;
  int v55;
  double v56;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  BOOL v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  double v80;

  *(_DWORD *)(a3 + 8) = 3;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 96) = 0x412E848000000000;
    v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 248) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 264) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v11;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 248) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 264) = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 264) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 248) = v12;
  }
LABEL_11:
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_22;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v80 * 2.22044605e-16)
      goto LABEL_12;
  }
LABEL_22:
  v20 = a5[7];
  v21 = *(_QWORD *)(a6 + 8);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v80 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    v26 = 0;
    goto LABEL_33;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v26 * v20 != -1)
      goto LABEL_33;
LABEL_24:
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *(uint64_t **)(v27 + 24);
    v30 = (uint64_t *)sub_2233F0E88(v27);
    v80 = 1.0;
    v31 = sub_2233E3FAC(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0)
          v32 = 1;
        else
          v32 = -1;
        if (v32 != v20)
          goto LABEL_139;
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 32) = 3;
          v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1)
            v42 = 1;
          else
            v42 = 2;
          *(_DWORD *)(a3 + 32) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          v69 = *(_QWORD *)(a6 + 16);
          v70 = *(uint64_t **)(v69 + 24);
          v71 = (uint64_t *)sub_2233F0E88(v69);
          v72 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
          v80 = 1.0;
          v73 = sub_2233E3FAC(v70, v71, v72, &v80);
          if (v73 == 0.0)
            goto LABEL_141;
          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
          }
          else
          {
            v75 = fabs(v73);
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
            if (v75 <= v80 * 2.22044605e-16)
              goto LABEL_141;
          }
          if (v76 == v26)
          {
            if (v26 == 1)
              v78 = 1;
            else
              v78 = 2;
            *(_DWORD *)(a3 + 32) = v78;
            if (v26 == 1)
              v42 = 2;
            else
              v42 = 1;
            goto LABEL_165;
          }
        }
        v74 = v26 == 1;
        if (v26 == 1)
          v79 = 2;
        else
          v79 = 1;
        *(_DWORD *)(a3 + 32) = v79;
LABEL_170:
        if (v74)
          v62 = 1;
        else
          v62 = 2;
        goto LABEL_173;
      }
      v41 = fabs(v31);
      if (v31 > 0.0)
        v32 = 1;
      else
        v32 = -1;
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20)
          goto LABEL_139;
        goto LABEL_52;
      }
    }
    v32 = 0;
    if (v20)
      goto LABEL_139;
    goto LABEL_52;
  }
  v33 = fabs(v25);
  if (v25 > 0.0)
    v26 = 1;
  else
    v26 = -1;
  if (v33 <= v80 * 2.22044605e-16)
    goto LABEL_23;
  if (v26 * v20 == -1)
    goto LABEL_24;
LABEL_33:
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(uint64_t **)(v34 + 24);
  v36 = (uint64_t *)sub_2233F0E88(v34);
  v37 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v38 = sub_2233E3FAC(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    v39 = 0;
    goto LABEL_61;
  }
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
  }
  else
  {
    v40 = fabs(v38);
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
    if (v40 <= v80 * 2.22044605e-16)
      goto LABEL_34;
  }
LABEL_61:
  v43 = *(_QWORD *)(a6 + 8);
  v44 = *(uint64_t **)(v43 + 16);
  v45 = *(uint64_t **)(v43 + 24);
  v46 = (uint64_t *)sub_2233F0E88(v43);
  v80 = 1.0;
  v47 = sub_2233E3FAC(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_72;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > v80 * 2.22044605e-16)
      goto LABEL_72;
  }
  v48 = 0;
LABEL_72:
  v50 = *(_QWORD *)(a6 + 16);
  v51 = *(uint64_t **)(v50 + 16);
  v52 = *(uint64_t **)(v50 + 24);
  v53 = (uint64_t *)sub_2233F0E88(v50);
  v80 = 1.0;
  v54 = sub_2233E3FAC(v51, v52, v53, &v80);
  if (v54 == 0.0)
    goto LABEL_73;
  if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0)
      v55 = 1;
    else
      v55 = -1;
    goto LABEL_83;
  }
  v56 = fabs(v54);
  v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16)
LABEL_73:
    v55 = 0;
LABEL_83:
  if (v26)
    v57 = 1;
  else
    v57 = v55 * v20 == 1;
  v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39)
      v59 = 1;
    else
      v59 = v58;
    if ((v59 & 1) != 0)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 32) = 3;
        if (v55 == 1)
          v66 = 2;
        else
          v66 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v66;
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1)
          v60 = 1;
        else
          v60 = 2;
        *(_DWORD *)(a3 + 32) = v60;
        if (v55 == 1)
          v61 = 2;
        else
          v61 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v61;
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        v67 = v55 == 1;
        if (v55 == 1)
          v68 = 2;
        else
          v68 = 1;
        *(_DWORD *)(a3 + 32) = v68;
        if (v67)
          v42 = 1;
        else
          v42 = 2;
LABEL_165:
        *(_DWORD *)(a3 + 200) = v42;
        *(_BYTE *)(a3 + 12) = 1;
        return;
      }
      if (v18 != -v55)
        return;
      if (v55 == 1)
        v77 = 2;
      else
        v77 = 1;
      *(_DWORD *)(a3 + 32) = v77;
      *(_DWORD *)(a3 + 200) = v77;
      if (v58)
      {
        v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
LABEL_141:
    v62 = 4;
    *(_DWORD *)(a3 + 32) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 200) = v62;
    return;
  }
  if (v55 == 1)
    v63 = 2;
  else
    v63 = 1;
  *(_DWORD *)(a3 + 32) = v63;
  if (v26 == 1 || v20 == 1)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v65 = 3;
  *(_DWORD *)(a3 + 200) = v65;
  if ((v58 & 1) == 0)
    goto LABEL_121;
}

void sub_223683750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  double v28;
  int v29;
  double v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;

  v12 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 8) = 5;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v12 + 8);
  v14 = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v13 + 40);
  *(_OWORD *)(a3 + 80) = v14;
  v15 = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(a3 + 248) = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(a3 + 264) = v15;
  v16 = *(_DWORD *)(a5 + 36);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(uint64_t **)(v17 + 16);
  v19 = *(uint64_t **)(v17 + 24);
  v20 = (uint64_t *)sub_2233F0E88(v17);
  v54 = 1.0;
  v21 = sub_2233E3FAC(v18, v19, v20, &v54);
  if (v21 != 0.0)
  {
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      goto LABEL_12;
    }
    v23 = fabs(v21);
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v23 > v54 * 2.22044605e-16)
      goto LABEL_12;
  }
  v22 = 0;
LABEL_12:
  v24 = *(_QWORD *)(a6 + 16);
  v25 = *(uint64_t **)(v24 + 16);
  v26 = *(uint64_t **)(v24 + 24);
  v27 = (uint64_t *)sub_2233F0E88(v24);
  v54 = 1.0;
  v28 = sub_2233E3FAC(v25, v26, v27, &v54);
  if (v28 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v28 > 0.0)
      v29 = 1;
    else
      v29 = -1;
    goto LABEL_23;
  }
  v30 = fabs(v28);
  v29 = v28 > 0.0 ? 1 : -1;
  if (v30 <= v54 * 2.22044605e-16)
LABEL_13:
    v29 = 0;
LABEL_23:
  if (v16 == 1)
    v31 = v22;
  else
    v31 = v29;
  v32 = v31 * v16;
  if (v32 == 1)
    v33 = 1;
  else
    v33 = 2;
  if (v32 == 1)
    v34 = 2;
  else
    v34 = 1;
  if (v32)
  {
    v35 = v34;
  }
  else
  {
    v33 = 4;
    v35 = 4;
  }
  *(_DWORD *)(a3 + 32) = v33;
  *(_DWORD *)(a3 + 200) = v35;
  if (v22)
  {
    v36 = *(float **)(a1 + 24);
    v37 = *(float *)a3;
    v38 = *(float *)(a3 + 4);
    v39 = *v36;
    v40 = v36[1];
  }
  else
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v39 = *(float *)(a1 + 160);
      v40 = *(float *)(a1 + 164);
    }
    else
    {
      sub_2233F0AD0(a1, *(float **)(a1 + 24), a1 + 32);
      v41 = *(_QWORD *)(a1 + 56);
      v42 = *(_QWORD *)(a1 + 64);
      if (v42 >= v41)
      {
        v44 = v42 - 1;
        if (v44 <= v41)
          v43 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8 * (v44 % v41));
        else
          v43 = *(uint64_t **)(a1 + 48);
      }
      else
      {
        v43 = (uint64_t *)(*(_QWORD *)(a1 + 32) - 8);
      }
      v45 = *v43;
      *(_QWORD *)(a1 + 160) = v45;
      *(_BYTE *)(a1 + 168) = 1;
      v40 = *((float *)&v45 + 1);
      v39 = *(float *)&v45;
    }
    v37 = *(float *)a3;
    v38 = *(float *)(a3 + 4);
  }
  *(float *)(a3 + 104) = (float)((float)(v37 - v39) * (float)(v37 - v39))
                       + (float)((float)(v38 - v40) * (float)(v38 - v40));
  if (v29)
  {
    v46 = (float)((float)(v37 - **(float **)(a2 + 24)) * (float)(v37 - **(float **)(a2 + 24)))
        + (float)((float)(v38 - *(float *)(*(_QWORD *)(a2 + 24) + 4))
                * (float)(v38 - *(float *)(*(_QWORD *)(a2 + 24) + 4)));
  }
  else
  {
    if (*(_BYTE *)(a2 + 168))
    {
      v47 = *(float *)(a2 + 160);
      v48 = *(float *)(a2 + 164);
    }
    else
    {
      sub_2233F0AD0(a2, *(float **)(a2 + 24), a2 + 32);
      v49 = *(_QWORD *)(a2 + 56);
      v50 = *(_QWORD *)(a2 + 64);
      if (v50 >= v49)
      {
        v52 = v50 - 1;
        if (v52 <= v49)
          v51 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8 * (v52 % v49));
        else
          v51 = *(uint64_t **)(a2 + 48);
      }
      else
      {
        v51 = (uint64_t *)(*(_QWORD *)(a2 + 32) - 8);
      }
      v53 = *v51;
      *(_QWORD *)(a2 + 160) = v53;
      *(_BYTE *)(a2 + 168) = 1;
      v47 = *(float *)&v53;
      v37 = *(float *)a3;
      v38 = *(float *)(a3 + 4);
      v48 = *((float *)&v53 + 1);
    }
    v46 = (float)((float)(v38 - v48) * (float)(v38 - v48)) + (float)((float)(v37 - v47) * (float)(v37 - v47));
  }
  *(float *)(a3 + 272) = v46;
}

__n128 sub_223683A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[36];
  __int128 v58;
  __int128 v59;
  _BYTE v60[36];
  double v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v74 = *(_OWORD *)(a3 + 12);
  v75 = *(_DWORD *)(a3 + 28);
  *(_OWORD *)v60 = *(_OWORD *)(a3 + 68);
  v58 = *(_OWORD *)(a3 + 36);
  v59 = *(_OWORD *)(a3 + 52);
  v9 = *(_OWORD *)(a3 + 120);
  v68 = *(_OWORD *)(a3 + 104);
  v69 = v9;
  v10 = *(_OWORD *)(a3 + 136);
  v11 = *(_OWORD *)(a3 + 152);
  v12 = *(_OWORD *)(a3 + 184);
  v72 = *(_OWORD *)(a3 + 168);
  v73 = v12;
  v70 = v10;
  v71 = v11;
  *(_OWORD *)v57 = *(_OWORD *)(a3 + 236);
  v55 = *(_OWORD *)(a3 + 204);
  v56 = *(_OWORD *)(a3 + 220);
  v13 = *(_OWORD *)(a3 + 288);
  v62 = *(_OWORD *)(a3 + 272);
  v63 = v13;
  result = *(__n128 *)(a3 + 304);
  v15 = *(_OWORD *)(a3 + 320);
  v16 = *(_OWORD *)(a3 + 352);
  v66 = *(_OWORD *)(a3 + 336);
  v67 = v16;
  v64 = result;
  v65 = v15;
  v17 = *(_DWORD *)(a5 + 480);
  if (*(_DWORD *)(a5 + 476) == 1)
  {
    v18 = *(_QWORD *)(a6 + 8);
    v19 = *(uint64_t **)(v18 + 16);
    v20 = *(uint64_t **)(v18 + 24);
    v21 = (uint64_t *)sub_2233F0E88(v18);
    v61 = 1.0;
    result.n128_f64[0] = sub_2233E3FAC(v19, v20, v21, &v61);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v61 * 2.22044605e-16))
    {
      if (result.n128_f64[0] <= 0.0)
        v22 = 1;
      else
        v22 = 2;
      v23 = *(_QWORD **)a4;
      v24 = *(_QWORD *)(*(_QWORD *)a4 + 16);
      v25 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v26 = *(_QWORD *)(a5 + 320);
      *(_OWORD *)&v60[12] = *(_OWORD *)(a5 + 384);
      *(_QWORD *)&v60[28] = *(_QWORD *)(a5 + 400);
      *(_OWORD *)&v57[12] = *(_OWORD *)(a5 + 408);
      *(_QWORD *)&v57[28] = *(_QWORD *)(a5 + 424);
      if (v24 == v25)
        v27 = 0;
      else
        v27 = 2 * (v24 - v25) - 1;
      v28 = v23[5] + v23[4];
      if (v27 == v28)
      {
        sub_223684164((uint64_t)v23);
        v25 = v23[1];
        v28 = v23[5] + v23[4];
      }
      v29 = *(_QWORD *)(v25 + ((v28 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v28 & 0xF);
      *(_QWORD *)v29 = v26;
      *(_DWORD *)(v29 + 8) = 5;
      *(_OWORD *)(v29 + 12) = v74;
      *(_DWORD *)(v29 + 28) = v75;
      *(_DWORD *)(v29 + 32) = v22;
      *(_OWORD *)(v29 + 52) = v59;
      *(_OWORD *)(v29 + 68) = *(_OWORD *)v60;
      *(_OWORD *)(v29 + 84) = *(_OWORD *)&v60[16];
      *(_DWORD *)(v29 + 100) = *(_DWORD *)&v60[32];
      *(_OWORD *)(v29 + 36) = v58;
      v30 = v68;
      *(_OWORD *)(v29 + 120) = v69;
      *(_OWORD *)(v29 + 104) = v30;
      v31 = v72;
      *(_OWORD *)(v29 + 184) = v73;
      *(_OWORD *)(v29 + 168) = v31;
      v32 = v70;
      *(_OWORD *)(v29 + 152) = v71;
      *(_OWORD *)(v29 + 136) = v32;
      *(_DWORD *)(v29 + 200) = 3;
      *(_OWORD *)(v29 + 220) = v56;
      *(_OWORD *)(v29 + 236) = *(_OWORD *)v57;
      *(_OWORD *)(v29 + 252) = *(_OWORD *)&v57[16];
      *(_DWORD *)(v29 + 268) = *(_DWORD *)&v57[32];
      *(_OWORD *)(v29 + 204) = v55;
      v33 = v63;
      *(_OWORD *)(v29 + 272) = v62;
      *(_OWORD *)(v29 + 288) = v33;
      result = v64;
      v34 = v65;
      v35 = v67;
      *(_OWORD *)(v29 + 336) = v66;
      *(_OWORD *)(v29 + 352) = v35;
      *(__n128 *)(v29 + 304) = result;
      *(_OWORD *)(v29 + 320) = v34;
      ++v23[5];
    }
  }
  if (v17 == 1)
  {
    v36 = *(_QWORD *)(a6 + 16);
    v37 = *(uint64_t **)(v36 + 16);
    v38 = *(uint64_t **)(v36 + 24);
    v39 = (uint64_t *)sub_2233F0E88(v36);
    v61 = 1.0;
    result.n128_f64[0] = sub_2233E3FAC(v37, v38, v39, &v61);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v61 * 2.22044605e-16))
    {
      v40 = a5 + 304;
      if (result.n128_f64[0] <= 0.0)
        v41 = 1;
      else
        v41 = 2;
      v42 = *(_QWORD **)a4;
      v43 = v42[2];
      v44 = v42[1];
      v45 = *(_QWORD *)(v40 + 8);
      *(_QWORD *)&v60[28] = *(_QWORD *)(v40 + 40);
      *(_OWORD *)&v60[12] = *(_OWORD *)(v40 + 24);
      *(_QWORD *)&v57[28] = *(_QWORD *)(v40 + 64);
      *(_OWORD *)&v57[12] = *(_OWORD *)(v40 + 48);
      if (v43 == v44)
        v46 = 0;
      else
        v46 = 2 * (v43 - v44) - 1;
      v47 = v42[5] + v42[4];
      if (v46 == v47)
      {
        sub_223684164((uint64_t)v42);
        v44 = v42[1];
        v47 = v42[5] + v42[4];
      }
      v48 = *(_QWORD *)(v44 + ((v47 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v47 & 0xF);
      *(_QWORD *)v48 = v45;
      *(_DWORD *)(v48 + 8) = 5;
      *(_OWORD *)(v48 + 12) = v74;
      *(_DWORD *)(v48 + 28) = v75;
      *(_DWORD *)(v48 + 32) = 3;
      *(_OWORD *)(v48 + 52) = v59;
      *(_OWORD *)(v48 + 68) = *(_OWORD *)v60;
      *(_OWORD *)(v48 + 84) = *(_OWORD *)&v60[16];
      *(_DWORD *)(v48 + 100) = *(_DWORD *)&v60[32];
      *(_OWORD *)(v48 + 36) = v58;
      v49 = v68;
      *(_OWORD *)(v48 + 120) = v69;
      *(_OWORD *)(v48 + 104) = v49;
      v50 = v72;
      *(_OWORD *)(v48 + 184) = v73;
      *(_OWORD *)(v48 + 168) = v50;
      v51 = v70;
      *(_OWORD *)(v48 + 152) = v71;
      *(_OWORD *)(v48 + 136) = v51;
      *(_DWORD *)(v48 + 200) = v41;
      *(_OWORD *)(v48 + 220) = v56;
      *(_OWORD *)(v48 + 236) = *(_OWORD *)v57;
      *(_OWORD *)(v48 + 252) = *(_OWORD *)&v57[16];
      *(_DWORD *)(v48 + 268) = *(_DWORD *)&v57[32];
      *(_OWORD *)(v48 + 204) = v55;
      v52 = v63;
      *(_OWORD *)(v48 + 272) = v62;
      *(_OWORD *)(v48 + 288) = v52;
      result = v64;
      v53 = v65;
      v54 = v67;
      *(_OWORD *)(v48 + 336) = v66;
      *(_OWORD *)(v48 + 352) = v54;
      *(__n128 *)(v48 + 304) = result;
      *(_OWORD *)(v48 + 320) = v53;
      ++v42[5];
    }
  }
  return result;
}

void sub_223683F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;

  v9 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v9 + 8);
  v11 = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v10 + 40);
  *(_OWORD *)(a3 + 80) = v11;
  v12 = *(_QWORD *)(v10 + 64);
  *(_OWORD *)(a3 + 248) = *(_OWORD *)(v10 + 48);
  *(_QWORD *)(a3 + 264) = v12;
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (uint64_t *)sub_2233F0E88(v13);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v38 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v38 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v20 = *(_QWORD *)(a6 + 8);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *(uint64_t **)(v20 + 24);
  v23 = (uint64_t *)sub_2233F0E88(v20);
  v38 = 1.0;
  v24 = sub_2233E3FAC(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    v25 = 0;
    goto LABEL_23;
  }
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
  }
  else
  {
    v26 = fabs(v24);
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v26 <= v38 * 2.22044605e-16)
      goto LABEL_13;
  }
LABEL_23:
  v28 = *(_QWORD *)(a6 + 8);
  v27 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 16);
  v30 = *(uint64_t **)(v28 + 24);
  v31 = (uint64_t *)sub_2233F0E88(v27);
  v38 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    v33 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 > v38 * 2.22044605e-16)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (v32 > 0.0)
    v33 = 1;
  else
    v33 = -1;
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1)
      v36 = v25 == -1;
    else
      v36 = v18 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 32) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 32) = 4;
  }
  *(_DWORD *)(a3 + 200) = v35;
}

void sub_223684164(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1700uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1700uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1700uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_2236846A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2236846C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2236846D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2236846EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223684704(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  char v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD **v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD **v71;
  uint64_t v72;
  BOOL v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  _QWORD *v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD **v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD **v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  BOOL v96;
  char v97;
  _QWORD *v98;
  uint64_t v99;
  BOOL v100;
  char v101;
  _QWORD **v102;
  _QWORD *v103;
  BOOL v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;

  v117 = 0;
  v118 = 0;
  v116 = &v117;
  v3 = a1[1];
  v4 = a1[2];
  if (v4 == v3)
    goto LABEL_180;
  v5 = a1[4];
  v6 = v5 >> 4;
  v7 = (uint64_t *)(v3 + 8 * (v5 >> 4));
  v8 = *v7;
  v9 = *v7 + 368 * (v5 & 0xF);
  v10 = *(_QWORD *)(v3 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
  if (v9 == v10)
    goto LABEL_84;
  v115 = 0;
  v108 = *(_QWORD *)(v3 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
  while (2)
  {
    if (*(_DWORD *)(v9 + 8) != 7)
      goto LABEL_81;
    v109 = v9;
    v110 = v7;
    v11 = v9 + 32;
    v114 = v9 + 368;
    while (2)
    {
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD **)(v11 + 24);
      v15 = &v117;
      v16 = &v117;
      v17 = v117;
      if (!v117)
      {
LABEL_28:
        v23 = operator new(0x48uLL);
        v24 = v23;
        v23[4] = v13;
        v23[5] = v14;
        v23[7] = 0;
        v23[8] = 0;
        v23[6] = 0;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = v15;
        *v16 = v23;
        v25 = v23;
        if (*v116)
        {
          v116 = (_QWORD *)*v116;
          v25 = (_QWORD *)*v16;
        }
        v26 = v117;
        v20 = v25 == v117;
        *((_BYTE *)v25 + 24) = v25 == v117;
        if (!v20)
        {
          do
          {
            v27 = v25[2];
            if (*(_BYTE *)(v27 + 24))
              break;
            v28 = *(_QWORD **)(v27 + 16);
            v29 = *v28;
            if (*v28 == v27)
            {
              v32 = v28[1];
              if (!v32 || (v33 = *(unsigned __int8 *)(v32 + 24), v30 = (_BYTE *)(v32 + 24), v33))
              {
                if (*(_QWORD **)v27 == v25)
                {
                  *(_BYTE *)(v27 + 24) = 1;
                  *((_BYTE *)v28 + 24) = 0;
                  v36 = *(_QWORD *)(v27 + 8);
                  *v28 = v36;
                  if (v36)
                    goto LABEL_45;
                }
                else
                {
                  v34 = *(uint64_t **)(v27 + 8);
                  v35 = *v34;
                  *(_QWORD *)(v27 + 8) = *v34;
                  if (v35)
                  {
                    *(_QWORD *)(v35 + 16) = v27;
                    v28 = *(_QWORD **)(v27 + 16);
                  }
                  v34[2] = (uint64_t)v28;
                  *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v34;
                  *v34 = v27;
                  *(_QWORD *)(v27 + 16) = v34;
                  v28 = (_QWORD *)v34[2];
                  v27 = *v28;
                  *((_BYTE *)v34 + 24) = 1;
                  *((_BYTE *)v28 + 24) = 0;
                  v36 = *(_QWORD *)(v27 + 8);
                  *v28 = v36;
                  if (v36)
LABEL_45:
                    *(_QWORD *)(v36 + 16) = v28;
                }
                *(_QWORD *)(v27 + 16) = v28[2];
                *(_QWORD *)(v28[2] + 8 * (*(_QWORD *)v28[2] != (_QWORD)v28)) = v27;
                *(_QWORD *)(v27 + 8) = v28;
LABEL_53:
                v28[2] = v27;
                break;
              }
            }
            else if (!v29 || (v31 = *(unsigned __int8 *)(v29 + 24), v30 = (_BYTE *)(v29 + 24), v31))
            {
              if (*(_QWORD **)v27 == v25)
              {
                v57 = v25[1];
                *(_QWORD *)v27 = v57;
                if (v57)
                {
                  *(_QWORD *)(v57 + 16) = v27;
                  v28 = *(_QWORD **)(v27 + 16);
                }
                v25[2] = v28;
                *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v25;
                v25[1] = v27;
                *(_QWORD *)(v27 + 16) = v25;
                v28 = (_QWORD *)v25[2];
                *((_BYTE *)v25 + 24) = 1;
                *((_BYTE *)v28 + 24) = 0;
                v27 = v28[1];
                v39 = *(_QWORD **)v27;
                v28[1] = *(_QWORD *)v27;
                if (v39)
LABEL_51:
                  v39[2] = v28;
              }
              else
              {
                *(_BYTE *)(v27 + 24) = 1;
                *((_BYTE *)v28 + 24) = 0;
                v27 = v28[1];
                v39 = *(_QWORD **)v27;
                v28[1] = *(_QWORD *)v27;
                if (v39)
                  goto LABEL_51;
              }
              *(_QWORD *)(v27 + 16) = v28[2];
              *(_QWORD *)(v28[2] + 8 * (*(_QWORD *)v28[2] != (_QWORD)v28)) = v27;
              *(_QWORD *)v27 = v28;
              goto LABEL_53;
            }
            *(_BYTE *)(v27 + 24) = 1;
            v25 = v28;
            *((_BYTE *)v28 + 24) = v28 == v26;
            *v30 = 1;
          }
          while (v28 != v26);
        }
        ++v118;
        v38 = (char *)v23[7];
        v37 = (char *)v23[8];
        if (v38 < v37)
          goto LABEL_7;
LABEL_55:
        v40 = (char *)v24[6];
        v41 = (v38 - v40) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_22367C394();
        v43 = v37 - v40;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 >> 61)
            sub_223174E94();
          v45 = operator new(8 * v44);
          v46 = &v45[8 * v41];
          *v46 = v115;
          v12 = (uint64_t)(v46 + 1);
          v47 = v38 - v40;
          if (v38 == v40)
            goto LABEL_72;
        }
        else
        {
          v45 = 0;
          v46 = (_QWORD *)(8 * v41);
          *(_QWORD *)(8 * v41) = v115;
          v12 = 8 * v41 + 8;
          v47 = v38 - v40;
          if (v38 == v40)
          {
LABEL_72:
            v24[6] = v46;
            v24[7] = v12;
            v24[8] = &v45[8 * v44];
            if (v40)
              operator delete(v40);
            goto LABEL_8;
          }
        }
        v48 = v47 - 8;
        if (v48 < 0x58)
          goto LABEL_185;
        if ((unint64_t)(v40 - v45) < 0x20)
          goto LABEL_185;
        v49 = (v48 >> 3) + 1;
        v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v38[-v50];
        v46 = (_QWORD *)((char *)v46 - v50);
        v52 = &v45[8 * v41 - 16];
        v53 = v38 - 16;
        v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        v38 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_185:
          do
          {
            v56 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v46 = v56;
          }
          while (v38 != v40);
        }
        goto LABEL_72;
      }
      while (1)
      {
        while (1)
        {
          v15 = (_QWORD **)v17;
          v18 = v17[4];
          if (v13 == v18)
            break;
          if (v13 < v18)
            goto LABEL_11;
          if (v18 >= v13)
            v22 = 1;
          else
            v22 = -1;
          if ((v22 & 0x80) == 0)
            goto LABEL_47;
LABEL_26:
          v17 = v15[1];
          if (!v17)
          {
            v16 = v15 + 1;
            goto LABEL_28;
          }
        }
        v19 = v15[5];
        if ((uint64_t)v14 >= (uint64_t)v19)
          break;
LABEL_11:
        v17 = *v15;
        v16 = v15;
        if (!*v15)
          goto LABEL_28;
      }
      v20 = v19 == v14;
      if ((uint64_t)v19 >= (uint64_t)v14)
        v21 = 1;
      else
        v21 = -1;
      if (v20)
        v21 = 0;
      if (v21 < 0)
        goto LABEL_26;
LABEL_47:
      v24 = v15;
      v38 = (char *)v15[7];
      v37 = (char *)v15[8];
      if (v38 >= v37)
        goto LABEL_55;
LABEL_7:
      *(_QWORD *)v38 = v115;
      v12 = (uint64_t)(v38 + 8);
LABEL_8:
      v24[7] = v12;
      v11 += 168;
      if (v11 != v114)
        continue;
      break;
    }
    v9 = v109;
    v7 = v110;
    v8 = *v110;
    v10 = v108;
LABEL_81:
    v9 += 368;
    if (v9 - v8 == 5888)
    {
      v58 = v7[1];
      ++v7;
      v8 = v58;
      v9 = v58;
    }
    ++v115;
    if (v9 != v10)
      continue;
    break;
  }
  v5 = a1[4];
  v3 = a1[1];
  v4 = a1[2];
  v6 = v5 >> 4;
LABEL_84:
  if (v4 != v3)
  {
    v59 = (_QWORD *)(v3 + 8 * v6);
    v60 = *v59 + 368 * (v5 & 0xF);
    v61 = *(_QWORD *)(v3 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
    while (v60 != v61)
    {
      v62 = *(_DWORD *)(v60 + 8);
      if (v62 != 2 && v62 != 7)
      {
        v65 = v117;
        if (v117)
        {
          v67 = *(_QWORD *)(v60 + 48);
          v66 = *(_QWORD *)(v60 + 56);
          v68 = &v117;
          v69 = v117;
          do
          {
            v70 = v69;
            v71 = v68;
            v72 = v69[4];
            v73 = v72 == v67;
            if (v72 >= v67)
              v74 = 1;
            else
              v74 = -1;
            if (v73)
            {
              v75 = v69[5];
              v76 = v75 == v66;
              v74 = v75 >= v66 ? 1 : -1;
              if (v76)
                v74 = 0;
            }
            if (v74 < 0)
              ++v69;
            else
              v68 = (_QWORD **)v69;
            v69 = (_QWORD *)*v69;
          }
          while (v69);
          if (v68 != &v117)
          {
            if (v74 < 0)
              v77 = v71;
            else
              v77 = v70;
            v78 = v77[4];
            v79 = v67 == v78;
            if (v67 >= v78)
              v80 = 1;
            else
              v80 = -1;
            if (v79)
            {
              if (v74 < 0)
                v81 = v71;
              else
                v81 = v70;
              v82 = v81[5];
              v83 = v66 == v82;
              if (v66 >= v82)
                v84 = 1;
              else
                v84 = -1;
              if (v83)
                v80 = 0;
              else
                v80 = v84;
            }
            if ((v80 & 0x80) == 0)
            {
              if (v74 < 0)
                v70 = v71;
              v85 = (_QWORD *)v70[6];
              v86 = (_QWORD *)v70[7];
              if (v85 != v86)
              {
                do
                {
                  if (sub_22368629C((_QWORD *)v60, (_QWORD *)(*(_QWORD *)(a1[1] + (((a1[4] + *v85) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 368 * ((*((_DWORD *)a1 + 8) + *(_DWORD *)v85) & 0xF)), a2, a3))
                  {
                    *(_BYTE *)(*(_QWORD *)(a1[1] + (((a1[4] + *v85) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 368 * ((*((_DWORD *)a1 + 8) + *(_DWORD *)v85) & 0xF)
                             + 24) = 1;
                  }
                  ++v85;
                }
                while (v85 != v86);
                v65 = v117;
              }
            }
          }
          if (v65)
          {
            v88 = *(_QWORD *)(v60 + 216);
            v87 = *(_QWORD **)(v60 + 224);
            v89 = &v117;
            do
            {
              v91 = v65;
              v92 = v89;
              v93 = v65[4];
              if (v93 >= v88)
                v94 = 1;
              else
                v94 = -1;
              if (v93 == v88)
              {
                v95 = (_QWORD *)v91[5];
                v96 = v95 == v87;
                if ((uint64_t)v95 >= (uint64_t)v87)
                  v97 = 1;
                else
                  v97 = -1;
                if (v96)
                  v94 = 0;
                else
                  v94 = v97;
              }
              v90 = v91 + 1;
              if ((v94 & 0x80) == 0)
              {
                v90 = v91;
                v89 = (_QWORD **)v91;
              }
              v65 = (_QWORD *)*v90;
            }
            while (v65);
            if (v89 != &v117)
            {
              if (v94 < 0)
                v98 = v92;
              else
                v98 = v91;
              v99 = v98[4];
              v100 = v88 == v99;
              if (v88 >= v99)
                v101 = 1;
              else
                v101 = -1;
              if (v100)
              {
                v102 = v94 < 0 ? v92 : (_QWORD **)v91;
                v103 = v102[5];
                v104 = v87 == v103;
                v101 = (uint64_t)v87 >= (uint64_t)v103 ? 1 : -1;
                if (v104)
                  v101 = 0;
              }
              if ((v101 & 0x80) == 0)
              {
                if (v94 < 0)
                  v105 = v92;
                else
                  v105 = v91;
                v106 = (_QWORD *)v105[6];
                v107 = (_QWORD *)v105[7];
                while (v106 != v107)
                {
                  if (sub_22368629C((_QWORD *)v60, (_QWORD *)(*(_QWORD *)(a1[1] + (((a1[4] + *v106) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 368 * ((*((_DWORD *)a1 + 8) + *(_DWORD *)v106) & 0xF)), a2, a3))
                  {
                    *(_BYTE *)(*(_QWORD *)(a1[1] + (((a1[4] + *v106) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 368 * ((*((_DWORD *)a1 + 8) + *(_DWORD *)v106) & 0xF)
                             + 24) = 1;
                  }
                  ++v106;
                }
              }
            }
          }
        }
      }
      v60 += 368;
      if (v60 - *v59 == 5888)
      {
        v64 = v59[1];
        ++v59;
        v60 = v64;
      }
    }
  }
LABEL_180:
  sub_223686534((uint64_t)&v116, v117);
}

void sub_223684EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_223686534((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_223684F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_223686534((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_223684F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_223686534((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_223684F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_223686534((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

BOOL sub_223684F4C(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;

  sub_223686584(a1, (uint64_t **)a2, a3, a4);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = a1[4];
    v8 = a1[1];
    if (a1[2] != v8)
    {
      v9 = (uint64_t *)(v8 + 8 * (v7 >> 4));
      v10 = *v9;
      v11 = *v9 + 368 * (a1[4] & 0xFLL);
      v12 = *(_QWORD *)(v8 + (((a1[5] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v7) & 0xF);
      while (v11 != v12)
      {
        *(_QWORD *)(v11 + 16) = -1;
        v11 += 368;
        if (v11 - v10 == 5888)
        {
          v13 = v9[1];
          ++v9;
          v10 = v13;
          v11 = v13;
        }
      }
    }
    v14 = (uint64_t *)(a2 + 8);
    v15 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 != a2 + 8)
    {
      v16 = *(uint64_t **)a2;
      do
      {
        v17 = (uint64_t *)v16[5];
        if (v17 != v16 + 6)
        {
          v18 = v16[4];
          do
          {
            *(_QWORD *)(*(_QWORD *)(v8 + (((v17[4] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
                      + 368 * ((*((_DWORD *)v17 + 8) + (_DWORD)v7) & 0xF)
                      + 16) = v18;
            v19 = (uint64_t *)v17[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (uint64_t *)v17[2];
                v21 = *v20 == (_QWORD)v17;
                v17 = v20;
              }
              while (!v21);
            }
            v17 = v20;
          }
          while (v20 != v16 + 6);
        }
        v22 = (uint64_t *)v16[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (uint64_t *)v16[2];
            v21 = *v23 == (_QWORD)v16;
            v16 = v23;
          }
          while (!v21);
        }
        v16 = v23;
      }
      while (v23 != v14);
      v24 = a1[4];
      v25 = a1[1];
      do
      {
        v26 = (uint64_t *)v15[5];
        v27 = v15 + 6;
        if (v26 != v15 + 6)
        {
          v28 = (uint64_t *)v15[5];
          while (1)
          {
            v29 = *(_QWORD *)(v25 + (((unint64_t)(v28[4] + v24) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 368 * ((*((_DWORD *)v28 + 8) + (_DWORD)v24) & 0xF);
            if (*(_DWORD *)(v29 + 32) == 2 && *(_DWORD *)(v29 + 200) == 2)
              break;
            v30 = (uint64_t *)v28[1];
            if (v30)
            {
              do
              {
                v31 = v30;
                v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
            else
            {
              do
              {
                v31 = (uint64_t *)v28[2];
                v21 = *v31 == (_QWORD)v28;
                v28 = v31;
              }
              while (!v21);
            }
            v28 = v31;
            if (v31 == v27)
              goto LABEL_46;
          }
          do
          {
            *(_BYTE *)(*(_QWORD *)(v25 + (((unint64_t)(v26[4] + v24) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 368 * ((*((_DWORD *)v26 + 8) + (_DWORD)v24) & 0xF)
                     + 25) = 1;
            v32 = (uint64_t *)v26[1];
            if (v32)
            {
              do
              {
                v33 = v32;
                v32 = (uint64_t *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                v33 = (uint64_t *)v26[2];
                v21 = *v33 == (_QWORD)v26;
                v26 = v33;
              }
              while (!v21);
            }
            v26 = v33;
          }
          while (v33 != v27);
        }
LABEL_46:
        v34 = (uint64_t *)v15[1];
        if (v34)
        {
          do
          {
            v35 = v34;
            v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (uint64_t *)v15[2];
            v21 = *v35 == (_QWORD)v15;
            v15 = v35;
          }
          while (!v21);
        }
        v15 = v35;
      }
      while (v35 != v14);
    }
    sub_2236870FC((uint64_t)a1, (_QWORD *)a2);
  }
  return v6 != 0;
}

void sub_223685214(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = a1[1];
  v4 = a1[2];
  v5 = (_QWORD *)(v3 + 8 * (a1[4] >> 4));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *v5 + 368 * (a1[4] & 0xFLL);
  v55 = 0;
  v7 = a2 + 1;
  while (v4 != v3)
  {
    v8 = a1[5] + a1[4];
    if (v6 == *(_QWORD *)(v3 + ((v8 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v8 & 0xF))
      return;
LABEL_10:
    v51 = v5;
    v52 = v6;
    if (!*(_BYTE *)(v6 + 24))
    {
      v9 = 0;
      v10 = (_QWORD *)(v6 + 32);
      v53 = (_QWORD *)(v6 + 368);
      v54 = v6 + 32;
      do
      {
        v12 = (uint64_t *)v10[1];
        v13 = (uint64_t *)v10[2];
        v14 = (uint64_t *)v10[3];
        v15 = v7;
        v16 = v7;
        v17 = *v7;
        v56 = v9;
        if (!*v7)
          goto LABEL_31;
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v17;
            v18 = (uint64_t *)v17[4];
            if (v12 != v18)
              break;
            v19 = v16[5];
            if (v13 != v19)
            {
              if ((uint64_t)v13 < (uint64_t)v19)
                goto LABEL_18;
              if ((uint64_t)v19 >= (uint64_t)v13)
                goto LABEL_56;
              goto LABEL_29;
            }
            v20 = v16[6];
            if ((uint64_t)v14 >= (uint64_t)v20)
            {
              if ((uint64_t)v20 >= (uint64_t)v14)
                goto LABEL_56;
              goto LABEL_29;
            }
LABEL_18:
            v17 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_31;
          }
          if ((uint64_t)v12 < (uint64_t)v18)
            goto LABEL_18;
          if ((uint64_t)v18 >= (uint64_t)v12)
            goto LABEL_56;
LABEL_29:
          v17 = v16[1];
        }
        while (v17);
        v15 = v16 + 1;
LABEL_31:
        v21 = (uint64_t *)v16;
        v16 = (uint64_t **)operator new(0x50uLL);
        v16[4] = v12;
        v16[5] = v13;
        v16[6] = v14;
        v16[7] = 0;
        v16[8] = 0;
        v16[9] = 0;
        *v16 = 0;
        v16[1] = 0;
        v16[2] = v21;
        *v15 = (uint64_t *)v16;
        v22 = (uint64_t *)**a2;
        v23 = (uint64_t *)v16;
        if (v22)
        {
          *a2 = v22;
          v23 = *v15;
        }
        v24 = *v7;
        v25 = v23 == *v7;
        *((_BYTE *)v23 + 24) = v25;
        if (!v25)
        {
          do
          {
            v26 = v23[2];
            if (*(_BYTE *)(v26 + 24))
              break;
            v27 = *(uint64_t **)(v26 + 16);
            v28 = *v27;
            if (*v27 == v26)
            {
              v31 = v27[1];
              if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
              {
                if (*(uint64_t **)v26 == v23)
                {
                  *(_BYTE *)(v26 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v35 = *(_QWORD *)(v26 + 8);
                  *v27 = v35;
                  if (v35)
                    goto LABEL_48;
                }
                else
                {
                  v33 = *(uint64_t **)(v26 + 8);
                  v34 = *v33;
                  *(_QWORD *)(v26 + 8) = *v33;
                  if (v34)
                  {
                    *(_QWORD *)(v34 + 16) = v26;
                    v27 = *(uint64_t **)(v26 + 16);
                  }
                  v33[2] = (uint64_t)v27;
                  *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                  *v33 = v26;
                  *(_QWORD *)(v26 + 16) = v33;
                  v27 = (uint64_t *)v33[2];
                  v26 = *v27;
                  *((_BYTE *)v33 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v35 = *(_QWORD *)(v26 + 8);
                  *v27 = v35;
                  if (v35)
LABEL_48:
                    *(_QWORD *)(v35 + 16) = v27;
                }
                *(_QWORD *)(v26 + 16) = v27[2];
                *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                *(_QWORD *)(v26 + 8) = v27;
LABEL_54:
                v27[2] = v26;
                break;
              }
            }
            else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
            {
              if (*(uint64_t **)v26 == v23)
              {
                v49 = v23[1];
                *(_QWORD *)v26 = v49;
                if (v49)
                {
                  *(_QWORD *)(v49 + 16) = v26;
                  v27 = *(uint64_t **)(v26 + 16);
                }
                v23[2] = (uint64_t)v27;
                *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v23;
                v23[1] = v26;
                *(_QWORD *)(v26 + 16) = v23;
                v27 = (uint64_t *)v23[2];
                *((_BYTE *)v23 + 24) = 1;
                *((_BYTE *)v27 + 24) = 0;
                v26 = v27[1];
                v36 = *(uint64_t **)v26;
                v27[1] = *(_QWORD *)v26;
                if (v36)
LABEL_52:
                  v36[2] = (uint64_t)v27;
              }
              else
              {
                *(_BYTE *)(v26 + 24) = 1;
                *((_BYTE *)v27 + 24) = 0;
                v26 = v27[1];
                v36 = *(uint64_t **)v26;
                v27[1] = *(_QWORD *)v26;
                if (v36)
                  goto LABEL_52;
              }
              *(_QWORD *)(v26 + 16) = v27[2];
              *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
              *(_QWORD *)v26 = v27;
              goto LABEL_54;
            }
            *(_BYTE *)(v26 + 24) = 1;
            v23 = v27;
            *((_BYTE *)v27 + 24) = v27 == v24;
            *v29 = 1;
          }
          while (v27 != v24);
        }
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v9 = v56;
LABEL_56:
        v37 = v54 - 168 * v9 + 176;
        v39 = (char *)v16[8];
        v38 = (unint64_t)v16[9];
        if ((unint64_t)v39 < v38)
        {
          *(_QWORD *)v39 = v55;
          *((_QWORD *)v39 + 1) = v9;
          v39[16] = 0;
          v11 = v39 + 40;
          *((_QWORD *)v39 + 3) = v37;
          *((_QWORD *)v39 + 4) = v10;
        }
        else
        {
          v40 = v16[7];
          v41 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (char *)v40) >> 3) + 1;
          if (v41 > 0x666666666666666)
            sub_22367C394();
          v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - (_QWORD)v40) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x333333333333333)
            v43 = 0x666666666666666;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 > 0x666666666666666)
              sub_223174E94();
            v44 = (char *)operator new(40 * v43);
            v9 = v56;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * ((v39 - (char *)v40) >> 3)];
          *(_QWORD *)v45 = v55;
          *((_QWORD *)v45 + 1) = v9;
          v45[16] = 0;
          *((_QWORD *)v45 + 3) = v37;
          *((_QWORD *)v45 + 4) = v10;
          v46 = v45;
          if (v39 != (char *)v40)
          {
            do
            {
              v47 = *(_OWORD *)(v39 - 40);
              v48 = *(_OWORD *)(v39 - 24);
              *((_QWORD *)v46 - 1) = *((_QWORD *)v39 - 1);
              *(_OWORD *)(v46 - 24) = v48;
              *(_OWORD *)(v46 - 40) = v47;
              v46 -= 40;
              v39 -= 40;
            }
            while (v39 != (char *)v40);
            v39 = (char *)v16[7];
          }
          v11 = v45 + 40;
          v16[7] = (uint64_t *)v46;
          v16[8] = (uint64_t *)(v45 + 40);
          v16[9] = (uint64_t *)&v44[40 * v43];
          if (v39)
          {
            operator delete(v39);
            v9 = v56;
          }
        }
        v16[8] = (uint64_t *)v11;
        v10 += 21;
        ++v9;
      }
      while (v10 != v53);
    }
    v5 = v51;
    v6 = v52 + 368;
    if (v52 + 368 - *v51 == 5888)
    {
      v5 = v51 + 1;
      v6 = v51[1];
    }
    ++v55;
    v3 = a1[1];
    v4 = a1[2];
  }
  if (v6)
    goto LABEL_10;
}

void sub_223685734(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  float *v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _BYTE *v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  float *v62[3];
  float *v63[4];

  v5 = (_QWORD *)*a1;
  v55 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60[1] = 0;
      v60[2] = 0;
      if (v5[7])
      {
        v9 = (_QWORD *)v5[5];
        if (v9 == v5 + 6)
        {
          v16 = 0;
          v15 = 0;
        }
        else
        {
          v10 = 1;
          do
          {
            v11 = v9[4];
            v12 = (float *)(*(_QWORD *)(*(_QWORD *)(a2 + 8)
                                      + (((unint64_t)(*(_QWORD *)(a2 + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
                          + 368 * ((*(_DWORD *)(a2 + 32) + (_DWORD)v11) & 0xF));
            if ((v10 & 1) != 0)
              v56 = *(_QWORD *)v12;
            sub_22368BAE0((void **)&v57, v12, (uint64_t)(v12 + 8), v11, 0, a4, a5, v10 & 1, (uint64_t)v63);
            sub_22368BAE0((void **)&v57, v12, (uint64_t)(v12 + 50), v11, 1, a4, a5, 0, (uint64_t)v63);
            v13 = (_QWORD *)v9[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v9[2];
                v36 = *v14 == (_QWORD)v9;
                v9 = v14;
              }
              while (!v36);
            }
            v10 = 0;
            v9 = v14;
          }
          while (v14 != v5 + 6);
          v15 = v57;
          v16 = (unint64_t)v58;
        }
        v63[0] = (float *)v60;
        v63[1] = (float *)&v56;
        v17 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v16 - (_QWORD)v15) >> 3));
        v63[2] = (float *)&v61;
        v62[0] = (float *)v60;
        v62[1] = (float *)&v56;
        v62[2] = (float *)&v61;
        if ((_OWORD *)v16 == v15)
          v18 = 0;
        else
          v18 = v17;
        sub_22368CCE8(v15, v16, v62, v18, 1);
        v19 = v57;
        v20 = v58;
        v21 = v58 - (_BYTE *)v57;
        if (v58 != (_BYTE *)v57)
        {
          v57[1] = 0;
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v21 >> 3)) >= 2)
          {
            v22 = 0;
            v23 = 14;
            v24 = 1;
            do
            {
              v25 = sub_22368C754(v63, (float *)&v19[v23 - 14], (float *)&v19[v23 - 1]);
              v19 = v57;
              v20 = v58;
              v22 += v25;
              v57[v23] = v22;
              ++v24;
              v23 += 13;
            }
            while (v24 < 0x4EC4EC4EC4EC4EC5 * (v20 - v19));
          }
          LOWORD(v63[0]) = 0;
          if (v20 != v19)
          {
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = &v19[v26];
              if (!HIDWORD(v19[v26 + 4]))
              {
                v29 = v28[8];
                if (v29 <= 1 && !*((_BYTE *)v63 + v29))
                {
                  sub_22368EC10(&v57, v29, v27);
                  *((_BYTE *)v63 + v28[8]) = 1;
                  v19 = v57;
                  v20 = v58;
                }
              }
              ++v27;
              v26 += 13;
            }
            while (v27 < 0x4EC4EC4EC4EC4EC5 * (v20 - v19));
          }
        }
        if (a3 == 1)
        {
          sub_22368EE0C((uint64_t *)&v57);
          v30 = v57;
          v31 = v58;
          if (v58 != (_BYTE *)v57)
          {
            v32 = 0;
            v33 = 0;
            v34 = (v58 - (_BYTE *)v57) / 104;
            if (v34 <= 1)
              v34 = 1;
            v35 = (char *)v57 + 36;
            do
            {
              v36 = *(_QWORD *)(v35 - 28) > v33 && *(_DWORD *)v35 == 1;
              if (v36)
              {
                if (*(_QWORD *)(v35 + 4) == 0 && *(_QWORD *)(v35 + 12) != 0)
                  v33 = *(_QWORD *)(v35 - 28);
                v32 += (*(_QWORD *)(v35 + 4) == 0) & (*(_QWORD *)(v35 + 12) != 0);
              }
              v35 += 104;
              --v34;
            }
            while (v34);
LABEL_59:
            v5[8] = v32;
            v41 = v31 - (_BYTE *)v30;
            if (v41)
            {
              v42 = v41 / 104;
              v43 = *(_QWORD *)(a2 + 32);
              v44 = *(_QWORD *)(a2 + 8);
              v46 = a3 == 1 && v32 == 0;
              if (v42 <= 1)
                v42 = 1;
              v47 = v30 + 6;
              do
              {
                v48 = *(_QWORD *)(v44 + (((unint64_t)(*(v47 - 3) + v43) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 368 * ((*((_DWORD *)v47 - 6) + (_DWORD)v43) & 0xF);
                v49 = v48 + 32;
                v50 = *((_DWORD *)v47 - 4);
                if (v46)
                  *(_BYTE *)(v49 + 168 * v50 + 104) = 0;
                if (*((_DWORD *)v47 - 3) == 1)
                {
                  v51 = v49 + 168 * v50;
                  *(_OWORD *)(v51 + 112) = *(_OWORD *)(v47 - 1);
                  *(_OWORD *)(v51 + 128) = *(_OWORD *)(v47 - 5);
                  if (*(_QWORD *)(v48 + 40) != *(_QWORD *)(v48 + 208)
                    && (a3 == 1 && *(v47 - 1) || a3 == 2 && *v47 != 2))
                  {
                    *(_BYTE *)(v49 + 168 * v50 + 104) = 0;
                  }
                }
                v47 += 13;
                --v42;
              }
              while (v42);
            }
LABEL_81:
            v58 = v30;
            operator delete(v30);
            goto LABEL_82;
          }
        }
        else
        {
          sub_22368EF38((uint64_t *)&v57);
          v30 = v57;
          v31 = v58;
          if (v58 != (_BYTE *)v57)
          {
            v32 = 0;
            v37 = 0;
            v38 = (v58 - (_BYTE *)v57) / 104;
            if (v38 <= 1)
              v38 = 1;
            v39 = (char *)v57 + 36;
            do
            {
              if (*(_QWORD *)(v39 - 28) > v37 && *(_DWORD *)v39 == 1)
              {
                if (*(_QWORD *)(v39 + 4) < 2uLL && *(_QWORD *)(v39 + 12) > 1uLL)
                  v37 = *(_QWORD *)(v39 - 28);
                v32 += (*(_QWORD *)(v39 + 4) < 2uLL) & (*(_QWORD *)(v39 + 12) > 1uLL);
              }
              v39 += 104;
              --v38;
            }
            while (v38);
            goto LABEL_59;
          }
        }
        v5[8] = 0;
        v30 = v31;
        if (v31)
          goto LABEL_81;
      }
LABEL_82:
      v52 = (_QWORD *)v5[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v5[2];
          v36 = *v53 == (_QWORD)v5;
          v5 = v53;
        }
        while (!v36);
      }
      v5 = v53;
    }
    while (v53 != v55);
  }
}

void sub_223685C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223685C64(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;

  v5 = (uint64_t *)(a2 + 8);
  v4 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      v6 = (uint64_t *)v4[5];
      if (v6 != v4 + 6)
      {
        do
        {
          v10 = (uint64_t *)v6[1];
          v11 = v10;
          v12 = v6;
          if (v10)
          {
            do
            {
              v13 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v13 = (uint64_t *)v12[2];
              v14 = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (!v14);
          }
          v15 = *(_QWORD *)(a1 + 32) + v6[4];
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v15 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v15 & 0xF) + 24))
          {
            v16 = v6;
            if (v10)
            {
              do
              {
                v17 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v17 = (uint64_t *)v16[2];
                v14 = *v17 == (_QWORD)v16;
                v16 = v17;
              }
              while (!v14);
            }
            if ((uint64_t *)v4[5] == v6)
              v4[5] = (uint64_t)v17;
            v9 = (uint64_t *)v4[6];
            --v4[7];
            sub_2231AFE60(v9, v6);
            operator delete(v6);
          }
          v6 = v13;
        }
        while (v13 != v4 + 6);
      }
      v7 = (uint64_t *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v4[2];
          v14 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v14);
      }
      v4 = v8;
    }
    while (v8 != v5);
    v4 = *(uint64_t **)a2;
  }
  if (v4 != v5)
  {
    do
    {
      v19 = (uint64_t *)v4[1];
      v20 = v19;
      v21 = v4;
      if (v19)
      {
        do
        {
          v22 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v21[2];
          v14 = *v22 == (_QWORD)v21;
          v21 = v22;
        }
        while (!v14);
      }
      if (v4[7] == 1)
      {
        v23 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(v4[5] + 32);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v23 & 0xF) + 16) = -1;
        v24 = v4;
        if (v19)
        {
          do
          {
            v25 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v25 = (uint64_t *)v24[2];
            v14 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (!v14);
        }
        if (*(uint64_t **)a2 == v4)
          *(_QWORD *)a2 = v25;
        v18 = *(uint64_t **)(a2 + 8);
        --*(_QWORD *)(a2 + 16);
        sub_2231AFE60(v18, v4);
        sub_223198030((uint64_t)(v4 + 5), (_QWORD *)v4[6]);
        operator delete(v4);
      }
      v4 = v22;
    }
    while (v22 != v5);
  }
}

_QWORD *sub_223685EC4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v3 = (_QWORD *)*result;
  v4 = result[1] - *result;
  if (v4)
  {
    v6 = result;
    v7 = v4 / 40;
    if (v4 <= 40)
      v8 = 1 % v7;
    else
      v8 = 1;
    v9 = &v3[5 * v8];
    v10 = ~v7;
    v11 = v7 + 1;
    for (i = (_QWORD *)*result; i != (_QWORD *)v6[1]; i += 5)
    {
      v13 = *i;
      if ((_DWORD)a3 && v13 == *v9)
      {
        v14 = v8 + 1;
        if (v8 <= -2)
        {
          v45 = ((v11 + v8) & ~((v11 + v8) >> 63)) + v10 - v8;
          if (v45)
            v46 = 2;
          else
            v46 = 1;
          v47 = v46 + (v45 - (unint64_t)(v45 != 0)) / v7;
          if (v47 < 2)
            goto LABEL_62;
          v14 += (v47 & 0xFFFFFFFFFFFFFFFELL) * v7;
          v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
          do
            v48 -= 2;
          while (v48);
          if (v47 != (v47 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_62:
            do
              v14 += v7;
            while (v14 < 0);
          }
        }
        else if (v14 < v7)
        {
          v9 += 5;
          goto LABEL_14;
        }
        v14 %= v7;
        v9 = &v3[5 * v14];
      }
      else
      {
        v14 = v8;
      }
LABEL_14:
      v15 = *(_QWORD *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(v16 + (((unint64_t)(v15 + v13) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * (((_DWORD)v15 + (_DWORD)v13) & 0xF);
      v18 = v17 + 32;
      v19 = i[1];
      v20 = v17 + 32 + 168 * v19;
      v21 = *(_QWORD *)(v17 + 16);
      v22 = *v9;
      if (v21 >= 1)
      {
        while (1)
        {
          while (1)
          {
            if (v13 == v22)
            {
              v22 = *i;
              goto LABEL_35;
            }
            v23 = *(_QWORD *)(v16 + (((unint64_t)(v22 + v15) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 368 * (((_DWORD)v22 + (_DWORD)v15) & 0xF);
            if (v21 != *(_QWORD *)(v23 + 16))
              goto LABEL_35;
            v24 = v23 + 32;
            v25 = v9[1];
            if (*(_QWORD *)(v20 + 8) != *(_QWORD *)(v24 + 168 * v25 + 8)
              || *(_QWORD *)(v20 + 32) != *(_QWORD *)(v24 + 168 * v25 + 32)
              || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v24 + 168 * v25 + 24)
              || *(_QWORD *)(v20 + 40) != *(_QWORD *)(v24 + 168 * v25 + 40)
              || *(_QWORD *)(v20 + 16) != *(_QWORD *)(v24 + 168 * v25 + 16))
            {
              goto LABEL_35;
            }
            v26 = v14 + 1;
            if (v14 > -2)
              break;
            v28 = ((v11 + v14) & ~((v11 + v14) >> 63)) + v10 - v14;
            if (v28)
              v29 = 2;
            else
              v29 = 1;
            v30 = v29 + (v28 - (unint64_t)(v28 != 0)) / v7;
            if (v30 < 2)
              goto LABEL_63;
            v26 += (v30 & 0xFFFFFFFFFFFFFFFELL) * v7;
            v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
            do
              v31 -= 2;
            while (v31);
            if (v30 != (v30 & 0xFFFFFFFFFFFFFFFELL))
            {
LABEL_63:
              do
                v26 += v7;
              while (v26 < 0);
            }
LABEL_33:
            v14 = v26 % v7;
            v9 = &v3[5 * (v26 % v7)];
            v22 = *v9;
          }
          if (v26 >= v7)
            goto LABEL_33;
          ++v14;
          v27 = v9[5];
          v9 += 5;
          v22 = v27;
        }
      }
LABEL_35:
      v32 = *(_QWORD *)(v16 + (((unint64_t)(v22 + v15) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * (((_DWORD)v22 + (_DWORD)v15) & 0xF)
          + 168 * v9[1];
      v33 = v18 + 168 * v19;
      *(_QWORD *)(v33 + 80) = *(_QWORD *)(v9[4] + 32);
      *(_QWORD *)(v33 + 88) = v22;
      if (*(_QWORD *)(v20 + 32) == *(_QWORD *)(v32 + 64))
      {
        v49 = v19;
        v50 = v9;
        v34 = v6;
        v35 = a3;
        v36 = v10;
        v37 = i;
        v38 = v18;
        v39 = v11;
        result = (_QWORD *)sub_2233E5070((double *)(v20 + 48), (double *)(v32 + 80));
        v11 = v39;
        v40 = v38;
        i = v37;
        v9 = v50;
        v10 = v36;
        a3 = v35;
        v6 = v34;
        if ((_DWORD)result)
          *(_QWORD *)(v40 + 168 * v49 + 96) = *v50;
      }
      if ((a3 & 1) != 0)
      {
        v8 = v14;
      }
      else
      {
        v8 = v14 + 1;
        if (v14 <= -2)
        {
          v41 = ((v11 + v14) & ~((v11 + v14) >> 63)) + v10 - v14;
          if (v41)
            v42 = 2;
          else
            v42 = 1;
          v43 = v42 + (v41 - (unint64_t)(v41 != 0)) / v7;
          if (v43 < 2)
            goto LABEL_64;
          v8 += (v43 & 0xFFFFFFFFFFFFFFFELL) * v7;
          v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
          do
            v44 -= 2;
          while (v44);
          if (v43 != (v43 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_64:
            do
              v8 += v7;
            while (v8 < 0);
          }
LABEL_50:
          v8 %= v7;
          v9 = &v3[5 * v8];
          continue;
        }
        if (v8 >= v7)
          goto LABEL_50;
        v9 += 5;
      }
    }
  }
  return result;
}

BOOL sub_22368629C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = (uint64_t)(a4[1] - *a4) >> 3;
  if (a4[1] == *a4)
    v4 = -1;
  v5 = (uint64_t)(a3[1] - *a3) >> 3;
  if (a3[1] == *a3)
    v5 = -1;
  v6 = a1[6];
  v7 = a1[7];
  v8 = a2[6];
  v9 = a2[7];
  if (v7 != v9 || v6 != v8)
    goto LABEL_34;
  v11 = a1[5];
  if (v11 != a2[5])
    goto LABEL_34;
  v12 = 0;
  v13 = a2[8];
  v14 = a1[8];
  v15 = v13 < v14;
  v16 = v13 - v14;
  if (v15)
    v17 = v5;
  else
    v17 = 0;
  if (v15)
    v18 = v4;
  else
    v18 = 0;
  if (v11)
    v19 = v18;
  else
    v19 = v17;
  if (v16 + v19 <= 1)
  {
    v20 = a1[26];
    if (v20 == a2[26] && a1[28] == a2[28] && a1[27] == a2[27])
    {
      v21 = a2[29];
      v22 = a1[29];
      v23 = v21 < v22;
      v24 = v21 - v22;
      if (v23)
        v25 = v5;
      else
        v25 = 0;
      if (v23)
        v26 = v4;
      else
        v26 = 0;
      if (v20)
        v27 = v26;
      else
        v27 = v25;
      v12 = v24 + v27 < 2;
      goto LABEL_35;
    }
LABEL_34:
    v12 = 0;
  }
LABEL_35:
  v28 = a2[27];
  v29 = a2[28];
  if (v7 == v29 && v6 == v28)
  {
    v31 = a1[5];
    if (v31 == a2[26])
    {
      v32 = a2[29];
      v33 = a1[8];
      v34 = v32 < v33;
      v35 = v32 - v33;
      v36 = v34 ? v5 : 0;
      v37 = v34 ? v4 : 0;
      v38 = v31 ? v37 : v36;
      if (v35 + v38 <= 1)
      {
        v39 = a1[26];
        if (v39 == a2[5] && a1[28] == v9 && a1[27] == v8)
        {
          v40 = a2[8];
          v41 = a1[29];
          v42 = v40 < v41;
          v43 = v40 - v41;
          v44 = v42 ? v5 : 0;
          v45 = v42 ? v4 : 0;
          v46 = v39 ? v45 : v44;
          if (v43 + v46 < 2)
            ++v12;
        }
      }
    }
  }
  v48 = a1[27];
  v47 = a1[28];
  if (v47 == v9 && v48 == v8)
  {
    v49 = a1[26];
    if (v49 == a2[5])
    {
      v50 = a2[8];
      v51 = a1[29];
      v52 = v50 < v51;
      v53 = v50 - v51;
      v54 = v52 ? v5 : 0;
      v55 = v52 ? v4 : 0;
      v56 = v49 ? v55 : v54;
      if (v53 + v56 <= 1)
      {
        v57 = a1[5];
        if (v57 == a2[26] && v7 == v29 && v6 == v28)
        {
          v58 = a2[29];
          v59 = a1[8];
          v60 = v58 < v59;
          v61 = v58 - v59;
          v62 = v60 ? v5 : 0;
          v63 = v60 ? v4 : 0;
          v64 = v57 ? v63 : v62;
          if (v61 + v64 < 2)
            ++v12;
        }
      }
    }
  }
  if (v47 == v29 && v48 == v28)
  {
    v65 = a1[26];
    if (v65 == a2[26])
    {
      v66 = a2[29];
      v67 = a1[29];
      v68 = v66 < v67;
      v69 = v66 - v67;
      v70 = v68 ? v5 : 0;
      v71 = v68 ? v4 : 0;
      v72 = v65 ? v71 : v70;
      if (v69 + v72 <= 1)
      {
        v73 = a1[5];
        if (v73 == a2[5] && v7 == v9 && v6 == v8)
        {
          v74 = a2[8];
          v75 = a1[8];
          v15 = v74 < v75;
          v76 = v74 - v75;
          if (!v15)
          {
            v5 = 0;
            v4 = 0;
          }
          if (!v73)
            v4 = v5;
          if (v76 + v4 < 2)
            ++v12;
        }
      }
    }
  }
  return v12 == 2;
}

void sub_223686534(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_223686534(a1, *a2);
    sub_223686534(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_223686584(_QWORD *a1, uint64_t **a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  void **v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void **v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t **v106;
  uint64_t **v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  void *v111;
  uint64_t v112;
  char *v114;
  uint64_t *v115;
  _QWORD **v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  _QWORD **v121;
  _QWORD *v122[3];
  void *__p;
  char *v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;

  v126 = 0;
  v127 = 0;
  v128 = 0;
  v4 = a1[1];
  if (a1[2] != v4)
  {
    v5 = a1[4];
    v6 = (uint64_t *)(v4 + 8 * (v5 >> 4));
    v7 = *v6;
    v8 = *v6 + 368 * (v5 & 0xF);
    v9 = *(_QWORD *)(v4 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 368 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
    if (v8 != v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        if (*(_BYTE *)(v8 + 24))
        {
          v8 += 368;
          if (v8 - v7 == 5888)
            goto LABEL_36;
          goto LABEL_4;
        }
        v14 = (float)((float)(*(float *)(v8 + 4) - *(float *)(a3 + 4)) * *(float *)(a3 + 24))
            + (float)*(uint64_t *)(a3 + 16);
        if (v14 >= 0.0)
          v15 = 0.5;
        else
          v15 = -0.5;
        v16 = v14 + v15;
        sub_2233DC31C(v14 + v15);
        v17 = ceilf(v16);
        v18 = floorf(v16);
        if (v16 >= 0.0)
          v19 = v18;
        else
          v19 = v17;
        v20 = (float)((float)(*(float *)v8 - *(float *)a3) * *(float *)(a3 + 24)) + (float)*(uint64_t *)(a3 + 8);
        if (v20 >= 0.0)
          v21 = 0.5;
        else
          v21 = -0.5;
        v22 = v20 + v21;
        sub_2233DC31C(v20 + v21);
        v23 = (uint64_t)v19;
        a4.n128_f32[0] = ceilf(v22);
        v24 = floorf(v22);
        if (v22 >= 0.0)
          a4.n128_f32[0] = v24;
        v25 = (uint64_t)a4.n128_f32[0];
        if (v12 < v128)
        {
          *(_QWORD *)v12 = v13;
          *((_QWORD *)v12 + 1) = v25;
          *((_QWORD *)v12 + 2) = v23;
          v12 += 24;
          goto LABEL_35;
        }
        v115 = v6;
        v26 = v9;
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v27 > 0xAAAAAAAAAAAAAAALL)
          sub_22367C394();
        if (0x5555555555555556 * ((v128 - v11) >> 3) > v27)
          v27 = 0x5555555555555556 * ((v128 - v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v128 - v11) >> 3) >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v29 = (char *)operator new(24 * v28);
          v30 = &v29[8 * ((v12 - v11) >> 3)];
          *(_QWORD *)v30 = v13;
          *((_QWORD *)v30 + 1) = v25;
          *((_QWORD *)v30 + 2) = v23;
          if (v12 == v11)
          {
LABEL_38:
            v32 = v30;
            v12 = v30 + 24;
            v126 = v30;
            v128 = &v29[24 * v28];
            if (!v11)
              goto LABEL_34;
            goto LABEL_33;
          }
        }
        else
        {
          v29 = 0;
          v30 = (char *)(8 * ((v12 - v11) >> 3));
          *(_QWORD *)v30 = v13;
          *((_QWORD *)v30 + 1) = v25;
          *((_QWORD *)v30 + 2) = v23;
          if (v12 == v11)
            goto LABEL_38;
        }
        v31 = v30;
        do
        {
          a4 = *(__n128 *)(v12 - 24);
          v32 = v31 - 24;
          *((_QWORD *)v31 - 1) = *((_QWORD *)v12 - 1);
          *(__n128 *)(v31 - 24) = a4;
          v12 -= 24;
          v31 -= 24;
        }
        while (v12 != v11);
        v12 = v30 + 24;
        v126 = v32;
        v128 = &v29[24 * v28];
        if (!v11)
          goto LABEL_34;
LABEL_33:
        operator delete(v11);
LABEL_34:
        v11 = v32;
        v9 = v26;
        v6 = v115;
LABEL_35:
        v127 = v12;
        v7 = *v6;
        v8 += 368;
        if (v8 - *v6 == 5888)
        {
LABEL_36:
          v33 = v6[1];
          ++v6;
          v7 = v33;
          v8 = v33;
        }
LABEL_4:
        ++v13;
        if (v8 == v9)
          goto LABEL_41;
      }
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_41:
  v34 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3));
  if (v12 == v11)
    v35 = 0;
  else
    v35 = v34;
  sub_2236879B4((uint64_t)v11, (__int128 *)v12, (uint64_t)&v116, v35, 1, a4);
  __p = 0;
  v124 = 0;
  v125 = 0;
  v37 = v126;
  v36 = v127;
  if (v126 == v127)
    goto LABEL_181;
  do
  {
    v38 = (uint64_t *)v37;
    v37 += 24;
    if (v37 != v36)
    {
      v39 = v38[2];
      v40 = v39 - v38[5];
      if (v40 <= 1)
      {
        v41 = v38 + 1;
        v114 = v37;
        while (1)
        {
          v42 = *v41 - *((_QWORD *)v37 + 1);
          if (v42 < 0)
            v42 = *((_QWORD *)v37 + 1) - *v41;
          if (v40 < 0)
            v40 = -v40;
          if ((unint64_t)v42 <= 1 && (unint64_t)v40 <= 1)
          {
            v45 = (char *)__p;
            v44 = v124;
            if (__p == v124)
            {
LABEL_69:
              memset(v122, 0, sizeof(v122));
              v121 = v122;
              v117 = 0;
              v118 = 0;
              v116 = &v117;
              v119 = 0;
              v120 = *(_OWORD *)v41;
              if ((unint64_t)v124 >= v125)
              {
                v53 = sub_2236893A0((char **)&__p, (uint64_t)&v116);
              }
              else
              {
                *(_QWORD *)v124 = &v117;
                v50 = v117;
                *((_QWORD *)v44 + 1) = v117;
                v51 = v44 + 8;
                v52 = v118;
                *((_QWORD *)v44 + 2) = v118;
                if (v52)
                {
                  v50[2] = v51;
                  v116 = &v117;
                  v117 = 0;
                  v118 = 0;
                }
                else
                {
                  *(_QWORD *)v44 = v51;
                }
                *((_QWORD *)v44 + 3) = v119;
                *((_OWORD *)v44 + 2) = v120;
                v53 = v44 + 48;
              }
              v46 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v45) >> 4);
              v124 = v53;
              sub_223198030((uint64_t)&v116, v117);
              sub_223198030((uint64_t)&v121, v122[0]);
              v45 = (char *)__p;
            }
            else
            {
              v46 = 0;
              v47 = (char *)__p;
              while (1)
              {
                v48 = *((_QWORD *)v47 + 4) - *v41;
                if (v48 < 0)
                  v48 = *v41 - *((_QWORD *)v47 + 4);
                if ((unint64_t)v48 <= 1)
                {
                  v49 = *((_QWORD *)v47 + 5) - v39;
                  if (v49 < 0)
                    v49 = v39 - *((_QWORD *)v47 + 5);
                  if ((unint64_t)v49 < 2)
                    break;
                }
                ++v46;
                v47 += 48;
                if (v47 == v124)
                  goto LABEL_69;
              }
            }
            v54 = &v45[48 * v46];
            v55 = *v38;
            v57 = (void **)(v54 + 8);
            v56 = (_QWORD *)*((_QWORD *)v54 + 1);
            v58 = v54 + 8;
            v59 = v54 + 8;
            if (v56)
            {
              v60 = (_QWORD *)*((_QWORD *)v54 + 1);
              while (1)
              {
                while (1)
                {
                  v59 = v60;
                  v61 = v60[4];
                  if (v55 >= v61)
                    break;
                  v60 = (_QWORD *)*v59;
                  v58 = v59;
                  if (!*v59)
                    goto LABEL_83;
                }
                if (v61 >= v55)
                  break;
                v60 = (_QWORD *)v59[1];
                if (!v60)
                {
                  v58 = v59 + 1;
                  goto LABEL_83;
                }
              }
            }
            else
            {
LABEL_83:
              v62 = operator new(0x28uLL);
              v62[4] = v55;
              *v62 = 0;
              v62[1] = 0;
              v62[2] = v59;
              *v58 = v62;
              v63 = **(_QWORD **)v54;
              if (v63)
              {
                *(_QWORD *)v54 = v63;
                v62 = (_QWORD *)*v58;
              }
              v64 = *v57;
              v65 = v62 == *v57;
              *((_BYTE *)v62 + 24) = v65;
              if (!v65)
              {
                do
                {
                  v66 = v62[2];
                  if (*(_BYTE *)(v66 + 24))
                    break;
                  v67 = *(_BYTE **)(v66 + 16);
                  v68 = *(_QWORD *)v67;
                  if (*(_QWORD *)v67 == v66)
                  {
                    v71 = *((_QWORD *)v67 + 1);
                    if (!v71 || (v72 = *(unsigned __int8 *)(v71 + 24), v69 = (_BYTE *)(v71 + 24), v72))
                    {
                      if (*(_QWORD **)v66 == v62)
                      {
                        *(_BYTE *)(v66 + 24) = 1;
                        v67[24] = 0;
                        v75 = *(_QWORD *)(v66 + 8);
                        *(_QWORD *)v67 = v75;
                        if (v75)
                          goto LABEL_100;
                      }
                      else
                      {
                        v73 = *(uint64_t **)(v66 + 8);
                        v74 = *v73;
                        *(_QWORD *)(v66 + 8) = *v73;
                        if (v74)
                        {
                          *(_QWORD *)(v74 + 16) = v66;
                          v67 = *(_BYTE **)(v66 + 16);
                        }
                        v73[2] = (uint64_t)v67;
                        *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v73;
                        *v73 = v66;
                        *(_QWORD *)(v66 + 16) = v73;
                        v67 = (_BYTE *)v73[2];
                        v66 = *(_QWORD *)v67;
                        *((_BYTE *)v73 + 24) = 1;
                        v67[24] = 0;
                        v75 = *(_QWORD *)(v66 + 8);
                        *(_QWORD *)v67 = v75;
                        if (v75)
LABEL_100:
                          *(_QWORD *)(v75 + 16) = v67;
                      }
                      *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
                      *(_QWORD *)(*((_QWORD *)v67 + 2) + 8 * (**((_QWORD **)v67 + 2) != (_QWORD)v67)) = v66;
                      *(_QWORD *)(v66 + 8) = v67;
LABEL_107:
                      *((_QWORD *)v67 + 2) = v66;
                      break;
                    }
                  }
                  else if (!v68 || (v70 = *(unsigned __int8 *)(v68 + 24), v69 = (_BYTE *)(v68 + 24), v70))
                  {
                    if (*(_QWORD **)v66 == v62)
                    {
                      v97 = v62[1];
                      *(_QWORD *)v66 = v97;
                      if (v97)
                      {
                        *(_QWORD *)(v97 + 16) = v66;
                        v67 = *(_BYTE **)(v66 + 16);
                      }
                      v62[2] = v67;
                      *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v62;
                      v62[1] = v66;
                      *(_QWORD *)(v66 + 16) = v62;
                      v67 = (_BYTE *)v62[2];
                      *((_BYTE *)v62 + 24) = 1;
                      v67[24] = 0;
                      v66 = *((_QWORD *)v67 + 1);
                      v76 = *(_QWORD **)v66;
                      *((_QWORD *)v67 + 1) = *(_QWORD *)v66;
                      if (v76)
LABEL_105:
                        v76[2] = v67;
                    }
                    else
                    {
                      *(_BYTE *)(v66 + 24) = 1;
                      v67[24] = 0;
                      v66 = *((_QWORD *)v67 + 1);
                      v76 = *(_QWORD **)v66;
                      *((_QWORD *)v67 + 1) = *(_QWORD *)v66;
                      if (v76)
                        goto LABEL_105;
                    }
                    *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
                    *(_QWORD *)(*((_QWORD *)v67 + 2) + 8 * (**((_QWORD **)v67 + 2) != (_QWORD)v67)) = v66;
                    *(_QWORD *)v66 = v67;
                    goto LABEL_107;
                  }
                  *(_BYTE *)(v66 + 24) = 1;
                  v62 = v67;
                  v67[24] = v67 == (_BYTE *)v64;
                  *v69 = 1;
                }
                while (v67 != (_BYTE *)v64);
              }
              ++*((_QWORD *)v54 + 2);
              v45 = (char *)__p;
              v56 = (_QWORD *)*((_QWORD *)__p + 6 * v46 + 1);
            }
            v77 = &v45[48 * v46];
            v78 = *(_QWORD *)v37;
            v79 = (void **)(v77 + 8);
            v80 = v77 + 8;
            v81 = v77 + 8;
            v41 = v38 + 1;
            if (v56)
            {
              while (1)
              {
                while (1)
                {
                  v81 = v56;
                  v82 = v56[4];
                  if (v78 >= v82)
                    break;
                  v56 = (_QWORD *)*v81;
                  v80 = v81;
                  if (!*v81)
                    goto LABEL_116;
                }
                if (v82 >= v78)
                  break;
                v56 = (_QWORD *)v81[1];
                if (!v56)
                {
                  v80 = v81 + 1;
                  goto LABEL_116;
                }
              }
            }
            else
            {
LABEL_116:
              v83 = operator new(0x28uLL);
              v83[4] = v78;
              *v83 = 0;
              v83[1] = 0;
              v83[2] = v81;
              *v80 = v83;
              v84 = **(_QWORD **)v77;
              if (v84)
              {
                *(_QWORD *)v77 = v84;
                v83 = (_QWORD *)*v80;
              }
              v85 = *v79;
              v65 = v83 == *v79;
              *((_BYTE *)v83 + 24) = v65;
              if (!v65)
              {
                do
                {
                  v86 = v83[2];
                  if (*(_BYTE *)(v86 + 24))
                    break;
                  v87 = *(_BYTE **)(v86 + 16);
                  v88 = *(_QWORD *)v87;
                  if (*(_QWORD *)v87 == v86)
                  {
                    v91 = *((_QWORD *)v87 + 1);
                    if (!v91 || (v92 = *(unsigned __int8 *)(v91 + 24), v89 = (_BYTE *)(v91 + 24), v92))
                    {
                      if (*(_QWORD **)v86 == v83)
                      {
                        *(_BYTE *)(v86 + 24) = 1;
                        v87[24] = 0;
                        v95 = *(_QWORD *)(v86 + 8);
                        *(_QWORD *)v87 = v95;
                        if (v95)
                          goto LABEL_133;
                      }
                      else
                      {
                        v93 = *(uint64_t **)(v86 + 8);
                        v94 = *v93;
                        *(_QWORD *)(v86 + 8) = *v93;
                        if (v94)
                        {
                          *(_QWORD *)(v94 + 16) = v86;
                          v87 = *(_BYTE **)(v86 + 16);
                        }
                        v93[2] = (uint64_t)v87;
                        *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v93;
                        *v93 = v86;
                        *(_QWORD *)(v86 + 16) = v93;
                        v87 = (_BYTE *)v93[2];
                        v86 = *(_QWORD *)v87;
                        *((_BYTE *)v93 + 24) = 1;
                        v87[24] = 0;
                        v95 = *(_QWORD *)(v86 + 8);
                        *(_QWORD *)v87 = v95;
                        if (v95)
LABEL_133:
                          *(_QWORD *)(v95 + 16) = v87;
                      }
                      *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
                      *(_QWORD *)(*((_QWORD *)v87 + 2) + 8 * (**((_QWORD **)v87 + 2) != (_QWORD)v87)) = v86;
                      *(_QWORD *)(v86 + 8) = v87;
LABEL_139:
                      *((_QWORD *)v87 + 2) = v86;
                      break;
                    }
                  }
                  else if (!v88 || (v90 = *(unsigned __int8 *)(v88 + 24), v89 = (_BYTE *)(v88 + 24), v90))
                  {
                    if (*(_QWORD **)v86 == v83)
                    {
                      v98 = v83[1];
                      *(_QWORD *)v86 = v98;
                      if (v98)
                      {
                        *(_QWORD *)(v98 + 16) = v86;
                        v87 = *(_BYTE **)(v86 + 16);
                      }
                      v83[2] = v87;
                      *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v83;
                      v83[1] = v86;
                      *(_QWORD *)(v86 + 16) = v83;
                      v87 = (_BYTE *)v83[2];
                      *((_BYTE *)v83 + 24) = 1;
                      v87[24] = 0;
                      v86 = *((_QWORD *)v87 + 1);
                      v96 = *(_QWORD **)v86;
                      *((_QWORD *)v87 + 1) = *(_QWORD *)v86;
                      if (v96)
LABEL_137:
                        v96[2] = v87;
                    }
                    else
                    {
                      *(_BYTE *)(v86 + 24) = 1;
                      v87[24] = 0;
                      v86 = *((_QWORD *)v87 + 1);
                      v96 = *(_QWORD **)v86;
                      *((_QWORD *)v87 + 1) = *(_QWORD *)v86;
                      if (v96)
                        goto LABEL_137;
                    }
                    *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
                    *(_QWORD *)(*((_QWORD *)v87 + 2) + 8 * (**((_QWORD **)v87 + 2) != (_QWORD)v87)) = v86;
                    *(_QWORD *)v86 = v87;
                    goto LABEL_139;
                  }
                  *(_BYTE *)(v86 + 24) = 1;
                  v83 = v87;
                  v87[24] = v87 == (_BYTE *)v85;
                  *v89 = 1;
                }
                while (v87 != (_BYTE *)v85);
              }
              ++*((_QWORD *)v77 + 2);
            }
          }
          v36 = v37 + 24;
          if (v37 + 24 == v127)
            break;
          v39 = v38[2];
          v40 = v39 - *((_QWORD *)v37 + 5);
          v37 += 24;
          if (v40 > 1)
          {
            v36 = v127;
            break;
          }
        }
        v37 = v114;
      }
    }
  }
  while (v37 != v36);
  v100 = (char *)__p;
  v99 = v124;
  if (__p == v124)
    goto LABEL_173;
  v101 = a2 + 1;
  v102 = 1;
  do
  {
    v105 = *v101;
    v106 = a2 + 1;
    v107 = a2 + 1;
    if (*v101)
    {
      while (1)
      {
        while (1)
        {
          v107 = (uint64_t **)v105;
          v108 = v105[4];
          if (v102 >= v108)
            break;
          v105 = *v107;
          v106 = v107;
          if (!*v107)
            goto LABEL_168;
        }
        if (v108 >= v102)
          break;
        v105 = v107[1];
        if (!v105)
        {
          v106 = v107 + 1;
          goto LABEL_168;
        }
      }
      v103 = (uint64_t *)v107;
      v104 = (uint64_t)(v107 + 5);
      if (v107 + 5 == (uint64_t **)v100)
        goto LABEL_160;
LABEL_159:
      sub_223689844(v104, *(_QWORD **)v100, (_QWORD *)v100 + 1);
      goto LABEL_160;
    }
LABEL_168:
    v103 = (uint64_t *)operator new(0x48uLL);
    v103[7] = 0;
    v103[8] = 0;
    v103[6] = 0;
    v103[4] = v102;
    v103[5] = (uint64_t)(v103 + 6);
    *v103 = 0;
    v103[1] = 0;
    v103[2] = (uint64_t)v107;
    *v106 = v103;
    v109 = (uint64_t *)**a2;
    v110 = v103;
    if (v109)
    {
      *a2 = v109;
      v110 = *v106;
    }
    sub_2231A9A8C(a2[1], v110);
    a2[2] = (uint64_t *)((char *)a2[2] + 1);
    v104 = (uint64_t)(v103 + 5);
    if (v103 + 5 != (uint64_t *)v100)
      goto LABEL_159;
LABEL_160:
    ++v102;
    v103[8] = *((_QWORD *)v100 + 3);
    v100 += 48;
  }
  while (v100 != v99);
  v100 = (char *)__p;
LABEL_173:
  if (v100)
  {
    v111 = v100;
    if (v124 != v100)
    {
      v112 = (uint64_t)(v124 - 48);
      do
      {
        sub_223198030(v112, *(_QWORD **)(v112 + 8));
        v65 = v112 == (_QWORD)v100;
        v112 -= 48;
      }
      while (!v65);
      v111 = __p;
    }
    v124 = v100;
    operator delete(v111);
  }
  v37 = v126;
LABEL_181:
  if (v37)
    operator delete(v37);
}

void sub_223687090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(_QWORD *)(v26 - 136) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_2236870FC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t *v33;
  _QWORD **v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD **v75;
  _QWORD *v76;
  uint64_t v77;

  v76 = 0;
  v77 = 0;
  v75 = &v76;
  v2 = (_QWORD *)*a2;
  v71 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v70 = 0;
    goto LABEL_155;
  }
  while (2)
  {
    sub_223198030((uint64_t)&v75, v76);
    v76 = 0;
    v77 = 0;
    v75 = &v76;
    v3 = (uint64_t *)v2[5];
    v4 = (uint64_t **)(v2 + 6);
    if (v3 == v2 + 6)
      goto LABEL_122;
    v72 = v2;
    v73 = *(_QWORD *)(a1 + 32);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + (((unint64_t)(v3[4] + v73) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 368 * ((*((_DWORD *)v3 + 8) + (_DWORD)v73) & 0xF);
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 == 3)
      {
        if (*(_DWORD *)(v5 + 200) != 1)
          goto LABEL_13;
      }
      else if (v6 != 1 || (*(_DWORD *)(v5 + 200) | 2) != 3)
      {
        goto LABEL_13;
      }
      v7 = (uint64_t **)v72[5];
      if (v7 != v4)
      {
        do
        {
          v10 = v7[4];
          if ((uint64_t *)v3[4] != v10)
          {
            v11 = *(_QWORD *)(v5 + 40);
            v12 = *(_QWORD *)(v5 + 208);
            if (v11 != v12)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((((unint64_t)v10 + v73) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 368 * (((_DWORD)v10 + (_DWORD)v73) & 0xF);
              v14 = *(_QWORD *)(v5 + 48) == *(_QWORD *)(v13 + 48) && *(_QWORD *)(v5 + 216) == *(_QWORD *)(v13 + 216);
              if (v14
                && (*(_QWORD *)(v5 + 56) & 0x8000000000000000) != 0
                && (*(_QWORD *)(v13 + 56) & 0x8000000000000000) == 0
                && *(_QWORD *)(v5 + 224) == *(_QWORD *)(v13 + 224))
              {
                *(_BYTE *)(v13 + 24) = 1;
                *(_QWORD *)(v13 + 16) = -1;
                v15 = &v76;
                v16 = &v76;
                if (v76)
                {
                  v17 = v76;
                  while (1)
                  {
                    while (1)
                    {
                      v15 = (_QWORD **)v17;
                      v18 = v17[4];
                      if (v18 <= (uint64_t)v10)
                        break;
                      v17 = *v15;
                      v16 = v15;
                      if (!*v15)
                        goto LABEL_37;
                    }
                    if (v18 >= (uint64_t)v10)
                      break;
                    v17 = v15[1];
                    if (!v17)
                    {
                      v16 = v15 + 1;
                      goto LABEL_37;
                    }
                  }
                }
                else
                {
LABEL_37:
                  v19 = operator new(0x28uLL);
                  v19[4] = v10;
                  *v19 = 0;
                  v19[1] = 0;
                  v19[2] = v15;
                  *v16 = v19;
                  if (*v75)
                  {
                    v75 = (_QWORD **)*v75;
                    v19 = (_QWORD *)*v16;
                  }
                  v20 = v76;
                  v14 = v19 == v76;
                  *((_BYTE *)v19 + 24) = v19 == v76;
                  if (!v14)
                  {
                    do
                    {
                      v21 = v19[2];
                      if (*(_BYTE *)(v21 + 24))
                        break;
                      v22 = *(_QWORD **)(v21 + 16);
                      v23 = *v22;
                      if (*v22 == v21)
                      {
                        v26 = v22[1];
                        if (!v26 || (v27 = *(unsigned __int8 *)(v26 + 24), v24 = (_BYTE *)(v26 + 24), v27))
                        {
                          if (*(_QWORD **)v21 == v19)
                          {
                            *(_BYTE *)(v21 + 24) = 1;
                            *((_BYTE *)v22 + 24) = 0;
                            v30 = *(_QWORD *)(v21 + 8);
                            *v22 = v30;
                            if (v30)
                              goto LABEL_54;
                          }
                          else
                          {
                            v28 = *(uint64_t **)(v21 + 8);
                            v29 = *v28;
                            *(_QWORD *)(v21 + 8) = *v28;
                            if (v29)
                            {
                              *(_QWORD *)(v29 + 16) = v21;
                              v22 = *(_QWORD **)(v21 + 16);
                            }
                            v28[2] = (uint64_t)v22;
                            *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v28;
                            *v28 = v21;
                            *(_QWORD *)(v21 + 16) = v28;
                            v22 = (_QWORD *)v28[2];
                            v21 = *v22;
                            *((_BYTE *)v28 + 24) = 1;
                            *((_BYTE *)v22 + 24) = 0;
                            v30 = *(_QWORD *)(v21 + 8);
                            *v22 = v30;
                            if (v30)
LABEL_54:
                              *(_QWORD *)(v30 + 16) = v22;
                          }
                          *(_QWORD *)(v21 + 16) = v22[2];
                          *(_QWORD *)(v22[2] + 8 * (*(_QWORD *)v22[2] != (_QWORD)v22)) = v21;
                          *(_QWORD *)(v21 + 8) = v22;
LABEL_60:
                          v22[2] = v21;
                          break;
                        }
                      }
                      else if (!v23 || (v25 = *(unsigned __int8 *)(v23 + 24), v24 = (_BYTE *)(v23 + 24), v25))
                      {
                        if (*(_QWORD **)v21 == v19)
                        {
                          v53 = v19[1];
                          *(_QWORD *)v21 = v53;
                          if (v53)
                          {
                            *(_QWORD *)(v53 + 16) = v21;
                            v22 = *(_QWORD **)(v21 + 16);
                          }
                          v19[2] = v22;
                          *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v19;
                          v19[1] = v21;
                          *(_QWORD *)(v21 + 16) = v19;
                          v22 = (_QWORD *)v19[2];
                          *((_BYTE *)v19 + 24) = 1;
                          *((_BYTE *)v22 + 24) = 0;
                          v21 = v22[1];
                          v31 = *(_QWORD **)v21;
                          v22[1] = *(_QWORD *)v21;
                          if (v31)
LABEL_58:
                            v31[2] = v22;
                        }
                        else
                        {
                          *(_BYTE *)(v21 + 24) = 1;
                          *((_BYTE *)v22 + 24) = 0;
                          v21 = v22[1];
                          v31 = *(_QWORD **)v21;
                          v22[1] = *(_QWORD *)v21;
                          if (v31)
                            goto LABEL_58;
                        }
                        *(_QWORD *)(v21 + 16) = v22[2];
                        *(_QWORD *)(v22[2] + 8 * (*(_QWORD *)v22[2] != (_QWORD)v22)) = v21;
                        *(_QWORD *)v21 = v22;
                        goto LABEL_60;
                      }
                      *(_BYTE *)(v21 + 24) = 1;
                      v19 = v22;
                      *((_BYTE *)v22 + 24) = v22 == v20;
                      *v24 = 1;
                    }
                    while (v22 != v20);
                  }
                  ++v77;
                  v12 = *(_QWORD *)(v5 + 208);
                  v11 = *(_QWORD *)(v5 + 40);
                }
              }
              if (v12 != v11)
              {
                v32 = *(_QWORD *)(v5 + 216) == *(_QWORD *)(v13 + 216) && *(_QWORD *)(v5 + 48) == *(_QWORD *)(v13 + 48);
                if (v32
                  && (*(_QWORD *)(v5 + 224) & 0x8000000000000000) != 0
                  && (*(_QWORD *)(v13 + 224) & 0x8000000000000000) == 0
                  && *(_QWORD *)(v5 + 56) == *(_QWORD *)(v13 + 56))
                {
                  v33 = v7[4];
                  *(_BYTE *)(v13 + 24) = 1;
                  *(_QWORD *)(v13 + 16) = -1;
                  v34 = &v76;
                  v35 = &v76;
                  if (v76)
                  {
                    v36 = v76;
                    while (1)
                    {
                      while (1)
                      {
                        v34 = (_QWORD **)v36;
                        v37 = v36[4];
                        if (v37 <= (uint64_t)v33)
                          break;
                        v36 = *v34;
                        v35 = v34;
                        if (!*v34)
                          goto LABEL_78;
                      }
                      if (v37 >= (uint64_t)v33)
                        break;
                      v36 = v34[1];
                      if (!v36)
                      {
                        v35 = v34 + 1;
                        goto LABEL_78;
                      }
                    }
                  }
                  else
                  {
LABEL_78:
                    v38 = operator new(0x28uLL);
                    v38[4] = v33;
                    *v38 = 0;
                    v38[1] = 0;
                    v38[2] = v34;
                    *v35 = v38;
                    if (*v75)
                    {
                      v75 = (_QWORD **)*v75;
                      v38 = (_QWORD *)*v35;
                    }
                    v39 = v76;
                    v14 = v38 == v76;
                    *((_BYTE *)v38 + 24) = v38 == v76;
                    if (!v14)
                    {
                      do
                      {
                        v40 = v38[2];
                        if (*(_BYTE *)(v40 + 24))
                          break;
                        v41 = *(_QWORD **)(v40 + 16);
                        v42 = *v41;
                        if (*v41 == v40)
                        {
                          v45 = v41[1];
                          if (!v45 || (v46 = *(unsigned __int8 *)(v45 + 24), v43 = (_BYTE *)(v45 + 24), v46))
                          {
                            if (*(_QWORD **)v40 == v38)
                            {
                              *(_BYTE *)(v40 + 24) = 1;
                              *((_BYTE *)v41 + 24) = 0;
                              v49 = *(_QWORD *)(v40 + 8);
                              *v41 = v49;
                              if (v49)
                                goto LABEL_95;
                            }
                            else
                            {
                              v47 = *(uint64_t **)(v40 + 8);
                              v48 = *v47;
                              *(_QWORD *)(v40 + 8) = *v47;
                              if (v48)
                              {
                                *(_QWORD *)(v48 + 16) = v40;
                                v41 = *(_QWORD **)(v40 + 16);
                              }
                              v47[2] = (uint64_t)v41;
                              *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v47;
                              *v47 = v40;
                              *(_QWORD *)(v40 + 16) = v47;
                              v41 = (_QWORD *)v47[2];
                              v40 = *v41;
                              *((_BYTE *)v47 + 24) = 1;
                              *((_BYTE *)v41 + 24) = 0;
                              v49 = *(_QWORD *)(v40 + 8);
                              *v41 = v49;
                              if (v49)
LABEL_95:
                                *(_QWORD *)(v49 + 16) = v41;
                            }
                            *(_QWORD *)(v40 + 16) = v41[2];
                            *(_QWORD *)(v41[2] + 8 * (*(_QWORD *)v41[2] != (_QWORD)v41)) = v40;
                            *(_QWORD *)(v40 + 8) = v41;
LABEL_101:
                            v41[2] = v40;
                            break;
                          }
                        }
                        else if (!v42 || (v44 = *(unsigned __int8 *)(v42 + 24), v43 = (_BYTE *)(v42 + 24), v44))
                        {
                          if (*(_QWORD **)v40 == v38)
                          {
                            v54 = v38[1];
                            *(_QWORD *)v40 = v54;
                            if (v54)
                            {
                              *(_QWORD *)(v54 + 16) = v40;
                              v41 = *(_QWORD **)(v40 + 16);
                            }
                            v38[2] = v41;
                            *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v38;
                            v38[1] = v40;
                            *(_QWORD *)(v40 + 16) = v38;
                            v41 = (_QWORD *)v38[2];
                            *((_BYTE *)v38 + 24) = 1;
                            *((_BYTE *)v41 + 24) = 0;
                            v40 = v41[1];
                            v50 = *(_QWORD **)v40;
                            v41[1] = *(_QWORD *)v40;
                            if (v50)
LABEL_99:
                              v50[2] = v41;
                          }
                          else
                          {
                            *(_BYTE *)(v40 + 24) = 1;
                            *((_BYTE *)v41 + 24) = 0;
                            v40 = v41[1];
                            v50 = *(_QWORD **)v40;
                            v41[1] = *(_QWORD *)v40;
                            if (v50)
                              goto LABEL_99;
                          }
                          *(_QWORD *)(v40 + 16) = v41[2];
                          *(_QWORD *)(v41[2] + 8 * (*(_QWORD *)v41[2] != (_QWORD)v41)) = v40;
                          *(_QWORD *)v40 = v41;
                          goto LABEL_101;
                        }
                        *(_BYTE *)(v40 + 24) = 1;
                        v38 = v41;
                        *((_BYTE *)v41 + 24) = v41 == v39;
                        *v43 = 1;
                      }
                      while (v41 != v39);
                    }
                    ++v77;
                  }
                }
              }
            }
          }
          v51 = v7[1];
          if (v51)
          {
            do
            {
              v52 = (uint64_t **)v51;
              v51 = (uint64_t *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (uint64_t **)v7[2];
              v14 = *v52 == (uint64_t *)v7;
              v7 = v52;
            }
            while (!v14);
          }
          v7 = v52;
        }
        while (v52 != v4);
      }
LABEL_13:
      v8 = (uint64_t *)v3[1];
      if (v8)
      {
        do
        {
          v9 = (uint64_t **)v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t **)v3[2];
          v14 = *v9 == v3;
          v3 = (uint64_t *)v9;
        }
        while (!v14);
      }
      v3 = (uint64_t *)v9;
    }
    while (v9 != v4);
    v55 = v75;
    v2 = v72;
    if (v75 != &v76)
    {
      do
      {
        v58 = *v4;
        if (*v4)
        {
          v59 = v55[4];
          v60 = (uint64_t *)v4;
          v61 = *v4;
          do
          {
            v62 = v61[4];
            v63 = v62 < v59;
            if (v62 >= v59)
              v64 = (uint64_t **)v61;
            else
              v64 = (uint64_t **)(v61 + 1);
            if (!v63)
              v60 = v61;
            v61 = *v64;
          }
          while (*v64);
          if (v60 != (uint64_t *)v4 && v59 >= v60[4])
          {
            v65 = (uint64_t *)v60[1];
            v66 = v60;
            if (v65)
            {
              do
              {
                v67 = v65;
                v65 = (uint64_t *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v67 = (uint64_t *)v66[2];
                v14 = *v67 == (_QWORD)v66;
                v66 = v67;
              }
              while (!v14);
            }
            if ((uint64_t *)v72[5] == v60)
              v72[5] = v67;
            --v72[7];
            sub_2231AFE60(v58, v60);
            operator delete(v60);
          }
        }
        v68 = (_QWORD *)v55[1];
        if (v68)
        {
          do
          {
            v69 = (_QWORD **)v68;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            v69 = (_QWORD **)v55[2];
            v14 = *v69 == v55;
            v55 = v69;
          }
          while (!v14);
        }
        v55 = v69;
      }
      while (v69 != &v76);
    }
LABEL_122:
    v56 = (_QWORD *)v2[1];
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = (_QWORD *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (_QWORD *)v2[2];
        v14 = *v57 == (_QWORD)v2;
        v2 = v57;
      }
      while (!v14);
    }
    v2 = v57;
    if (v57 != v71)
      continue;
    break;
  }
  v70 = v76;
LABEL_155:
  sub_223198030((uint64_t)&v75, v70);
}

void sub_223687930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  sub_223198030((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

void **sub_223687948(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  BOOL v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 48;
      do
      {
        sub_223198030(v5, *(_QWORD **)(v5 + 8));
        v6 = v5 == (_QWORD)v2;
        v5 -= 48;
      }
      while (!v6);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_2236879B4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __int128 *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  __n128 v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  unint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  unint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  __n128 v87;
  BOOL v88;
  __n128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int128 *v94;
  __int128 *v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  __n128 v101;
  __int128 v102;
  __n128 *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  BOOL v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 *v133;
  __int128 *v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __int128 v144;
  __n128 v145;
  __int128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;

BOOL sub_223688808(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __n128 *v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  __n128 *v41;
  uint64_t v42;
  int v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  __n128 *v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  __n128 v62;

  v3 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 16))
      {
        v4 = *(_QWORD *)(a1 + 16);
        v5 = *(__n128 *)a1;
        v6 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 16) = v6;
        *(__n128 *)((char *)a2 - 24) = v5;
        a2[-1].n128_u64[1] = v4;
      }
      return 1;
    case 3uLL:
      v14 = (__n128 *)(a1 + 24);
      v15 = (__n128 *)((char *)a2 - 24);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = a2[-1].n128_i64[1];
      if (v16 > *(_QWORD *)(a1 + 16))
      {
        if (v17 <= v16)
        {
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *v14 = v49;
          *(_QWORD *)(a1 + 40) = v48;
          if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 40))
          {
            v50 = *(_QWORD *)(a1 + 40);
            v51 = *v14;
            v52 = a2[-1].n128_i64[1];
            *v14 = *v15;
            *(_QWORD *)(a1 + 40) = v52;
            *v15 = v51;
            a2[-1].n128_u64[1] = v50;
          }
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 16);
          v19 = *(__n128 *)a1;
          v20 = a2[-1].n128_i64[1];
          *(__n128 *)a1 = *v15;
          *(_QWORD *)(a1 + 16) = v20;
          *v15 = v19;
          a2[-1].n128_u64[1] = v18;
        }
        return 1;
      }
      if (v17 <= v16)
        return 1;
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *v14;
      v32 = a2[-1].n128_u64[1];
      *v14 = *v15;
      goto LABEL_43;
    case 4uLL:
      v14 = (__n128 *)(a1 + 24);
      v15 = (__n128 *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 40);
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 64);
      if (v21 <= v22)
      {
        if (v23 > v21)
        {
          v33 = *(_QWORD *)(a1 + 40);
          v34 = *v14;
          *v14 = *v15;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v15 = v34;
          *(_QWORD *)(a1 + 64) = v33;
          if (*(_QWORD *)(a1 + 40) > v22)
          {
            v35 = *(_QWORD *)(a1 + 16);
            v36 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v14 = v36;
            *(_QWORD *)(a1 + 40) = v35;
          }
        }
      }
      else
      {
        if (v23 <= v21)
        {
          v53 = *(_QWORD *)(a1 + 16);
          v54 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *v14 = v54;
          *(_QWORD *)(a1 + 40) = v53;
          if (v23 <= *(_QWORD *)(a1 + 40))
            goto LABEL_40;
          v24 = *(_QWORD *)(a1 + 40);
          v25 = *v14;
          *v14 = *v15;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(__n128 *)a1;
          *(__n128 *)a1 = *v15;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        }
        *v15 = v25;
        *(_QWORD *)(a1 + 64) = v24;
      }
LABEL_40:
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 64))
      {
        v55 = (__n128 *)((char *)a2 - 24);
        v56 = *(_QWORD *)(a1 + 64);
        v57 = *v15;
        v58 = a2[-1].n128_i64[1];
        *v15 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 64) = v58;
        *v55 = v57;
        v55[1].n128_u64[0] = v56;
        if (*(_QWORD *)(a1 + 64) > *(_QWORD *)(a1 + 40))
        {
          v30 = *(_QWORD *)(a1 + 40);
          v31 = *v14;
          *v14 = *v15;
          v32 = *(_QWORD *)(a1 + 64);
LABEL_43:
          v14[1].n128_u64[0] = v32;
          *v15 = v31;
          v15[1].n128_u64[0] = v30;
          if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
          {
            v59 = *(_QWORD *)(a1 + 16);
            v60 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(_QWORD *)(a1 + 16) = v14[1].n128_u64[0];
            *v14 = v60;
            v14[1].n128_u64[0] = v59;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_223688CE4((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    default:
      v7 = (__n128 *)(a1 + 48);
      v8 = (__n128 *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 64);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v26 = *(_QWORD *)(a1 + 40);
          v27 = *v8;
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v7 = v27;
          *(_QWORD *)(a1 + 64) = v26;
          if (*(_QWORD *)(a1 + 40) > v10)
          {
            v28 = *(_QWORD *)(a1 + 16);
            v29 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v8 = v29;
            *(_QWORD *)(a1 + 40) = v28;
          }
        }
      }
      else if (v11 <= v9)
      {
        v37 = *(_QWORD *)(a1 + 16);
        v38 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v8 = v38;
        *(_QWORD *)(a1 + 40) = v37;
        if (v11 > *(_QWORD *)(a1 + 40))
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *v8;
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v7 = v40;
          *(_QWORD *)(a1 + 64) = v39;
        }
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(__n128 *)a1;
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v7 = v13;
        *(_QWORD *)(a1 + 64) = v12;
      }
      v41 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      break;
  }
  while (1)
  {
    v44 = v41[1].n128_i64[0];
    if (v44 > (int64_t)v7[1].n128_u64[0])
      break;
LABEL_33:
    v7 = v41;
    v42 += 24;
    v41 = (__n128 *)((char *)v41 + 24);
    if (v41 == a2)
      return 1;
  }
  v62 = *v41;
  v45 = v42;
  do
  {
    v46 = a1 + v45;
    *(_OWORD *)(v46 + 72) = *(_OWORD *)(a1 + v45 + 48);
    *(_QWORD *)(v46 + 88) = *(_QWORD *)(a1 + v45 + 64);
    if (v45 == -48)
    {
      *(__n128 *)a1 = v62;
      *(_QWORD *)(a1 + 16) = v44;
      if (++v43 != 8)
        goto LABEL_33;
      return &v41[1].n128_i8[8] == (__int8 *)a2;
    }
    v45 -= 24;
  }
  while (v44 > *(_QWORD *)(v46 + 40));
  v47 = a1 + v45;
  *(__n128 *)(v47 + 72) = v62;
  *(_QWORD *)(v47 + 88) = v44;
  if (++v43 != 8)
    goto LABEL_33;
  return &v41[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_223688CE4(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = a2[1].n128_i64[0];
  v7 = a3[1].n128_i64[0];
  if (v6 <= (int64_t)a1[1].n128_u64[0])
  {
    if (v7 > v6)
    {
      v10 = a2[1].n128_u64[0];
      result = *a2;
      v11 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v11;
      *a3 = result;
      a3[1].n128_u64[0] = v10;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v12 = a1[1].n128_u64[0];
        result = *a1;
        v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      v8 = a1[1].n128_u64[0];
      result = *a1;
      v9 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v8;
      goto LABEL_10;
    }
    v14 = a1[1].n128_u64[0];
    result = *a1;
    v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v8 = a2[1].n128_u64[0];
      result = *a2;
      v16 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
  {
    v17 = a3[1].n128_u64[0];
    result = *a3;
    v18 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v18;
    *a4 = result;
    a4[1].n128_u64[0] = v17;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v19 = a2[1].n128_u64[0];
      result = *a2;
      v20 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v20;
      *a3 = result;
      a3[1].n128_u64[0] = v19;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v21 = a1[1].n128_u64[0];
        result = *a1;
        v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if ((int64_t)a5[1].n128_u64[0] > (int64_t)a4[1].n128_u64[0])
  {
    v23 = a4[1].n128_i64[0];
    result = *a4;
    v24 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v24;
    *a5 = result;
    a5[1].n128_u64[0] = v23;
    if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
    {
      v25 = a3[1].n128_u64[0];
      result = *a3;
      v26 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v26;
      *a4 = result;
      a4[1].n128_u64[0] = v25;
      if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
      {
        v27 = a2[1].n128_u64[0];
        result = *a2;
        v28 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v28;
        *a3 = result;
        a3[1].n128_u64[0] = v27;
        if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
        {
          v29 = a1[1].n128_u64[0];
          result = *a1;
          v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

__int128 *sub_223688F2C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;

  if ((__int128 *)a1 == a2)
    return a3;
  v3 = (uint64_t)a2 - a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v3 >= 0x30)
  {
    v44 = (unint64_t)(v4 - 2) >> 1;
    v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        v46 = (2 * v45) | 1;
        v47 = (__int128 *)(a1 + 24 * v46);
        if (2 * v45 + 2 < v4)
        {
          v48 = *(_QWORD *)(a1 + 24 * v46 + 16);
          v49 = *((_QWORD *)v47 + 5);
          v47 = (__int128 *)((char *)v47 + 24 * (v48 > v49));
          if (v48 > v49)
            v46 = 2 * v45 + 2;
        }
        v50 = *(_QWORD *)(a1 + 24 * v45 + 16);
        if (*((_QWORD *)v47 + 2) <= v50)
        {
          v51 = (__int128 *)(a1 + 24 * v45);
          v60 = *v51;
          do
          {
            v52 = v51;
            v51 = v47;
            v53 = *v47;
            *((_QWORD *)v52 + 2) = *((_QWORD *)v47 + 2);
            *v52 = v53;
            if (v44 < v46)
              break;
            v54 = (2 * v46) | 1;
            v47 = (__int128 *)(a1 + 24 * v54);
            v55 = 2 * v46 + 2;
            if (v55 < v4)
            {
              v56 = *(_QWORD *)(a1 + 24 * v54 + 16);
              v57 = *((_QWORD *)v47 + 5);
              v47 = (__int128 *)((char *)v47 + 24 * (v56 > v57));
              if (v56 > v57)
                v54 = v55;
            }
            v46 = v54;
          }
          while (*((_QWORD *)v47 + 2) <= v50);
          *v51 = v60;
          *((_QWORD *)v51 + 2) = v50;
        }
      }
      v16 = v45-- <= 0;
    }
    while (!v16);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 48)
    {
      v6 = a2;
      do
      {
        if (*((_QWORD *)v6 + 2) > *(_QWORD *)(a1 + 16))
        {
          v7 = *((_QWORD *)v6 + 2);
          v8 = *v6;
          v9 = *(_QWORD *)(a1 + 16);
          *v6 = *(_OWORD *)a1;
          *((_QWORD *)v6 + 2) = v9;
          *(_OWORD *)a1 = v8;
          *(_QWORD *)(a1 + 16) = v7;
        }
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
LABEL_28:
      v5 = a3;
      goto LABEL_29;
    }
    v10 = a2;
    while (1)
    {
      if (*((_QWORD *)v10 + 2) > *(_QWORD *)(a1 + 16))
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *v10;
        v13 = *(_QWORD *)(a1 + 16);
        *v10 = *(_OWORD *)a1;
        *((_QWORD *)v10 + 2) = v13;
        *(_OWORD *)a1 = v12;
        *(_QWORD *)(a1 + 16) = v11;
        if ((unint64_t)v4 < 3)
        {
          v17 = a1 + 24;
          v18 = 1;
          v19 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(a1 + 40) <= v19)
            goto LABEL_21;
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 40);
          v15 = *(_QWORD *)(a1 + 64);
          v16 = v14 <= v15;
          v17 = a1 + 24 + 24 * (v14 > v15);
          if (v16)
            v18 = 1;
          else
            v18 = 2;
          v19 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(v17 + 16) <= v19)
          {
LABEL_21:
            v58 = *(_OWORD *)a1;
            v20 = a1;
            do
            {
              v21 = v20;
              v20 = v17;
              v22 = *(_OWORD *)v17;
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v17 + 16);
              *(_OWORD *)v21 = v22;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18)
                break;
              v23 = (2 * v18) | 1;
              v17 = a1 + 24 * v23;
              v24 = 2 * v18 + 2;
              if (v24 < v4)
              {
                v25 = *(_QWORD *)(a1 + 24 * v23 + 16);
                v26 = *(_QWORD *)(v17 + 40);
                v17 += 24 * (v25 > v26);
                if (v25 > v26)
                  v23 = v24;
              }
              v18 = v23;
            }
            while (*(_QWORD *)(v17 + 16) <= v19);
            *(_OWORD *)v20 = v58;
            *(_QWORD *)(v20 + 16) = v19;
          }
        }
      }
      v10 = (__int128 *)((char *)v10 + 24);
      if (v10 == a3)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (v3 >= 25)
  {
    v27 = v3 / 0x18uLL;
    do
    {
      v28 = 0;
      v59 = *(_OWORD *)a1;
      v61 = *(_QWORD *)(a1 + 16);
      v29 = (__int128 *)a1;
      do
      {
        v31 = v28 + 1;
        v32 = (__int128 *)((char *)v29 + 24 * v28 + 24);
        v33 = (2 * v28) | 1;
        v34 = 2 * v28 + 2;
        if (v34 < v27)
        {
          v35 = *((_QWORD *)v29 + 3 * v31 + 2);
          v36 = *((_QWORD *)v32 + 5);
          v32 = (__int128 *)((char *)v32 + 24 * (v35 > v36));
          if (v35 > v36)
            v33 = v34;
        }
        v30 = *v32;
        *((_QWORD *)v29 + 2) = *((_QWORD *)v32 + 2);
        *v29 = v30;
        v29 = v32;
        v28 = v33;
      }
      while (v33 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 = (__int128 *)((char *)a2 - 24);
      if (v32 == a2)
      {
        *((_QWORD *)v32 + 2) = v61;
        *v32 = v59;
      }
      else
      {
        v37 = *a2;
        *((_QWORD *)v32 + 2) = *((_QWORD *)a2 + 2);
        *v32 = v37;
        *a2 = v59;
        *((_QWORD *)a2 + 2) = v61;
        v38 = (uint64_t)v32 - a1 + 24;
        if (v38 >= 25)
        {
          v39 = (v38 / 0x18uLL - 2) >> 1;
          v40 = *((_QWORD *)v32 + 2);
          if (*(_QWORD *)(a1 + 24 * v39 + 16) > v40)
          {
            v62 = *v32;
            do
            {
              v41 = v32;
              v32 = (__int128 *)(a1 + 24 * v39);
              v42 = *v32;
              *((_QWORD *)v41 + 2) = *((_QWORD *)v32 + 2);
              *v41 = v42;
              if (!v39)
                break;
              v39 = (v39 - 1) >> 1;
            }
            while (*(_QWORD *)(a1 + 24 * v39 + 16) > v40);
            *v32 = v62;
            *((_QWORD *)v32 + 2) = v40;
          }
        }
      }
      v16 = v27-- <= 2;
    }
    while (!v16);
  }
  return v5;
}

char *sub_2236893A0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    sub_22367C394();
  if (0x5555555555555556 * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_223174E94();
    v9 = operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[3 * v5];
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  *v10 = *(_QWORD *)a2;
  v10[1] = v12;
  v13 = v10 + 1;
  v14 = *(_QWORD *)(a2 + 16);
  v10[2] = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)a2 = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *v10 = v13;
  }
  v15 = (char *)&v9[3 * v8];
  v10[3] = *(_QWORD *)(a2 + 24);
  v9[3 * v5 + 2] = *(_OWORD *)(a2 + 32);
  v16 = (char *)(v10 + 6);
  if (v4 == v3)
  {
    *a1 = (char *)v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3)
      return v16;
    goto LABEL_25;
  }
  v17 = 0;
  do
  {
    v19 = &v10[v17 / 8];
    *(v19 - 6) = *(_QWORD *)&v4[v17 - 48];
    v20 = &v4[v17 - 40];
    v21 = *(_QWORD *)v20;
    v10[v17 / 8 - 5] = *(_QWORD *)v20;
    v22 = (uint64_t)&v10[v17 / 8 - 5];
    v23 = *(_QWORD *)&v4[v17 - 32];
    *(v19 - 4) = v23;
    if (v23)
    {
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)&v4[v17 - 48] = v20;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)&v4[v17 - 32] = 0;
    }
    else
    {
      *(v19 - 6) = v22;
    }
    v18 = &v10[v17 / 8];
    *(v18 - 3) = *(_QWORD *)&v4[v17 - 24];
    *((_OWORD *)v18 - 1) = *(_OWORD *)&v4[v17 - 16];
    v17 -= 48;
  }
  while (&v4[v17] != v3);
  v3 = *a1;
  v24 = a1[1];
  *a1 = (char *)&v10[v17 / 8];
  a1[1] = v16;
  a1[2] = v15;
  if (v24 != v3)
  {
    v25 = (uint64_t)(v24 - 48);
    do
    {
      sub_223198030(v25, *(_QWORD **)(v25 + 8));
      v26 = v25 == (_QWORD)v3;
      v25 -= 48;
    }
    while (!v26);
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v16;
}

_QWORD *sub_223689588(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_223689694(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_2231A9A8C(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *sub_223689694(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_223689844(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_2231A9A8C(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= v15[4])
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_223198030(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_223198030(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = v4[4];
      v25[4] = v27;
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_50:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = **(_QWORD **)a1;
      if (v31)
        goto LABEL_51;
LABEL_52:
      sub_2231A9A8C(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = (uint64_t **)v28;
        if (v27 >= v28[4])
          break;
        v28 = (uint64_t *)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_50;
      }
      v28 = (uint64_t *)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = **(_QWORD **)a1;
    if (!v31)
      goto LABEL_52;
LABEL_51:
    *(_QWORD *)a1 = v31;
    v26 = *v30;
    goto LABEL_52;
  }
}

BOOL sub_223689B60(_BOOL8 result, _QWORD *a2, float **a3, float **a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v8 = result;
    do
    {
      v9 = (_QWORD *)*v4;
      if (v5[7])
        v10 = v9 == 0;
      else
        v10 = 1;
      if (!v10)
      {
        v11 = v5[4];
        v12 = v4;
        do
        {
          v13 = v9[4];
          v14 = v13 < v11;
          if (v13 >= v11)
            v15 = v9;
          else
            v15 = v9 + 1;
          if (!v14)
            v12 = v9;
          v9 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 != v4 && v12[4] <= v11)
        {
          v16 = (_QWORD *)v12[5];
          v17 = v12 + 6;
          v18 = *(_QWORD *)(v8 + 32);
          v19 = *(_QWORD *)(v8 + 8);
          if (v16 == v17)
          {
LABEL_18:
            v20 = *(_QWORD *)(v5[5] + 32) + v18;
            result = sub_223689D70(*(_QWORD *)(v19 + ((v20 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v20 & 0xF), a3, a4);
            if (!result)
            {
              v21 = (_QWORD *)v5[5];
              if (v21 != v5 + 6)
              {
                v22 = *(_QWORD *)(v8 + 32);
                v23 = *(_QWORD *)(v8 + 8);
                do
                {
                  *(_BYTE *)(*(_QWORD *)(v23 + (((unint64_t)(v21[4] + v22) >> 1) & 0x7FFFFFFFFFFFFFF8))
                           + 368 * ((*((_DWORD *)v21 + 8) + (_DWORD)v22) & 0xF)
                           + 24) = 1;
                  v27 = (_QWORD *)v21[1];
                  if (v27)
                  {
                    do
                    {
                      v28 = v27;
                      v27 = (_QWORD *)*v27;
                    }
                    while (v27);
                  }
                  else
                  {
                    do
                    {
                      v28 = (_QWORD *)v21[2];
                      v10 = *v28 == (_QWORD)v21;
                      v21 = v28;
                    }
                    while (!v10);
                  }
                  v21 = v28;
                }
                while (v28 != v5 + 6);
              }
            }
          }
          else
          {
            while (1)
            {
              v24 = *(_QWORD *)(v19 + (((unint64_t)(v16[4] + v18) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 368 * ((*((_DWORD *)v16 + 8) + (_DWORD)v18) & 0xF);
              if (*(_QWORD *)(v24 + 40) != *(_QWORD *)(v24 + 208))
                break;
              v25 = (_QWORD *)v16[1];
              if (v25)
              {
                do
                {
                  v26 = v25;
                  v25 = (_QWORD *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  v26 = (_QWORD *)v16[2];
                  v10 = *v26 == (_QWORD)v16;
                  v16 = v26;
                }
                while (!v10);
              }
              v16 = v26;
              if (v26 == v17)
                goto LABEL_18;
            }
          }
        }
      }
      v29 = (_QWORD *)v5[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v5[2];
          v10 = *v30 == (_QWORD)v5;
          v5 = v30;
        }
        while (!v10);
      }
      v5 = v30;
    }
    while (v30 != v4);
  }
  return result;
}

BOOL sub_223689D70(uint64_t a1, float **a2, float **a3)
{
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float *v25;
  int v26;
  int v27;
  int v29;
  char v30;

  if (!*(_QWORD *)(a1 + 40))
  {
    v12 = *a3;
    v11 = a3[1];
    v13 = (char *)v11 - (char *)*a3;
    if ((unint64_t)v13 >= 0x18)
    {
      v14 = v13 >> 3;
      v15 = v11 == v12 ? 0 : v14 + 1;
      v29 = 0;
      v30 = 0;
      v16 = v15 - 1;
      if (v15 >= v14)
      {
        v17 = v11;
        if (v16 <= v14)
          v17 = &v12[2 * (v16 % v14)];
      }
      else
      {
        v17 = v11 - 2;
      }
      if (v15 != 1)
      {
        v22 = v11;
        do
        {
          if (v16 + 1 >= v14)
          {
            v23 = v11;
            if (v16 <= v14)
              v23 = &v12[2 * (v16 % v14)];
          }
          else
          {
            v23 = v22 - 2;
          }
          v24 = v16 - 1;
          if (v16 >= v14)
          {
            v25 = v11;
            if (v24 <= v14)
              v25 = &v12[2 * (v24 % v14)];
          }
          else
          {
            v25 = v17 - 2;
          }
          if (!sub_2233E62E4((float *)a1, v23, v25, (uint64_t)&v29))
            break;
          if (v16 + 1 >= v14)
          {
            v22 = v11;
            if (v16 <= v14)
              v22 = &v12[2 * (v16 % v14)];
          }
          else
          {
            v22 -= 2;
          }
          if (v16 < v14)
          {
            v17 -= 2;
          }
          else
          {
            v17 = v11;
            if (v24 <= v14)
              v17 = &v12[2 * (v24 % v14)];
          }
          --v16;
        }
        while (v24);
        goto LABEL_59;
      }
    }
LABEL_58:
    v26 = -1;
    return v26 > 0;
  }
  v5 = *a2;
  v4 = a2[1];
  v6 = (char *)v4 - (char *)*a2;
  if ((unint64_t)v6 < 0x18)
    goto LABEL_58;
  v7 = v6 >> 3;
  v8 = v4 == v5 ? 0 : v7 + 1;
  v29 = 0;
  v30 = 0;
  v9 = v8 - 1;
  if (v8 >= v7)
  {
    v10 = v4;
    if (v9 <= v7)
      v10 = &v5[2 * (v9 % v7)];
  }
  else
  {
    v10 = v4 - 2;
  }
  if (v8 == 1)
    goto LABEL_58;
  v18 = v4;
  do
  {
    if (v9 + 1 >= v7)
    {
      v19 = v4;
      if (v9 <= v7)
        v19 = &v5[2 * (v9 % v7)];
    }
    else
    {
      v19 = v18 - 2;
    }
    v20 = v9 - 1;
    if (v9 >= v7)
    {
      v21 = v4;
      if (v20 <= v7)
        v21 = &v5[2 * (v20 % v7)];
    }
    else
    {
      v21 = v10 - 2;
    }
    if (!sub_2233E62E4((float *)a1, v19, v21, (uint64_t)&v29))
      break;
    if (v9 + 1 >= v7)
    {
      v18 = v4;
      if (v9 <= v7)
        v18 = &v5[2 * (v9 % v7)];
    }
    else
    {
      v18 -= 2;
    }
    if (v9 < v7)
    {
      v10 -= 2;
    }
    else
    {
      v10 = v4;
      if (v20 <= v7)
        v10 = &v5[2 * (v20 % v7)];
    }
    --v9;
  }
  while (v20);
LABEL_59:
  if (v29)
    v27 = 1;
  else
    v27 = -1;
  if (v30)
    v26 = 0;
  else
    v26 = v27;
  return v26 > 0;
}

void sub_22368A020(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  BOOL v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

uint64_t sub_22368A558(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;

  v3 = a2[4];
  v4 = a3[4];
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v5 < v6;
  if (v5 != v6)
    return v7;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v4 + 32);
  if (v8 != v9
    || *(_QWORD *)(v3 + 24) != *(_QWORD *)(v4 + 24)
    || *(_QWORD *)(v3 + 40) != *(_QWORD *)(v4 + 40)
    || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v4 + 16))
  {
    v20 = *(_QWORD *)(v3 + 16);
    v21 = *(_QWORD *)(v4 + 16);
    v7 = v20 < v21;
    if (v20 == v21)
    {
      v22 = *(_QWORD *)(v3 + 24);
      v23 = *(_QWORD *)(v4 + 24);
      v7 = v22 < v23;
      if (v22 == v23)
      {
        v24 = *(_QWORD *)(v3 + 40);
        v25 = *(_QWORD *)(v4 + 40);
        v26 = v8 < v9;
        v17 = v24 == v25;
        v27 = v24 < v25;
        if (v17)
          return v26;
        else
          return v27;
      }
    }
    return v7;
  }
  if (vabdd_f64(*(double *)(v3 + 64), *(double *)(v4 + 64)) >= 50.0)
    return sub_2233E5070((double *)(v3 + 48), (double *)(v4 + 48));
  v35 = *(_OWORD *)(v3 + 48);
  sub_2233E5290((int64_t)&v35);
  v34 = *(_OWORD *)(v4 + 48);
  sub_2233E5290((int64_t)&v34);
  if (v35 != v34)
  {
    v3 = a2[4];
    v4 = a3[4];
    return sub_2233E5070((double *)(v3 + 48), (double *)(v4 + 48));
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v15 = (_DWORD *)(*(_QWORD *)(v14 + (((unint64_t)(v13 + *a2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 368 * (((_DWORD)v13 + *(_DWORD *)a2) & 0xF));
  v16 = (_DWORD *)(*(_QWORD *)(v14 + (((unint64_t)(*a3 + v13) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 368 * ((*(_DWORD *)a3 + (_DWORD)v13) & 0xF));
  v17 = v15[2] == 2 && v16[2] == 2;
  if (v17)
    return sub_22368AEF4(a1, (uint64_t)a2, (uint64_t)a3);
  v18 = v15[8];
  v19 = v18 == 3 && v15[50] == 3;
  v29 = v16[8];
  v30 = v29 == 3 && v16[50] == 3;
  if (v19 && !v30)
    return 1;
  if (!v19 && v30)
    return 0;
  v31 = v18 == 1 && v15[50] == 1;
  v32 = v29 == 1 && v16[50] == 1;
  if (v31 && !v32)
    return 1;
  v33 = v31 || !v32;
  if (*a2 < *a3)
    return v33;
  else
    return 0;
}

uint64_t sub_22368A828(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = sub_22368A558(a4, a2, a1);
  result = sub_22368A558(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_10:
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    v25 = *a1;
    v26 = a1[1];
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *a2 = v25;
    a2[1] = v26;
    if (sub_22368A558(a4, a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = a3[1];
      *a2 = *a3;
      a2[1] = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    if (!sub_22368A558(a4, a2, a1))
      return 1;
    v20 = *a1;
    v21 = a1[1];
    v22 = *((_QWORD *)a1 + 4);
    v23 = *((_QWORD *)a2 + 4);
    v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *((_QWORD *)a1 + 4) = v23;
    *((_QWORD *)a2 + 4) = v22;
    result = 2;
    *a2 = v20;
    a2[1] = v21;
  }
  return result;
}

_QWORD *sub_22368A99C(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = a2;
  v6 = a1[1];
  v22 = *a1;
  v23 = v6;
  v24 = *((_QWORD *)a1 + 4);
  if ((sub_22368A558(a3, &v22, (_QWORD *)(a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 5;
    while ((sub_22368A558(a3, &v22, v7) & 1) == 0);
  }
  else
  {
    v8 = (_QWORD *)a1 + 5;
    do
    {
      v7 = v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = sub_22368A558(a3, &v22, v8);
      v8 = v7 + 5;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((sub_22368A558(a3, &v22, (_QWORD *)v4) & 1) != 0);
  }
  while ((unint64_t)v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v11 = *((_OWORD *)v7 + 1);
    v27 = v7[4];
    v25 = v10;
    v26 = v11;
    v12 = *(_OWORD *)v4;
    v13 = *(_OWORD *)(v4 + 16);
    v7[4] = *(_QWORD *)(v4 + 32);
    *(_OWORD *)v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v14 = v25;
    v15 = v26;
    *(_QWORD *)(v4 + 32) = v27;
    *(_OWORD *)v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    do
      v7 += 5;
    while (!sub_22368A558(a3, &v22, v7));
    do
      v4 -= 40;
    while ((sub_22368A558(a3, &v22, (_QWORD *)v4) & 1) != 0);
  }
  v16 = (__int128 *)(v7 - 5);
  if (v7 - 5 != (_QWORD *)a1)
  {
    v17 = *v16;
    v18 = *(_OWORD *)(v7 - 3);
    *((_QWORD *)a1 + 4) = *(v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(v7 - 1) = v24;
  *v16 = v19;
  *(_OWORD *)(v7 - 3) = v20;
  return v7;
}

uint64_t sub_22368AAF8(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v6 = 0;
  v7 = a1[1];
  v22 = *a1;
  v23 = v7;
  v24 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while ((sub_22368A558(a3, (__int128 *)((char *)a1 + v6), &v22) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 5;
    }
    while ((sub_22368A558(a3, a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 5;
    while (!sub_22368A558(a3, a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (unint64_t)a1 + v6;
    v11 = a2;
    do
    {
      v13 = *(_OWORD *)(v10 + 16);
      v25 = *(_OWORD *)v10;
      v12 = v25;
      v26 = v13;
      v27 = *(_QWORD *)(v10 + 32);
      v14 = v27;
      v16 = *(_OWORD *)v11;
      v15 = *((_OWORD *)v11 + 1);
      *(_QWORD *)(v10 + 32) = v11[4];
      *(_OWORD *)v10 = v16;
      *(_OWORD *)(v10 + 16) = v15;
      v11[4] = v14;
      *(_OWORD *)v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      do
        v10 += 40;
      while ((sub_22368A558(a3, (_QWORD *)v10, &v22) & 1) != 0);
      do
        v11 -= 5;
      while (!sub_22368A558(a3, v11, &v22));
    }
    while (v10 < (unint64_t)v11);
    v9 = v10 - 40;
  }
  if ((__int128 *)v9 != a1)
  {
    v17 = *(_OWORD *)v9;
    v18 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(_QWORD *)(v9 + 32) = v24;
  *(_OWORD *)v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_22368AC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 40;
      if (!sub_22368A558(a3, (_QWORD *)(a2 - 40), (_QWORD *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(v8 + 32) = v11;
      result = 1;
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      sub_22368A828((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      v24 = (__int128 *)(a1 + 40);
      v25 = (__int128 *)(a1 + 80);
      v26 = a2 - 40;
      sub_22368A828((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      if (!sub_22368A558(a3, (_QWORD *)v26, (_QWORD *)(a1 + 80)))
        return 1;
      v27 = *v25;
      v28 = *(_OWORD *)(a1 + 96);
      v29 = *(_QWORD *)(a1 + 112);
      v30 = *(_QWORD *)(v26 + 32);
      v31 = *(_OWORD *)(v26 + 16);
      *v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v30;
      *(_QWORD *)(v26 + 32) = v29;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      if (!sub_22368A558(a3, (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 40)))
        return 1;
      v32 = *(_QWORD *)(a1 + 72);
      v34 = *v24;
      v33 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 96);
      *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v25 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(_QWORD *)(a1 + 112) = v32;
      if (!sub_22368A558(a3, (_QWORD *)(a1 + 40), (_QWORD *)a1))
        return 1;
      v36 = *(_QWORD *)(a1 + 32);
      v38 = *(_OWORD *)a1;
      v37 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v24 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      result = 1;
      *(_QWORD *)(a1 + 72) = v36;
      return result;
    case 5uLL:
      sub_22368B3D8(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), (__int128 *)(a2 - 40), a3);
      return 1;
    default:
      v14 = (_QWORD *)(a1 + 80);
      sub_22368A828((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_22368A558(a3, (_QWORD *)v15, v14))
    {
      v20 = *(_OWORD *)(v15 + 16);
      v40 = *(_OWORD *)v15;
      v41 = v20;
      v42 = *(_QWORD *)(v15 + 32);
      v21 = v16;
      do
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 96);
        *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 136) = v23;
        *(_QWORD *)(v22 + 152) = *(_QWORD *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          v18 = a1;
          goto LABEL_7;
        }
        v21 -= 40;
      }
      while ((sub_22368A558(a3, &v40, (_QWORD *)(v22 + 40)) & 1) != 0);
      v18 = a1 + v21 + 120;
LABEL_7:
      v19 = v41;
      *(_OWORD *)v18 = v40;
      *(_OWORD *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 32) = v42;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (_QWORD *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

BOOL sub_22368AEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  int v7;
  double v8;
  int v9;
  BOOL v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;

  sub_22368B190(*(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), (_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &v26, &v25);
  sub_22368B190(*(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 24), &v24, &v23);
  sub_22368B190(*(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD **)(a3 + 24), &v22, &v21);
  v27 = 1.0;
  v6 = sub_2233DB7C4((float *)&v26, (float *)&v25, (float *)&v23, &v27);
  if (v6 == 0.0)
  {
LABEL_2:
    v7 = 0;
    goto LABEL_3;
  }
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      v7 = 1;
    else
      v7 = -1;
  }
  else
  {
    v13 = fabs(v6);
    if (v6 > 0.0)
      v7 = 1;
    else
      v7 = -1;
    if (v13 <= v27 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_3:
  v27 = 1.0;
  v8 = sub_2233DB7C4((float *)&v26, (float *)&v25, (float *)&v21, &v27);
  if (v8 == 0.0)
  {
LABEL_4:
    v9 = 0;
    goto LABEL_5;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v14 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v14 <= v27 * 2.22044605e-16)
      goto LABEL_4;
  }
LABEL_5:
  v10 = v7 < v9;
  if (v7 != v9)
    return v10;
  v27 = 1.0;
  v11 = sub_2233DB7C4((float *)&v24, (float *)&v23, (float *)&v21, &v27);
  if (v11 != 0.0)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v11 > 0.0)
        v12 = 1;
      else
        v12 = -1;
      goto LABEL_35;
    }
    v15 = fabs(v11);
    if (v11 > 0.0)
      v12 = 1;
    else
      v12 = -1;
    if (v15 > v27 * 2.22044605e-16)
      goto LABEL_35;
  }
  v12 = 0;
LABEL_35:
  v27 = 1.0;
  v16 = sub_2233DB7C4((float *)&v22, (float *)&v21, (float *)&v23, &v27);
  if (v16 == 0.0)
    goto LABEL_36;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v16 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    v10 = v20 < v12;
    if (v20 != v12)
      return v10;
    return *(_QWORD *)a2 < *(_QWORD *)a3;
  }
  v18 = fabs(v16);
  v19 = v16 > 0.0 ? 1 : -1;
  if (v18 <= v27 * 2.22044605e-16)
  {
LABEL_36:
    v10 = v12 > 0;
    if (v12)
      return v10;
    return *(_QWORD *)a2 < *(_QWORD *)a3;
  }
  v10 = v19 < v12;
  if (v19 == v12)
    return *(_QWORD *)a2 < *(_QWORD *)a3;
  return v10;
}

uint64_t sub_22368B190(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  if (*a3 == 1)
  {
    v6 = (_QWORD *)*a2;
    v5 = (_QWORD *)a2[1];
    v7 = ((uint64_t)v5 - *a2) >> 3;
    if (v5 == (_QWORD *)*a2)
      v12 = 0;
    else
      v12 = v7 + 1;
    v13 = ((v12 - 1) & ((a3[3] % (v12 - 1)) >> 63)) + a3[3] % (v12 - 1);
    v10 = v12 - v13;
    if (v12 >= v7 || v10 >= v7)
    {
      v11 = (_QWORD *)a2[1];
      if (v10 <= v7)
        v11 = &v6[v10 % v7];
    }
    else
    {
      v11 = &v5[-v13];
    }
    if (v10 < v7)
    {
LABEL_18:
      v5 = v11 - 1;
      goto LABEL_24;
    }
  }
  else
  {
    if (*a3)
      return 0;
    v6 = (_QWORD *)*a1;
    v5 = (_QWORD *)a1[1];
    v7 = ((uint64_t)v5 - *a1) >> 3;
    if (v5 == (_QWORD *)*a1)
      v8 = 0;
    else
      v8 = v7 + 1;
    v9 = ((v8 - 1) & ((a3[3] % (v8 - 1)) >> 63)) + a3[3] % (v8 - 1);
    v10 = v8 - v9;
    if (v8 >= v7 || v10 >= v7)
    {
      v11 = (_QWORD *)a1[1];
      if (v10 <= v7)
        v11 = &v6[v10 % v7];
    }
    else
    {
      v11 = &v5[-v9];
    }
    if (v10 < v7)
      goto LABEL_18;
  }
  v14 = v10 - 1;
  if (v14 <= v7)
    v5 = &v6[v14 % v7];
LABEL_24:
  *a4 = *v5;
  if (*a3 != 1)
  {
    if (!*a3)
    {
      v16 = (_QWORD *)*a1;
      v15 = (_QWORD *)a1[1];
      v17 = ((uint64_t)v15 - *a1) >> 3;
      if (v15 == (_QWORD *)*a1)
        v18 = 0;
      else
        v18 = v17 + 1;
      v19 = ((v18 - 1) & (((a3[3] + 1) % (v18 - 1)) >> 63)) + (a3[3] + 1) % (v18 - 1);
      v20 = v18 - v19;
      if (v18 >= v17 || v20 >= v17)
      {
        v21 = (_QWORD *)a1[1];
        if (v20 <= v17)
          v21 = &v16[v20 % v17];
      }
      else
      {
        v21 = &v15[-v19];
      }
      if (v20 < v17)
      {
        *a5 = *(v21 - 1);
        return 1;
      }
      goto LABEL_47;
    }
    return 0;
  }
  v16 = (_QWORD *)*a2;
  v15 = (_QWORD *)a2[1];
  v17 = ((uint64_t)v15 - *a2) >> 3;
  if (v15 == (_QWORD *)*a2)
    v23 = 0;
  else
    v23 = v17 + 1;
  v24 = ((v23 - 1) & (((a3[3] + 1) % (v23 - 1)) >> 63)) + (a3[3] + 1) % (v23 - 1);
  v20 = v23 - v24;
  if (v23 >= v17 || v20 >= v17)
  {
    v25 = (_QWORD *)a2[1];
    if (v20 <= v17)
      v25 = &v16[v20 % v17];
  }
  else
  {
    v25 = &v15[-v24];
  }
  if (v20 < v17)
  {
    *a5 = *(v25 - 1);
    return 1;
  }
LABEL_47:
  v26 = v20 - 1;
  if (v26 <= v17)
    *a5 = v16[v26 % v17];
  else
    *a5 = *v15;
  return 1;
}

__n128 sub_22368B3D8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;

  sub_22368A828((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a6);
  if (sub_22368A558(a6, a4, (_QWORD *)a3))
  {
    v12 = *(_OWORD *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_QWORD *)(a3 + 32);
    v15 = *((_QWORD *)a4 + 4);
    v16 = a4[1];
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v15;
    *((_QWORD *)a4 + 4) = v14;
    *a4 = v12;
    a4[1] = v13;
    if (sub_22368A558(a6, (_QWORD *)a3, (_QWORD *)a2))
    {
      v17 = *(_OWORD *)a2;
      v18 = *(_OWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a3 + 32);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 32) = v20;
      *(_QWORD *)(a3 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      if (sub_22368A558(a6, (_QWORD *)a2, (_QWORD *)a1))
      {
        v22 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(_QWORD *)(a2 + 32);
        v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a2 + 32) = v24;
        *(_OWORD *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v23;
      }
    }
  }
  if (sub_22368A558(a6, a5, a4))
  {
    v28 = *a4;
    v29 = a4[1];
    v30 = *((_QWORD *)a4 + 4);
    v31 = *((_QWORD *)a5 + 4);
    v32 = a5[1];
    *a4 = *a5;
    a4[1] = v32;
    *((_QWORD *)a4 + 4) = v31;
    *((_QWORD *)a5 + 4) = v30;
    *a5 = v28;
    a5[1] = v29;
    if (sub_22368A558(a6, a4, (_QWORD *)a3))
    {
      v33 = *(_OWORD *)a3;
      v34 = *(_OWORD *)(a3 + 16);
      v35 = *(_QWORD *)(a3 + 32);
      v36 = *((_QWORD *)a4 + 4);
      v37 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v37;
      *(_QWORD *)(a3 + 32) = v36;
      *((_QWORD *)a4 + 4) = v35;
      *a4 = v33;
      a4[1] = v34;
      if (sub_22368A558(a6, (_QWORD *)a3, (_QWORD *)a2))
      {
        v38 = *(_OWORD *)a2;
        v39 = *(_OWORD *)(a2 + 16);
        v40 = *(_QWORD *)(a2 + 32);
        v41 = *(_QWORD *)(a3 + 32);
        v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v42;
        *(_QWORD *)(a2 + 32) = v41;
        *(_QWORD *)(a3 + 32) = v40;
        *(_OWORD *)a3 = v38;
        *(_OWORD *)(a3 + 16) = v39;
        if (sub_22368A558(a6, (_QWORD *)a2, (_QWORD *)a1))
        {
          result = *(__n128 *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 32);
          v45 = *(_QWORD *)(a2 + 32);
          v46 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v46;
          *(_QWORD *)(a1 + 32) = v45;
          *(_QWORD *)(a2 + 32) = v44;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v43;
        }
      }
    }
  }
  return result;
}

__int128 *sub_22368B59C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __n128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v43;
  __int128 *v44;
  __n128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        sub_22368B868(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_22368A558(a4, v14, (_QWORD *)a1))
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = *((_QWORD *)v14 + 4);
          v18 = *(_QWORD *)(a1 + 32);
          v19 = *(_OWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_QWORD *)v14 + 4) = v18;
          *(_QWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v16;
          sub_22368B868(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 41)
    {
      return v13;
    }
    else
    {
      v43 = v13;
      v44 = a2;
      v20 = v8 / 0x28uLL;
      do
      {
        v22 = 0;
        v45 = *(__n128 *)a1;
        v46 = *(_OWORD *)(a1 + 16);
        v47 = *(_QWORD *)(a1 + 32);
        v23 = a1;
        do
        {
          v26 = v23 + 40 * v22 + 40;
          v27 = (2 * v22) | 1;
          v28 = 2 * v22 + 2;
          if (v28 < v20
            && sub_22368A558(a4, (_QWORD *)(v23 + 40 * v22 + 40), (_QWORD *)(v23 + 40 * v22 + 80)))
          {
            v26 += 40;
            v27 = v28;
          }
          v24 = *(_OWORD *)v26;
          v25 = *(_OWORD *)(v26 + 16);
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v26 + 32);
          *(_OWORD *)v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
          v23 = v26;
          v22 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        v29 = (uint64_t)v44 - 40;
        v30 = v26 == (_QWORD)v44 - 40;
        v44 = (__int128 *)((char *)v44 - 40);
        if (v30)
        {
          *(_QWORD *)(v26 + 32) = v47;
          *(__n128 *)v26 = v45;
          *(_OWORD *)(v26 + 16) = v46;
        }
        else
        {
          v31 = *(__n128 *)v29;
          v32 = *(_OWORD *)(v29 + 16);
          *(_QWORD *)(v26 + 32) = *(_QWORD *)(v29 + 32);
          *(__n128 *)v26 = v31;
          *(_OWORD *)(v26 + 16) = v32;
          *(__n128 *)v29 = v45;
          *(_OWORD *)(v29 + 16) = v46;
          *(_QWORD *)(v29 + 32) = v47;
          v33 = v26 - a1 + 40;
          if (v33 >= 41)
          {
            v34 = (v33 / 0x28uLL - 2) >> 1;
            v35 = a1 + 40 * v34;
            if (sub_22368A558(a4, (_QWORD *)v35, (_QWORD *)v26))
            {
              v36 = *(_OWORD *)v26;
              v37 = *(_OWORD *)(v26 + 16);
              v50 = *(_QWORD *)(v26 + 32);
              v48 = v36;
              v49 = v37;
              do
              {
                v38 = v35;
                v39 = *(_OWORD *)v35;
                v40 = *(_OWORD *)(v35 + 16);
                *(_QWORD *)(v26 + 32) = *(_QWORD *)(v35 + 32);
                *(_OWORD *)v26 = v39;
                *(_OWORD *)(v26 + 16) = v40;
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
                v35 = a1 + 40 * v34;
                v26 = v38;
              }
              while ((sub_22368A558(a4, (_QWORD *)v35, &v48) & 1) != 0);
              v41 = v49;
              *(_OWORD *)v38 = v48;
              *(_OWORD *)(v38 + 16) = v41;
              *(_QWORD *)(v38 + 32) = v50;
            }
          }
        }
      }
      while (v20-- > 2);
      return v43;
    }
  }
  return a3;
}

__n128 sub_22368B868(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_22368A558(a2, (_QWORD *)(a1 + 40 * v12), (_QWORD *)v13 + 5))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((sub_22368A558(a2, v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (sub_22368A558(a2, (_QWORD *)(a1 + 40 * v20), (_QWORD *)v13 + 5))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!sub_22368A558(a2, v13, &v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

void sub_22368B9D4(uint64_t a1, float *a2)
{
  _OWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float *v14[3];
  float *v15[3];

  v3 = *(_OWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v15[0] = (float *)(a1 + 24);
  v15[1] = a2;
  v5 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - (_QWORD)v3) >> 3));
  v15[2] = (float *)(a1 + 48);
  v14[0] = (float *)(a1 + 24);
  v14[1] = a2;
  v14[2] = (float *)(a1 + 48);
  if ((_OWORD *)v4 == v3)
    v6 = 0;
  else
    v6 = v5;
  sub_22368CCE8(v3, v4, v14, v6, 1);
  v7 = *(_OWORD **)a1;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v8)
  {
    *((_QWORD *)v7 + 1) = 0;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v8 >> 3)) >= 2)
    {
      v9 = 0;
      v10 = 1;
      v11 = 112;
      do
      {
        v12 = sub_22368C754(v15, (float *)((char *)v7 + v11 - 112), (float *)((char *)v7 + v11 - 8));
        v7 = *(_OWORD **)a1;
        v13 = *(_QWORD *)(a1 + 8);
        v9 += v12;
        *(_QWORD *)((char *)v7 + v11) = v9;
        ++v10;
        v11 += 104;
      }
      while (v10 < 0x4EC4EC4EC4EC4EC5 * ((v13 - (uint64_t)v7) >> 3));
    }
  }
}

void sub_22368BAE0(void **a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t *v14;
  uint64_t v15;
  float v16;
  float v17;
  int i;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  BOOL v30;
  _BOOL4 v31;
  double v32;
  double v34;
  uint64_t v36;
  int j;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v45;
  BOOL v46;
  _BOOL4 v47;
  double v48;
  double v50;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  sub_22368BE88(a6, a7, (_QWORD *)(a3 + 8), (_QWORD *)a9, &v59, &v58);
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56))
    v14 = &v58;
  else
    v14 = &v59;
  v15 = *v14;
  v57 = *v14;
  v17 = *(float *)a9;
  v16 = *(float *)(a9 + 4);
  for (i = -1; ; --i)
  {
    v20 = *a2;
    v19 = a2[1];
    v21 = *a2;
    v22 = fabs(v17);
    v23 = fabs(v21);
    v24 = fabs(v16);
    v25 = fabs(v19);
    if (v22 < v23)
      v22 = v23;
    if (v22 < v24)
      v22 = v24;
    if (v22 < v25)
      v22 = v25;
    v26 = v22 >= 1.0 ? v22 * 1000000000.0 : 1000000000.0;
    if (v17 != v20)
    {
      v27 = fabs(v17);
      if ((unint64_t)(*(_QWORD *)&v27 - 0x10000000000000) >> 53 >= 0x3FF && *(_QWORD *)&v27 != 0)
        break;
      v29 = fabs(*a2);
      v30 = (unint64_t)(*(_QWORD *)&v29 - 0x10000000000000) >> 53 <= 0x3FE || *(_QWORD *)&v29 == 0;
      if (!v30 || vabdd_f64(v17, v21) > v26 * 2.22044605e-16)
        break;
    }
    if (v16 == v19)
    {
      v31 = 1;
      if (i + 1 < -9)
        break;
    }
    else
    {
      v32 = fabs(v16);
      if ((unint64_t)(*(_QWORD *)&v32 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v32 != 0)
        break;
      v34 = fabs(v19);
      if ((unint64_t)(*(_QWORD *)&v34 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v34 != 0)
        break;
      v31 = vabdd_f64(v16, v19) <= v26 * 2.22044605e-16;
      if (i + 1 < -9)
        break;
    }
    if (!v31)
      break;
    sub_22368C1D8(a3, i, a6, a7, &v56);
    v36 = v56;
    *(_QWORD *)a9 = v56;
    v16 = *((float *)&v36 + 1);
    v17 = *(float *)&v36;
  }
  for (j = 1; ; ++j)
  {
    v38 = fabs(*(float *)&v15);
    v39 = fabs(v20);
    v40 = fabs(*((float *)&v15 + 1));
    v41 = fabs(v19);
    if (v38 < v39)
      v38 = v39;
    if (v38 < v40)
      v38 = v40;
    if (v38 < v41)
      v38 = v41;
    v42 = v38 >= 1.0 ? v38 * 1000000000.0 : 1000000000.0;
    if (v20 != *(float *)&v15)
    {
      v43 = fabs(*(float *)&v15);
      if ((unint64_t)(*(_QWORD *)&v43 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v43 != 0)
        break;
      v45 = fabs(v20);
      v46 = (unint64_t)(*(_QWORD *)&v45 - 0x10000000000000) >> 53 <= 0x3FE || *(_QWORD *)&v45 == 0;
      if (!v46 || vabdd_f64(*(float *)&v15, v20) > v42 * 2.22044605e-16)
        break;
    }
    if (v19 == *((float *)&v15 + 1))
    {
      v47 = 1;
      if ((j - 1) > 9)
        break;
    }
    else
    {
      v48 = fabs(*((float *)&v15 + 1));
      if ((unint64_t)(*(_QWORD *)&v48 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v48 != 0)
        break;
      v50 = fabs(v19);
      if ((unint64_t)(*(_QWORD *)&v50 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v50 != 0)
        break;
      v47 = vabdd_f64(*((float *)&v15 + 1), v19) <= v42 * 2.22044605e-16;
      if ((j - 1) > 9)
        break;
    }
    if (!v47)
      break;
    sub_22368C1D8(a3, j, a6, a7, &v56);
    v15 = v56;
    v57 = v56;
    v20 = *a2;
    v19 = a2[1];
  }
  sub_22368C2E8(a1, a4, a5, (_QWORD *)a9, (int *)a3, a8);
  sub_22368C534((char **)a1, a4, a5, &v57, (int *)a3);
}

uint64_t sub_22368BE88(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  if (*a3 == 1)
  {
    v7 = (_QWORD *)*a2;
    v6 = (_QWORD *)a2[1];
    v8 = ((uint64_t)v6 - *a2) >> 3;
    if (v6 == (_QWORD *)*a2)
      v13 = 0;
    else
      v13 = v8 + 1;
    v14 = ((v13 - 1) & ((a3[3] % (v13 - 1)) >> 63)) + a3[3] % (v13 - 1);
    v11 = v13 - v14;
    if (v13 >= v8 || v11 >= v8)
    {
      v12 = (_QWORD *)a2[1];
      if (v11 <= v8)
        v12 = &v7[v11 % v8];
    }
    else
    {
      v12 = &v6[-v14];
    }
    if (v11 < v8)
    {
LABEL_18:
      v6 = v12 - 1;
      goto LABEL_24;
    }
  }
  else
  {
    if (*a3)
      return 0;
    v7 = (_QWORD *)*a1;
    v6 = (_QWORD *)a1[1];
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if (v6 == (_QWORD *)*a1)
      v9 = 0;
    else
      v9 = v8 + 1;
    v10 = ((v9 - 1) & ((a3[3] % (v9 - 1)) >> 63)) + a3[3] % (v9 - 1);
    v11 = v9 - v10;
    if (v9 >= v8 || v11 >= v8)
    {
      v12 = (_QWORD *)a1[1];
      if (v11 <= v8)
        v12 = &v7[v11 % v8];
    }
    else
    {
      v12 = &v6[-v10];
    }
    if (v11 < v8)
      goto LABEL_18;
  }
  v15 = v11 - 1;
  if (v15 <= v8)
    v6 = &v7[v15 % v8];
LABEL_24:
  *a4 = *v6;
  if (*a3 == 1)
  {
    v17 = (_QWORD *)*a2;
    v16 = (_QWORD *)a2[1];
    v18 = ((uint64_t)v16 - *a2) >> 3;
    if (v16 == (_QWORD *)*a2)
      v23 = 0;
    else
      v23 = v18 + 1;
    v24 = ((v23 - 1) & (((a3[3] + 1) % (v23 - 1)) >> 63)) + (a3[3] + 1) % (v23 - 1);
    v21 = v23 - v24;
    if (v23 >= v18 || v21 >= v18)
    {
      v22 = (_QWORD *)a2[1];
      if (v21 <= v18)
        v22 = &v17[v21 % v18];
    }
    else
    {
      v22 = &v16[-v24];
    }
    if (v21 < v18)
    {
LABEL_41:
      v16 = v22 - 1;
      goto LABEL_47;
    }
  }
  else
  {
    if (*a3)
      return 0;
    v17 = (_QWORD *)*a1;
    v16 = (_QWORD *)a1[1];
    v18 = ((uint64_t)v16 - *a1) >> 3;
    if (v16 == (_QWORD *)*a1)
      v19 = 0;
    else
      v19 = v18 + 1;
    v20 = ((v19 - 1) & (((a3[3] + 1) % (v19 - 1)) >> 63)) + (a3[3] + 1) % (v19 - 1);
    v21 = v19 - v20;
    if (v19 >= v18 || v21 >= v18)
    {
      v22 = (_QWORD *)a1[1];
      if (v21 <= v18)
        v22 = &v17[v21 % v18];
    }
    else
    {
      v22 = &v16[-v20];
    }
    if (v21 < v18)
      goto LABEL_41;
  }
  v25 = v21 - 1;
  if (v25 <= v18)
    v16 = &v17[v25 % v18];
LABEL_47:
  *a5 = *v16;
  if (*a3 != 1)
  {
    if (!*a3)
    {
      v27 = (_QWORD *)*a1;
      v26 = (_QWORD *)a1[1];
      v28 = ((uint64_t)v26 - *a1) >> 3;
      if (v26 == (_QWORD *)*a1)
        v29 = 0;
      else
        v29 = v28 + 1;
      v30 = ((v29 - 1) & (((a3[3] + 2) % (v29 - 1)) >> 63)) + (a3[3] + 2) % (v29 - 1);
      v31 = v29 - v30;
      if (v29 >= v28 || v31 >= v28)
      {
        v32 = (_QWORD *)a1[1];
        if (v31 <= v28)
          v32 = &v27[v31 % v28];
      }
      else
      {
        v32 = &v26[-v30];
      }
      if (v31 < v28)
      {
        *a6 = *(v32 - 1);
        return 1;
      }
      goto LABEL_70;
    }
    return 0;
  }
  v27 = (_QWORD *)*a2;
  v26 = (_QWORD *)a2[1];
  v28 = ((uint64_t)v26 - *a2) >> 3;
  if (v26 == (_QWORD *)*a2)
    v34 = 0;
  else
    v34 = v28 + 1;
  v35 = ((v34 - 1) & (((a3[3] + 2) % (v34 - 1)) >> 63)) + (a3[3] + 2) % (v34 - 1);
  v31 = v34 - v35;
  if (v34 >= v28 || v31 >= v28)
  {
    v36 = (_QWORD *)a2[1];
    if (v31 <= v28)
      v36 = &v27[v31 % v28];
  }
  else
  {
    v36 = &v26[-v35];
  }
  if (v31 < v28)
  {
    *a6 = *(v36 - 1);
    return 1;
  }
LABEL_70:
  v37 = v31 - 1;
  if (v37 <= v28)
    *a6 = v27[v37 % v28];
  else
    *a6 = *v26;
  return 1;
}

uint64_t sub_22368C1D8@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(result + 8);
  if (v5 != 1)
  {
    if (v5)
      return result;
    v7 = (_QWORD *)*a3;
    v6 = (_QWORD *)a3[1];
    v8 = ((uint64_t)v6 - *a3) >> 3;
    if (v6 == (_QWORD *)*a3)
      v9 = 0;
    else
      v9 = v8 + 1;
    v10 = ((v9 - 1) & (((*(_QWORD *)(result + 32) + a2) % (v9 - 1)) >> 63)) + (*(_QWORD *)(result + 32) + a2) % (v9 - 1);
    v11 = v9 - v10;
    if (v9 >= v8 || v11 >= v8)
    {
      v12 = (_QWORD *)a3[1];
      if (v11 <= v8)
        v12 = &v7[v11 % v8];
    }
    else
    {
      v12 = &v6[-v10];
    }
    if (v11 < v8)
      goto LABEL_18;
LABEL_22:
    v15 = v11 - 1;
    if (v15 <= v8)
      v6 = &v7[v15 % v8];
    goto LABEL_24;
  }
  v7 = (_QWORD *)*a4;
  v6 = (_QWORD *)a4[1];
  v8 = ((uint64_t)v6 - *a4) >> 3;
  if (v6 == (_QWORD *)*a4)
    v13 = 0;
  else
    v13 = v8 + 1;
  v14 = ((v13 - 1) & (((*(_QWORD *)(result + 32) + a2) % (v13 - 1)) >> 63))
      + (*(_QWORD *)(result + 32) + a2) % (v13 - 1);
  v11 = v13 - v14;
  if (v13 >= v8 || v11 >= v8)
  {
    v12 = (_QWORD *)a4[1];
    if (v11 <= v8)
      v12 = &v7[v11 % v8];
  }
  else
  {
    v12 = &v6[-v14];
  }
  if (v11 >= v8)
    goto LABEL_22;
LABEL_18:
  v6 = v12 - 1;
LABEL_24:
  *a5 = *v6;
  return result;
}

void sub_22368C2E8(void **a1, uint64_t a2, int a3, _QWORD *a4, int *a5, int a6)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v29;
  _BYTE v30[44];

  v9 = *a5;
  v10 = *a4;
  *(_OWORD *)&v30[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v30[20] = *(_OWORD *)(a5 + 6);
  *(_QWORD *)&v30[36] = *((_QWORD *)a5 + 5);
  v12 = (char *)a1[1];
  v11 = (unint64_t)a1[2];
  if ((unint64_t)v12 < v11)
  {
    *(_OWORD *)(v12 + 8) = xmmword_2245F53E0;
    *(_OWORD *)(v12 + 60) = *(_OWORD *)v30;
    *(_QWORD *)v12 = v10;
    *((_QWORD *)v12 + 3) = a2;
    *((_DWORD *)v12 + 8) = a3;
    *(_QWORD *)(v12 + 44) = 0;
    *(_QWORD *)(v12 + 36) = 0;
    *((_DWORD *)v12 + 13) = 0;
    *((_DWORD *)v12 + 14) = v9;
    *(_OWORD *)(v12 + 76) = *(_OWORD *)&v30[16];
    *(_OWORD *)(v12 + 88) = *(_OWORD *)&v30[28];
    a1[1] = v12 + 104;
    if (!a6)
      return;
    goto LABEL_3;
  }
  v14 = (char *)*a1;
  v15 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (_BYTE *)*a1) >> 3);
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) > 0x276276276276276)
    sub_22367C394();
  v29 = a4;
  v17 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x13B13B13B13B13BLL)
    v18 = 0x276276276276276;
  else
    v18 = v16;
  if (v18 > 0x276276276276276)
    sub_223174E94();
  v19 = 104 * v18;
  v20 = (char *)operator new(104 * v18);
  v21 = &v20[104 * v15];
  *(_OWORD *)(v21 + 8) = xmmword_2245F53E0;
  *(_OWORD *)(v21 + 60) = *(_OWORD *)v30;
  *(_QWORD *)v21 = v10;
  *((_QWORD *)v21 + 3) = a2;
  *((_DWORD *)v21 + 8) = a3;
  *(_QWORD *)(v21 + 44) = 0;
  *(_QWORD *)(v21 + 36) = 0;
  *((_DWORD *)v21 + 13) = 0;
  *((_DWORD *)v21 + 14) = v9;
  *(_OWORD *)(v21 + 76) = *(_OWORD *)&v30[16];
  v22 = v21 + 104;
  *(_OWORD *)(v21 + 88) = *(_OWORD *)&v30[28];
  if (v12 != v14)
  {
    do
    {
      v23 = *((_QWORD *)v12 - 13);
      v12 -= 104;
      *((_QWORD *)v21 - 13) = v23;
      v21 -= 104;
      v24 = *(_OWORD *)(v12 + 8);
      *(_OWORD *)(v21 + 24) = *(_OWORD *)(v12 + 24);
      *(_OWORD *)(v21 + 8) = v24;
      v25 = *(_OWORD *)(v12 + 40);
      v26 = *(_OWORD *)(v12 + 56);
      v27 = *(_OWORD *)(v12 + 72);
      *(_OWORD *)(v21 + 88) = *(_OWORD *)(v12 + 88);
      *(_OWORD *)(v21 + 72) = v27;
      *(_OWORD *)(v21 + 56) = v26;
      *(_OWORD *)(v21 + 40) = v25;
    }
    while (v12 != v14);
    v12 = (char *)*a1;
  }
  *a1 = v21;
  a1[1] = v22;
  a1[2] = &v20[v19];
  if (v12)
    operator delete(v12);
  a4 = v29;
  a1[1] = v22;
  if (a6)
  {
LABEL_3:
    v13 = (uint64_t)a1[4] + 1;
    a1[3] = (void *)*a4;
    a1[4] = (void *)v13;
  }
}

